
from typing import Any
import math as _math

import pyfie as _fie
from pyfie._basic_types import _EnumRepr, _NumericalCtypable, _StructBase
import ctypes as _cty

# Dummy values

DUMMY_INT_ROOT = _cty.c_int()
DUMMY_DLONG_ROOT = _cty.c_longlong()
DUMMY_UDLONG_ROOT = _cty.c_ulonglong()
DUMMY_DOUBLE_ROOT = _cty.c_double()
DUMMY_INT = _cty.pointer(DUMMY_INT_ROOT)
DUMMY_DLONG = _cty.pointer(DUMMY_DLONG_ROOT)
DUMMY_UDLONG = _cty.pointer(DUMMY_UDLONG_ROOT)
DUMMY_DOUBLE = _cty.pointer(DUMMY_DOUBLE_ROOT)

class _REQUIRED_ARGUMENT:
    """必須引数を表すプレースホルダークラス"""
    def __repr__(self):
        return "<REQUIRED_ARGUMENT>"
    def __str__(self):
        return "<REQUIRED_ARGUMENT>"
# 必須引数を表すプレースホルダー値
REQUIRED_PLACEHOLDER = _REQUIRED_ARGUMENT()

# defines

__USE_ISOC99 = 1
NORMAL_RETURN = 0
ERROR_RETURN = -1
SYSERRNO_OFFSET = -10000
ERR_ILLEGAL_PARAM = -10002
ERR_NO_MEMORY = -10003
ERR_INVALID_ID = -10004
ERR_BROKEN_FILE = -10005
ERR_IO_TIMEOUT = -10010
ERR_IO_ABORT = -10011
ERR_EXT_CANCEL = -10020
ERR_LOCAL = -10888
ERR_DOPLE_OPEN = -10990
ERR_NOT_AVAILABLE = -10998
ERR_NOT_OPEN = -10999
EOF = -1
LONG_WORD = 4
BIT_MEMORY = 8
LONG_ACCESS = 32
OFF = 0
ON = 1
BLACK_COLOR = 0
WHITE_COLOR = 1
BLACK_WHITE_COLOR = 2
CONNECTION_4 = 4
CONNECTION_8 = 8
PIXEL_MASK_BASE_PATTERN = 2147483648
X_DIRECTION = 0
Y_DIRECTION = 1
XY_DIRECTION = 2
TRUE = 1
FALSE = 0
PI = 3.141592653589793
FLT_EPS = 1e-05
DBL_EPS = 1e-09
C8_MAX = 127
C8_MIN = -128
UC8_MAX = 255
S16_MAX = 32767
S16_MIN = -32768
US16_MAX = 65535
I32_MAX = 2147483647
I32_MIN = -2147483648
UI32_MAX = 4294967295
L64_MAX = 9223372036854775807
L64_MIN = -9223372036854775808
UL64_MAX = 18446744073709551615
DBL64_MAX = 1.7976931348623157e+308
DBL64_MIN = 2.2250738585072014e-308
FLT32_MAX = 3.402823466e+38
FLT32_MIN = 1.175494351e-38
F_IMG_MAX_CHANNELS = 16
F_FEATUREFLAG_XYRANGE = 1
F_FEATUREFLAG_AREA = 2
F_FEATUREFLAG_PERIMETER = 4
F_FEATUREFLAG_MOMENT1 = 8
F_FEATUREFLAG_MOMENT2 = 16
F_FEATUREFLAG_CENTERG = 32
F_FEATUREFLAG_XYDIFF = 64
F_FEATUREFLAG_RECT1AREA = 128
F_FEATUREFLAG_RECT1LRATIO = 256
F_FEATUREFLAG_RECT1SRATIO = 512
F_FEATUREFLAG_RECT2SIZE = 1024
F_FEATUREFLAG_RECT2AREA = 2048
F_FEATUREFLAG_RECT2LRATIO = 4096
F_FEATUREFLAG_RECT2SRATIO = 8192
F_FEATUREFLAG_EQUIELLIPSE = 16384
F_FEATUREFLAG_DISTANCEP = 32768
F_FEATUREFLAG_HOLENUM = 65536
F_FEATUREFLAG_HOLEAREA = 131072
F_FEATUREFLAG_HOLERATIO = 262144
F_BARCODE_EAN13 = 1
F_BARCODE_CODE39 = 2
F_BARCODE_CODE128 = 4
F_BARCODE_ITF = 8
F_BARCODE_NW7 = 16
F_BARCODE_EAN8 = 32
F_BARCODE_ALL = 63
F_CC_CALCULATED_VARIANCE = 1
F_CC_VALID_MAHALANOBIS = 2
F_FPU_EM_MASK = 3
F_FPU_EM_IM = 1
F_FPU_EM_DM = 2
F_FPU_EM_ZM = 4
F_FPU_EM_OM = 8
F_FPU_EM_UM = 16
F_FPU_EM_PM = 32
F_FPU_FZ_MASK = 32768
F_FPU_FZ_SAVE = 0
F_FPU_FZ_FLUSH = 32768
F_FPU_RC_MASK = 3072
F_FPU_RC_CHOP = 3072
F_FPU_RC_UP = 2048
F_FPU_RC_DOWN = 1024
F_FPU_RC_NEAR = 0
F_FPU_PC_MASK = 768
F_FPU_PC_24 = 0
F_FPU_PC_53 = 512
F_FPU_PC_64 = 768
F_EDGE_FEAT_NONE = 0
F_EDGE_FEAT_MAG_SUM = 1
F_EDGE_FEAT_MAG_SQRT = 2
F_EDGE_FEAT_DIRECT = 4
F_FPM_MAX_VERTEX_N = 12
F_FPM_MAX_SHAPE_N = 2
F_DATACHUNK_ID = 1413563462
F_DATAID_FMATRIX = 825241648
F_DATAID_FVECTOR = 842018864
F_DATAID_IMAGE = 858796080
F_DATAID_IMGCHUNK = 875573296
F_DATAID_CMPIMGCHUNK = 892350512
F_ML_PRE_TRIM_VECTOR = 1
F_ML_PRE_SCALE_VECTOR = 2
F_ML_DTREE_NO_CHILD = -1
F_ML_DTREE_NO_PARENT = -2
F_ML_DTREE_NODE_ROOT = 1
F_ML_DTREE_NODE_INTERNAL = 2
F_ML_DTREE_NODE_LEAF = 3
F_ML_BOOST_STOPRATE_INVALID = -1
F_OBJID_IMG_ROOT_GPU = -90000
F_OBJID_IMG_CHILD_GPU = -90001
F_OBJID_GS_PATTERN_GPU = -90002
F_OBJID_GS_GPU = -90003
F_OBJID_CS_TABLE_GPU = -90004


# enums

# 
MMX_MODE = 0
BIT32_MODE = 1
SSE2_MODE = 2
SIMD_MODE_NUM = 3


# f_err
F_ERR_NONE = 0
F_ERR_UNKNOWN = -1
F_ERR_UNINIT_LIB = -10001
F_ERR_UNSUPPORTED = -11000
F_ERR_NOMEMORY = -10003
F_ERR_FILE_IO = -11001
F_ERR_TIMEOUT = -11002
F_ERR_BUFFER_OVERFLOW = -20001
F_ERR_INVALID_PARAM = -10002
F_ERR_INVALID_OBJECT = -20000
F_ERR_INVALID_IMAGE = -20002
F_ERR_CALC_IMPOSSIBLE = -20003
F_ERR_CALC_OVERFLOW = -20004
F_ERR_NODATA = -20005
F_ERR_INVALID_INDEX = -20006
F_ERR_NOT_CALCULATED = -20007
F_ERR_PATTERN_NOT_FOUND = -20008
F_ERR_NOT_REGISTERED = -20009
F_ERR_MEASURE_RUN_OVERFLOW = -21000
F_ERR_MEASURE_BLOB_OVERFLOW = -21001
F_ERR_MEASURE_ROW_OVERFLOW = -21002
F_ERR_FFT_INVALID_SPEC = -30001
F_ERR_UNSUPPORTED_IMAGE_FILE = -40001
F_ERR_INTERRUPTED_IMAGE_IO = -40002
F_ERR_GS_NO_CONTRAST = -50000
F_ERR_CC_INVALID_ID = -60001
F_ERR_CC_INVALID_TABLE = -60002
F_ERR_FPM_NOFEATURE = -70001
F_ERR_NO_LICENCE = -2147483648


class f_err(_EnumRepr):
    enum_items = {}
    F_ERR_NONE = 0
    F_ERR_UNKNOWN = -1
    F_ERR_UNINIT_LIB = -10001
    F_ERR_UNSUPPORTED = -11000
    F_ERR_NOMEMORY = -10003
    F_ERR_FILE_IO = -11001
    F_ERR_TIMEOUT = -11002
    F_ERR_BUFFER_OVERFLOW = -20001
    F_ERR_INVALID_PARAM = -10002
    F_ERR_INVALID_OBJECT = -20000
    F_ERR_INVALID_IMAGE = -20002
    F_ERR_CALC_IMPOSSIBLE = -20003
    F_ERR_CALC_OVERFLOW = -20004
    F_ERR_NODATA = -20005
    F_ERR_INVALID_INDEX = -20006
    F_ERR_NOT_CALCULATED = -20007
    F_ERR_PATTERN_NOT_FOUND = -20008
    F_ERR_NOT_REGISTERED = -20009
    F_ERR_MEASURE_RUN_OVERFLOW = -21000
    F_ERR_MEASURE_BLOB_OVERFLOW = -21001
    F_ERR_MEASURE_ROW_OVERFLOW = -21002
    F_ERR_FFT_INVALID_SPEC = -30001
    F_ERR_UNSUPPORTED_IMAGE_FILE = -40001
    F_ERR_INTERRUPTED_IMAGE_IO = -40002
    F_ERR_GS_NO_CONTRAST = -50000
    F_ERR_CC_INVALID_ID = -60001
    F_ERR_CC_INVALID_TABLE = -60002
    F_ERR_FPM_NOFEATURE = -70001
    F_ERR_NO_LICENCE = -2147483648
    
# f_objtag
F_OBJID_IMG_ROOT = 1
F_OBJID_IMG_CHILD = 2
F_OBJID_REGION = 3
F_OBJID_IMG_STACK = 4
F_OBJID_MORPHOLOGY_SE = 10
F_OBJID_MEASURE_RESULT = 11
F_OBJID_FFTSPEC = 20
F_OBJID_CS_TABLE = 30
F_OBJID_BARCODE1D = 40
F_OBJID_GS = 50
F_OBJID_GS_PATTERN = 51
F_OBJID_COLOR_CHECK = 60
F_OBJID_FPM = 70
F_OBJID_FPM_FEATURE = 71
F_OBJID_GA_TABLE = 80
F_OBJID_NEURO = 90
F_OBJID_FUZZY = 100
F_OBJID_CALIB = 110
F_OBJID_LHOUGH = 120
F_OBJID_CG_VORONOI = 130
F_OBJID_CAMERA_CALIB_DATA = 140
F_OBJID_QR2D = 150
F_OBJID_DATAMATRIX = 151
F_OBJID_PRC_OBJECT = 181
F_OBJID_PRC_FONT_OBJECT = 182
F_OBJID_PRC_LAYOUT_OBJECT = 183
F_OBJID_ML = 300
F_OBJID_ML_SAMPLE = 301


class f_objtag(_EnumRepr):
    enum_items = {}
    F_OBJID_IMG_ROOT = 1
    F_OBJID_IMG_CHILD = 2
    F_OBJID_REGION = 3
    F_OBJID_IMG_STACK = 4
    F_OBJID_MORPHOLOGY_SE = 10
    F_OBJID_MEASURE_RESULT = 11
    F_OBJID_FFTSPEC = 20
    F_OBJID_CS_TABLE = 30
    F_OBJID_BARCODE1D = 40
    F_OBJID_GS = 50
    F_OBJID_GS_PATTERN = 51
    F_OBJID_COLOR_CHECK = 60
    F_OBJID_FPM = 70
    F_OBJID_FPM_FEATURE = 71
    F_OBJID_GA_TABLE = 80
    F_OBJID_NEURO = 90
    F_OBJID_FUZZY = 100
    F_OBJID_CALIB = 110
    F_OBJID_LHOUGH = 120
    F_OBJID_CG_VORONOI = 130
    F_OBJID_CAMERA_CALIB_DATA = 140
    F_OBJID_QR2D = 150
    F_OBJID_DATAMATRIX = 151
    F_OBJID_PRC_OBJECT = 181
    F_OBJID_PRC_FONT_OBJECT = 182
    F_OBJID_PRC_LAYOUT_OBJECT = 183
    F_OBJID_ML = 300
    F_OBJID_ML_SAMPLE = 301
    
# f_imgtype
F_IMG_BIN = 1
F_IMG_UC8 = 2
F_IMG_S16 = 3
F_IMG_US16 = 4
F_IMG_DOUBLE = 5
F_IMG_RGBQUAD = 6
F_IMG_I32 = 7
F_IMG_UI32 = 8
F_IMG_I64 = 9
F_IMG_FLOAT = 11
F_IMG_RGBTRIPLE = 12


class f_imgtype(_EnumRepr):
    enum_items = {}
    F_IMG_BIN = 1
    F_IMG_UC8 = 2
    F_IMG_S16 = 3
    F_IMG_US16 = 4
    F_IMG_DOUBLE = 5
    F_IMG_RGBQUAD = 6
    F_IMG_I32 = 7
    F_IMG_UI32 = 8
    F_IMG_I64 = 9
    F_IMG_FLOAT = 11
    F_IMG_RGBTRIPLE = 12
    
# f_color_img_type
F_COLOR_IMG_TYPE_UC8 = 1
F_COLOR_IMG_TYPE_RGBQ = 2
F_COLOR_IMG_TYPE_RGBTRI = 3


class f_color_img_type(_EnumRepr):
    enum_items = {}
    F_COLOR_IMG_TYPE_UC8 = 1
    F_COLOR_IMG_TYPE_RGBQ = 2
    F_COLOR_IMG_TYPE_RGBTRI = 3
    
# f_png_strategy
F_PNG_STRATEGY_DEFAULT = 0
F_PNG_STRATEGY_RLE = 3


class f_png_strategy(_EnumRepr):
    enum_items = {}
    F_PNG_STRATEGY_DEFAULT = 0
    F_PNG_STRATEGY_RLE = 3
    
# f_png_filter
F_PNG_FILTER_NONE = 8
F_PNG_FILTER_SUB = 16
F_PNG_FILTER_UP = 32
F_PNG_FILTER_AVG = 64
F_PNG_FILTER_PAETH = 128


class f_png_filter(_EnumRepr):
    enum_items = {}
    F_PNG_FILTER_NONE = 8
    F_PNG_FILTER_SUB = 16
    F_PNG_FILTER_UP = 32
    F_PNG_FILTER_AVG = 64
    F_PNG_FILTER_PAETH = 128
    
# f_tiff_compression
F_TIFF_COMPRESSION_NONE = 1
F_TIFF_COMPRESSION_DEFLATE = 2
F_TIFF_COMPRESSION_JPEG = 3
F_TIFF_COMPRESSION_CCITTFAX3 = 4
F_TIFF_COMPRESSION_CCITTFAX4 = 5


class f_tiff_compression(_EnumRepr):
    enum_items = {}
    F_TIFF_COMPRESSION_NONE = 1
    F_TIFF_COMPRESSION_DEFLATE = 2
    F_TIFF_COMPRESSION_JPEG = 3
    F_TIFF_COMPRESSION_CCITTFAX3 = 4
    F_TIFF_COMPRESSION_CCITTFAX4 = 5
    
# f_filter_mode
F_FILTER_X_MODE = 0
F_FILTER_Y_MODE = 1
F_FILTER_XY_MODE = 2
F_FILTER_SQRT_MODE = 3


class f_filter_mode(_EnumRepr):
    enum_items = {}
    F_FILTER_X_MODE = 0
    F_FILTER_Y_MODE = 1
    F_FILTER_XY_MODE = 2
    F_FILTER_SQRT_MODE = 3
    
# f_sobel_mode
F_SOBEL_X_MODE = 0
F_SOBEL_Y_MODE = 1
F_SOBEL_XY_MODE = 2
F_SOBEL_SQRT_MODE = 3


class f_sobel_mode(_EnumRepr):
    enum_items = {}
    F_SOBEL_X_MODE = 0
    F_SOBEL_Y_MODE = 1
    F_SOBEL_XY_MODE = 2
    F_SOBEL_SQRT_MODE = 3
    
# f_border_mode
F_BORDER_NONE = 0
F_BORDER_ZERO = 1
F_BORDER_VALUE = 2
F_BORDER_CONTINUOUS = 3
F_BORDER_REPEAT = 4
F_BORDER_MIRROR1 = 5
F_BORDER_MIRROR2 = 6


class f_border_mode(_EnumRepr):
    enum_items = {}
    F_BORDER_NONE = 0
    F_BORDER_ZERO = 1
    F_BORDER_VALUE = 2
    F_BORDER_CONTINUOUS = 3
    F_BORDER_REPEAT = 4
    F_BORDER_MIRROR1 = 5
    F_BORDER_MIRROR2 = 6
    
# f_steger_mode
F_RIDGE_MODE = 0
F_VALLEY_MODE = 1


class f_steger_mode(_EnumRepr):
    enum_items = {}
    F_RIDGE_MODE = 0
    F_VALLEY_MODE = 1
    
# f_se_shape
F_SE_LINE_FSLASH = 2
F_SE_LINE_BSLASH = 3
F_SE_LINE_VLINE = 4
F_SE_LINE_HLINE = 5
F_SE_LINE_CROSS = 6


class f_se_shape(_EnumRepr):
    enum_items = {}
    F_SE_LINE_FSLASH = 2
    F_SE_LINE_BSLASH = 3
    F_SE_LINE_VLINE = 4
    F_SE_LINE_HLINE = 5
    F_SE_LINE_CROSS = 6
    
# f_measure_color_mode
F_MEASURE_BLACKFG_WHITEBG = 0
F_MEASURE_WHITEFG_BLACKBG = 1
F_MEASURE_BLACKFG = 2
F_MEASURE_WHITEFG = 3


class f_measure_color_mode(_EnumRepr):
    enum_items = {}
    F_MEASURE_BLACKFG_WHITEBG = 0
    F_MEASURE_WHITEFG_BLACKBG = 1
    F_MEASURE_BLACKFG = 2
    F_MEASURE_WHITEFG = 3
    
# f_measure_special_sort_order
F_MEASURE_UP_TO_LEFT_RIGHT = 0
F_MEASURE_UP_TO_RIGHT_LEFT = 1
F_MEASURE_DOWN_TO_LEFT_RIGHT = 2
F_MEASURE_DOWN_TO_RIGHT_LEFT = 3
F_MEASURE_LEFT_TO_UP_DOWN = 4
F_MEASURE_LEFT_TO_DOWN_UP = 5
F_MEASURE_RIGHT_TO_UP_DOWN = 6
F_MEASURE_RIGHT_TO_DOWN_UP = 7


class f_measure_special_sort_order(_EnumRepr):
    enum_items = {}
    F_MEASURE_UP_TO_LEFT_RIGHT = 0
    F_MEASURE_UP_TO_RIGHT_LEFT = 1
    F_MEASURE_DOWN_TO_LEFT_RIGHT = 2
    F_MEASURE_DOWN_TO_RIGHT_LEFT = 3
    F_MEASURE_LEFT_TO_UP_DOWN = 4
    F_MEASURE_LEFT_TO_DOWN_UP = 5
    F_MEASURE_RIGHT_TO_UP_DOWN = 6
    F_MEASURE_RIGHT_TO_DOWN_UP = 7
    
# f_measure_feature_type
F_FEATURE_NONE = 0
F_FEATURE_COLOR = 1
F_FEATURE_XMIN = 2
F_FEATURE_YMIN = 3
F_FEATURE_XMAX = 4
F_FEATURE_YMAX = 5
F_FEATURE_XMIN_AT_YMIN = 6
F_FEATURE_XMAX_AT_YMAX = 7
F_FEATURE_YMIN_AT_XMAX = 8
F_FEATURE_YMAX_AT_XMIN = 9
F_FEATURE_XDIFF = 10
F_FEATURE_YDIFF = 11
F_FEATURE_SUMX = 12
F_FEATURE_SUMY = 13
F_FEATURE_SUMX2 = 14
F_FEATURE_SUMY2 = 15
F_FEATURE_SUMXY = 16
F_FEATURE_AREA = 17
F_FEATURE_CENTERX = 18
F_FEATURE_CENTERY = 19
F_FEATURE_RECT1AREA = 20
F_FEATURE_RECT1LRATIO = 21
F_FEATURE_RECT1SRATIO = 22
F_FEATURE_LSIZE = 23
F_FEATURE_WSIZE = 24
F_FEATURE_RECT2AREA = 25
F_FEATURE_RECT2LRATIO = 26
F_FEATURE_RECT2SRATIO = 27
F_FEATURE_MAJORAXIS = 28
F_FEATURE_MINORAXIS = 29
F_FEATURE_AXISTHETA = 30
F_FEATURE_AXISRATIO = 31
F_FEATURE_DIAMETER_EQUIDISK = 32
F_FEATURE_DIAMETER_EQUICIRCLE = 33
F_FEATURE_CIRCULARITY1 = 34
F_FEATURE_CIRCULARITY2 = 35
F_FEATURE_CIRCULARITY3 = 36
F_FEATURE_CONVEX_AREA = 37
F_FEATURE_CONVEX_PERIM = 38
F_FEATURE_CONVEX_AREARATIO = 39
F_FEATURE_CONVEX_PERIMRATIO = 40
F_FEATURE_FERET_MAX = 41
F_FEATURE_FERET_MIN = 42
F_FEATURE_FMAX_THETA = 43
F_FEATURE_FMIN_THETA = 44
F_FEATURE_DPMIN = 45
F_FEATURE_DPMAX = 46
F_FEATURE_DPAVE = 47
F_FEATURE_DPSIGMA = 48
F_FEATURE_DCMAX = 49
F_FEATURE_DCMIN = 50
F_FEATURE_DCAVE = 51
F_FEATURE_DSMAX = 52
F_FEATURE_DSMIN = 53
F_FEATURE_DSAVE = 54
F_FEATURE_NS = 55
F_FEATURE_PERIM = 56
F_FEATURE_ST = 57
F_FEATURE_SC = 58
F_FEATURE_HOLES = 59
F_FEATURE_HRATIO = 60
F_FEATURE_PPS = 61
F_FEATURE_AXISTHETA_CYCLIC = 62
F_FEATURE_FMAX_THETA_CYCLIC = 63
F_FEATURE_FMIN_THETA_CYCLIC = 64
F_FEATURE_M10 = 12
F_FEATURE_M01 = 13
F_FEATURE_M20 = 14
F_FEATURE_M02 = 15
F_FEATURE_M11 = 16
F_FEATURE_M30 = 65
F_FEATURE_M03 = 66
F_FEATURE_M21 = 67
F_FEATURE_M12 = 68
F_FEATURE_MG20 = 69
F_FEATURE_MG02 = 70
F_FEATURE_MG11 = 71
F_FEATURE_MG30 = 72
F_FEATURE_MG03 = 73
F_FEATURE_MG21 = 74
F_FEATURE_MG12 = 75
F_FEATURE_HU_MOMENT0 = 76
F_FEATURE_HU_MOMENT1 = 77
F_FEATURE_HU_MOMENT2 = 78
F_FEATURE_HU_MOMENT3 = 79
F_FEATURE_HU_MOMENT4 = 80
F_FEATURE_HU_MOMENT5 = 81
F_FEATURE_HU_MOMENT6 = 82


class f_measure_feature_type(_EnumRepr):
    enum_items = {}
    F_FEATURE_NONE = 0
    F_FEATURE_COLOR = 1
    F_FEATURE_XMIN = 2
    F_FEATURE_YMIN = 3
    F_FEATURE_XMAX = 4
    F_FEATURE_YMAX = 5
    F_FEATURE_XMIN_AT_YMIN = 6
    F_FEATURE_XMAX_AT_YMAX = 7
    F_FEATURE_YMIN_AT_XMAX = 8
    F_FEATURE_YMAX_AT_XMIN = 9
    F_FEATURE_XDIFF = 10
    F_FEATURE_YDIFF = 11
    F_FEATURE_SUMX = 12
    F_FEATURE_SUMY = 13
    F_FEATURE_SUMX2 = 14
    F_FEATURE_SUMY2 = 15
    F_FEATURE_SUMXY = 16
    F_FEATURE_AREA = 17
    F_FEATURE_CENTERX = 18
    F_FEATURE_CENTERY = 19
    F_FEATURE_RECT1AREA = 20
    F_FEATURE_RECT1LRATIO = 21
    F_FEATURE_RECT1SRATIO = 22
    F_FEATURE_LSIZE = 23
    F_FEATURE_WSIZE = 24
    F_FEATURE_RECT2AREA = 25
    F_FEATURE_RECT2LRATIO = 26
    F_FEATURE_RECT2SRATIO = 27
    F_FEATURE_MAJORAXIS = 28
    F_FEATURE_MINORAXIS = 29
    F_FEATURE_AXISTHETA = 30
    F_FEATURE_AXISRATIO = 31
    F_FEATURE_DIAMETER_EQUIDISK = 32
    F_FEATURE_DIAMETER_EQUICIRCLE = 33
    F_FEATURE_CIRCULARITY1 = 34
    F_FEATURE_CIRCULARITY2 = 35
    F_FEATURE_CIRCULARITY3 = 36
    F_FEATURE_CONVEX_AREA = 37
    F_FEATURE_CONVEX_PERIM = 38
    F_FEATURE_CONVEX_AREARATIO = 39
    F_FEATURE_CONVEX_PERIMRATIO = 40
    F_FEATURE_FERET_MAX = 41
    F_FEATURE_FERET_MIN = 42
    F_FEATURE_FMAX_THETA = 43
    F_FEATURE_FMIN_THETA = 44
    F_FEATURE_DPMIN = 45
    F_FEATURE_DPMAX = 46
    F_FEATURE_DPAVE = 47
    F_FEATURE_DPSIGMA = 48
    F_FEATURE_DCMAX = 49
    F_FEATURE_DCMIN = 50
    F_FEATURE_DCAVE = 51
    F_FEATURE_DSMAX = 52
    F_FEATURE_DSMIN = 53
    F_FEATURE_DSAVE = 54
    F_FEATURE_NS = 55
    F_FEATURE_PERIM = 56
    F_FEATURE_ST = 57
    F_FEATURE_SC = 58
    F_FEATURE_HOLES = 59
    F_FEATURE_HRATIO = 60
    F_FEATURE_PPS = 61
    F_FEATURE_AXISTHETA_CYCLIC = 62
    F_FEATURE_FMAX_THETA_CYCLIC = 63
    F_FEATURE_FMIN_THETA_CYCLIC = 64
    F_FEATURE_M10 = 12
    F_FEATURE_M01 = 13
    F_FEATURE_M20 = 14
    F_FEATURE_M02 = 15
    F_FEATURE_M11 = 16
    F_FEATURE_M30 = 65
    F_FEATURE_M03 = 66
    F_FEATURE_M21 = 67
    F_FEATURE_M12 = 68
    F_FEATURE_MG20 = 69
    F_FEATURE_MG02 = 70
    F_FEATURE_MG11 = 71
    F_FEATURE_MG30 = 72
    F_FEATURE_MG03 = 73
    F_FEATURE_MG21 = 74
    F_FEATURE_MG12 = 75
    F_FEATURE_HU_MOMENT0 = 76
    F_FEATURE_HU_MOMENT1 = 77
    F_FEATURE_HU_MOMENT2 = 78
    F_FEATURE_HU_MOMENT3 = 79
    F_FEATURE_HU_MOMENT4 = 80
    F_FEATURE_HU_MOMENT5 = 81
    F_FEATURE_HU_MOMENT6 = 82
    
# f_fft_normalize_type
F_FFT_DIV_BY_ONE = 16
F_FFT_DIV_FWD_BY_N = 32
F_FFT_DIV_INV_BY_N = 48
F_FFT_DIV_BY_SQRTN = 64


class f_fft_normalize_type(_EnumRepr):
    enum_items = {}
    F_FFT_DIV_BY_ONE = 16
    F_FFT_DIV_FWD_BY_N = 32
    F_FFT_DIV_INV_BY_N = 48
    F_FFT_DIV_BY_SQRTN = 64
    
# f_fft_data_type
F_1D_FFT_FCOMPLEX = 8
F_1D_FFT_DOUBLEC = 4
F_1D_FFT_REAL = 2
F_1D_FFT_PACK = 1
F_2D_FFT_FCOMPLEX = 128
F_2D_FFT_DOUBLEC = 64
F_2D_FFT_REAL = 32


class f_fft_data_type(_EnumRepr):
    enum_items = {}
    F_1D_FFT_FCOMPLEX = 8
    F_1D_FFT_DOUBLEC = 4
    F_1D_FFT_REAL = 2
    F_1D_FFT_PACK = 1
    F_2D_FFT_FCOMPLEX = 128
    F_2D_FFT_DOUBLEC = 64
    F_2D_FFT_REAL = 32
    
# f_fft_direction
F_FFT_FORWARD = 17
F_FFT_INVERSE = 34
F_FFT_BIDIRECTION = 68


class f_fft_direction(_EnumRepr):
    enum_items = {}
    F_FFT_FORWARD = 17
    F_FFT_INVERSE = 34
    F_FFT_BIDIRECTION = 68
    
# f_draw_fill_mode
F_DRAW_LINE = 0
F_DRAW_FILL_IN = 1
F_DRAW_FILL_OUT = 2


class f_draw_fill_mode(_EnumRepr):
    enum_items = {}
    F_DRAW_LINE = 0
    F_DRAW_FILL_IN = 1
    F_DRAW_FILL_OUT = 2
    
# f_draw_curve_mode
F_DRAW_CUBIC_BSPLINE = 0
F_DRAW_QUADRATIC_BEZIER = 1
F_DRAW_CUBIC_CATMULL_ROM = 2
F_DRAW_CUBIC_BEZIER = 3
F_DRAW_POLYGONAL_LINE = 99


class f_draw_curve_mode(_EnumRepr):
    enum_items = {}
    F_DRAW_CUBIC_BSPLINE = 0
    F_DRAW_QUADRATIC_BEZIER = 1
    F_DRAW_CUBIC_CATMULL_ROM = 2
    F_DRAW_CUBIC_BEZIER = 3
    F_DRAW_POLYGONAL_LINE = 99
    
# f_distance_transform_mode
F_DT_CHESS_BOARD = 1
F_DT_CITY_BLOCK = 2
F_DT_EUCLIDEAN_APPROXI = 3
F_DT_EUCLIDEAN_EXACT = 4


class f_distance_transform_mode(_EnumRepr):
    enum_items = {}
    F_DT_CHESS_BOARD = 1
    F_DT_CITY_BLOCK = 2
    F_DT_EUCLIDEAN_APPROXI = 3
    F_DT_EUCLIDEAN_EXACT = 4
    
# f_color_space
F_CS_RGB = 0
F_CS_GRAY = 1
F_CS_XYZ = 2
F_CS_YUV = 3
F_CS_YIQ = 4
F_CS_I1I2I3 = 5
F_CS_HSV_SMITH = 6
F_CS_HSV_JOBLOVE = 7
F_CS_LAB = 8
F_CS_HSV_FAST = 9
F_CS_LAB_FAST = 10


class f_color_space(_EnumRepr):
    enum_items = {}
    F_CS_RGB = 0
    F_CS_GRAY = 1
    F_CS_XYZ = 2
    F_CS_YUV = 3
    F_CS_YIQ = 4
    F_CS_I1I2I3 = 5
    F_CS_HSV_SMITH = 6
    F_CS_HSV_JOBLOVE = 7
    F_CS_LAB = 8
    F_CS_HSV_FAST = 9
    F_CS_LAB_FAST = 10
    
# f_coord_mode
F_PT_UPPER = 1
F_PT_LOWER = 2
F_PT_LEFT = 3
F_PT_RIGHT = 4


class f_coord_mode(_EnumRepr):
    enum_items = {}
    F_PT_UPPER = 1
    F_PT_LOWER = 2
    F_PT_LEFT = 3
    F_PT_RIGHT = 4
    
# f_sampling_mode
F_SAMPLING_NN = 1
F_SAMPLING_BILINEAR = 2
F_SAMPLING_CUBIC = 4
F_SAMPLING_LANCZOS = 8
F_SAMPLING_SUPER = 16
F_SAMPLING_ADAPT = 32


class f_sampling_mode(_EnumRepr):
    enum_items = {}
    F_SAMPLING_NN = 1
    F_SAMPLING_BILINEAR = 2
    F_SAMPLING_CUBIC = 4
    F_SAMPLING_LANCZOS = 8
    F_SAMPLING_SUPER = 16
    F_SAMPLING_ADAPT = 32
    
# f_comp_filter
F_COMP_MODE_SMOOTH = 0
F_COMP_MODE_MIN = 1
F_COMP_MODE_MAX = 2
F_COMP_MODE_AVERAGE2 = 3


class f_comp_filter(_EnumRepr):
    enum_items = {}
    F_COMP_MODE_SMOOTH = 0
    F_COMP_MODE_MIN = 1
    F_COMP_MODE_MAX = 2
    F_COMP_MODE_AVERAGE2 = 3
    
# f_gs2_mode
F_GS2_NORMAL_MODE = 1
F_GS2_HIGH_MODE = 2
F_GS2_SUPER_MODE = 3
F_GS2_ULTRA_SUPER_MODE = 4


class f_gs2_mode(_EnumRepr):
    enum_items = {}
    F_GS2_NORMAL_MODE = 1
    F_GS2_HIGH_MODE = 2
    F_GS2_SUPER_MODE = 3
    F_GS2_ULTRA_SUPER_MODE = 4
    
# f_gs2_subpxl_neib
F_GS2_SUBPXL_NEIB_4 = 0
F_GS2_SUBPXL_NEIB_8 = 1


class f_gs2_subpxl_neib(_EnumRepr):
    enum_items = {}
    F_GS2_SUBPXL_NEIB_4 = 0
    F_GS2_SUBPXL_NEIB_8 = 1
    
# f_qr_mode
F_QR_NORMAL_EFFORT = 100
F_QR_MAXIMUM_EFFORT = 101


class f_qr_mode(_EnumRepr):
    enum_items = {}
    F_QR_NORMAL_EFFORT = 100
    F_QR_MAXIMUM_EFFORT = 101
    
# f_qr_binarize_mode
F_QR_BIN_SHIFT_AVERAGE = 0
F_QR_BIN_FIX = 1
F_QR_BIN_DISCRIMINATION = 2
F_QR_BIN_SHIFT_AVERAGE_OFFSET = 3
F_QR_BIN_KITTLER = 4


class f_qr_binarize_mode(_EnumRepr):
    enum_items = {}
    F_QR_BIN_SHIFT_AVERAGE = 0
    F_QR_BIN_FIX = 1
    F_QR_BIN_DISCRIMINATION = 2
    F_QR_BIN_SHIFT_AVERAGE_OFFSET = 3
    F_QR_BIN_KITTLER = 4
    
# f_dm_color_type
F_DM_DARK_ON_LIGHT = 0
F_DM_LIGHT_ON_DARK = 1


class f_dm_color_type(_EnumRepr):
    enum_items = {}
    F_DM_DARK_ON_LIGHT = 0
    F_DM_LIGHT_ON_DARK = 1
    
# f_dm_symbol_type
F_DM_SYMBOL_SQUARE = 1
F_DM_SYMBOL_RECTANGLE = 2
F_DM_SYMBOL_ALL = 3


class f_dm_symbol_type(_EnumRepr):
    enum_items = {}
    F_DM_SYMBOL_SQUARE = 1
    F_DM_SYMBOL_RECTANGLE = 2
    F_DM_SYMBOL_ALL = 3
    
# f_colorcheck_norm_type
F_CC_CHEBYSHEV = 1
F_CC_MANHATTAN = 2
F_CC_EUCLIDEAN = 4
F_CC_WEIGHTED_EUCLIDEAN = 5
F_CC_MAHALANOBIS = 6
F_CC_VARIANCE = 98
F_CC_TOLERANCE = 99


class f_colorcheck_norm_type(_EnumRepr):
    enum_items = {}
    F_CC_CHEBYSHEV = 1
    F_CC_MANHATTAN = 2
    F_CC_EUCLIDEAN = 4
    F_CC_WEIGHTED_EUCLIDEAN = 5
    F_CC_MAHALANOBIS = 6
    F_CC_VARIANCE = 98
    F_CC_TOLERANCE = 99
    
# f_fpm_mode
F_FPM_NORMAL_MODE = 0
F_FPM_SPEED_MODE = 1


class f_fpm_mode(_EnumRepr):
    enum_items = {}
    F_FPM_NORMAL_MODE = 0
    F_FPM_SPEED_MODE = 1
    
# f_fpm_featedge
F_FPM_CORR_EDGE = 0
F_FPM_SOBEL_EDGE = 1
F_FPM_CORR_MAX_EDGE = 2
F_FPM_SOBEL_MAX_EDGE = 3
F_FPM_GROOVE_EDGE = 4


class f_fpm_featedge(_EnumRepr):
    enum_items = {}
    F_FPM_CORR_EDGE = 0
    F_FPM_SOBEL_EDGE = 1
    F_FPM_CORR_MAX_EDGE = 2
    F_FPM_SOBEL_MAX_EDGE = 3
    F_FPM_GROOVE_EDGE = 4
    
# f_fpm_polarity
F_FPM_SAME_POLARITY = 0
F_FPM_REVERSE_POLARITY = 1
F_FPM_EITHER_POLARITY = 2


class f_fpm_polarity(_EnumRepr):
    enum_items = {}
    F_FPM_SAME_POLARITY = 0
    F_FPM_REVERSE_POLARITY = 1
    F_FPM_EITHER_POLARITY = 2
    
# f_fpm_markshape
F_FPM_SHAPE_AUTO = -1
F_FPM_SHAPE_CIRC = 0
F_FPM_SHAPE_RECT = 1
F_FPM_SHAPE_CROSS = 2


class f_fpm_markshape(_EnumRepr):
    enum_items = {}
    F_FPM_SHAPE_AUTO = -1
    F_FPM_SHAPE_CIRC = 0
    F_FPM_SHAPE_RECT = 1
    F_FPM_SHAPE_CROSS = 2
    
# f_fpm_pose_boundary_mode
F_FPM_POSE_UNBOUNDED = 0
F_FPM_POSE_BOUNDED = 1
F_FPM_POSE_DELETE_OUT_OF_BOUND = 2


class f_fpm_pose_boundary_mode(_EnumRepr):
    enum_items = {}
    F_FPM_POSE_UNBOUNDED = 0
    F_FPM_POSE_BOUNDED = 1
    F_FPM_POSE_DELETE_OUT_OF_BOUND = 2
    
# f_cfa_type
F_CFA_RGGB = 0
F_CFA_GRBG = 1
F_CFA_GBRG = 2
F_CFA_BGGR = 3


class f_cfa_type(_EnumRepr):
    enum_items = {}
    F_CFA_RGGB = 0
    F_CFA_GRBG = 1
    F_CFA_GBRG = 2
    F_CFA_BGGR = 3
    
# f_direction
F_DIRECT_VERT_HORIZ = 0
F_DIRECT_HORIZ_VERT = 1
F_DIRECT_VERT = 2
F_DIRECT_HORIZ = 3
F_DIRECT_RIGHT = 4
F_DIRECT_0 = 4
F_DIRECT_LEFT = 5
F_DIRECT_180 = 5
F_DIRECT_DOWN = 6
F_DIRECT_90 = 6
F_DIRECT_UPPER = 7
F_DIRECT_270 = 7
F_DIRECT_45 = 8
F_DIRECT_135 = 9
F_DIRECT_225 = 10
F_DIRECT_315 = 11
F_DIRECT_MAX4 = 12
F_DIRECT_MAX8 = 13


class f_direction(_EnumRepr):
    enum_items = {}
    F_DIRECT_VERT_HORIZ = 0
    F_DIRECT_HORIZ_VERT = 1
    F_DIRECT_VERT = 2
    F_DIRECT_HORIZ = 3
    F_DIRECT_RIGHT = 4
    F_DIRECT_0 = 4
    F_DIRECT_LEFT = 5
    F_DIRECT_180 = 5
    F_DIRECT_DOWN = 6
    F_DIRECT_90 = 6
    F_DIRECT_UPPER = 7
    F_DIRECT_270 = 7
    F_DIRECT_45 = 8
    F_DIRECT_135 = 9
    F_DIRECT_225 = 10
    F_DIRECT_315 = 11
    F_DIRECT_MAX4 = 12
    F_DIRECT_MAX8 = 13
    
# f_line_detection_mode
F_LINE_DIRECT_NORMAL = 0
F_LINE_DIRECT_NUM = 1
F_LINE_DIRECT_DIST_A = 2
F_LINE_DIRECT_DIST_B = 3
F_LINE_DETECTION_NORMAL = 0
F_LINE_DETECTION_NUM = 2
F_LINE_DETECTION_DIST_A = 1
F_LINE_DETECTION_DIST_B = 3


class f_line_detection_mode(_EnumRepr):
    enum_items = {}
    F_LINE_DIRECT_NORMAL = 0
    F_LINE_DIRECT_NUM = 1
    F_LINE_DIRECT_DIST_A = 2
    F_LINE_DIRECT_DIST_B = 3
    F_LINE_DETECTION_NORMAL = 0
    F_LINE_DETECTION_NUM = 2
    F_LINE_DETECTION_DIST_A = 1
    F_LINE_DETECTION_DIST_B = 3
    
# f_ga_type
F_GA_INT_TYPE = 0
F_GA_FLOAT_TYPE = 1
F_GA_ORDER_TYPE = 2


class f_ga_type(_EnumRepr):
    enum_items = {}
    F_GA_INT_TYPE = 0
    F_GA_FLOAT_TYPE = 1
    F_GA_ORDER_TYPE = 2
    
# f_ga_select
F_GA_PROPORT_SELECT = 0
F_GA_EXPECT_SELECT = 1
F_GA_RANK_SELECT = 2
F_GA_RANDOM_SELECT = 3


class f_ga_select(_EnumRepr):
    enum_items = {}
    F_GA_PROPORT_SELECT = 0
    F_GA_EXPECT_SELECT = 1
    F_GA_RANK_SELECT = 2
    F_GA_RANDOM_SELECT = 3
    
# f_ga_cross
F_GA_ONE_POINT_CROSS = 0
F_GA_TWO_POINT_CROSS = 1
F_GA_UNIFORM_CROSS = 2
F_GA_PARTIAL_CROSS = 3


class f_ga_cross(_EnumRepr):
    enum_items = {}
    F_GA_ONE_POINT_CROSS = 0
    F_GA_TWO_POINT_CROSS = 1
    F_GA_UNIFORM_CROSS = 2
    F_GA_PARTIAL_CROSS = 3
    
# f_ga_alter
F_GA_NORMAL_ALTERNATE = 0
F_GA_ELITE_ALTERNATE = 1
F_GA_MERGE_ALTERNATE = 2


class f_ga_alter(_EnumRepr):
    enum_items = {}
    F_GA_NORMAL_ALTERNATE = 0
    F_GA_ELITE_ALTERNATE = 1
    F_GA_MERGE_ALTERNATE = 2
    
# f_ga_end
F_GA_MAX_FITNESS_END = 0
F_GA_MEAN_FITNESS_END = 1
F_GA_STAGNATION_END = 2
F_GA_NO_CONDITION_END = 3


class f_ga_end(_EnumRepr):
    enum_items = {}
    F_GA_MAX_FITNESS_END = 0
    F_GA_MEAN_FITNESS_END = 1
    F_GA_STAGNATION_END = 2
    F_GA_NO_CONDITION_END = 3
    
# f_nn_func_type
F_NN_LINEAR_FUNC = 0
F_NN_SIGMOID_FUNC = 1
F_NN_TANH_FUNC = 2


class f_nn_func_type(_EnumRepr):
    enum_items = {}
    F_NN_LINEAR_FUNC = 0
    F_NN_SIGMOID_FUNC = 1
    F_NN_TANH_FUNC = 2
    
# f_cg_seg_status
F_CG_SGMT_CROSS = 1
F_CG_SGMT_NOT_CROSS = 2
F_CG_SGMT_OVERLAP = 3
F_CG_SGMT_COINCIDE = 4
F_CG_SGMT_TOUCH = 5
F_CG_SGMT_JOINT = 6


class f_cg_seg_status(_EnumRepr):
    enum_items = {}
    F_CG_SGMT_CROSS = 1
    F_CG_SGMT_NOT_CROSS = 2
    F_CG_SGMT_OVERLAP = 3
    F_CG_SGMT_COINCIDE = 4
    F_CG_SGMT_TOUCH = 5
    F_CG_SGMT_JOINT = 6
    
# f_cg_pnt_pos
F_CG_INNER_PNT = 1
F_CG_NOT_INNER_PNT = 2
F_CG_OUTER_PNT = 3
F_CG_BOUNDARY_PNT = 4


class f_cg_pnt_pos(_EnumRepr):
    enum_items = {}
    F_CG_INNER_PNT = 1
    F_CG_NOT_INNER_PNT = 2
    F_CG_OUTER_PNT = 3
    F_CG_BOUNDARY_PNT = 4
    
# f_cg_clp3d_cross
F_CG_CLP3D_CROSS = 0
F_CG_CLP3D_NOT_CROSS = 1
F_CG_CLP3D_TOUCH = 2


class f_cg_clp3d_cross(_EnumRepr):
    enum_items = {}
    F_CG_CLP3D_CROSS = 0
    F_CG_CLP3D_NOT_CROSS = 1
    F_CG_CLP3D_TOUCH = 2
    
# f_cg_vrni_egde_type
F_CG_SEGMENT_TYPE = 0
F_CG_ST_PNT_RAY = 1
F_CG_ED_PNT_RAY = 2
F_CG_LINE_TYPE = 3


class f_cg_vrni_egde_type(_EnumRepr):
    enum_items = {}
    F_CG_SEGMENT_TYPE = 0
    F_CG_ST_PNT_RAY = 1
    F_CG_ED_PNT_RAY = 2
    F_CG_LINE_TYPE = 3
    
# f_cg_vrni_region_bound
F_CG_BND_RGN = 0
F_CG_UNBND_RGN = 1


class f_cg_vrni_region_bound(_EnumRepr):
    enum_items = {}
    F_CG_BND_RGN = 0
    F_CG_UNBND_RGN = 1
    
# f_bayer_method
F_BAYER_BILINEAR = 0
F_BAYER_CUBIC = 1
F_BAYER_EASY = 2


class f_bayer_method(_EnumRepr):
    enum_items = {}
    F_BAYER_BILINEAR = 0
    F_BAYER_CUBIC = 1
    F_BAYER_EASY = 2
    
# f_paired_se
F_SE_GOLAY_L4 = 0
F_SE_GOLAY_L8 = 1
F_SE_GOLAY_E4 = 2
F_SE_GOLAY_E8 = 3
F_SE_GOLAY_I4 = 4
F_SE_GOLAY_I8 = 5


class f_paired_se(_EnumRepr):
    enum_items = {}
    F_SE_GOLAY_L4 = 0
    F_SE_GOLAY_L8 = 1
    F_SE_GOLAY_E4 = 2
    F_SE_GOLAY_E8 = 3
    F_SE_GOLAY_I4 = 4
    F_SE_GOLAY_I8 = 5
    
# f_edge1d_filter
F_EDGE1D_DOG = 0
F_EDGE1D_CORR = 1


class f_edge1d_filter(_EnumRepr):
    enum_items = {}
    F_EDGE1D_DOG = 0
    F_EDGE1D_CORR = 1
    
# f_edge1d_edge_direction
F_DRK_TO_BRI = 0
F_BRI_TO_DRK = 1
F_DTC_BOTH = 2


class f_edge1d_edge_direction(_EnumRepr):
    enum_items = {}
    F_DRK_TO_BRI = 0
    F_BRI_TO_DRK = 1
    F_DTC_BOTH = 2
    
# f_diff_type
F_ABSOLUTE_THR = 0
F_RELATIVE_THR = 1


class f_diff_type(_EnumRepr):
    enum_items = {}
    F_ABSOLUTE_THR = 0
    F_RELATIVE_THR = 1
    
# f_edge1d_sort_mode
F_MAG_SORT = 0
F_POS_SORT = 1


class f_edge1d_sort_mode(_EnumRepr):
    enum_items = {}
    F_MAG_SORT = 0
    F_POS_SORT = 1
    
# f_edge1d_projection_mode
F_PROJECTION_BOX = 0
F_PROJECTION_FAN = 1


class f_edge1d_projection_mode(_EnumRepr):
    enum_items = {}
    F_PROJECTION_BOX = 0
    F_PROJECTION_FAN = 1
    
# fie_calib_model_type
F_CALIB_MODEL_NONE = 0
F_CALIB_MODEL_CIRCLE = 1


class fie_calib_model_type(_EnumRepr):
    enum_items = {}
    F_CALIB_MODEL_NONE = 0
    F_CALIB_MODEL_CIRCLE = 1
    
# f_pfit_calc_mode
F_PFIT_LSQ = 0
F_PFIT_LSQ_SCALE = 1
F_PFIT_RBST = 2
F_PFIT_RBST_SCALE = 3
F_PFIT_MINMAX = 4
F_PFIT_MINMAX_SCALE = 5


class f_pfit_calc_mode(_EnumRepr):
    enum_items = {}
    F_PFIT_LSQ = 0
    F_PFIT_LSQ_SCALE = 1
    F_PFIT_RBST = 2
    F_PFIT_RBST_SCALE = 3
    F_PFIT_MINMAX = 4
    F_PFIT_MINMAX_SCALE = 5
    
# f_fit_mode
F_FIT_LSM = 0
F_FIT_MESTIMATOR = 1
F_FIT_RANSAC = 2
F_FIT_LMEDS = 3
F_FIT_LSM_FAST = 4
F_FIT_MESTIMATOR2 = 101
F_FIT_LMEDS2 = 103


class f_fit_mode(_EnumRepr):
    enum_items = {}
    F_FIT_LSM = 0
    F_FIT_MESTIMATOR = 1
    F_FIT_RANSAC = 2
    F_FIT_LMEDS = 3
    F_FIT_LSM_FAST = 4
    F_FIT_MESTIMATOR2 = 101
    F_FIT_LMEDS2 = 103
    
# f_colormap_type
F_COLORMAP_GRAY = 0
F_COLORMAP_RED = 1
F_COLORMAP_GREEN = 2
F_COLORMAP_BLUE = 3
F_COLORMAP_RAINBOW_CYCLIC = 4
F_COLORMAP_RAINBOW7 = 5
F_COLORMAP_RAINBOW4 = 6
F_COLORMAP_RAINBOW = 7
F_COLORMAP_LAND = 8
F_COLORMAP_HOTCOLD = 9
F_COLORMAP_LEAF = 10
F_COLORMAP_KAKI = 11
F_COLORMAP_OCEAN = 12


class f_colormap_type(_EnumRepr):
    enum_items = {}
    F_COLORMAP_GRAY = 0
    F_COLORMAP_RED = 1
    F_COLORMAP_GREEN = 2
    F_COLORMAP_BLUE = 3
    F_COLORMAP_RAINBOW_CYCLIC = 4
    F_COLORMAP_RAINBOW7 = 5
    F_COLORMAP_RAINBOW4 = 6
    F_COLORMAP_RAINBOW = 7
    F_COLORMAP_LAND = 8
    F_COLORMAP_HOTCOLD = 9
    F_COLORMAP_LEAF = 10
    F_COLORMAP_KAKI = 11
    F_COLORMAP_OCEAN = 12
    
# f_prc_char_type
F_PRC_CHAR_ANY = 0
F_PRC_CHAR_NUMERIC = 1
F_PRC_CHAR_CAPITAL = 2
F_PRC_CHAR_SMALL = 4
F_PRC_CHAR_SYMBOL = 8


class f_prc_char_type(_EnumRepr):
    enum_items = {}
    F_PRC_CHAR_ANY = 0
    F_PRC_CHAR_NUMERIC = 1
    F_PRC_CHAR_CAPITAL = 2
    F_PRC_CHAR_SMALL = 4
    F_PRC_CHAR_SYMBOL = 8
    
# f_prc_read_type
F_PRC_READ_ACCEPT = 0
F_PRC_READ_SUPPRESS = 1
F_PRC_READ_IGNORE = 2


class f_prc_read_type(_EnumRepr):
    enum_items = {}
    F_PRC_READ_ACCEPT = 0
    F_PRC_READ_SUPPRESS = 1
    F_PRC_READ_IGNORE = 2
    
# f_prc_bin_method
F_PRC_BIN_FIX = 0
F_PRC_BIN_OHTU = 1
F_PRC_BIN_SAUVOLA = 2
F_PRC_BIN_SHIFT_AVERAGE = 3


class f_prc_bin_method(_EnumRepr):
    enum_items = {}
    F_PRC_BIN_FIX = 0
    F_PRC_BIN_OHTU = 1
    F_PRC_BIN_SAUVOLA = 2
    F_PRC_BIN_SHIFT_AVERAGE = 3
    
# f_prc_reco_mode
F_PRC_RECO_NORMAL = 0
F_PRC_RECO_QUALITY = 1


class f_prc_reco_mode(_EnumRepr):
    enum_items = {}
    F_PRC_RECO_NORMAL = 0
    F_PRC_RECO_QUALITY = 1
    
# f_ml_type
F_ML_SVM = 1
F_ML_BOOST = 2
F_ML_DTREE = 3
F_ML_NAIVEBAYES = 4


class f_ml_type(_EnumRepr):
    enum_items = {}
    F_ML_SVM = 1
    F_ML_BOOST = 2
    F_ML_DTREE = 3
    F_ML_NAIVEBAYES = 4
    
# f_ml_sample_var_type
F_ML_SAMPLE_NUMERICAL = 1
F_ML_SAMPLE_CATEGORICAL = 2


class f_ml_sample_var_type(_EnumRepr):
    enum_items = {}
    F_ML_SAMPLE_NUMERICAL = 1
    F_ML_SAMPLE_CATEGORICAL = 2
    
# f_ml_boost_type
F_BOOST_TYPE_DISCRETE = 1
F_BOOST_TYPE_REAL = 2


class f_ml_boost_type(_EnumRepr):
    enum_items = {}
    F_BOOST_TYPE_DISCRETE = 1
    F_BOOST_TYPE_REAL = 2
    
# f_ml_svm_type
F_ML_SVM_TYPE_C_SVM = 1


class f_ml_svm_type(_EnumRepr):
    enum_items = {}
    F_ML_SVM_TYPE_C_SVM = 1
    
# f_ml_svm_kernel_type
F_ML_SVM_KERNEL_LINEAR = 1
F_ML_SVM_KERNEL_POLYNOMIAL = 2
F_ML_SVM_KERNEL_RBF = 3


class f_ml_svm_kernel_type(_EnumRepr):
    enum_items = {}
    F_ML_SVM_KERNEL_LINEAR = 1
    F_ML_SVM_KERNEL_POLYNOMIAL = 2
    F_ML_SVM_KERNEL_RBF = 3
    
# f_ml_dtree_pruning_type
F_ML_DTREE_NO_PRUNING = 0
F_ML_DTREE_REDUCED_ERROR = 1
F_ML_DTREE_COST_COMPLEXITY = 2
F_ML_DTREE_COST_COMPLEXITY_1SE = 3


class f_ml_dtree_pruning_type(_EnumRepr):
    enum_items = {}
    F_ML_DTREE_NO_PRUNING = 0
    F_ML_DTREE_REDUCED_ERROR = 1
    F_ML_DTREE_COST_COMPLEXITY = 2
    F_ML_DTREE_COST_COMPLEXITY_1SE = 3
    
# f_ml_nb_type
F_ML_NB_GAUSSIAN = 1
F_ML_NB_MULTINOMIAL_MULTIVARIATE = 2
F_ML_NB_MULTINOMIAL = 3


class f_ml_nb_type(_EnumRepr):
    enum_items = {}
    F_ML_NB_GAUSSIAN = 1
    F_ML_NB_MULTINOMIAL_MULTIVARIATE = 2
    F_ML_NB_MULTINOMIAL = 3
    
# f_ml_nb_prior_type
F_ML_NB_PRIOR_UNIFORM = 0
F_ML_NB_PRIOR_PROPORTION = 1


class f_ml_nb_prior_type(_EnumRepr):
    enum_items = {}
    F_ML_NB_PRIOR_UNIFORM = 0
    F_ML_NB_PRIOR_PROPORTION = 1
    
# f_curvature_type
F_CURVATURE_GAUSSIAN = 1
F_CURVATURE_MEAN = 2


class f_curvature_type(_EnumRepr):
    enum_items = {}
    F_CURVATURE_GAUSSIAN = 1
    F_CURVATURE_MEAN = 2
    
# f_imgstack_add_img_mode
F_IMGSTACK_CHILD_MODE = 0
F_IMGSTACK_ROOT_MODE = 1


class f_imgstack_add_img_mode(_EnumRepr):
    enum_items = {}
    F_IMGSTACK_CHILD_MODE = 0
    F_IMGSTACK_ROOT_MODE = 1
    
# f_allinfocus_mode
F_ALLINFOCUS_LOG = 1
F_ALLINFOCUS_DOA = 2


class f_allinfocus_mode(_EnumRepr):
    enum_items = {}
    F_ALLINFOCUS_LOG = 1
    F_ALLINFOCUS_DOA = 2
    
# f_geotrans_warp_mode
F_WARP_MODE_EUCLIDEAN = 0
F_WARP_MODE_SIMILARITY = 1
F_WARP_MODE_AFFINE = 2
F_WARP_MODE_PERSPECTIVE = 3
F_WARP_MODE_PIECEWISE_AFFINE = 4
F_WARP_MODE_LOCAL_WEIGHTED_MEAN_LINEAR = 5


class f_geotrans_warp_mode(_EnumRepr):
    enum_items = {}
    F_WARP_MODE_EUCLIDEAN = 0
    F_WARP_MODE_SIMILARITY = 1
    F_WARP_MODE_AFFINE = 2
    F_WARP_MODE_PERSPECTIVE = 3
    F_WARP_MODE_PIECEWISE_AFFINE = 4
    F_WARP_MODE_LOCAL_WEIGHTED_MEAN_LINEAR = 5
    
# 
MMX_MODE = 0
BIT32_MODE = 1
SSE2_MODE = 2
SIMD_MODE_NUM = 3




# typedefs

class size_t(_NumericalCtypable, _cty.c_uint):
    pass
class CHAR(_NumericalCtypable, _cty.c_byte):
    pass
class UCHAR(_NumericalCtypable, _cty.c_ubyte):
    pass
class SHORT(_NumericalCtypable, _cty.c_short):
    pass
class USHORT(_NumericalCtypable, _cty.c_ushort):
    pass
class INT(_NumericalCtypable, _cty.c_int):
    pass
class UINT(_NumericalCtypable, _cty.c_uint):
    pass
class BOOL(_NumericalCtypable, _cty.c_int):
    pass
class BOOLEAN(_NumericalCtypable, _cty.c_ubyte):
    pass
class FLOAT(_NumericalCtypable, _cty.c_float):
    pass
class DOUBLE(_NumericalCtypable, _cty.c_double):
    pass
class DLONG(_NumericalCtypable, _cty.c_longlong):
    pass
class UDLONG(_NumericalCtypable, _cty.c_ulonglong):
    pass
class INT_PTR(_NumericalCtypable, _cty.c_int):
    pass
class UINT_PTR(_NumericalCtypable, _cty.c_uint):
    pass
class SCALAR(_NumericalCtypable, _cty.c_double):
    pass


class VECTOR(_cty.POINTER(_cty.c_double)):
    pass
class MATRIX(_cty.POINTER(_cty.POINTER(_cty.c_double))):
    pass


# structs

class BUFF_T(_StructBase):
    def __init__(self):
        self.cpPtr: Any
        self.uiSize: UINT
        
class PNT_T(_StructBase):
    def __init__(self):
        self.x: INT
        self.y: INT
        
class SPNT_T(_StructBase):
    def __init__(self):
        self.x: SHORT
        self.y: SHORT
        
class DPNT_T(_StructBase):
    def __init__(self):
        self.x: DOUBLE
        self.y: DOUBLE
        
class FPNT_T(_StructBase):
    def __init__(self):
        self.x: FLOAT
        self.y: FLOAT
        
class PNT3_T(_StructBase):
    def __init__(self):
        self.x: INT
        self.y: INT
        self.z: INT
        
class SPNT3_T(_StructBase):
    def __init__(self):
        self.x: SHORT
        self.y: SHORT
        self.z: SHORT
        
class DPNT3_T(_StructBase):
    def __init__(self):
        self.x: DOUBLE
        self.y: DOUBLE
        self.z: DOUBLE
        
class FPNT3_T(_StructBase):
    def __init__(self):
        self.x: FLOAT
        self.y: FLOAT
        self.z: FLOAT
        
class BOX_T(_StructBase):
    def __init__(self):
        self.st: PNT_T
        self.ed: PNT_T
        
class DBOX_T(_StructBase):
    def __init__(self):
        self.st: DPNT_T
        self.ed: DPNT_T
        
class LINE(_StructBase):
    def __init__(self):
        self.a: INT
        self.b: INT
        self.c: INT
        
class DLINE_T(_StructBase):
    def __init__(self):
        self.a: DOUBLE
        self.b: DOUBLE
        self.c: DOUBLE
        
class SGMT_T(_StructBase):
    def __init__(self):
        self.st: PNT_T
        self.ed: PNT_T
        
class DSGMT_T(_StructBase):
    def __init__(self):
        self.st: DPNT_T
        self.ed: DPNT_T
        
class CIRCLE_T(_StructBase):
    def __init__(self):
        self.ct: PNT_T
        self.radius: INT
        
class RECTANGLE_T(_StructBase):
    def __init__(self):
        self.Topleft: PNT_T
        self.TopRight: PNT_T
        self.BottomLeft: PNT_T
        self.BottomRight: PNT_T
        
class PLANE(_StructBase):
    def __init__(self):
        self.a: DOUBLE
        self.b: DOUBLE
        self.c: DOUBLE
        self.d: DOUBLE
        
class QEDGE_T(_StructBase):
    def __init__(self):
        self.x: SHORT
        self.y: SHORT
        self.q: SHORT
        
class DEDGE_T(_StructBase):
    def __init__(self):
        self.x: DOUBLE
        self.y: DOUBLE
        self.q: DOUBLE
        
class HCD_CIRCLE_T(_StructBase):
    def __init__(self):
        self.xc: DOUBLE
        self.yc: DOUBLE
        self.r: DOUBLE
        self.score: INT
        
class tagRGBQUAD(_StructBase):
    def __init__(self):
        self.rgbBlue: UCHAR
        self.rgbGreen: UCHAR
        self.rgbRed: UCHAR
        self.rgbReserved: UCHAR
        
class RGBQUAD(_StructBase):
    def __init__(self):
        self.rgbBlue: UCHAR
        self.rgbGreen: UCHAR
        self.rgbRed: UCHAR
        self.rgbReserved: UCHAR
        
class fvmatrix(_StructBase):
    def __init__(self):
        self.row: INT
        self.col: INT
        self.m: Any
        
class FMATRIX(_StructBase):
    def __init__(self):
        self.row: INT
        self.col: INT
        self.m: Any
        
class fvvector(_StructBase):
    def __init__(self):
        self.dim: INT
        self.v: Any
        
class FVECTOR(_StructBase):
    def __init__(self):
        self.dim: INT
        self.v: Any
        
class DPLANEL_T(_StructBase):
    def __init__(self):
        self.x: DOUBLE
        self.y: DOUBLE
        self.z: DOUBLE
        self.p: Any
        
class FPLANEL_T(_StructBase):
    def __init__(self):
        self.x: FLOAT
        self.y: FLOAT
        self.z: FLOAT
        self.p: Any
        
class DPLANELRGBA_T(_StructBase):
    def __init__(self):
        self.x: DOUBLE
        self.y: DOUBLE
        self.z: DOUBLE
        self.p: Any
        self.r: FLOAT
        self.g: FLOAT
        self.b: FLOAT
        self.a: FLOAT
        
class FPLANELRGBA_T(_StructBase):
    def __init__(self):
        self.x: FLOAT
        self.y: FLOAT
        self.z: FLOAT
        self.p: Any
        self.r: FLOAT
        self.g: FLOAT
        self.b: FLOAT
        self.a: FLOAT
        
class DPNT3DIR_T(_StructBase):
    def __init__(self):
        self.x: DOUBLE
        self.y: DOUBLE
        self.z: DOUBLE
        self.d: Any
        
class FPNT3DIR_T(_StructBase):
    def __init__(self):
        self.x: FLOAT
        self.y: FLOAT
        self.z: FLOAT
        self.d: Any
        
class DPNTRGBA_T(_StructBase):
    def __init__(self):
        self.x: DOUBLE
        self.y: DOUBLE
        self.r: FLOAT
        self.g: FLOAT
        self.b: FLOAT
        self.a: FLOAT
        
class FPNTRGBA_T(_StructBase):
    def __init__(self):
        self.x: FLOAT
        self.y: FLOAT
        self.r: FLOAT
        self.g: FLOAT
        self.b: FLOAT
        self.a: FLOAT
        
class DPNT3RGBA_T(_StructBase):
    def __init__(self):
        self.x: DOUBLE
        self.y: DOUBLE
        self.z: DOUBLE
        self.r: FLOAT
        self.g: FLOAT
        self.b: FLOAT
        self.a: FLOAT
        
class FPNT3RGBA_T(_StructBase):
    def __init__(self):
        self.x: FLOAT
        self.y: FLOAT
        self.z: FLOAT
        self.r: FLOAT
        self.g: FLOAT
        self.b: FLOAT
        self.a: FLOAT
        
class F_EDGE(_StructBase):
    def __init__(self):
        self.x: INT
        self.y: INT
        self.q: INT
        self.mag: INT
        
class F_DEDGE(_StructBase):
    def __init__(self):
        self.x: DOUBLE
        self.y: DOUBLE
        self.q: DOUBLE
        self.mag: DOUBLE
        
class F_ARC(_StructBase):
    def __init__(self):
        self.x: DOUBLE
        self.y: DOUBLE
        self.radius: DOUBLE
        self.start_angle: DOUBLE
        self.sweep_angle: DOUBLE
        
class fvcomplex(_StructBase):
    def __init__(self):
        self.real: DOUBLE
        self.image: DOUBLE
        
class FCOMPLEX(_StructBase):
    def __init__(self):
        self.real: DOUBLE
        self.image: DOUBLE
        
class F_IMG_INFO(_StructBase):
    def __init__(self):
        self.width: UINT
        self.height: UINT
        self.type: UINT
        self.channel: UINT
        self.depth: UINT
        
class F_FILTER_KERNEL_T(_StructBase):
    def __init__(self):
        self.p: Any
        self.denom: DOUBLE
        self.size_x: INT
        self.size_y: INT
        self.anchor_x: INT
        self.anchor_y: INT
        
class f_randdesc(_StructBase):
    def __init__(self):
        self.mt: Any
        self.mti: INT
        
class F_RANDDESC(_StructBase):
    def __init__(self):
        self.mt: Any
        self.mti: INT
        
class F_MEASURE_PARAMS(_StructBase):
    def __init__(self):
        self.max_runs: UINT
        self.max_blobs: UINT
        self.max_rows: INT
        self.color_mode: Any
        self.neighborhood: UINT
        self.precalc_features: UDLONG
        self.keep_results_after_overflow: BOOL
        
class F_MEASURE_FILTER_RANGE(_StructBase):
    def __init__(self):
        self.type: Any
        self.min: DOUBLE
        self.max: DOUBLE
        
class F_RUNLENGTH(_StructBase):
    def __init__(self):
        self.xs: INT
        self.xe: INT
        self.y: INT
        
class F_GS_RESULT(_StructBase):
    def __init__(self):
        self.x: INT
        self.y: INT
        self.score: INT
        
class f_color_chart(_StructBase):
    def __init__(self):
        self.color: Any
        self.mat: Any
        self.flag: UINT
        
class F_COLOR_CHART(_StructBase):
    def __init__(self):
        self.color: Any
        self.mat: Any
        self.flag: UINT
        
class F_EDGE_CORR_PARAMS(_StructBase):
    def __init__(self):
        self.width: INT
        self.height: INT
        self.var_threshold: DOUBLE
        self.sigmoid_k: DOUBLE
        self.mag_threshold: INT
        self.nms_length: INT
        
class F_EDGE_SOBEL_PARAMS(_StructBase):
    def __init__(self):
        self.mag_threshold: INT
        self.nms_length: INT
        
class F_EDGE_CORR_MAX_PARAMS(_StructBase):
    def __init__(self):
        self.width: INT
        self.height: INT
        self.var_threshold_min: DOUBLE
        self.sigmoid_k: DOUBLE
        self.mag_threshold_min: INT
        self.nms_length: INT
        self.var_threshold_max: DOUBLE
        self.mag_threshold_max: INT
        
class F_EDGE_SOBEL_MAX_PARAMS(_StructBase):
    def __init__(self):
        self.mag_threshold_min: INT
        self.nms_length: INT
        self.mag_threshold_max: INT
        
class F_EDGE_GROOVE_PARAMS(_StructBase):
    def __init__(self):
        self.width: INT
        self.height: INT
        self.sigma: DOUBLE
        self.con_threshold_min: DOUBLE
        self.con_threshold_max: DOUBLE
        self.mag_threshold_min: DOUBLE
        self.mag_threshold_max: DOUBLE
        self.nms_length: INT
        self.color: INT
        
class F_FPM_MATCH(_StructBase):
    def __init__(self):
        self.require_result_num: INT
        self.min_angle: INT
        self.max_angle: INT
        self.min_scale: INT
        self.max_scale: INT
        self.coarse_comp_rate: INT
        self.coarse_err_wide: INT
        self.coarse_highcomp_threshold: INT
        self.coarse_lowcomp_threshold: INT
        self.refine_execute: BOOL
        self.refine_threshold: INT
        self.refine_err_wide: INT
        self.polarity: Any
        
class F_FPM_AREASCORE(_StructBase):
    def __init__(self):
        self.err_wide_tx: DOUBLE
        self.err_wide_ty: DOUBLE
        self.err_wide_tq: DOUBLE
        self.err_wide_ts: DOUBLE
        self.err_wide: INT
        self.noise_weight: DOUBLE
        self.threshold: INT
        
class F_SEARCH_RESULT(_StructBase):
    def __init__(self):
        self.x: DOUBLE
        self.y: DOUBLE
        self.q: DOUBLE
        self.s: DOUBLE
        self.score: INT
        
class F_FPM_MARKINFO(_StructBase):
    def __init__(self):
        self.shape: Any
        self.mark_n: INT
        self.center: Any
        self.radius: Any
        self.deg: Any
        self.vrtx_n: INT
        self.vrtx: Any
        
class F_MODELVIEW(_StructBase):
    def __init__(self):
        self.forward: Any
        self.backward: Any
        self.reverse_y: INT
        self.angle: DOUBLE
        self.move_x: DOUBLE
        self.move_y: DOUBLE
        self.scale_x: DOUBLE
        self.scale_y: DOUBLE
        
class f_nn_cond(_StructBase):
    def __init__(self):
        self.elem_num: INT
        self.func_type: Any
        self.func_param: DOUBLE
        
class F_NN_COND(_StructBase):
    def __init__(self):
        self.elem_num: INT
        self.func_type: Any
        self.func_param: DOUBLE
        
class F_FUZZY_BASE(_StructBase):
    def __init__(self):
        self.n1: DOUBLE
        self.n2: DOUBLE
        self.n3: DOUBLE
        self.n4: DOUBLE
        self.m: DOUBLE
        
class F_FUZZY_SPEC(_StructBase):
    def __init__(self):
        self.u_min: DOUBLE
        self.u_max: DOUBLE
        self.u_unit: DOUBLE
        self.m_unit: DOUBLE
        
class DLINE3_T(_StructBase):
    def __init__(self):
        self.pt: DPNT3_T
        self.vec: DPNT3_T
        
class DSPHERE_T(_StructBase):
    def __init__(self):
        self.ct: DPNT3_T
        self.radius: DOUBLE
        
class F_CG_VE_INFO(_StructBase):
    def __init__(self):
        self.type: Any
        self.a: INT
        self.b: INT
        self.c: INT
        self.st: DPNT_T
        self.ed: DPNT_T
        self.no: INT
        
class F_CG_VG_INFO(_StructBase):
    def __init__(self):
        self.bnd: Any
        self.num: INT
        self.area: DOUBLE
        self.ve_info: Any
        
class F_LH_LINE(_StructBase):
    def __init__(self):
        self.a: DOUBLE
        self.b: DOUBLE
        self.c: DOUBLE
        self.q: DOUBLE
        self.score: INT
        
class F_ARRAY_INDEX(_StructBase):
    def __init__(self):
        self.index: INT
        self.size: INT
        
class F_EDGE1D_DIFF_FILTER(_StructBase):
    def __init__(self):
        self.minus_foot: INT
        self.minus_len: INT
        self.plus_foot: INT
        self.plus_len: INT
        
class F_CAMERA_PARAM(_StructBase):
    def __init__(self):
        self.a: DOUBLE
        self.b: DOUBLE
        self.g: DOUBLE
        self.u: DOUBLE
        self.v: DOUBLE
        self.k1: DOUBLE
        self.k2: DOUBLE
        
class F_EDGE_CLUST(_StructBase):
    def __init__(self):
        self.num: INT
        self.pindex: Any
        
class F_GA_RANGE(_StructBase):
    def __init__(self):
        self.min: F_GA_VALUE
        self.max: F_GA_VALUE
        
class F_FPM_FEATURE(_StructBase):
    def __init__(self):
        self.sobel_edge: F_EDGE_SOBEL_PARAMS
        self.corr_edge: F_EDGE_CORR_PARAMS
        self.sobel_max_edge: F_EDGE_SOBEL_MAX_PARAMS
        self.corr_max_edge: F_EDGE_CORR_MAX_PARAMS
        self.groove_edge: F_EDGE_GROOVE_PARAMS
        
class F_GA_VALUE(_StructBase):
    def __init__(self):
        self.value_int: INT
        self.value_dbl: DOUBLE
        


# functions

def fnFIE_setup() -> Any:
    r"""INT FVALGAPI fnFIE_setup( VOID )
    FIEライブラリの初期化

    Params:


    Returns:
    - F_ERR_NONE    正常終了
    """
    raise NotImplementedError

def setup():
    r"""INT FVALGAPI fnFIE_setup( VOID )
    FIEライブラリの初期化

    Params:


    Returns:
    - F_ERR_NONE    正常終了
    """

    return _fie.fnFIE_setup()

def fnFIE_teardown() -> Any:
    r"""INT FVALGAPI fnFIE_teardown( VOID )
    FIEライブラリの終了処理

    Params:


    Returns:
    - F_ERR_NONE    正常終了
    """
    raise NotImplementedError

def teardown():
    r"""INT FVALGAPI fnFIE_teardown( VOID )
    FIEライブラリの終了処理

    Params:


    Returns:
    - F_ERR_NONE    正常終了
    """

    return _fie.fnFIE_teardown()

def fnFIE_is_setuped() -> Any:
    r"""INT FVALGAPI fnFIE_is_setuped( VOID )
    FIEライブラリの初期化チェック

    Params:


    Returns:
    - TRUE  初期化実行済み
    - FALSE 未初期化
    """
    raise NotImplementedError

def is_setuped():
    r"""INT FVALGAPI fnFIE_is_setuped( VOID )
    FIEライブラリの初期化チェック

    Params:


    Returns:
    - TRUE  初期化実行済み
    - FALSE 未初期化
    """

    return _fie.fnFIE_is_setuped()

def fnFIE_set_num_threads(threads) -> Any:
    r"""INT FVALGAPI fnFIE_set_num_threads( INT threads )
    内部スレッド数設定

    Params:
    - [in] threads スレッド数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_UNSUPPORTED サポートされていません
    """
    raise NotImplementedError

def set_num_threads(threads):
    r"""INT FVALGAPI fnFIE_set_num_threads( INT threads )
    内部スレッド数設定

    Params:
    - [in] threads スレッド数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_UNSUPPORTED サポートされていません
    """

    return _fie.fnFIE_set_num_threads(threads)

def fnFIE_get_max_threads() -> Any:
    r"""INT FVALGAPI fnFIE_get_max_threads( VOID )
    内部スレッド数取得

    Params:


    Returns:
    - スレッド数
    """
    raise NotImplementedError

def get_max_threads():
    r"""INT FVALGAPI fnFIE_get_max_threads( VOID )
    内部スレッド数取得

    Params:


    Returns:
    - スレッド数
    """

    return _fie.fnFIE_get_max_threads()

def fnFIE_get_num_logical_cpu_cores(num) -> Any:
    r"""INT FVALGAPI fnFIE_get_num_logical_cpu_cores( INT* num )
    論理CPU数の取得

    Params:


    Returns:
    """
    raise NotImplementedError

def get_num_logical_cpu_cores(num):
    r"""INT FVALGAPI fnFIE_get_num_logical_cpu_cores( INT* num )
    論理CPU数の取得

    Params:


    Returns:
    """

    return _fie.fnFIE_get_num_logical_cpu_cores(num)

def fnFIE_get_control_x87(val) -> Any:
    r"""INT FVALGAPI fnFIE_get_control_x87( UINT* val )
    x87 FPUコントロールレジスタ値の取得

    Params:
    - [out] val  レジスタ値

    Returns:
    - F_ERR_NONE          正常終了
    - F_ERR_UNSUPPORTED   サポートされていません
    - F_ERR_INVALID_PARAM パラメータエラー(  val にNULLが渡された)
    """
    raise NotImplementedError

def get_control_x87(val):
    r"""INT FVALGAPI fnFIE_get_control_x87( UINT* val )
    x87 FPUコントロールレジスタ値の取得

    Params:
    - [out] val  レジスタ値

    Returns:
    - F_ERR_NONE          正常終了
    - F_ERR_UNSUPPORTED   サポートされていません
    - F_ERR_INVALID_PARAM パラメータエラー(  val にNULLが渡された)
    """

    return _fie.fnFIE_get_control_x87(val)

def fnFIE_set_control_x87(set, mask) -> Any:
    r"""INT FVALGAPI fnFIE_set_control_x87( UINT set, UINT mask )
    x87 FPUコントロールレジスタ値の設定

    Params:
    - [in] set   レジスタ値
                     次の値のbit-ORによる組み合わせで指定してください
                     - F_FPU_EM_IM
                     - F_FPU_EM_DM
                     - F_FPU_EM_ZM
                     - F_FPU_EM_OM
                     - F_FPU_EM_UM
                     - F_FPU_EM_PM
                     - F_FPU_RC_CHOP
                     - F_FPU_RC_UP
                     - F_FPU_RC_DOWN
                     - F_FPU_RC_NEAR
                     - F_FPU_PC_24
                     - F_FPU_PC_53
                     - F_FPU_PC_64
    - [in] mask  設定マスク
                     次のマスク値のbit-ORによる組み合わせで指定してください
                     - F_FPU_EM_MASK
                     - F_FPU_RC_MASK
                     - F_FPU_PC_MASK

    Returns:
    - F_ERR_NONE         正常終了
    - F_ERR_UNSUPPORTED  サポートされていません
    """
    raise NotImplementedError

def set_control_x87(set, mask):
    r"""INT FVALGAPI fnFIE_set_control_x87( UINT set, UINT mask )
    x87 FPUコントロールレジスタ値の設定

    Params:
    - [in] set   レジスタ値
                     次の値のbit-ORによる組み合わせで指定してください
                     - F_FPU_EM_IM
                     - F_FPU_EM_DM
                     - F_FPU_EM_ZM
                     - F_FPU_EM_OM
                     - F_FPU_EM_UM
                     - F_FPU_EM_PM
                     - F_FPU_RC_CHOP
                     - F_FPU_RC_UP
                     - F_FPU_RC_DOWN
                     - F_FPU_RC_NEAR
                     - F_FPU_PC_24
                     - F_FPU_PC_53
                     - F_FPU_PC_64
    - [in] mask  設定マスク
                     次のマスク値のbit-ORによる組み合わせで指定してください
                     - F_FPU_EM_MASK
                     - F_FPU_RC_MASK
                     - F_FPU_PC_MASK

    Returns:
    - F_ERR_NONE         正常終了
    - F_ERR_UNSUPPORTED  サポートされていません
    """

    return _fie.fnFIE_set_control_x87(set, mask)

def fnFIE_get_control_sse(val) -> Any:
    r"""INT FVALGAPI fnFIE_get_control_sse( UINT* val )
    SSEコントロールレジスタ値の取得

    Params:
    - [out] val  レジスタ値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_UNSUPPORTED    サポートされていません
    - F_ERR_INVALID_PARAM  パラメータエラー(  val にNULLが渡された)
    """
    raise NotImplementedError

def get_control_sse(val):
    r"""INT FVALGAPI fnFIE_get_control_sse( UINT* val )
    SSEコントロールレジスタ値の取得

    Params:
    - [out] val  レジスタ値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_UNSUPPORTED    サポートされていません
    - F_ERR_INVALID_PARAM  パラメータエラー(  val にNULLが渡された)
    """

    return _fie.fnFIE_get_control_sse(val)

def fnFIE_set_control_sse(set, mask) -> Any:
    r"""INT FVALGAPI fnFIE_set_control_sse( UINT set, UINT mask )
    SSEコントロールレジスタ値の設定

    Params:
    - [in] set   レジスタ値
                     次の値のbit-ORによる組み合わせで指定してください
                     - F_FPU_EM_IM
                     - F_FPU_EM_DM
                     - F_FPU_EM_ZM
                     - F_FPU_EM_OM
                     - F_FPU_EM_UM
                     - F_FPU_EM_PM
                     - F_FPU_FZ_SAVE
                     - F_FPU_FZ_FLUSH
                     - F_FPU_RC_CHOP
                     - F_FPU_RC_UP
                     - F_FPU_RC_DOWN
                     - F_FPU_RC_NEAR
    - [in] mask  設定マスク
                     次のマスク値のbit-ORによる組み合わせで指定してください
                     - F_FPU_EM_MASK
                     - F_FPU_RC_MASK
                     - F_FPU_FZ_MASK

    Returns:
    - F_ERR_NONE         正常終了
    - F_ERR_UNSUPPORTED  サポートされていません
    """
    raise NotImplementedError

def set_control_sse(set, mask):
    r"""INT FVALGAPI fnFIE_set_control_sse( UINT set, UINT mask )
    SSEコントロールレジスタ値の設定

    Params:
    - [in] set   レジスタ値
                     次の値のbit-ORによる組み合わせで指定してください
                     - F_FPU_EM_IM
                     - F_FPU_EM_DM
                     - F_FPU_EM_ZM
                     - F_FPU_EM_OM
                     - F_FPU_EM_UM
                     - F_FPU_EM_PM
                     - F_FPU_FZ_SAVE
                     - F_FPU_FZ_FLUSH
                     - F_FPU_RC_CHOP
                     - F_FPU_RC_UP
                     - F_FPU_RC_DOWN
                     - F_FPU_RC_NEAR
    - [in] mask  設定マスク
                     次のマスク値のbit-ORによる組み合わせで指定してください
                     - F_FPU_EM_MASK
                     - F_FPU_RC_MASK
                     - F_FPU_FZ_MASK

    Returns:
    - F_ERR_NONE         正常終了
    - F_ERR_UNSUPPORTED  サポートされていません
    """

    return _fie.fnFIE_set_control_sse(set, mask)

def fnFIE_get_objtype(h) -> Any:
    r"""INT FVALGAPI fnFIE_get_objtype( FHANDLE h )
    オブジェクトタイプの取得

    Params:
    - [in] h オブジェクトハンドル

    Returns:
    - オブジェクトタイプ
    """
    raise NotImplementedError

def get_objtype(h):
    r"""INT FVALGAPI fnFIE_get_objtype( FHANDLE h )
    オブジェクトタイプの取得

    Params:
    - [in] h オブジェクトハンドル

    Returns:
    - オブジェクトタイプ
    """

    return _fie.fnFIE_get_objtype(h)

def fnFIE_free_object(h) -> Any:
    r"""void fnFIE_free_object( FHANDLE h )
    オブジェクトを解放

    Params:
    - [in] h 解放するオブジェクトのハンドル

    Returns:
    """
    raise NotImplementedError

def free_object(h):
    r"""void fnFIE_free_object( FHANDLE h )
    オブジェクトを解放

    Params:
    - [in] h 解放するオブジェクトのハンドル

    Returns:
    """

    return _fie.fnFIE_free_object(h)

def fnFIE_copy_object(hsrc) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_copy_object( FHANDLE hsrc )
    オブジェクトをコピー

    Params:
    - [in] hsrc コピー元のオブジェクトのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """
    raise NotImplementedError

def copy_object(hsrc):
    r"""FHANDLE FVALGAPI fnFIE_copy_object( FHANDLE hsrc )
    オブジェクトをコピー

    Params:
    - [in] hsrc コピー元のオブジェクトのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """

    return _fie.fnFIE_copy_object(hsrc)

def fnFIE_region_free(hreg) -> Any:
    r"""void fnFIE_region_free( FHANDLE hreg )
    リージョンオブジェクトの解放

    Params:
    - [in] hreg 解放するリージョンのハンドル

    Returns:
    """
    raise NotImplementedError

def region_free(hreg):
    r"""void fnFIE_region_free( FHANDLE hreg )
    リージョンオブジェクトの解放

    Params:
    - [in] hreg 解放するリージョンのハンドル

    Returns:
    """

    return _fie.fnFIE_region_free(hreg)

def fnFIE_img_set_padding_size(exp) -> Any:
    r"""INT FVALGAPI fnFIE_img_set_padding_size( INT exp )
    パディングサイズの設定

    Params:
    - [in] exp   ステップサイズ 2^n の乗数n (0≦n≦10)
                     デフォルト==3

    Returns:
    """
    raise NotImplementedError

def img_set_padding_size(exp):
    r"""INT FVALGAPI fnFIE_img_set_padding_size( INT exp )
    パディングサイズの設定

    Params:
    - [in] exp   ステップサイズ 2^n の乗数n (0≦n≦10)
                     デフォルト==3

    Returns:
    """

    return _fie.fnFIE_img_set_padding_size(exp)

def fnFIE_img_root_alloc(type, channels, width, height) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_img_root_alloc( INT type, INT channels, INT width, INT height )
    ルート画像の確保

    Params:
    - [in] type     確保する画像種別。下記のいずれかを指定。
                         - F_IMG_BIN
                         - F_IMG_UC8
                         - F_IMG_S16
                         - F_IMG_US16
                         - F_IMG_DOUBLE
                         - F_IMG_RGBQUAD
                         - F_IMG_I32
                         - F_IMG_UI32
                         - F_IMG_I64
                         - F_IMG_FLOAT
                         - F_IMG_RGBTRIPLE
    - [in] channels チャネル数(1〜16)
    - [in] width    画像幅(1以上)
    - [in] height   画像高さ(1以上)

    Returns:
    - 確保された画像のハンドル
            ライセンスエラー、未初期化エラー、またはメモリ不足で確保に失敗した場合はNULLを返します。
    """
    raise NotImplementedError

def img_root_alloc(type, channels, width, height):
    r"""FHANDLE FVALGAPI fnFIE_img_root_alloc( INT type, INT channels, INT width, INT height )
    ルート画像の確保

    Params:
    - [in] type     確保する画像種別。下記のいずれかを指定。
                         - F_IMG_BIN
                         - F_IMG_UC8
                         - F_IMG_S16
                         - F_IMG_US16
                         - F_IMG_DOUBLE
                         - F_IMG_RGBQUAD
                         - F_IMG_I32
                         - F_IMG_UI32
                         - F_IMG_I64
                         - F_IMG_FLOAT
                         - F_IMG_RGBTRIPLE
    - [in] channels チャネル数(1〜16)
    - [in] width    画像幅(1以上)
    - [in] height   画像高さ(1以上)

    Returns:
    - 確保された画像のハンドル
            ライセンスエラー、未初期化エラー、またはメモリ不足で確保に失敗した場合はNULLを返します。
    """

    return _fie.fnFIE_img_root_alloc(type, channels, width, height)

def fnFIE_img_root_import_alloc(adrss, channels, type, step, width, height) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_img_root_import_alloc( VOID** adrss, INT channels, INT type, INT_PTR step, INT width, INT height )
    ルート画像の確保(import版)

    Params:
    - [in] adrss    画像メモリのポインタ列。
                            (チャネル0から順番になった配列で  channels パラメータ個分の要素が必要)
    - [in] channels チャネル数(1〜16)
    - [in] type     画像種別
                         - F_IMG_BIN
                         - F_IMG_UC8
                         - F_IMG_S16
                         - F_IMG_US16
                         - F_IMG_DOUBLE
                         - F_IMG_RGBQUAD
                         - F_IMG_I32
                         - F_IMG_UI32
                         - F_IMG_I64
                         - F_IMG_FLOAT
                         - F_IMG_RGBTRIPLE
    - [in] step     画像ステップ(メモリ横幅：画素サイズ単位)
                        但し、下記の画像型の場合は単位が変わります。
                         - F_IMG_BIN型の場合：UINTブロック数
                         - F_IMG_RGBTRIPLE型の場合：バイト単位
    - [in] width    画像幅(1以上)
    - [in] height   画像高さ(1以上)

    Returns:
    - 確保された画像のハンドル
            ライセンスエラー、未初期化エラー、またはメモリ不足で確保に失敗した場合はNULLを返します。
    <div class="staffonly">
    ARM環境においては、各画像メモリのアラインメントが型サイズの整数倍と合致していない場合にもNULLを返します。
    </div>
    """
    raise NotImplementedError

def img_root_import_alloc(adrss, channels, type, step, width, height):
    r"""FHANDLE FVALGAPI fnFIE_img_root_import_alloc( VOID** adrss, INT channels, INT type, INT_PTR step, INT width, INT height )
    ルート画像の確保(import版)

    Params:
    - [in] adrss    画像メモリのポインタ列。
                            (チャネル0から順番になった配列で  channels パラメータ個分の要素が必要)
    - [in] channels チャネル数(1〜16)
    - [in] type     画像種別
                         - F_IMG_BIN
                         - F_IMG_UC8
                         - F_IMG_S16
                         - F_IMG_US16
                         - F_IMG_DOUBLE
                         - F_IMG_RGBQUAD
                         - F_IMG_I32
                         - F_IMG_UI32
                         - F_IMG_I64
                         - F_IMG_FLOAT
                         - F_IMG_RGBTRIPLE
    - [in] step     画像ステップ(メモリ横幅：画素サイズ単位)
                        但し、下記の画像型の場合は単位が変わります。
                         - F_IMG_BIN型の場合：UINTブロック数
                         - F_IMG_RGBTRIPLE型の場合：バイト単位
    - [in] width    画像幅(1以上)
    - [in] height   画像高さ(1以上)

    Returns:
    - 確保された画像のハンドル
            ライセンスエラー、未初期化エラー、またはメモリ不足で確保に失敗した場合はNULLを返します。
    <div class="staffonly">
    ARM環境においては、各画像メモリのアラインメントが型サイズの整数倍と合致していない場合にもNULLを返します。
    </div>
    """

    return _fie.fnFIE_img_root_import_alloc(adrss, channels, type, step, width, height)

def fnFIE_img_root_realloc(himg, type, channels, width, height) -> Any:
    r"""INT FVALGAPI fnFIE_img_root_realloc( FHANDLE himg, INT type, INT channels, INT width, INT height )
    ルート画像の変更

    Params:
    - [in] himg     サイズを変更する画像のハンドル
    - [in] type     確保する画像種別
                         - F_IMG_BIN
                         - F_IMG_UC8
                         - F_IMG_S16
                         - F_IMG_US16
                         - F_IMG_DOUBLE
                         - F_IMG_RGBQUAD
                         - F_IMG_I32
                         - F_IMG_UI32
                         - F_IMG_I64
                         - F_IMG_FLOAT
                         - F_IMG_RGBTRIPLE
    - [in] channels チャネル数(1〜16)
    - [in] width    画像幅(1以上)
    - [in] height   画像高さ(1以上)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE  不正な画像が渡された(ハンドルが不正orインポートされていてリサイズ不可)
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_root_realloc(himg, type, channels, width, height):
    r"""INT FVALGAPI fnFIE_img_root_realloc( FHANDLE himg, INT type, INT channels, INT width, INT height )
    ルート画像の変更

    Params:
    - [in] himg     サイズを変更する画像のハンドル
    - [in] type     確保する画像種別
                         - F_IMG_BIN
                         - F_IMG_UC8
                         - F_IMG_S16
                         - F_IMG_US16
                         - F_IMG_DOUBLE
                         - F_IMG_RGBQUAD
                         - F_IMG_I32
                         - F_IMG_UI32
                         - F_IMG_I64
                         - F_IMG_FLOAT
                         - F_IMG_RGBTRIPLE
    - [in] channels チャネル数(1〜16)
    - [in] width    画像幅(1以上)
    - [in] height   画像高さ(1以上)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE  不正な画像が渡された(ハンドルが不正orインポートされていてリサイズ不可)
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_root_realloc(himg, type, channels, width, height)

def fnFIE_img_root_free(himg) -> Any:
    r"""void fnFIE_img_root_free( FHANDLE himg )
    ルート画像の解放

    Params:
    - [in] himg 解放するルート画像のハンドル

    Returns:
    """
    raise NotImplementedError

def img_root_free(himg):
    r"""void fnFIE_img_root_free( FHANDLE himg )
    ルート画像の解放

    Params:
    - [in] himg 解放するルート画像のハンドル

    Returns:
    """

    return _fie.fnFIE_img_root_free(himg)

def fnFIE_img_root_copy(hsrc, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_root_copy( FHANDLE hsrc, FHANDLE* hdst )
    ルート画像のコピー

    Params:
    - [in]  hsrc   コピー元の画像のハンドル( type: all )
    - [out] hdst   コピーされたルート画像のハンドル
                       関数エントリー時  *hdst == NULL でなければなりません。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータエラー(  hdst がNULL または  *hdst != NULL )
    - F_ERR_INVALID_IMAGE       不正画像エラー(  hsrc が不正 )
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_root_copy(hsrc, hdst):
    r"""INT FVALGAPI fnFIE_img_root_copy( FHANDLE hsrc, FHANDLE* hdst )
    ルート画像のコピー

    Params:
    - [in]  hsrc   コピー元の画像のハンドル( type: all )
    - [out] hdst   コピーされたルート画像のハンドル
                       関数エントリー時  *hdst == NULL でなければなりません。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータエラー(  hdst がNULL または  *hdst != NULL )
    - F_ERR_INVALID_IMAGE       不正画像エラー(  hsrc が不正 )
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_root_copy(hsrc, hdst)

def fnFIE_img_child_alloc(hroot, offset_x, offset_y, width, height) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_img_child_alloc( FHANDLE hroot, INT offset_x, INT offset_y, INT width, INT height )
    チャイルド画像の確保

    Params:
    - [in] hroot        ルート画像のハンドル(チャイルド画像でも可)
    - [in] offset_x     ルート座標系における、チャイルド領域左上x座標 (0≦  offset_x ≦ (ルート画像の幅 -1 -  width ))
    - [in] offset_y     ルート座標系における、チャイルド領域左上y座標 (0≦  offset_y ≦ (ルート画像の高さ -1 -  height ))
    - [in] width        チャイルド領域幅  (1≦  width ≦(ルート画像の幅 -  offset_x ))
    - [in] height       チャイルド領域高さ(1≦  height ≦(ルート画像の高さ -  offset_y ))

    Returns:
    - 正常終了した場合は、確保されたチャイルド画像のハンドルを返す。
            ライセンスエラー、未初期化エラー、パラメータ不正やメモリ確保失敗により異常終了した場合は、NULLを返す
    """
    raise NotImplementedError

def img_child_alloc(hroot, offset_x, offset_y, width, height):
    r"""FHANDLE FVALGAPI fnFIE_img_child_alloc( FHANDLE hroot, INT offset_x, INT offset_y, INT width, INT height )
    チャイルド画像の確保

    Params:
    - [in] hroot        ルート画像のハンドル(チャイルド画像でも可)
    - [in] offset_x     ルート座標系における、チャイルド領域左上x座標 (0≦  offset_x ≦ (ルート画像の幅 -1 -  width ))
    - [in] offset_y     ルート座標系における、チャイルド領域左上y座標 (0≦  offset_y ≦ (ルート画像の高さ -1 -  height ))
    - [in] width        チャイルド領域幅  (1≦  width ≦(ルート画像の幅 -  offset_x ))
    - [in] height       チャイルド領域高さ(1≦  height ≦(ルート画像の高さ -  offset_y ))

    Returns:
    - 正常終了した場合は、確保されたチャイルド画像のハンドルを返す。
            ライセンスエラー、未初期化エラー、パラメータ不正やメモリ確保失敗により異常終了した場合は、NULLを返す
    """

    return _fie.fnFIE_img_child_alloc(hroot, offset_x, offset_y, width, height)

def fnFIE_img_child_alloc_single_ch(hroot, ch, offset_x, offset_y, width, height) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_img_child_alloc_single_ch( FHANDLE hroot, INT ch, INT offset_x, INT offset_y, INT width, INT height )
    チャイルド画像の確保(単一チャネル割り当て版)

    Params:
    - [in] hroot        ルート画像のハンドル(チャイルド画像でも可)
    - [in] ch           チャイルド画像を割り当てる、ルート画像のチャネル(0≦  ch ≦(ルート画像のch数-1))
    - [in] offset_x     ルート座標系における、チャイルド領域左上x座標(0≦  offset_x ≦(ルート画像の幅 -1 -  width ))
    - [in] offset_y     ルート座標系における、チャイルド領域左上y座標(0≦  offset_y ≦(ルート画像の高さ -1 -  height ))
    - [in] width        チャイルド領域幅  (1≦  width ≦(ルート画像の幅 -  offset_x ))
    - [in] height       チャイルド領域高さ(1≦  height ≦(ルート画像の高さ -  offset_y ))

    Returns:
    - 正常終了した場合は、確保されたチャイルド画像のハンドルを返します。
            ライセンスエラー、未初期化エラー、パラメータ不正やメモリ確保失敗により異常終了した場合は、NULLを返します。
    """
    raise NotImplementedError

def img_child_alloc_single_ch(hroot, ch, offset_x, offset_y, width, height):
    r"""FHANDLE FVALGAPI fnFIE_img_child_alloc_single_ch( FHANDLE hroot, INT ch, INT offset_x, INT offset_y, INT width, INT height )
    チャイルド画像の確保(単一チャネル割り当て版)

    Params:
    - [in] hroot        ルート画像のハンドル(チャイルド画像でも可)
    - [in] ch           チャイルド画像を割り当てる、ルート画像のチャネル(0≦  ch ≦(ルート画像のch数-1))
    - [in] offset_x     ルート座標系における、チャイルド領域左上x座標(0≦  offset_x ≦(ルート画像の幅 -1 -  width ))
    - [in] offset_y     ルート座標系における、チャイルド領域左上y座標(0≦  offset_y ≦(ルート画像の高さ -1 -  height ))
    - [in] width        チャイルド領域幅  (1≦  width ≦(ルート画像の幅 -  offset_x ))
    - [in] height       チャイルド領域高さ(1≦  height ≦(ルート画像の高さ -  offset_y ))

    Returns:
    - 正常終了した場合は、確保されたチャイルド画像のハンドルを返します。
            ライセンスエラー、未初期化エラー、パラメータ不正やメモリ確保失敗により異常終了した場合は、NULLを返します。
    """

    return _fie.fnFIE_img_child_alloc_single_ch(hroot, ch, offset_x, offset_y, width, height)

def fnFIE_img_child_free(hchild) -> Any:
    r"""void fnFIE_img_child_free( FHANDLE hchild )
    チャイルド画像の解放

    Params:
    - [in] hchild 解放するチャイルド画像のハンドル

    Returns:
    """
    raise NotImplementedError

def img_child_free(hchild):
    r"""void fnFIE_img_child_free( FHANDLE hchild )
    チャイルド画像の解放

    Params:
    - [in] hchild 解放するチャイルド画像のハンドル

    Returns:
    """

    return _fie.fnFIE_img_child_free(hchild)

def fnFIE_img_child_detach(hchild) -> Any:
    r"""INT FVALGAPI fnFIE_img_child_detach( FHANDLE hchild )
    チャイルド画像のルート画像への割り当てを解除(NULLチャイルド画像にする)

    Params:
    - [in] hchild 解除するチャイルド画像のハンドル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  異常終了(ハンドルにNULLが渡された or ルート画像が渡された)
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_child_detach(hchild):
    r"""INT FVALGAPI fnFIE_img_child_detach( FHANDLE hchild )
    チャイルド画像のルート画像への割り当てを解除(NULLチャイルド画像にする)

    Params:
    - [in] hchild 解除するチャイルド画像のハンドル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  異常終了(ハンドルにNULLが渡された or ルート画像が渡された)
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_child_detach(hchild)

def fnFIE_img_child_attach(hchild, hroot, x, y, width, height) -> Any:
    r"""INT FVALGAPI fnFIE_img_child_attach( FHANDLE hchild, FHANDLE hroot, INT x, INT y, INT width, INT height )
    チャイルド画像をルート画像へ割り当てる

    Params:
    - [in] hchild   割り当てるチャイルド画像
    - [in] hroot    割り当てられるれるルート画像(チャイルド画像でも可)
    - [in] x        領域左上x座標 (0≦  x ≦(ルート画像の幅 -1 -  width ))
    - [in] y        領域左上y座標 (0≦  y ≦(ルート画像の高さ -1 -  height ))
    - [in] width    領域幅   (1≦  width ≦(ルート画像の幅 -  x ))
    - [in] height   領域高さ (1≦  height ≦(ルート画像の高さ-  y ))

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータエラー
    - F_ERR_INVALID_IMAGE  不正な画像が渡されました
    - F_ERR_NOMEMORY       メモリ不足により異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_child_attach(hchild, hroot, x, y, width, height):
    r"""INT FVALGAPI fnFIE_img_child_attach( FHANDLE hchild, FHANDLE hroot, INT x, INT y, INT width, INT height )
    チャイルド画像をルート画像へ割り当てる

    Params:
    - [in] hchild   割り当てるチャイルド画像
    - [in] hroot    割り当てられるれるルート画像(チャイルド画像でも可)
    - [in] x        領域左上x座標 (0≦  x ≦(ルート画像の幅 -1 -  width ))
    - [in] y        領域左上y座標 (0≦  y ≦(ルート画像の高さ -1 -  height ))
    - [in] width    領域幅   (1≦  width ≦(ルート画像の幅 -  x ))
    - [in] height   領域高さ (1≦  height ≦(ルート画像の高さ-  y ))

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータエラー
    - F_ERR_INVALID_IMAGE  不正な画像が渡されました
    - F_ERR_NOMEMORY       メモリ不足により異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_child_attach(hchild, hroot, x, y, width, height)

def fnFIE_img_child_attach_single_ch(hchild, hroot, ch, x, y, width, height) -> Any:
    r"""INT FVALGAPI fnFIE_img_child_attach_single_ch( FHANDLE hchild, FHANDLE hroot, INT ch, INT x, INT y, INT width, INT height )
    チャイルド画像をルート画像へ割り当てる

    Params:
    - [in] hchild   割り当てるチャイルド画像
    - [in] hroot    割り当てられるルート画像(チャイルド画像でも可)
    - [in] ch       チャイルド画像を割り当てる、ルート画像のチャネル(0≦  ch ≦(ルート画像のch数-1))
    - [in] x        領域左上x座標 (0≦  x ≦(ルート画像の幅 -1 -  width ))
    - [in] y        領域左上y座標 (0≦  y ≦(ルート画像の高さ -1 -  height ))
    - [in] width    領域幅   (1≦  width ≦(ルート画像の幅-  x ))
    - [in] height   領域高さ (1≦  height ≦(ルート画像の高さ-  y ))

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータエラー
    - F_ERR_INVALID_IMAGE  不正な画像が渡されました
    - F_ERR_NOMEMORY       メモリ不足により異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_child_attach_single_ch(hchild, hroot, ch, x, y, width, height):
    r"""INT FVALGAPI fnFIE_img_child_attach_single_ch( FHANDLE hchild, FHANDLE hroot, INT ch, INT x, INT y, INT width, INT height )
    チャイルド画像をルート画像へ割り当てる

    Params:
    - [in] hchild   割り当てるチャイルド画像
    - [in] hroot    割り当てられるルート画像(チャイルド画像でも可)
    - [in] ch       チャイルド画像を割り当てる、ルート画像のチャネル(0≦  ch ≦(ルート画像のch数-1))
    - [in] x        領域左上x座標 (0≦  x ≦(ルート画像の幅 -1 -  width ))
    - [in] y        領域左上y座標 (0≦  y ≦(ルート画像の高さ -1 -  height ))
    - [in] width    領域幅   (1≦  width ≦(ルート画像の幅-  x ))
    - [in] height   領域高さ (1≦  height ≦(ルート画像の高さ-  y ))

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータエラー
    - F_ERR_INVALID_IMAGE  不正な画像が渡されました
    - F_ERR_NOMEMORY       メモリ不足により異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_child_attach_single_ch(hchild, hroot, ch, x, y, width, height)

def fnFIE_img_get_params(himg, channels, type, step, width, height) -> Any:
    r"""INT FVALGAPI fnFIE_img_get_params( FHANDLE himg, INT* channels, INT* type, INT_PTR* step, INT* width, INT* height )
    画像情報取得

    Params:
    - [in]  himg     情報を取得する画像のハンドル
    - [out] channels 画像メモリのチャネル数
    - [out] type     画像メモリの種別
    - [out] step     画像メモリの行ステップ(画素単位)
    - [out] width    領域幅
    - [out] height   領域高さ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_get_params(himg, channels=None, type=None, step=None, width=None, height=None):
    r"""INT FVALGAPI fnFIE_img_get_params( FHANDLE himg, INT* channels, INT* type, INT_PTR* step, INT* width, INT* height )
    画像情報取得

    Params:
    - [in]  himg     情報を取得する画像のハンドル
    - [out] channels 画像メモリのチャネル数
    - [out] type     画像メモリの種別
    - [out] step     画像メモリの行ステップ(画素単位)
    - [out] width    領域幅
    - [out] height   領域高さ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_get_params(himg, channels, type, step, width, height)

def fnFIE_img_get_adrs(himg) -> Any:
    r"""void * fnFIE_img_get_adrs( FHANDLE himg )
    画像アドレス取得(チャネル０固定)

    Params:
    - [in]  himg     アドレスを取得する画像のハンドル

    Returns:
    - 正常終了した場合は、左上画素のアドレスを返します。
            異常終了した場合は、NULLを返します。(パラメータエラー、画像形式エラー、ライセンスエラー、または未初期化エラー)
    """
    raise NotImplementedError

def img_get_adrs(himg):
    r"""void * fnFIE_img_get_adrs( FHANDLE himg )
    画像アドレス取得(チャネル０固定)

    Params:
    - [in]  himg     アドレスを取得する画像のハンドル

    Returns:
    - 正常終了した場合は、左上画素のアドレスを返します。
            異常終了した場合は、NULLを返します。(パラメータエラー、画像形式エラー、ライセンスエラー、または未初期化エラー)
    """

    return _fie.fnFIE_img_get_adrs(himg)

def fnFIE_img_get_ch_adrs(himg, channel) -> Any:
    r"""void * fnFIE_img_get_ch_adrs( FHANDLE himg, INT channel )
    画像アドレス取得

    Params:
    - [in]  himg    アドレスを取得する画像のハンドル
    - [in]  channel アドレスを取得するチャネル番号

    Returns:
    - 正常終了した場合は、左上画素のアドレスを返します。
            異常終了した場合は、NULLを返します。(パラメータエラー、画像形式エラー、ライセンスエラー、または未初期化エラー)
    """
    raise NotImplementedError

def img_get_ch_adrs(himg, channel):
    r"""void * fnFIE_img_get_ch_adrs( FHANDLE himg, INT channel )
    画像アドレス取得

    Params:
    - [in]  himg    アドレスを取得する画像のハンドル
    - [in]  channel アドレスを取得するチャネル番号

    Returns:
    - 正常終了した場合は、左上画素のアドレスを返します。
            異常終了した場合は、NULLを返します。(パラメータエラー、画像形式エラー、ライセンスエラー、または未初期化エラー)
    """

    return _fie.fnFIE_img_get_ch_adrs(himg, channel)

def fnFIE_img_get_binadrs(himg, adrs, bitpos) -> Any:
    r"""void fnFIE_img_get_binadrs( FHANDLE himg, UINT ** adrs, INT * bitpos )
    ２値画像の画像アドレス取得(チャネル０固定)

    Params:
    - [in]  himg    アドレスを取得する画像のハンドル
    - [out] adrs    左上画素が含まれるブロックのアドレス
    - [out] bitpos  ブロック内の左上画素のビット位置。
                        ブロック内一番左側(X座標が小さい方)を0とする0〜31の値。

    Returns:
    """
    raise NotImplementedError

def img_get_binadrs(himg, adrs, bitpos):
    r"""void fnFIE_img_get_binadrs( FHANDLE himg, UINT ** adrs, INT * bitpos )
    ２値画像の画像アドレス取得(チャネル０固定)

    Params:
    - [in]  himg    アドレスを取得する画像のハンドル
    - [out] adrs    左上画素が含まれるブロックのアドレス
    - [out] bitpos  ブロック内の左上画素のビット位置。
                        ブロック内一番左側(X座標が小さい方)を0とする0〜31の値。

    Returns:
    """

    return _fie.fnFIE_img_get_binadrs(himg, adrs, bitpos)

def fnFIE_img_get_ch_binadrs(himg, channel, adrs, bitpos) -> Any:
    r"""void fnFIE_img_get_ch_binadrs( FHANDLE himg, INT channel, UINT ** adrs, INT * bitpos )
    ２値画像の画像アドレス取得

    Params:
    - [in]  himg    アドレスを取得する画像のハンドル
    - [in]  channel アドレスを取得するチャネルの番号
    - [out] adrs    左上画素が含まれるブロックのアドレス
    - [out] bitpos  ブロック内の左上画素のビット位置。
                        ブロック内一番左側(X座標が小さい方)を0とする0〜31の値。

    Returns:
    """
    raise NotImplementedError

def img_get_ch_binadrs(himg, channel, adrs, bitpos):
    r"""void fnFIE_img_get_ch_binadrs( FHANDLE himg, INT channel, UINT ** adrs, INT * bitpos )
    ２値画像の画像アドレス取得

    Params:
    - [in]  himg    アドレスを取得する画像のハンドル
    - [in]  channel アドレスを取得するチャネルの番号
    - [out] adrs    左上画素が含まれるブロックのアドレス
    - [out] bitpos  ブロック内の左上画素のビット位置。
                        ブロック内一番左側(X座標が小さい方)を0とする0〜31の値。

    Returns:
    """

    return _fie.fnFIE_img_get_ch_binadrs(himg, channel, adrs, bitpos)

def fnFIE_img_get_channels(himg) -> Any:
    r"""INT FVALGAPI fnFIE_img_get_channels( FHANDLE himg )
    画像情報取得(チャネル数)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像のチャネル数を返します。
            異常終了した場合は、-1を返します。
    """
    raise NotImplementedError

def img_get_channels(himg):
    r"""INT FVALGAPI fnFIE_img_get_channels( FHANDLE himg )
    画像情報取得(チャネル数)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像のチャネル数を返します。
            異常終了した場合は、-1を返します。
    """

    return _fie.fnFIE_img_get_channels(himg)

def fnFIE_img_get_type(himg) -> Any:
    r"""INT FVALGAPI fnFIE_img_get_type( FHANDLE himg )
    画像情報取得(画像タイプ)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像のタイプを返します。
            異常終了した場合は、-1を返します。
    """
    raise NotImplementedError

def img_get_type(himg):
    r"""INT FVALGAPI fnFIE_img_get_type( FHANDLE himg )
    画像情報取得(画像タイプ)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像のタイプを返します。
            異常終了した場合は、-1を返します。
    """

    return _fie.fnFIE_img_get_type(himg)

def fnFIE_img_get_step(himg) -> Any:
    r"""INT_PTR FVALGAPI fnFIE_img_get_step( FHANDLE himg )
    画像情報取得(ステップ)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像のステップを返します。
            異常終了した場合は、-1を返します。
    """
    raise NotImplementedError

def img_get_step(himg):
    r"""INT_PTR FVALGAPI fnFIE_img_get_step( FHANDLE himg )
    画像情報取得(ステップ)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像のステップを返します。
            異常終了した場合は、-1を返します。
    """

    return _fie.fnFIE_img_get_step(himg)

def fnFIE_img_get_step_as_bytes(himg) -> Any:
    r"""INT_PTR FVALGAPI fnFIE_img_get_step_as_bytes( FHANDLE himg )
    画像情報取得(メモリステップ)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像のステップを返します。
            異常終了した場合は、-1を返します。
    """
    raise NotImplementedError

def img_get_step_as_bytes(himg):
    r"""INT_PTR FVALGAPI fnFIE_img_get_step_as_bytes( FHANDLE himg )
    画像情報取得(メモリステップ)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像のステップを返します。
            異常終了した場合は、-1を返します。
    """

    return _fie.fnFIE_img_get_step_as_bytes(himg)

def fnFIE_img_get_pixel_size(himg) -> Any:
    r"""INT_PTR FVALGAPI fnFIE_img_get_pixel_size( FHANDLE himg )
    画像情報取得(画素サイズ)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像の画素サイズを返します。
            異常終了した場合は、-1を返します。
    """
    raise NotImplementedError

def img_get_pixel_size(himg):
    r"""INT_PTR FVALGAPI fnFIE_img_get_pixel_size( FHANDLE himg )
    画像情報取得(画素サイズ)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像の画素サイズを返します。
            異常終了した場合は、-1を返します。
    """

    return _fie.fnFIE_img_get_pixel_size(himg)

def fnFIE_img_get_width(himg) -> Any:
    r"""INT FVALGAPI fnFIE_img_get_width( FHANDLE himg )
    画像情報取得(画像幅)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像の幅を返します。
            異常終了した場合は、-1を返します。
    """
    raise NotImplementedError

def img_get_width(himg):
    r"""INT FVALGAPI fnFIE_img_get_width( FHANDLE himg )
    画像情報取得(画像幅)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像の幅を返します。
            異常終了した場合は、-1を返します。
    """

    return _fie.fnFIE_img_get_width(himg)

def fnFIE_img_get_height(himg) -> Any:
    r"""INT FVALGAPI fnFIE_img_get_height( FHANDLE himg )
    画像情報取得(画像高さ)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像の高さを返します。
            異常終了した場合は、-1を返します。
    """
    raise NotImplementedError

def img_get_height(himg):
    r"""INT FVALGAPI fnFIE_img_get_height( FHANDLE himg )
    画像情報取得(画像高さ)

    Params:
    - [in]  himg     情報を取得する画像のハンドル

    Returns:
    - 正常終了した場合は、画像の高さを返します。
            異常終了した場合は、-1を返します。
    """

    return _fie.fnFIE_img_get_height(himg)

def fnFIE_img_get_root_params(himg, hroot, channel, offset_x, offset_y) -> Any:
    r"""INT FVALGAPI fnFIE_img_get_root_params( FHANDLE himg, FHANDLE* hroot, INT* channel, INT* offset_x, INT* offset_y )
    画像のルート情報取得

    Params:
    -  [in]  himg       情報を取得する画像
    -  [out] hroot       himg の割り当てられているルート画像のハンドル
                             himg がルート画像のときは  himg を返す(つまり  *hroot =  himg )
                            関数エントリー時  *hroot == NULL でなければなりません。
    -  [out] channel     *hroot のうち  himg の割り当てられているチャネル番号
                             himg がルート画像の場合、または  himg が  hroot の全チャネルに
                            割り当てられている場合は -1 を返す
    -  [out] offset_x    himg の左上Ｘ座標（ルート画像の左上画素を(0,0)としたときの座標）
    -  [out] offset_y    himg の左上Ｙ座標（ルート画像の左上画素を(0,0)としたときの座標）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE   himg に無効な画像ハンドルが指定された
    - F_ERR_INVALID_PARAM  無効なパラメータが入力された。
                                 - 出力パラメータの何れかがNULL
                                 -  *hroot がNULLでない
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_get_root_params(himg, hroot, channel=DUMMY_INT, offset_x=DUMMY_INT, offset_y=DUMMY_INT):
    r"""INT FVALGAPI fnFIE_img_get_root_params( FHANDLE himg, FHANDLE* hroot, INT* channel, INT* offset_x, INT* offset_y )
    画像のルート情報取得

    Params:
    -  [in]  himg       情報を取得する画像
    -  [out] hroot       himg の割り当てられているルート画像のハンドル
                             himg がルート画像のときは  himg を返す(つまり  *hroot =  himg )
                            関数エントリー時  *hroot == NULL でなければなりません。
    -  [out] channel     *hroot のうち  himg の割り当てられているチャネル番号
                             himg がルート画像の場合、または  himg が  hroot の全チャネルに
                            割り当てられている場合は -1 を返す
    -  [out] offset_x    himg の左上Ｘ座標（ルート画像の左上画素を(0,0)としたときの座標）
    -  [out] offset_y    himg の左上Ｙ座標（ルート画像の左上画素を(0,0)としたときの座標）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE   himg に無効な画像ハンドルが指定された
    - F_ERR_INVALID_PARAM  無効なパラメータが入力された。
                                 - 出力パラメータの何れかがNULL
                                 -  *hroot がNULLでない
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_get_root_params(himg, hroot, channel, offset_x, offset_y)

def fnFIE_img_is_overlaped(himg1, himg2) -> Any:
    r"""INT FVALGAPI fnFIE_img_is_overlaped( FHANDLE himg1, FHANDLE himg2 )
    画像オーバーラップ判定

    Params:
    - [in]  himg1    判定する画像１
    - [in]  himg2    判定する画像２

    Returns:
    - 0                   ２枚の画像はオーバーラップしていない
    - 1                   ２枚の画像の一部分がオーバーラップしている
    - 2                   ２枚の画像は完全に同じ部分を指している
    - F_ERR_INVALID_IMAGE 無効な画像が指定された
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_is_overlaped(himg1, himg2):
    r"""INT FVALGAPI fnFIE_img_is_overlaped( FHANDLE himg1, FHANDLE himg2 )
    画像オーバーラップ判定

    Params:
    - [in]  himg1    判定する画像１
    - [in]  himg2    判定する画像２

    Returns:
    - 0                   ２枚の画像はオーバーラップしていない
    - 1                   ２枚の画像の一部分がオーバーラップしている
    - 2                   ２枚の画像は完全に同じ部分を指している
    - F_ERR_INVALID_IMAGE 無効な画像が指定された
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_is_overlaped(himg1, himg2)

def fnFIE_check_tiff_info(filename, type, info) -> Any:
    r"""INT FVALGAPI fnFIE_check_tiff_info( const CHAR* filename, enum f_color_img_type type, F_IMG_INFO* info )
    [OSS] TIFFファイルの内容確認

    Params:
    - [in]  filename    読み込むTIFFファイル名
    - [in]  type        FIE画像オブジェクトの、F_IMG_UC8、またはF_IMG_RGBQUADで保存可能な場合の画像タイプを指定する。
                            それ以外のタイプでは無視される。
                        - F_IMG_UC8で保存する場合は、F_COLOR_IMG_TYPE_UC8を指定
                        - F_IMG_RGBQUADで保存する場合は、F_COLOR_IMG_TYPE_RGBQを指定
    - [out] info        読み込み先となるFIE画像の情報

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 TIFFファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なTIFFファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def check_tiff_info(filename, type, info):
    r"""INT FVALGAPI fnFIE_check_tiff_info( const CHAR* filename, enum f_color_img_type type, F_IMG_INFO* info )
    [OSS] TIFFファイルの内容確認

    Params:
    - [in]  filename    読み込むTIFFファイル名
    - [in]  type        FIE画像オブジェクトの、F_IMG_UC8、またはF_IMG_RGBQUADで保存可能な場合の画像タイプを指定する。
                            それ以外のタイプでは無視される。
                        - F_IMG_UC8で保存する場合は、F_COLOR_IMG_TYPE_UC8を指定
                        - F_IMG_RGBQUADで保存する場合は、F_COLOR_IMG_TYPE_RGBQを指定
    - [out] info        読み込み先となるFIE画像の情報

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 TIFFファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なTIFFファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_check_tiff_info(filename, type, info)

def fnFIE_load_tiff(filename, hImg, type) -> Any:
    r"""INT FVALGAPI fnFIE_load_tiff( const CHAR* filename, FHANDLE* hImg, enum f_color_img_type type )
    [OSS] TIFFファイル読み込み

    Params:
    - [in]  filename    読み込むTIFFファイル名
    - [out] hImg        読み込み先ルート画像オブジェクトハンドルのポインタ
    - [in]  type        FIE画像オブジェクトの、F_IMG_UC8、またはF_IMG_RGBQUADで保存可能な場合の画素タイプを指定する。
                            それ以外のタイプでは無視される。
                        - F_IMG_UC8で保存する場合は、F_COLOR_IMG_TYPE_UC8を指定
                        - F_IMG_RGBQUADで保存する場合は、F_COLOR_IMG_TYPE_RGBQを指定

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 TIFFファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なTIFFファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def load_tiff(filename, hImg, type=F_COLOR_IMG_TYPE_UC8):
    r"""INT FVALGAPI fnFIE_load_tiff( const CHAR* filename, FHANDLE* hImg, enum f_color_img_type type )
    [OSS] TIFFファイル読み込み

    Params:
    - [in]  filename    読み込むTIFFファイル名
    - [out] hImg        読み込み先ルート画像オブジェクトハンドルのポインタ
    - [in]  type        FIE画像オブジェクトの、F_IMG_UC8、またはF_IMG_RGBQUADで保存可能な場合の画素タイプを指定する。
                            それ以外のタイプでは無視される。
                        - F_IMG_UC8で保存する場合は、F_COLOR_IMG_TYPE_UC8を指定
                        - F_IMG_RGBQUADで保存する場合は、F_COLOR_IMG_TYPE_RGBQを指定

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 TIFFファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なTIFFファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_load_tiff(filename, hImg, type)

def fnFIE_save_tiff(filename, hImg, compression, quality) -> Any:
    r"""INT FVALGAPI fnFIE_save_tiff( const CHAR* filename, const FHANDLE hImg, enum f_tiff_compression compression, INT quality )
    [OSS] TIFFファイルの保存

    Params:
    - [in]      filename    保存するTIFFファイル名
    - [in]      hImg        保存するFIE画像オブジェクトのハンドル
    - [in]      compression 圧縮形式
                            - F_TIFF_COMPRESSION_NONE
                            - F_TIFF_COMPRESSION_DEFLATE
                            - F_TIFF_COMPRESSION_JPEG
                            - F_TIFF_COMPRESSION_CCITTFAX3
                            - F_TIFF_COMPRESSION_CCITTFAX4
    - [in]      quality     圧縮レベル
                            - F_TIFF_COMPRESSION_DEFLATE    [-1〜9]
                            - F_TIFF_COMPRESSION_JPEG       [0〜100]

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 TIFFファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なTIFFファイルへ書き込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def save_tiff(filename, hImg, compression=F_TIFF_COMPRESSION_DEFLATE, quality=-1):
    r"""INT FVALGAPI fnFIE_save_tiff( const CHAR* filename, const FHANDLE hImg, enum f_tiff_compression compression, INT quality )
    [OSS] TIFFファイルの保存

    Params:
    - [in]      filename    保存するTIFFファイル名
    - [in]      hImg        保存するFIE画像オブジェクトのハンドル
    - [in]      compression 圧縮形式
                            - F_TIFF_COMPRESSION_NONE
                            - F_TIFF_COMPRESSION_DEFLATE
                            - F_TIFF_COMPRESSION_JPEG
                            - F_TIFF_COMPRESSION_CCITTFAX3
                            - F_TIFF_COMPRESSION_CCITTFAX4
    - [in]      quality     圧縮レベル
                            - F_TIFF_COMPRESSION_DEFLATE    [-1〜9]
                            - F_TIFF_COMPRESSION_JPEG       [0〜100]

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 TIFFファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なTIFFファイルへ書き込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_save_tiff(filename, hImg, compression, quality)

def fnFIE_save_jpeg(filename, hImg, quality) -> Any:
    r"""INT FVALGAPI fnFIE_save_jpeg( const CHAR* filename, const FHANDLE hImg, INT quality )
    [OSS] JPEGファイルの保存

    Params:
    - [in]      filename    保存するJPEGファイル名
    - [in,out]  hImg        保存するFIE画像
    - [in]      quality     保存するJPEGファイルの品質[0,100]

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 JPEGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なJPEGファイルへ書き込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def save_jpeg(filename, hImg, quality=95):
    r"""INT FVALGAPI fnFIE_save_jpeg( const CHAR* filename, const FHANDLE hImg, INT quality )
    [OSS] JPEGファイルの保存

    Params:
    - [in]      filename    保存するJPEGファイル名
    - [in,out]  hImg        保存するFIE画像
    - [in]      quality     保存するJPEGファイルの品質[0,100]

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 JPEGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なJPEGファイルへ書き込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_save_jpeg(filename, hImg, quality)

def fnFIE_load_jpeg(filename, hImg, type) -> Any:
    r"""INT FVALGAPI fnFIE_load_jpeg( const CHAR* filename, FHANDLE* hImg, enum f_color_img_type type )
    [OSS] JPEGファイル読み込み

    Params:
    - [in]  filename    読み込むJPEGファイル名
    - [out] hImg        読み込み先ルート画像オブジェクトのハンドルのポインタ
    - [in]  type        FIE画像オブジェクトの、F_IMG_UC8、またはF_IMG_RGBQUADで保存可能な場合の画素タイプを指定する。
                            それ以外のタイプでは無視される。
                        - F_IMG_UC8で保存する場合は、F_COLOR_IMG_TYPE_UC8を指定
                        - F_IMG_RGBQUADで保存する場合は、F_COLOR_IMG_TYPE_RGBQを指定

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 JPEGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なJPEGファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def load_jpeg(filename, hImg, type=F_COLOR_IMG_TYPE_UC8):
    r"""INT FVALGAPI fnFIE_load_jpeg( const CHAR* filename, FHANDLE* hImg, enum f_color_img_type type )
    [OSS] JPEGファイル読み込み

    Params:
    - [in]  filename    読み込むJPEGファイル名
    - [out] hImg        読み込み先ルート画像オブジェクトのハンドルのポインタ
    - [in]  type        FIE画像オブジェクトの、F_IMG_UC8、またはF_IMG_RGBQUADで保存可能な場合の画素タイプを指定する。
                            それ以外のタイプでは無視される。
                        - F_IMG_UC8で保存する場合は、F_COLOR_IMG_TYPE_UC8を指定
                        - F_IMG_RGBQUADで保存する場合は、F_COLOR_IMG_TYPE_RGBQを指定

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 JPEGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なJPEGファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_load_jpeg(filename, hImg, type)

def fnFIE_check_jpeg_info(filename, type, info) -> Any:
    r"""INT FVALGAPI fnFIE_check_jpeg_info( const CHAR* filename, enum f_color_img_type type, F_IMG_INFO* info )
    [OSS] JPEGファイルの内容確認

    Params:
    - [in]  filename    読み込むJPEGファイル名
    - [in]  type        FIE画像オブジェクトの、F_IMG_UC8、またはF_IMG_RGBQUADで保存可能な場合の画素タイプを指定する。
                            それ以外のタイプでは無視される。
                        - F_IMG_UC8で保存する場合は、F_COLOR_IMG_TYPE_UC8を指定
                        - F_IMG_RGBQUADで保存する場合は、F_COLOR_IMG_TYPE_RGBQを指定
    - [out] info        読み込み先となるFIE画像の情報

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 JPEGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なJPEGファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def check_jpeg_info(filename, type, info):
    r"""INT FVALGAPI fnFIE_check_jpeg_info( const CHAR* filename, enum f_color_img_type type, F_IMG_INFO* info )
    [OSS] JPEGファイルの内容確認

    Params:
    - [in]  filename    読み込むJPEGファイル名
    - [in]  type        FIE画像オブジェクトの、F_IMG_UC8、またはF_IMG_RGBQUADで保存可能な場合の画素タイプを指定する。
                            それ以外のタイプでは無視される。
                        - F_IMG_UC8で保存する場合は、F_COLOR_IMG_TYPE_UC8を指定
                        - F_IMG_RGBQUADで保存する場合は、F_COLOR_IMG_TYPE_RGBQを指定
    - [out] info        読み込み先となるFIE画像の情報

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 JPEGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なJPEGファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_check_jpeg_info(filename, type, info)

def fnFIE_check_png_info(filename, type, info) -> Any:
    r"""INT FVALGAPI fnFIE_check_png_info( const CHAR* filename, enum f_color_img_type type, F_IMG_INFO* info )
    [OSS] PNGファイルの内容確認

    Params:
    - [in]  filename    読み込むPNGファイル名
    - [in]  type        FIE画像形式の、F_IMG_UC8、またはF_IMG_RGBQUADで保存可能な場合の画素タイプを指定する。
                            それ以外のタイプでは無視される。
                        - F_IMG_UC8で保存する場合は、F_COLOR_IMG_TYPE_UC8を指定
                        - F_IMG_RGBQUAで保存する場合は、F_COLOR_IMG_TYPE_RGBQを指定
    - [out] info        読み込み先となるFIE画像の情報

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 PNGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なPNGファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def check_png_info(filename, type, info):
    r"""INT FVALGAPI fnFIE_check_png_info( const CHAR* filename, enum f_color_img_type type, F_IMG_INFO* info )
    [OSS] PNGファイルの内容確認

    Params:
    - [in]  filename    読み込むPNGファイル名
    - [in]  type        FIE画像形式の、F_IMG_UC8、またはF_IMG_RGBQUADで保存可能な場合の画素タイプを指定する。
                            それ以外のタイプでは無視される。
                        - F_IMG_UC8で保存する場合は、F_COLOR_IMG_TYPE_UC8を指定
                        - F_IMG_RGBQUAで保存する場合は、F_COLOR_IMG_TYPE_RGBQを指定
    - [out] info        読み込み先となるFIE画像の情報

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 PNGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なPNGファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_check_png_info(filename, type, info)

def fnFIE_load_png(filename, hImg, type) -> Any:
    r"""INT FVALGAPI fnFIE_load_png( const CHAR* filename, FHANDLE* hImg, enum f_color_img_type type )
    [OSS] PNGファイル読み込み

    Params:
    - [in]  filename    読み込むPNGファイル名
    - [out] hImg        読み込み先ルート画像オブジェクトのハンドルのポインタ
    - [in]  type        出力するFIE画像オブジェクトの画像形式が F_IMG_UC8 または F_IMG_RGBQUAD を
                            選択可能な場合に、どちらの画素形式とするかを指定します。
                            その他の場合では無視されます。
                        - F_COLOR_IMG_TYPE_UC8: F_IMG_UC8で出力する
                        - F_COLOR_IMG_TYPE_RGBQ: F_IMG_RGBQUADで出力する

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 PNGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なPNGファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def load_png(filename, hImg, type=F_COLOR_IMG_TYPE_UC8):
    r"""INT FVALGAPI fnFIE_load_png( const CHAR* filename, FHANDLE* hImg, enum f_color_img_type type )
    [OSS] PNGファイル読み込み

    Params:
    - [in]  filename    読み込むPNGファイル名
    - [out] hImg        読み込み先ルート画像オブジェクトのハンドルのポインタ
    - [in]  type        出力するFIE画像オブジェクトの画像形式が F_IMG_UC8 または F_IMG_RGBQUAD を
                            選択可能な場合に、どちらの画素形式とするかを指定します。
                            その他の場合では無視されます。
                        - F_COLOR_IMG_TYPE_UC8: F_IMG_UC8で出力する
                        - F_COLOR_IMG_TYPE_RGBQ: F_IMG_RGBQUADで出力する

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 PNGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なPNGファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_load_png(filename, hImg, type)

def fnFIE_save_png(filename, hImg, compression_level) -> Any:
    r"""INT FVALGAPI fnFIE_save_png( const CHAR* filename, FHANDLE hImg, INT compression_level )
    [OSS] PNGファイルの保存

    Params:
    - [in]  filename            保存するPNGファイル名
    - [in]  hImg                保存するFIE画像
    - [in]  compression_level   圧縮レベル[-1〜9]

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 PNGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なPNGファイルへ書き込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def save_png(filename, hImg, compression_level=-1):
    r"""INT FVALGAPI fnFIE_save_png( const CHAR* filename, FHANDLE hImg, INT compression_level )
    [OSS] PNGファイルの保存

    Params:
    - [in]  filename            保存するPNGファイル名
    - [in]  hImg                保存するFIE画像
    - [in]  compression_level   圧縮レベル[-1〜9]

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 PNGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なPNGファイルへ書き込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_save_png(filename, hImg, compression_level)

def fnFIE_save_png_ex(filename, hImg, compression_level, compression_strategy, filter_type) -> Any:
    r"""INT FVALGAPI fnFIE_save_png_ex( const CHAR* filename, FHANDLE hImg, INT compression_level, enum f_png_strategy compression_strategy, enum f_png_filter filter_type )
    [OSS] PNGファイルの保存（詳細設定付き）

    Params:
    - [in]  filename                保存するPNGファイル名
    - [in]  hImg                    保存するFIE画像
    - [in]  compression_level       圧縮レベル[-1〜9]
    - [in]  compression_strategy    圧縮戦略
            - F_PNG_STRATEGY_DEFAULT
            - F_PNG_STRATEGY_RLE
    - [in]  filter_type             フィルタ種別
            - F_PNG_FILTER_NONE
            - F_PNG_FILTER_SUB
            - F_PNG_FILTER_UP
            - F_PNG_FILTER_AVG
            - F_PNG_FILTER_PAETH

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 PNGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なPNGファイルへ書き込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def save_png_ex(filename, hImg, compression_level=-1, compression_strategy=F_PNG_STRATEGY_RLE, filter_type=F_PNG_FILTER_SUB):
    r"""INT FVALGAPI fnFIE_save_png_ex( const CHAR* filename, FHANDLE hImg, INT compression_level, enum f_png_strategy compression_strategy, enum f_png_filter filter_type )
    [OSS] PNGファイルの保存（詳細設定付き）

    Params:
    - [in]  filename                保存するPNGファイル名
    - [in]  hImg                    保存するFIE画像
    - [in]  compression_level       圧縮レベル[-1〜9]
    - [in]  compression_strategy    圧縮戦略
            - F_PNG_STRATEGY_DEFAULT
            - F_PNG_STRATEGY_RLE
    - [in]  filter_type             フィルタ種別
            - F_PNG_FILTER_NONE
            - F_PNG_FILTER_SUB
            - F_PNG_FILTER_UP
            - F_PNG_FILTER_AVG
            - F_PNG_FILTER_PAETH

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 PNGファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なPNGファイルへ書き込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_save_png_ex(filename, hImg, compression_level, compression_strategy, filter_type)

def fnFIE_load_bmp(filename, himg, type) -> Any:
    r"""INT FVALGAPI fnFIE_load_bmp( const CHAR* filename, FHANDLE* himg, enum f_color_img_type type )
    ビットマップ読込

    Params:
    - [in]  filename    読込む画像ファイル名
    - [out] himg        読込み先ルート画像オブジェクトハンドル
    - [in]  type        出力するFIE画像オブジェクトの画像形式が F_IMG_UC8、F_IMG_RGBQUAD、
                            F_IMG_RGBTRIPLEのいずれかを選択可能な場合に、どの画素形式とするかを指定します。
                            その他の場合では無視されます。
                        - F_COLOR_IMG_TYPE_UC8: F_IMG_UC8で出力する
                        - F_COLOR_IMG_TYPE_RGBQ: F_IMG_RGBQUADで出力する
                        - F_COLOR_IMG_TYPE_RGBTRI: F_IMG_RGBRIPLEで出力する

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_UNSUPPORTED_IMAGE_FILE    サポートされていない形式のBMPファイル
    - F_ERR_FILE_IO                 BMPファイルのオープン失敗
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def load_bmp(filename, himg, type=F_COLOR_IMG_TYPE_UC8):
    r"""INT FVALGAPI fnFIE_load_bmp( const CHAR* filename, FHANDLE* himg, enum f_color_img_type type )
    ビットマップ読込

    Params:
    - [in]  filename    読込む画像ファイル名
    - [out] himg        読込み先ルート画像オブジェクトハンドル
    - [in]  type        出力するFIE画像オブジェクトの画像形式が F_IMG_UC8、F_IMG_RGBQUAD、
                            F_IMG_RGBTRIPLEのいずれかを選択可能な場合に、どの画素形式とするかを指定します。
                            その他の場合では無視されます。
                        - F_COLOR_IMG_TYPE_UC8: F_IMG_UC8で出力する
                        - F_COLOR_IMG_TYPE_RGBQ: F_IMG_RGBQUADで出力する
                        - F_COLOR_IMG_TYPE_RGBTRI: F_IMG_RGBRIPLEで出力する

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_UNSUPPORTED_IMAGE_FILE    サポートされていない形式のBMPファイル
    - F_ERR_FILE_IO                 BMPファイルのオープン失敗
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_load_bmp(filename, himg, type)

def fnFIE_save_bmp(filename, himg) -> Any:
    r"""INT FVALGAPI fnFIE_save_bmp( const CHAR* filename, FHANDLE himg )
    ビットマップ保存

    Params:
    - [in]  filename  保存画像ファイル名
    - [in]  himg      保存する画像( type: bin, uc8, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_FILE_IO         BMPファイルのオープン失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def save_bmp(filename, himg):
    r"""INT FVALGAPI fnFIE_save_bmp( const CHAR* filename, FHANDLE himg )
    ビットマップ保存

    Params:
    - [in]  filename  保存画像ファイル名
    - [in]  himg      保存する画像( type: bin, uc8, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_FILE_IO         BMPファイルのオープン失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_save_bmp(filename, himg)

def fnFIE_load_raw(filename, himg, type, byte_order, byte_step, width, height, header_sz) -> Any:
    r"""INT FVALGAPI fnFIE_load_raw( const CHAR* filename, FHANDLE* himg, INT type, INT byte_order, INT byte_step, INT width, INT height, size_t header_sz )
    RAW画像読込

    Params:
    - [in]  filename   読み込む画像ファイル名
    - [out] himg       読込先画像のハンドラ
    - [in]  type       RAW画像ファイルの画像タイプ
                           - F_IMG_BIN       ２値画像(32bitパッキング)
                           - F_IMG_UC8       濃淡8bit画像
                           - F_IMG_S16       濃淡符号付き16bit画像
                           - F_IMG_US16      濃淡16bit画像
                           - F_IMG_I32       濃淡符号付き32bit画像
                           - F_IMG_UI32      濃淡32bit画像
                           - F_IMG_I64       濃淡符号付き64bit画像
                           - F_IMG_FLOAT     濃淡単精度浮動小数点画像
                           - F_IMG_DOUBLE    濃淡倍精度浮動小数点画像
                           - F_IMG_RGBQUAD   RGBQUADの配列で表される、8bitカラー画像
                           - F_IMG_RGBTRIPLE 24bitパッキングカラー画像
    - [in]  byte_order RAW画像のバイトオーダー
                           - 0 Little Endian
                           - 1 Big Endian
    - [in]  byte_step  RAW画像ファイルの１行ステップ（バイト数）
    - [in]  width      RAW画像ファイルの画像幅
    - [in]  height     RAW画像ファイルの画像高さ
    - [in]  header_sz  RAW画像のヘッダサイズ(byte単位)

    Returns:
    - F_ERR_NONE          正常終了
    - F_ERR_INVALID_IMAGE 不正な画像オブジェクトが指定されたため異常終了
    - F_ERR_INVALID_PARAM 不正なパラメータが指定されたため異常終了
    - F_ERR_NOMEMORY      メモリ不足のため異常終了
    - F_ERR_FILE_IO       ファイルI/Oエラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def load_raw(filename, himg, type, byte_order, byte_step, width, height, header_sz):
    r"""INT FVALGAPI fnFIE_load_raw( const CHAR* filename, FHANDLE* himg, INT type, INT byte_order, INT byte_step, INT width, INT height, size_t header_sz )
    RAW画像読込

    Params:
    - [in]  filename   読み込む画像ファイル名
    - [out] himg       読込先画像のハンドラ
    - [in]  type       RAW画像ファイルの画像タイプ
                           - F_IMG_BIN       ２値画像(32bitパッキング)
                           - F_IMG_UC8       濃淡8bit画像
                           - F_IMG_S16       濃淡符号付き16bit画像
                           - F_IMG_US16      濃淡16bit画像
                           - F_IMG_I32       濃淡符号付き32bit画像
                           - F_IMG_UI32      濃淡32bit画像
                           - F_IMG_I64       濃淡符号付き64bit画像
                           - F_IMG_FLOAT     濃淡単精度浮動小数点画像
                           - F_IMG_DOUBLE    濃淡倍精度浮動小数点画像
                           - F_IMG_RGBQUAD   RGBQUADの配列で表される、8bitカラー画像
                           - F_IMG_RGBTRIPLE 24bitパッキングカラー画像
    - [in]  byte_order RAW画像のバイトオーダー
                           - 0 Little Endian
                           - 1 Big Endian
    - [in]  byte_step  RAW画像ファイルの１行ステップ（バイト数）
    - [in]  width      RAW画像ファイルの画像幅
    - [in]  height     RAW画像ファイルの画像高さ
    - [in]  header_sz  RAW画像のヘッダサイズ(byte単位)

    Returns:
    - F_ERR_NONE          正常終了
    - F_ERR_INVALID_IMAGE 不正な画像オブジェクトが指定されたため異常終了
    - F_ERR_INVALID_PARAM 不正なパラメータが指定されたため異常終了
    - F_ERR_NOMEMORY      メモリ不足のため異常終了
    - F_ERR_FILE_IO       ファイルI/Oエラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_load_raw(filename, himg, type, byte_order, byte_step, width, height, header_sz)

def fnFIE_save_raw(filename, himg, header, header_sz) -> Any:
    r"""INT FVALGAPI fnFIE_save_raw( const CHAR* filename, FHANDLE himg, const VOID* header, size_t header_sz )
    画像をRAW形式で保存

    Params:
    - [in]  filename  保存画像ファイル名
    - [in]  himg      保存する画像のハンドル
    - [in]  header    RAW画像のヘッダデータ
    - [in]  header_sz RAW画像のヘッダサイズ(==headerのサイズ) (byte単位)

    Returns:
    - F_ERR_NONE          正常終了
    - F_ERR_INVALID_IMAGE 不正な画像オブジェクトが指定されたため異常終了
    - F_ERR_INVALID_PARAM 不正なパラメータが指定されたため異常終了
    - F_ERR_FILE_IO       ファイルI/Oエラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def save_raw(filename, himg, header, header_sz):
    r"""INT FVALGAPI fnFIE_save_raw( const CHAR* filename, FHANDLE himg, const VOID* header, size_t header_sz )
    画像をRAW形式で保存

    Params:
    - [in]  filename  保存画像ファイル名
    - [in]  himg      保存する画像のハンドル
    - [in]  header    RAW画像のヘッダデータ
    - [in]  header_sz RAW画像のヘッダサイズ(==headerのサイズ) (byte単位)

    Returns:
    - F_ERR_NONE          正常終了
    - F_ERR_INVALID_IMAGE 不正な画像オブジェクトが指定されたため異常終了
    - F_ERR_INVALID_PARAM 不正なパラメータが指定されたため異常終了
    - F_ERR_FILE_IO       ファイルI/Oエラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_save_raw(filename, himg, header, header_sz)

def fnFIE_load_img_file(filename, himg, type) -> Any:
    r"""INT FVALGAPI fnFIE_load_img_file( const CHAR* filename, FHANDLE* himg, enum f_color_img_type type )
    [OSS] 画像ファイルの読み込み

    Params:
    - [in]  filename    読み込む画像ファイル名
    - [out] himg        読み込み先ルート画像オブジェクトのハンドルのポインタ
    - [in]  type        出力するFIE画像オブジェクトの画像形式が F_IMG_UC8 または F_IMG_RGBQUAD を
                            選択可能な場合に、どちらの画素形式とするかを指定します。
                            その他の場合では無視されます。
                        - F_COLOR_IMG_TYPE_UC8: F_IMG_UC8で出力する
                        - F_COLOR_IMG_TYPE_RGBQ: F_IMG_RGBQUADで出力する

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 ファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def load_img_file(filename, himg, type=F_COLOR_IMG_TYPE_UC8):
    r"""INT FVALGAPI fnFIE_load_img_file( const CHAR* filename, FHANDLE* himg, enum f_color_img_type type )
    [OSS] 画像ファイルの読み込み

    Params:
    - [in]  filename    読み込む画像ファイル名
    - [out] himg        読み込み先ルート画像オブジェクトのハンドルのポインタ
    - [in]  type        出力するFIE画像オブジェクトの画像形式が F_IMG_UC8 または F_IMG_RGBQUAD を
                            選択可能な場合に、どちらの画素形式とするかを指定します。
                            その他の場合では無視されます。
                        - F_COLOR_IMG_TYPE_UC8: F_IMG_UC8で出力する
                        - F_COLOR_IMG_TYPE_RGBQ: F_IMG_RGBQUADで出力する

    Returns:
    - F_ERR_NONE                        正常終了
    - F_ERR_NOMEMORY                    メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE               不正なFIE画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM               不正なパラメータが渡された
    - F_ERR_FILE_IO                 ファイルのオープン失敗
    - F_ERR_UNSUPPORTED_IMAGE_FILE  不正なファイルを読み込んだ
    - F_ERR_NO_LICENCE              ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_load_img_file(filename, himg, type)

def fnFIE_vectarray_alloc(tag, elemsz, num) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_vectarray_alloc( enum f_objtag tag, size_t elemsz, size_t num )
    配列オブジェクトの確保

    Params:
    - [in] tag     オブジェクト型認識のための種別IDを指定します。
    - [in] elemsz  １要素当たりのバイト数を指定します。（１以上）
    - [in] num     要素の数を指定します。０以下の値が指定された場合は、要素数０の配列を作成します。

    Returns:
    - 正常終了した場合は、配列オブジェクトのハンドルを返します。
            メモリ不足などにより異常終了した場合は、NULL を返します。
    """
    raise NotImplementedError

def vectarray_alloc(tag, elemsz, num=0):
    r"""FHANDLE FVALGAPI fnFIE_vectarray_alloc( enum f_objtag tag, size_t elemsz, size_t num )
    配列オブジェクトの確保

    Params:
    - [in] tag     オブジェクト型認識のための種別IDを指定します。
    - [in] elemsz  １要素当たりのバイト数を指定します。（１以上）
    - [in] num     要素の数を指定します。０以下の値が指定された場合は、要素数０の配列を作成します。

    Returns:
    - 正常終了した場合は、配列オブジェクトのハンドルを返します。
            メモリ不足などにより異常終了した場合は、NULL を返します。
    """

    return _fie.fnFIE_vectarray_alloc(tag, elemsz, num)

def fnFIE_vectarray_free(hvarray) -> Any:
    r"""void fnFIE_vectarray_free( FHANDLE hvarray )
    配列オブジェクトの解放

    Params:
    - [in] hvarray 解放する配列オブジェクト

    Returns:
    """
    raise NotImplementedError

def vectarray_free(hvarray):
    r"""void fnFIE_vectarray_free( FHANDLE hvarray )
    配列オブジェクトの解放

    Params:
    - [in] hvarray 解放する配列オブジェクト

    Returns:
    """

    return _fie.fnFIE_vectarray_free(hvarray)

def fnFIE_vectarray_getptr(hvarray) -> Any:
    r"""void * fnFIE_vectarray_getptr( FHANDLE hvarray )
    先頭ポインタの取得

    Params:
    - [in] hvarray  配列オブジェクトのハンドル

    Returns:
    """
    raise NotImplementedError

def vectarray_getptr(hvarray):
    r"""void * fnFIE_vectarray_getptr( FHANDLE hvarray )
    先頭ポインタの取得

    Params:
    - [in] hvarray  配列オブジェクトのハンドル

    Returns:
    """

    return _fie.fnFIE_vectarray_getptr(hvarray)

def fnFIE_vectarray_getat(hvarray, idx) -> Any:
    r"""void * fnFIE_vectarray_getat( FHANDLE hvarray, size_t idx )
    指定位置要素のポインタ取得

    Params:
    - [in] hvarray  配列オブジェクトのハンドル
    - [in] idx      要素番号

    Returns:
    """
    raise NotImplementedError

def vectarray_getat(hvarray, idx):
    r"""void * fnFIE_vectarray_getat( FHANDLE hvarray, size_t idx )
    指定位置要素のポインタ取得

    Params:
    - [in] hvarray  配列オブジェクトのハンドル
    - [in] idx      要素番号

    Returns:
    """

    return _fie.fnFIE_vectarray_getat(hvarray, idx)

def fnFIE_vectarray_getnum(hvarray) -> Any:
    r"""size_t FVALGAPI fnFIE_vectarray_getnum( FHANDLE hvarray )
    配列の要素数を取得

    Params:
    - [in] hvarray 配列オブジェクトのハンドル

    Returns:
    - 要素数
    """
    raise NotImplementedError

def vectarray_getnum(hvarray):
    r"""size_t FVALGAPI fnFIE_vectarray_getnum( FHANDLE hvarray )
    配列の要素数を取得

    Params:
    - [in] hvarray 配列オブジェクトのハンドル

    Returns:
    - 要素数
    """

    return _fie.fnFIE_vectarray_getnum(hvarray)

def fnFIE_vectarray_getmaxnum(hvarray) -> Any:
    r"""size_t FVALGAPI fnFIE_vectarray_getmaxnum( FHANDLE hvarray )
    保持しているメモリ量を取得

    Params:
    - [in] hvarray 配列オブジェクトのハンドル

    Returns:
    - 確保されているメモリ量（要素の数）
    """
    raise NotImplementedError

def vectarray_getmaxnum(hvarray):
    r"""size_t FVALGAPI fnFIE_vectarray_getmaxnum( FHANDLE hvarray )
    保持しているメモリ量を取得

    Params:
    - [in] hvarray 配列オブジェクトのハンドル

    Returns:
    - 確保されているメモリ量（要素の数）
    """

    return _fie.fnFIE_vectarray_getmaxnum(hvarray)

def fnFIE_vectarray_resize(hvarray, num) -> Any:
    r"""INT FVALGAPI fnFIE_vectarray_resize( FHANDLE hvarray, size_t num )
    要素数の変更

    Params:
    - [in] hvarray  配列オブジェクトのハンドル
    - [in] num      変更後の個数

    Returns:
    - F_ERR_NONE      正常終了
    - F_ERR_NOMEMORY メモリ不足エラー
    """
    raise NotImplementedError

def vectarray_resize(hvarray, num):
    r"""INT FVALGAPI fnFIE_vectarray_resize( FHANDLE hvarray, size_t num )
    要素数の変更

    Params:
    - [in] hvarray  配列オブジェクトのハンドル
    - [in] num      変更後の個数

    Returns:
    - F_ERR_NONE      正常終了
    - F_ERR_NOMEMORY メモリ不足エラー
    """

    return _fie.fnFIE_vectarray_resize(hvarray, num)

def fnFIE_vectarray_clear(hvarray) -> Any:
    r"""void fnFIE_vectarray_clear( FHANDLE hvarray )
    全ての要素を削除する。

    Params:
    - [in] hvarray 配列オブジェクトのハンドル

    Returns:
    - F_ERR_NONE 正常終了
    """
    raise NotImplementedError

def vectarray_clear(hvarray):
    r"""void fnFIE_vectarray_clear( FHANDLE hvarray )
    全ての要素を削除する。

    Params:
    - [in] hvarray 配列オブジェクトのハンドル

    Returns:
    - F_ERR_NONE 正常終了
    """

    return _fie.fnFIE_vectarray_clear(hvarray)

def fnFIE_vectarray_push_back(hvarray, data) -> Any:
    r"""INT FVALGAPI fnFIE_vectarray_push_back( FHANDLE hvarray, const VOID* data )
    配列の最後に追加

    Params:
    - [in] hvarray  配列オブジェクトのハンドル
    - [in] data     追加する値

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_NOMEMORY メモリ不足エラー
    """
    raise NotImplementedError

def vectarray_push_back(hvarray, data):
    r"""INT FVALGAPI fnFIE_vectarray_push_back( FHANDLE hvarray, const VOID* data )
    配列の最後に追加

    Params:
    - [in] hvarray  配列オブジェクトのハンドル
    - [in] data     追加する値

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_NOMEMORY メモリ不足エラー
    """

    return _fie.fnFIE_vectarray_push_back(hvarray, data)

def fnFIE_vectarray_pop_back(hvarray, data) -> Any:
    r"""INT FVALGAPI fnFIE_vectarray_pop_back( FHANDLE hvarray, VOID* data )
    配列の最後の要素の取り出し

    Params:
    - [in] hvarray  配列オブジェクトのハンドル
    - [in] data     追加する値

    Returns:
    - F_ERR_NONE    正常終了
    - F_ERR_UNKNOWN 配列の要素が０個のためエラー
    """
    raise NotImplementedError

def vectarray_pop_back(hvarray, data):
    r"""INT FVALGAPI fnFIE_vectarray_pop_back( FHANDLE hvarray, VOID* data )
    配列の最後の要素の取り出し

    Params:
    - [in] hvarray  配列オブジェクトのハンドル
    - [in] data     追加する値

    Returns:
    - F_ERR_NONE    正常終了
    - F_ERR_UNKNOWN 配列の要素が０個のためエラー
    """

    return _fie.fnFIE_vectarray_pop_back(hvarray, data)

def fnFIE_vectarray_insert(hvarray, idx, data) -> Any:
    r"""INT FVALGAPI fnFIE_vectarray_insert( FHANDLE hvarray, size_t idx, const VOID* data )
    要素の追加

    Params:
    - [in] hvarray 配列オブジェクトのハンドル
    - [in] idx     追加位置の番号
    - [in] data    追加する値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_INVALID_PARAM  パラメータエラー(不正なidxが指定された)
    """
    raise NotImplementedError

def vectarray_insert(hvarray, idx, data):
    r"""INT FVALGAPI fnFIE_vectarray_insert( FHANDLE hvarray, size_t idx, const VOID* data )
    要素の追加

    Params:
    - [in] hvarray 配列オブジェクトのハンドル
    - [in] idx     追加位置の番号
    - [in] data    追加する値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_INVALID_PARAM  パラメータエラー(不正なidxが指定された)
    """

    return _fie.fnFIE_vectarray_insert(hvarray, idx, data)

def fnFIE_vectarray_erace(hvarray, idx) -> Any:
    r"""INT FVALGAPI fnFIE_vectarray_erace( FHANDLE hvarray, size_t idx )
    要素の削除

    Params:
    - [in] hvarray 配列オブジェクトのハンドル
    - [in] idx     削除する要素の番号

    Returns:
    - F_ERR_NONE          正常終了
    - F_ERR_INVALID_PARAM パラメータエラー(不正なidxが指定された)
    """
    raise NotImplementedError

def vectarray_erace(hvarray, idx):
    r"""INT FVALGAPI fnFIE_vectarray_erace( FHANDLE hvarray, size_t idx )
    要素の削除

    Params:
    - [in] hvarray 配列オブジェクトのハンドル
    - [in] idx     削除する要素の番号

    Returns:
    - F_ERR_NONE          正常終了
    - F_ERR_INVALID_PARAM パラメータエラー(不正なidxが指定された)
    """

    return _fie.fnFIE_vectarray_erace(hvarray, idx)

def fnFIE_fcomplex(r, i) -> Any:
    r"""FCOMPLEX FVALGAPI fnFIE_fcomplex( DOUBLE r, DOUBLE i )
    複素数生成

    Params:
    - [in]  r       実部
    - [in]  i       虚部

    Returns:
    - 複素数を生成して返します。
    """
    raise NotImplementedError

def fcomplex(r=0.0, i=0.0):
    r"""FCOMPLEX FVALGAPI fnFIE_fcomplex( DOUBLE r, DOUBLE i )
    複素数生成

    Params:
    - [in]  r       実部
    - [in]  i       虚部

    Returns:
    - 複素数を生成して返します。
    """

    return _fie.fnFIE_fcomplex(r, i)

def fnFIE_cadd(c1, c2) -> Any:
    r"""FCOMPLEX FVALGAPI fnFIE_cadd( FCOMPLEX c1, FCOMPLEX c2 )
    複素数同士の加算

    Params:
    - [in]  c1      複素数1
    - [in]  c2      複素数2

    Returns:
    - 加算結果を返します。
    """
    raise NotImplementedError

def cadd(c1, c2):
    r"""FCOMPLEX FVALGAPI fnFIE_cadd( FCOMPLEX c1, FCOMPLEX c2 )
    複素数同士の加算

    Params:
    - [in]  c1      複素数1
    - [in]  c2      複素数2

    Returns:
    - 加算結果を返します。
    """

    return _fie.fnFIE_cadd(c1, c2)

def fnFIE_csub(c1, c2) -> Any:
    r"""FCOMPLEX FVALGAPI fnFIE_csub( FCOMPLEX c1, FCOMPLEX c2 )
    複素数同士の減算

    Params:
    - [in]  c1      複素数1
    - [in]  c2      複素数2

    Returns:
    - 減算結果を返します。
    """
    raise NotImplementedError

def csub(c1, c2):
    r"""FCOMPLEX FVALGAPI fnFIE_csub( FCOMPLEX c1, FCOMPLEX c2 )
    複素数同士の減算

    Params:
    - [in]  c1      複素数1
    - [in]  c2      複素数2

    Returns:
    - 減算結果を返します。
    """

    return _fie.fnFIE_csub(c1, c2)

def fnFIE_cmul(c1, c2) -> Any:
    r"""FCOMPLEX FVALGAPI fnFIE_cmul( FCOMPLEX c1, FCOMPLEX c2 )
    複素数同士の積

    Params:
    - [in]  c1      複素数1
    - [in]  c2      複素数2

    Returns:
    - 積結果を返します。
    """
    raise NotImplementedError

def cmul(c1, c2):
    r"""FCOMPLEX FVALGAPI fnFIE_cmul( FCOMPLEX c1, FCOMPLEX c2 )
    複素数同士の積

    Params:
    - [in]  c1      複素数1
    - [in]  c2      複素数2

    Returns:
    - 積結果を返します。
    """

    return _fie.fnFIE_cmul(c1, c2)

def fnFIE_cdiv(c1, c2) -> Any:
    r"""FCOMPLEX FVALGAPI fnFIE_cdiv( FCOMPLEX c1, FCOMPLEX c2 )
    複素数同士の割り算

    Params:
    - [in]  c1      複素数1
    - [in]  c2      複素数2

    Returns:
    - 割り算結果を返します。
    """
    raise NotImplementedError

def cdiv(c1, c2):
    r"""FCOMPLEX FVALGAPI fnFIE_cdiv( FCOMPLEX c1, FCOMPLEX c2 )
    複素数同士の割り算

    Params:
    - [in]  c1      複素数1
    - [in]  c2      複素数2

    Returns:
    - 割り算結果を返します。
    """

    return _fie.fnFIE_cdiv(c1, c2)

def fnFIE_ceq(c1, c2) -> Any:
    r"""BOOL FVALGAPI fnFIE_ceq( FCOMPLEX c1, FCOMPLEX c2 )
    複素数同士で==演算を行う

    Params:
    - [in]  c1      複素数1
    - [in]  c2      複素数2

    Returns:
    - TRUE  c1 == c2
    - FALSE c1 != c2
    """
    raise NotImplementedError

def ceq(c1, c2):
    r"""BOOL FVALGAPI fnFIE_ceq( FCOMPLEX c1, FCOMPLEX c2 )
    複素数同士で==演算を行う

    Params:
    - [in]  c1      複素数1
    - [in]  c2      複素数2

    Returns:
    - TRUE  c1 == c2
    - FALSE c1 != c2
    """

    return _fie.fnFIE_ceq(c1, c2)

def fnFIE_cne(c1, c2) -> Any:
    r"""BOOL FVALGAPI fnFIE_cne( FCOMPLEX c1, FCOMPLEX c2 )
    複素数同士で!=演算を行う

    Params:
    - [in]  c1      複素数1
    - [in]  c2      複素数2

    Returns:
    - TRUE  c1 != c2
    - FALSE c1 == c2
    """
    raise NotImplementedError

def cne(c1, c2):
    r"""BOOL FVALGAPI fnFIE_cne( FCOMPLEX c1, FCOMPLEX c2 )
    複素数同士で!=演算を行う

    Params:
    - [in]  c1      複素数1
    - [in]  c2      複素数2

    Returns:
    - TRUE  c1 != c2
    - FALSE c1 == c2
    """

    return _fie.fnFIE_cne(c1, c2)

def fnFIE_carg(c) -> Any:
    r"""DOUBLE FVALGAPI fnFIE_carg( FCOMPLEX c )
    複素数の偏角を計算する

    Params:
    - [in]  c       複素数

    Returns:
    - 複素数の偏角を返します。
    """
    raise NotImplementedError

def carg(c):
    r"""DOUBLE FVALGAPI fnFIE_carg( FCOMPLEX c )
    複素数の偏角を計算する

    Params:
    - [in]  c       複素数

    Returns:
    - 複素数の偏角を返します。
    """

    return _fie.fnFIE_carg(c)

def fnFIE_cabs(c) -> Any:
    r"""DOUBLE FVALGAPI fnFIE_cabs( FCOMPLEX c )
    複素数絶対値を計算する

    Params:
    - [in]  c       複素数

    Returns:
    - cの複素数絶対値を返します。
    """
    raise NotImplementedError

def cabs(c):
    r"""DOUBLE FVALGAPI fnFIE_cabs( FCOMPLEX c )
    複素数絶対値を計算する

    Params:
    - [in]  c       複素数

    Returns:
    - cの複素数絶対値を返します。
    """

    return _fie.fnFIE_cabs(c)

def fnFIE_conj(c) -> Any:
    r"""FCOMPLEX FVALGAPI fnFIE_conj( FCOMPLEX c )
    複素共役を計算する

    Params:
    - [in]  c       複素数

    Returns:
    -  c の複素共役を返します。
    """
    raise NotImplementedError

def conj(c):
    r"""FCOMPLEX FVALGAPI fnFIE_conj( FCOMPLEX c )
    複素共役を計算する

    Params:
    - [in]  c       複素数

    Returns:
    -  c の複素共役を返します。
    """

    return _fie.fnFIE_conj(c)

def fnFIE_clog(c) -> Any:
    r"""FCOMPLEX FVALGAPI fnFIE_clog( FCOMPLEX c )
    複素数の自然対数

    Params:
    - [in]  c       複素数

    Returns:
    - 複素数関数log(  c )の結果を返します。
    """
    raise NotImplementedError

def clog(c):
    r"""FCOMPLEX FVALGAPI fnFIE_clog( FCOMPLEX c )
    複素数の自然対数

    Params:
    - [in]  c       複素数

    Returns:
    - 複素数関数log(  c )の結果を返します。
    """

    return _fie.fnFIE_clog(c)

def fnFIE_clog10(c) -> Any:
    r"""FCOMPLEX FVALGAPI fnFIE_clog10( FCOMPLEX c )
    底が 10 の複素数の対数

    Params:
    - [in]  c       複素数

    Returns:
    - 複素数関数log10(  c )の結果を返します。
    """
    raise NotImplementedError

def clog10(c):
    r"""FCOMPLEX FVALGAPI fnFIE_clog10( FCOMPLEX c )
    底が 10 の複素数の対数

    Params:
    - [in]  c       複素数

    Returns:
    - 複素数関数log10(  c )の結果を返します。
    """

    return _fie.fnFIE_clog10(c)

def fnFIE_cexp(c) -> Any:
    r"""FCOMPLEX FVALGAPI fnFIE_cexp( FCOMPLEX c )
    複素数の指数関数

    Params:
    - [in]  c       複素数

    Returns:
    - 複素数関数exp(  c )の結果を返します。
    """
    raise NotImplementedError

def cexp(c):
    r"""FCOMPLEX FVALGAPI fnFIE_cexp( FCOMPLEX c )
    複素数の指数関数

    Params:
    - [in]  c       複素数

    Returns:
    - 複素数関数exp(  c )の結果を返します。
    """

    return _fie.fnFIE_cexp(c)

def fnFIE_cpow(c1, c2) -> Any:
    r"""FCOMPLEX FVALGAPI fnFIE_cpow( FCOMPLEX c1, FCOMPLEX c2 )
    複素数の累乗関数

    Params:
    - [in]  c1      累乗される複素数1
    - [in]  c2      複素数2

    Returns:
    - 複素数の累乗結果を返します。
    """
    raise NotImplementedError

def cpow(c1, c2):
    r"""FCOMPLEX FVALGAPI fnFIE_cpow( FCOMPLEX c1, FCOMPLEX c2 )
    複素数の累乗関数

    Params:
    - [in]  c1      累乗される複素数1
    - [in]  c2      複素数2

    Returns:
    - 複素数の累乗結果を返します。
    """

    return _fie.fnFIE_cpow(c1, c2)

def fnFIE_cpowd(c, d) -> Any:
    r"""FCOMPLEX FVALGAPI fnFIE_cpowd( FCOMPLEX c, DOUBLE d )
    複素数の（実数）累乗関数

    Params:
    - [in]  c       累乗される複素数
    - [in]  d       実数

    Returns:
    - 複素数の（実数）累乗結果を返します。
    """
    raise NotImplementedError

def cpowd(c, d):
    r"""FCOMPLEX FVALGAPI fnFIE_cpowd( FCOMPLEX c, DOUBLE d )
    複素数の（実数）累乗関数

    Params:
    - [in]  c       累乗される複素数
    - [in]  d       実数

    Returns:
    - 複素数の（実数）累乗結果を返します。
    """

    return _fie.fnFIE_cpowd(c, d)

def fnFIE_csin(c) -> Any:
    r"""FCOMPLEX FVALGAPI fnFIE_csin( FCOMPLEX c )
    複素数の正弦 (sin)関数

    Params:
    - [in]  c       複素数

    Returns:
    - 複素数のsin結果を返します。
    """
    raise NotImplementedError

def csin(c):
    r"""FCOMPLEX FVALGAPI fnFIE_csin( FCOMPLEX c )
    複素数の正弦 (sin)関数

    Params:
    - [in]  c       複素数

    Returns:
    - 複素数のsin結果を返します。
    """

    return _fie.fnFIE_csin(c)

def fnFIE_ccos(c) -> Any:
    r"""FCOMPLEX FVALGAPI fnFIE_ccos( FCOMPLEX c )
    複素数の余弦 (cos)関数

    Params:
    - [in]  c       複素数

    Returns:
    - 複素数のcos結果を返します。
    """
    raise NotImplementedError

def ccos(c):
    r"""FCOMPLEX FVALGAPI fnFIE_ccos( FCOMPLEX c )
    複素数の余弦 (cos)関数

    Params:
    - [in]  c       複素数

    Returns:
    - 複素数のcos結果を返します。
    """

    return _fie.fnFIE_ccos(c)

def fnFIE_mtrand_init(seed, r) -> Any:
    r"""void fnFIE_mtrand_init( UINT seed, F_RANDDESC * r )
    [OSS] 擬似乱数初期化ルーチン

    Params:
    - [in]  seed    擬似乱数列のseed
    - [out] r       擬似乱数列生成用データ

    Returns:
    """
    raise NotImplementedError

def mtrand_init(seed, r):
    r"""void fnFIE_mtrand_init( UINT seed, F_RANDDESC * r )
    [OSS] 擬似乱数初期化ルーチン

    Params:
    - [in]  seed    擬似乱数列のseed
    - [out] r       擬似乱数列生成用データ

    Returns:
    """

    return _fie.fnFIE_mtrand_init(seed, r)

def fnFIE_mtrand_init_by_array(init_key, key_length, r) -> Any:
    r"""void fnFIE_mtrand_init_by_array( UINT[] init_key, INT key_length, F_RANDDESC * r )
    [OSS] 擬似乱数初期化ルーチン

    Params:
    - [in]  init_key    擬似乱数列のseedの数列
    - [in]  key_length  seed数列の要素数
    - [out] r           擬似乱数列生成用データ

    Returns:
    """
    raise NotImplementedError

def mtrand_init_by_array(init_key, key_length, r):
    r"""void fnFIE_mtrand_init_by_array( UINT[] init_key, INT key_length, F_RANDDESC * r )
    [OSS] 擬似乱数初期化ルーチン

    Params:
    - [in]  init_key    擬似乱数列のseedの数列
    - [in]  key_length  seed数列の要素数
    - [out] r           擬似乱数列生成用データ

    Returns:
    """

    return _fie.fnFIE_mtrand_init_by_array(init_key, key_length, r)

def fnFIE_mtrand(r) -> Any:
    r"""UINT FVALGAPI fnFIE_mtrand( F_RANDDESC* r )
    [OSS] 擬似一様乱数を生成します

    Params:
    - [in,out]  r   擬似乱数列生成用データ

    Returns:
    - 擬似一様乱数：[0,0xffffffff]区間内の整数
    """
    raise NotImplementedError

def mtrand(r):
    r"""UINT FVALGAPI fnFIE_mtrand( F_RANDDESC* r )
    [OSS] 擬似一様乱数を生成します

    Params:
    - [in,out]  r   擬似乱数列生成用データ

    Returns:
    - 擬似一様乱数：[0,0xffffffff]区間内の整数
    """

    return _fie.fnFIE_mtrand(r)

def fnFIE_mtrand_gauss(r) -> Any:
    r"""DOUBLE FVALGAPI fnFIE_mtrand_gauss( F_RANDDESC* r )
    [OSS] 擬似正規乱数を生成します

    Params:
    - [in,out]  r   擬似乱数列生成用データ

    Returns:
    - 擬似正規乱数：平均0.0,分散1.0
    """
    raise NotImplementedError

def mtrand_gauss(r):
    r"""DOUBLE FVALGAPI fnFIE_mtrand_gauss( F_RANDDESC* r )
    [OSS] 擬似正規乱数を生成します

    Params:
    - [in,out]  r   擬似乱数列生成用データ

    Returns:
    - 擬似正規乱数：平均0.0,分散1.0
    """

    return _fie.fnFIE_mtrand_gauss(r)

def fnFIE_mtrand_real1(r) -> Any:
    r"""DOUBLE FVALGAPI fnFIE_mtrand_real1( F_RANDDESC* r )
    [OSS]  [0,1]区間内の実数値の擬似乱数を生成します

    Params:
    - [in,out]  r   擬似乱数列生成用データ

    Returns:
    - 擬似乱数：[0,1]区間内の実数値
    """
    raise NotImplementedError

def mtrand_real1(r):
    r"""DOUBLE FVALGAPI fnFIE_mtrand_real1( F_RANDDESC* r )
    [OSS]  [0,1]区間内の実数値の擬似乱数を生成します

    Params:
    - [in,out]  r   擬似乱数列生成用データ

    Returns:
    - 擬似乱数：[0,1]区間内の実数値
    """

    return _fie.fnFIE_mtrand_real1(r)

def fnFIE_mtrand_real2(r) -> Any:
    r"""DOUBLE FVALGAPI fnFIE_mtrand_real2( F_RANDDESC* r )
    [OSS]  [0,1)区間内の実数値の擬似乱数を生成します

    Params:
    - [in,out]  r   擬似乱数列生成用データ

    Returns:
    - 擬似乱数：[0,1)区間内の実数値
    """
    raise NotImplementedError

def mtrand_real2(r):
    r"""DOUBLE FVALGAPI fnFIE_mtrand_real2( F_RANDDESC* r )
    [OSS]  [0,1)区間内の実数値の擬似乱数を生成します

    Params:
    - [in,out]  r   擬似乱数列生成用データ

    Returns:
    - 擬似乱数：[0,1)区間内の実数値
    """

    return _fie.fnFIE_mtrand_real2(r)

def fnFIE_mtrand_real3(r) -> Any:
    r"""DOUBLE FVALGAPI fnFIE_mtrand_real3( F_RANDDESC* r )
    [OSS]  (0,1)区間内の実数値の擬似乱数を生成します

    Params:
    - [in,out]  r   擬似乱数列生成用データ

    Returns:
    - 擬似乱数：(0,1)区間内の実数値
    """
    raise NotImplementedError

def mtrand_real3(r):
    r"""DOUBLE FVALGAPI fnFIE_mtrand_real3( F_RANDDESC* r )
    [OSS]  (0,1)区間内の実数値の擬似乱数を生成します

    Params:
    - [in,out]  r   擬似乱数列生成用データ

    Returns:
    - 擬似乱数：(0,1)区間内の実数値
    """

    return _fie.fnFIE_mtrand_real3(r)

def fnFIE_mtrand_res53(r) -> Any:
    r"""DOUBLE FVALGAPI fnFIE_mtrand_res53( F_RANDDESC* r )
    [OSS]  [0,1)区間内の実数値の擬似乱数を53-bit resolutionで生成します

    Params:
    - [in,out]  r   擬似乱数列生成用データ

    Returns:
    - 擬似乱数：[0,1)区間内の実数値 with 53-bit resolution
    """
    raise NotImplementedError

def mtrand_res53(r):
    r"""DOUBLE FVALGAPI fnFIE_mtrand_res53( F_RANDDESC* r )
    [OSS]  [0,1)区間内の実数値の擬似乱数を53-bit resolutionで生成します

    Params:
    - [in,out]  r   擬似乱数列生成用データ

    Returns:
    - 擬似乱数：[0,1)区間内の実数値 with 53-bit resolution
    """

    return _fie.fnFIE_mtrand_res53(r)

def fnFIE_img_copy(srcimg, dstimg) -> Any:
    r"""INT FVALGAPI fnFIE_img_copy( FHANDLE srcimg, FHANDLE dstimg )
    画像コピー

    Params:
    - [in] srcimg コピー元画像
    - [out] dstimg コピー先画像

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像が渡されたことにより、異常終了した.
                                 入出力の画像サイズが違う、etc.
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_copy(srcimg, dstimg):
    r"""INT FVALGAPI fnFIE_img_copy( FHANDLE srcimg, FHANDLE dstimg )
    画像コピー

    Params:
    - [in] srcimg コピー元画像
    - [out] dstimg コピー先画像

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像が渡されたことにより、異常終了した.
                                 入出力の画像サイズが違う、etc.
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_copy(srcimg, dstimg)

def fnFIE_img_copy_ex(srcimg, dstimg, mode, offset, mult) -> Any:
    r"""INT FVALGAPI fnFIE_img_copy_ex( FHANDLE srcimg, FHANDLE dstimg, INT mode, DOUBLE offset, DOUBLE mult )
    濃度変換付き画像コピー

    Params:
    - [in]  srcimg   コピー元画像 ( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [out] dstimg   コピー先画像 ( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  mode     濃度変換モード
                         - 0 :  offset,  mult による固定指定
                         - 1 : コピー元画像の濃度値をフルスケール化
    - [in]  offset   濃度オフセット (  mode==1 の場合は無視されます。)
    - [in]  mult     濃度倍率 (  mode==1 の場合は無視されます。)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像が渡されたことにより、異常終了した.
                                 入出力の画像サイズが違う、etc.
    - F_ERR_INVALID_PARAM  不正なモード指定を行った、変換できない組み合わせの画像型を指定した
    - F_ERR_NOMEMORY         メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_copy_ex(srcimg, dstimg, mode=0, offset=0.0, mult=1.0):
    r"""INT FVALGAPI fnFIE_img_copy_ex( FHANDLE srcimg, FHANDLE dstimg, INT mode, DOUBLE offset, DOUBLE mult )
    濃度変換付き画像コピー

    Params:
    - [in]  srcimg   コピー元画像 ( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [out] dstimg   コピー先画像 ( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  mode     濃度変換モード
                         - 0 :  offset,  mult による固定指定
                         - 1 : コピー元画像の濃度値をフルスケール化
    - [in]  offset   濃度オフセット (  mode==1 の場合は無視されます。)
    - [in]  mult     濃度倍率 (  mode==1 の場合は無視されます。)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像が渡されたことにより、異常終了した.
                                 入出力の画像サイズが違う、etc.
    - F_ERR_INVALID_PARAM  不正なモード指定を行った、変換できない組み合わせの画像型を指定した
    - F_ERR_NOMEMORY         メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_copy_ex(srcimg, dstimg, mode, offset, mult)

def fnFIE_img_clear(himg, val) -> Any:
    r"""INT FVALGAPI fnFIE_img_clear( FHANDLE himg, DOUBLE val )
    画像クリア

    Params:
    - [in,out] himg 処理対象画像( type: bin, uc8, s16, us16, double, rgbq, i32, ui32, i64, float, rgbtriple )
    - [in] val  塗りつぶす濃度。
                    画像が整数型の場合は、濃度値は単純キャストで整数に変換されます。
                    ２値画像の場合は ((INT)  val )==0 の場合は0, それ以外は1になります。
                    また、指定の濃度値が濃度値範囲を超えていた場合は、
                    サチュレーション処理が行われます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_clear(himg, val=0.0):
    r"""INT FVALGAPI fnFIE_img_clear( FHANDLE himg, DOUBLE val )
    画像クリア

    Params:
    - [in,out] himg 処理対象画像( type: bin, uc8, s16, us16, double, rgbq, i32, ui32, i64, float, rgbtriple )
    - [in] val  塗りつぶす濃度。
                    画像が整数型の場合は、濃度値は単純キャストで整数に変換されます。
                    ２値画像の場合は ((INT)  val )==0 の場合は0, それ以外は1になります。
                    また、指定の濃度値が濃度値範囲を超えていた場合は、
                    サチュレーション処理が行われます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_clear(himg, val)

def fnFIE_img_clear_ch(himg, channel, val) -> Any:
    r"""INT FVALGAPI fnFIE_img_clear_ch( FHANDLE himg, INT channel, DOUBLE val )
    画像クリア 単独ch版

    Params:
    - [in,out] himg     処理対象画像( type: bin, uc8, s16, us16, double, rgbq, i32, ui32, i64, float, rgbtriple )
    - [in]     channel  処理対象にするチャネル
    - [in]     val      塗りつぶす濃度
                            画像が整数型の場合は、濃度値は単純キャストで整数に変換されます。
                            ２値画像の場合は ((INT)  val )==0 の場合は0, それ以外は1になります。
                            また、指定の濃度値が濃度値範囲を超えていた場合は、
                            サチュレーション処理が行われます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_PARAM  存在しないチャネルが指定されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_clear_ch(himg, channel, val=0.0):
    r"""INT FVALGAPI fnFIE_img_clear_ch( FHANDLE himg, INT channel, DOUBLE val )
    画像クリア 単独ch版

    Params:
    - [in,out] himg     処理対象画像( type: bin, uc8, s16, us16, double, rgbq, i32, ui32, i64, float, rgbtriple )
    - [in]     channel  処理対象にするチャネル
    - [in]     val      塗りつぶす濃度
                            画像が整数型の場合は、濃度値は単純キャストで整数に変換されます。
                            ２値画像の場合は ((INT)  val )==0 の場合は0, それ以外は1になります。
                            また、指定の濃度値が濃度値範囲を超えていた場合は、
                            サチュレーション処理が行われます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_PARAM  存在しないチャネルが指定されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_clear_ch(himg, channel, val)

def fnFIE_img_mirror(hsrc, hdst, direc) -> Any:
    r"""INT FVALGAPI fnFIE_img_mirror( FHANDLE hsrc, FHANDLE hdst, INT direc )
    画像ミラー反転

    Params:
    - [in]  hsrc   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [out] hdst   出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  direc  反転方向
                      - 0 Ｘ軸方向(横方向)反転
                      - 1 Ｙ軸方向(縦方向)反転
                      - 2 ＸＹ両方向反転

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_PARAM  パラメータエラーにより異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mirror(hsrc, hdst, direc):
    r"""INT FVALGAPI fnFIE_img_mirror( FHANDLE hsrc, FHANDLE hdst, INT direc )
    画像ミラー反転

    Params:
    - [in]  hsrc   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [out] hdst   出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  direc  反転方向
                      - 0 Ｘ軸方向(横方向)反転
                      - 1 Ｙ軸方向(縦方向)反転
                      - 2 ＸＹ両方向反転

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_PARAM  パラメータエラーにより異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mirror(hsrc, hdst, direc)

def fnFIE_img_transpose(hsrc, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_transpose( FHANDLE hsrc, FHANDLE hdst )
    画像転置

    Params:
    - [in]  hsrc 入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [out] hdst 出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_transpose(hsrc, hdst):
    r"""INT FVALGAPI fnFIE_img_transpose( FHANDLE hsrc, FHANDLE hdst )
    画像転置

    Params:
    - [in]  hsrc 入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [out] hdst 出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_transpose(hsrc, hdst)

def fnFIE_img_rotate_clockwise90(hsrc, hdst, n) -> Any:
    r"""INT FVALGAPI fnFIE_img_rotate_clockwise90( FHANDLE hsrc, FHANDLE hdst, INT n )
    画像の回転（９０度の倍数）

    Params:
    - [in]      hsrc         処理対象画像( type: bin, uc8, s16, us16, i32, ui32, i64, double, float, rgbq, rgbtri )
    - [out]     hdst         処理結果画像( type: bin, uc8, s16, us16, i32, ui32, i64, double, float, rgbq, rgbtri )
        - [in]      n            何回９０度回転するかを示す係数。負の値も指定可能です。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像オブジェクトが入力された
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_rotate_clockwise90(hsrc, hdst, n=1):
    r"""INT FVALGAPI fnFIE_img_rotate_clockwise90( FHANDLE hsrc, FHANDLE hdst, INT n )
    画像の回転（９０度の倍数）

    Params:
    - [in]      hsrc         処理対象画像( type: bin, uc8, s16, us16, i32, ui32, i64, double, float, rgbq, rgbtri )
    - [out]     hdst         処理結果画像( type: bin, uc8, s16, us16, i32, ui32, i64, double, float, rgbq, rgbtri )
        - [in]      n            何回９０度回転するかを示す係数。負の値も指定可能です。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像オブジェクトが入力された
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_rotate_clockwise90(hsrc, hdst, n)

def fnFIE_img_resize(hsrc, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_resize( FHANDLE hsrc, FHANDLE hdst )
    画像のリサイズ

    Params:
    - [in]  hsrc            入力画像 (type: bin, uc8, s16, us16, double, rgbq)
    - [out] hdst            出力画像 (type: bin, uc8, s16, us16, double, rgbq)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_NOMEMORY       メモリ不足により異常終了
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_resize(hsrc, hdst):
    r"""INT FVALGAPI fnFIE_img_resize( FHANDLE hsrc, FHANDLE hdst )
    画像のリサイズ

    Params:
    - [in]  hsrc            入力画像 (type: bin, uc8, s16, us16, double, rgbq)
    - [out] hdst            出力画像 (type: bin, uc8, s16, us16, double, rgbq)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_NOMEMORY       メモリ不足により異常終了
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_resize(hsrc, hdst)

def fnFIE_copy_border(hsrc, hdst, border_left, border_top, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_copy_border( FHANDLE hsrc, FHANDLE hdst, INT border_left, INT border_top, INT border_mode, DOUBLE value )
    画像のボーダーを拡張する

    Params:
    - [in]  hsrc            入力画像ハンドル( type: bin, uc8, s16, us16, i32 ,ui32, i64, float, double, rgbq, rgbtri )
    - [out] hdst            出力画像ハンドル( type: bin, uc8, s16, us16, i32 ,ui32, i64, float, double, rgbq, rgbtri )
    - [in]  border_left     左側ボーダー幅（出力先左上Ｘ座標）
    - [in]  border_top      上側ボーダー幅（出力先左上Ｙ座標）
    - [in]  border_mode     ボーダーコピーモード
                                    - F_BORDER_ZERO         ０埋めモード
                                    - F_BORDER_VALUE        一定値モード
                                    - F_BORDER_CONTINUOUS   端延長モード
                                    - F_BORDER_REPEAT       繰り返しモード
                                    - F_BORDER_MIRROR1      反転モード１
                                    - F_BORDER_MIRROR2      反転モード２
    - [in]  value           ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は、この値は無視されます。
                                画像が整数型の場合は、濃度値は単純キャストで整数に変換されます。
                                ２値画像の場合は ((INT)  val )==0 の場合は0, それ以外は1になります。
                                また、指定の濃度値が濃度値範囲を超えていた場合は、サチュレーション処理が行われます。
                                F_IMG_RGBQUAD型の場合は各チャネルでrgbRed、rgbGreen、rgbBlue は同じ値(  val ), rgbReserved は0に設定されます。
                                F_IMG_RGBTRIPLE型の場合は各チャネルでR、G、B ともに同じ値( val )に設定されます。
                                その他の画像型の場合は全てのチャネルで設定された値 val になります。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_IMAGE   不正な画像ハンドルが渡されたため、異常終了。画像の種類やチャネル数が違う場合はこのエラーを出します。
    - F_ERR_INVALID_PARAM   パラメータ異常。画像のサイズの影響でボーダー量がマイナスになる場合もこのエラーを出します。
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def copy_border(hsrc, hdst, border_left, border_top, border_mode=F_BORDER_CONTINUOUS, value=0.0):
    r"""INT FVALGAPI fnFIE_copy_border( FHANDLE hsrc, FHANDLE hdst, INT border_left, INT border_top, INT border_mode, DOUBLE value )
    画像のボーダーを拡張する

    Params:
    - [in]  hsrc            入力画像ハンドル( type: bin, uc8, s16, us16, i32 ,ui32, i64, float, double, rgbq, rgbtri )
    - [out] hdst            出力画像ハンドル( type: bin, uc8, s16, us16, i32 ,ui32, i64, float, double, rgbq, rgbtri )
    - [in]  border_left     左側ボーダー幅（出力先左上Ｘ座標）
    - [in]  border_top      上側ボーダー幅（出力先左上Ｙ座標）
    - [in]  border_mode     ボーダーコピーモード
                                    - F_BORDER_ZERO         ０埋めモード
                                    - F_BORDER_VALUE        一定値モード
                                    - F_BORDER_CONTINUOUS   端延長モード
                                    - F_BORDER_REPEAT       繰り返しモード
                                    - F_BORDER_MIRROR1      反転モード１
                                    - F_BORDER_MIRROR2      反転モード２
    - [in]  value           ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は、この値は無視されます。
                                画像が整数型の場合は、濃度値は単純キャストで整数に変換されます。
                                ２値画像の場合は ((INT)  val )==0 の場合は0, それ以外は1になります。
                                また、指定の濃度値が濃度値範囲を超えていた場合は、サチュレーション処理が行われます。
                                F_IMG_RGBQUAD型の場合は各チャネルでrgbRed、rgbGreen、rgbBlue は同じ値(  val ), rgbReserved は0に設定されます。
                                F_IMG_RGBTRIPLE型の場合は各チャネルでR、G、B ともに同じ値( val )に設定されます。
                                その他の画像型の場合は全てのチャネルで設定された値 val になります。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_IMAGE   不正な画像ハンドルが渡されたため、異常終了。画像の種類やチャネル数が違う場合はこのエラーを出します。
    - F_ERR_INVALID_PARAM   パラメータ異常。画像のサイズの影響でボーダー量がマイナスになる場合もこのエラーを出します。
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_copy_border(hsrc, hdst, border_left, border_top, border_mode, value)

def fnFIE_jaehne_testimg(himg) -> Any:
    r"""INT FVALGAPI fnFIE_jaehne_testimg( FHANDLE himg )
    B.Jaehne のテスト画像を生成する

    Params:
    - [out] himg 出力先画像のハンドラ。( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def jaehne_testimg(himg):
    r"""INT FVALGAPI fnFIE_jaehne_testimg( FHANDLE himg )
    B.Jaehne のテスト画像を生成する

    Params:
    - [out] himg 出力先画像のハンドラ。( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_jaehne_testimg(himg)

def fnFIE_chessboard_image(himg, stepx, stepy, shiftx, shifty) -> Any:
    r"""INT FVALGAPI fnFIE_chessboard_image( FHANDLE himg, INT stepx, INT stepy, INT shiftx, INT shifty )
    チェスボード画像を作成する。

    Params:
    - [out] himg   出力先画像のハンドラ。( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  stepx  チェスボードパタンのＸ方向周期（１以上）
    - [in]  stepy  チェスボードパタンのＹ方向周期（１以上）
    - [in]  shiftx チェスボードパタンのＸ方向位相移動量（０以上）
    - [in]  shifty チェスボードパタンのＹ方向位相移動量（０以上）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  不正なパラメータ
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def chessboard_image(himg, stepx, stepy, shiftx=0, shifty=0):
    r"""INT FVALGAPI fnFIE_chessboard_image( FHANDLE himg, INT stepx, INT stepy, INT shiftx, INT shifty )
    チェスボード画像を作成する。

    Params:
    - [out] himg   出力先画像のハンドラ。( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  stepx  チェスボードパタンのＸ方向周期（１以上）
    - [in]  stepy  チェスボードパタンのＹ方向周期（１以上）
    - [in]  shiftx チェスボードパタンのＸ方向位相移動量（０以上）
    - [in]  shifty チェスボードパタンのＹ方向位相移動量（０以上）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  不正なパラメータ
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_chessboard_image(himg, stepx, stepy, shiftx, shifty)

def fnFIE_img_compare(hsrc1, hsrc2, result) -> Any:
    r"""INT FVALGAPI fnFIE_img_compare( FHANDLE hsrc1, FHANDLE hsrc2, INT* result )
    画像比較

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [out] result 比較結果
    - TRUE  画像が等しい
    - FALSE 画像が異なる

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_PARAM  result が NULLのため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_compare(hsrc1, hsrc2, result):
    r"""INT FVALGAPI fnFIE_img_compare( FHANDLE hsrc1, FHANDLE hsrc2, INT* result )
    画像比較

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [out] result 比較結果
    - TRUE  画像が等しい
    - FALSE 画像が異なる

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_PARAM  result が NULLのため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_compare(hsrc1, hsrc2, result)

def fnFIE_img_shrink(hsrc, hdst, rmag) -> Any:
    r"""INT FVALGAPI fnFIE_img_shrink( FHANDLE hsrc, FHANDLE hdst, INT rmag )
    1/N画像圧縮

    Params:
    - [in]  hsrc            入力画像ハンドル(type: uc8)
    - [out] hdst            出力画像ハンドル(type: uc8)
    - [in]  rmag            圧縮率。ただし、2<=rmag

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像が不正
    - F_ERR_INVALID_PARAM   引数異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_shrink(hsrc, hdst, rmag=2):
    r"""INT FVALGAPI fnFIE_img_shrink( FHANDLE hsrc, FHANDLE hdst, INT rmag )
    1/N画像圧縮

    Params:
    - [in]  hsrc            入力画像ハンドル(type: uc8)
    - [out] hdst            出力画像ハンドル(type: uc8)
    - [in]  rmag            圧縮率。ただし、2<=rmag

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像が不正
    - F_ERR_INVALID_PARAM   引数異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_shrink(hsrc, hdst, rmag)

def fnFIE_img_shrink2(hsrc, hdst, rmag_x, rmag_y, mode) -> Any:
    r"""INT FVALGAPI fnFIE_img_shrink2( FHANDLE hsrc, FHANDLE hdst, INT rmag_x, INT rmag_y, INT mode )
    画像圧縮

    Params:
    - [in]  hsrc     入力画像 ( type: bin, uc8, s16, us16, double )
    - [out] hdst     出力画像 ( type: bin, uc8, s16, us16, double )
    - [in]  rmag_x   水平方向圧縮率. ( 1 以上 かつ 入力画像幅 以下 )
    - [in]  rmag_y   垂直方向圧縮率. ( 1 以上 かつ 入力画像高さ 以下 )
    - [in]  mode     圧縮モード.
    - 0 : 平均値.
    - 1 : 合計値.
    - 2 : 最大値.
    - 3 : 最小値.
    - 4 : 中央値.
    - 5 : 最頻値.
    - 6 : ランク1/4.
    - 7 : ランク3/4.

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー または未初期化エラー
    """
    raise NotImplementedError

def img_shrink2(hsrc, hdst, rmag_x=2, rmag_y=2, mode=0):
    r"""INT FVALGAPI fnFIE_img_shrink2( FHANDLE hsrc, FHANDLE hdst, INT rmag_x, INT rmag_y, INT mode )
    画像圧縮

    Params:
    - [in]  hsrc     入力画像 ( type: bin, uc8, s16, us16, double )
    - [out] hdst     出力画像 ( type: bin, uc8, s16, us16, double )
    - [in]  rmag_x   水平方向圧縮率. ( 1 以上 かつ 入力画像幅 以下 )
    - [in]  rmag_y   垂直方向圧縮率. ( 1 以上 かつ 入力画像高さ 以下 )
    - [in]  mode     圧縮モード.
    - 0 : 平均値.
    - 1 : 合計値.
    - 2 : 最大値.
    - 3 : 最小値.
    - 4 : 中央値.
    - 5 : 最頻値.
    - 6 : ランク1/4.
    - 7 : ランク3/4.

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー または未初期化エラー
    """

    return _fie.fnFIE_img_shrink2(hsrc, hdst, rmag_x, rmag_y, mode)

def fnFIE_img_expand(hsrc, hdst, mag_x, mag_y) -> Any:
    r"""INT FVALGAPI fnFIE_img_expand( FHANDLE hsrc, FHANDLE hdst, INT mag_x, INT mag_y )
    画像伸長

    Params:
    - [in]  hsrc    入力画像( type: bin, uc8, s16, us16, double, float )
    - [out] hdst    出力画像( type: bin, uc8, s16, us16, double, float )
    - [in]  mag_x   水平方向伸長率（1以上）
    - [in]  mag_y   垂直方向伸長率（1以上）

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """
    raise NotImplementedError

def img_expand(hsrc, hdst, mag_x=2, mag_y=2):
    r"""INT FVALGAPI fnFIE_img_expand( FHANDLE hsrc, FHANDLE hdst, INT mag_x, INT mag_y )
    画像伸長

    Params:
    - [in]  hsrc    入力画像( type: bin, uc8, s16, us16, double, float )
    - [out] hdst    出力画像( type: bin, uc8, s16, us16, double, float )
    - [in]  mag_x   水平方向伸長率（1以上）
    - [in]  mag_y   垂直方向伸長率（1以上）

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """

    return _fie.fnFIE_img_expand(hsrc, hdst, mag_x, mag_y)

def fnFIE_img_rgb_to_gray(hsrc, hdst, coeff_r, coeff_g, coeff_b, mode) -> Any:
    r"""INT FVALGAPI fnFIE_img_rgb_to_gray( const FHANDLE hsrc, FHANDLE hdst, DOUBLE coeff_r, DOUBLE coeff_g, DOUBLE coeff_b, INT mode )
    係数指定付き濃淡化

    Params:
    - [in]  hsrc      入力画像 ( type: uc8, s16, us16, double, rgbq )
    - [out] hdst      出力画像 ( type: uc8, s16, us16, double )
    - [in]  coeff_r   R 成分変換係数
    - [in]  coeff_g   G 成分変換係数
    - [in]  coeff_b   B 成分変換係数
    - [in]  mode      変換モード
                          - 0 : 正規化、及びスケーリングを行わない
                          - 1 : 正規化、及びスケーリングを行う

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       入出力画像が不正
    - F_ERR_INVALID_PARAM       パラメータが不正
    - F_ERR_CALC_IMPOSSIBLE     計算が出来ない
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_rgb_to_gray(hsrc, hdst, coeff_r=0.299, coeff_g=0.587, coeff_b=0.114, mode=0):
    r"""INT FVALGAPI fnFIE_img_rgb_to_gray( const FHANDLE hsrc, FHANDLE hdst, DOUBLE coeff_r, DOUBLE coeff_g, DOUBLE coeff_b, INT mode )
    係数指定付き濃淡化

    Params:
    - [in]  hsrc      入力画像 ( type: uc8, s16, us16, double, rgbq )
    - [out] hdst      出力画像 ( type: uc8, s16, us16, double )
    - [in]  coeff_r   R 成分変換係数
    - [in]  coeff_g   G 成分変換係数
    - [in]  coeff_b   B 成分変換係数
    - [in]  mode      変換モード
                          - 0 : 正規化、及びスケーリングを行わない
                          - 1 : 正規化、及びスケーリングを行う

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       入出力画像が不正
    - F_ERR_INVALID_PARAM       パラメータが不正
    - F_ERR_CALC_IMPOSSIBLE     計算が出来ない
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_rgb_to_gray(hsrc, hdst, coeff_r, coeff_g, coeff_b, mode)

def fnFIE_packing_ch(hsrc, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_packing_ch( FHANDLE hsrc, FHANDLE hdst )
    複数チャネル画像のパッキング関数

    Params:
    - [in]  hsrc    入力画像( type: uc8, s16, us16, double, float )
    - [out] hdst    出力画像( type: uc8, s16, us16, double, float )

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """
    raise NotImplementedError

def packing_ch(hsrc, hdst):
    r"""INT FVALGAPI fnFIE_packing_ch( FHANDLE hsrc, FHANDLE hdst )
    複数チャネル画像のパッキング関数

    Params:
    - [in]  hsrc    入力画像( type: uc8, s16, us16, double, float )
    - [out] hdst    出力画像( type: uc8, s16, us16, double, float )

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """

    return _fie.fnFIE_packing_ch(hsrc, hdst)

def fnFIE_unpacking_ch(hsrc, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_unpacking_ch( FHANDLE hsrc, FHANDLE hdst )
    複数チャネル画像へのアンパッキング関数

    Params:
    - [in]  hsrc    入力画像( type: uc8, s16, us16, double, float )
    - [out] hdst    出力画像( type: uc8, s16, us16, double, float )

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """
    raise NotImplementedError

def unpacking_ch(hsrc, hdst):
    r"""INT FVALGAPI fnFIE_unpacking_ch( FHANDLE hsrc, FHANDLE hdst )
    複数チャネル画像へのアンパッキング関数

    Params:
    - [in]  hsrc    入力画像( type: uc8, s16, us16, double, float )
    - [out] hdst    出力画像( type: uc8, s16, us16, double, float )

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """

    return _fie.fnFIE_unpacking_ch(hsrc, hdst)

def fnFIE_img_swap(himg1, himg2) -> Any:
    r"""INT FVALGAPI fnFIE_img_swap( FHANDLE himg1, FHANDLE himg2 )
    画素値入替え

    Params:
    - [in,out]  himg1   画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in,out]  himg2   画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """
    raise NotImplementedError

def img_swap(himg1, himg2):
    r"""INT FVALGAPI fnFIE_img_swap( FHANDLE himg1, FHANDLE himg2 )
    画素値入替え

    Params:
    - [in,out]  himg1   画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in,out]  himg2   画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """

    return _fie.fnFIE_img_swap(himg1, himg2)

def fnFIE_img_sort_ch(hsrc, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_sort_ch( FHANDLE hsrc, FHANDLE hdst )
    チャネル別画像ソート

    Params:
    - [in]  hsrc    入力画像( type: uc8, s16, us16, double, i32, ui32, float )
    - [out] hdst    出力画像( type: uc8, s16, us16, double, i32, ui32, float )

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """
    raise NotImplementedError

def img_sort_ch(hsrc, hdst):
    r"""INT FVALGAPI fnFIE_img_sort_ch( FHANDLE hsrc, FHANDLE hdst )
    チャネル別画像ソート

    Params:
    - [in]  hsrc    入力画像( type: uc8, s16, us16, double, i32, ui32, float )
    - [out] hdst    出力画像( type: uc8, s16, us16, double, i32, ui32, float )

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """

    return _fie.fnFIE_img_sort_ch(hsrc, hdst)

def fnFIE_unpacking_rgb(hSrc, hDst) -> Any:
    r"""INT FVALGAPI fnFIE_unpacking_rgb( const FHANDLE hSrc, FHANDLE hDst )
    RGBQUAD / RGBTRIPLE アンパッキング関数

    Params:
    - [in]  hSrc         処理対象画像( type: rgbq, rgbtri )
    - [out] hDst         処理結果画像( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def unpacking_rgb(hSrc, hDst):
    r"""INT FVALGAPI fnFIE_unpacking_rgb( const FHANDLE hSrc, FHANDLE hDst )
    RGBQUAD / RGBTRIPLE アンパッキング関数

    Params:
    - [in]  hSrc         処理対象画像( type: rgbq, rgbtri )
    - [out] hDst         処理結果画像( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_unpacking_rgb(hSrc, hDst)

def fnFIE_packing_rgb(hSrc, hDst) -> Any:
    r"""INT FVALGAPI fnFIE_packing_rgb( const FHANDLE hSrc, FHANDLE hDst )
    RGBQUAD / RGBTRIPLE パッキング関数

    Params:
    - [in]  hSrc         処理対象画像( type: uc8, s16, us16, double )
    - [out] hDst         処理結果画像( type: rgbq, rgbtri  )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def packing_rgb(hSrc, hDst):
    r"""INT FVALGAPI fnFIE_packing_rgb( const FHANDLE hSrc, FHANDLE hDst )
    RGBQUAD / RGBTRIPLE パッキング関数

    Params:
    - [in]  hSrc         処理対象画像( type: uc8, s16, us16, double )
    - [out] hDst         処理結果画像( type: rgbq, rgbtri  )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_packing_rgb(hSrc, hDst)

def fnFIE_img_not(hsrc, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_not( FHANDLE hsrc, FHANDLE hdst )
    画像NOT演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, us16, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_not(hsrc, hdst):
    r"""INT FVALGAPI fnFIE_img_not( FHANDLE hsrc, FHANDLE hdst )
    画像NOT演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, us16, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_not(hsrc, hdst)

def fnFIE_img_and(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_and( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間AND演算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, us16, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_and(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_img_and( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間AND演算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, us16, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_and(hsrc1, hsrc2, hdst)

def fnFIE_img_and_const(hsrc, value, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_and_const( FHANDLE hsrc, UINT value, FHANDLE hdst )
    画像＆定数AND演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, us16 )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, us16 )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_and_const(hsrc, value, hdst):
    r"""INT FVALGAPI fnFIE_img_and_const( FHANDLE hsrc, UINT value, FHANDLE hdst )
    画像＆定数AND演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, us16 )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, us16 )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_and_const(hsrc, value, hdst)

def fnFIE_img_nand(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_nand( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間NAND演算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, us16, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_nand(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_img_nand( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間NAND演算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, us16, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_nand(hsrc1, hsrc2, hdst)

def fnFIE_img_nand_const(hsrc, value, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_nand_const( FHANDLE hsrc, UINT value, FHANDLE hdst )
    画像＆定数NAND演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, us16 )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, us16 )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_nand_const(hsrc, value, hdst):
    r"""INT FVALGAPI fnFIE_img_nand_const( FHANDLE hsrc, UINT value, FHANDLE hdst )
    画像＆定数NAND演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, us16 )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, us16 )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_nand_const(hsrc, value, hdst)

def fnFIE_img_or(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_or( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間OR演算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, us16, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_or(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_img_or( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間OR演算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, us16, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_or(hsrc1, hsrc2, hdst)

def fnFIE_img_or_const(hsrc, value, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_or_const( FHANDLE hsrc, UINT value, FHANDLE hdst )
    画像＆定数OR演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, us16 )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, us16 )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_or_const(hsrc, value, hdst):
    r"""INT FVALGAPI fnFIE_img_or_const( FHANDLE hsrc, UINT value, FHANDLE hdst )
    画像＆定数OR演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, us16 )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, us16 )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_or_const(hsrc, value, hdst)

def fnFIE_img_xor(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_xor( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間XOR演算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, us16, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_xor(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_img_xor( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間XOR演算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, us16, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, us16, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_xor(hsrc1, hsrc2, hdst)

def fnFIE_img_xor_const(hsrc, value, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_xor_const( FHANDLE hsrc, UINT value, FHANDLE hdst )
    画像＆定数XOR演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, us16 )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, us16 )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_xor_const(hsrc, value, hdst):
    r"""INT FVALGAPI fnFIE_img_xor_const( FHANDLE hsrc, UINT value, FHANDLE hdst )
    画像＆定数XOR演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, us16 )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, us16 )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_xor_const(hsrc, value, hdst)

def fnFIE_img_shift(hsrc, hdst, shift) -> Any:
    r"""INT FVALGAPI fnFIE_img_shift( FHANDLE hsrc, FHANDLE hdst, INT shift )
    画像ビットシフト演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, rgbq )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, rgbq )
    - [in]  shift   shift量。正：左シフト、負：右シフト、0：シフトなし（コピー）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_shift(hsrc, hdst, shift):
    r"""INT FVALGAPI fnFIE_img_shift( FHANDLE hsrc, FHANDLE hdst, INT shift )
    画像ビットシフト演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, rgbq )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, rgbq )
    - [in]  shift   shift量。正：左シフト、負：右シフト、0：シフトなし（コピー）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_shift(hsrc, hdst, shift)

def fnFIE_img_abs(hsrc, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_abs( FHANDLE hsrc, FHANDLE hdst )
    画像絶対値演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_abs(hsrc, hdst):
    r"""INT FVALGAPI fnFIE_img_abs( FHANDLE hsrc, FHANDLE hdst )
    画像絶対値演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_abs(hsrc, hdst)

def fnFIE_img_invert(hsrc, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_invert( FHANDLE hsrc, FHANDLE hdst )
    画像濃度値反転演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq );
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq );

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_invert(hsrc, hdst):
    r"""INT FVALGAPI fnFIE_img_invert( FHANDLE hsrc, FHANDLE hdst )
    画像濃度値反転演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq );
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq );

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_invert(hsrc, hdst)

def fnFIE_img_add(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_add( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間加算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_add(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_img_add( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間加算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_add(hsrc1, hsrc2, hdst)

def fnFIE_img_add_const(hsrc1, value, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_add_const( FHANDLE hsrc1, DOUBLE value, FHANDLE hdst )
    画像と定数の加算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_add_const(hsrc1, value, hdst):
    r"""INT FVALGAPI fnFIE_img_add_const( FHANDLE hsrc1, DOUBLE value, FHANDLE hdst )
    画像と定数の加算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_add_const(hsrc1, value, hdst)

def fnFIE_img_sub(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_sub( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間減算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_sub(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_img_sub( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間減算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_sub(hsrc1, hsrc2, hdst)

def fnFIE_img_sub_const1(hsrc, value, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_sub_const1( FHANDLE hsrc, DOUBLE value, FHANDLE hdst )
    画像と定数の減算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_sub_const1(hsrc, value, hdst):
    r"""INT FVALGAPI fnFIE_img_sub_const1( FHANDLE hsrc, DOUBLE value, FHANDLE hdst )
    画像と定数の減算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_sub_const1(hsrc, value, hdst)

def fnFIE_img_sub_const2(value, hsrc, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_sub_const2( DOUBLE value, FHANDLE hsrc, FHANDLE hdst )
    定数と画像の減算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_sub_const2(value, hsrc, hdst):
    r"""INT FVALGAPI fnFIE_img_sub_const2( DOUBLE value, FHANDLE hsrc, FHANDLE hdst )
    定数と画像の減算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_sub_const2(value, hsrc, hdst)

def fnFIE_img_diff(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_diff( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間差分計算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_diff(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_img_diff( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間差分計算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_diff(hsrc1, hsrc2, hdst)

def fnFIE_img_diff_const(hsrc, value, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_diff_const( FHANDLE hsrc, DOUBLE value, FHANDLE hdst )
    画像と定数の差分

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_diff_const(hsrc, value, hdst):
    r"""INT FVALGAPI fnFIE_img_diff_const( FHANDLE hsrc, DOUBLE value, FHANDLE hdst )
    画像と定数の差分

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_diff_const(hsrc, value, hdst)

def fnFIE_img_mul(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mul( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間乗算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mul(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_img_mul( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間乗算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mul(hsrc1, hsrc2, hdst)

def fnFIE_img_mul_const(hsrc, value, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mul_const( FHANDLE hsrc, DOUBLE value, FHANDLE hdst )
    画像と定数の乗算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mul_const(hsrc, value, hdst):
    r"""INT FVALGAPI fnFIE_img_mul_const( FHANDLE hsrc, DOUBLE value, FHANDLE hdst )
    画像と定数の乗算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mul_const(hsrc, value, hdst)

def fnFIE_img_mul_matrix(hsrc, hdst, mat) -> Any:
    r"""INT FVALGAPI fnFIE_img_mul_matrix( const FHANDLE hsrc, FHANDLE hdst, const FMATRIX* mat )
    画像と行列の乗算

    Params:
    - [in]  hsrc        入力画像のハンドル（ type : uc8, s16, us16, double ）
    - [out] hdst        出力画像のハンドル（ type : uc8, s16, us16, double ）
    - [in]  mat         変換行列

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
                                    もしくは、入出力画像の型が違う、など
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mul_matrix(hsrc, hdst, mat):
    r"""INT FVALGAPI fnFIE_img_mul_matrix( const FHANDLE hsrc, FHANDLE hdst, const FMATRIX* mat )
    画像と行列の乗算

    Params:
    - [in]  hsrc        入力画像のハンドル（ type : uc8, s16, us16, double ）
    - [out] hdst        出力画像のハンドル（ type : uc8, s16, us16, double ）
    - [in]  mat         変換行列

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
                                    もしくは、入出力画像の型が違う、など
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mul_matrix(hsrc, hdst, mat)

def fnFIE_img_div(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_div( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間除算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_div(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_img_div( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間除算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_div(hsrc1, hsrc2, hdst)

def fnFIE_img_div_const1(hsrc, value, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_div_const1( FHANDLE hsrc, DOUBLE value, FHANDLE hdst )
    画像と定数の除算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_div_const1(hsrc, value, hdst):
    r"""INT FVALGAPI fnFIE_img_div_const1( FHANDLE hsrc, DOUBLE value, FHANDLE hdst )
    画像と定数の除算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_div_const1(hsrc, value, hdst)

def fnFIE_img_div_const2(value, hsrc, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_div_const2( DOUBLE value, FHANDLE hsrc, FHANDLE hdst )
    定数と画像の除算

    Params:
    - [in]  value   定数
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_div_const2(value, hsrc, hdst):
    r"""INT FVALGAPI fnFIE_img_div_const2( DOUBLE value, FHANDLE hsrc, FHANDLE hdst )
    定数と画像の除算

    Params:
    - [in]  value   定数
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_div_const2(value, hsrc, hdst)

def fnFIE_img_min(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_min( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間最小値

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_min(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_img_min( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間最小値

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_min(hsrc1, hsrc2, hdst)

def fnFIE_img_min_const(hsrc, value, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_min_const( FHANDLE hsrc, DOUBLE value, FHANDLE hdst )
    画像と定数の最小値

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_min_const(hsrc, value, hdst):
    r"""INT FVALGAPI fnFIE_img_min_const( FHANDLE hsrc, DOUBLE value, FHANDLE hdst )
    画像と定数の最小値

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_min_const(hsrc, value, hdst)

def fnFIE_img_max(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_max( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間最大値

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_max(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_img_max( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hdst )
    画像間最大値

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  hsrc2   入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_max(hsrc1, hsrc2, hdst)

def fnFIE_img_max_const(hsrc, value, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_max_const( FHANDLE hsrc, DOUBLE value, FHANDLE hdst )
    画像と定数の最大値

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_max_const(hsrc, value, hdst):
    r"""INT FVALGAPI fnFIE_img_max_const( FHANDLE hsrc, DOUBLE value, FHANDLE hdst )
    画像と定数の最大値

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  value   定数
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_max_const(hsrc, value, hdst)

def fnFIE_img_mask(hsrc, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask( FHANDLE hsrc, FHANDLE hmask, FHANDLE hdst )
    画像マスク転送

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - 2値画像ハンドル( type: bin, channels:1 )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask(hsrc, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask( FHANDLE hsrc, FHANDLE hmask, FHANDLE hdst )
    画像マスク転送

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - 2値画像ハンドル( type: bin, channels:1 )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask(hsrc, hmask, hdst)

def fnFIE_img_mask2(hsrc, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask2( FHANDLE hsrc, FHANDLE hmask, FHANDLE hdst )
    画像マスク転送2

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - 2値画像ハンドル( type: bin, channels:1 )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask2(hsrc, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask2( FHANDLE hsrc, FHANDLE hmask, FHANDLE hdst )
    画像マスク転送2

    Params:
    - [in]  hsrc    入力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - 2値画像ハンドル( type: bin, channels:1 )
    - [out] hdst    出力画像ハンドル( type: bin, uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask2(hsrc, hmask, hdst)

def fnFIE_img_mixope1(hsrc1, hsrc2, hsrc3, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mixope1( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hsrc3, FHANDLE hdst )
    複合画像間計算[ (A*B)+C ]

    Params:
    - [in]  hsrc1   入力画像１ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc2   入力画像２ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc3   入力画像３ハンドル( type: uc8, s16, us16, double )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mixope1(hsrc1, hsrc2, hsrc3, hdst):
    r"""INT FVALGAPI fnFIE_img_mixope1( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hsrc3, FHANDLE hdst )
    複合画像間計算[ (A*B)+C ]

    Params:
    - [in]  hsrc1   入力画像１ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc2   入力画像２ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc3   入力画像３ハンドル( type: uc8, s16, us16, double )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mixope1(hsrc1, hsrc2, hsrc3, hdst)

def fnFIE_img_mixope2(hsrc, val1, val2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mixope2( FHANDLE hsrc, DOUBLE val1, DOUBLE val2, FHANDLE hdst )
    複合画像間計算[ (A*const1)+const2 ]

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val1    定数１
    - [in]  val2    定数２
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mixope2(hsrc, val1, val2, hdst):
    r"""INT FVALGAPI fnFIE_img_mixope2( FHANDLE hsrc, DOUBLE val1, DOUBLE val2, FHANDLE hdst )
    複合画像間計算[ (A*const1)+const2 ]

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val1    定数１
    - [in]  val2    定数２
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mixope2(hsrc, val1, val2, hdst)

def fnFIE_img_mixope3(hsrc1, hsrc2, hsrc3, val1, val2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mixope3( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hsrc3, DOUBLE val1, DOUBLE val2, FHANDLE hdst )
    複合画像間計算[ (A-B)*C/const1+const2 ]

    Params:
    - [in]  hsrc1   入力画像１ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc2   入力画像２ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc3   入力画像３ハンドル( type: uc8, s16, us16, double )
    - [in]  val1    定数１
    - [in]  val2    定数２
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mixope3(hsrc1, hsrc2, hsrc3, val1, val2, hdst):
    r"""INT FVALGAPI fnFIE_img_mixope3( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hsrc3, DOUBLE val1, DOUBLE val2, FHANDLE hdst )
    複合画像間計算[ (A-B)*C/const1+const2 ]

    Params:
    - [in]  hsrc1   入力画像１ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc2   入力画像２ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc3   入力画像３ハンドル( type: uc8, s16, us16, double )
    - [in]  val1    定数１
    - [in]  val2    定数２
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mixope3(hsrc1, hsrc2, hsrc3, val1, val2, hdst)

def fnFIE_img_mixope4(hsrc, val1, val2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mixope4( FHANDLE hsrc, DOUBLE val1, DOUBLE val2, FHANDLE hdst )
    複合画像間計算[ (A-const1)*const2 ]

    Params:
    - [in]  hsrc    入力画像ハンドル ( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  val1    定数１
    - [in]  val2    定数２
    - [out] hdst    出力画像ハンドル ( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_PARAM  処理できない組み合わせの画像ハンドルが渡された
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mixope4(hsrc, val1, val2, hdst):
    r"""INT FVALGAPI fnFIE_img_mixope4( FHANDLE hsrc, DOUBLE val1, DOUBLE val2, FHANDLE hdst )
    複合画像間計算[ (A-const1)*const2 ]

    Params:
    - [in]  hsrc    入力画像ハンドル ( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  val1    定数１
    - [in]  val2    定数２
    - [out] hdst    出力画像ハンドル ( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_PARAM  処理できない組み合わせの画像ハンドルが渡された
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mixope4(hsrc, val1, val2, hdst)

def fnFIE_img_atan2(hsrc_y, hsrc_x, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_atan2( FHANDLE hsrc_y, FHANDLE hsrc_x, FHANDLE hdst )
    画像間逆正接演算

    Params:
    - [in]  hsrc_y  入力画像ハンドル( type: s16, double )
    - [in]  hsrc_x  入力画像ハンドル( type: s16, double )
    - [out] hdst    出力画像ハンドル( type: s16, double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_atan2(hsrc_y, hsrc_x, hdst):
    r"""INT FVALGAPI fnFIE_img_atan2( FHANDLE hsrc_y, FHANDLE hsrc_x, FHANDLE hdst )
    画像間逆正接演算

    Params:
    - [in]  hsrc_y  入力画像ハンドル( type: s16, double )
    - [in]  hsrc_x  入力画像ハンドル( type: s16, double )
    - [out] hdst    出力画像ハンドル( type: s16, double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_atan2(hsrc_y, hsrc_x, hdst)

def fnFIE_img_exp(hsrc, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_exp( FHANDLE hsrc, FHANDLE hdst )
    画像指数関数値演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: double )
    - [out] hdst    出力画像ハンドル( type: double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_exp(hsrc, hdst):
    r"""INT FVALGAPI fnFIE_img_exp( FHANDLE hsrc, FHANDLE hdst )
    画像指数関数値演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: double )
    - [out] hdst    出力画像ハンドル( type: double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_exp(hsrc, hdst)

def fnFIE_img_log(hsrc, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_log( FHANDLE hsrc, FHANDLE hdst )
    画像対数関数値演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: double )
    - [out] hdst    出力画像ハンドル( type: double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_log(hsrc, hdst):
    r"""INT FVALGAPI fnFIE_img_log( FHANDLE hsrc, FHANDLE hdst )
    画像対数関数値演算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: double )
    - [out] hdst    出力画像ハンドル( type: double )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_log(hsrc, hdst)

def fnFIE_img_blend(hsrc1, val1, hsrc2, val2, val3, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_blend( FHANDLE hsrc1, DOUBLE val1, FHANDLE hsrc2, DOUBLE val2, DOUBLE val3, FHANDLE hdst )
    重み付き画像加算

    Params:
    - [in]  hsrc1   入力画像1( type: uc8, s16, us16, double )
    - [in]  val1    定数1
    - [in]  hsrc2   入力画像2( type: uc8, s16, us16, double )
    - [in]  val2    定数2
    - [in]  val3    定数3
    - [out] hdst    出力画像( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """
    raise NotImplementedError

def img_blend(hsrc1, val1, hsrc2, val2, val3, hdst):
    r"""INT FVALGAPI fnFIE_img_blend( FHANDLE hsrc1, DOUBLE val1, FHANDLE hsrc2, DOUBLE val2, DOUBLE val3, FHANDLE hdst )
    重み付き画像加算

    Params:
    - [in]  hsrc1   入力画像1( type: uc8, s16, us16, double )
    - [in]  val1    定数1
    - [in]  hsrc2   入力画像2( type: uc8, s16, us16, double )
    - [in]  val2    定数2
    - [in]  val3    定数3
    - [out] hdst    出力画像( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """

    return _fie.fnFIE_img_blend(hsrc1, val1, hsrc2, val2, val3, hdst)

def fnFIE_img_mask_add(hsrc1, hsrc2, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_add( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間加算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像ハンドル( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_add(hsrc1, hsrc2, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_add( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間加算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像ハンドル( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_add(hsrc1, hsrc2, hmask, hdst)

def fnFIE_img_mask_sub(hsrc1, hsrc2, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_sub( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間減算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_sub(hsrc1, hsrc2, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_sub( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間減算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_sub(hsrc1, hsrc2, hmask, hdst)

def fnFIE_img_mask_mul(hsrc1, hsrc2, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_mul( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間乗算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_mul(hsrc1, hsrc2, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_mul( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間乗算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_mul(hsrc1, hsrc2, hmask, hdst)

def fnFIE_img_mask_diff(hsrc1, hsrc2, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_diff( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間差分

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_diff(hsrc1, hsrc2, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_diff( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間差分

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_diff(hsrc1, hsrc2, hmask, hdst)

def fnFIE_img_mask_div(hsrc1, hsrc2, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_div( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間除算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_div(hsrc1, hsrc2, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_div( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間除算

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double, rgbq )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double, rgbq )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_div(hsrc1, hsrc2, hmask, hdst)

def fnFIE_img_mask_min(hsrc1, hsrc2, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_min( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間最小値

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_min(hsrc1, hsrc2, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_min( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間最小値

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_min(hsrc1, hsrc2, hmask, hdst)

def fnFIE_img_mask_max(hsrc1, hsrc2, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_max( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間最大値

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_max(hsrc1, hsrc2, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_max( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像間最大値

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_max(hsrc1, hsrc2, hmask, hdst)

def fnFIE_img_mask_mixop1(hsrc1, hsrc2, hsrc3, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_mixop1( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hsrc3, FHANDLE hmask, FHANDLE hdst )
    マスク付き複合画像間計算[ (A*B)+C ]

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc3   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_mixop1(hsrc1, hsrc2, hsrc3, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_mixop1( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hsrc3, FHANDLE hmask, FHANDLE hdst )
    マスク付き複合画像間計算[ (A*B)+C ]

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc3   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_mixop1(hsrc1, hsrc2, hsrc3, hmask, hdst)

def fnFIE_img_mask_mixop2(hsrc, val1, val2, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_mixop2( FHANDLE hsrc, DOUBLE val1, DOUBLE val2, FHANDLE hmask, FHANDLE hdst )
    マスク付き複合画像間計算[ (A*const1)+const2 ]

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val1    定数１
    - [in]  val2    定数２
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_mixop2(hsrc, val1, val2, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_mixop2( FHANDLE hsrc, DOUBLE val1, DOUBLE val2, FHANDLE hmask, FHANDLE hdst )
    マスク付き複合画像間計算[ (A*const1)+const2 ]

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val1    定数１
    - [in]  val2    定数２
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_mixop2(hsrc, val1, val2, hmask, hdst)

def fnFIE_img_mask_mixop3(hsrc1, hsrc2, hsrc3, val1, val2, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_mixop3( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hsrc3, DOUBLE val1, DOUBLE val2, FHANDLE hmask, FHANDLE hdst )
    マスク付き複合画像間計算[ (A-B)*C/const1+const2 ]

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc3   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val1    定数１
    - [in]  val2    定数２
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_mixop3(hsrc1, hsrc2, hsrc3, val1, val2, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_mixop3( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE hsrc3, DOUBLE val1, DOUBLE val2, FHANDLE hmask, FHANDLE hdst )
    マスク付き複合画像間計算[ (A-B)*C/const1+const2 ]

    Params:
    - [in]  hsrc1   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc2   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  hsrc3   入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val1    定数１
    - [in]  val2    定数２
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_mixop3(hsrc1, hsrc2, hsrc3, val1, val2, hmask, hdst)

def fnFIE_img_mask_add_const(hsrc, val, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_add_const( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の加算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_add_const(hsrc, val, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_add_const( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の加算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_add_const(hsrc, val, hmask, hdst)

def fnFIE_img_mask_mul_const(hsrc, val, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_mul_const( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の乗算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_mul_const(hsrc, val, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_mul_const( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の乗算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_mul_const(hsrc, val, hmask, hdst)

def fnFIE_img_mask_min_const(hsrc, val, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_min_const( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の最小値

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_min_const(hsrc, val, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_min_const( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の最小値

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_min_const(hsrc, val, hmask, hdst)

def fnFIE_img_mask_max_const(hsrc, val, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_max_const( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の最大値

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_max_const(hsrc, val, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_max_const( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の最大値

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_max_const(hsrc, val, hmask, hdst)

def fnFIE_img_mask_sub_const1(hsrc, val, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_sub_const1( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の減算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_sub_const1(hsrc, val, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_sub_const1( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の減算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_sub_const1(hsrc, val, hmask, hdst)

def fnFIE_img_mask_sub_const2(val, hsrc, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_sub_const2( DOUBLE val, FHANDLE hsrc, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の減算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのハンドル
                    - ２値画像( type : bin )
                    - リージョン
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_sub_const2(val, hsrc, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_sub_const2( DOUBLE val, FHANDLE hsrc, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の減算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのハンドル
                    - ２値画像( type : bin )
                    - リージョン
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_sub_const2(val, hsrc, hmask, hdst)

def fnFIE_img_mask_diff_const(hsrc, val, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_diff_const( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の差分

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_diff_const(hsrc, val, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_diff_const( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の差分

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_diff_const(hsrc, val, hmask, hdst)

def fnFIE_img_mask_div_const1(hsrc, val, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_div_const1( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の除算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_div_const1(hsrc, val, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_div_const1( FHANDLE hsrc, DOUBLE val, FHANDLE hmask, FHANDLE hdst )
    マスク付き画像と定数の除算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - リージョン
                    - ２値画像( type : bin )
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_div_const1(hsrc, val, hmask, hdst)

def fnFIE_img_mask_div_const2(val, hsrc, hmask, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_img_mask_div_const2( DOUBLE val, FHANDLE hsrc, FHANDLE hmask, FHANDLE hdst )
    定数とマスク付き画像の除算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - ２値画像( type : bin )
                    - リージョン
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_mask_div_const2(val, hsrc, hmask, hdst):
    r"""INT FVALGAPI fnFIE_img_mask_div_const2( DOUBLE val, FHANDLE hsrc, FHANDLE hmask, FHANDLE hdst )
    定数とマスク付き画像の除算

    Params:
    - [in]  hsrc    入力画像ハンドル( type: uc8, s16, us16, double )
    - [in]  val     定数
    - [in]  hmask   マスクのオブジェクトハンドル
                    - ２値画像( type : bin )
                    - リージョン
    - [out] hdst    出力画像ハンドル( type: uc8, s16, us16, double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
                                - サイズ、またはチャネル数がすべての入力画像、または出力画像で同じではない
                                - 入力画像、または出力画像に画像オブジェクトではないハンドルが渡された
                                - 対応していない画像ハンドルが渡された
    - F_ERR_INVALID_OBJECT  不正なマスクが渡された
                                - ２値画像、またはリージョンではないマスクが渡された
                                - 入力画像や出力画像とサイズが異なる２値画像マスクが渡された
                                - ２値画像マスクのチャネル数が１ではない
                                - 不正なタイプのマスクが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_mask_div_const2(val, hsrc, hmask, hdst)

def fnFIE_solodel(hSrc, hDst, color) -> Any:
    r"""INT FVALGAPI fnFIE_solodel( const FHANDLE hSrc, FHANDLE hDst, INT color )
    孤立点除去

    Params:
    - [in]  hSrc                処理対象FIE画像オブジェクトハンドル( type: bin )
    - [out] hDst                被処理対象FIE画像オブジェクトハンドル( type: bin )
    - [in]  color               除去対象色
                                - 0 黒の孤立点の消去
                                - 1 白の孤立点の消去

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_PARAM       不正なパラメータ（ color 異常）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def solodel(hSrc, hDst, color=0):
    r"""INT FVALGAPI fnFIE_solodel( const FHANDLE hSrc, FHANDLE hDst, INT color )
    孤立点除去

    Params:
    - [in]  hSrc                処理対象FIE画像オブジェクトハンドル( type: bin )
    - [out] hDst                被処理対象FIE画像オブジェクトハンドル( type: bin )
    - [in]  color               除去対象色
                                - 0 黒の孤立点の消去
                                - 1 白の孤立点の消去

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_PARAM       不正なパラメータ（ color 異常）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_solodel(hSrc, hDst, color)

def fnFIE_gaussian_1Dfilter_iir(fhSrc, fhDst, dSigma, iNDerivative, bIsVertical) -> Any:
    r"""INT FVALGAPI fnFIE_gaussian_1Dfilter_iir( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, INT iNDerivative, BOOL bIsVertical )
    gaussian1D filter(recursive(IIR)版)

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  dSigma      gaussian filterのσ(1.0以上)
    - [in]  iNDerivative 微分次数(0,1,2)
    - [in]  bIsVertical TRUE:y方向処理 FALSE:x方向処理

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    - dSigma<1.0
                                    - iNDerivative<0
                                    - iNDerivative>2 または bIsVertical!=TRUE && bIsVertical!=FALSE
                                    - iNDerivative>0 かつ bIsVertical==FALSE のとき 画像幅<3
                                    - iNDerivative>0 かつ bIsVertical==TRUE のとき 画像高さ<3
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gaussian_1Dfilter_iir(fhSrc, fhDst, dSigma=3.0, iNDerivative=0, bIsVertical=False):
    r"""INT FVALGAPI fnFIE_gaussian_1Dfilter_iir( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, INT iNDerivative, BOOL bIsVertical )
    gaussian1D filter(recursive(IIR)版)

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  dSigma      gaussian filterのσ(1.0以上)
    - [in]  iNDerivative 微分次数(0,1,2)
    - [in]  bIsVertical TRUE:y方向処理 FALSE:x方向処理

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    - dSigma<1.0
                                    - iNDerivative<0
                                    - iNDerivative>2 または bIsVertical!=TRUE && bIsVertical!=FALSE
                                    - iNDerivative>0 かつ bIsVertical==FALSE のとき 画像幅<3
                                    - iNDerivative>0 かつ bIsVertical==TRUE のとき 画像高さ<3
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gaussian_1Dfilter_iir(fhSrc, fhDst, dSigma, iNDerivative, bIsVertical)

def fnFIE_gaussian_1Dfilter_conv(fhSrc, fhDst, dSigma, iNDerivative, bIsVertical) -> Any:
    r"""INT FVALGAPI fnFIE_gaussian_1Dfilter_conv( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, INT iNDerivative, BOOL bIsVertical )
    gaussian1D filter(convolution(FIR)版)

    Params:
    - [in]  fhSrc           処理対象画像( type: uc8, s16, us16, double)
    - [out] fhDst           処理結果画像( type: uc8, s16, us16, double)
    - [in]  dSigma          gaussian filterのσ(0.6以上)
    - [in]  iNDerivative    微分次数(0,1,2)
    - [in]  bIsVertical     処理方向
                                - TRUE: y方向処理
                                - FALSE: x方向処理

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常。以下の何れか。
                                    -  dSigma < 0.6
                                    -  iNDerivative < 0
                                    -  iNDerivative > 2
                                    -  bIsVertical != TRUE &&  bIsVertical != FALSE
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gaussian_1Dfilter_conv(fhSrc, fhDst, dSigma=3.0, iNDerivative=0, bIsVertical=False):
    r"""INT FVALGAPI fnFIE_gaussian_1Dfilter_conv( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, INT iNDerivative, BOOL bIsVertical )
    gaussian1D filter(convolution(FIR)版)

    Params:
    - [in]  fhSrc           処理対象画像( type: uc8, s16, us16, double)
    - [out] fhDst           処理結果画像( type: uc8, s16, us16, double)
    - [in]  dSigma          gaussian filterのσ(0.6以上)
    - [in]  iNDerivative    微分次数(0,1,2)
    - [in]  bIsVertical     処理方向
                                - TRUE: y方向処理
                                - FALSE: x方向処理

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常。以下の何れか。
                                    -  dSigma < 0.6
                                    -  iNDerivative < 0
                                    -  iNDerivative > 2
                                    -  bIsVertical != TRUE &&  bIsVertical != FALSE
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gaussian_1Dfilter_conv(fhSrc, fhDst, dSigma, iNDerivative, bIsVertical)

def fnFIE_gaussian_1Dfilter(fhSrc, fhDst, dSigma, iNDerivative, bIsVertical, iMode, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_gaussian_1Dfilter( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, INT iNDerivative, BOOL bIsVertical, INT iMode, INT border_mode, DOUBLE value )
    gaussian1D filter

    Params:
    - [in]  fhSrc           処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst           処理結果画像( type: uc8, s16, us16, double )
    - [in]  dSigma          gaussian filterのσ(  iMode = 0 のとき0.6以上,  iMode = 1 のとき1.0以上)
    - [in]  iNDerivative    微分次数(0,1,2)
    - [in]  bIsVertical     微分方向
                                - TRUE:y方向処理
                                - FALSE:x方向処理
    - [in]  iMode           処理モード
                                - 0:convolution
                                - 1:iir
    - [in]  border_mode     ボーダー処理モード
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         ０埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード１
                                - F_BORDER_MIRROR2      反転モード２
    - [in]  value           ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ確保失敗
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gaussian_1Dfilter(fhSrc, fhDst, dSigma=3.0, iNDerivative=0, bIsVertical=False, iMode=0, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_gaussian_1Dfilter( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, INT iNDerivative, BOOL bIsVertical, INT iMode, INT border_mode, DOUBLE value )
    gaussian1D filter

    Params:
    - [in]  fhSrc           処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst           処理結果画像( type: uc8, s16, us16, double )
    - [in]  dSigma          gaussian filterのσ(  iMode = 0 のとき0.6以上,  iMode = 1 のとき1.0以上)
    - [in]  iNDerivative    微分次数(0,1,2)
    - [in]  bIsVertical     微分方向
                                - TRUE:y方向処理
                                - FALSE:x方向処理
    - [in]  iMode           処理モード
                                - 0:convolution
                                - 1:iir
    - [in]  border_mode     ボーダー処理モード
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         ０埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード１
                                - F_BORDER_MIRROR2      反転モード２
    - [in]  value           ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ確保失敗
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gaussian_1Dfilter(fhSrc, fhDst, dSigma, iNDerivative, bIsVertical, iMode, border_mode, value)

def fnFIE_gaussian_2Dfilter(fhSrc, fhDst, dSigma, iMode, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_gaussian_2Dfilter( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, INT iMode, INT border_mode, DOUBLE value )
    gaussian2D filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  dSigma      gaussian filterのσ(  iMode = 0 のとき0.6以上,  iMode = 1 のとき1.0以上)
    - [in]  iMode       処理モード
                            - 0:convolution
                            - 1:iir
    - [in]  border_mode ボーダー処理モード
                            - F_BORDER_NONE         ボーダー拡張しない
                            - F_BORDER_ZERO         ０埋めモード
                            - F_BORDER_VALUE        一定値モード
                            - F_BORDER_CONTINUOUS   端延長モード
                            - F_BORDER_REPEAT       繰り返しモード
                            - F_BORDER_MIRROR1      反転モード１
                            - F_BORDER_MIRROR2      反転モード２
    - [in]  value       ボーダー濃度値。
                             border_mode がF_BORDER_VALUEの場合のみ使用されます。
                            その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  border_mode 異常
                                    -  iMode < 0 ||  iMode > 1
                                    -  bIsVertical != TRUE &&  bIsVertical != FALSE
                                    -  iMode == 0 &&  dSigma < 0.6
                                    -  iMode == 1 &&  dSigma < 1
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gaussian_2Dfilter(fhSrc, fhDst, dSigma=3.0, iMode=0, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_gaussian_2Dfilter( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, INT iMode, INT border_mode, DOUBLE value )
    gaussian2D filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  dSigma      gaussian filterのσ(  iMode = 0 のとき0.6以上,  iMode = 1 のとき1.0以上)
    - [in]  iMode       処理モード
                            - 0:convolution
                            - 1:iir
    - [in]  border_mode ボーダー処理モード
                            - F_BORDER_NONE         ボーダー拡張しない
                            - F_BORDER_ZERO         ０埋めモード
                            - F_BORDER_VALUE        一定値モード
                            - F_BORDER_CONTINUOUS   端延長モード
                            - F_BORDER_REPEAT       繰り返しモード
                            - F_BORDER_MIRROR1      反転モード１
                            - F_BORDER_MIRROR2      反転モード２
    - [in]  value       ボーダー濃度値。
                             border_mode がF_BORDER_VALUEの場合のみ使用されます。
                            その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  border_mode 異常
                                    -  iMode < 0 ||  iMode > 1
                                    -  bIsVertical != TRUE &&  bIsVertical != FALSE
                                    -  iMode == 0 &&  dSigma < 0.6
                                    -  iMode == 1 &&  dSigma < 1
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gaussian_2Dfilter(fhSrc, fhDst, dSigma, iMode, border_mode, value)

def fnFIE_gaussian_derivative_2Dfilter(fhSrc, fhDst, dSigma, iNDerivativeX, iNDerivativeY, iMode, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_gaussian_derivative_2Dfilter( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, INT iNDerivativeX, INT iNDerivativeY, INT iMode, INT border_mode, DOUBLE value )
    derivative gaussian2D filter

    Params:
    - [in]  fhSrc           処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst           処理結果画像( type: uc8, s16, us16, double )
    - [in]  dSigma          gaussian filterのσ(  iMode = 0 のとき0.6以上,  iMode = 1 のとき1.0以上)
    - [in]  iNDerivativeX   X方向処理の時の微分次数(0,1,2)
    - [in]  iNDerivativeY   Y方向処理の時の微分次数(0,1,2)
    - [in]  iMode           処理モード
                                - 0:convolution
                                -  1:iir
    - [in]  border_mode ボーダー処理モード
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         ０埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード１
                                - F_BORDER_MIRROR2      反転モード２
    - [in]  value           ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  border_mode 異常
                                    -  dSigma が異常値
                                    -  iMode が異常値
                                    - !( 0 <=  iNDerivativeX <= 2 )
                                    - !( 0 <=  iNDerivativeY <= 2 )
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gaussian_derivative_2Dfilter(fhSrc, fhDst, dSigma=3.0, iNDerivativeX=0, iNDerivativeY=0, iMode=0, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_gaussian_derivative_2Dfilter( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, INT iNDerivativeX, INT iNDerivativeY, INT iMode, INT border_mode, DOUBLE value )
    derivative gaussian2D filter

    Params:
    - [in]  fhSrc           処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst           処理結果画像( type: uc8, s16, us16, double )
    - [in]  dSigma          gaussian filterのσ(  iMode = 0 のとき0.6以上,  iMode = 1 のとき1.0以上)
    - [in]  iNDerivativeX   X方向処理の時の微分次数(0,1,2)
    - [in]  iNDerivativeY   Y方向処理の時の微分次数(0,1,2)
    - [in]  iMode           処理モード
                                - 0:convolution
                                -  1:iir
    - [in]  border_mode ボーダー処理モード
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         ０埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード１
                                - F_BORDER_MIRROR2      反転モード２
    - [in]  value           ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  border_mode 異常
                                    -  dSigma が異常値
                                    -  iMode が異常値
                                    - !( 0 <=  iNDerivativeX <= 2 )
                                    - !( 0 <=  iNDerivativeY <= 2 )
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gaussian_derivative_2Dfilter(fhSrc, fhDst, dSigma, iNDerivativeX, iNDerivativeY, iMode, border_mode, value)

def fnFIE_LoG_2Dfilter(fhSrc, fhDst, dSigma, iMode, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_LoG_2Dfilter( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, INT iMode, INT border_mode, DOUBLE value )
    Laplacian of Gaussian filter

    Params:
    - [in]  fhSrc           処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst           処理結果画像( type: uc8, s16, us16, double )
    - [in]  dSigma          gaussian filterのσ(  iMode = 0 のとき0.6以上,  iMode = 1 のとき1.0以上)
    - [in]  iMode           処理モード
                                - 0:convolution
                                - 1:iir
    - [in]  border_mode     ボーダー処理モード
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         ０埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード１
                                - F_BORDER_MIRROR2      反転モード２
    - [in]  value           ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  border_mode 異常
                                    -  dSigma が異常値
                                    -  iMode が異常値
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def LoG_2Dfilter(fhSrc, fhDst, dSigma=3.0, iMode=0, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_LoG_2Dfilter( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, INT iMode, INT border_mode, DOUBLE value )
    Laplacian of Gaussian filter

    Params:
    - [in]  fhSrc           処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst           処理結果画像( type: uc8, s16, us16, double )
    - [in]  dSigma          gaussian filterのσ(  iMode = 0 のとき0.6以上,  iMode = 1 のとき1.0以上)
    - [in]  iMode           処理モード
                                - 0:convolution
                                - 1:iir
    - [in]  border_mode     ボーダー処理モード
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         ０埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード１
                                - F_BORDER_MIRROR2      反転モード２
    - [in]  value           ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  border_mode 異常
                                    -  dSigma が異常値
                                    -  iMode が異常値
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_LoG_2Dfilter(fhSrc, fhDst, dSigma, iMode, border_mode, value)

def fnFIE_DoG_2Dfilter(fhSrc, fhDst, dSigma1, dSigma2, iMode, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_DoG_2Dfilter( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma1, DOUBLE dSigma2, INT iMode, INT border_mode, DOUBLE value )
    Difference of Gaussian 2D filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  dSigma1     gaussian filterのσ(  iMode = 0 のとき0.6以上,  iMode = 1 のとき1.0以上)
    - [in]  dSigma2     gaussian filterのσ(  iMode = 0 のとき0.6以上,  iMode = 1 のとき1.0以上,  かつ  dSigma1 <  dSigma2 )
    - [in]  iMode       処理モード
                            - 0:convolution
                            -  1:iir
    - [in]  border_mode ボーダー処理モード
                            - F_BORDER_NONE         ボーダー拡張しない
                            - F_BORDER_ZERO         ０埋めモード
                            - F_BORDER_VALUE        一定値モード
                            - F_BORDER_CONTINUOUS   端延長モード
                            - F_BORDER_REPEAT       繰り返しモード
                            - F_BORDER_MIRROR1      反転モード１
                            - F_BORDER_MIRROR2      反転モード２
    - [in]  value       ボーダー濃度値。
                             border_mode がF_BORDER_VALUEの場合のみ使用されます。
                            その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  border_mode 異常
                                    -  dSigma が異常値
                                    -  iMode が異常値
                                    -  dSigma1 >=  dSigma2
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def DoG_2Dfilter(fhSrc, fhDst, dSigma1=0.6, dSigma2=2.0, iMode=0, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_DoG_2Dfilter( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma1, DOUBLE dSigma2, INT iMode, INT border_mode, DOUBLE value )
    Difference of Gaussian 2D filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  dSigma1     gaussian filterのσ(  iMode = 0 のとき0.6以上,  iMode = 1 のとき1.0以上)
    - [in]  dSigma2     gaussian filterのσ(  iMode = 0 のとき0.6以上,  iMode = 1 のとき1.0以上,  かつ  dSigma1 <  dSigma2 )
    - [in]  iMode       処理モード
                            - 0:convolution
                            -  1:iir
    - [in]  border_mode ボーダー処理モード
                            - F_BORDER_NONE         ボーダー拡張しない
                            - F_BORDER_ZERO         ０埋めモード
                            - F_BORDER_VALUE        一定値モード
                            - F_BORDER_CONTINUOUS   端延長モード
                            - F_BORDER_REPEAT       繰り返しモード
                            - F_BORDER_MIRROR1      反転モード１
                            - F_BORDER_MIRROR2      反転モード２
    - [in]  value       ボーダー濃度値。
                             border_mode がF_BORDER_VALUEの場合のみ使用されます。
                            その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  border_mode 異常
                                    -  dSigma が異常値
                                    -  iMode が異常値
                                    -  dSigma1 >=  dSigma2
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_DoG_2Dfilter(fhSrc, fhDst, dSigma1, dSigma2, iMode, border_mode, value)

def fnFIE_gaussian_approximation(hsrc, hdst, sigma, derivative_x, derivative_y, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_gaussian_approximation( FHANDLE hsrc, FHANDLE hdst, DOUBLE sigma, INT derivative_x, INT derivative_y, INT border_mode, DOUBLE border_value )
    近似ガウシアン フィルタ

    Params:
    - [in]  hsrc   入力画像 ( type: uc8, s16, us16, double )
    - [out] hdst   出力画像 ( type: uc8, s16, us16, double )
    - [in]  sigma          ガウシアン関数の標準偏差 (単位 : pixel,  1.0 <=  sigma)
    - [in]  derivative_x   X 方向処理時の微分次数 (0, 1, 2)
    - [in]  derivative_y   Y 方向処理時の微分次数 (0, 1, 2)
    - [in]  border_mode   ボーダー処理モード. 下記のいずれかを指定.
               - F_BORDER_NONE         ボーダー部分は処理しない
               - F_BORDER_ZERO         ０埋めモード
               - F_BORDER_VALUE        一定値モード
               - F_BORDER_CONTINUOUS   端延長モード
               - F_BORDER_REPEAT       繰り返しモード
               - F_BORDER_MIRROR1      反転モード１
               - F_BORDER_MIRROR2      反転モード２
    - [in]  border_value ボーダー濃度値.
                              border_mode が F_BORDER_VALUE の場合のみ使用されます.
                             その他のモードの場合、この値は無視されます.

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gaussian_approximation(hsrc, hdst, sigma=3.0, derivative_x=0, derivative_y=0, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_gaussian_approximation( FHANDLE hsrc, FHANDLE hdst, DOUBLE sigma, INT derivative_x, INT derivative_y, INT border_mode, DOUBLE border_value )
    近似ガウシアン フィルタ

    Params:
    - [in]  hsrc   入力画像 ( type: uc8, s16, us16, double )
    - [out] hdst   出力画像 ( type: uc8, s16, us16, double )
    - [in]  sigma          ガウシアン関数の標準偏差 (単位 : pixel,  1.0 <=  sigma)
    - [in]  derivative_x   X 方向処理時の微分次数 (0, 1, 2)
    - [in]  derivative_y   Y 方向処理時の微分次数 (0, 1, 2)
    - [in]  border_mode   ボーダー処理モード. 下記のいずれかを指定.
               - F_BORDER_NONE         ボーダー部分は処理しない
               - F_BORDER_ZERO         ０埋めモード
               - F_BORDER_VALUE        一定値モード
               - F_BORDER_CONTINUOUS   端延長モード
               - F_BORDER_REPEAT       繰り返しモード
               - F_BORDER_MIRROR1      反転モード１
               - F_BORDER_MIRROR2      反転モード２
    - [in]  border_value ボーダー濃度値.
                              border_mode が F_BORDER_VALUE の場合のみ使用されます.
                             その他のモードの場合、この値は無視されます.

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gaussian_approximation(hsrc, hdst, sigma, derivative_x, derivative_y, border_mode, border_value)

def fnFIE_average(fhSrc, fhDst, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_average( FHANDLE fhSrc, FHANDLE fhDst, INT border_mode, DOUBLE value )
    average filter

    Params:
    - [in]  fhSrc        処理対象画像( type: uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [out] fhDst        処理結果画像( type: uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  border_mode  ボーダー処理モード
                             - F_BORDER_NONE        ボーダー拡張しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  value        ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常(  border_mode 異常 )
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def average(fhSrc, fhDst, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_average( FHANDLE fhSrc, FHANDLE fhDst, INT border_mode, DOUBLE value )
    average filter

    Params:
    - [in]  fhSrc        処理対象画像( type: uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [out] fhDst        処理結果画像( type: uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [in]  border_mode  ボーダー処理モード
                             - F_BORDER_NONE        ボーダー拡張しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  value        ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常(  border_mode 異常 )
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_average(fhSrc, fhDst, border_mode, value)

def fnFIE_laplacian(fhSrc, fhDst, iCase, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_laplacian( FHANDLE fhSrc, FHANDLE fhDst, INT iCase, INT border_mode, DOUBLE value )
    laplacian filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  iCase       フィルタ選択(0 or 1)
    - [in]  border_mode  ボーダー処理モード
                             - F_BORDER_NONE        ボーダー拡張しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  value        ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  iCase != 0 ||  iCase != 1
                                    -  border_mode 異常
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def laplacian(fhSrc, fhDst, iCase=0, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_laplacian( FHANDLE fhSrc, FHANDLE fhDst, INT iCase, INT border_mode, DOUBLE value )
    laplacian filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  iCase       フィルタ選択(0 or 1)
    - [in]  border_mode  ボーダー処理モード
                             - F_BORDER_NONE        ボーダー拡張しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  value        ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  iCase != 0 ||  iCase != 1
                                    -  border_mode 異常
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_laplacian(fhSrc, fhDst, iCase, border_mode, value)

def fnFIE_median(fhSrc, fhDst, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_median( FHANDLE fhSrc, FHANDLE fhDst, INT border_mode, DOUBLE value )
    median filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  border_mode ボーダー処理モード
                            - F_BORDER_NONE     ボーダー拡張しない
                            - F_BORDER_ZERO     ０埋めモード
                            - F_BORDER_VALUE        一定値モード
                            - F_BORDER_CONTINUOUS   端延長モード
                            - F_BORDER_REPEAT       繰り返しモード
                            - F_BORDER_MIRROR1      反転モード１
                            - F_BORDER_MIRROR2      反転モード２
    - [in]  value       ボーダー濃度値。
                             border_mode がF_BORDER_VALUEの場合のみ使用されます。
                            その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def median(fhSrc, fhDst, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_median( FHANDLE fhSrc, FHANDLE fhDst, INT border_mode, DOUBLE value )
    median filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  border_mode ボーダー処理モード
                            - F_BORDER_NONE     ボーダー拡張しない
                            - F_BORDER_ZERO     ０埋めモード
                            - F_BORDER_VALUE        一定値モード
                            - F_BORDER_CONTINUOUS   端延長モード
                            - F_BORDER_REPEAT       繰り返しモード
                            - F_BORDER_MIRROR1      反転モード１
                            - F_BORDER_MIRROR2      反転モード２
    - [in]  value       ボーダー濃度値。
                             border_mode がF_BORDER_VALUEの場合のみ使用されます。
                            その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_median(fhSrc, fhDst, border_mode, value)

def fnFIE_rank_filter(fhSrc, fhDst, iRank, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_rank_filter( FHANDLE fhSrc, FHANDLE fhDst, INT iRank, INT border_mode, DOUBLE value )
    rank filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  iRank       ランク(1〜9)
    - [in]  border_mode  ボーダー処理モード
                             - F_BORDER_NONE        ボーダー拡張しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  value        ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ異常
                                -  iRank < 1 ||  iRank > 9
                                -  border_mode 異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def rank_filter(fhSrc, fhDst, iRank=5, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_rank_filter( FHANDLE fhSrc, FHANDLE fhDst, INT iRank, INT border_mode, DOUBLE value )
    rank filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  iRank       ランク(1〜9)
    - [in]  border_mode  ボーダー処理モード
                             - F_BORDER_NONE        ボーダー拡張しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  value        ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ異常
                                -  iRank < 1 ||  iRank > 9
                                -  border_mode 異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_rank_filter(fhSrc, fhDst, iRank, border_mode, value)

def fnFIE_median_approximation(fhSrc, fhDst, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_median_approximation( FHANDLE fhSrc, FHANDLE fhDst, INT border_mode, DOUBLE value )
    median approximation filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  border_mode  ボーダー処理モード
                             - F_BORDER_NONE        ボーダー拡張しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  value        ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常(  border_mode 異常 )
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def median_approximation(fhSrc, fhDst, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_median_approximation( FHANDLE fhSrc, FHANDLE fhDst, INT border_mode, DOUBLE value )
    median approximation filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  border_mode  ボーダー処理モード
                             - F_BORDER_NONE        ボーダー拡張しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  value        ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常(  border_mode 異常 )
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_median_approximation(fhSrc, fhDst, border_mode, value)

def fnFIE_medianMxN(hSrc, hTar, iH, iV, iBrdMod) -> Any:
    r"""INT FVALGAPI fnFIE_medianMxN( FHANDLE hSrc, FHANDLE hTar, INT iH, INT iV, INT iBrdMod )
    median filter with variable filtering window

    Params:
    -  [in] hSrc            処理対象画像(type: uc8, s16, us16, double )
    -  [out] hTar           処理結果画像(type: uc8, s16, us16, double )
    -  [in] iH              フィルタの幅(水平方向)
                                - 1 <=  iH <= 253
                                - 奇数である
    -  [in] iV              フィルタの高さ(垂直方向)
                                - 1 <=  iV <= 253
                                - 奇数である
    -  [in]  iBrdMod        ボーダー処理モード
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_MIRROR1      反転モード１
                                - F_BORDER_MIRROR2      反転モード２

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_NOMEMORY      メモリ不足エラー
    - F_ERR_INVALID_PARAM パラメータ異常
                                -  iBrdMod 異常
                                -  iH 又は  iV サイズ異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def medianMxN(hSrc, hTar, iH=11, iV=11, iBrdMod=F_BORDER_CONTINUOUS):
    r"""INT FVALGAPI fnFIE_medianMxN( FHANDLE hSrc, FHANDLE hTar, INT iH, INT iV, INT iBrdMod )
    median filter with variable filtering window

    Params:
    -  [in] hSrc            処理対象画像(type: uc8, s16, us16, double )
    -  [out] hTar           処理結果画像(type: uc8, s16, us16, double )
    -  [in] iH              フィルタの幅(水平方向)
                                - 1 <=  iH <= 253
                                - 奇数である
    -  [in] iV              フィルタの高さ(垂直方向)
                                - 1 <=  iV <= 253
                                - 奇数である
    -  [in]  iBrdMod        ボーダー処理モード
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_MIRROR1      反転モード１
                                - F_BORDER_MIRROR2      反転モード２

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_NOMEMORY      メモリ不足エラー
    - F_ERR_INVALID_PARAM パラメータ異常
                                -  iBrdMod 異常
                                -  iH 又は  iV サイズ異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_medianMxN(hSrc, hTar, iH, iV, iBrdMod)

def fnFIE_roberts(fhSrc, fhDst, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_roberts( FHANDLE fhSrc, FHANDLE fhDst, INT border_mode, DOUBLE value )
    roberts filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  border_mode  ボーダー処理モード
                             - F_BORDER_NONE        ボーダー拡張しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  value        ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常(border_mode異常)
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def roberts(fhSrc, fhDst, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_roberts( FHANDLE fhSrc, FHANDLE fhDst, INT border_mode, DOUBLE value )
    roberts filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: uc8, s16, us16, double )
    - [in]  border_mode  ボーダー処理モード
                             - F_BORDER_NONE        ボーダー拡張しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  value        ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常(border_mode異常)
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_roberts(fhSrc, fhDst, border_mode, value)

def fnFIE_sobel(hsrc, hdst, calc_mode, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_sobel( FHANDLE hsrc, FHANDLE hdst, INT calc_mode, INT border_mode, DOUBLE border_value )
    sobel フィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル( type: uc8, s16, us16, double )
    - [out] hdst         出力先画像ハンドル( type: uc8, s16, us16, double )
    - [in]  calc_mode    sobelの計算モード。下記のいずれかを指定。
                            - F_SOBEL_X_MODE    Ｘ方向微分
                            - F_SOBEL_Y_MODE    Ｙ方向微分
                            - F_SOBEL_XY_MODE   ＸＹ方向微分（絶対値和）
                            - F_SOBEL_SQRT_MODE ＸＹ方向微分（ユークリッド距離）
    - [in]  border_mode  ボーダー処理モード。下記のいずれかを指定。
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def sobel(hsrc, hdst, calc_mode=F_SOBEL_SQRT_MODE, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_sobel( FHANDLE hsrc, FHANDLE hdst, INT calc_mode, INT border_mode, DOUBLE border_value )
    sobel フィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル( type: uc8, s16, us16, double )
    - [out] hdst         出力先画像ハンドル( type: uc8, s16, us16, double )
    - [in]  calc_mode    sobelの計算モード。下記のいずれかを指定。
                            - F_SOBEL_X_MODE    Ｘ方向微分
                            - F_SOBEL_Y_MODE    Ｙ方向微分
                            - F_SOBEL_XY_MODE   ＸＹ方向微分（絶対値和）
                            - F_SOBEL_SQRT_MODE ＸＹ方向微分（ユークリッド距離）
    - [in]  border_mode  ボーダー処理モード。下記のいずれかを指定。
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_sobel(hsrc, hdst, calc_mode, border_mode, border_value)

def fnFIE_sobel_dir(hsrc, hdst, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_sobel_dir( FHANDLE hsrc, FHANDLE hdst, INT border_mode, DOUBLE border_value )
    sobel フィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル。( type: uc8, s16, us16, double )
    - [out] hdst         出力先画像ハンドル。( type: s16 )
    - [in]  border_mode  ボーダー処理モード。下記のいずれかを指定。
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def sobel_dir(hsrc, hdst, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_sobel_dir( FHANDLE hsrc, FHANDLE hdst, INT border_mode, DOUBLE border_value )
    sobel フィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル。( type: uc8, s16, us16, double )
    - [out] hdst         出力先画像ハンドル。( type: s16 )
    - [in]  border_mode  ボーダー処理モード。下記のいずれかを指定。
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_sobel_dir(hsrc, hdst, border_mode, border_value)

def fnFIE_robinson(hsrc, hdst, denom, calc_mode, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_robinson( FHANDLE hsrc, FHANDLE hdst, DOUBLE denom, enum f_direction calc_mode, INT border_mode, INT border_value )
    robinson フィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル( type: uc8, s16, us16, double )
    - [out] hdst         出力先画像ハンドル( type: uc8, s16, us16, double )
    - [in]  denom        フィルタ係数分母
    - [in]  calc_mode    robinsonの計算モード。下記のいずれかを指定。
                             - F_DIRECT_0
                             - F_DIRECT_45
                             - F_DIRECT_90
                             - F_DIRECT_135
                             - F_DIRECT_180
                             - F_DIRECT_225
                             - F_DIRECT_270
                             - F_DIRECT_315
                             - F_DIRECT_MAX4
                             - F_DIRECT_MAX8
    - [in]  border_mode  ボーダー処理モード。下記のいずれかを指定。
                             - F_BORDER_NONE        ボーダー部分は処理しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def robinson(hsrc, hdst, denom=2.0, calc_mode=F_DIRECT_MAX4, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_robinson( FHANDLE hsrc, FHANDLE hdst, DOUBLE denom, enum f_direction calc_mode, INT border_mode, INT border_value )
    robinson フィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル( type: uc8, s16, us16, double )
    - [out] hdst         出力先画像ハンドル( type: uc8, s16, us16, double )
    - [in]  denom        フィルタ係数分母
    - [in]  calc_mode    robinsonの計算モード。下記のいずれかを指定。
                             - F_DIRECT_0
                             - F_DIRECT_45
                             - F_DIRECT_90
                             - F_DIRECT_135
                             - F_DIRECT_180
                             - F_DIRECT_225
                             - F_DIRECT_270
                             - F_DIRECT_315
                             - F_DIRECT_MAX4
                             - F_DIRECT_MAX8
    - [in]  border_mode  ボーダー処理モード。下記のいずれかを指定。
                             - F_BORDER_NONE        ボーダー部分は処理しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_robinson(hsrc, hdst, denom, calc_mode, border_mode, border_value)

def fnFIE_kirsch(hsrc, hdst, denom, calc_mode, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_kirsch( FHANDLE hsrc, FHANDLE hdst, DOUBLE denom, enum f_direction calc_mode, INT border_mode, INT border_value )
    kirsch フィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル( type: uc8, s16, us16, double )
    - [out] hdst         出力先画像ハンドル( type: uc8, s16, us16, double )
    - [in]  denom        フィルタ係数分母
    - [in]  calc_mode    kirschの計算モード。下記のいずれかを指定。
                             - F_DIRECT_0      0度方向カーネル
                             - F_DIRECT_45     45度方向カーネル
                             - F_DIRECT_90     90度方向カーネル
                             - F_DIRECT_135    135度方向カーネル
                             - F_DIRECT_180    180度方向カーネル
                             - F_DIRECT_225    225度方向カーネル
                             - F_DIRECT_270    270度方向カーネル
                             - F_DIRECT_315    315度方向カーネル
                             - F_DIRECT_MAX4   0,90,180,270度カーネルでの処理結果の最大値
                             - F_DIRECT_MAX8   0,45,...,315度カーネルでの処理結果の最大値
    - [in]  border_mode  ボーダー処理モード。下記のいずれかを指定。
                             - F_BORDER_NONE        ボーダー部分は処理しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def kirsch(hsrc, hdst, denom=10.0, calc_mode=F_DIRECT_MAX4, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_kirsch( FHANDLE hsrc, FHANDLE hdst, DOUBLE denom, enum f_direction calc_mode, INT border_mode, INT border_value )
    kirsch フィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル( type: uc8, s16, us16, double )
    - [out] hdst         出力先画像ハンドル( type: uc8, s16, us16, double )
    - [in]  denom        フィルタ係数分母
    - [in]  calc_mode    kirschの計算モード。下記のいずれかを指定。
                             - F_DIRECT_0      0度方向カーネル
                             - F_DIRECT_45     45度方向カーネル
                             - F_DIRECT_90     90度方向カーネル
                             - F_DIRECT_135    135度方向カーネル
                             - F_DIRECT_180    180度方向カーネル
                             - F_DIRECT_225    225度方向カーネル
                             - F_DIRECT_270    270度方向カーネル
                             - F_DIRECT_315    315度方向カーネル
                             - F_DIRECT_MAX4   0,90,180,270度カーネルでの処理結果の最大値
                             - F_DIRECT_MAX8   0,45,...,315度カーネルでの処理結果の最大値
    - [in]  border_mode  ボーダー処理モード。下記のいずれかを指定。
                             - F_BORDER_NONE        ボーダー部分は処理しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_kirsch(hsrc, hdst, denom, calc_mode, border_mode, border_value)

def fnFIE_kernel_filter(hsrc, hdst, kernel, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_kernel_filter( FHANDLE hsrc, FHANDLE hdst, F_FILTER_KERNEL_T* kernel, INT border_mode, DOUBLE border_value )
    任意カーネルフィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル。(type :uc8, s16, us16, double)
    - [out] hdst         出力先画像ハンドル。(type: uc8, s16, us16, double)
                             入力画像と同じサイズ、タイプ、チャネル数で有ること。
    - [in]  kernel       カーネル指定構造体のポインタ。
    - [in]  border_mode  ボーダー処理モード。下記のいずれかを指定。
                             - F_BORDER_NONE        ボーダー部分は処理しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータエラー
    - F_ERR_INVALID_IMAGE  不正な画像が渡された(入力と出力が合わない等)
    - F_ERR_NOMEMORY       メモリ不足により異常終了
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def kernel_filter(hsrc, hdst, kernel, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_kernel_filter( FHANDLE hsrc, FHANDLE hdst, F_FILTER_KERNEL_T* kernel, INT border_mode, DOUBLE border_value )
    任意カーネルフィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル。(type :uc8, s16, us16, double)
    - [out] hdst         出力先画像ハンドル。(type: uc8, s16, us16, double)
                             入力画像と同じサイズ、タイプ、チャネル数で有ること。
    - [in]  kernel       カーネル指定構造体のポインタ。
    - [in]  border_mode  ボーダー処理モード。下記のいずれかを指定。
                             - F_BORDER_NONE        ボーダー部分は処理しない
                             - F_BORDER_ZERO        ０埋めモード
                             - F_BORDER_VALUE       一定値モード
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_REPEAT      繰り返しモード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。
                             その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータエラー
    - F_ERR_INVALID_IMAGE  不正な画像が渡された(入力と出力が合わない等)
    - F_ERR_NOMEMORY       メモリ不足により異常終了
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_kernel_filter(hsrc, hdst, kernel, border_mode, border_value)

def fnFIE_projection(hsrc, hdst, mode) -> Any:
    r"""INT FVALGAPI fnFIE_projection( FHANDLE hsrc, FHANDLE hdst, INT mode )
    画像の縦方向や横方向の投影を算出する

    Params:
    - [in]  src 入力画像( type: bin, uc8, s16, us16 )
    - [out] dst 出力画像( type: bin, uc8, s16, us16, dobule )
    - 出力画像は入力画像と同じ型であるか、F_IMG_DOUBLE型でなくてはなりません。
    - 出力画像は入力画像と同じチャネル数でなければなりません。
    -  mode の値が0または3であるとき、出力画像の高さは入力画像の高さと同一でなければなりません。
    -  mode の値が1または4であるとき、出力画像の幅は入力画像の幅と同一でなければなりません。
    -  mode の値が2または5であるとき、出力画像の画像サイズは入力画像と異なっていてかまいません。
    - [in]  mode 処理の内容
    - 0 水平投影
    - 1 垂直投影
    - 2 画像全体合計
    - 3 水平投影後、平均値を算出
    - 4 垂直投影後、平均値を算出
    - 5 画像全体合計後、平均値を算出

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  不正なパラメータ
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def projection(hsrc, hdst, mode):
    r"""INT FVALGAPI fnFIE_projection( FHANDLE hsrc, FHANDLE hdst, INT mode )
    画像の縦方向や横方向の投影を算出する

    Params:
    - [in]  src 入力画像( type: bin, uc8, s16, us16 )
    - [out] dst 出力画像( type: bin, uc8, s16, us16, dobule )
    - 出力画像は入力画像と同じ型であるか、F_IMG_DOUBLE型でなくてはなりません。
    - 出力画像は入力画像と同じチャネル数でなければなりません。
    -  mode の値が0または3であるとき、出力画像の高さは入力画像の高さと同一でなければなりません。
    -  mode の値が1または4であるとき、出力画像の幅は入力画像の幅と同一でなければなりません。
    -  mode の値が2または5であるとき、出力画像の画像サイズは入力画像と異なっていてかまいません。
    - [in]  mode 処理の内容
    - 0 水平投影
    - 1 垂直投影
    - 2 画像全体合計
    - 3 水平投影後、平均値を算出
    - 4 垂直投影後、平均値を算出
    - 5 画像全体合計後、平均値を算出

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  不正なパラメータ
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_projection(hsrc, hdst, mode)

def fnFIE_adaptive_average(hsrc, hdst, delta, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_adaptive_average( FHANDLE hsrc, FHANDLE hdst, DOUBLE delta, INT border_mode, DOUBLE border_value )
    適応的平滑化フィルタ(3×3)

    Params:
    - [in] hsrc             入力画像 ( type: uc8, s16, us16, double )
    - [out] hdst            出力画像 ( 入力画像の型と同じ 又はdouble型 )
    - [in] delta            濃度差分の閾値 ( 0よりも大きい値 )
    - [in] border_mode      ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] border_value         ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def adaptive_average(hsrc, hdst, delta=100, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_adaptive_average( FHANDLE hsrc, FHANDLE hdst, DOUBLE delta, INT border_mode, DOUBLE border_value )
    適応的平滑化フィルタ(3×3)

    Params:
    - [in] hsrc             入力画像 ( type: uc8, s16, us16, double )
    - [out] hdst            出力画像 ( 入力画像の型と同じ 又はdouble型 )
    - [in] delta            濃度差分の閾値 ( 0よりも大きい値 )
    - [in] border_mode      ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] border_value         ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_adaptive_average(hsrc, hdst, delta, border_mode, border_value)

def fnFIE_adaptive_averageMxN(hsrc, hdst, delta, size_m, size_n, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_adaptive_averageMxN( FHANDLE hsrc, FHANDLE hdst, DOUBLE delta, INT size_m, INT size_n, INT border_mode, DOUBLE border_value )
    適応的平滑化フィルタ(m×n)

    Params:
    - [in] hsrc             入力画像 ( type: uc8, s16, us16, double )
    - [out] hdst            出力画像 ( 入力画像の型と同じ 又はdouble型 )
    - [in] delta            濃度差分の閾値 ( 0よりも大きい値 )
    - [in] size_m           フィルタの幅( 水平方向  1以上画像幅以下の奇数)
    - [in] size_n           フィルタの高さ( 垂直方向 1以上画像高さ以下の奇数)
    - [in] border_mode      ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] border_value     ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def adaptive_averageMxN(hsrc, hdst, delta=100, size_m=11, size_n=11, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_adaptive_averageMxN( FHANDLE hsrc, FHANDLE hdst, DOUBLE delta, INT size_m, INT size_n, INT border_mode, DOUBLE border_value )
    適応的平滑化フィルタ(m×n)

    Params:
    - [in] hsrc             入力画像 ( type: uc8, s16, us16, double )
    - [out] hdst            出力画像 ( 入力画像の型と同じ 又はdouble型 )
    - [in] delta            濃度差分の閾値 ( 0よりも大きい値 )
    - [in] size_m           フィルタの幅( 水平方向  1以上画像幅以下の奇数)
    - [in] size_n           フィルタの高さ( 垂直方向 1以上画像高さ以下の奇数)
    - [in] border_mode      ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] border_value     ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_adaptive_averageMxN(hsrc, hdst, delta, size_m, size_n, border_mode, border_value)

def fnFIE_gabor(hSrc, hDst, sigma, wavelen, orient, filter_mode, border_mode, border_val) -> Any:
    r"""INT FVALGAPI fnFIE_gabor( FHANDLE hSrc, FHANDLE hDst, DOUBLE sigma, DOUBLE wavelen, DOUBLE orient, INT filter_mode, INT border_mode, DOUBLE border_val )
    ガボール フィルタ

    Params:
    - [in]  hSrc   入力画像 ( type: uc8, s16, us16, float, double )
    - [out] hDst   出力画像 ( type: uc8, s16, us16, float, double )
    - [in]  sigma     ガボールフィルタの標準偏差 $\sigma$ (単位 : pixel, 0.4 <=  sigma)
    - [in]  wavelen   ガボールフィルタの波長 $\lambda$ (単位 : pixel, 0 <  wavelen)
    - [in]  orient    ガボールフィルタの方位 $\theta$ (単位 : radian )
    - [in]  filter_mode   フィルターモード. 下記のいずれかを指定.
                             - 0 : 実部 を出力.
                             - 1 : 虚部 を出力.
                             - 2 : 実部 と 虚部 の 自乗和の平方根 を出力.
    - [in]  border_mode   ボーダー処理モード. 下記のいずれかを指定.
               - F_BORDER_NONE         ボーダー部分は処理しない
               - F_BORDER_ZERO         ０埋めモード
               - F_BORDER_VALUE        一定値モード
               - F_BORDER_CONTINUOUS   端延長モード
               - F_BORDER_REPEAT       繰り返しモード
               - F_BORDER_MIRROR1      反転モード１
               - F_BORDER_MIRROR2      反転モード２
    - [in]  border_val   ボーダー濃度値.
                              border_mode が F_BORDER_VALUE の場合のみ使用されます.
                             その他のモードの場合、この値は無視されます.

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gabor(hSrc, hDst, sigma=3.0, wavelen=3.0, orient=0.0, filter_mode=0, border_mode=F_BORDER_CONTINUOUS, border_val=0):
    r"""INT FVALGAPI fnFIE_gabor( FHANDLE hSrc, FHANDLE hDst, DOUBLE sigma, DOUBLE wavelen, DOUBLE orient, INT filter_mode, INT border_mode, DOUBLE border_val )
    ガボール フィルタ

    Params:
    - [in]  hSrc   入力画像 ( type: uc8, s16, us16, float, double )
    - [out] hDst   出力画像 ( type: uc8, s16, us16, float, double )
    - [in]  sigma     ガボールフィルタの標準偏差 $\sigma$ (単位 : pixel, 0.4 <=  sigma)
    - [in]  wavelen   ガボールフィルタの波長 $\lambda$ (単位 : pixel, 0 <  wavelen)
    - [in]  orient    ガボールフィルタの方位 $\theta$ (単位 : radian )
    - [in]  filter_mode   フィルターモード. 下記のいずれかを指定.
                             - 0 : 実部 を出力.
                             - 1 : 虚部 を出力.
                             - 2 : 実部 と 虚部 の 自乗和の平方根 を出力.
    - [in]  border_mode   ボーダー処理モード. 下記のいずれかを指定.
               - F_BORDER_NONE         ボーダー部分は処理しない
               - F_BORDER_ZERO         ０埋めモード
               - F_BORDER_VALUE        一定値モード
               - F_BORDER_CONTINUOUS   端延長モード
               - F_BORDER_REPEAT       繰り返しモード
               - F_BORDER_MIRROR1      反転モード１
               - F_BORDER_MIRROR2      反転モード２
    - [in]  border_val   ボーダー濃度値.
                              border_mode が F_BORDER_VALUE の場合のみ使用されます.
                             その他のモードの場合、この値は無視されます.

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gabor(hSrc, hDst, sigma, wavelen, orient, filter_mode, border_mode, border_val)

def fnFIE_bilateral(hsrc, hdst, sigma_s, sigma_r, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_bilateral( FHANDLE hsrc, FHANDLE hdst, DOUBLE sigma_s, DOUBLE sigma_r, INT border_mode, DOUBLE border_value )
    バイラテラル フィルタ

    Params:
    - [in]  hsrc   入力画像 ( type: uc8, s16, us16, double )
    - [out] hdst   出力画像 ( type: uc8, s16, us16, double )
    - [in]  sigma_s  空間方向の標準偏差 $\sigma_{S}$ (単位 : pixel,  0.4 <=  sigma_s)
    - [in]  sigma_r  濃度方向の標準偏差 $\sigma_{R}$ (単位 : 濃度, 0 <  sigma_r)
    - [in]  border_mode   ボーダー処理モード. 下記のいずれかを指定.
               - F_BORDER_NONE         ボーダー部分は処理しない
               - F_BORDER_ZERO         ０埋めモード
               - F_BORDER_VALUE        一定値モード
               - F_BORDER_CONTINUOUS   端延長モード
               - F_BORDER_REPEAT       繰り返しモード
               - F_BORDER_MIRROR1      反転モード１
               - F_BORDER_MIRROR2      反転モード２
    - [in]  border_value ボーダー濃度値.
                              border_mode が F_BORDER_VALUE の場合のみ使用されます.
                             その他のモードの場合、この値は無視されます.

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def bilateral(hsrc, hdst, sigma_s=3.0, sigma_r=128, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_bilateral( FHANDLE hsrc, FHANDLE hdst, DOUBLE sigma_s, DOUBLE sigma_r, INT border_mode, DOUBLE border_value )
    バイラテラル フィルタ

    Params:
    - [in]  hsrc   入力画像 ( type: uc8, s16, us16, double )
    - [out] hdst   出力画像 ( type: uc8, s16, us16, double )
    - [in]  sigma_s  空間方向の標準偏差 $\sigma_{S}$ (単位 : pixel,  0.4 <=  sigma_s)
    - [in]  sigma_r  濃度方向の標準偏差 $\sigma_{R}$ (単位 : 濃度, 0 <  sigma_r)
    - [in]  border_mode   ボーダー処理モード. 下記のいずれかを指定.
               - F_BORDER_NONE         ボーダー部分は処理しない
               - F_BORDER_ZERO         ０埋めモード
               - F_BORDER_VALUE        一定値モード
               - F_BORDER_CONTINUOUS   端延長モード
               - F_BORDER_REPEAT       繰り返しモード
               - F_BORDER_MIRROR1      反転モード１
               - F_BORDER_MIRROR2      反転モード２
    - [in]  border_value ボーダー濃度値.
                              border_mode が F_BORDER_VALUE の場合のみ使用されます.
                             その他のモードの場合、この値は無視されます.

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_bilateral(hsrc, hdst, sigma_s, sigma_r, border_mode, border_value)

def fnFIE_minMxN(hsrc, hdst, size_m, size_n, border_mode, border_val) -> Any:
    r"""INT FVALGAPI fnFIE_minMxN( FHANDLE hsrc, FHANDLE hdst, INT size_m, INT size_n, INT border_mode, DOUBLE border_val )
    最小値フィルタ (MxN)

    Params:
    - [in]  hsrc     入力画像 ( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [out] hdst     出力画像 ( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [in]  size_m   フィルタの幅  ( 水平方向  1 以上画像幅以下の奇数 )
    - [in]  size_n   フィルタの高さ ( 垂直方向  1 以上画像高さ以下の奇数 )
    - [in]  border_mode   ボーダー処理モード. 下記のいずれかを指定.
               - F_BORDER_NONE         ボーダー部分は処理しない
               - F_BORDER_ZERO         ０埋めモード
               - F_BORDER_VALUE        一定値モード
               - F_BORDER_CONTINUOUS   端延長モード
               - F_BORDER_REPEAT       繰り返しモード
               - F_BORDER_MIRROR1      反転モード１
               - F_BORDER_MIRROR2      反転モード２
    - [in]  border_val   ボーダー濃度値.
                              border_mode が F_BORDER_VALUE の場合のみ使用されます.
                             その他のモードの場合、この値は無視されます.

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def minMxN(hsrc, hdst, size_m=11, size_n=11, border_mode=F_BORDER_CONTINUOUS, border_val=0):
    r"""INT FVALGAPI fnFIE_minMxN( FHANDLE hsrc, FHANDLE hdst, INT size_m, INT size_n, INT border_mode, DOUBLE border_val )
    最小値フィルタ (MxN)

    Params:
    - [in]  hsrc     入力画像 ( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [out] hdst     出力画像 ( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [in]  size_m   フィルタの幅  ( 水平方向  1 以上画像幅以下の奇数 )
    - [in]  size_n   フィルタの高さ ( 垂直方向  1 以上画像高さ以下の奇数 )
    - [in]  border_mode   ボーダー処理モード. 下記のいずれかを指定.
               - F_BORDER_NONE         ボーダー部分は処理しない
               - F_BORDER_ZERO         ０埋めモード
               - F_BORDER_VALUE        一定値モード
               - F_BORDER_CONTINUOUS   端延長モード
               - F_BORDER_REPEAT       繰り返しモード
               - F_BORDER_MIRROR1      反転モード１
               - F_BORDER_MIRROR2      反転モード２
    - [in]  border_val   ボーダー濃度値.
                              border_mode が F_BORDER_VALUE の場合のみ使用されます.
                             その他のモードの場合、この値は無視されます.

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_minMxN(hsrc, hdst, size_m, size_n, border_mode, border_val)

def fnFIE_maxMxN(hsrc, hdst, size_m, size_n, border_mode, border_val) -> Any:
    r"""INT FVALGAPI fnFIE_maxMxN( FHANDLE hsrc, FHANDLE hdst, INT size_m, INT size_n, INT border_mode, DOUBLE border_val )
    最大値フィルタ (MxN)

    Params:
    - [in]  hsrc     入力画像 ( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [out] hdst     出力画像 ( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [in]  size_m   フィルタの幅  ( 水平方向  1 以上画像幅以下の奇数 )
    - [in]  size_n   フィルタの高さ ( 垂直方向  1 以上画像高さ以下の奇数 )
    - [in]  border_mode   ボーダー処理モード. 下記のいずれかを指定.
               - F_BORDER_NONE         ボーダー部分は処理しない
               - F_BORDER_ZERO         ０埋めモード
               - F_BORDER_VALUE        一定値モード
               - F_BORDER_CONTINUOUS   端延長モード
               - F_BORDER_REPEAT       繰り返しモード
               - F_BORDER_MIRROR1      反転モード１
               - F_BORDER_MIRROR2      反転モード２
    - [in]  border_val   ボーダー濃度値.
                              border_mode が F_BORDER_VALUE の場合のみ使用されます.
                             その他のモードの場合、この値は無視されます.

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def maxMxN(hsrc, hdst, size_m=11, size_n=11, border_mode=F_BORDER_CONTINUOUS, border_val=0):
    r"""INT FVALGAPI fnFIE_maxMxN( FHANDLE hsrc, FHANDLE hdst, INT size_m, INT size_n, INT border_mode, DOUBLE border_val )
    最大値フィルタ (MxN)

    Params:
    - [in]  hsrc     入力画像 ( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [out] hdst     出力画像 ( type: bin, uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [in]  size_m   フィルタの幅  ( 水平方向  1 以上画像幅以下の奇数 )
    - [in]  size_n   フィルタの高さ ( 垂直方向  1 以上画像高さ以下の奇数 )
    - [in]  border_mode   ボーダー処理モード. 下記のいずれかを指定.
               - F_BORDER_NONE         ボーダー部分は処理しない
               - F_BORDER_ZERO         ０埋めモード
               - F_BORDER_VALUE        一定値モード
               - F_BORDER_CONTINUOUS   端延長モード
               - F_BORDER_REPEAT       繰り返しモード
               - F_BORDER_MIRROR1      反転モード１
               - F_BORDER_MIRROR2      反転モード２
    - [in]  border_val   ボーダー濃度値.
                              border_mode が F_BORDER_VALUE の場合のみ使用されます.
                             その他のモードの場合、この値は無視されます.

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_maxMxN(hsrc, hdst, size_m, size_n, border_mode, border_val)

def fnFIE_cyclic_averageMxN(hsrc, hdst, lower, upper, size_m, size_n, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_cyclic_averageMxN( FHANDLE hsrc, FHANDLE hdst, DOUBLE lower, DOUBLE upper, INT size_m, INT size_n, INT border_mode, DOUBLE border_value )
    画素値の周期性を考慮した平滑化フィルタ(M×N)

    Params:
    - [in]  hsrc          入力画像 ( type: uc8, s16, us16, double )
    - [out] hdst          出力画像 ( type: uc8, s16, us16, double )
    - [in]  lower         出力画像の値域の下限
    - [in]  upper         出力画像の値域の上限。画素値の周期は(  upper -  lower )となる
    - [in]  size_m        フィルタの幅M（水平方向 1以上画像幅以下の奇数）
    - [in]  size_n        フィルタの高さN（垂直方向 1以上画像高さ以下の奇数）
    - [in]  border_mode   ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in]  border_value  ボーダー濃度値。
                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cyclic_averageMxN(hsrc, hdst, lower, upper, size_m=11, size_n=11, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_cyclic_averageMxN( FHANDLE hsrc, FHANDLE hdst, DOUBLE lower, DOUBLE upper, INT size_m, INT size_n, INT border_mode, DOUBLE border_value )
    画素値の周期性を考慮した平滑化フィルタ(M×N)

    Params:
    - [in]  hsrc          入力画像 ( type: uc8, s16, us16, double )
    - [out] hdst          出力画像 ( type: uc8, s16, us16, double )
    - [in]  lower         出力画像の値域の下限
    - [in]  upper         出力画像の値域の上限。画素値の周期は(  upper -  lower )となる
    - [in]  size_m        フィルタの幅M（水平方向 1以上画像幅以下の奇数）
    - [in]  size_n        フィルタの高さN（垂直方向 1以上画像高さ以下の奇数）
    - [in]  border_mode   ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in]  border_value  ボーダー濃度値。
                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cyclic_averageMxN(hsrc, hdst, lower, upper, size_m, size_n, border_mode, border_value)

def fnFIE_meanshift_filter(hsrc, hdst, hs, hr, max_iter, tol_coef) -> Any:
    r"""INT FVALGAPI fnFIE_meanshift_filter( FHANDLE hsrc, FHANDLE hdst, DOUBLE hs, DOUBLE hr, INT max_iter, DOUBLE tol_coef )
    Mean-Shift 法による平滑化フィルタ

    Params:
    - [in]  hsrc        入力画像( type: uc8, s16, us16, double )
    - [out] hdst        出力画像( type: uc8, s16, us16, double )
    - [in]  hs          空間軸におけるカーネル幅( 単位 : pixel, 1.0 ≦ hs )
    - [in]  hr          色空間軸におけるカーネル幅( 単位 : 濃度, 0 < hr )
    - [in]  max_iter    最大の反復数( 1 ≦ max_iter )
    - [in]  tol_coef    収束許容値の係数( 0 ≦ tol_coef )

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def meanshift_filter(hsrc, hdst, hs=3.0, hr=100, max_iter=5, tol_coef=0.1):
    r"""INT FVALGAPI fnFIE_meanshift_filter( FHANDLE hsrc, FHANDLE hdst, DOUBLE hs, DOUBLE hr, INT max_iter, DOUBLE tol_coef )
    Mean-Shift 法による平滑化フィルタ

    Params:
    - [in]  hsrc        入力画像( type: uc8, s16, us16, double )
    - [out] hdst        出力画像( type: uc8, s16, us16, double )
    - [in]  hs          空間軸におけるカーネル幅( 単位 : pixel, 1.0 ≦ hs )
    - [in]  hr          色空間軸におけるカーネル幅( 単位 : 濃度, 0 < hr )
    - [in]  max_iter    最大の反復数( 1 ≦ max_iter )
    - [in]  tol_coef    収束許容値の係数( 0 ≦ tol_coef )

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_meanshift_filter(hsrc, hdst, hs, hr, max_iter, tol_coef)

def fnFIE_trimmed_averageMxN(hsrc, hdst, size_m, size_n, rate_high, rate_low, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_trimmed_averageMxN( FHANDLE hsrc, FHANDLE hdst, INT size_m, INT size_n, DOUBLE rate_high, DOUBLE rate_low, INT border_mode, DOUBLE border_value )
    中間項平均化フィルタ(MxN)

    Params:
    - [in] hsrc             入力画像 ( type: uc8 )
    - [out] hdst            出力画像 ( type: uc8 )
    - [in] size_m           フィルタの幅( 水平方向  1以上画像幅以下の奇数)
    - [in] size_n           フィルタの高さ( 垂直方向 1以上画像高さ以下の奇数)
    - [in] rate_high        濃度値が大きい側の割合( 0 <= rate_high < 1.0 )
    - [in] rate_low         濃度値が小さい側の割合( 0 <= rate_low < 1.0 )
    - [in] border_mode      ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] border_value     ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def trimmed_averageMxN(hsrc, hdst, size_m=11, size_n=11, rate_high=0.25, rate_low=0.25, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_trimmed_averageMxN( FHANDLE hsrc, FHANDLE hdst, INT size_m, INT size_n, DOUBLE rate_high, DOUBLE rate_low, INT border_mode, DOUBLE border_value )
    中間項平均化フィルタ(MxN)

    Params:
    - [in] hsrc             入力画像 ( type: uc8 )
    - [out] hdst            出力画像 ( type: uc8 )
    - [in] size_m           フィルタの幅( 水平方向  1以上画像幅以下の奇数)
    - [in] size_n           フィルタの高さ( 垂直方向 1以上画像高さ以下の奇数)
    - [in] rate_high        濃度値が大きい側の割合( 0 <= rate_high < 1.0 )
    - [in] rate_low         濃度値が小さい側の割合( 0 <= rate_low < 1.0 )
    - [in] border_mode      ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] border_value     ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_trimmed_averageMxN(hsrc, hdst, size_m, size_n, rate_high, rate_low, border_mode, border_value)

def fnFIE_replace_nan(hsrc, hdst, val) -> Any:
    r"""INT FVALGAPI fnFIE_replace_nan( FHANDLE hsrc, FHANDLE hdst, DOUBLE val )
    NaN( 非数 )を数値に置き換える

    Params:
    - [in]  hsrc    入力画像ハンドル(  type: double, float )
    - [out] hdst    出力画像ハンドル(  type: double, float )
    - [in]  val     NaNを置き換える数値
                    - DOUBLE型で入力されます。
                    - 対象画像のタイプが F_IMG_FLOAT の場合は単純キャストされます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def replace_nan(hsrc, hdst, val=0):
    r"""INT FVALGAPI fnFIE_replace_nan( FHANDLE hsrc, FHANDLE hdst, DOUBLE val )
    NaN( 非数 )を数値に置き換える

    Params:
    - [in]  hsrc    入力画像ハンドル(  type: double, float )
    - [out] hdst    出力画像ハンドル(  type: double, float )
    - [in]  val     NaNを置き換える数値
                    - DOUBLE型で入力されます。
                    - 対象画像のタイプが F_IMG_FLOAT の場合は単純キャストされます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_replace_nan(hsrc, hdst, val)

def fnFIE_replace_inf(hsrc, hdst, pval, mval) -> Any:
    r"""INT FVALGAPI fnFIE_replace_inf( FHANDLE hsrc, FHANDLE hdst, DOUBLE pval, DOUBLE mval )
    Inf(無限大)を数値に置き換える

    Params:
    - [in]  hsrc    入力画像ハンドル( type: double, float)
    - [out] hdst    出力画像ハンドル( type: double, float)
    - [in]  pval    +Infを置き換える数値
                    - DOUBLE型で入力されます。
                    - 対象画像のタイプが F_IMG_FLOAT の場合は単純キャストされます。
                    - pval >= mval でなければなりません。
    - [in]  mval    -Infを置き換える数値
                    - DOUBLE型で入力されます。
                    - 対象画像のタイプが F_IMG_FLOAT の場合は単純キャストされます。
                    - pval >= mval でなければなりません。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_PARAM  パラメータエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def replace_inf(hsrc, hdst, pval=0, mval=0):
    r"""INT FVALGAPI fnFIE_replace_inf( FHANDLE hsrc, FHANDLE hdst, DOUBLE pval, DOUBLE mval )
    Inf(無限大)を数値に置き換える

    Params:
    - [in]  hsrc    入力画像ハンドル( type: double, float)
    - [out] hdst    出力画像ハンドル( type: double, float)
    - [in]  pval    +Infを置き換える数値
                    - DOUBLE型で入力されます。
                    - 対象画像のタイプが F_IMG_FLOAT の場合は単純キャストされます。
                    - pval >= mval でなければなりません。
    - [in]  mval    -Infを置き換える数値
                    - DOUBLE型で入力されます。
                    - 対象画像のタイプが F_IMG_FLOAT の場合は単純キャストされます。
                    - pval >= mval でなければなりません。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_PARAM  パラメータエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_replace_inf(hsrc, hdst, pval, mval)

def fnFIE_wiener(hsrc, hdst, kernel, gamma) -> Any:
    r"""INT FVALGAPI fnFIE_wiener( FHANDLE hsrc, FHANDLE hdst, F_FILTER_KERNEL_T* kernel, DOUBLE gamma )
    ウィーナフィルタによる画像復元

    Params:
    - [in]  hsrc         入力画像 (type: uc8, s16, us16, double)
    - [out] hdst         出力画像 (type: uc8, s16, us16, double)
    - [in]  kernel       カーネル指定構造体のポインタ
    - [in]  gamma        復元力とノイズ量のバランスを取るための係数（0以上）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータエラー
    - F_ERR_INVALID_IMAGE  不正な画像が渡された(入力と出力が合わない等)
    - F_ERR_NOMEMORY       メモリ不足により異常終了
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def wiener(hsrc, hdst, kernel, gamma=0.001):
    r"""INT FVALGAPI fnFIE_wiener( FHANDLE hsrc, FHANDLE hdst, F_FILTER_KERNEL_T* kernel, DOUBLE gamma )
    ウィーナフィルタによる画像復元

    Params:
    - [in]  hsrc         入力画像 (type: uc8, s16, us16, double)
    - [out] hdst         出力画像 (type: uc8, s16, us16, double)
    - [in]  kernel       カーネル指定構造体のポインタ
    - [in]  gamma        復元力とノイズ量のバランスを取るための係数（0以上）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータエラー
    - F_ERR_INVALID_IMAGE  不正な画像が渡された(入力と出力が合わない等)
    - F_ERR_NOMEMORY       メモリ不足により異常終了
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_wiener(hsrc, hdst, kernel, gamma)

def fnFIE_DoA_2Dfilter(hsrc, hdst, size_m0, size_n0, size_m1, size_n1, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_DoA_2Dfilter( FHANDLE hsrc, FHANDLE hdst, INT size_m0, INT size_n0, INT size_m1, INT size_n1, INT border_mode, DOUBLE value )
    Difference of Average filter

    Params:
    - [in]      hsrc        入力画像 ( type: uc8, s16, us16, double, rgbq )
    - [out]     hdst        出力画像 ( type: uc8, s16, us16, double, rgbq )
    - [in]      size_m0     フィルタ幅（ 水平方向 1以上画像幅以下の奇数 ）
    - [in]      size_n0     フィルタ高さ ( 垂直方向 1以上画像幅以下の奇数 )
    - [in]      size_m1     フィルタ幅（ 水平方向 1以上画像幅以下の奇数 ）
    - [in]      size_n1     フィルタ高さ ( 垂直方向 1以上画像幅以下の奇数 )
    - [in]      border_mode     ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] value            ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def DoA_2Dfilter(hsrc, hdst, size_m0, size_n0, size_m1, size_n1, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_DoA_2Dfilter( FHANDLE hsrc, FHANDLE hdst, INT size_m0, INT size_n0, INT size_m1, INT size_n1, INT border_mode, DOUBLE value )
    Difference of Average filter

    Params:
    - [in]      hsrc        入力画像 ( type: uc8, s16, us16, double, rgbq )
    - [out]     hdst        出力画像 ( type: uc8, s16, us16, double, rgbq )
    - [in]      size_m0     フィルタ幅（ 水平方向 1以上画像幅以下の奇数 ）
    - [in]      size_n0     フィルタ高さ ( 垂直方向 1以上画像幅以下の奇数 )
    - [in]      size_m1     フィルタ幅（ 水平方向 1以上画像幅以下の奇数 ）
    - [in]      size_n1     フィルタ高さ ( 垂直方向 1以上画像幅以下の奇数 )
    - [in]      border_mode     ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] value            ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_DoA_2Dfilter(hsrc, hdst, size_m0, size_n0, size_m1, size_n1, border_mode, value)

def fnFIE_DoM_2Dfilter(hsrc, hdst, size_m0, size_n0, size_m1, size_n1, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_DoM_2Dfilter( FHANDLE hsrc, FHANDLE hdst, INT size_m0, INT size_n0, INT size_m1, INT size_n1, INT border_mode, DOUBLE value )
    Difference of Median filter

    Params:
    - [in]      hsrc        入力画像 ( type: uc8, s16, us16, double )
    - [out]     hdst        出力画像 ( type: uc8, s16, us16, double )
    - [in]      size_m0     フィルタ幅（ 水平方向 1以上で253,画像幅以下の奇数 ）
    - [in]      size_n0     フィルタ高さ ( 垂直方向 1以上で253,画像幅以下の奇数 )
    - [in]      size_m1     フィルタ幅（ 水平方向 1以上で253,画像幅以下の奇数 ）
    - [in]      size_n1     フィルタ高さ ( 垂直方向 1以上で253,画像幅以下の奇数 )
    - [in]      border_mode     ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] value            ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """
    raise NotImplementedError

def DoM_2Dfilter(hsrc, hdst, size_m0, size_n0, size_m1, size_n1, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_DoM_2Dfilter( FHANDLE hsrc, FHANDLE hdst, INT size_m0, INT size_n0, INT size_m1, INT size_n1, INT border_mode, DOUBLE value )
    Difference of Median filter

    Params:
    - [in]      hsrc        入力画像 ( type: uc8, s16, us16, double )
    - [out]     hdst        出力画像 ( type: uc8, s16, us16, double )
    - [in]      size_m0     フィルタ幅（ 水平方向 1以上で253,画像幅以下の奇数 ）
    - [in]      size_n0     フィルタ高さ ( 垂直方向 1以上で253,画像幅以下の奇数 )
    - [in]      size_m1     フィルタ幅（ 水平方向 1以上で253,画像幅以下の奇数 ）
    - [in]      size_n1     フィルタ高さ ( 垂直方向 1以上で253,画像幅以下の奇数 )
    - [in]      border_mode     ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] value            ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクト
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラーまたは未初期化エラー
    """

    return _fie.fnFIE_DoM_2Dfilter(hsrc, hdst, size_m0, size_n0, size_m1, size_n1, border_mode, value)

def fnFIE_lut_convert(hSrc, hDst, iaConvertTable, uiTableSize) -> Any:
    r"""INT FVALGAPI fnFIE_lut_convert( const FHANDLE hSrc, FHANDLE hDst, const INT* iaConvertTable, const UINT uiTableSize )
    ルックアップテーブルによる濃度変換フィルタ

    Params:
    - [in]  hSrc            被処理画像ハンドル(type: uc8, us16, s16)
    - [out] hDst            処理後画像ハンドル(type: uc8, us16, s16)
    - [in]  iaConvertTable  濃度テーブル
    - [in]  uiTableSize     濃度テーブルサイズ

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
                                もしくは、入出力の画像サイズが違う、など
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def lut_convert(hSrc, hDst, iaConvertTable, uiTableSize):
    r"""INT FVALGAPI fnFIE_lut_convert( const FHANDLE hSrc, FHANDLE hDst, const INT* iaConvertTable, const UINT uiTableSize )
    ルックアップテーブルによる濃度変換フィルタ

    Params:
    - [in]  hSrc            被処理画像ハンドル(type: uc8, us16, s16)
    - [out] hDst            処理後画像ハンドル(type: uc8, us16, s16)
    - [in]  iaConvertTable  濃度テーブル
    - [in]  uiTableSize     濃度テーブルサイズ

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
                                もしくは、入出力の画像サイズが違う、など
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_lut_convert(hSrc, hDst, iaConvertTable, uiTableSize)

def fnFIE_lut_convert_ch(hSrc, hDst, ppiConvertTable, uiTableSize) -> Any:
    r"""INT FVALGAPI fnFIE_lut_convert_ch( const FHANDLE hSrc, FHANDLE hDst, const INT** ppiConvertTable, const UINT uiTableSize )
    ルックアップテーブルによる濃度変換フィルタ（チャネル別）

    Params:
    - [in]  hSrc                被処理画像ハンドル(type: uc8, us16, s16, rgbq)
    - [out] hDst                処理後画像ハンドル(type: uc8, us16, s16, rgbq)
    - [in]  ppiConvertTable     濃度テーブル
    - [in]  uiTableSize         濃度テーブルサイズ

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
                                もしくは、入出力の画像サイズが違う、など
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NOMEMOY     メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def lut_convert_ch(hSrc, hDst, ppiConvertTable, uiTableSize):
    r"""INT FVALGAPI fnFIE_lut_convert_ch( const FHANDLE hSrc, FHANDLE hDst, const INT** ppiConvertTable, const UINT uiTableSize )
    ルックアップテーブルによる濃度変換フィルタ（チャネル別）

    Params:
    - [in]  hSrc                被処理画像ハンドル(type: uc8, us16, s16, rgbq)
    - [out] hDst                処理後画像ハンドル(type: uc8, us16, s16, rgbq)
    - [in]  ppiConvertTable     濃度テーブル
    - [in]  uiTableSize         濃度テーブルサイズ

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
                                もしくは、入出力の画像サイズが違う、など
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NOMEMOY     メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_lut_convert_ch(hSrc, hDst, ppiConvertTable, uiTableSize)

def fnFIE_lut_set_gamma(uiInImageType, uiOutImageType, dGamma, ppiConvertTable, puiTableSize) -> Any:
    r"""INT FVALGAPI fnFIE_lut_set_gamma( const UINT uiInImageType, const UINT uiOutImageType, const DOUBLE dGamma, INT** ppiConvertTable, UINT* puiTableSize )
    ガンマ変換用ルックアップテーブルの作成

    Params:
    - [in]  uiInImageType   入力画像タイプ(入力値：F_IMG_UC8, F_IMG_US16, F_IMG_S16)
    - [in]  uiOutImageType  出力画像タイプ(入力値：F_IMG_UC8, F_IMG_US16, F_IMG_S16)
    - [in]  dGamma          ガンマ値(0 < dGamma)
    - [out] ppiConvertTable 濃度値テーブル先頭アドレスへのポインタ
                                関数エントリー時 *ppiConvertTable はNULLでなければなりません。
    - [out] puiTableSize    濃度値テーブルサイズ

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NOMEMORY        メモリ確保に失敗した
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def lut_set_gamma(uiInImageType, uiOutImageType, dGamma, ppiConvertTable, puiTableSize):
    r"""INT FVALGAPI fnFIE_lut_set_gamma( const UINT uiInImageType, const UINT uiOutImageType, const DOUBLE dGamma, INT** ppiConvertTable, UINT* puiTableSize )
    ガンマ変換用ルックアップテーブルの作成

    Params:
    - [in]  uiInImageType   入力画像タイプ(入力値：F_IMG_UC8, F_IMG_US16, F_IMG_S16)
    - [in]  uiOutImageType  出力画像タイプ(入力値：F_IMG_UC8, F_IMG_US16, F_IMG_S16)
    - [in]  dGamma          ガンマ値(0 < dGamma)
    - [out] ppiConvertTable 濃度値テーブル先頭アドレスへのポインタ
                                関数エントリー時 *ppiConvertTable はNULLでなければなりません。
    - [out] puiTableSize    濃度値テーブルサイズ

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NOMEMORY        メモリ確保に失敗した
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_lut_set_gamma(uiInImageType, uiOutImageType, dGamma, ppiConvertTable, puiTableSize)

def fnFIE_gamma_convert(hSrc, hDst, dGamma) -> Any:
    r"""INT FVALGAPI fnFIE_gamma_convert( const FHANDLE, FHANDLE, const DOUBLE )
    ガンマ変換フィルタ

    Params:
    - [in]  hSrc    被処理画像（type: uc8, us16, s16）
    - [out] hDst    処理後画像（type: uc8, us16, s16）
    - [in]  dGamma  ガンマ値（dGamma > 0）

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
                                もしくは、入出力の画像サイズが違う、など
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gamma_convert(hSrc, hDst, dGamma=1.0):
    r"""INT FVALGAPI fnFIE_gamma_convert( const FHANDLE, FHANDLE, const DOUBLE )
    ガンマ変換フィルタ

    Params:
    - [in]  hSrc    被処理画像（type: uc8, us16, s16）
    - [out] hDst    処理後画像（type: uc8, us16, s16）
    - [in]  dGamma  ガンマ値（dGamma > 0）

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
                                もしくは、入出力の画像サイズが違う、など
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gamma_convert(hSrc, hDst, dGamma)

def fnFIE_nms_canny(hMagX, hMagY, hMag, dTLow, dTHigh, ushpTLow, ushpTHigh) -> Any:
    r"""INT FVALGAPI fnFIE_nms_canny( FHANDLE hMagX, FHANDLE hMagY, FHANDLE hMag, DOUBLE dTLow, DOUBLE dTHigh, USHORT* ushpTLow, USHORT* ushpTHigh )
    非極大値の抑制（Canny 法によるエッジ検出で利用）

    Params:
    - [in]  hMagX       X方向のエッジ勾配強度画像 ( type: s16 )
    - [in]  hMagY       Y方向のエッジ勾配強度画像 ( type: s16 )
    - [out] hMag        エッジ勾配強度画像 (type: us16)
    - [in]  dTLow       ピクセル数の下限方向の割合を決定するための閾値
    - [in]  dTHigh      ピクセル数の上限方向の割合を決定するための閾値
                        - 0 <  dTLow < 1.0 && 0 <  dTHigh < 1.0
                        -  dTLow <  dTHigh or  dTLow ==  dTHigh == 0.0
    - [out] ushpTLow     dTLow から得られた下限閾値
    - [out] ushpTHigh    dTHigh から得られた上限閾値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - (  dTHigh <=  dTLow && (  dTHigh != 0.0 &&  dTLow != 0.0 ) ) or
                                    (  dTHigh >= 1 ||  dTLow >= 1 ||  dTHigh < 0 ||  dTLow < 0 )
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
                                - 各画像のサイズが違う(縦横サイズ、チャネル数)
                                   - 不正な画像が渡された
                                   - 画像横縦サイズはいずれが3以下
                                   - 画像のチャネル数は1以上
    - F_ERR_NOMEMORY            バッファーメモリ配分失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def nms_canny(hMagX, hMagY, hMag, dTLow=0.0, dTHigh=0.0, ushpTLow=REQUIRED_PLACEHOLDER, ushpTHigh=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_nms_canny( FHANDLE hMagX, FHANDLE hMagY, FHANDLE hMag, DOUBLE dTLow, DOUBLE dTHigh, USHORT* ushpTLow, USHORT* ushpTHigh )
    非極大値の抑制（Canny 法によるエッジ検出で利用）

    Params:
    - [in]  hMagX       X方向のエッジ勾配強度画像 ( type: s16 )
    - [in]  hMagY       Y方向のエッジ勾配強度画像 ( type: s16 )
    - [out] hMag        エッジ勾配強度画像 (type: us16)
    - [in]  dTLow       ピクセル数の下限方向の割合を決定するための閾値
    - [in]  dTHigh      ピクセル数の上限方向の割合を決定するための閾値
                        - 0 <  dTLow < 1.0 && 0 <  dTHigh < 1.0
                        -  dTLow <  dTHigh or  dTLow ==  dTHigh == 0.0
    - [out] ushpTLow     dTLow から得られた下限閾値
    - [out] ushpTHigh    dTHigh から得られた上限閾値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - (  dTHigh <=  dTLow && (  dTHigh != 0.0 &&  dTLow != 0.0 ) ) or
                                    (  dTHigh >= 1 ||  dTLow >= 1 ||  dTHigh < 0 ||  dTLow < 0 )
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
                                - 各画像のサイズが違う(縦横サイズ、チャネル数)
                                   - 不正な画像が渡された
                                   - 画像横縦サイズはいずれが3以下
                                   - 画像のチャネル数は1以上
    - F_ERR_NOMEMORY            バッファーメモリ配分失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if ushpTLow is REQUIRED_PLACEHOLDER: raise TypeError("argument 'ushpTLow' is missing")
    if ushpTHigh is REQUIRED_PLACEHOLDER: raise TypeError("argument 'ushpTHigh' is missing")
    return _fie.fnFIE_nms_canny(hMagX, hMagY, hMag, dTLow, dTHigh, ushpTLow, ushpTHigh)

def fnFIE_nms(hMagX, hMagY, hMag, dThresh) -> Any:
    r"""INT FVALGAPI fnFIE_nms( FHANDLE hMagX, FHANDLE hMagY, FHANDLE hMag, DOUBLE dThresh )
    非極大値の抑制（エッジ勾配を利用）

    Params:
    - [in]  hMagX       X方向のエッジ勾配強度画像 (type: s16, double )
    - [in]  hMagY       Y方向のエッジ勾配強度画像 (type: s16, double )
    - [out] hMag        エッジ勾配強度画像 (type: us16, double )
                        -  hMagX と  hMagY が S16 型の場合、  hMag は US16 型 または DOUBLE 型となる
                        -  hMagX と  hMagY が DOUBLE 型の場合、  hMag は DOUBLE 型となる
    - [in]  dThresh     非常に小さい勾配を取り除くための閾値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM        dThresh < 0
    - F_ERR_INVALID_IMAGE       各画像のサイズが違う、不正な画像が渡された
                                    画像サイズの横縦いずれかが3以下, 或いは (2^16 - 1) 以上
    - F_ERR_NOMEMORY            バッファーメモリ配分失敗
    - F_ERR_UNKNOWN         原因不明なエラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def nms(hMagX, hMagY, hMag, dThresh=1):
    r"""INT FVALGAPI fnFIE_nms( FHANDLE hMagX, FHANDLE hMagY, FHANDLE hMag, DOUBLE dThresh )
    非極大値の抑制（エッジ勾配を利用）

    Params:
    - [in]  hMagX       X方向のエッジ勾配強度画像 (type: s16, double )
    - [in]  hMagY       Y方向のエッジ勾配強度画像 (type: s16, double )
    - [out] hMag        エッジ勾配強度画像 (type: us16, double )
                        -  hMagX と  hMagY が S16 型の場合、  hMag は US16 型 または DOUBLE 型となる
                        -  hMagX と  hMagY が DOUBLE 型の場合、  hMag は DOUBLE 型となる
    - [in]  dThresh     非常に小さい勾配を取り除くための閾値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM        dThresh < 0
    - F_ERR_INVALID_IMAGE       各画像のサイズが違う、不正な画像が渡された
                                    画像サイズの横縦いずれかが3以下, 或いは (2^16 - 1) 以上
    - F_ERR_NOMEMORY            バッファーメモリ配分失敗
    - F_ERR_UNKNOWN         原因不明なエラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_nms(hMagX, hMagY, hMag, dThresh)

def fnFIE_nms_simple(hSrc, hTar, iBrdMod, dBrdVal) -> Any:
    r"""INT FVALGAPI fnFIE_nms_simple( FHANDLE hSrc, FHANDLE hTar, INT iBrdMod, DOUBLE dBrdVal )
    非極大値の抑制 単純

    Params:
    - [in]  hSrc    入力画像 (uc8, s16, us16, double)
    - [out] hTar    出力画像 (uc8, s16, us16, double)
    - [in]  iBrdMod ボーダー処理モード
                    - F_BORDER_NONE             ボーダー処理無し
                    - F_BORDER_ZERO             ０埋めモード
                    - F_BORDER_VALUE            一定値モード
                    - F_BORDER_CONTINUOUS       端延長モード
                    - F_BORDER_REPEAT       繰り返しモード
                    - F_BORDER_MIRROR1      反転モード１
                    - F_BORDER_MIRROR2      反転モード２
    - [in]  dBrdVal ボーダー濃度値
                         iBrdMod がF_BORDER_VALUEの場合のみ使用されます。
                        その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なボーダー処理モードが渡された
    - F_ERR_INVALID_IMAGE       各画像のサイズが違う、不正な画像が渡された
    - F_ERROR_NOMEMORY      メモリー不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def nms_simple(hSrc, hTar, iBrdMod=F_BORDER_CONTINUOUS, dBrdVal=0):
    r"""INT FVALGAPI fnFIE_nms_simple( FHANDLE hSrc, FHANDLE hTar, INT iBrdMod, DOUBLE dBrdVal )
    非極大値の抑制 単純

    Params:
    - [in]  hSrc    入力画像 (uc8, s16, us16, double)
    - [out] hTar    出力画像 (uc8, s16, us16, double)
    - [in]  iBrdMod ボーダー処理モード
                    - F_BORDER_NONE             ボーダー処理無し
                    - F_BORDER_ZERO             ０埋めモード
                    - F_BORDER_VALUE            一定値モード
                    - F_BORDER_CONTINUOUS       端延長モード
                    - F_BORDER_REPEAT       繰り返しモード
                    - F_BORDER_MIRROR1      反転モード１
                    - F_BORDER_MIRROR2      反転モード２
    - [in]  dBrdVal ボーダー濃度値
                         iBrdMod がF_BORDER_VALUEの場合のみ使用されます。
                        その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なボーダー処理モードが渡された
    - F_ERR_INVALID_IMAGE       各画像のサイズが違う、不正な画像が渡された
    - F_ERROR_NOMEMORY      メモリー不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_nms_simple(hSrc, hTar, iBrdMod, dBrdVal)

def fnFIE_hysteresis_rle_uf(hMag, dTHigh, dTLow, uiNoiseEdge, hImg) -> Any:
    r"""INT FVALGAPI fnFIE_hysteresis_rle_uf( FHANDLE hMag, DOUBLE dTHigh, DOUBLE dTLow, UINT uiNoiseEdge, FHANDLE hImg )
    ヒステリシス特性による２値化（ランレングスを利用したアルゴリズム）

    Params:
    - [in]  hMag            エッジ勾配強度画像(type: uc8, s16, us16, double)
    - [in]  dTHigh          閾値の上限
    - [in]  dTLow           閾値の下限
    - [in]  uiNoiseEdge     ノイズとみなすエッジの最大面積
                                 uiNoiseEdge より小さなエッジはノイズとみなし、削除される
    - [out] hImg            出力画像(type: uc8, bin)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  dTLow 、または  dTHigh が入力画像のダイナミックレンジを越えている
                                -  dTLow >  dTHigh
    - F_ERR_INVALID_IMAGE       各画像のサイズが違う、不正な画像が渡された \
                                    画像サイズの横縦いずれかが3以下, 或いは (2^16 - 1) 以上
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def hysteresis_rle_uf(hMag, dTHigh=150, dTLow=100, uiNoiseEdge=1, hImg=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_hysteresis_rle_uf( FHANDLE hMag, DOUBLE dTHigh, DOUBLE dTLow, UINT uiNoiseEdge, FHANDLE hImg )
    ヒステリシス特性による２値化（ランレングスを利用したアルゴリズム）

    Params:
    - [in]  hMag            エッジ勾配強度画像(type: uc8, s16, us16, double)
    - [in]  dTHigh          閾値の上限
    - [in]  dTLow           閾値の下限
    - [in]  uiNoiseEdge     ノイズとみなすエッジの最大面積
                                 uiNoiseEdge より小さなエッジはノイズとみなし、削除される
    - [out] hImg            出力画像(type: uc8, bin)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  dTLow 、または  dTHigh が入力画像のダイナミックレンジを越えている
                                -  dTLow >  dTHigh
    - F_ERR_INVALID_IMAGE       各画像のサイズが違う、不正な画像が渡された \
                                    画像サイズの横縦いずれかが3以下, 或いは (2^16 - 1) 以上
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if hImg is REQUIRED_PLACEHOLDER: raise TypeError("argument 'hImg' is missing")
    return _fie.fnFIE_hysteresis_rle_uf(hMag, dTHigh, dTLow, uiNoiseEdge, hImg)

def fnFIE_hysteresis_stack_us16(hMag, ushTHigh, ushTLow, hImg) -> Any:
    r"""INT FVALGAPI fnFIE_hysteresis_stack_us16( FHANDLE hMag, USHORT ushTHigh, USHORT ushTLow, FHANDLE hImg )
    ヒステリシス２値化（スタックを利用したアルゴリズム）

    Params:
    - [in]  hMag        エッジ勾配強度画像 (type: us16 / ch: 1 )
    - [in]  ushTLow     閾値の下限
    - [in]  ushTHigh    閾値の上限
    - [out] hImg        出力画像 ( type: uc8 / ch: 1 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM        ushTHigh <=  ushTLow;
    - F_ERR_INVALID_IMAGE       各画像のサイズが違う、不正な画像が渡された
    - F_ERR_NOMEMORY            バッファーメモリ配分失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def hysteresis_stack_us16(hMag, ushTHigh=150, ushTLow=100, hImg=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_hysteresis_stack_us16( FHANDLE hMag, USHORT ushTHigh, USHORT ushTLow, FHANDLE hImg )
    ヒステリシス２値化（スタックを利用したアルゴリズム）

    Params:
    - [in]  hMag        エッジ勾配強度画像 (type: us16 / ch: 1 )
    - [in]  ushTLow     閾値の下限
    - [in]  ushTHigh    閾値の上限
    - [out] hImg        出力画像 ( type: uc8 / ch: 1 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM        ushTHigh <=  ushTLow;
    - F_ERR_INVALID_IMAGE       各画像のサイズが違う、不正な画像が渡された
    - F_ERR_NOMEMORY            バッファーメモリ配分失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if hImg is REQUIRED_PLACEHOLDER: raise TypeError("argument 'hImg' is missing")
    return _fie.fnFIE_hysteresis_stack_us16(hMag, ushTHigh, ushTLow, hImg)

def fnFIE_edge_canny(hImgSrc, hImgOut, iTSwitch, dTHigh, dTLow, dSigma, uiMinLen) -> Any:
    r"""INT FVALGAPI fnFIE_edge_canny( FHANDLE hImgSrc, FHANDLE hImgOut, INT iTSwitch, DOUBLE dTHigh, DOUBLE dTLow, DOUBLE dSigma, UINT uiMinLen )
    Canny 法によるエッジ検出

    Params:
    - [in]  hImgSrc     入力画像 ( type: uc8 )
    - [out] hImgOut     出力画像 ( type: uc8 )
    - [in]  iTSwitch    閾値のタイプ指定
                        -  iTSwitch = 0 ：２つの閾値である割合が 0 <  threshold < 1
                        -  iTSwitch = 1 ：２つの閾値が任意の値
    - [in]  dTLow       閾値の下限
    - [in]  dTHigh      閾値の上限
                        - (  iTSwitch == 0 && 0 <  dTLow < 1 && 0 <  dTHigh < 1 ) の場合
                            指定する閾値は割合です
                        - (  iTSwitch == 1 &&  dTLow >= 0 &&  dTHigh > 0 ) の場合
                            指定する閾値は任意の値です
                            ２つの閾値ともに 2^16 より小さい値を指定してください
                        - (  iTSwitch == 0 &&  dTLow == 0 &&  dTHigh == 0 ) の場合
                             dTHigh（0.7） 、  dTLow（0.28）のデフォルト値が指定されます
    - [in]  dSigma      ガウシアンマスクのσ
    - [in]  uiMinLen    エッジの最小の長さ
                            この値より小さい孤立したエッジはノイズと判定して削除されます

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 不正な値の閾値
                                -  dSigma < 0.6
                                - 画像の幅、または高さが (INT)(6 *  dSigma + 2) より小さい
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
                                - 入力画像と出力画像のサイズが異なる
                                - 画像の幅、または高さが３より小さい
                                - 画像オブジェクトではないハンドルが渡された
                                - 画像のチャネルが１ではない
                                - 画像サイズが ( 3 *  dSigma + 1 ) * 2 より小さい
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge_canny(hImgSrc, hImgOut, iTSwitch=0, dTHigh=0.0, dTLow=0.0, dSigma=1.0, uiMinLen=1):
    r"""INT FVALGAPI fnFIE_edge_canny( FHANDLE hImgSrc, FHANDLE hImgOut, INT iTSwitch, DOUBLE dTHigh, DOUBLE dTLow, DOUBLE dSigma, UINT uiMinLen )
    Canny 法によるエッジ検出

    Params:
    - [in]  hImgSrc     入力画像 ( type: uc8 )
    - [out] hImgOut     出力画像 ( type: uc8 )
    - [in]  iTSwitch    閾値のタイプ指定
                        -  iTSwitch = 0 ：２つの閾値である割合が 0 <  threshold < 1
                        -  iTSwitch = 1 ：２つの閾値が任意の値
    - [in]  dTLow       閾値の下限
    - [in]  dTHigh      閾値の上限
                        - (  iTSwitch == 0 && 0 <  dTLow < 1 && 0 <  dTHigh < 1 ) の場合
                            指定する閾値は割合です
                        - (  iTSwitch == 1 &&  dTLow >= 0 &&  dTHigh > 0 ) の場合
                            指定する閾値は任意の値です
                            ２つの閾値ともに 2^16 より小さい値を指定してください
                        - (  iTSwitch == 0 &&  dTLow == 0 &&  dTHigh == 0 ) の場合
                             dTHigh（0.7） 、  dTLow（0.28）のデフォルト値が指定されます
    - [in]  dSigma      ガウシアンマスクのσ
    - [in]  uiMinLen    エッジの最小の長さ
                            この値より小さい孤立したエッジはノイズと判定して削除されます

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 不正な値の閾値
                                -  dSigma < 0.6
                                - 画像の幅、または高さが (INT)(6 *  dSigma + 2) より小さい
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
                                - 入力画像と出力画像のサイズが異なる
                                - 画像の幅、または高さが３より小さい
                                - 画像オブジェクトではないハンドルが渡された
                                - 画像のチャネルが１ではない
                                - 画像サイズが ( 3 *  dSigma + 1 ) * 2 より小さい
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_edge_canny(hImgSrc, hImgOut, iTSwitch, dTHigh, dTLow, dSigma, uiMinLen)

def fnFIE_harris_filter(fhSrc, fhDst, dSigma, dK) -> Any:
    r"""INT FVALGAPI fnFIE_harris_filter( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, DOUBLE dK )
    harris corner detection filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: double )
    - [in]  dSigma      式２のガウシアンフィルタのσ（0.6以上）
    - [in]  dK          式１のK

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def harris_filter(fhSrc, fhDst, dSigma=0.6, dK=0.04):
    r"""INT FVALGAPI fnFIE_harris_filter( FHANDLE fhSrc, FHANDLE fhDst, DOUBLE dSigma, DOUBLE dK )
    harris corner detection filter

    Params:
    - [in]  fhSrc       処理対象画像( type: uc8, s16, us16, double )
    - [out] fhDst       処理結果画像( type: double )
    - [in]  dSigma      式２のガウシアンフィルタのσ（0.6以上）
    - [in]  dK          式１のK

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_harris_filter(fhSrc, fhDst, dSigma, dK)

def fnFIE_steger_filter(hsrc, hdst, hdir, sigma, thresh, line_mode) -> Any:
    r"""INT FVALGAPI fnFIE_steger_filter( FHANDLE hsrc, FHANDLE hdst, FHANDLE hdir, DOUBLE sigma, DOUBLE thresh, INT line_mode )
    steger line/curve extraction filter

    Params:
    - [in]  hsrc        処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst        線強度画像( type: double )
    - [out] hdir        線角度画像( type: s16 )
    - [in]  sigma       ガウス微分時のσ（1.0以上)
    - [in]  thresh      線強度のしきい値(0.0以上)
    - [in]  line_mode   抽出する線の種類
                            - F_RIDGE_MODE      輝度が周囲画素よりも高い線
                            - F_VALLEY_MODE     輝度が周囲画素よりも低い線

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ異常(  sigma 異常、  line_mode 異常 )
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def steger_filter(hsrc, hdst, hdir, sigma=1.0, thresh=0.0, line_mode=F_RIDGE_MODE):
    r"""INT FVALGAPI fnFIE_steger_filter( FHANDLE hsrc, FHANDLE hdst, FHANDLE hdir, DOUBLE sigma, DOUBLE thresh, INT line_mode )
    steger line/curve extraction filter

    Params:
    - [in]  hsrc        処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst        線強度画像( type: double )
    - [out] hdir        線角度画像( type: s16 )
    - [in]  sigma       ガウス微分時のσ（1.0以上)
    - [in]  thresh      線強度のしきい値(0.0以上)
    - [in]  line_mode   抽出する線の種類
                            - F_RIDGE_MODE      輝度が周囲画素よりも高い線
                            - F_VALLEY_MODE     輝度が周囲画素よりも低い線

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ異常(  sigma 異常、  line_mode 異常 )
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_steger_filter(hsrc, hdst, hdir, sigma, thresh, line_mode)

def fnFIE_steger_filter_edges(hsrc, hdst, hdir, sigma, thresh, line_mode, edges, edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_steger_filter_edges( FHANDLE hsrc, FHANDLE hdst, FHANDLE hdir, DOUBLE sigma, DOUBLE thresh, INT line_mode, F_EDGE** edges, INT* edge_num )
    エッジ出力付きステガーフィルタ(ピクセル精度) 

    Params:
    - [in]  hsrc        処理対象画像( type: uc8, s16, us16, double / 1ch )
    - [out] hdst        線強度画像( type: double / 1ch )
    - [out] hdir        線角度画像( type: s16 / 1ch )
    - [in]  sigma       ガウス微分時のσ（1.0以上)
    - [in]  thresh      線強度のしきい値(0.0以上)
    - [in]  line_mode   抽出する線の種類
                            - F_RIDGE_MODE      輝度が周囲画素よりも高い線
                            - F_VALLEY_MODE     輝度が周囲画素よりも低い線
    - [out] edges       取得したエッジ
    - [out] edge_num    取得したエッジの数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   入力パラメータ異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def steger_filter_edges(hsrc, hdst, hdir, sigma=1.0, thresh=0.0, line_mode=F_RIDGE_MODE, edges=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_steger_filter_edges( FHANDLE hsrc, FHANDLE hdst, FHANDLE hdir, DOUBLE sigma, DOUBLE thresh, INT line_mode, F_EDGE** edges, INT* edge_num )
    エッジ出力付きステガーフィルタ(ピクセル精度) 

    Params:
    - [in]  hsrc        処理対象画像( type: uc8, s16, us16, double / 1ch )
    - [out] hdst        線強度画像( type: double / 1ch )
    - [out] hdir        線角度画像( type: s16 / 1ch )
    - [in]  sigma       ガウス微分時のσ（1.0以上)
    - [in]  thresh      線強度のしきい値(0.0以上)
    - [in]  line_mode   抽出する線の種類
                            - F_RIDGE_MODE      輝度が周囲画素よりも高い線
                            - F_VALLEY_MODE     輝度が周囲画素よりも低い線
    - [out] edges       取得したエッジ
    - [out] edge_num    取得したエッジの数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   画像オブジェクトの値エラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   入力パラメータ異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_steger_filter_edges(hsrc, hdst, hdir, sigma, thresh, line_mode, edges, edge_num)

def fnFIE_thinning_filter(hsrc, hdst, color_mode, iMode) -> Any:
    r"""INT FVALGAPI fnFIE_thinning_filter( FHANDLE hsrc, FHANDLE hdst, INT color_mode, INT iMode )
    細線化フィルタ

    Params:
    - [in]  hsrc        処理対象画像( type: bin )
    - [out] hdst        処理結果画像( type: bin )
    - [in]  color_mode  細線化する領域の色(0:値が0の領域を細線化、0以外:値が1の領域を細線化)
    - [in]  iMode       細線化アルゴリズム指定(0:hilditch,1:deutsch)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def thinning_filter(hsrc, hdst, color_mode=0, iMode=0):
    r"""INT FVALGAPI fnFIE_thinning_filter( FHANDLE hsrc, FHANDLE hdst, INT color_mode, INT iMode )
    細線化フィルタ

    Params:
    - [in]  hsrc        処理対象画像( type: bin )
    - [out] hdst        処理結果画像( type: bin )
    - [in]  color_mode  細線化する領域の色(0:値が0の領域を細線化、0以外:値が1の領域を細線化)
    - [in]  iMode       細線化アルゴリズム指定(0:hilditch,1:deutsch)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_thinning_filter(hsrc, hdst, color_mode, iMode)

def fnFIE_generate_noise_uniform(hsrcdst, low, high, seed) -> Any:
    r"""INT FVALGAPI fnFIE_generate_noise_uniform( FHANDLE hsrcdst, DOUBLE low, DOUBLE high, UINT seed )
    [OSS] ノイズ画像生成（uniform noise）

    Params:
    - [in,out]  hsrcdst 処理対象画像( type: double )
    - [in]      low     一様に分布する値の範囲の下限
    - [in]      high    一様に分布する値の範囲の上限
    - [in]      seed    擬似乱数ジェネレータの初期シード値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def generate_noise_uniform(hsrcdst, low=-10.0, high=10.0, seed=1):
    r"""INT FVALGAPI fnFIE_generate_noise_uniform( FHANDLE hsrcdst, DOUBLE low, DOUBLE high, UINT seed )
    [OSS] ノイズ画像生成（uniform noise）

    Params:
    - [in,out]  hsrcdst 処理対象画像( type: double )
    - [in]      low     一様に分布する値の範囲の下限
    - [in]      high    一様に分布する値の範囲の上限
    - [in]      seed    擬似乱数ジェネレータの初期シード値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_generate_noise_uniform(hsrcdst, low, high, seed)

def fnFIE_add_noise_uniform(hSrc, hDst, low, high, seed) -> Any:
    r"""INT FVALGAPI fnFIE_add_noise_uniform( FHANDLE hSrc, FHANDLE hDst, DOUBLE low, DOUBLE high, UINT seed )
    [OSS] uniform noise 付加フィルタ

    Params:
    - [in]      hSrc    処理対象画像( type: uc8, s16, us16, double, i32, ui32, float )
    - [out]     hDst    処理結果画像( type: uc8, s16, us16, double, i32, ui32, float  )
    - [in]      low     一様に分布する値の範囲の下限
    - [in]      high    一様に分布する値の範囲の上限
    - [in]      seed    擬似乱数ジェネレータの初期シード値

    Returns:
    - F_ERR_NONE    正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def add_noise_uniform(hSrc, hDst, low=-10.0, high=10.0, seed=1):
    r"""INT FVALGAPI fnFIE_add_noise_uniform( FHANDLE hSrc, FHANDLE hDst, DOUBLE low, DOUBLE high, UINT seed )
    [OSS] uniform noise 付加フィルタ

    Params:
    - [in]      hSrc    処理対象画像( type: uc8, s16, us16, double, i32, ui32, float )
    - [out]     hDst    処理結果画像( type: uc8, s16, us16, double, i32, ui32, float  )
    - [in]      low     一様に分布する値の範囲の下限
    - [in]      high    一様に分布する値の範囲の上限
    - [in]      seed    擬似乱数ジェネレータの初期シード値

    Returns:
    - F_ERR_NONE    正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_add_noise_uniform(hSrc, hDst, low, high, seed)

def fnFIE_generate_noise_gauss(hsrcdst, ave, var, seed) -> Any:
    r"""INT FVALGAPI fnFIE_generate_noise_gauss( FHANDLE hsrcdst, DOUBLE ave, DOUBLE var, UINT seed )
    [OSS] ノイズ画像生成（gauss noise）

    Params:
    - [in,out]  hsrcdst 処理対象画像( type: double )
    - [in]      ave     gauss分布の平均
    - [in]      var     gauss分布の分散(0.0より大きい値)
    - [in]      seed    擬似乱数ジェネレータの初期シード値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def generate_noise_gauss(hsrcdst, ave=0.0, var=10.0, seed=1):
    r"""INT FVALGAPI fnFIE_generate_noise_gauss( FHANDLE hsrcdst, DOUBLE ave, DOUBLE var, UINT seed )
    [OSS] ノイズ画像生成（gauss noise）

    Params:
    - [in,out]  hsrcdst 処理対象画像( type: double )
    - [in]      ave     gauss分布の平均
    - [in]      var     gauss分布の分散(0.0より大きい値)
    - [in]      seed    擬似乱数ジェネレータの初期シード値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_generate_noise_gauss(hsrcdst, ave, var, seed)

def fnFIE_add_noise_gauss(hSrc, hDst, ave, var, seed) -> Any:
    r"""INT FVALGAPI fnFIE_add_noise_gauss( FHANDLE hSrc, FHANDLE hDst, DOUBLE ave, DOUBLE var, UINT seed )
    [OSS] gauss noise 付加フィルタ

    Params:
    - [in]      hSrc    処理対象画像( type: uc8, s16, us16, double )
    - [out]     hDst    処理結果画像( type: uc8, s16, us16, double )
    - [in]      ave     gauss分布の平均
    - [in]      var     gauss分布の分散(0.0より大きい値)
    - [in]      seed    擬似乱数ジェネレータの初期シード値

    Returns:
    - F_ERR_NONE    正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def add_noise_gauss(hSrc, hDst, ave=0.0, var=10.0, seed=1):
    r"""INT FVALGAPI fnFIE_add_noise_gauss( FHANDLE hSrc, FHANDLE hDst, DOUBLE ave, DOUBLE var, UINT seed )
    [OSS] gauss noise 付加フィルタ

    Params:
    - [in]      hSrc    処理対象画像( type: uc8, s16, us16, double )
    - [out]     hDst    処理結果画像( type: uc8, s16, us16, double )
    - [in]      ave     gauss分布の平均
    - [in]      var     gauss分布の分散(0.0より大きい値)
    - [in]      seed    擬似乱数ジェネレータの初期シード値

    Returns:
    - F_ERR_NONE    正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_add_noise_gauss(hSrc, hDst, ave, var, seed)

def fnFIE_add_noise_salt_and_pepper(hSrc, hDst, salt_rate, salt_val, pepper_rate, pepper_val, seed) -> Any:
    r"""INT FVALGAPI fnFIE_add_noise_salt_and_pepper( FHANDLE hSrc, FHANDLE hDst, DOUBLE salt_rate, DOUBLE salt_val, DOUBLE pepper_rate, DOUBLE pepper_val, UINT seed )
    [OSS] salt-and-pepper noise 付加フィルタ

    Params:
    - [in]      hSrc        処理対象画像( type: bin, uc8, s16, us16, double )
    - [out]     hDst        処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]      salt_rate   saltの割合（ 0.0≦  salt_rate ≦1.0,  salt_rate +  pepper_rate ≦ 1.0 ）
    - [in]      salt_val    saltの値(  pepper_val ＜  salt_val )
    - [in]      pepper_rate pepperの割合（  0.0 ≦  pepper_rate ≦ 1.0,  salt_rate +  pepper_rate ≦ 1.0 ）
    - [in]      pepper_val  pepperの値(  pepper_val ＜  salt_val )
    - [in]      seed        擬似乱数ジェネレータの初期シード値

    Returns:
    - F_ERR_NONE    正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def add_noise_salt_and_pepper(hSrc, hDst, salt_rate, salt_val, pepper_rate, pepper_val, seed=1):
    r"""INT FVALGAPI fnFIE_add_noise_salt_and_pepper( FHANDLE hSrc, FHANDLE hDst, DOUBLE salt_rate, DOUBLE salt_val, DOUBLE pepper_rate, DOUBLE pepper_val, UINT seed )
    [OSS] salt-and-pepper noise 付加フィルタ

    Params:
    - [in]      hSrc        処理対象画像( type: bin, uc8, s16, us16, double )
    - [out]     hDst        処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]      salt_rate   saltの割合（ 0.0≦  salt_rate ≦1.0,  salt_rate +  pepper_rate ≦ 1.0 ）
    - [in]      salt_val    saltの値(  pepper_val ＜  salt_val )
    - [in]      pepper_rate pepperの割合（  0.0 ≦  pepper_rate ≦ 1.0,  salt_rate +  pepper_rate ≦ 1.0 ）
    - [in]      pepper_val  pepperの値(  pepper_val ＜  salt_val )
    - [in]      seed        擬似乱数ジェネレータの初期シード値

    Returns:
    - F_ERR_NONE    正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_add_noise_salt_and_pepper(hSrc, hDst, salt_rate, salt_val, pepper_rate, pepper_val, seed)

def fnFIE_morphology_se_alloc(ucpMask, size_x, size_y, step_x, anchor_x, anchor_y) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_morphology_se_alloc( UCHAR* ucpMask, INT size_x, INT size_y, INT step_x, INT anchor_x, INT anchor_y )
    構造要素オブジェクトの確保と構造要素の設定

    Params:
    - [in] ucpMask      構造要素の値を指定するマスクの先頭ポインタ
    - [in] size_x       マスク幅(1以上)
    - [in] size_y       マスク高さ(1以上)
    - [in] step_x       マスクメモリ横幅(UCHAR単位)
    - [in] anchor_x     構造要素のＸ方向アンカー位置( 0 ≦  anchor_x ＜  size_x )
    - [in] anchor_y     構造要素のＹ方向アンカー位置( 0 ≦  anchor_y ＜  size_y )

    Returns:
    - 確保された構造要素のハンドル
            メモリ不足で確保に失敗した場合や
            ライセンスエラー、または未初期化エラーが発生した場合はNULLを返します。
    """
    raise NotImplementedError

def morphology_se_alloc(ucpMask, size_x, size_y, step_x, anchor_x, anchor_y):
    r"""FHANDLE FVALGAPI fnFIE_morphology_se_alloc( UCHAR* ucpMask, INT size_x, INT size_y, INT step_x, INT anchor_x, INT anchor_y )
    構造要素オブジェクトの確保と構造要素の設定

    Params:
    - [in] ucpMask      構造要素の値を指定するマスクの先頭ポインタ
    - [in] size_x       マスク幅(1以上)
    - [in] size_y       マスク高さ(1以上)
    - [in] step_x       マスクメモリ横幅(UCHAR単位)
    - [in] anchor_x     構造要素のＸ方向アンカー位置( 0 ≦  anchor_x ＜  size_x )
    - [in] anchor_y     構造要素のＹ方向アンカー位置( 0 ≦  anchor_y ＜  size_y )

    Returns:
    - 確保された構造要素のハンドル
            メモリ不足で確保に失敗した場合や
            ライセンスエラー、または未初期化エラーが発生した場合はNULLを返します。
    """

    return _fie.fnFIE_morphology_se_alloc(ucpMask, size_x, size_y, step_x, anchor_x, anchor_y)

def fnFIE_morphology_se_init(hse, ucpMask, size_x, size_y, step_x, anchor_x, anchor_y) -> Any:
    r"""INT FVALGAPI fnFIE_morphology_se_init( FHANDLE hse, UCHAR* ucpMask, INT size_x, INT size_y, INT step_x, INT anchor_x, INT anchor_y )
    構造要素の設定

    Params:
    - [in,out] hse      設定する構造要素オブジェクトのハンドル
    - [in] ucpMask      構造要素の値を指定するマスクの先頭ポインタ
    - [in] size_x       マスク幅(1以上)
    - [in] size_y       マスク高さ(1以上)
    - [in] step_x       マスクメモリ横幅(UCHAR単位)
    - [in] anchor_x     構造要素のＸ方向アンカー位置( 0 ≦ anchor_x ＜ size_x )
    - [in] anchor_y     構造要素のＹ方向アンカー位置( 0 ≦ anchor_y ＜ size_y )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが渡されたため異常終了
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def morphology_se_init(hse, ucpMask, size_x, size_y, step_x, anchor_x, anchor_y):
    r"""INT FVALGAPI fnFIE_morphology_se_init( FHANDLE hse, UCHAR* ucpMask, INT size_x, INT size_y, INT step_x, INT anchor_x, INT anchor_y )
    構造要素の設定

    Params:
    - [in,out] hse      設定する構造要素オブジェクトのハンドル
    - [in] ucpMask      構造要素の値を指定するマスクの先頭ポインタ
    - [in] size_x       マスク幅(1以上)
    - [in] size_y       マスク高さ(1以上)
    - [in] step_x       マスクメモリ横幅(UCHAR単位)
    - [in] anchor_x     構造要素のＸ方向アンカー位置( 0 ≦ anchor_x ＜ size_x )
    - [in] anchor_y     構造要素のＹ方向アンカー位置( 0 ≦ anchor_y ＜ size_y )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが渡されたため異常終了
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_morphology_se_init(hse, ucpMask, size_x, size_y, step_x, anchor_x, anchor_y)

def fnFIE_morphology_se_free(hse) -> Any:
    r"""void fnFIE_morphology_se_free( FHANDLE hse )
    構造要素オブジェクトの解放

    Params:
    - [in] hse 解放する構造要素オブジェクトのハンドル

    Returns:
    """
    raise NotImplementedError

def morphology_se_free(hse):
    r"""void fnFIE_morphology_se_free( FHANDLE hse )
    構造要素オブジェクトの解放

    Params:
    - [in] hse 解放する構造要素オブジェクトのハンドル

    Returns:
    """

    return _fie.fnFIE_morphology_se_free(hse)

def fnFIE_morphology_se_copy_object(hse) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_morphology_se_copy_object( FHANDLE hse )
    構造要素オブジェクトのコピー

    Params:
    - [in] hse コピーする構造要素オブジェクトのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """
    raise NotImplementedError

def morphology_se_copy_object(hse):
    r"""FHANDLE FVALGAPI fnFIE_morphology_se_copy_object( FHANDLE hse )
    構造要素オブジェクトのコピー

    Params:
    - [in] hse コピーする構造要素オブジェクトのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """

    return _fie.fnFIE_morphology_se_copy_object(hse)

def fnFIE_morphology_get_params(hse, size_x, size_y, anchor_x, anchor_y) -> Any:
    r"""INT FVALGAPI fnFIE_morphology_get_params( FHANDLE hse, INT* size_x, INT* size_y, INT* anchor_x, INT* anchor_y )
    構造要素情報取得

    Params:
    - [in]  hse      情報を取得する構造要素のハンドル
    - [out] size_x   構造要素のＸ方向サイズ
    - [out] size_y   構造要素のＹ方向サイズ
    - [out] anchor_x 構造要素のＸ方向アンカー位置
    - [out] anchor_y 構造要素のＹ方向アンカー位置

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが渡されたため異常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def morphology_get_params(hse, size_x=None, size_y=None, anchor_x=None, anchor_y=None):
    r"""INT FVALGAPI fnFIE_morphology_get_params( FHANDLE hse, INT* size_x, INT* size_y, INT* anchor_x, INT* anchor_y )
    構造要素情報取得

    Params:
    - [in]  hse      情報を取得する構造要素のハンドル
    - [out] size_x   構造要素のＸ方向サイズ
    - [out] size_y   構造要素のＹ方向サイズ
    - [out] anchor_x 構造要素のＸ方向アンカー位置
    - [out] anchor_y 構造要素のＹ方向アンカー位置

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが渡されたため異常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_morphology_get_params(hse, size_x, size_y, anchor_x, anchor_y)

def fnFIE_morphology_get_mask(hse, mask, step_x) -> Any:
    r"""INT FVALGAPI fnFIE_morphology_get_mask( FHANDLE hse, UCHAR* mask, INT step_x )
    構造要素取得

    Params:
    - [in]  hse      情報を取得する構造要素のハンドル
    - [out] mask     構造要素のマスクパターンのコピー先
    - [in]  step_x   maskのメモリ幅（byte単位、構造要素のＸ方向サイズ以上）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが渡されたため異常終了
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def morphology_get_mask(hse, mask, step_x):
    r"""INT FVALGAPI fnFIE_morphology_get_mask( FHANDLE hse, UCHAR* mask, INT step_x )
    構造要素取得

    Params:
    - [in]  hse      情報を取得する構造要素のハンドル
    - [out] mask     構造要素のマスクパターンのコピー先
    - [in]  step_x   maskのメモリ幅（byte単位、構造要素のＸ方向サイズ以上）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが渡されたため異常終了
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_morphology_get_mask(hse, mask, step_x)

def fnFIE_morphology_set_anchor(hse, anchor_x, anchor_y) -> Any:
    r"""INT FVALGAPI fnFIE_morphology_set_anchor( FHANDLE hse, INT anchor_x, INT anchor_y )
    構造要素のアンカー位置変更

    Params:
    - [in,out] hse      構造要素のハンドル
    - [in] anchor_x     構造要素のＸ方向アンカー位置（ 0 ≦  anchor_x < 構造要素のＸ方向サイズ ）
    - [in] anchor_y     構造要素のＹ方向アンカー位置（ 0 ≦  anchor_y < 構造要素のＹ方向サイズ ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが渡されたため異常終了
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def morphology_set_anchor(hse, anchor_x, anchor_y):
    r"""INT FVALGAPI fnFIE_morphology_set_anchor( FHANDLE hse, INT anchor_x, INT anchor_y )
    構造要素のアンカー位置変更

    Params:
    - [in,out] hse      構造要素のハンドル
    - [in] anchor_x     構造要素のＸ方向アンカー位置（ 0 ≦  anchor_x < 構造要素のＸ方向サイズ ）
    - [in] anchor_y     構造要素のＹ方向アンカー位置（ 0 ≦  anchor_y < 構造要素のＹ方向サイズ ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが渡されたため異常終了
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_morphology_set_anchor(hse, anchor_x, anchor_y)

def fnFIE_create_box_se(size_x, size_y) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_create_box_se( INT size_x, INT size_y )
    BOX構造要素の作成

    Params:
    - [in] size_x   矩形の横方向長さ(1以上)
    - [in] size_y   矩形の縦方向長さ(1以上)

    Returns:
    - 確保された構造要素のハンドル
            メモリ不足で確保に失敗した場合や
            ライセンスエラー、または未初期化エラーが発生した場合はNULLを返します。
    """
    raise NotImplementedError

def create_box_se(size_x, size_y):
    r"""FHANDLE FVALGAPI fnFIE_create_box_se( INT size_x, INT size_y )
    BOX構造要素の作成

    Params:
    - [in] size_x   矩形の横方向長さ(1以上)
    - [in] size_y   矩形の縦方向長さ(1以上)

    Returns:
    - 確保された構造要素のハンドル
            メモリ不足で確保に失敗した場合や
            ライセンスエラー、または未初期化エラーが発生した場合はNULLを返します。
    """

    return _fie.fnFIE_create_box_se(size_x, size_y)

def fnFIE_create_disk_se(radius) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_create_disk_se( INT radius )
    DISK構造要素の作成

    Params:
    - [in] radius   DISKの半径（1以上）

    Returns:
    - 確保された構造要素のハンドル
            メモリ不足で確保に失敗した場合や
            ライセンスエラー、または未初期化エラーが発生した場合はNULLを返します。
    """
    raise NotImplementedError

def create_disk_se(radius):
    r"""FHANDLE FVALGAPI fnFIE_create_disk_se( INT radius )
    DISK構造要素の作成

    Params:
    - [in] radius   DISKの半径（1以上）

    Returns:
    - 確保された構造要素のハンドル
            メモリ不足で確保に失敗した場合や
            ライセンスエラー、または未初期化エラーが発生した場合はNULLを返します。
    """

    return _fie.fnFIE_create_disk_se(radius)

def fnFIE_create_line_se(length, l_type) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_create_line_se( INT length, INT l_type )
    LINE構造要素の作成

    Params:
    - [in] length   線の長さ（1以上）
    - [in] l_type   線の種類
                        - F_SE_LINE_FSLASH  右上から左下への斜線
                        - F_SE_LINE_BSLASH  左上から右下への斜線
                        - F_SE_LINE_VLINE   縦線
                        - F_SE_LINE_HLINE   横線
                        - F_SE_LINE_CROSS   ×印

    Returns:
    - 確保された構造要素のハンドル
            メモリ不足で確保に失敗した場合や
            ライセンスエラー、または未初期化エラーが発生した場合はNULLを返します。
    """
    raise NotImplementedError

def create_line_se(length, l_type):
    r"""FHANDLE FVALGAPI fnFIE_create_line_se( INT length, INT l_type )
    LINE構造要素の作成

    Params:
    - [in] length   線の長さ（1以上）
    - [in] l_type   線の種類
                        - F_SE_LINE_FSLASH  右上から左下への斜線
                        - F_SE_LINE_BSLASH  左上から右下への斜線
                        - F_SE_LINE_VLINE   縦線
                        - F_SE_LINE_HLINE   横線
                        - F_SE_LINE_CROSS   ×印

    Returns:
    - 確保された構造要素のハンドル
            メモリ不足で確保に失敗した場合や
            ライセンスエラー、または未初期化エラーが発生した場合はNULLを返します。
    """

    return _fie.fnFIE_create_line_se(length, l_type)

def fnFIE_erosion_se(hsrc_img, hdst_img, hse) -> Any:
    r"""INT FVALGAPI fnFIE_erosion_se( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse )
    構造要素指定 erosion

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse         構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def erosion_se(hsrc_img, hdst_img, hse):
    r"""INT FVALGAPI fnFIE_erosion_se( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse )
    構造要素指定 erosion

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse         構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_erosion_se(hsrc_img, hdst_img, hse)

def fnFIE_dilation_se(hsrc_img, hdst_img, hse) -> Any:
    r"""INT FVALGAPI fnFIE_dilation_se( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse )
    構造要素指定 dilation

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse         構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dilation_se(hsrc_img, hdst_img, hse):
    r"""INT FVALGAPI fnFIE_dilation_se( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse )
    構造要素指定 dilation

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse         構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dilation_se(hsrc_img, hdst_img, hse)

def fnFIE_opening_se(hsrc_img, hdst_img, hse) -> Any:
    r"""INT FVALGAPI fnFIE_opening_se( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse )
    構造要素指定 opening

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse         構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def opening_se(hsrc_img, hdst_img, hse):
    r"""INT FVALGAPI fnFIE_opening_se( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse )
    構造要素指定 opening

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse         構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_opening_se(hsrc_img, hdst_img, hse)

def fnFIE_closing_se(hsrc_img, hdst_img, hse) -> Any:
    r"""INT FVALGAPI fnFIE_closing_se( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse )
    構造要素指定 closing

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse         構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def closing_se(hsrc_img, hdst_img, hse):
    r"""INT FVALGAPI fnFIE_closing_se( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse )
    構造要素指定 closing

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse         構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_closing_se(hsrc_img, hdst_img, hse)

def fnFIE_tophat_se(hsrc_img, hdst_img, hse) -> Any:
    r"""INT FVALGAPI fnFIE_tophat_se( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse )
    構造要素指定 top-hat

    Params:
    - [in]  hsrc_img    処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: uc8, s16, us16, double )
    - [in]  hse         構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def tophat_se(hsrc_img, hdst_img, hse):
    r"""INT FVALGAPI fnFIE_tophat_se( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse )
    構造要素指定 top-hat

    Params:
    - [in]  hsrc_img    処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: uc8, s16, us16, double )
    - [in]  hse         構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_tophat_se(hsrc_img, hdst_img, hse)

def fnFIE_bottomhat_se(hsrc_img, hdst_img, hse) -> Any:
    r"""INT FVALGAPI fnFIE_bottomhat_se( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse )
    構造要素指定 bottom-hat

    Params:
    - [in]  hsrc_img    処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: uc8, s16, us16, double )
    - [in]  hse         構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def bottomhat_se(hsrc_img, hdst_img, hse):
    r"""INT FVALGAPI fnFIE_bottomhat_se( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse )
    構造要素指定 bottom-hat

    Params:
    - [in]  hsrc_img    処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: uc8, s16, us16, double )
    - [in]  hse         構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_bottomhat_se(hsrc_img, hdst_img, hse)

def fnFIE_hit_or_miss(hsrc_img, hdst_img, hse_FG, hse_BG) -> Any:
    r"""INT FVALGAPI fnFIE_hit_or_miss( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    ２値画像の構造要素指定 hit-or-miss

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin )
    - [out] hdst_img    処理結果画像( type: bin )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def hit_or_miss(hsrc_img, hdst_img, hse_FG, hse_BG):
    r"""INT FVALGAPI fnFIE_hit_or_miss( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    ２値画像の構造要素指定 hit-or-miss

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin )
    - [out] hdst_img    処理結果画像( type: bin )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_hit_or_miss(hsrc_img, hdst_img, hse_FG, hse_BG)

def fnFIE_morphology_CHMT(hsrc_img, hdst_img, hse_FG, hse_BG) -> Any:
    r"""INT FVALGAPI fnFIE_morphology_CHMT( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    構造要素指定 constrained hit-or-miss

    Params:
    - [in]  hsrc_img    処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: uc8, s16, us16, double )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def morphology_CHMT(hsrc_img, hdst_img, hse_FG, hse_BG):
    r"""INT FVALGAPI fnFIE_morphology_CHMT( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    構造要素指定 constrained hit-or-miss

    Params:
    - [in]  hsrc_img    処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: uc8, s16, us16, double )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_morphology_CHMT(hsrc_img, hdst_img, hse_FG, hse_BG)

def fnFIE_morphology_UHMT(hsrc_img, hdst_img, hse_FG, hse_BG) -> Any:
    r"""INT FVALGAPI fnFIE_morphology_UHMT( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    構造要素指定 unconstrained hit-or-miss

    Params:
    - [in]  hsrc_img    処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: uc8, s16, us16, double )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def morphology_UHMT(hsrc_img, hdst_img, hse_FG, hse_BG):
    r"""INT FVALGAPI fnFIE_morphology_UHMT( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    構造要素指定 unconstrained hit-or-miss

    Params:
    - [in]  hsrc_img    処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: uc8, s16, us16, double )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_morphology_UHMT(hsrc_img, hdst_img, hse_FG, hse_BG)

def fnFIE_thinning(hsrc_img, hdst_img, hse_FG, hse_BG) -> Any:
    r"""INT FVALGAPI fnFIE_thinning( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    構造要素指定 unconstrained thinning

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def thinning(hsrc_img, hdst_img, hse_FG, hse_BG):
    r"""INT FVALGAPI fnFIE_thinning( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    構造要素指定 unconstrained thinning

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_thinning(hsrc_img, hdst_img, hse_FG, hse_BG)

def fnFIE_thickening(hsrc_img, hdst_img, hse_FG, hse_BG) -> Any:
    r"""INT FVALGAPI fnFIE_thickening( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    構造要素指定 unconstrained thickening

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def thickening(hsrc_img, hdst_img, hse_FG, hse_BG):
    r"""INT FVALGAPI fnFIE_thickening( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    構造要素指定 unconstrained thickening

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_thickening(hsrc_img, hdst_img, hse_FG, hse_BG)

def fnFIE_cthinning(hsrc_img, hdst_img, hse_FG, hse_BG) -> Any:
    r"""INT FVALGAPI fnFIE_cthinning( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    構造要素指定 constrained thinning

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cthinning(hsrc_img, hdst_img, hse_FG, hse_BG):
    r"""INT FVALGAPI fnFIE_cthinning( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    構造要素指定 constrained thinning

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cthinning(hsrc_img, hdst_img, hse_FG, hse_BG)

def fnFIE_cthickening(hsrc_img, hdst_img, hse_FG, hse_BG) -> Any:
    r"""INT FVALGAPI fnFIE_cthickening( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    構造要素指定 constrained thickening

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cthickening(hsrc_img, hdst_img, hse_FG, hse_BG):
    r"""INT FVALGAPI fnFIE_cthickening( FHANDLE hsrc_img, FHANDLE hdst_img, FHANDLE hse_FG, FHANDLE hse_BG )
    構造要素指定 constrained thickening

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  hse_FG      構造要素 $ B_{FG} $ のハンドル
    - [in]  hse_BG      構造要素 $ B_{BG} $ のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_INVALID_OBJECT  構造要素に不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cthickening(hsrc_img, hdst_img, hse_FG, hse_BG)

def fnFIE_erosion(hsrc_img, hdst_img, filter_num, iMode) -> Any:
    r"""INT FVALGAPI fnFIE_erosion( FHANDLE hsrc_img, FHANDLE hdst_img, INT filter_num, INT iMode )
    3×3erosion filter

    Params:
    - [in] hsrc_img     処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in] filter_num   erosion実行回数
    - [in] iMode        近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def erosion(hsrc_img, hdst_img, filter_num=1, iMode=0):
    r"""INT FVALGAPI fnFIE_erosion( FHANDLE hsrc_img, FHANDLE hdst_img, INT filter_num, INT iMode )
    3×3erosion filter

    Params:
    - [in] hsrc_img     処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in] filter_num   erosion実行回数
    - [in] iMode        近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_erosion(hsrc_img, hdst_img, filter_num, iMode)

def fnFIE_dilation(hsrc_img, hdst_img, filter_num, iMode) -> Any:
    r"""INT FVALGAPI fnFIE_dilation( FHANDLE hsrc_img, FHANDLE hdst_img, INT filter_num, INT iMode )
    3×3dilation filter

    Params:
    - [in]  hsrc_img        処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  filter_num  dilation実行回数
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dilation(hsrc_img, hdst_img, filter_num=1, iMode=0):
    r"""INT FVALGAPI fnFIE_dilation( FHANDLE hsrc_img, FHANDLE hdst_img, INT filter_num, INT iMode )
    3×3dilation filter

    Params:
    - [in]  hsrc_img        処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  filter_num  dilation実行回数
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dilation(hsrc_img, hdst_img, filter_num, iMode)

def fnFIE_opening(hsrc_img, hdst_img, filter_num, iMode) -> Any:
    r"""INT FVALGAPI fnFIE_opening( FHANDLE hsrc_img, FHANDLE hdst_img, INT filter_num, INT iMode )
    opening filter

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  filter_num  erosion/dilation実行回数
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def opening(hsrc_img, hdst_img, filter_num=1, iMode=0):
    r"""INT FVALGAPI fnFIE_opening( FHANDLE hsrc_img, FHANDLE hdst_img, INT filter_num, INT iMode )
    opening filter

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  filter_num  erosion/dilation実行回数
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_opening(hsrc_img, hdst_img, filter_num, iMode)

def fnFIE_closing(hsrc_img, hdst_img, filter_num, iMode) -> Any:
    r"""INT FVALGAPI fnFIE_closing( FHANDLE hsrc_img, FHANDLE hdst_img, INT filter_num, INT iMode )
    closing filter

    Params:
    - [in] hsrc_img     処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in] filter_num   dilation/erosion実行回数
    - [in] iMode        近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def closing(hsrc_img, hdst_img, filter_num=1, iMode=0):
    r"""INT FVALGAPI fnFIE_closing( FHANDLE hsrc_img, FHANDLE hdst_img, INT filter_num, INT iMode )
    closing filter

    Params:
    - [in] hsrc_img     処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in] filter_num   dilation/erosion実行回数
    - [in] iMode        近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_closing(hsrc_img, hdst_img, filter_num, iMode)

def fnFIE_tophat(hsrc_img, hdst_img, filter_num, iMode) -> Any:
    r"""INT FVALGAPI fnFIE_tophat( FHANDLE hsrc_img, FHANDLE hdst_img, INT filter_num, INT iMode )
    top-hat filter

    Params:
    - [in]  hsrc_img    処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: uc8, s16, us16, double )
    - [in]  filter_num  opening実行回数
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def tophat(hsrc_img, hdst_img, filter_num=1, iMode=0):
    r"""INT FVALGAPI fnFIE_tophat( FHANDLE hsrc_img, FHANDLE hdst_img, INT filter_num, INT iMode )
    top-hat filter

    Params:
    - [in]  hsrc_img    処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: uc8, s16, us16, double )
    - [in]  filter_num  opening実行回数
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_tophat(hsrc_img, hdst_img, filter_num, iMode)

def fnFIE_bottomhat(hsrc_img, hdst_img, filter_num, iMode) -> Any:
    r"""INT FVALGAPI fnFIE_bottomhat( FHANDLE hsrc_img, FHANDLE hdst_img, INT filter_num, INT iMode )
    bottom-hat filter

    Params:
    - [in]  hsrc_img    処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: uc8, s16, us16, double )
    - [in]  filter_num  closing実行回数
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def bottomhat(hsrc_img, hdst_img, filter_num=1, iMode=0):
    r"""INT FVALGAPI fnFIE_bottomhat( FHANDLE hsrc_img, FHANDLE hdst_img, INT filter_num, INT iMode )
    bottom-hat filter

    Params:
    - [in]  hsrc_img    処理対象画像( type: uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: uc8, s16, us16, double )
    - [in]  filter_num  closing実行回数
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡されたため、異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_bottomhat(hsrc_img, hdst_img, filter_num, iMode)

def fnFIE_thinning_predefined(hsrc_img, hdst_img, se_type, num) -> Any:
    r"""INT FVALGAPI fnFIE_thinning_predefined( FHANDLE hsrc_img, FHANDLE hdst_img, enum f_paired_se se_type, INT num )
    定義済み構造要素によるthinning

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  se_type     構造要素ペア指定。下記の何れかを指定。
                             - F_SE_GOLAY_L4 GOLAY-L 4連結
                             - F_SE_GOLAY_L8 GOLAY-L 8連結
                             - F_SE_GOLAY_E4 GOLAY-E 4連結
                             - F_SE_GOLAY_E8 GOLAY-E 8連結
                             - F_SE_GOLAY_I4 GOLAY-I 4連結
                             - F_SE_GOLAY_I8 GOLAY-I 8連結
    - [in]  num         繰り返し回数( 0 <  num または -1 ）
                            -1 を指定すると、画像が変化しなくなるまで繰り返します。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM        se_type,  num に不正な値が渡された
    - F_ERR_NOMEMORY            メモリ確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def thinning_predefined(hsrc_img, hdst_img, se_type=F_SE_GOLAY_L4, num=1):
    r"""INT FVALGAPI fnFIE_thinning_predefined( FHANDLE hsrc_img, FHANDLE hdst_img, enum f_paired_se se_type, INT num )
    定義済み構造要素によるthinning

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  se_type     構造要素ペア指定。下記の何れかを指定。
                             - F_SE_GOLAY_L4 GOLAY-L 4連結
                             - F_SE_GOLAY_L8 GOLAY-L 8連結
                             - F_SE_GOLAY_E4 GOLAY-E 4連結
                             - F_SE_GOLAY_E8 GOLAY-E 8連結
                             - F_SE_GOLAY_I4 GOLAY-I 4連結
                             - F_SE_GOLAY_I8 GOLAY-I 8連結
    - [in]  num         繰り返し回数( 0 <  num または -1 ）
                            -1 を指定すると、画像が変化しなくなるまで繰り返します。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM        se_type,  num に不正な値が渡された
    - F_ERR_NOMEMORY            メモリ確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_thinning_predefined(hsrc_img, hdst_img, se_type, num)

def fnFIE_thickening_predefined(hsrc_img, hdst_img, se_type, num) -> Any:
    r"""INT FVALGAPI fnFIE_thickening_predefined( FHANDLE hsrc_img, FHANDLE hdst_img, enum f_paired_se se_type, INT num )
    定義済み構造要素によるthickening

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  se_type     構造要素ペア指定。下記の何れかを指定。
                             - F_SE_GOLAY_L4 GOLAY-L 4連結
                             - F_SE_GOLAY_L8 GOLAY-L 8連結
                             - F_SE_GOLAY_E4 GOLAY-E 4連結
                             - F_SE_GOLAY_E8 GOLAY-E 8連結
                             - F_SE_GOLAY_I4 GOLAY-I 4連結
                             - F_SE_GOLAY_I8 GOLAY-I 8連結
    - [in]  num         繰り返し回数。( 0 <  num または -1 ）
                            -1 を指定すると、画像が変化しなくなるまで繰り返します。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM        se_type,  num に不正な値が渡された
    - F_ERR_NOMEMORY            メモリ確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def thickening_predefined(hsrc_img, hdst_img, se_type=F_SE_GOLAY_L4, num=1):
    r"""INT FVALGAPI fnFIE_thickening_predefined( FHANDLE hsrc_img, FHANDLE hdst_img, enum f_paired_se se_type, INT num )
    定義済み構造要素によるthickening

    Params:
    - [in]  hsrc_img    処理対象画像( type: bin, uc8, s16, us16, double )
    - [out] hdst_img    処理結果画像( type: bin, uc8, s16, us16, double )
    - [in]  se_type     構造要素ペア指定。下記の何れかを指定。
                             - F_SE_GOLAY_L4 GOLAY-L 4連結
                             - F_SE_GOLAY_L8 GOLAY-L 8連結
                             - F_SE_GOLAY_E4 GOLAY-E 4連結
                             - F_SE_GOLAY_E8 GOLAY-E 8連結
                             - F_SE_GOLAY_I4 GOLAY-I 4連結
                             - F_SE_GOLAY_I8 GOLAY-I 8連結
    - [in]  num         繰り返し回数。( 0 <  num または -1 ）
                            -1 を指定すると、画像が変化しなくなるまで繰り返します。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM        se_type,  num に不正な値が渡された
    - F_ERR_NOMEMORY            メモリ確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_thickening_predefined(hsrc_img, hdst_img, se_type, num)

def fnFIE_watershed(hSrc, hDst) -> Any:
    r"""INT FVALGAPI fnFIE_watershed( FHANDLE hSrc, FHANDLE hDst )
    Watershed法による領域分割

    Params:
    - [in]  hsrc       入力画像ハンドル( type : uc8, s16, us16, double, rgbq, float, rgbtri )
    - [out] hdst       出力画像ハンドル( type : bin )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため異常終了
    - F_ERR_NOMEMORY         メモリ不足によるエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def watershed(hSrc, hDst):
    r"""INT FVALGAPI fnFIE_watershed( FHANDLE hSrc, FHANDLE hDst )
    Watershed法による領域分割

    Params:
    - [in]  hsrc       入力画像ハンドル( type : uc8, s16, us16, double, rgbq, float, rgbtri )
    - [out] hdst       出力画像ハンドル( type : bin )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため異常終了
    - F_ERR_NOMEMORY         メモリ不足によるエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_watershed(hSrc, hDst)

def fnFIE_make_histogram(hImg, iChaNo, unppHist, ipHistLen) -> Any:
    r"""INT FVALGAPI fnFIE_make_histogram( FHANDLE hImg, INT iChaNo, UINT** unppHist, INT* ipHistLen )
    画像ヒストグラム作成

    Params:
    - [in] hImg             入力画像のハンドル (type: uc8, s16, us16)
    - [in] iChaNo           処理したいチャネルの番号
    - [out] unppHist        ヒストグラムのメモリ
    - [in,out] ipHistLen    メモリ確保した場合はそのメモリの量を入力（UINT数単位）
                                メモリ確保しなかった場合は関数内部確保のメモリの量を出力（UINT数単位）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def make_histogram(hImg, iChaNo, unppHist, ipHistLen):
    r"""INT FVALGAPI fnFIE_make_histogram( FHANDLE hImg, INT iChaNo, UINT** unppHist, INT* ipHistLen )
    画像ヒストグラム作成

    Params:
    - [in] hImg             入力画像のハンドル (type: uc8, s16, us16)
    - [in] iChaNo           処理したいチャネルの番号
    - [out] unppHist        ヒストグラムのメモリ
    - [in,out] ipHistLen    メモリ確保した場合はそのメモリの量を入力（UINT数単位）
                                メモリ確保しなかった場合は関数内部確保のメモリの量を出力（UINT数単位）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_make_histogram(hImg, iChaNo, unppHist, ipHistLen)

def fnFIE_img_minmaxdens(himg, mindens, maxdens) -> Any:
    r"""INT FVALGAPI fnFIE_img_minmaxdens( FHANDLE himg, DOUBLE* mindens, DOUBLE* maxdens )
    最小最大濃度値計算

    Params:
    - [in] himg             入力画像 ( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [out] mindens         最小濃度値の配列
                                 himg のチャネル数分の長さが必要です。
                                 himg がF_IMG_RGBQUADの場合には長さ４以上の配列、F_IMG_RGBTRIPLE型の場合には長さ３以上の配列を指定してください。
    - [out] maxdens         最大濃度値の配列
                                 himg のチャネル数分の長さが必要です。
                                 himg がF_IMG_RGBQUADの場合には長さ４以上の配列、F_IMG_RGBTRIPLE型の場合には長さ３以上の配列を指定してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_minmaxdens(himg, mindens, maxdens):
    r"""INT FVALGAPI fnFIE_img_minmaxdens( FHANDLE himg, DOUBLE* mindens, DOUBLE* maxdens )
    最小最大濃度値計算

    Params:
    - [in] himg             入力画像 ( type: bin, uc8, s16, us16, i32, ui32, i64, float, double, rgbq, rgbtri )
    - [out] mindens         最小濃度値の配列
                                 himg のチャネル数分の長さが必要です。
                                 himg がF_IMG_RGBQUADの場合には長さ４以上の配列、F_IMG_RGBTRIPLE型の場合には長さ３以上の配列を指定してください。
    - [out] maxdens         最大濃度値の配列
                                 himg のチャネル数分の長さが必要です。
                                 himg がF_IMG_RGBQUADの場合には長さ４以上の配列、F_IMG_RGBTRIPLE型の場合には長さ３以上の配列を指定してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_minmaxdens(himg, mindens, maxdens)

def fnFIE_calc_binarize_threshold(data_hist, size_hist, mode, threshold) -> Any:
    r"""INT FVALGAPI fnFIE_calc_binarize_threshold( UINT* data_hist, INT size_hist, INT mode, INT* threshold )
    ヒストグラムからの二値化閾値決定

    Params:
    - [in] data_hist ヒストグラムへのポインタ
    - [in] size_hist  data_hist の配列の長さ 3以上でなければなりません
    - [in] mode 閾値決定手法
     - 0 大津の方法
     - 1 kittlerの方法
    - [out] threshold 算出した閾値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def calc_binarize_threshold(data_hist, size_hist, mode, threshold):
    r"""INT FVALGAPI fnFIE_calc_binarize_threshold( UINT* data_hist, INT size_hist, INT mode, INT* threshold )
    ヒストグラムからの二値化閾値決定

    Params:
    - [in] data_hist ヒストグラムへのポインタ
    - [in] size_hist  data_hist の配列の長さ 3以上でなければなりません
    - [in] mode 閾値決定手法
     - 0 大津の方法
     - 1 kittlerの方法
    - [out] threshold 算出した閾値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_calc_binarize_threshold(data_hist, size_hist, mode, threshold)

def fnFIE_calc_multi_threshold(data_hist, size_hist, mode, num_discrimination, thresh) -> Any:
    r"""INT FVALGAPI fnFIE_calc_multi_threshold( UINT* data_hist, INT size_hist, INT mode, INT num_discrimination, INT* thresh )
    ヒストグラムからの多値化閾値決定

    Params:
    - [in] data_hist ヒストグラムへのポインタ
    - [in] size_hist  data_hist の配列の長さ　(  size_hist ≧  num_discrimination )
    - [in] mode 閾値決定手法
     - 0 大津の方法
     - 1 kittlerの方法
    - [in] num_discrimination 多値化の分割数(2 ≦  num_discrimination ≦  size_hist)
    - [out] threshold 多値化しきい値結果格納バッファ。しきい値の格納用に  num_discrimination -1 個のメモリを確保しておいてください。

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_NOMEMORY                メモリ不足
    - F_ERR_INVALID_PARAM           パラメータ異常
    - F_ERR_CALC_IMPOSSIBLE     計算不可能
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def calc_multi_threshold(data_hist, size_hist, mode, num_discrimination, thresh):
    r"""INT FVALGAPI fnFIE_calc_multi_threshold( UINT* data_hist, INT size_hist, INT mode, INT num_discrimination, INT* thresh )
    ヒストグラムからの多値化閾値決定

    Params:
    - [in] data_hist ヒストグラムへのポインタ
    - [in] size_hist  data_hist の配列の長さ　(  size_hist ≧  num_discrimination )
    - [in] mode 閾値決定手法
     - 0 大津の方法
     - 1 kittlerの方法
    - [in] num_discrimination 多値化の分割数(2 ≦  num_discrimination ≦  size_hist)
    - [out] threshold 多値化しきい値結果格納バッファ。しきい値の格納用に  num_discrimination -1 個のメモリを確保しておいてください。

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_NOMEMORY                メモリ不足
    - F_ERR_INVALID_PARAM           パラメータ異常
    - F_ERR_CALC_IMPOSSIBLE     計算不可能
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_calc_multi_threshold(data_hist, size_hist, mode, num_discrimination, thresh)

def fnFIE_stats_img_average(himgs, num_imgs, himg_average, dst_img_type) -> Any:
    r"""INT FVALGAPI fnFIE_stats_img_average( FHANDLE* himgs, INT num_imgs, FHANDLE* himg_average, enum f_imgtype dst_img_type )
    平均値画像作成

    Params:
    - [in]  himgs          複数の画像オブジェクト格納配列(type: uc8, s16, us16, double )
                                himgs に格納される画像は全て同じサイズ、同じ画像タイプで、さらにチャネル数が１でなければなりません。
    - [in]  num_imgs        himg に格納された画像オブジェクトの数(2≦ num_imgs≦65535)
    - [out] himg_average   生成した結果画像オブジェクト。 *himg_average は必ず NULLで初期化しなければなりません。
    - [in]  dst_img_type   出力画像タイプの指定
                                - 入力画像オブジェクトと同じ画像タイプ、もしくは F_IMG_DOUBLE のみの対応です。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトエラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def stats_img_average(himgs, num_imgs, himg_average, dst_img_type=F_IMG_DOUBLE):
    r"""INT FVALGAPI fnFIE_stats_img_average( FHANDLE* himgs, INT num_imgs, FHANDLE* himg_average, enum f_imgtype dst_img_type )
    平均値画像作成

    Params:
    - [in]  himgs          複数の画像オブジェクト格納配列(type: uc8, s16, us16, double )
                                himgs に格納される画像は全て同じサイズ、同じ画像タイプで、さらにチャネル数が１でなければなりません。
    - [in]  num_imgs        himg に格納された画像オブジェクトの数(2≦ num_imgs≦65535)
    - [out] himg_average   生成した結果画像オブジェクト。 *himg_average は必ず NULLで初期化しなければなりません。
    - [in]  dst_img_type   出力画像タイプの指定
                                - 入力画像オブジェクトと同じ画像タイプ、もしくは F_IMG_DOUBLE のみの対応です。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトエラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_stats_img_average(himgs, num_imgs, himg_average, dst_img_type)

def fnFIE_stats_img_median(himgs, num_imgs, himg_median) -> Any:
    r"""INT FVALGAPI fnFIE_stats_img_median( FHANDLE* himgs, INT num_imgs, FHANDLE* himg_median )
    中央値画像作成

    Params:
    - [in]  himgs          複数の画像オブジェクト格納配列(type: uc8, s16, us16, double )
                                himgs に格納される画像は全て同じサイズ、同じ画像タイプで、さらにチャネル数が１でなければなりません。
    - [in]  num_imgs        himg に格納された画像オブジェクトの数(2≦ num_imgs≦65535)
    - [out] himg_median    生成した結果画像オブジェクト。 *himg_median は必ず NULLで初期化しなければなりません。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトエラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def stats_img_median(himgs, num_imgs, himg_median):
    r"""INT FVALGAPI fnFIE_stats_img_median( FHANDLE* himgs, INT num_imgs, FHANDLE* himg_median )
    中央値画像作成

    Params:
    - [in]  himgs          複数の画像オブジェクト格納配列(type: uc8, s16, us16, double )
                                himgs に格納される画像は全て同じサイズ、同じ画像タイプで、さらにチャネル数が１でなければなりません。
    - [in]  num_imgs        himg に格納された画像オブジェクトの数(2≦ num_imgs≦65535)
    - [out] himg_median    生成した結果画像オブジェクト。 *himg_median は必ず NULLで初期化しなければなりません。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトエラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_stats_img_median(himgs, num_imgs, himg_median)

def fnFIE_stats_img_stddev(himgs, num_imgs, himg_stddev, dst_img_type) -> Any:
    r"""INT FVALGAPI fnFIE_stats_img_stddev( FHANDLE* himgs, INT num_imgs, FHANDLE* himg_stddev, enum f_imgtype dst_img_type )
    標準偏差画像作成

    Params:
    - [in]  himgs          複数の画像オブジェクト格納配列(type: uc8, s16, us16, double )
                                himgs に格納される画像は全て同じサイズ、同じ画像タイプで、さらにチャネル数が１でなければなりません。
    - [in]  num_imgs        himgs に格納された画像オブジェクトの数(2≦ num_imgs≦65535)
    - [out] himg_stddev    生成した結果画像オブジェクト。 *himg_stddev は必ず NULLで初期化しなければなりません。
    - [in]  dst_img_type   出力画像タイプの指定
                                 - 入力画像オブジェクトと同じ画像タイプ、もしくは F_IMG_DOUBLE のみの対応です。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def stats_img_stddev(himgs, num_imgs, himg_stddev, dst_img_type=F_IMG_DOUBLE):
    r"""INT FVALGAPI fnFIE_stats_img_stddev( FHANDLE* himgs, INT num_imgs, FHANDLE* himg_stddev, enum f_imgtype dst_img_type )
    標準偏差画像作成

    Params:
    - [in]  himgs          複数の画像オブジェクト格納配列(type: uc8, s16, us16, double )
                                himgs に格納される画像は全て同じサイズ、同じ画像タイプで、さらにチャネル数が１でなければなりません。
    - [in]  num_imgs        himgs に格納された画像オブジェクトの数(2≦ num_imgs≦65535)
    - [out] himg_stddev    生成した結果画像オブジェクト。 *himg_stddev は必ず NULLで初期化しなければなりません。
    - [in]  dst_img_type   出力画像タイプの指定
                                 - 入力画像オブジェクトと同じ画像タイプ、もしくは F_IMG_DOUBLE のみの対応です。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_stats_img_stddev(himgs, num_imgs, himg_stddev, dst_img_type)

def fnFIE_stats_img_median_absdev(himgs, num_imgs, himg_absdev, dst_img_type) -> Any:
    r"""INT FVALGAPI fnFIE_stats_img_median_absdev( FHANDLE* himgs, INT num_imgs, FHANDLE* himg_absdev, enum f_imgtype dst_img_type )
    絶対偏差の中央値画像作成

    Params:
    - [in]  himgs               複数の画像オブジェクト格納配列(type: uc8, s16, us16, double )
                                     himgs に格納される画像は全て同じサイズ、同じ画像タイプで、さらにチャネル数が１でなければなりません。
    - [in]  num_imgs             himgs に格納された画像オブジェクトの数(2≦ num_imgs≦65535)
    - [out] himg_median_absdev  生成した結果画像オブジェクト。 *himg_median_avsdev は必ず NULLで初期化しなければなりません。
    - [in]  dst_img_type        出力画像タイプの指定
                                       - 入力画像オブジェクトと同じ画像タイプ、もしくは F_IMG_DOUBLE のみの対応です。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトエラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def stats_img_median_absdev(himgs, num_imgs, himg_absdev, dst_img_type=F_IMG_DOUBLE):
    r"""INT FVALGAPI fnFIE_stats_img_median_absdev( FHANDLE* himgs, INT num_imgs, FHANDLE* himg_absdev, enum f_imgtype dst_img_type )
    絶対偏差の中央値画像作成

    Params:
    - [in]  himgs               複数の画像オブジェクト格納配列(type: uc8, s16, us16, double )
                                     himgs に格納される画像は全て同じサイズ、同じ画像タイプで、さらにチャネル数が１でなければなりません。
    - [in]  num_imgs             himgs に格納された画像オブジェクトの数(2≦ num_imgs≦65535)
    - [out] himg_median_absdev  生成した結果画像オブジェクト。 *himg_median_avsdev は必ず NULLで初期化しなければなりません。
    - [in]  dst_img_type        出力画像タイプの指定
                                       - 入力画像オブジェクトと同じ画像タイプ、もしくは F_IMG_DOUBLE のみの対応です。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトエラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_stats_img_median_absdev(himgs, num_imgs, himg_absdev, dst_img_type)

def fnFIE_stats_img_rank(himgs, num_imgs, himg_rank, rank) -> Any:
    r"""INT FVALGAPI fnFIE_stats_img_rank( FHANDLE* himgs, INT num_imgs, FHANDLE* himg_rank, INT rank )
    ランク画像作成

    Params:
    - [in]  himgs       複数の画像オブジェクト格納配列(type: uc8, s16, us16, double )
                             himgs に格納される画像はすべて、サイズ及び画像型が等しく、さらにチャネル数が１でなければなりません。
    - [in]  num_imgs     himg に格納された画像オブジェクトの数(1≦  num_imgs ≦65535)
    - [out] himg_rank   生成した結果画像オブジェクト。  *himg_rank は必ず NULLで初期化しなければなりません。
    - [in]  rank        ランク(1≦  rank ≦  num_imgs )

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトエラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM     パラメータ異常
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def stats_img_rank(himgs, num_imgs, himg_rank, rank):
    r"""INT FVALGAPI fnFIE_stats_img_rank( FHANDLE* himgs, INT num_imgs, FHANDLE* himg_rank, INT rank )
    ランク画像作成

    Params:
    - [in]  himgs       複数の画像オブジェクト格納配列(type: uc8, s16, us16, double )
                             himgs に格納される画像はすべて、サイズ及び画像型が等しく、さらにチャネル数が１でなければなりません。
    - [in]  num_imgs     himg に格納された画像オブジェクトの数(1≦  num_imgs ≦65535)
    - [out] himg_rank   生成した結果画像オブジェクト。  *himg_rank は必ず NULLで初期化しなければなりません。
    - [in]  rank        ランク(1≦  rank ≦  num_imgs )

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトエラー
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM     パラメータ異常
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_stats_img_rank(himgs, num_imgs, himg_rank, rank)

def fnFIE_ptile_threshold(hSrc, hDst, ipThresh, iRate) -> Any:
    r"""INT FVALGAPI fnFIE_ptile_threshold( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh, INT iRate )
    Ｐタイル法による画像２値化

    Params:
    - [in]  hSrc        入力画像 (type: uc8, us16, s16)
    - [out] hDst        出力画像 (type: bin)
    - [out] ipThresh    各チャネルの閾値
    - [in]  iRate       割合(1 ~ 99)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ptile_threshold(hSrc, hDst, ipThresh=None, iRate=75):
    r"""INT FVALGAPI fnFIE_ptile_threshold( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh, INT iRate )
    Ｐタイル法による画像２値化

    Params:
    - [in]  hSrc        入力画像 (type: uc8, us16, s16)
    - [out] hDst        出力画像 (type: bin)
    - [out] ipThresh    各チャネルの閾値
    - [in]  iRate       割合(1 ~ 99)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ptile_threshold(hSrc, hDst, ipThresh, iRate)

def fnFIE_discrimination_threshold(hSrc, hDst, ipThresh) -> Any:
    r"""INT FVALGAPI fnFIE_discrimination_threshold( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh )
    [非推奨]判別分析法による画像２値化

    Params:
    - [in]  hSrc            入力画像 (type: uc8, us16, s16)
    - [out] hDst            出力画像 (type: bin)
    - [out] ipThresh        各チャネルの閾値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def discrimination_threshold(hSrc, hDst, ipThresh=None):
    r"""INT FVALGAPI fnFIE_discrimination_threshold( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh )
    [非推奨]判別分析法による画像２値化

    Params:
    - [in]  hSrc            入力画像 (type: uc8, us16, s16)
    - [out] hDst            出力画像 (type: bin)
    - [out] ipThresh        各チャネルの閾値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_discrimination_threshold(hSrc, hDst, ipThresh)

def fnFIE_grad_hist_threshold(hSrc, hDst, ipThresh, iEdgeFactor) -> Any:
    r"""INT FVALGAPI fnFIE_grad_hist_threshold( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh, INT iEdgeFactor )
    微分ヒストグラム法による画像２値化

    Params:
    - [in]  hSrc            入力画像 (type: uc8, us16, s16)
    - [out] hDst            出力画像 (type: bin)
    - [out] ipThresh        各チャネルの閾値
    - [in] iEdgeFactor      処理対象となる（１次微分最大値＊iEdgeFactor（%））
                                以上の微分値を持つ画素を処理対象とします。取値範囲は0~100

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE 入力画像によって２値化閾値は０になった
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def grad_hist_threshold(hSrc, hDst, ipThresh=None, iEdgeFactor=50):
    r"""INT FVALGAPI fnFIE_grad_hist_threshold( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh, INT iEdgeFactor )
    微分ヒストグラム法による画像２値化

    Params:
    - [in]  hSrc            入力画像 (type: uc8, us16, s16)
    - [out] hDst            出力画像 (type: bin)
    - [out] ipThresh        各チャネルの閾値
    - [in] iEdgeFactor      処理対象となる（１次微分最大値＊iEdgeFactor（%））
                                以上の微分値を持つ画素を処理対象とします。取値範囲は0~100

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE 入力画像によって２値化閾値は０になった
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_grad_hist_threshold(hSrc, hDst, ipThresh, iEdgeFactor)

def fnFIE_lap_hist_threshold(hSrc, hDst, ipThresh, iEdgeFactor) -> Any:
    r"""INT FVALGAPI fnFIE_lap_hist_threshold( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh, INT iEdgeFactor )
    [非推奨]ラプラシアンヒストグラム法による画像の２値化

    Params:
    - [in]  hSrc            入力画像 (type: uc8, us16, s16)
    - [out] hDst            出力画像 (type: bin)
    - [out] ipThresh        各チャネルの閾値
    - [in]  iEdgeFactor     処理対象となる（２次微分最大値＊iEdgeFactor（％）)
                                以上の微分値を持つ画素を処理対象とします。取値範囲は0~100

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def lap_hist_threshold(hSrc, hDst, ipThresh=None, iEdgeFactor=50):
    r"""INT FVALGAPI fnFIE_lap_hist_threshold( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh, INT iEdgeFactor )
    [非推奨]ラプラシアンヒストグラム法による画像の２値化

    Params:
    - [in]  hSrc            入力画像 (type: uc8, us16, s16)
    - [out] hDst            出力画像 (type: bin)
    - [out] ipThresh        各チャネルの閾値
    - [in]  iEdgeFactor     処理対象となる（２次微分最大値＊iEdgeFactor（％）)
                                以上の微分値を持つ画素を処理対象とします。取値範囲は0~100

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_lap_hist_threshold(hSrc, hDst, ipThresh, iEdgeFactor)

def fnFIE_shift_avr_threshold_ex(hsrc, hdst, size_x, size_y, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_shift_avr_threshold_ex( FHANDLE hsrc, FHANDLE hdst, INT size_x, INT size_y, INT border_mode, DOUBLE border_value )
    局所領域平均値による２値画像作成 ボーダー処理付き

    Params:
    - [in]  hsrc            入力画像 (type: uc8, us16, s16)
    - [out] hdst            出力画像 (type: bin)
    - [in]  size_x          近傍平均エリアの横サイズ。3〜画像の幅 の範囲の奇数を設定する
    - [in]  size_y          近傍平均エリアの縦サイズ。3〜画像の高さ の範囲の奇数を設定する
    - [in]  border_mode     ボーダー処理モード
                                 - F_BORDER_NONE ボーダー拡張しない
                                 - F_BORDER_ZERO ０埋めモード
                                 - F_BORDER_VALUE 一定値モード
                                 - F_BORDER_CONTINUOUS 端延長モード
                                 - F_BORDER_REPEAT 繰り返しモード
                                 - F_BORDER_MIRROR1 反転モード１
                                 - F_BORDER_MIRROR2 反転モード２
    - [in]  border_value        ボーダー濃度値。
                                border_mode がF_BORDER_VALUEの場合のみ使用されます。 その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def shift_avr_threshold_ex(hsrc, hdst, size_x=25, size_y=25, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_shift_avr_threshold_ex( FHANDLE hsrc, FHANDLE hdst, INT size_x, INT size_y, INT border_mode, DOUBLE border_value )
    局所領域平均値による２値画像作成 ボーダー処理付き

    Params:
    - [in]  hsrc            入力画像 (type: uc8, us16, s16)
    - [out] hdst            出力画像 (type: bin)
    - [in]  size_x          近傍平均エリアの横サイズ。3〜画像の幅 の範囲の奇数を設定する
    - [in]  size_y          近傍平均エリアの縦サイズ。3〜画像の高さ の範囲の奇数を設定する
    - [in]  border_mode     ボーダー処理モード
                                 - F_BORDER_NONE ボーダー拡張しない
                                 - F_BORDER_ZERO ０埋めモード
                                 - F_BORDER_VALUE 一定値モード
                                 - F_BORDER_CONTINUOUS 端延長モード
                                 - F_BORDER_REPEAT 繰り返しモード
                                 - F_BORDER_MIRROR1 反転モード１
                                 - F_BORDER_MIRROR2 反転モード２
    - [in]  border_value        ボーダー濃度値。
                                border_mode がF_BORDER_VALUEの場合のみ使用されます。 その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_shift_avr_threshold_ex(hsrc, hdst, size_x, size_y, border_mode, border_value)

def fnFIE_shift_avr_threshold(hsrc, hdst, size_x, size_y) -> Any:
    r"""INT FVALGAPI fnFIE_shift_avr_threshold( FHANDLE hsrc, FHANDLE hdst, INT size_x, INT size_y )
    局所領域平均値による２値画像作成

    Params:
    - [in]  hsrc            入力画像 (type: uc8, us16, s16)
    - [out] hdst            出力画像 (type: bin)
    - [in]  size_x          近傍平均エリアの横サイズ。3〜画像の幅 の範囲の奇数を設定する
    - [in]  size_y          近傍平均エリアの縦サイズ。3〜画像の高さ の範囲の奇数を設定する

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def shift_avr_threshold(hsrc, hdst, size_x=25, size_y=25):
    r"""INT FVALGAPI fnFIE_shift_avr_threshold( FHANDLE hsrc, FHANDLE hdst, INT size_x, INT size_y )
    局所領域平均値による２値画像作成

    Params:
    - [in]  hsrc            入力画像 (type: uc8, us16, s16)
    - [out] hdst            出力画像 (type: bin)
    - [in]  size_x          近傍平均エリアの横サイズ。3〜画像の幅 の範囲の奇数を設定する
    - [in]  size_y          近傍平均エリアの縦サイズ。3〜画像の高さ の範囲の奇数を設定する

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_shift_avr_threshold(hsrc, hdst, size_x, size_y)

def fnFIE_band_threshold_ch(hsrc, hdst, tlow, thigh, back_clear) -> Any:
    r"""INT FVALGAPI fnFIE_band_threshold_ch( const FHANDLE hsrc, FHANDLE hdst, const DOUBLE* tlow, const DOUBLE* thigh, INT back_clear )
    ２つの固定しきい値を用いたセグメンテーション処理

    Params:
    - [in]  hsrc        入力画像（type:uc8,s16,us16,double,rgbq）
    - [out] hdst        出力画像（type:uc8,s16,us16,double,rgbq,bin）
    - [in]  tlow        閾値の下限配列
    - [in]  thigh       閾値の上限配列
    - [in]  back_clear  背景処理法
                        - TRUE   閾値の指定範囲外になる画素は０クリア
                               - FALSE  閾値の指定範囲外になる画素は出力先の元々の値を保持

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            作業用画像が確保できない
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                     - 閾値がNULL
                                     - 閾値の大小が逆転している
                                     - 入出力画像の形式が合わない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def band_threshold_ch(hsrc, hdst, tlow, thigh, back_clear=True):
    r"""INT FVALGAPI fnFIE_band_threshold_ch( const FHANDLE hsrc, FHANDLE hdst, const DOUBLE* tlow, const DOUBLE* thigh, INT back_clear )
    ２つの固定しきい値を用いたセグメンテーション処理

    Params:
    - [in]  hsrc        入力画像（type:uc8,s16,us16,double,rgbq）
    - [out] hdst        出力画像（type:uc8,s16,us16,double,rgbq,bin）
    - [in]  tlow        閾値の下限配列
    - [in]  thigh       閾値の上限配列
    - [in]  back_clear  背景処理法
                        - TRUE   閾値の指定範囲外になる画素は０クリア
                               - FALSE  閾値の指定範囲外になる画素は出力先の元々の値を保持

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            作業用画像が確保できない
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                     - 閾値がNULL
                                     - 閾値の大小が逆転している
                                     - 入出力画像の形式が合わない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_band_threshold_ch(hsrc, hdst, tlow, thigh, back_clear)

def fnFIE_band_threshold(hsrc, hdst, tlow, thigh) -> Any:
    r"""INT FVALGAPI fnFIE_band_threshold( FHANDLE hsrc, FHANDLE hdst, DOUBLE tlow, DOUBLE thigh )
    二つの固定しきい値を用いて２値化

    Params:
    - [in]  hsrc       入力画像ハンドル( type : uc8, s16, us16, double )
    - [out] hdst       出力画像ハンドル( type : bin )
    - [in]  tlow       ２値化閾値の下限
    - [in]  thigh      ２値化閾値の上限

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため異常終了した
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def band_threshold(hsrc, hdst, tlow=64, thigh=192):
    r"""INT FVALGAPI fnFIE_band_threshold( FHANDLE hsrc, FHANDLE hdst, DOUBLE tlow, DOUBLE thigh )
    二つの固定しきい値を用いて２値化

    Params:
    - [in]  hsrc       入力画像ハンドル( type : uc8, s16, us16, double )
    - [out] hdst       出力画像ハンドル( type : bin )
    - [in]  tlow       ２値化閾値の下限
    - [in]  thigh      ２値化閾値の上限

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため異常終了した
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_band_threshold(hsrc, hdst, tlow, thigh)

def fnFIE_binarize(hsrc, hdst, threshold) -> Any:
    r"""INT FVALGAPI fnFIE_binarize( FHANDLE hsrc, FHANDLE hdst, DOUBLE threshold )
    固定しきい値による２値化

    Params:
    - [in]  hsrc       入力画像ハンドル( type : uc8, s16, us16, double )
    - [out] hdst       出力画像ハンドル( type : bin )
    - [in]  threshold  ２値化閾値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため異常終了した
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def binarize(hsrc, hdst, threshold=128):
    r"""INT FVALGAPI fnFIE_binarize( FHANDLE hsrc, FHANDLE hdst, DOUBLE threshold )
    固定しきい値による２値化

    Params:
    - [in]  hsrc       入力画像ハンドル( type : uc8, s16, us16, double )
    - [out] hdst       出力画像ハンドル( type : bin )
    - [in]  threshold  ２値化閾値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡されたため異常終了した
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_binarize(hsrc, hdst, threshold)

def fnFIE_niblack_threshold(hSrc, hDst, iH, iV, dK, iBrdMod) -> Any:
    r"""INT FVALGAPI fnFIE_niblack_threshold( FHANDLE hSrc, FHANDLE hDst, INT iH, INT iV, DOUBLE dK, INT iBrdMod )
    局所平均値と標準偏差を用いたNiblack法による画像２値化

    Params:
    - [in]  hSrc        入力画像 (type: uc8, us16, s16)
    - [out] hDst        出力２値画像 (type: bin)
    - [in]  iH          局所領域の横サイズ
                            ( 1〜255 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）
    - [in]  iV          局所領域の縦サイズ
                            ( 1〜255 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）
    - [in]  dK          計算式の係数 $k$
    - [in]  iBrdMod     ボーダー処理モード
                             - F_BORDER_NONE        ボーダー拡張しない
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def niblack_threshold(hSrc, hDst, iH=25, iV=25, dK=-0.5, iBrdMod=F_BORDER_CONTINUOUS):
    r"""INT FVALGAPI fnFIE_niblack_threshold( FHANDLE hSrc, FHANDLE hDst, INT iH, INT iV, DOUBLE dK, INT iBrdMod )
    局所平均値と標準偏差を用いたNiblack法による画像２値化

    Params:
    - [in]  hSrc        入力画像 (type: uc8, us16, s16)
    - [out] hDst        出力２値画像 (type: bin)
    - [in]  iH          局所領域の横サイズ
                            ( 1〜255 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）
    - [in]  iV          局所領域の縦サイズ
                            ( 1〜255 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）
    - [in]  dK          計算式の係数 $k$
    - [in]  iBrdMod     ボーダー処理モード
                             - F_BORDER_NONE        ボーダー拡張しない
                             - F_BORDER_CONTINUOUS  端延長モード
                             - F_BORDER_MIRROR1     反転モード１
                             - F_BORDER_MIRROR2     反転モード２

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_niblack_threshold(hSrc, hDst, iH, iV, dK, iBrdMod)

def fnFIE_sauvola_threshold(hSrc, hDst, iH, iV, dK, dR, iBrdMod) -> Any:
    r"""INT FVALGAPI fnFIE_sauvola_threshold( FHANDLE hSrc, FHANDLE hDst, INT iH, INT iV, DOUBLE dK, DOUBLE dR, INT iBrdMod )
    局所平均値と標準偏差を用いてSauvola法による画像２値化

    Params:
    - [in]  hSrc        入力画像 (type: uc8, us16, s16, float, double)
    - [out] hDst        出力２値画像 (type: bin)
    - [in]  iH          局所領域の横サイズ
    ( 1〜255 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）
    - [in]  iV          局所領域の縦サイズ
    ( 1〜255 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）
    - [in]  dK          計算式の $k$
    - [in]  dR          計算式の $R$ ( 絶対値が１以上の値。但し、double,float型の場合は0以外 )
    - [in]  iBrdMod     ボーダー処理モード
    - F_BORDER_NONE     ボーダー拡張しない
    - F_BORDER_CONTINUOUS   端延長モード
    - F_BORDER_MIRROR1      反転モード１
    - F_BORDER_MIRROR2      反転モード２

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def sauvola_threshold(hSrc, hDst, iH=25, iV=25, dK=0.1, dR=128, iBrdMod=F_BORDER_CONTINUOUS):
    r"""INT FVALGAPI fnFIE_sauvola_threshold( FHANDLE hSrc, FHANDLE hDst, INT iH, INT iV, DOUBLE dK, DOUBLE dR, INT iBrdMod )
    局所平均値と標準偏差を用いてSauvola法による画像２値化

    Params:
    - [in]  hSrc        入力画像 (type: uc8, us16, s16, float, double)
    - [out] hDst        出力２値画像 (type: bin)
    - [in]  iH          局所領域の横サイズ
    ( 1〜255 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）
    - [in]  iV          局所領域の縦サイズ
    ( 1〜255 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）
    - [in]  dK          計算式の $k$
    - [in]  dR          計算式の $R$ ( 絶対値が１以上の値。但し、double,float型の場合は0以外 )
    - [in]  iBrdMod     ボーダー処理モード
    - F_BORDER_NONE     ボーダー拡張しない
    - F_BORDER_CONTINUOUS   端延長モード
    - F_BORDER_MIRROR1      反転モード１
    - F_BORDER_MIRROR2      反転モード２

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_sauvola_threshold(hSrc, hDst, iH, iV, dK, dR, iBrdMod)

def fnFIE_background_remove_threshold(hSrc, hDst, iH, iV) -> Any:
    r"""INT FVALGAPI fnFIE_background_remove_threshold( FHANDLE hSrc, FHANDLE hDst, INT iH, INT iV )
    [非推奨]局所メディアン値をバックグランドとして除去して得られた画像を判別分析法で２値化

    Params:
    - [in]  hSrc        入力画像 (type: uc8 )
    - [out] hDst        出力２値画像 (type: bin)
    - [in]  iH          メディアンフィルタのフィルタ横サイズ
                            ( 1〜253 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）
    - [in]  iV          メディアンフィルタのフィルタ縦サイズ
                            ( 1〜253 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def background_remove_threshold(hSrc, hDst, iH=25, iV=25):
    r"""INT FVALGAPI fnFIE_background_remove_threshold( FHANDLE hSrc, FHANDLE hDst, INT iH, INT iV )
    [非推奨]局所メディアン値をバックグランドとして除去して得られた画像を判別分析法で２値化

    Params:
    - [in]  hSrc        入力画像 (type: uc8 )
    - [out] hDst        出力２値画像 (type: bin)
    - [in]  iH          メディアンフィルタのフィルタ横サイズ
                            ( 1〜253 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）
    - [in]  iV          メディアンフィルタのフィルタ縦サイズ
                            ( 1〜253 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_background_remove_threshold(hSrc, hDst, iH, iV)

def fnFIE_kittler_threshold(hSrc, hDst, ipThresh) -> Any:
    r"""INT FVALGAPI fnFIE_kittler_threshold( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh )
    キトラー(kittler)法による画像２値化

    Params:
    - [in]  hSrc            入力画像 (type: uc8, us16, s16)
    - [out] hDst            出力画像 (type: bin)
    - [out] ipThresh        各チャネルの閾値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE 計算不可能です。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def kittler_threshold(hSrc, hDst, ipThresh=None):
    r"""INT FVALGAPI fnFIE_kittler_threshold( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh )
    キトラー(kittler)法による画像２値化

    Params:
    - [in]  hSrc            入力画像 (type: uc8, us16, s16)
    - [out] hDst            出力画像 (type: bin)
    - [out] ipThresh        各チャネルの閾値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE 計算不可能です。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_kittler_threshold(hSrc, hDst, ipThresh)

def fnFIE_shift_avr_threshold_offset(hsrc, hdst, size_x, size_y, offset, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_shift_avr_threshold_offset( FHANDLE hsrc, FHANDLE hdst, INT size_x, INT size_y, INT offset, INT border_mode, DOUBLE border_value )
    局所領域平均値とオフセットによる２値画像作成 ボーダー処理付き

    Params:
    - [in]  hsrc            入力画像 (type: uc8,s16,us16)
    - [out] hdst            出力画像 (type: bin)
    - [in]  size_x          近傍平均エリアの横サイズ。3〜画像の幅 の範囲の奇数を設定する
    - [in]  size_y          近傍平均エリアの縦サイズ。3〜画像の高さ の範囲の奇数を設定する
    - [in]  offset          周囲画素平均値からのオフセット。 F_IMG_UC8 のとき $ -255 \le offset \le 255 $ それ以外の時 $ -65535 \le offset \le 65535 $
    - [in]  border_mode     ボーダー処理モード
                                 - F_BORDER_NONE ボーダー拡張しない
                                 - F_BORDER_ZERO ０埋めモード
                                 - F_BORDER_VALUE 一定値モード
                                 - F_BORDER_CONTINUOUS 端延長モード
                                 - F_BORDER_REPEAT 繰り返しモード
                                 - F_BORDER_MIRROR1 反転モード１
                                 - F_BORDER_MIRROR2 反転モード２
    - [in]  border_value            ボーダー濃度値。
                                border_mode がF_BORDER_VALUEの場合のみ使用されます。 その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def shift_avr_threshold_offset(hsrc, hdst, size_x=25, size_y=25, offset=-10, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_shift_avr_threshold_offset( FHANDLE hsrc, FHANDLE hdst, INT size_x, INT size_y, INT offset, INT border_mode, DOUBLE border_value )
    局所領域平均値とオフセットによる２値画像作成 ボーダー処理付き

    Params:
    - [in]  hsrc            入力画像 (type: uc8,s16,us16)
    - [out] hdst            出力画像 (type: bin)
    - [in]  size_x          近傍平均エリアの横サイズ。3〜画像の幅 の範囲の奇数を設定する
    - [in]  size_y          近傍平均エリアの縦サイズ。3〜画像の高さ の範囲の奇数を設定する
    - [in]  offset          周囲画素平均値からのオフセット。 F_IMG_UC8 のとき $ -255 \le offset \le 255 $ それ以外の時 $ -65535 \le offset \le 65535 $
    - [in]  border_mode     ボーダー処理モード
                                 - F_BORDER_NONE ボーダー拡張しない
                                 - F_BORDER_ZERO ０埋めモード
                                 - F_BORDER_VALUE 一定値モード
                                 - F_BORDER_CONTINUOUS 端延長モード
                                 - F_BORDER_REPEAT 繰り返しモード
                                 - F_BORDER_MIRROR1 反転モード１
                                 - F_BORDER_MIRROR2 反転モード２
    - [in]  border_value            ボーダー濃度値。
                                border_mode がF_BORDER_VALUEの場合のみ使用されます。 その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_shift_avr_threshold_offset(hsrc, hdst, size_x, size_y, offset, border_mode, border_value)

def fnFIE_shift_avr_threshold_offset_mask(hsrc, hdst, hmask, size_x, size_y, offset, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_shift_avr_threshold_offset_mask( FHANDLE hsrc, FHANDLE hdst, FHANDLE hmask, INT size_x, INT size_y, INT offset, INT border_mode, DOUBLE border_value )
    局所領域平均値とオフセットによる２値画像作成 マスク付き

    Params:
    - [in]  hsrc          入力画像 (type: uc8,s16,us16)
    - [out] hdst          出力画像 (type: bin)
    - [in]  hmask         マスク
                             - リージョン
                             - マスク画像 (type: bin)
    - [in]  size_x        近傍平均エリアの横サイズ。3〜画像の幅 の範囲の奇数を設定する
    - [in]  size_y        近傍平均エリアの縦サイズ。3〜画像の高さ の範囲の奇数を設定する
    - [in]  offset        周囲画素平均値からのオフセット。
                              F_IMG_UC8 のとき $ -255 \le offset \le 255 $ それ以外の時 $ -65535 \le offset \le 65535 $
    - [in]  border_mode   ボーダー処理モード
                               - F_BORDER_NONE ボーダー拡張しない
                               - F_BORDER_ZERO ０埋めモード
                               - F_BORDER_VALUE 一定値モード
                               - F_BORDER_CONTINUOUS 端延長モード
                               - F_BORDER_REPEAT 繰り返しモード
                               - F_BORDER_MIRROR1 反転モード１
                               - F_BORDER_MIRROR2 反転モード２
    - [in]  border_value  ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。 その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_OBJECT 不正なマスクが渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def shift_avr_threshold_offset_mask(hsrc, hdst, hmask, size_x=25, size_y=25, offset=-10, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_shift_avr_threshold_offset_mask( FHANDLE hsrc, FHANDLE hdst, FHANDLE hmask, INT size_x, INT size_y, INT offset, INT border_mode, DOUBLE border_value )
    局所領域平均値とオフセットによる２値画像作成 マスク付き

    Params:
    - [in]  hsrc          入力画像 (type: uc8,s16,us16)
    - [out] hdst          出力画像 (type: bin)
    - [in]  hmask         マスク
                             - リージョン
                             - マスク画像 (type: bin)
    - [in]  size_x        近傍平均エリアの横サイズ。3〜画像の幅 の範囲の奇数を設定する
    - [in]  size_y        近傍平均エリアの縦サイズ。3〜画像の高さ の範囲の奇数を設定する
    - [in]  offset        周囲画素平均値からのオフセット。
                              F_IMG_UC8 のとき $ -255 \le offset \le 255 $ それ以外の時 $ -65535 \le offset \le 65535 $
    - [in]  border_mode   ボーダー処理モード
                               - F_BORDER_NONE ボーダー拡張しない
                               - F_BORDER_ZERO ０埋めモード
                               - F_BORDER_VALUE 一定値モード
                               - F_BORDER_CONTINUOUS 端延長モード
                               - F_BORDER_REPEAT 繰り返しモード
                               - F_BORDER_MIRROR1 反転モード１
                               - F_BORDER_MIRROR2 反転モード２
    - [in]  border_value  ボーダー濃度値。
                              border_mode がF_BORDER_VALUEの場合のみ使用されます。 その他のモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_OBJECT 不正なマスクが渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_shift_avr_threshold_offset_mask(hsrc, hdst, hmask, size_x, size_y, offset, border_mode, border_value)

def fnFIE_discrimination_threshold2(hSrc, hDst, ipThresh) -> Any:
    r"""INT FVALGAPI fnFIE_discrimination_threshold2( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh )
    判別分析法による画像２値化

    Params:
    - [in]  hSrc            入力画像 (type: uc8, us16, s16)
    - [out] hDst            出力画像 (type: bin)
    - [out] ipThresh        各チャネルの閾値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def discrimination_threshold2(hSrc, hDst, ipThresh=None):
    r"""INT FVALGAPI fnFIE_discrimination_threshold2( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh )
    判別分析法による画像２値化

    Params:
    - [in]  hSrc            入力画像 (type: uc8, us16, s16)
    - [out] hDst            出力画像 (type: bin)
    - [out] ipThresh        各チャネルの閾値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_discrimination_threshold2(hSrc, hDst, ipThresh)

def fnFIE_lap_hist_threshold2(hSrc, hDst, ipThresh, iEdgeFactor) -> Any:
    r"""INT FVALGAPI fnFIE_lap_hist_threshold2( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh, INT iEdgeFactor )
    ラプラシアンヒストグラム法による画像の２値化

    Params:
    - [in]  hSrc            入力画像 (type: uc8, us16, s16)
    - [out] hDst            出力画像 (type: bin)
    - [out] ipThresh        各チャネルの閾値
    - [in]  iEdgeFactor     処理対象となる（２次微分最大値＊iEdgeFactor（％）)
                                以上の微分値を持つ画素を処理対象とします。取値範囲は0~100

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def lap_hist_threshold2(hSrc, hDst, ipThresh=None, iEdgeFactor=50):
    r"""INT FVALGAPI fnFIE_lap_hist_threshold2( FHANDLE hSrc, FHANDLE hDst, INT* ipThresh, INT iEdgeFactor )
    ラプラシアンヒストグラム法による画像の２値化

    Params:
    - [in]  hSrc            入力画像 (type: uc8, us16, s16)
    - [out] hDst            出力画像 (type: bin)
    - [out] ipThresh        各チャネルの閾値
    - [in]  iEdgeFactor     処理対象となる（２次微分最大値＊iEdgeFactor（％）)
                                以上の微分値を持つ画素を処理対象とします。取値範囲は0~100

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_lap_hist_threshold2(hSrc, hDst, ipThresh, iEdgeFactor)

def fnFIE_background_remove_threshold2(hSrc, hDst, iH, iV) -> Any:
    r"""INT FVALGAPI fnFIE_background_remove_threshold2( FHANDLE hSrc, FHANDLE hDst, INT iH, INT iV )
    局所メディアン値をバックグランドとして除去して得られた画像を判別分析法で２値化

    Params:
    - [in]  hSrc        入力画像 (type: uc8 )
    - [out] hDst        出力２値画像 (type: bin)
    - [in]  iH          メディアンフィルタのフィルタ横サイズ
                            ( 1〜253 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）
    - [in]  iV          メディアンフィルタのフィルタ縦サイズ
                            ( 1〜253 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def background_remove_threshold2(hSrc, hDst, iH=25, iV=25):
    r"""INT FVALGAPI fnFIE_background_remove_threshold2( FHANDLE hSrc, FHANDLE hDst, INT iH, INT iV )
    局所メディアン値をバックグランドとして除去して得られた画像を判別分析法で２値化

    Params:
    - [in]  hSrc        入力画像 (type: uc8 )
    - [out] hDst        出力２値画像 (type: bin)
    - [in]  iH          メディアンフィルタのフィルタ横サイズ
                            ( 1〜253 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）
    - [in]  iV          メディアンフィルタのフィルタ縦サイズ
                            ( 1〜253 の奇数。但し  iH と  iV のどちらかは3以上でなければならない）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_background_remove_threshold2(hSrc, hDst, iH, iV)

def fnFIE_discrimination_multithreshold(hsrc, hdst, thresh, num_discrimination, dst_mode) -> Any:
    r"""INT FVALGAPI fnFIE_discrimination_multithreshold( FHANDLE hsrc, FHANDLE hdst, INT* thresh, INT num_discrimination, INT dst_mode )
    判別分析法による多値化

    Params:
    - [in]   hsrc               入力画像オブジェクト(type:uc8,us16,s16 and ch:1)
    - [out]  hdst               結果格納用画像オブジェクト。入力画像オブジェクトと同じ画像タイプ、サイズであること。出力画像が必要でない場合にはNULLを指定可能です。
    - [out]  thresh             多値化しきい値結果格納バッファ。しきい値の格納用に  num_discrimination -1 個のメモリを確保しておいてください。しきい値が必要でない場合にはNULLを指定可能です。
    - [in]   num_discrimination 多値化の分割数(2 ≦  num_discrimination ≦ 入力画像の持つ階調数)
    - [in]   dst_mode           出力画像を生成する際の各区間の値を決定する動作モード( hdst にNULLが指定された場合にはこの値は使用されません)
                                     - 0:出力値は、入力画像  hsrc のヒストグラムについて、得られたしきい値  thresh の各区間に存在する値の重み付き平均値
                                     - 1:出力値は、入力画像  hsrc における画像タイプの濃度値範囲を  num_discrimination で分割する際の等間隔値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_INVALID_IMAGE      画像オブジェクト異常
    - F_ERR_INVALID_PARAM      パラメータ異常
    - F_ERR_CALC_IMPOSSIBLE  計算不可能
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def discrimination_multithreshold(hsrc, hdst, thresh=None, num_discrimination=5, dst_mode=1):
    r"""INT FVALGAPI fnFIE_discrimination_multithreshold( FHANDLE hsrc, FHANDLE hdst, INT* thresh, INT num_discrimination, INT dst_mode )
    判別分析法による多値化

    Params:
    - [in]   hsrc               入力画像オブジェクト(type:uc8,us16,s16 and ch:1)
    - [out]  hdst               結果格納用画像オブジェクト。入力画像オブジェクトと同じ画像タイプ、サイズであること。出力画像が必要でない場合にはNULLを指定可能です。
    - [out]  thresh             多値化しきい値結果格納バッファ。しきい値の格納用に  num_discrimination -1 個のメモリを確保しておいてください。しきい値が必要でない場合にはNULLを指定可能です。
    - [in]   num_discrimination 多値化の分割数(2 ≦  num_discrimination ≦ 入力画像の持つ階調数)
    - [in]   dst_mode           出力画像を生成する際の各区間の値を決定する動作モード( hdst にNULLが指定された場合にはこの値は使用されません)
                                     - 0:出力値は、入力画像  hsrc のヒストグラムについて、得られたしきい値  thresh の各区間に存在する値の重み付き平均値
                                     - 1:出力値は、入力画像  hsrc における画像タイプの濃度値範囲を  num_discrimination で分割する際の等間隔値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_INVALID_IMAGE      画像オブジェクト異常
    - F_ERR_INVALID_PARAM      パラメータ異常
    - F_ERR_CALC_IMPOSSIBLE  計算不可能
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_discrimination_multithreshold(hsrc, hdst, thresh, num_discrimination, dst_mode)

def fnFIE_kittler_multithreshold(hsrc, hdst, thresh, num_discrimination, dst_mode) -> Any:
    r"""INT FVALGAPI fnFIE_kittler_multithreshold( FHANDLE hsrc, FHANDLE hdst, INT* thresh, INT num_discrimination, INT dst_mode )
    キトラー(Kittler)法による多値化

    Params:
    - [in]   hsrc               入力画像オブジェクト(type:uc8,us16,s16 and ch:1)
    - [out]  hdst               結果格納用画像オブジェクト。入力画像オブジェクトと同じ画像タイプ、サイズであること。出力画像が必要でない場合にはNULLを指定可能です。
    - [out]  thresh             多値化しきい値結果格納バッファ。しきい値の格納用に  num_discrimination -1 個のメモリを確保しておいてください。しきい値が必要でない場合にはNULLを指定可能です。
    - [in]   num_discrimination 多値化の分割数(2 ≦  num_discrimination ≦ 入力画像の持つ階調数)
                                    ただし、画像の階調数/2 よりも大きな値を指定すると計算不可能になってしまいますので、F_ERR_CALC_IMPOSSIBLE を返します。
    - [in]   dst_mode           出力画像を生成する際の各区間の値を決定する動作モード( hdst にNULLが指定された場合にはこの値は使用されません)
                                     - 0:出力値は、入力画像  hsrc のヒストグラムについて、 thresh の各区間に存在する値の重み付き平均値
                                     - 1:出力値は、入力画像  hsrc における画像タイプの濃度値範囲を  num_discrimination で分割する際の等間隔値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_INVALID_IMAGE      画像オブジェクト異常
    - F_ERR_INVALID_PARAM      パラメータ異常
    - F_ERR_CALC_IMPOSSIBLE  計算不可能
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def kittler_multithreshold(hsrc, hdst, thresh=None, num_discrimination=5, dst_mode=1):
    r"""INT FVALGAPI fnFIE_kittler_multithreshold( FHANDLE hsrc, FHANDLE hdst, INT* thresh, INT num_discrimination, INT dst_mode )
    キトラー(Kittler)法による多値化

    Params:
    - [in]   hsrc               入力画像オブジェクト(type:uc8,us16,s16 and ch:1)
    - [out]  hdst               結果格納用画像オブジェクト。入力画像オブジェクトと同じ画像タイプ、サイズであること。出力画像が必要でない場合にはNULLを指定可能です。
    - [out]  thresh             多値化しきい値結果格納バッファ。しきい値の格納用に  num_discrimination -1 個のメモリを確保しておいてください。しきい値が必要でない場合にはNULLを指定可能です。
    - [in]   num_discrimination 多値化の分割数(2 ≦  num_discrimination ≦ 入力画像の持つ階調数)
                                    ただし、画像の階調数/2 よりも大きな値を指定すると計算不可能になってしまいますので、F_ERR_CALC_IMPOSSIBLE を返します。
    - [in]   dst_mode           出力画像を生成する際の各区間の値を決定する動作モード( hdst にNULLが指定された場合にはこの値は使用されません)
                                     - 0:出力値は、入力画像  hsrc のヒストグラムについて、 thresh の各区間に存在する値の重み付き平均値
                                     - 1:出力値は、入力画像  hsrc における画像タイプの濃度値範囲を  num_discrimination で分割する際の等間隔値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_INVALID_IMAGE      画像オブジェクト異常
    - F_ERR_INVALID_PARAM      パラメータ異常
    - F_ERR_CALC_IMPOSSIBLE  計算不可能
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_kittler_multithreshold(hsrc, hdst, thresh, num_discrimination, dst_mode)

def fnFIE_meanshift_multithreshold(hsrc, hdst, thresh, num_discrimination, bandwidth, union_thresh, dst_mode) -> Any:
    r"""INT FVALGAPI fnFIE_meanshift_multithreshold( FHANDLE hsrc, FHANDLE hdst, INT** thresh, INT* num_discrimination, DOUBLE bandwidth, DOUBLE union_thresh, INT dst_mode )
    Mean-Shift 法による多値化

    Params:
    - [in]  hsrc                入力画像オブジェクト (type:uc8,us16,s16 and ch:1)
    - [out] hdst                結果格納用画像オブジェクト
                                    出力画像が必要でない場合には NULL を指定可能です。
                                    NULL でない場合、入力画像オブジェクトと同じ画像タイプ、サイズの 1ch 画像である必要があります。
    - [out] thresh              多値化しきい値結果格納バッファ
                                    しきい値が必要でない場合には NULL を指定可能です。
                                    NULL 以外が指定された場合、  thresh は、関数内部で必要なメモリを確保します。 関数へのエントリー時、 *thresh は NULL でなければいけません。確保されたメモリは、 fnOAL_free() で解放してください。
                                     num_discrimination が 1 以外の場合、 thresh は、( num_discrimination - 1) 個分のメモリを確保し、しきい値を格納します。
                                     num_discrimination が 1 の場合は、要素1個分のメモリを確保し、入力画像が取りうる値の最小値を格納します。
    - [out] num_discrimination  多値化の分割数
                                    多値化の分割数が必要でない場合には NULL を指定可能です。
    - [in]  bandwidth           カーネル幅 (0 <  bandwidth)
                                    大きくなるほど多値化の分割数が小さくなります。
                                    また、収束値の差が  bandwidth 以下の標本点は、同じクラスタと見なされます。つまり、 dst_mode = 0 の場合、出力画像の出現濃度値の間隔は、 bandwidth 以上が保証されます。
    - [in]  union_thresh        クラスタ統合しきい値 (0 ≦  union_thresh ≦ 1)
                                    所属する標本点数が  union_thresh * (全体の画素数) 以下のクラスタを最も近いものに統合します。推奨値は、0.01 ~ 0.05 です。
    - [in]  dst_mode            出力画像を生成する際の動作モード
                                    ( hdst に NULL が指定された場合にはこの値は使用されません)
                                    - 0 : 出力値は、注目クラスタの Mean-Shift 収束値の平均を四捨五入した値
                                    - 1 : 出力値は、入力画像 hsrc における画像タイプの濃度値範囲を  num_discrimination で分割する際の等間隔値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       画像オブジェクト異常
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def meanshift_multithreshold(hsrc, hdst, thresh=None, num_discrimination=None, bandwidth=5, union_thresh=0.05, dst_mode=1):
    r"""INT FVALGAPI fnFIE_meanshift_multithreshold( FHANDLE hsrc, FHANDLE hdst, INT** thresh, INT* num_discrimination, DOUBLE bandwidth, DOUBLE union_thresh, INT dst_mode )
    Mean-Shift 法による多値化

    Params:
    - [in]  hsrc                入力画像オブジェクト (type:uc8,us16,s16 and ch:1)
    - [out] hdst                結果格納用画像オブジェクト
                                    出力画像が必要でない場合には NULL を指定可能です。
                                    NULL でない場合、入力画像オブジェクトと同じ画像タイプ、サイズの 1ch 画像である必要があります。
    - [out] thresh              多値化しきい値結果格納バッファ
                                    しきい値が必要でない場合には NULL を指定可能です。
                                    NULL 以外が指定された場合、  thresh は、関数内部で必要なメモリを確保します。 関数へのエントリー時、 *thresh は NULL でなければいけません。確保されたメモリは、 fnOAL_free() で解放してください。
                                     num_discrimination が 1 以外の場合、 thresh は、( num_discrimination - 1) 個分のメモリを確保し、しきい値を格納します。
                                     num_discrimination が 1 の場合は、要素1個分のメモリを確保し、入力画像が取りうる値の最小値を格納します。
    - [out] num_discrimination  多値化の分割数
                                    多値化の分割数が必要でない場合には NULL を指定可能です。
    - [in]  bandwidth           カーネル幅 (0 <  bandwidth)
                                    大きくなるほど多値化の分割数が小さくなります。
                                    また、収束値の差が  bandwidth 以下の標本点は、同じクラスタと見なされます。つまり、 dst_mode = 0 の場合、出力画像の出現濃度値の間隔は、 bandwidth 以上が保証されます。
    - [in]  union_thresh        クラスタ統合しきい値 (0 ≦  union_thresh ≦ 1)
                                    所属する標本点数が  union_thresh * (全体の画素数) 以下のクラスタを最も近いものに統合します。推奨値は、0.01 ~ 0.05 です。
    - [in]  dst_mode            出力画像を生成する際の動作モード
                                    ( hdst に NULL が指定された場合にはこの値は使用されません)
                                    - 0 : 出力値は、注目クラスタの Mean-Shift 収束値の平均を四捨五入した値
                                    - 1 : 出力値は、入力画像 hsrc における画像タイプの濃度値範囲を  num_discrimination で分割する際の等間隔値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       画像オブジェクト異常
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_meanshift_multithreshold(hsrc, hdst, thresh, num_discrimination, bandwidth, union_thresh, dst_mode)

def fnFIE_region_decode(hreg, himg, offset, dens) -> Any:
    r"""INT FVALGAPI fnFIE_region_decode( FHANDLE hreg, FHANDLE himg, PNT_T offset, DOUBLE dens )
    リージョンを画像に描画する

    Params:
    - [in]  hreg    描画するリージョンオブジェクトハンドル
    - [out] himg    描画先画像オブジェクトハンドル( type: bin, uc8, s16, us16, double )
    - [in]  offset  描画先画像の原点オフセット
    - [in]  dens    描画する濃度値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 不正なオブジェクトハンドルが渡された
    - F_ERR_INVALID_IMAGE  不正な画像オブジェクトハンドルが渡された
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_decode(hreg, himg, offset=(0, 0), dens=255.0):
    r"""INT FVALGAPI fnFIE_region_decode( FHANDLE hreg, FHANDLE himg, PNT_T offset, DOUBLE dens )
    リージョンを画像に描画する

    Params:
    - [in]  hreg    描画するリージョンオブジェクトハンドル
    - [out] himg    描画先画像オブジェクトハンドル( type: bin, uc8, s16, us16, double )
    - [in]  offset  描画先画像の原点オフセット
    - [in]  dens    描画する濃度値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 不正なオブジェクトハンドルが渡された
    - F_ERR_INVALID_IMAGE  不正な画像オブジェクトハンドルが渡された
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_decode(hreg, himg, offset, dens)

def fnFIE_region_encode(himg, offset) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_region_encode( FHANDLE himg, PNT_T offset )
    画像からREGIONを抽出する

    Params:
    - [in] himg   抽出元画像( type: bin )
    - [in] offset 抽出元画像原点オフセット

    Returns:
    - 正常終了した場合は、生成したリージョンオブジェクトのハンドルを返します。
            返されたリージョンオブジェクトが不要になったら fnFIE_free_object() にて
            オブジェクトを解放して下さい。
            パラメータエラー、メモリ不足、ライセンスエラー、または未初期化エラーにより
            処理が失敗した場合はNULLを返します。
    """
    raise NotImplementedError

def region_encode(himg, offset=(0, 0)):
    r"""FHANDLE FVALGAPI fnFIE_region_encode( FHANDLE himg, PNT_T offset )
    画像からREGIONを抽出する

    Params:
    - [in] himg   抽出元画像( type: bin )
    - [in] offset 抽出元画像原点オフセット

    Returns:
    - 正常終了した場合は、生成したリージョンオブジェクトのハンドルを返します。
            返されたリージョンオブジェクトが不要になったら fnFIE_free_object() にて
            オブジェクトを解放して下さい。
            パラメータエラー、メモリ不足、ライセンスエラー、または未初期化エラーにより
            処理が失敗した場合はNULLを返します。
    """

    return _fie.fnFIE_region_encode(himg, offset)

def fnFIE_region_copy_object(arg0) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_region_copy_object( FHANDLE )
    リージョンオブジェクトのコピー

    Params:
    - [in] hreg コピーするリージョンオブジェクトのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """
    raise NotImplementedError

def region_copy_object(arg0):
    r"""FHANDLE FVALGAPI fnFIE_region_copy_object( FHANDLE )
    リージョンオブジェクトのコピー

    Params:
    - [in] hreg コピーするリージョンオブジェクトのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """

    return _fie.fnFIE_region_copy_object(arg0)

def fnFIE_region_and(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_region_and( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE* hdst )
    REGION間AND演算

    Params:
    - [in]  hsrc1   入力REGIONハンドル
    - [in]  hsrc2   入力REGIONハンドル
    - [out] hdst    出力REGIONハンドルのアドレス

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_and(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_region_and( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE* hdst )
    REGION間AND演算

    Params:
    - [in]  hsrc1   入力REGIONハンドル
    - [in]  hsrc2   入力REGIONハンドル
    - [out] hdst    出力REGIONハンドルのアドレス

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_and(hsrc1, hsrc2, hdst)

def fnFIE_region_or(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_region_or( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE* hdst )
    REGION間OR演算

    Params:
    - [in]  hsrc1   入力REGIONハンドル
    - [in]  hsrc2   入力REGIONハンドル
    - [out] hdst    出力REGIONハンドルのアドレス

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_or(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_region_or( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE* hdst )
    REGION間OR演算

    Params:
    - [in]  hsrc1   入力REGIONハンドル
    - [in]  hsrc2   入力REGIONハンドル
    - [out] hdst    出力REGIONハンドルのアドレス

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_or(hsrc1, hsrc2, hdst)

def fnFIE_region_xor(hsrc1, hsrc2, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_region_xor( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE* hdst )
    REGION間XOR演算

    Params:
    - [in]  hsrc1   入力REGIONハンドル
    - [in]  hsrc2   入力REGIONハンドル
    - [out] hdst    出力REGIONハンドルのアドレス

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_xor(hsrc1, hsrc2, hdst):
    r"""INT FVALGAPI fnFIE_region_xor( FHANDLE hsrc1, FHANDLE hsrc2, FHANDLE* hdst )
    REGION間XOR演算

    Params:
    - [in]  hsrc1   入力REGIONハンドル
    - [in]  hsrc2   入力REGIONハンドル
    - [out] hdst    出力REGIONハンドルのアドレス

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_xor(hsrc1, hsrc2, hdst)

def fnFIE_region_erosion_se(hsrc, hdst, hse) -> Any:
    r"""INT FVALGAPI fnFIE_region_erosion_se( FHANDLE hsrc, FHANDLE* hdst, FHANDLE hse )
    構造要素指定erosion(REGION版)

    Params:
    - [in]  hsrc    処理対象REGIONハンドル
    - [out] hdst    処理結果REGIONハンドルのアドレス
    - [in]  hse     構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_erosion_se(hsrc, hdst, hse):
    r"""INT FVALGAPI fnFIE_region_erosion_se( FHANDLE hsrc, FHANDLE* hdst, FHANDLE hse )
    構造要素指定erosion(REGION版)

    Params:
    - [in]  hsrc    処理対象REGIONハンドル
    - [out] hdst    処理結果REGIONハンドルのアドレス
    - [in]  hse     構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_erosion_se(hsrc, hdst, hse)

def fnFIE_region_dilation_se(hsrc, hdst, hse) -> Any:
    r"""INT FVALGAPI fnFIE_region_dilation_se( FHANDLE hsrc, FHANDLE* hdst, FHANDLE hse )
    構造要素指定dilation(REGION版)

    Params:
    - [in]  hsrc    処理対象REGIONハンドル
    - [out] hdst    処理結果REGIONハンドルのアドレス
    - [in]  hse     構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_dilation_se(hsrc, hdst, hse):
    r"""INT FVALGAPI fnFIE_region_dilation_se( FHANDLE hsrc, FHANDLE* hdst, FHANDLE hse )
    構造要素指定dilation(REGION版)

    Params:
    - [in]  hsrc    処理対象REGIONハンドル
    - [out] hdst    処理結果REGIONハンドルのアドレス
    - [in]  hse     構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_dilation_se(hsrc, hdst, hse)

def fnFIE_region_opening_se(hsrc, hdst, hse) -> Any:
    r"""INT FVALGAPI fnFIE_region_opening_se( FHANDLE hsrc, FHANDLE* hdst, FHANDLE hse )
    構造要素指定opening(REGION版)

    Params:
    - [in]  hsrc    処理対象REGIONハンドル
    - [out] hdst    処理結果REGIONハンドルのアドレス
    - [in]  hse     構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_opening_se(hsrc, hdst, hse):
    r"""INT FVALGAPI fnFIE_region_opening_se( FHANDLE hsrc, FHANDLE* hdst, FHANDLE hse )
    構造要素指定opening(REGION版)

    Params:
    - [in]  hsrc    処理対象REGIONハンドル
    - [out] hdst    処理結果REGIONハンドルのアドレス
    - [in]  hse     構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_opening_se(hsrc, hdst, hse)

def fnFIE_region_closing_se(hsrc, hdst, hse) -> Any:
    r"""INT FVALGAPI fnFIE_region_closing_se( FHANDLE hsrc, FHANDLE* hdst, FHANDLE hse )
    構造要素指定closing(REGION版)

    Params:
    - [in]  hsrc    処理対象REGIONハンドル
    - [out] hdst    処理結果REGIONハンドルのアドレス
    - [in]  hse     構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_closing_se(hsrc, hdst, hse):
    r"""INT FVALGAPI fnFIE_region_closing_se( FHANDLE hsrc, FHANDLE* hdst, FHANDLE hse )
    構造要素指定closing(REGION版)

    Params:
    - [in]  hsrc    処理対象REGIONハンドル
    - [out] hdst    処理結果REGIONハンドルのアドレス
    - [in]  hse     構造要素のハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_closing_se(hsrc, hdst, hse)

def fnFIE_region_erosion(hsrc, hdst, filter_num, iMode) -> Any:
    r"""INT FVALGAPI fnFIE_region_erosion( FHANDLE hsrc, FHANDLE* hdst, INT filter_num, INT iMode )
    3×3erosion(REGION版)

    Params:
    - [in]  hsrc        処理対象REGIONハンドル
    - [out] hdst        処理結果REGIONハンドルのアドレス
    - [in]  filter_num  erosion実行回数(1以上)
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_erosion(hsrc, hdst, filter_num=1, iMode=0):
    r"""INT FVALGAPI fnFIE_region_erosion( FHANDLE hsrc, FHANDLE* hdst, INT filter_num, INT iMode )
    3×3erosion(REGION版)

    Params:
    - [in]  hsrc        処理対象REGIONハンドル
    - [out] hdst        処理結果REGIONハンドルのアドレス
    - [in]  filter_num  erosion実行回数(1以上)
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_erosion(hsrc, hdst, filter_num, iMode)

def fnFIE_region_dilation(hsrc, hdst, filter_num, iMode) -> Any:
    r"""INT FVALGAPI fnFIE_region_dilation( FHANDLE hsrc, FHANDLE* hdst, INT filter_num, INT iMode )
    3×3dilation(REGION版)

    Params:
    - [in]  hsrc        処理対象REGIONハンドル
    - [out] hdst        処理結果REGIONハンドルのアドレス
    - [in]  filter_num  dilation実行回数(1以上)
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_dilation(hsrc, hdst, filter_num=1, iMode=0):
    r"""INT FVALGAPI fnFIE_region_dilation( FHANDLE hsrc, FHANDLE* hdst, INT filter_num, INT iMode )
    3×3dilation(REGION版)

    Params:
    - [in]  hsrc        処理対象REGIONハンドル
    - [out] hdst        処理結果REGIONハンドルのアドレス
    - [in]  filter_num  dilation実行回数(1以上)
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_dilation(hsrc, hdst, filter_num, iMode)

def fnFIE_region_opening(hsrc, hdst, filter_num, iMode) -> Any:
    r"""INT FVALGAPI fnFIE_region_opening( FHANDLE hsrc, FHANDLE* hdst, INT filter_num, INT iMode )
    3×3SEによるopening(REGION版)

    Params:
    - [in]  hsrc        処理対象REGIONハンドル
    - [out] hdst        処理結果REGIONハンドルのアドレス
    - [in]  filter_num  erosion/dilation実行回数(1以上)
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_opening(hsrc, hdst, filter_num=1, iMode=0):
    r"""INT FVALGAPI fnFIE_region_opening( FHANDLE hsrc, FHANDLE* hdst, INT filter_num, INT iMode )
    3×3SEによるopening(REGION版)

    Params:
    - [in]  hsrc        処理対象REGIONハンドル
    - [out] hdst        処理結果REGIONハンドルのアドレス
    - [in]  filter_num  erosion/dilation実行回数(1以上)
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_opening(hsrc, hdst, filter_num, iMode)

def fnFIE_region_closing(hsrc, hdst, filter_num, iMode) -> Any:
    r"""INT FVALGAPI fnFIE_region_closing( FHANDLE hsrc, FHANDLE* hdst, INT filter_num, INT iMode )
    3×3SEによるclosing(REGION版)

    Params:
    - [in]  hsrc        処理対象REGIONハンドル
    - [out] hdst        処理結果REGIONハンドルのアドレス
    - [in]  filter_num  dilation/erosion実行回数(1以上)
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_closing(hsrc, hdst, filter_num=1, iMode=0):
    r"""INT FVALGAPI fnFIE_region_closing( FHANDLE hsrc, FHANDLE* hdst, INT filter_num, INT iMode )
    3×3SEによるclosing(REGION版)

    Params:
    - [in]  hsrc        処理対象REGIONハンドル
    - [out] hdst        処理結果REGIONハンドルのアドレス
    - [in]  filter_num  dilation/erosion実行回数(1以上)
    - [in]  iMode       近傍モード（0:８近傍 1:４近傍）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドルが指定されたため異常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_closing(hsrc, hdst, filter_num, iMode)

def fnFIE_region_set_connection(hreg, connection) -> Any:
    r"""INT FVALGAPI fnFIE_region_set_connection( FHANDLE hreg, INT connection )
    REGIONオブジェクトの連結性設定関数

    Params:
    - [in]  hreg        REGIONハンドル
    - [in]  connection  連結性
                                - 8 : 8連結
                                - 4 : 4連結

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータ
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_set_connection(hreg, connection):
    r"""INT FVALGAPI fnFIE_region_set_connection( FHANDLE hreg, INT connection )
    REGIONオブジェクトの連結性設定関数

    Params:
    - [in]  hreg        REGIONハンドル
    - [in]  connection  連結性
                                - 8 : 8連結
                                - 4 : 4連結

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータ
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_set_connection(hreg, connection)

def fnFIE_region_get_area(hreg, area) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_area( FHANDLE hreg, UINT* area )
    REGION特徴量：面積

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] area    面積

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    - area に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_area(hreg, area):
    r"""INT FVALGAPI fnFIE_region_get_area( FHANDLE hreg, UINT* area )
    REGION特徴量：面積

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] area    面積

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    - area に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_area(hreg, area)

def fnFIE_region_get_xyrange(hreg, xmin, xmax, ymin, ymax) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_xyrange( FHANDLE hreg, INT* xmin, INT* xmax, INT* ymin, INT* ymax )
    REGION特徴量：座標の最大最小値

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] xmin    Ｘ座標最小値
    - [out] xmax    Ｘ座標最大値
    - [out] ymin    Ｙ座標最小値
    - [out] ymax    Ｙ座標最大値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  xmin,  xmax,  ymin,  ymax に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_xyrange(hreg, xmin=DUMMY_INT, xmax=DUMMY_INT, ymin=DUMMY_INT, ymax=DUMMY_INT):
    r"""INT FVALGAPI fnFIE_region_get_xyrange( FHANDLE hreg, INT* xmin, INT* xmax, INT* ymin, INT* ymax )
    REGION特徴量：座標の最大最小値

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] xmin    Ｘ座標最小値
    - [out] xmax    Ｘ座標最大値
    - [out] ymin    Ｙ座標最小値
    - [out] ymax    Ｙ座標最大値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  xmin,  xmax,  ymin,  ymax に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_xyrange(hreg, xmin, xmax, ymin, ymax)

def fnFIE_region_get_maxminpos(hreg, xmin_at_ymin, xmax_at_ymax, ymin_at_xmax, ymax_at_xmin) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_maxminpos( FHANDLE hreg, INT* xmin_at_ymin, INT* xmax_at_ymax, INT* ymin_at_xmax, INT* ymax_at_xmin )
    REGION特徴量：座標の最大最小位置

    Params:
    - [in]  hreg            REGIONハンドル
    - [out] xmin_at_ymin    Ｙの最小位置におけるＸの最小値
    - [out] xmax_at_ymax    Ｙの最大位置におけるＸの最大値
    - [out] ymin_at_xmax    Ｘの最大位置におけるＹの最小値
    - [out] ymax_at_xmin    Ｘの最小位置におけるＹの最大値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  xmin_at_ymin,  xmax_at_ymax,  ymin_at_xmax,  ymax_at_xmin に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_maxminpos(hreg, xmin_at_ymin=DUMMY_INT, xmax_at_ymax=DUMMY_INT, ymin_at_xmax=DUMMY_INT, ymax_at_xmin=DUMMY_INT):
    r"""INT FVALGAPI fnFIE_region_get_maxminpos( FHANDLE hreg, INT* xmin_at_ymin, INT* xmax_at_ymax, INT* ymin_at_xmax, INT* ymax_at_xmin )
    REGION特徴量：座標の最大最小位置

    Params:
    - [in]  hreg            REGIONハンドル
    - [out] xmin_at_ymin    Ｙの最小位置におけるＸの最小値
    - [out] xmax_at_ymax    Ｙの最大位置におけるＸの最大値
    - [out] ymin_at_xmax    Ｘの最大位置におけるＹの最小値
    - [out] ymax_at_xmin    Ｘの最小位置におけるＹの最大値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  xmin_at_ymin,  xmax_at_ymax,  ymin_at_xmax,  ymax_at_xmin に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_maxminpos(hreg, xmin_at_ymin, xmax_at_ymax, ymin_at_xmax, ymax_at_xmin)

def fnFIE_region_get_xydiff(hreg, xdiff, ydiff) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_xydiff( FHANDLE hreg, INT* xdiff, INT* ydiff )
    REGION特徴量：外接矩形サイズ取得（xdiff、ydiff）

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] xdiff   外接矩形横サイズ
    - [out] ydiff   外接矩形縦サイズ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  xdiff,  ydiff に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_xydiff(hreg, xdiff=DUMMY_INT, ydiff=DUMMY_INT):
    r"""INT FVALGAPI fnFIE_region_get_xydiff( FHANDLE hreg, INT* xdiff, INT* ydiff )
    REGION特徴量：外接矩形サイズ取得（xdiff、ydiff）

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] xdiff   外接矩形横サイズ
    - [out] ydiff   外接矩形縦サイズ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  xdiff,  ydiff に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_xydiff(hreg, xdiff, ydiff)

def fnFIE_region_get_rect1_area(hreg, area) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_rect1_area( FHANDLE hreg, UINT* area )
    REGION特徴量：外接矩形面積

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] area    外接矩形面積

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  area に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_rect1_area(hreg, area):
    r"""INT FVALGAPI fnFIE_region_get_rect1_area( FHANDLE hreg, UINT* area )
    REGION特徴量：外接矩形面積

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] area    外接矩形面積

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  area に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_rect1_area(hreg, area)

def fnFIE_region_get_rect1_lratio(hreg, lratio) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_rect1_lratio( FHANDLE hreg, DOUBLE* lratio )
    REGION特徴量：外接矩形縦横比

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] lratio  外接矩形縦横比

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  lratio に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_rect1_lratio(hreg, lratio):
    r"""INT FVALGAPI fnFIE_region_get_rect1_lratio( FHANDLE hreg, DOUBLE* lratio )
    REGION特徴量：外接矩形縦横比

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] lratio  外接矩形縦横比

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  lratio に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_rect1_lratio(hreg, lratio)

def fnFIE_region_get_rect1_sratio(hreg, sratio) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_rect1_sratio( FHANDLE hreg, DOUBLE* sratio )
    REGION特徴量：外接矩形面積比

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] sratio  外接矩形面積比

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  sratio に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_rect1_sratio(hreg, sratio):
    r"""INT FVALGAPI fnFIE_region_get_rect1_sratio( FHANDLE hreg, DOUBLE* sratio )
    REGION特徴量：外接矩形面積比

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] sratio  外接矩形面積比

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  sratio に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_rect1_sratio(hreg, sratio)

def fnFIE_region_get_moment1(hreg, sumx, sumy) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_moment1( FHANDLE hreg, DLONG* sumx, DLONG* sumy )
    REGION特徴量：１次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] sumx    X方向１次モーメント
    - [out] sumy    Y方向１次モーメント

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  sumx,  sumy に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_moment1(hreg, sumx=DUMMY_DLONG, sumy=DUMMY_DLONG):
    r"""INT FVALGAPI fnFIE_region_get_moment1( FHANDLE hreg, DLONG* sumx, DLONG* sumy )
    REGION特徴量：１次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] sumx    X方向１次モーメント
    - [out] sumy    Y方向１次モーメント

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  sumx,  sumy に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_moment1(hreg, sumx, sumy)

def fnFIE_region_get_moment2(hreg, sumx2, sumy2, sumxy) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_moment2( FHANDLE hreg, UDLONG* sumx2, UDLONG* sumy2, DLONG* sumxy )
    REGION特徴量：２次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] sumx2   X方向２次モーメント
    - [out] sumy2   Y方向２次モーメント
    - [out] sumxy   XY方向２次モーメント

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  sumx2,  sumy2,  sumxy に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_moment2(hreg, sumx2=DUMMY_UDLONG, sumy2=DUMMY_UDLONG, sumxy=DUMMY_UDLONG):
    r"""INT FVALGAPI fnFIE_region_get_moment2( FHANDLE hreg, UDLONG* sumx2, UDLONG* sumy2, DLONG* sumxy )
    REGION特徴量：２次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] sumx2   X方向２次モーメント
    - [out] sumy2   Y方向２次モーメント
    - [out] sumxy   XY方向２次モーメント

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  sumx2,  sumy2,  sumxy に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_moment2(hreg, sumx2, sumy2, sumxy)

def fnFIE_region_calc_central_moment2(hreg, mg20, mg02, mg11) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_central_moment2( FHANDLE hreg, DOUBLE* mg20, DOUBLE* mg02, DOUBLE* mg11 )
    REGION特徴量：重心２次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] mg20    X方向重心２次モーメント
    - [out] mg02    Y方向重心２次モーメント
    - [out] mg11    XY方向重心２次モーメント

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  mg20,  mg02,  mg11 に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_central_moment2(hreg, mg20=DUMMY_DOUBLE, mg02=DUMMY_DOUBLE, mg11=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_region_calc_central_moment2( FHANDLE hreg, DOUBLE* mg20, DOUBLE* mg02, DOUBLE* mg11 )
    REGION特徴量：重心２次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] mg20    X方向重心２次モーメント
    - [out] mg02    Y方向重心２次モーメント
    - [out] mg11    XY方向重心２次モーメント

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  mg20,  mg02,  mg11 に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_central_moment2(hreg, mg20, mg02, mg11)

def fnFIE_region_calc_moment3(hreg, m30, m03, m21, m12) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_moment3( FHANDLE hreg, DOUBLE* m30, DOUBLE* m03, DOUBLE* m21, DOUBLE* m12 )
    REGION特徴量：３次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] m30     $ M_{30} $
    - [out] m03     $ M_{03} $
    - [out] m21     $ M_{21} $
    - [out] m12     $ M_{12} $

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  m30,  m03,  m21,  m12 に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_moment3(hreg, m30=DUMMY_DOUBLE, m03=DUMMY_DOUBLE, m21=DUMMY_DOUBLE, m12=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_region_calc_moment3( FHANDLE hreg, DOUBLE* m30, DOUBLE* m03, DOUBLE* m21, DOUBLE* m12 )
    REGION特徴量：３次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] m30     $ M_{30} $
    - [out] m03     $ M_{03} $
    - [out] m21     $ M_{21} $
    - [out] m12     $ M_{12} $

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  m30,  m03,  m21,  m12 に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_moment3(hreg, m30, m03, m21, m12)

def fnFIE_region_calc_central_moment3(hreg, mg30, mg03, mg21, mg12) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_central_moment3( FHANDLE hreg, DOUBLE* mg30, DOUBLE* mg03, DOUBLE* mg21, DOUBLE* mg12 )
    REGION特徴量：重心３次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] mg30    $ MG_{30} $
    - [out] mg03    $ MG_{03} $
    - [out] mg21    $ MG_{21} $
    - [out] mg12    $ MG_{12} $

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  m30,  m03,  m21,  m12 に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_central_moment3(hreg, mg30=DUMMY_DOUBLE, mg03=DUMMY_DOUBLE, mg21=DUMMY_DOUBLE, mg12=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_region_calc_central_moment3( FHANDLE hreg, DOUBLE* mg30, DOUBLE* mg03, DOUBLE* mg21, DOUBLE* mg12 )
    REGION特徴量：重心３次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] mg30    $ MG_{30} $
    - [out] mg03    $ MG_{03} $
    - [out] mg21    $ MG_{21} $
    - [out] mg12    $ MG_{12} $

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  m30,  m03,  m21,  m12 に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_central_moment3(hreg, mg30, mg03, mg21, mg12)

def fnFIE_region_calc_moment(hreg, xn, yn, m) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_moment( FHANDLE hreg, INT xn, INT yn, DOUBLE* m )
    REGION特徴量：Ｎ次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [in]  xn      ｘ次数(0以上)
    - [in]  yn      ｙ次数(0以上)
    - [out] m       モーメント $ M $

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  xn,  yn に 0 より小さい値が指定された
                                    -  m に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_moment(hreg, xn, yn, m):
    r"""INT FVALGAPI fnFIE_region_calc_moment( FHANDLE hreg, INT xn, INT yn, DOUBLE* m )
    REGION特徴量：Ｎ次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [in]  xn      ｘ次数(0以上)
    - [in]  yn      ｙ次数(0以上)
    - [out] m       モーメント $ M $

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  xn,  yn に 0 より小さい値が指定された
                                    -  m に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_moment(hreg, xn, yn, m)

def fnFIE_region_calc_central_moment(hreg, xn, yn, mg) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_central_moment( FHANDLE hreg, INT xn, INT yn, DOUBLE* mg )
    REGION特徴量：重心Ｎ次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [in]  xn      ｘ次数(0以上)
    - [in]  yn      ｙ次数(0以上)
    - [out] mg      重心モーメント $ MG $

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  xn,  yn に 0 より小さい値が指定された
                                    -  m に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_central_moment(hreg, xn, yn, mg):
    r"""INT FVALGAPI fnFIE_region_calc_central_moment( FHANDLE hreg, INT xn, INT yn, DOUBLE* mg )
    REGION特徴量：重心Ｎ次モーメント

    Params:
    - [in]  hreg    REGIONハンドル
    - [in]  xn      ｘ次数(0以上)
    - [in]  yn      ｙ次数(0以上)
    - [out] mg      重心モーメント $ MG $

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  xn,  yn に 0 より小さい値が指定された
                                    -  m に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_central_moment(hreg, xn, yn, mg)

def fnFIE_region_calc_hu_moments(hreg, h) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_hu_moments( FHANDLE hreg, DOUBLE* h )
    REGION特徴量：Huモーメント不変量

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] h        Huモーメント不変量の出力先配列。サイズは7

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  h に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_hu_moments(hreg, h):
    r"""INT FVALGAPI fnFIE_region_calc_hu_moments( FHANDLE hreg, DOUBLE* h )
    REGION特徴量：Huモーメント不変量

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] h        Huモーメント不変量の出力先配列。サイズは7

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  h に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_hu_moments(hreg, h)

def fnFIE_region_get_center(hreg, centerx, centery) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_center( FHANDLE hreg, DOUBLE* centerx, DOUBLE* centery )
    REGION特徴量：重心

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] centerx     重心のX座標
    - [out] centery     重心のY座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  centerx,  centery に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_center(hreg, centerx=DUMMY_DOUBLE, centery=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_region_get_center( FHANDLE hreg, DOUBLE* centerx, DOUBLE* centery )
    REGION特徴量：重心

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] centerx     重心のX座標
    - [out] centery     重心のY座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  centerx,  centery に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_center(hreg, centerx, centery)

def fnFIE_region_get_equivalent_ellipse(hreg, majoraxis, minoraxis, theta, aratio) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_equivalent_ellipse( FHANDLE hreg, DOUBLE* majoraxis, DOUBLE* minoraxis, DOUBLE* theta, DOUBLE* aratio )
    REGION特徴量：等価楕円

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] majoraxis   主軸半径
    - [out] minoraxis   副軸半径
    - [out] theta       傾き（主軸とX軸がなす角度）単位：ラジアン ( -π/2 <=  theta <= π/2 )
    - [out] aratio      主軸副軸長比 : 副軸長／主軸長

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  majoraxis,  minoraxis,  theta,  aratio に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_equivalent_ellipse(hreg, majoraxis=DUMMY_DOUBLE, minoraxis=DUMMY_DOUBLE, theta=DUMMY_DOUBLE, aratio=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_region_get_equivalent_ellipse( FHANDLE hreg, DOUBLE* majoraxis, DOUBLE* minoraxis, DOUBLE* theta, DOUBLE* aratio )
    REGION特徴量：等価楕円

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] majoraxis   主軸半径
    - [out] minoraxis   副軸半径
    - [out] theta       傾き（主軸とX軸がなす角度）単位：ラジアン ( -π/2 <=  theta <= π/2 )
    - [out] aratio      主軸副軸長比 : 副軸長／主軸長

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  majoraxis,  minoraxis,  theta,  aratio に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_equivalent_ellipse(hreg, majoraxis, minoraxis, theta, aratio)

def fnFIE_region_get_rect2_size(hreg, lsize, wsize) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_rect2_size( FHANDLE hreg, DOUBLE* lsize, DOUBLE* wsize )
    REGION特徴量：外接長方形

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] lsize   外接長方形横長
    - [out] wsize   外接長方形縦長

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  lsize,  wsize に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_rect2_size(hreg, lsize=DUMMY_DOUBLE, wsize=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_region_get_rect2_size( FHANDLE hreg, DOUBLE* lsize, DOUBLE* wsize )
    REGION特徴量：外接長方形

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] lsize   外接長方形横長
    - [out] wsize   外接長方形縦長

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  lsize,  wsize に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_rect2_size(hreg, lsize, wsize)

def fnFIE_region_get_rect2_area(hreg, area) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_rect2_area( FHANDLE hreg, DOUBLE* area )
    REGION特徴量：外接長方形面積

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] area    外接長方形面積

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  area に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_rect2_area(hreg, area):
    r"""INT FVALGAPI fnFIE_region_get_rect2_area( FHANDLE hreg, DOUBLE* area )
    REGION特徴量：外接長方形面積

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] area    外接長方形面積

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  area に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_rect2_area(hreg, area)

def fnFIE_region_get_rect2_lratio(hreg, lratio) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_rect2_lratio( FHANDLE hreg, DOUBLE* lratio )
    REGION特徴量：外接長方形縦横比

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] lratio  外接長方形縦横比

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  lratio に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_rect2_lratio(hreg, lratio):
    r"""INT FVALGAPI fnFIE_region_get_rect2_lratio( FHANDLE hreg, DOUBLE* lratio )
    REGION特徴量：外接長方形縦横比

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] lratio  外接長方形縦横比

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  lratio に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_rect2_lratio(hreg, lratio)

def fnFIE_region_get_rect2_sratio(hreg, sratio) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_rect2_sratio( FHANDLE hreg, DOUBLE* sratio )
    REGION特徴量：外接長方形面積比

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] sratio  外接長方形縦横比

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  sratio に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_rect2_sratio(hreg, sratio):
    r"""INT FVALGAPI fnFIE_region_get_rect2_sratio( FHANDLE hreg, DOUBLE* sratio )
    REGION特徴量：外接長方形面積比

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] sratio  外接長方形縦横比

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  sratio に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_rect2_sratio(hreg, sratio)

def fnFIE_region_get_perimeter(hreg, perimeter) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_perimeter( FHANDLE hreg, DOUBLE* perimeter )
    REGION特徴量：周囲長計測

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] perimeter   周囲長

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_perimeter(hreg, perimeter):
    r"""INT FVALGAPI fnFIE_region_get_perimeter( FHANDLE hreg, DOUBLE* perimeter )
    REGION特徴量：周囲長計測

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] perimeter   周囲長

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_perimeter(hreg, perimeter)

def fnFIE_region_get_distance_to_boundary(hreg, dpmin, dpmax, dpave, dpsigma) -> Any:
    r"""INT FVALGAPI fnFIE_region_get_distance_to_boundary( FHANDLE hreg, DOUBLE* dpmin, DOUBLE* dpmax, DOUBLE* dpave, DOUBLE* dpsigma )
    REGION特徴量：外周距離

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] dpmin       外周距離最小値
    - [out] dpmax       外周距離最大値
    - [out] dpave       外周距離平均値
    - [out] dpsigma     外周距離標準偏差値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  dpmin,  dpmax,  dpave,  dpsigma に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_get_distance_to_boundary(hreg, dpmin=DUMMY_DOUBLE, dpmax=DUMMY_DOUBLE, dpave=DUMMY_DOUBLE, dpsigma=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_region_get_distance_to_boundary( FHANDLE hreg, DOUBLE* dpmin, DOUBLE* dpmax, DOUBLE* dpave, DOUBLE* dpsigma )
    REGION特徴量：外周距離

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] dpmin       外周距離最小値
    - [out] dpmax       外周距離最大値
    - [out] dpave       外周距離平均値
    - [out] dpsigma     外周距離標準偏差値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  dpmin,  dpmax,  dpave,  dpsigma に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_get_distance_to_boundary(hreg, dpmin, dpmax, dpave, dpsigma)

def fnFIE_region_calc_equivalent_disk(hreg, diameter) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_equivalent_disk( FHANDLE hreg, DOUBLE* diameter )
    REGION特徴量：面積等価円

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] diameter    面積等価円直径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  diameter に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_equivalent_disk(hreg, diameter):
    r"""INT FVALGAPI fnFIE_region_calc_equivalent_disk( FHANDLE hreg, DOUBLE* diameter )
    REGION特徴量：面積等価円

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] diameter    面積等価円直径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  diameter に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_equivalent_disk(hreg, diameter)

def fnFIE_region_calc_equivalent_circle(hreg, diameter) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_equivalent_circle( FHANDLE hreg, DOUBLE* diameter )
    REGION特徴量：周囲長等価円

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] diameter    周囲長等価円直径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  diameter に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_equivalent_circle(hreg, diameter):
    r"""INT FVALGAPI fnFIE_region_calc_equivalent_circle( FHANDLE hreg, DOUBLE* diameter )
    REGION特徴量：周囲長等価円

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] diameter    周囲長等価円直径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  diameter に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_equivalent_circle(hreg, diameter)

def fnFIE_region_calc_circularity1(hreg, circularity) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_circularity1( FHANDLE hreg, DOUBLE* circularity )
    REGION特徴量：真円度＃１

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] circularity 真円度＃１

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  circularity に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_circularity1(hreg, circularity):
    r"""INT FVALGAPI fnFIE_region_calc_circularity1( FHANDLE hreg, DOUBLE* circularity )
    REGION特徴量：真円度＃１

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] circularity 真円度＃１

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  circularity に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_circularity1(hreg, circularity)

def fnFIE_region_calc_circularity2(hreg, circularity) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_circularity2( FHANDLE hreg, DOUBLE* circularity )
    REGION特徴量：真円度＃２

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] circularity 真円度＃２

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  circularity に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_circularity2(hreg, circularity):
    r"""INT FVALGAPI fnFIE_region_calc_circularity2( FHANDLE hreg, DOUBLE* circularity )
    REGION特徴量：真円度＃２

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] circularity 真円度＃２

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  circularity に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_circularity2(hreg, circularity)

def fnFIE_region_calc_circularity3(hreg, circularity) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_circularity3( FHANDLE hreg, DOUBLE* circularity )
    REGION特徴量：真円度＃３

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] circularity 真円度＃３

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  circularity に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_circularity3(hreg, circularity):
    r"""INT FVALGAPI fnFIE_region_calc_circularity3( FHANDLE hreg, DOUBLE* circularity )
    REGION特徴量：真円度＃３

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] circularity 真円度＃３

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  circularity に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_circularity3(hreg, circularity)

def fnFIE_region_calc_convexfeature(hreg, convex_area, convex_perim) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_convexfeature( FHANDLE hreg, DOUBLE* convex_area, DOUBLE* convex_perim )
    REGION特徴量：凸包面積・周囲長

    Params:
    - [in]  hreg            REGIONハンドル
    - [out] convex_area     凸包面積
    - [out] convex_perim    凸包周囲長

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  convex_area,  convex_perim に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_convexfeature(hreg, convex_area=DUMMY_DOUBLE, convex_perim=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_region_calc_convexfeature( FHANDLE hreg, DOUBLE* convex_area, DOUBLE* convex_perim )
    REGION特徴量：凸包面積・周囲長

    Params:
    - [in]  hreg            REGIONハンドル
    - [out] convex_area     凸包面積
    - [out] convex_perim    凸包周囲長

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  convex_area,  convex_perim に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_convexfeature(hreg, convex_area, convex_perim)

def fnFIE_region_calc_convexratio(hreg, convex_arearatio, convex_perimratio) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_convexratio( FHANDLE hreg, DOUBLE* convex_arearatio, DOUBLE* convex_perimratio )
    REGION特徴量：凸包面積比・周囲長比

    Params:
    - [in]  hreg                REGIONハンドル
    - [out] convex_arearatio    凸包面積比
    - [out] convex_perimratio   凸包周囲長比

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  convex_arearatio,  convex_perimratio に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_convexratio(hreg, convex_arearatio=DUMMY_DOUBLE, convex_perimratio=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_region_calc_convexratio( FHANDLE hreg, DOUBLE* convex_arearatio, DOUBLE* convex_perimratio )
    REGION特徴量：凸包面積比・周囲長比

    Params:
    - [in]  hreg                REGIONハンドル
    - [out] convex_arearatio    凸包面積比
    - [out] convex_perimratio   凸包周囲長比

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  convex_arearatio,  convex_perimratio に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_convexratio(hreg, convex_arearatio, convex_perimratio)

def fnFIE_region_calc_feret_diameter_maxmin(hreg, feretmax, fmax_theta, feretmin, fmin_theta) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_feret_diameter_maxmin( FHANDLE hreg, DOUBLE* feretmax, DOUBLE* fmax_theta, DOUBLE* feretmin, DOUBLE* fmin_theta )
    REGION特徴量：最大フェレ径、最小フェレ径

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] feretmax    最大フェレ径
    - [out] fmax_theta  最大フェレ径の角度
    - [out] feretmin    最小フェレ径
    - [out] fmin_theta  最小フェレ径の角度

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  feretmax,  fmax_theta,  feretmin,  fmin_theta に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_feret_diameter_maxmin(hreg, feretmax=DUMMY_DOUBLE, fmax_theta=DUMMY_DOUBLE, feretmin=DUMMY_DOUBLE, fmin_theta=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_region_calc_feret_diameter_maxmin( FHANDLE hreg, DOUBLE* feretmax, DOUBLE* fmax_theta, DOUBLE* feretmin, DOUBLE* fmin_theta )
    REGION特徴量：最大フェレ径、最小フェレ径

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] feretmax    最大フェレ径
    - [out] fmax_theta  最大フェレ径の角度
    - [out] feretmin    最小フェレ径
    - [out] fmin_theta  最小フェレ径の角度

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  feretmax,  fmax_theta,  feretmin,  fmin_theta に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_feret_diameter_maxmin(hreg, feretmax, fmax_theta, feretmin, fmin_theta)

def fnFIE_region_calc_feret_diameter(hreg, theta, mode, diameter) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_feret_diameter( FHANDLE hreg, DOUBLE theta, INT mode, DOUBLE* diameter )
    REGION特徴量：指定角度フェレ径計測

    Params:
    - [in]  hreg        REGIONハンドル
    - [in]  theta       フェレ径を計測するときの角度（フェレ径計測軸とx軸がなす角度）単位：ラジアン
    - [in]  mode        画素領域モード
                           - 0 : 点で計測
                           - 1 : 矩形の広がりを持つ点で計測
    - [out] diameter    フェレ径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    - diameter に NULL が指定された
                                    - mode に 0 or 1 以外が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_feret_diameter(hreg, theta, mode, diameter):
    r"""INT FVALGAPI fnFIE_region_calc_feret_diameter( FHANDLE hreg, DOUBLE theta, INT mode, DOUBLE* diameter )
    REGION特徴量：指定角度フェレ径計測

    Params:
    - [in]  hreg        REGIONハンドル
    - [in]  theta       フェレ径を計測するときの角度（フェレ径計測軸とx軸がなす角度）単位：ラジアン
    - [in]  mode        画素領域モード
                           - 0 : 点で計測
                           - 1 : 矩形の広がりを持つ点で計測
    - [out] diameter    フェレ径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    - diameter に NULL が指定された
                                    - mode に 0 or 1 以外が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_feret_diameter(hreg, theta, mode, diameter)

def fnFIE_region_calc_convex2d(hreg, ppHull, verNum) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_convex2d( FHANDLE hreg, PNT_T** ppHull, UINT* verNum )
    REGION特徴量：凸包生成

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] ppHull      出力される凸包の頂点列（  *ppHull は必ずNULLでなければならない）
    - [out] verNum      出力される凸包の頂点の個数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  ppHull,  verNum に NULL が指定された
                                    -  *ppHull == NULL ではない
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_convex2d(hreg, ppHull, verNum):
    r"""INT FVALGAPI fnFIE_region_calc_convex2d( FHANDLE hreg, PNT_T** ppHull, UINT* verNum )
    REGION特徴量：凸包生成

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] ppHull      出力される凸包の頂点列（  *ppHull は必ずNULLでなければならない）
    - [out] verNum      出力される凸包の頂点の個数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  ppHull,  verNum に NULL が指定された
                                    -  *ppHull == NULL ではない
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_convex2d(hreg, ppHull, verNum)

def fnFIE_region_calc_rect2pos(hreg, points) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_rect2pos( FHANDLE hreg, DPNT_T* points )
    REGION特徴量：外接長方形の頂点

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] points      外接長方形の４頂点の点列。サイズ４

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  points に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_rect2pos(hreg, points):
    r"""INT FVALGAPI fnFIE_region_calc_rect2pos( FHANDLE hreg, DPNT_T* points )
    REGION特徴量：外接長方形の頂点

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] points      外接長方形の４頂点の点列。サイズ４

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  points に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_rect2pos(hreg, points)

def fnFIE_region_calc_bounding_rotated_rect_pos(hreg, theta, points) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_bounding_rotated_rect_pos( FHANDLE hreg, DOUBLE theta, DPNT_T* points )
    REGION特徴量：指定角度外接長方形の頂点

    Params:
    - [in]  hreg        REGIONハンドル
    - [in]  theta       外接長方形の角度（外接長方形のある一辺とx軸がなす角度）単位：ラジアン
    - [out] points      外接長方形の４頂点の点列。サイズ４

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  points に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_bounding_rotated_rect_pos(hreg, theta, points):
    r"""INT FVALGAPI fnFIE_region_calc_bounding_rotated_rect_pos( FHANDLE hreg, DOUBLE theta, DPNT_T* points )
    REGION特徴量：指定角度外接長方形の頂点

    Params:
    - [in]  hreg        REGIONハンドル
    - [in]  theta       外接長方形の角度（外接長方形のある一辺とx軸がなす角度）単位：ラジアン
    - [out] points      外接長方形の４頂点の点列。サイズ４

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  points に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_bounding_rotated_rect_pos(hreg, theta, points)

def fnFIE_region_calc_circumcircle(hreg, center, radius) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_circumcircle( FHANDLE hreg, DPNT_T* center, DOUBLE* radius )
    REGION特徴量：最小外接円

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] center      最小外接円の中心
    - [out] radius      最小外接円の半径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  center,  radius に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_circumcircle(hreg, center, radius):
    r"""INT FVALGAPI fnFIE_region_calc_circumcircle( FHANDLE hreg, DPNT_T* center, DOUBLE* radius )
    REGION特徴量：最小外接円

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] center      最小外接円の中心
    - [out] radius      最小外接円の半径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが指定された
                                    -  center,  radius に NULL が指定された
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_circumcircle(hreg, center, radius)

def fnFIE_region_calc_boundary(hreg, pnts, pnum) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_boundary( FHANDLE hreg, PNT_T** pnts, UINT* pnum )
    REGION境界点抽出

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] pnts    出力点列の先頭ポインタを格納するアドレス
                        関数エントリー時 *pnts == NULL でなければならない
    - [out] pnum    出力点列の点の数。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_INVALID_PARAM       パラメータ異常
                                      - パラメータに NULL ポインタが渡された。
                                      -  *pnts が NULL でない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_boundary(hreg, pnts, pnum):
    r"""INT FVALGAPI fnFIE_region_calc_boundary( FHANDLE hreg, PNT_T** pnts, UINT* pnum )
    REGION境界点抽出

    Params:
    - [in]  hreg    REGIONハンドル
    - [out] pnts    出力点列の先頭ポインタを格納するアドレス
                        関数エントリー時 *pnts == NULL でなければならない
    - [out] pnum    出力点列の点の数。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_INVALID_PARAM       パラメータ異常
                                      - パラメータに NULL ポインタが渡された。
                                      -  *pnts が NULL でない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_boundary(hreg, pnts, pnum)

def fnFIE_region_calc_boundary_ex(hreg, ext_pnts, ext_pnum, int_pnts, int_pnum) -> Any:
    r"""INT FVALGAPI fnFIE_region_calc_boundary_ex( FHANDLE hreg, PNT_T** ext_pnts, UINT* ext_pnum, PNT_T** int_pnts, UINT* int_pnum )
    REGION境界点抽出(拡張版)

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] ext_pnts    external boundary の出力点列の先頭ポインタを格納するアドレス
                            不要な場合は  ext_pnts に NULL を渡す。  ext_pnts != NULL の場合、
                            関数エントリー時  *ext_pnts == NULL でなければなりません
    - [out] ext_pnum     ext_pnts に出力された点の数
                             ext_pnts == NULL の場合、このパラメータは参照されません
    - [out] int_pnts    出力点列の先頭ポインタを格納するアドレス
                            不要な場合は  int_pnts に NULL を渡す。  int_pnts != NULL の場合、
                            関数エントリー時  *int_pnts == NULL でなければなりません
    - [out] int_pnum     int_pnts に出力された点の数
                             int_pnts == NULL の場合、このパラメータは参照されません

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_INVALID_PARAM       パラメータ異常
                                      - パラメータに NULL ポインタが渡された。
                                      -  ext_pnts と  int_pnts がともに NULL
                                      -  *ext_pnts 又は *int_pnts が NULL でない
                                      -  ext_pnum 又は  int_pnum が NULL
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_calc_boundary_ex(hreg, ext_pnts, ext_pnum, int_pnts, int_pnum):
    r"""INT FVALGAPI fnFIE_region_calc_boundary_ex( FHANDLE hreg, PNT_T** ext_pnts, UINT* ext_pnum, PNT_T** int_pnts, UINT* int_pnum )
    REGION境界点抽出(拡張版)

    Params:
    - [in]  hreg        REGIONハンドル
    - [out] ext_pnts    external boundary の出力点列の先頭ポインタを格納するアドレス
                            不要な場合は  ext_pnts に NULL を渡す。  ext_pnts != NULL の場合、
                            関数エントリー時  *ext_pnts == NULL でなければなりません
    - [out] ext_pnum     ext_pnts に出力された点の数
                             ext_pnts == NULL の場合、このパラメータは参照されません
    - [out] int_pnts    出力点列の先頭ポインタを格納するアドレス
                            不要な場合は  int_pnts に NULL を渡す。  int_pnts != NULL の場合、
                            関数エントリー時  *int_pnts == NULL でなければなりません
    - [out] int_pnum     int_pnts に出力された点の数
                             int_pnts == NULL の場合、このパラメータは参照されません

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  不正なハンドル
    - F_ERR_INVALID_PARAM       パラメータ異常
                                      - パラメータに NULL ポインタが渡された。
                                      -  ext_pnts と  int_pnts がともに NULL
                                      -  *ext_pnts 又は *int_pnts が NULL でない
                                      -  ext_pnum 又は  int_pnum が NULL
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_calc_boundary_ex(hreg, ext_pnts, ext_pnum, int_pnts, int_pnum)

def fnFIE_img_sumpixel(himg, hreg, sumpixel) -> Any:
    r"""INT FVALGAPI fnFIE_img_sumpixel( FHANDLE himg, FHANDLE hreg, DOUBLE* sumpixel )
    画像特徴量：輝度値の総和

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] sumpixel    輝度総和

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_sumpixel(himg, hreg, sumpixel):
    r"""INT FVALGAPI fnFIE_img_sumpixel( FHANDLE himg, FHANDLE hreg, DOUBLE* sumpixel )
    画像特徴量：輝度値の総和

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] sumpixel    輝度総和

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_sumpixel(himg, hreg, sumpixel)

def fnFIE_img_minpixel(himg, hreg, minpixel) -> Any:
    r"""INT FVALGAPI fnFIE_img_minpixel( FHANDLE himg, FHANDLE hreg, DOUBLE* minpixel )
    画像特徴量：輝度値の最小値

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] minpixel    輝度最小値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_minpixel(himg, hreg, minpixel):
    r"""INT FVALGAPI fnFIE_img_minpixel( FHANDLE himg, FHANDLE hreg, DOUBLE* minpixel )
    画像特徴量：輝度値の最小値

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] minpixel    輝度最小値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_minpixel(himg, hreg, minpixel)

def fnFIE_img_maxpixel(himg, hreg, maxpixel) -> Any:
    r"""INT FVALGAPI fnFIE_img_maxpixel( FHANDLE himg, FHANDLE hreg, DOUBLE* maxpixel )
    画像特徴量：輝度値の最大値

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] maxpixel    輝度最大値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_maxpixel(himg, hreg, maxpixel):
    r"""INT FVALGAPI fnFIE_img_maxpixel( FHANDLE himg, FHANDLE hreg, DOUBLE* maxpixel )
    画像特徴量：輝度値の最大値

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] maxpixel    輝度最大値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_maxpixel(himg, hreg, maxpixel)

def fnFIE_img_meanpixel(himg, hreg, meanpixel) -> Any:
    r"""INT FVALGAPI fnFIE_img_meanpixel( FHANDLE himg, FHANDLE hreg, DOUBLE* meanpixel )
    画像特徴量：輝度値の平均値

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] meanpixel   輝度平均値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_meanpixel(himg, hreg, meanpixel):
    r"""INT FVALGAPI fnFIE_img_meanpixel( FHANDLE himg, FHANDLE hreg, DOUBLE* meanpixel )
    画像特徴量：輝度値の平均値

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] meanpixel   輝度平均値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_meanpixel(himg, hreg, meanpixel)

def fnFIE_img_sumpixel_square(himg, hreg, sumpixel2) -> Any:
    r"""INT FVALGAPI fnFIE_img_sumpixel_square( FHANDLE himg, FHANDLE hreg, DOUBLE* sumpixel2 )
    画像特徴量：輝度値の２乗和

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] sumpixel2   輝度２乗和

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_sumpixel_square(himg, hreg, sumpixel2):
    r"""INT FVALGAPI fnFIE_img_sumpixel_square( FHANDLE himg, FHANDLE hreg, DOUBLE* sumpixel2 )
    画像特徴量：輝度値の２乗和

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] sumpixel2   輝度２乗和

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_sumpixel_square(himg, hreg, sumpixel2)

def fnFIE_img_sigmapixel(himg, hreg, sigma) -> Any:
    r"""INT FVALGAPI fnFIE_img_sigmapixel( FHANDLE himg, FHANDLE hreg, DOUBLE* sigma )
    画像特徴量：輝度値の標準偏差

    Params:
    - [in]  himg    処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg    領域
    - [out] sigma   標準偏差

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_sigmapixel(himg, hreg, sigma):
    r"""INT FVALGAPI fnFIE_img_sigmapixel( FHANDLE himg, FHANDLE hreg, DOUBLE* sigma )
    画像特徴量：輝度値の標準偏差

    Params:
    - [in]  himg    処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg    領域
    - [out] sigma   標準偏差

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_sigmapixel(himg, hreg, sigma)

def fnFIE_img_pixelmoment1(himg, hreg, pixelsumx, pixelsumy) -> Any:
    r"""INT FVALGAPI fnFIE_img_pixelmoment1( FHANDLE himg, FHANDLE hreg, DOUBLE* pixelsumx, DOUBLE* pixelsumy )
    画像特徴量：１次濃淡モーメント

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] pixelsumx   Ｘ方向１次濃淡モーメント
    - [out] pixelsumy   Ｙ方向１次濃淡モーメント

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_pixelmoment1(himg, hreg, pixelsumx=DUMMY_DOUBLE, pixelsumy=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_img_pixelmoment1( FHANDLE himg, FHANDLE hreg, DOUBLE* pixelsumx, DOUBLE* pixelsumy )
    画像特徴量：１次濃淡モーメント

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] pixelsumx   Ｘ方向１次濃淡モーメント
    - [out] pixelsumy   Ｙ方向１次濃淡モーメント

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_pixelmoment1(himg, hreg, pixelsumx, pixelsumy)

def fnFIE_img_pixelmoment2(himg, hreg, pixelsumx2, pixelsumy2, pixelsumxy) -> Any:
    r"""INT FVALGAPI fnFIE_img_pixelmoment2( FHANDLE himg, FHANDLE hreg, DOUBLE* pixelsumx2, DOUBLE* pixelsumy2, DOUBLE* pixelsumxy )
    画像特徴量：２次濃淡モーメント

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] pixelsumx2  Ｘ方向２次濃淡モーメント
    - [out] pixelsumy2  Ｙ方向２次濃淡モーメント
    - [out] pixelsumxy  ＸＹ方向濃淡モーメント

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_pixelmoment2(himg, hreg, pixelsumx2=DUMMY_DOUBLE, pixelsumy2=DUMMY_DOUBLE, pixelsumxy=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_img_pixelmoment2( FHANDLE himg, FHANDLE hreg, DOUBLE* pixelsumx2, DOUBLE* pixelsumy2, DOUBLE* pixelsumxy )
    画像特徴量：２次濃淡モーメント

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] pixelsumx2  Ｘ方向２次濃淡モーメント
    - [out] pixelsumy2  Ｙ方向２次濃淡モーメント
    - [out] pixelsumxy  ＸＹ方向濃淡モーメント

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_pixelmoment2(himg, hreg, pixelsumx2, pixelsumy2, pixelsumxy)

def fnFIE_img_pixelcenter(himg, hreg, centerx, centery) -> Any:
    r"""INT FVALGAPI fnFIE_img_pixelcenter( FHANDLE himg, FHANDLE hreg, DOUBLE* centerx, DOUBLE* centery )
    画像特徴量：濃淡重心を求めます

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] centerx     濃淡重心のＸ座標
    - [out] centery     濃淡重心のＹ座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_pixelcenter(himg, hreg, centerx=DUMMY_DOUBLE, centery=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_img_pixelcenter( FHANDLE himg, FHANDLE hreg, DOUBLE* centerx, DOUBLE* centery )
    画像特徴量：濃淡重心を求めます

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [out] centerx     濃淡重心のＸ座標
    - [out] centery     濃淡重心のＹ座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_pixelcenter(himg, hreg, centerx, centery)

def fnFIE_img_pixelmoment(himg, hreg, orgnx, orgny, M10, M01, M20, M02, M11) -> Any:
    r"""INT FVALGAPI fnFIE_img_pixelmoment( FHANDLE himg, FHANDLE hreg, DOUBLE orgnx, DOUBLE orgny, DOUBLE* M10, DOUBLE* M01, DOUBLE* M20, DOUBLE* M02, DOUBLE* M11 )
    画像特徴量：指定座標を原点とする濃淡モーメント

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [in]  orgnx       濃淡モーメントを求めるときに原点とするＸ座標
    - [in]  orgny       濃淡モーメントを求めるときに原点とするＹ座標
    - [out] M10         Ｘ方向１次濃淡モーメント
    - [out] M01         Ｙ方向１次濃淡モーメント
    - [out] M20         Ｘ方向２次濃淡モーメント
    - [out] M02         Ｙ方向２次濃淡モーメント
    - [out] M11         ＸＹ方向２次濃淡モーメント

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_pixelmoment(himg, hreg, orgnx, orgny, M10=DUMMY_DOUBLE, M01=DUMMY_DOUBLE, M20=DUMMY_DOUBLE, M02=DUMMY_DOUBLE, M11=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_img_pixelmoment( FHANDLE himg, FHANDLE hreg, DOUBLE orgnx, DOUBLE orgny, DOUBLE* M10, DOUBLE* M01, DOUBLE* M20, DOUBLE* M02, DOUBLE* M11 )
    画像特徴量：指定座標を原点とする濃淡モーメント

    Params:
    - [in]  himg        処理対象画像( type: uc8, s16, us16, double )
    - [in]  hreg        領域
    - [in]  orgnx       濃淡モーメントを求めるときに原点とするＸ座標
    - [in]  orgny       濃淡モーメントを求めるときに原点とするＹ座標
    - [out] M10         Ｘ方向１次濃淡モーメント
    - [out] M01         Ｙ方向１次濃淡モーメント
    - [out] M20         Ｘ方向２次濃淡モーメント
    - [out] M02         Ｙ方向２次濃淡モーメント
    - [out] M11         ＸＹ方向２次濃淡モーメント

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクト
    - F_ERR_INVALID_OBJECT  領域が不正なハンドル
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_pixelmoment(himg, hreg, orgnx, orgny, M10, M01, M20, M02, M11)

def fnFIE_img_histogram(hImg, hreg, iChaNo, unppHist, ipHistLen) -> Any:
    r"""INT FVALGAPI fnFIE_img_histogram( FHANDLE hImg, FHANDLE hreg, INT iChaNo, UINT** unppHist, INT* ipHistLen )
    リージョン内の画像ヒストグラム作成

    Params:
    - [in] hImg             入力画像のハンドル (type: uc8, s16, us16)
    - [in] hreg             リージョンのハンドル
    - [in] iChaNo           処理したいチャネルの番号
    - [out] unppHist        ヒストグラムのメモリ
    - [in,out] ipHistLen    メモリ確保した場合はそのメモリの量を入力（UINT数単位）
                                メモリ確保しなかった場合は関数内部確保のメモリの量を出力（UINT数単位）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_OBJECT 不正なオブジェクトが渡された(  hreg が不正 )
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_histogram(hImg, hreg, iChaNo, unppHist, ipHistLen):
    r"""INT FVALGAPI fnFIE_img_histogram( FHANDLE hImg, FHANDLE hreg, INT iChaNo, UINT** unppHist, INT* ipHistLen )
    リージョン内の画像ヒストグラム作成

    Params:
    - [in] hImg             入力画像のハンドル (type: uc8, s16, us16)
    - [in] hreg             リージョンのハンドル
    - [in] iChaNo           処理したいチャネルの番号
    - [out] unppHist        ヒストグラムのメモリ
    - [in,out] ipHistLen    メモリ確保した場合はそのメモリの量を入力（UINT数単位）
                                メモリ確保しなかった場合は関数内部確保のメモリの量を出力（UINT数単位）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足で確保に失敗した
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_OBJECT 不正なオブジェクトが渡された(  hreg が不正 )
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_histogram(hImg, hreg, iChaNo, unppHist, ipHistLen)

def fnFIE_convex2d_monochain(pnts, iPntsNum, ppHull, ipVerNum) -> Any:
    r"""INT FVALGAPI fnFIE_convex2d_monochain( const DPNT_T* pnts, INT iPntsNum, DPNT_T** ppHull, INT* ipVerNum )
    Monotone Chain法による二次凸包作成

    Params:
    - [in] pnts             入力点集合配列
    - [in] iPntsNum         入力点の数（３点以上）
    - [out] ppHull          出力される凸包の頂点列（  *ppHull は必ずNULLでなければならない）
    - [out] ipVerNum        出力される凸包の頂点の個数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE 入力点列が一直線上にある、或いはすべて同一点だった
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def convex2d_monochain(pnts, iPntsNum, ppHull, ipVerNum):
    r"""INT FVALGAPI fnFIE_convex2d_monochain( const DPNT_T* pnts, INT iPntsNum, DPNT_T** ppHull, INT* ipVerNum )
    Monotone Chain法による二次凸包作成

    Params:
    - [in] pnts             入力点集合配列
    - [in] iPntsNum         入力点の数（３点以上）
    - [out] ppHull          出力される凸包の頂点列（  *ppHull は必ずNULLでなければならない）
    - [out] ipVerNum        出力される凸包の頂点の個数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE 入力点列が一直線上にある、或いはすべて同一点だった
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_convex2d_monochain(pnts, iPntsNum, ppHull, ipVerNum)

def fnFIE_hough_circles_detect(vpEdgePnts, iPntsNum, dRMin, dRMax, dRsl, iQRange, iEdgePercent, iMinScore, iCircleColor, bRefine, iMergeXY, iMergeR, vppCircles, ipCirclesNum, ipPntsIndex) -> Any:
    r"""INT FVALGAPI fnFIE_hough_circles_detect( const DEDGE_T* vpEdgePnts, INT iPntsNum, DOUBLE dRMin, DOUBLE dRMax, DOUBLE dRsl, INT iQRange, INT iEdgePercent, INT iMinScore, INT iCircleColor, INT bRefine, INT iMergeXY, INT iMergeR, HCD_CIRCLE_T** vppCircles, INT* ipCirclesNum, INT* ipPntsIndex )
    ハフ変換投票によって点列から円を検出する

    Params:
    - [in]  vpEdgePnts    入力点列
    - [in]  iPntsNum      入力点数, ４点以上なければならない
    - [in]  dRMin         検出目標にする円の最小半径 ( >= 3 * dRsl )
    - [in]  dRMax         検出目標にする円の最大半径
    - [in]  dRsl          分解能
    - [in]  iQRange       エッジ方向の片幅, 度単位で[0, 90)
    - [in]  iEdgePercent  円上のエッジ点数と円周の百分率の閾値, [0, 99]
    - [in]  iMinScore     円上のエッジ点数の閾値, 数値は4以上を指定する
    - [in]  iCircleColor  円の色。
                              - BLACK_COLOR: 黒い円を検出する
                              - WHITE_COLOR: 白い円を検出する
                              - BLACK_WHITE_COLOR: 円の色は未知、未定の場合
    - [in]  bRefine       ロバスト推定法による検出円のパラメータを算出
                              - TRUE： ロバスト推定法を使う
                              - FALSE：ロバスト推定法を使わない
        - [in]  iMergeXY      検出された円を統合する円心範囲サイズ、0以上に設定する
    - [in]  iMergeR       検出された円を統合する円半径範囲サイズ、0以上に設定する
    - [out] vppCircles    出力円の配列, メモリは関数内部で確保するので、必ずNULLで入力する
    - [out] ipCirclesNum  検出された円の数量
    - [in,out] ipPntsIndex 検出された円上の点のindex

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_INVALID_PARAM   パラメーター不正
    - F_ERR_CALC_IMPOSSIBLE  iMinScore の値が小さ過ぎるので、計算不可能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def hough_circles_detect(vpEdgePnts, iPntsNum, dRMin, dRMax, dRsl=1.0, iQRange=10, iEdgePercent=30, iMinScore=8, iCircleColor=BLACK_WHITE_COLOR, bRefine=True, iMergeXY=2, iMergeR=1, vppCircles=REQUIRED_PLACEHOLDER, ipCirclesNum=REQUIRED_PLACEHOLDER, ipPntsIndex=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_hough_circles_detect( const DEDGE_T* vpEdgePnts, INT iPntsNum, DOUBLE dRMin, DOUBLE dRMax, DOUBLE dRsl, INT iQRange, INT iEdgePercent, INT iMinScore, INT iCircleColor, INT bRefine, INT iMergeXY, INT iMergeR, HCD_CIRCLE_T** vppCircles, INT* ipCirclesNum, INT* ipPntsIndex )
    ハフ変換投票によって点列から円を検出する

    Params:
    - [in]  vpEdgePnts    入力点列
    - [in]  iPntsNum      入力点数, ４点以上なければならない
    - [in]  dRMin         検出目標にする円の最小半径 ( >= 3 * dRsl )
    - [in]  dRMax         検出目標にする円の最大半径
    - [in]  dRsl          分解能
    - [in]  iQRange       エッジ方向の片幅, 度単位で[0, 90)
    - [in]  iEdgePercent  円上のエッジ点数と円周の百分率の閾値, [0, 99]
    - [in]  iMinScore     円上のエッジ点数の閾値, 数値は4以上を指定する
    - [in]  iCircleColor  円の色。
                              - BLACK_COLOR: 黒い円を検出する
                              - WHITE_COLOR: 白い円を検出する
                              - BLACK_WHITE_COLOR: 円の色は未知、未定の場合
    - [in]  bRefine       ロバスト推定法による検出円のパラメータを算出
                              - TRUE： ロバスト推定法を使う
                              - FALSE：ロバスト推定法を使わない
        - [in]  iMergeXY      検出された円を統合する円心範囲サイズ、0以上に設定する
    - [in]  iMergeR       検出された円を統合する円半径範囲サイズ、0以上に設定する
    - [out] vppCircles    出力円の配列, メモリは関数内部で確保するので、必ずNULLで入力する
    - [out] ipCirclesNum  検出された円の数量
    - [in,out] ipPntsIndex 検出された円上の点のindex

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_INVALID_PARAM   パラメーター不正
    - F_ERR_CALC_IMPOSSIBLE  iMinScore の値が小さ過ぎるので、計算不可能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if vppCircles is REQUIRED_PLACEHOLDER: raise TypeError("argument 'vppCircles' is missing")
    if ipCirclesNum is REQUIRED_PLACEHOLDER: raise TypeError("argument 'ipCirclesNum' is missing")
    if ipPntsIndex is REQUIRED_PLACEHOLDER: raise TypeError("argument 'ipPntsIndex' is missing")
    return _fie.fnFIE_hough_circles_detect(vpEdgePnts, iPntsNum, dRMin, dRMax, dRsl, iQRange, iEdgePercent, iMinScore, iCircleColor, bRefine, iMergeXY, iMergeR, vppCircles, ipCirclesNum, ipPntsIndex)

def fnFIE_geotrans_affine(hSrc, hDst, hMask, vpMat, bIsClearBack, iSamplingMode) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_affine( FHANDLE hSrc, FHANDLE hDst, FHANDLE hMask, const FMATRIX* vpMat, INT bIsClearBack, INT iSamplingMode )
    画像のアフィン変換

    Params:
    - [in]   hSrc            処理対象画像( type: bin, uc8, us16, double, rgbq, rgbtri, s16, float )
    - [out]  hDst            処理結果画像( type: bin, uc8, us16, double, rgbq, rgbtri, s16, float )
    - [out]  hMask           処理結果画像の有効画素マスク画像( type: bin )
                                 画像サイズは  hDst と同じ、チャネル数１であること。
                                 マスク画像が不要な場合はNULLを指定する。
    - [in]   vpMat           アフィン変換の同次変換行列
    - [in]   bIsClearBack    処理対象画像の領域外になる画素の処理方法
                                - TRUE   領域外になる画素は０クリア
                                - FALSE  領域外になる画素は処理しない
    - [in]   iSamplingMode   濃度補間方法
                                - F_SAMPLING_NN       最近傍法により濃度補間を行う
                                - F_SAMPLING_BILINEAR 共一次線形補間により濃度補間を行う
                                - F_SAMPLING_CUBIC    三次畳み込み法により濃度補間を行う
                                - F_SAMPLING_LANCZOS  Lanczos-windowed Sinc function法により濃度補間を行う
                                - F_SAMPLING_SUPER    super-sampling 法により濃度補間を行う

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが入力された
    - F_ERR_CALC_IMPOSSIBLE 変換行列の逆行列が計算不可能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_affine(hSrc, hDst, hMask=None, vpMat=REQUIRED_PLACEHOLDER, bIsClearBack=True, iSamplingMode=F_SAMPLING_NN):
    r"""INT FVALGAPI fnFIE_geotrans_affine( FHANDLE hSrc, FHANDLE hDst, FHANDLE hMask, const FMATRIX* vpMat, INT bIsClearBack, INT iSamplingMode )
    画像のアフィン変換

    Params:
    - [in]   hSrc            処理対象画像( type: bin, uc8, us16, double, rgbq, rgbtri, s16, float )
    - [out]  hDst            処理結果画像( type: bin, uc8, us16, double, rgbq, rgbtri, s16, float )
    - [out]  hMask           処理結果画像の有効画素マスク画像( type: bin )
                                 画像サイズは  hDst と同じ、チャネル数１であること。
                                 マスク画像が不要な場合はNULLを指定する。
    - [in]   vpMat           アフィン変換の同次変換行列
    - [in]   bIsClearBack    処理対象画像の領域外になる画素の処理方法
                                - TRUE   領域外になる画素は０クリア
                                - FALSE  領域外になる画素は処理しない
    - [in]   iSamplingMode   濃度補間方法
                                - F_SAMPLING_NN       最近傍法により濃度補間を行う
                                - F_SAMPLING_BILINEAR 共一次線形補間により濃度補間を行う
                                - F_SAMPLING_CUBIC    三次畳み込み法により濃度補間を行う
                                - F_SAMPLING_LANCZOS  Lanczos-windowed Sinc function法により濃度補間を行う
                                - F_SAMPLING_SUPER    super-sampling 法により濃度補間を行う

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが入力された
    - F_ERR_CALC_IMPOSSIBLE 変換行列の逆行列が計算不可能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if vpMat is REQUIRED_PLACEHOLDER: raise TypeError("argument 'vpMat' is missing")
    return _fie.fnFIE_geotrans_affine(hSrc, hDst, hMask, vpMat, bIsClearBack, iSamplingMode)

def fnFIE_geotrans_shift(hSrc, hDst, hMask, dX, dY, bIsClearBack, iSamplingMode) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_shift( FHANDLE hSrc, FHANDLE hDst, FHANDLE hMask, DOUBLE dX, DOUBLE dY, INT bIsClearBack, INT iSamplingMode )
    画像の平行移動

    Params:
    - [in]   hSrc            処理対象画像( type: bin, uc8, us16, double )
    - [out]  hDst            処理結果画像( type: bin, uc8, us16, double )
    - [out]  hMask           処理結果画像の有効画素マスク画像( type: bin )
                                 画像サイズはhDstと同じ、チャネル数１であること。
                                 マスク画像が不要な場合はNULLを指定する。
    - [in]   dX              x軸方向移動量
    - [in]   dY              y軸方向移動量
    - [in]   bIsClearBack    処理対象画像の領域外になる画素の処理方法
                                - TRUE   領域外になる画素は０クリア
                                - FALSE  領域外になる画素は処理しない
    - [in]   iSamplingMode   濃度補間方法
                                - F_SAMPLING_NN       最近傍法により濃度補間を行う
                                - F_SAMPLING_BILINEAR 共一次線形補間により濃度補間を行う
                                - F_SAMPLING_CUBIC    三次畳み込み法により濃度補間を行う

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_INVALID_IMAGE  不正な画像オブジェクトが入力された
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_shift(hSrc, hDst, hMask=None, dX=REQUIRED_PLACEHOLDER, dY=REQUIRED_PLACEHOLDER, bIsClearBack=True, iSamplingMode=F_SAMPLING_NN):
    r"""INT FVALGAPI fnFIE_geotrans_shift( FHANDLE hSrc, FHANDLE hDst, FHANDLE hMask, DOUBLE dX, DOUBLE dY, INT bIsClearBack, INT iSamplingMode )
    画像の平行移動

    Params:
    - [in]   hSrc            処理対象画像( type: bin, uc8, us16, double )
    - [out]  hDst            処理結果画像( type: bin, uc8, us16, double )
    - [out]  hMask           処理結果画像の有効画素マスク画像( type: bin )
                                 画像サイズはhDstと同じ、チャネル数１であること。
                                 マスク画像が不要な場合はNULLを指定する。
    - [in]   dX              x軸方向移動量
    - [in]   dY              y軸方向移動量
    - [in]   bIsClearBack    処理対象画像の領域外になる画素の処理方法
                                - TRUE   領域外になる画素は０クリア
                                - FALSE  領域外になる画素は処理しない
    - [in]   iSamplingMode   濃度補間方法
                                - F_SAMPLING_NN       最近傍法により濃度補間を行う
                                - F_SAMPLING_BILINEAR 共一次線形補間により濃度補間を行う
                                - F_SAMPLING_CUBIC    三次畳み込み法により濃度補間を行う

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_INVALID_IMAGE  不正な画像オブジェクトが入力された
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    if dX is REQUIRED_PLACEHOLDER: raise TypeError("argument 'dX' is missing")
    if dY is REQUIRED_PLACEHOLDER: raise TypeError("argument 'dY' is missing")
    return _fie.fnFIE_geotrans_shift(hSrc, hDst, hMask, dX, dY, bIsClearBack, iSamplingMode)

def fnFIE_geotrans_perspective(hSrc, hDst, hMask, vpMat, bIsClearBack, iSamplingMode) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_perspective( FHANDLE hSrc, FHANDLE hDst, FHANDLE hMask, const FMATRIX* vpMat, INT bIsClearBack, INT iSamplingMode )
    画像の射影変換

    Params:
    - [in]   hSrc            処理対象画像( type: bin, uc8, us16, double )
    - [out]  hDst            処理結果画像( type: bin, uc8, us16, double )
    - [out]  hMask           処理結果画像の有効画素マスク画像( type: bin )
                                 画像サイズは  hDst と同じ、チャネル数１であること。
                                 マスク画像が不要な場合はNULLを指定する。
    - [in]   vpMat           射影変換の同次変換行列
    - [in]   bIsClearBack    処理対象画像の領域外になる画素の処理方法
                                - TRUE   領域外になる画素は０クリア
                                - FALSE  領域外になる画素は処理しない
    - [in]   iSamplingMode   濃度補間方法
                                - F_SAMPLING_NN       最近傍法により濃度補間を行う
                                - F_SAMPLING_BILINEAR 共一次線形補間により濃度補間を行う
                                - F_SAMPLING_CUBIC    三次畳み込み法により濃度補間を行う
                                - F_SAMPLING_ADAPT    Adaptive Super-sampling法により濃度補間を行う

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが入力された
    - F_ERR_CALC_IMPOSSIBLE 変換行列の逆行列が計算不可能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_perspective(hSrc, hDst, hMask=None, vpMat=REQUIRED_PLACEHOLDER, bIsClearBack=True, iSamplingMode=F_SAMPLING_NN):
    r"""INT FVALGAPI fnFIE_geotrans_perspective( FHANDLE hSrc, FHANDLE hDst, FHANDLE hMask, const FMATRIX* vpMat, INT bIsClearBack, INT iSamplingMode )
    画像の射影変換

    Params:
    - [in]   hSrc            処理対象画像( type: bin, uc8, us16, double )
    - [out]  hDst            処理結果画像( type: bin, uc8, us16, double )
    - [out]  hMask           処理結果画像の有効画素マスク画像( type: bin )
                                 画像サイズは  hDst と同じ、チャネル数１であること。
                                 マスク画像が不要な場合はNULLを指定する。
    - [in]   vpMat           射影変換の同次変換行列
    - [in]   bIsClearBack    処理対象画像の領域外になる画素の処理方法
                                - TRUE   領域外になる画素は０クリア
                                - FALSE  領域外になる画素は処理しない
    - [in]   iSamplingMode   濃度補間方法
                                - F_SAMPLING_NN       最近傍法により濃度補間を行う
                                - F_SAMPLING_BILINEAR 共一次線形補間により濃度補間を行う
                                - F_SAMPLING_CUBIC    三次畳み込み法により濃度補間を行う
                                - F_SAMPLING_ADAPT    Adaptive Super-sampling法により濃度補間を行う

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが入力された
    - F_ERR_CALC_IMPOSSIBLE 変換行列の逆行列が計算不可能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if vpMat is REQUIRED_PLACEHOLDER: raise TypeError("argument 'vpMat' is missing")
    return _fie.fnFIE_geotrans_perspective(hSrc, hDst, hMask, vpMat, bIsClearBack, iSamplingMode)

def fnFIE_geotrans_warpping(hSrc, hMap, hDst, hMask, bIsClearBack, iSamplingMode) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_warpping( FHANDLE hSrc, FHANDLE hMap, FHANDLE hDst, FHANDLE hMask, INT bIsClearBack, INT iSamplingMode )
    座標変換マップに従って座標を変換する

    Params:
    - [in]   hSrc            処理対象画像( type: bin, uc8, us16, double )
    - [in]   hMap            座標変換マップ画像( type: double, float )
    - [out]  hDst            処理結果画像( type: bin, uc8, us16, double )
    - [out]  hMask           処理結果画像の有効画素マスク画像( type: bin )
                                 画像サイズはhDstと同じ、チャネル数１であること。
                                 マスク画像が不要な場合はNULLを指定する。
    - [in]   bIsClearBack    処理対象画像の領域外になる画素の処理方法
                                - TRUE   領域外になる画素は０クリア
                                - FALSE  領域外になる画素は処理しない
    - [in]   iSamplingMode   濃度補間方法
                                - F_SAMPLING_NN       最近傍法により濃度補間を行う
                                - F_SAMPLING_BILINEAR 共一次線形補間により濃度補間を行う
                                - F_SAMPLING_CUBIC    三次畳み込み法により濃度補間を行う

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_INVALID_IMAGE  不正な画像オブジェクトが入力された
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_warpping(hSrc, hMap, hDst, hMask=None, bIsClearBack=True, iSamplingMode=F_SAMPLING_NN):
    r"""INT FVALGAPI fnFIE_geotrans_warpping( FHANDLE hSrc, FHANDLE hMap, FHANDLE hDst, FHANDLE hMask, INT bIsClearBack, INT iSamplingMode )
    座標変換マップに従って座標を変換する

    Params:
    - [in]   hSrc            処理対象画像( type: bin, uc8, us16, double )
    - [in]   hMap            座標変換マップ画像( type: double, float )
    - [out]  hDst            処理結果画像( type: bin, uc8, us16, double )
    - [out]  hMask           処理結果画像の有効画素マスク画像( type: bin )
                                 画像サイズはhDstと同じ、チャネル数１であること。
                                 マスク画像が不要な場合はNULLを指定する。
    - [in]   bIsClearBack    処理対象画像の領域外になる画素の処理方法
                                - TRUE   領域外になる画素は０クリア
                                - FALSE  領域外になる画素は処理しない
    - [in]   iSamplingMode   濃度補間方法
                                - F_SAMPLING_NN       最近傍法により濃度補間を行う
                                - F_SAMPLING_BILINEAR 共一次線形補間により濃度補間を行う
                                - F_SAMPLING_CUBIC    三次畳み込み法により濃度補間を行う

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_INVALID_IMAGE  不正な画像オブジェクトが入力された
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_warpping(hSrc, hMap, hDst, hMask, bIsClearBack, iSamplingMode)

def fnFIE_geotrans_get_offset_matrix(vpTransMat, vpOffsetMat, dSrcOffX, dSrcOffY, dDstOffX, dDstOffY) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_get_offset_matrix( const FMATRIX* vpTransMat, FMATRIX* vpOffsetMat, DOUBLE dSrcOffX, DOUBLE dSrcOffY, DOUBLE dDstOffX, DOUBLE dDstOffY )
    同次変換行列に入力座標系/出力座標系のオフセットを加える

    Params:
    - [in]   vpTransMat     画像幾何変換の同次変換行列
    - [out]  vpOffsetMat    偏移量を含めたの幾何変換の同次変換行列
    - [in]   dSrcOffX       元画像の横方向の偏移量
    - [in]   dSrcOffY       元画像の縦方向の偏移量
    - [in]   dDstOffX       結果画像の横方向の偏移量
    - [in]   dDstOffY       結果画像の縦方向の偏移量

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力行列或いは出力行列は3x3の正方行列ではない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_get_offset_matrix(vpTransMat, vpOffsetMat, dSrcOffX, dSrcOffY, dDstOffX, dDstOffY):
    r"""INT FVALGAPI fnFIE_geotrans_get_offset_matrix( const FMATRIX* vpTransMat, FMATRIX* vpOffsetMat, DOUBLE dSrcOffX, DOUBLE dSrcOffY, DOUBLE dDstOffX, DOUBLE dDstOffY )
    同次変換行列に入力座標系/出力座標系のオフセットを加える

    Params:
    - [in]   vpTransMat     画像幾何変換の同次変換行列
    - [out]  vpOffsetMat    偏移量を含めたの幾何変換の同次変換行列
    - [in]   dSrcOffX       元画像の横方向の偏移量
    - [in]   dSrcOffY       元画像の縦方向の偏移量
    - [in]   dDstOffX       結果画像の横方向の偏移量
    - [in]   dDstOffY       結果画像の縦方向の偏移量

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力行列或いは出力行列は3x3の正方行列ではない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_get_offset_matrix(vpTransMat, vpOffsetMat, dSrcOffX, dSrcOffY, dDstOffX, dDstOffY)

def fnFIE_measure_execute(himage, offset, params, exerr) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_measure_execute( FHANDLE himage, PNT_T offset, const F_MEASURE_PARAMS* params, INT* exerr )
    ２値ブローブ解析実行

    Params:
    - [in] himage  入力画像( type: bin )
    - [in] offset  原点座標オフセット
    - [in] params  パラメータセット
    - [out] exerr  エラーコード。エラーコードを受け取る必要の無い場合は、NULLを指定します。

    Returns:
    - 正常に終了した場合は、２値ブローブ解析結果ハンドル（F_MEASURE_RESULTオブジェクト) を返します。
            何らかのエラーが発生し、処理が失敗した場合は NULL を返します。
            正常、異常、どちらの場合も  exerr パラメータにエラーコード受け取り先変数のポインタが
            渡された場合は、そこにエラーコードを代入して返します。返されるエラーコードは下記の何れかです。
    - *exerr==F_ERR_NONE                  正常終了
    - *exerr==F_ERR_NOMEMORY              メモリ不足エラー
    - *exerr==F_ERR_INVALID_PARAM         パラメータエラー
    - *exerr==F_ERR_INVALID_IMAGE          himage パラメータに指定された画像オブジェクトが不正
    - *exerr==F_ERR_MEASURE_RUN_OVERFLOW  ラン数が params->max_runs を超えたため、中断した
    - *exerr==F_ERR_MEASURE_BLOB_OVERFLOW ブローブ数が params->max_blobs を超えたため、中断した
    - *exerr==F_ERR_NO_LICENCE            ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_execute(himage, offset=(0,0), params=REQUIRED_PLACEHOLDER, exerr=None):
    r"""FHANDLE FVALGAPI fnFIE_measure_execute( FHANDLE himage, PNT_T offset, const F_MEASURE_PARAMS* params, INT* exerr )
    ２値ブローブ解析実行

    Params:
    - [in] himage  入力画像( type: bin )
    - [in] offset  原点座標オフセット
    - [in] params  パラメータセット
    - [out] exerr  エラーコード。エラーコードを受け取る必要の無い場合は、NULLを指定します。

    Returns:
    - 正常に終了した場合は、２値ブローブ解析結果ハンドル（F_MEASURE_RESULTオブジェクト) を返します。
            何らかのエラーが発生し、処理が失敗した場合は NULL を返します。
            正常、異常、どちらの場合も  exerr パラメータにエラーコード受け取り先変数のポインタが
            渡された場合は、そこにエラーコードを代入して返します。返されるエラーコードは下記の何れかです。
    - *exerr==F_ERR_NONE                  正常終了
    - *exerr==F_ERR_NOMEMORY              メモリ不足エラー
    - *exerr==F_ERR_INVALID_PARAM         パラメータエラー
    - *exerr==F_ERR_INVALID_IMAGE          himage パラメータに指定された画像オブジェクトが不正
    - *exerr==F_ERR_MEASURE_RUN_OVERFLOW  ラン数が params->max_runs を超えたため、中断した
    - *exerr==F_ERR_MEASURE_BLOB_OVERFLOW ブローブ数が params->max_blobs を超えたため、中断した
    - *exerr==F_ERR_NO_LICENCE            ライセンスエラー、または未初期化エラー
    """
    if params is REQUIRED_PLACEHOLDER: raise TypeError("argument 'params' is missing")
    return _fie.fnFIE_measure_execute(himage, offset, params, exerr)

def fnFIE_measure_continue(hresult, himage) -> Any:
    r"""INT FVALGAPI fnFIE_measure_continue( FHANDLE hresult, FHANDLE himage )
    ブローブ解析の続行

    Params:
    - [in,out] hresult  ブローブ解析結果
    - [in]     himage   追加する画像オブジェクト( type: bin )

    Returns:
    - F_ERR_NONE                  正常終了
    - F_ERR_NOMEMORY              メモリ不足エラー
    - F_ERR_UNKNOWN              hresult の内部パラメータが不正
    - F_ERR_INVALID_OBJECT         hresult パラメータに指定された２値ブローブ解析結果ハンドルが不正
    - F_ERR_INVALID_IMAGE          himage パラメータに指定された画像オブジェクトが不正
    - F_ERR_MEASURE_ROW_OVERFLOW  総行数が params->max_rows を超えた、又は (offset.y+総行数)が 65535 を超えたため、中断した
    - F_ERR_MEASURE_RUN_OVERFLOW  ラン数が params->max_runs を超えたため、中断した
    - F_ERR_MEASURE_BLOB_OVERFLOW ブローブ数が params->max_blobs を超えたため、中断した
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_continue(hresult, himage):
    r"""INT FVALGAPI fnFIE_measure_continue( FHANDLE hresult, FHANDLE himage )
    ブローブ解析の続行

    Params:
    - [in,out] hresult  ブローブ解析結果
    - [in]     himage   追加する画像オブジェクト( type: bin )

    Returns:
    - F_ERR_NONE                  正常終了
    - F_ERR_NOMEMORY              メモリ不足エラー
    - F_ERR_UNKNOWN              hresult の内部パラメータが不正
    - F_ERR_INVALID_OBJECT         hresult パラメータに指定された２値ブローブ解析結果ハンドルが不正
    - F_ERR_INVALID_IMAGE          himage パラメータに指定された画像オブジェクトが不正
    - F_ERR_MEASURE_ROW_OVERFLOW  総行数が params->max_rows を超えた、又は (offset.y+総行数)が 65535 を超えたため、中断した
    - F_ERR_MEASURE_RUN_OVERFLOW  ラン数が params->max_runs を超えたため、中断した
    - F_ERR_MEASURE_BLOB_OVERFLOW ブローブ数が params->max_blobs を超えたため、中断した
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_continue(hresult, himage)

def fnFIE_measure_free_result(hresult) -> Any:
    r"""void fnFIE_measure_free_result( FHANDLE hresult )
    measure結果の解放

    Params:
    - [in] hresult 解放するmeasure結果のハンドル

    Returns:
    """
    raise NotImplementedError

def measure_free_result(hresult):
    r"""void fnFIE_measure_free_result( FHANDLE hresult )
    measure結果の解放

    Params:
    - [in] hresult 解放するmeasure結果のハンドル

    Returns:
    """

    return _fie.fnFIE_measure_free_result(hresult)

def fnFIE_measure_copy_result(hresult) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_measure_copy_result( FHANDLE hresult )
    ブローブ解析結果のコピー

    Params:
    - [in] hresult コピーするブローブ解析結果のハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """
    raise NotImplementedError

def measure_copy_result(hresult):
    r"""FHANDLE FVALGAPI fnFIE_measure_copy_result( FHANDLE hresult )
    ブローブ解析結果のコピー

    Params:
    - [in] hresult コピーするブローブ解析結果のハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """

    return _fie.fnFIE_measure_copy_result(hresult)

def fnFIE_measure_query_timings(hresult, rle, labeling, blobinfo, feature_calculation) -> Any:
    r"""INT FVALGAPI fnFIE_measure_query_timings( FHANDLE hresult, DOUBLE* rle, DOUBLE* labeling, DOUBLE* blobinfo, DOUBLE* feature_calculation )
    ブローブ解析の詳細な処理時間取得

    Params:
    - [in]  hresult              ブローブ解析結果ハンドル
    - [out] rle                  ランレングス抽出処理時間
    - [out] labeling             ラベリング処理時間
    - [out] blobinfo             ブローブ情報構築処理時間
    - [out] feature_calculation  事前特徴量計算処理時間

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に不正なオブジェクトが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_query_timings(hresult, rle=None, labeling=None, blobinfo=None, feature_calculation=None):
    r"""INT FVALGAPI fnFIE_measure_query_timings( FHANDLE hresult, DOUBLE* rle, DOUBLE* labeling, DOUBLE* blobinfo, DOUBLE* feature_calculation )
    ブローブ解析の詳細な処理時間取得

    Params:
    - [in]  hresult              ブローブ解析結果ハンドル
    - [out] rle                  ランレングス抽出処理時間
    - [out] labeling             ラベリング処理時間
    - [out] blobinfo             ブローブ情報構築処理時間
    - [out] feature_calculation  事前特徴量計算処理時間

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に不正なオブジェクトが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_query_timings(hresult, rle, labeling, blobinfo, feature_calculation)

def fnFIE_measure_get_list(hresult, filters, filter_num, blob_numbers, num) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_list( FHANDLE hresult, F_MEASURE_FILTER_RANGE* filters, UINT filter_num, UINT** blob_numbers, UINT* num )
    ブローブ番号配列の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  filters       取得条件フィルタ配列
                               filter_num == 0 の場合は NULL を指定できます。
    - [in]  filter_num     filters の配列サイズ(単位：要素数,  filter_num > 0)
    - [out] blob_numbers  ブローブ番号配列 (*blob_numbers=NULL)
    - [out] num            blob_numbers の配列サイズ(単位：要素数)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult パラメータに指定されたブローブ解析結果ハンドルが不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_list(hresult, filters, filter_num, blob_numbers, num):
    r"""INT FVALGAPI fnFIE_measure_get_list( FHANDLE hresult, F_MEASURE_FILTER_RANGE* filters, UINT filter_num, UINT** blob_numbers, UINT* num )
    ブローブ番号配列の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  filters       取得条件フィルタ配列
                               filter_num == 0 の場合は NULL を指定できます。
    - [in]  filter_num     filters の配列サイズ(単位：要素数,  filter_num > 0)
    - [out] blob_numbers  ブローブ番号配列 (*blob_numbers=NULL)
    - [out] num            blob_numbers の配列サイズ(単位：要素数)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult パラメータに指定されたブローブ解析結果ハンドルが不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_list(hresult, filters, filter_num, blob_numbers, num)

def fnFIE_measure_refilter_list(hresult, filters, filter_num, blob_numbers, num) -> Any:
    r"""INT FVALGAPI fnFIE_measure_refilter_list( FHANDLE hresult, F_MEASURE_FILTER_RANGE* filters, UINT filter_num, UINT* blob_numbers, UINT* num )
    ブローブ番号配列の特徴量に基づくフィルタリング

    Params:
    - [in]     hresult       ブローブ解析結果ハンドル
    - [in]     filters       取得条件フィルタ配列
                                  filter_num == 0 の場合は NULLを指定できます。
    - [in]     filter_num     filters の配列サイズ(単位：要素数,  filter_num > 0)
    - [in,out] blob_numbers  ブローブ番号配列
    - [in,out] num            blob_numbers の配列サイズ(単位：要素数)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_OBJECT   hresult パラメータに指定されたブローブ解析結果ハンドルが不正
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_refilter_list(hresult, filters, filter_num, blob_numbers, num):
    r"""INT FVALGAPI fnFIE_measure_refilter_list( FHANDLE hresult, F_MEASURE_FILTER_RANGE* filters, UINT filter_num, UINT* blob_numbers, UINT* num )
    ブローブ番号配列の特徴量に基づくフィルタリング

    Params:
    - [in]     hresult       ブローブ解析結果ハンドル
    - [in]     filters       取得条件フィルタ配列
                                  filter_num == 0 の場合は NULLを指定できます。
    - [in]     filter_num     filters の配列サイズ(単位：要素数,  filter_num > 0)
    - [in,out] blob_numbers  ブローブ番号配列
    - [in,out] num            blob_numbers の配列サイズ(単位：要素数)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_INVALID_OBJECT   hresult パラメータに指定されたブローブ解析結果ハンドルが不正
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_refilter_list(hresult, filters, filter_num, blob_numbers, num)

def fnFIE_measure_sort_list(hresult, key1st, direc1st, key2nd, direc2nd, key3rd, direc3rd, numbers, num) -> Any:
    r"""INT FVALGAPI fnFIE_measure_sort_list( FHANDLE hresult, enum f_measure_feature_type key1st, INT direc1st, enum f_measure_feature_type key2nd, INT direc2nd, enum f_measure_feature_type key3rd, INT direc3rd, UINT* numbers, UINT num )
    ブローブの特徴量に基づくソーティング

    Params:
    - [in]     hresult   ブローブ解析結果
    - [in]     key1st    最優先ソートキー（ソート対象特徴量）
    - [in]     direc1st  key1stのソート順
    - [in]     key2nd    ２番目に優先されるソートキー（ソート対象特徴量）
    - [in]     direc2nd  key2ndのソート順
    - [in]     key3rd    ３番目に優先されるソートキー（ソート対象特徴量）
    - [in]     direc3rd  key3rdのソート順
    - [in,out] numbers   ソート対象ブローブ番号配列
    - [in]     num       numbersの要素数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  不正なパラメータが指定された。
    - F_ERR_INVALID_OBJECT  hresutl に渡された結果ハンドルが不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_sort_list(hresult, key1st, direc1st=0, key2nd=F_FEATURE_NONE, direc2nd=0, key3rd=F_FEATURE_NONE, direc3rd=0, numbers=REQUIRED_PLACEHOLDER, num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_measure_sort_list( FHANDLE hresult, enum f_measure_feature_type key1st, INT direc1st, enum f_measure_feature_type key2nd, INT direc2nd, enum f_measure_feature_type key3rd, INT direc3rd, UINT* numbers, UINT num )
    ブローブの特徴量に基づくソーティング

    Params:
    - [in]     hresult   ブローブ解析結果
    - [in]     key1st    最優先ソートキー（ソート対象特徴量）
    - [in]     direc1st  key1stのソート順
    - [in]     key2nd    ２番目に優先されるソートキー（ソート対象特徴量）
    - [in]     direc2nd  key2ndのソート順
    - [in]     key3rd    ３番目に優先されるソートキー（ソート対象特徴量）
    - [in]     direc3rd  key3rdのソート順
    - [in,out] numbers   ソート対象ブローブ番号配列
    - [in]     num       numbersの要素数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  不正なパラメータが指定された。
    - F_ERR_INVALID_OBJECT  hresutl に渡された結果ハンドルが不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    if numbers is REQUIRED_PLACEHOLDER: raise TypeError("argument 'numbers' is missing")
    if num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'num' is missing")
    return _fie.fnFIE_measure_sort_list(hresult, key1st, direc1st, key2nd, direc2nd, key3rd, direc3rd, numbers, num)

def fnFIE_measure_specialsort_list(hresult, order, theta, numbers, num) -> Any:
    r"""INT FVALGAPI fnFIE_measure_specialsort_list( FHANDLE hresult, enum f_measure_special_sort_order order, DOUBLE theta, UINT* numbers, UINT num )
    ブローブの位置情報に基づくソーティング

    Params:
    - [in]     hresult  ブローブ解析結果ハンドル
    - [in]     order    並び替え順
    - [in]     theta    回転角
    - [in,out] numbers  並び替えるブローブ番号の配列
    - [in]     num      ブローブ番号配列(  numbers )の要素数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  不正なパラメータが指定された。
    - F_ERR_INVALID_OBJECT  hresutl に渡された結果ハンドルが不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_specialsort_list(hresult, order, theta, numbers, num):
    r"""INT FVALGAPI fnFIE_measure_specialsort_list( FHANDLE hresult, enum f_measure_special_sort_order order, DOUBLE theta, UINT* numbers, UINT num )
    ブローブの位置情報に基づくソーティング

    Params:
    - [in]     hresult  ブローブ解析結果ハンドル
    - [in]     order    並び替え順
    - [in]     theta    回転角
    - [in,out] numbers  並び替えるブローブ番号の配列
    - [in]     num      ブローブ番号配列(  numbers )の要素数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  不正なパラメータが指定された。
    - F_ERR_INVALID_OBJECT  hresutl に渡された結果ハンドルが不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_specialsort_list(hresult, order, theta, numbers, num)

def fnFIE_measure_get_region(hresult, blobno, exerr) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_measure_get_region( FHANDLE hresult, UINT blobno, INT* exerr )
    REGION取得

    Params:
    - [in] hresult  ブローブ解析結果ハンドル
    - [in] blobno   リージョンを取得したいブローブのブローブ番号
    - [out] exerr  エラーコード。エラーコードを受け取る必要の無い場合は、NULLを指定します。

    Returns:
    - 正常に終了した場合は、生成したリージョンオブジェクトのハンドルを返す。
            エラーが発生し、処理に失敗した場合は、NULLを返します。
            正常、異常、どちらの場合も  exerr パラメータにエラーコード受け取り先変数のポインタが
            渡された場合は、そこにエラーコードを代入して返す。返されるエラーコードは下記の何れかです。
    - *exerr==F_ERR_NONE           正常終了
    - *exerr==F_ERR_NOMEMORY       メモリ不足エラー
    - *exerr==F_ERR_INVALID_PARAM  パラメータエラー,  blobno に指定されたブローブ番号が不正
    - *exerr==F_ERR_INVALID_OBJECT パラメータエラー,  hresult に指定されたハンドルが不正
    - *exerr==F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_region(hresult, blobno, exerr=None):
    r"""FHANDLE FVALGAPI fnFIE_measure_get_region( FHANDLE hresult, UINT blobno, INT* exerr )
    REGION取得

    Params:
    - [in] hresult  ブローブ解析結果ハンドル
    - [in] blobno   リージョンを取得したいブローブのブローブ番号
    - [out] exerr  エラーコード。エラーコードを受け取る必要の無い場合は、NULLを指定します。

    Returns:
    - 正常に終了した場合は、生成したリージョンオブジェクトのハンドルを返す。
            エラーが発生し、処理に失敗した場合は、NULLを返します。
            正常、異常、どちらの場合も  exerr パラメータにエラーコード受け取り先変数のポインタが
            渡された場合は、そこにエラーコードを代入して返す。返されるエラーコードは下記の何れかです。
    - *exerr==F_ERR_NONE           正常終了
    - *exerr==F_ERR_NOMEMORY       メモリ不足エラー
    - *exerr==F_ERR_INVALID_PARAM  パラメータエラー,  blobno に指定されたブローブ番号が不正
    - *exerr==F_ERR_INVALID_OBJECT パラメータエラー,  hresult に指定されたハンドルが不正
    - *exerr==F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_region(hresult, blobno, exerr)

def fnFIE_measure_get_parent(hresult, blobno, parent) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_parent( const FHANDLE hresult, UINT blobno, UINT* parent )
    親ブローブの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] parent   親ブローブのブローブ番号

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正,  parent に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_parent(hresult, blobno, parent):
    r"""INT FVALGAPI fnFIE_measure_get_parent( const FHANDLE hresult, UINT blobno, UINT* parent )
    親ブローブの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] parent   親ブローブのブローブ番号

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正,  parent に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_parent(hresult, blobno, parent)

def fnFIE_measure_get_child(hresult, blobno, child) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_child( const FHANDLE hresult, UINT blobno, UINT* child )
    子ブローブの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] child    子ブローブのブローブ番号

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正,  child に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_child(hresult, blobno, child):
    r"""INT FVALGAPI fnFIE_measure_get_child( const FHANDLE hresult, UINT blobno, UINT* child )
    子ブローブの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] child    子ブローブのブローブ番号

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正,  child に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_child(hresult, blobno, child)

def fnFIE_measure_get_sibling_back(hresult, blobno, back) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_sibling_back( const FHANDLE hresult, UINT blobno, UINT* back )
    １つ後ろの兄弟ブローブの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] back     １つ後ろの兄弟ブローブのブローブ番号

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正,  back に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_sibling_back(hresult, blobno, back):
    r"""INT FVALGAPI fnFIE_measure_get_sibling_back( const FHANDLE hresult, UINT blobno, UINT* back )
    １つ後ろの兄弟ブローブの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] back     １つ後ろの兄弟ブローブのブローブ番号

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正,  back に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_sibling_back(hresult, blobno, back)

def fnFIE_measure_get_sibling_next(hresult, blobno, next) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_sibling_next( const FHANDLE hresult, UINT blobno, UINT* next )
    １つ次の兄弟ブローブの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] next     １つ次の兄弟ブローブのブローブ番号

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正,  next に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_sibling_next(hresult, blobno, next):
    r"""INT FVALGAPI fnFIE_measure_get_sibling_next( const FHANDLE hresult, UINT blobno, UINT* next )
    １つ次の兄弟ブローブの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] next     １つ次の兄弟ブローブのブローブ番号

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正,  next に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_sibling_next(hresult, blobno, next)

def fnFIE_measure_get_is_valid(hresult, blobno, invalid) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_is_valid( const FHANDLE hresult, UINT blobno, UINT* invalid )
    ブローブ番号の有効/無効チェック

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] invalid  有効==0, 無効==1。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正,  invalid に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_is_valid(hresult, blobno, invalid):
    r"""INT FVALGAPI fnFIE_measure_get_is_valid( const FHANDLE hresult, UINT blobno, UINT* invalid )
    ブローブ番号の有効/無効チェック

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] invalid  有効==0, 無効==1。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正,  invalid に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_is_valid(hresult, blobno, invalid)

def fnFIE_measure_get_blobnum(hresult, num) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_blobnum( const FHANDLE hresult, UINT* num )
    全ブローブ数の取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [out] num      全ブローブ数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    num に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_blobnum(hresult, num):
    r"""INT FVALGAPI fnFIE_measure_get_blobnum( const FHANDLE hresult, UINT* num )
    全ブローブ数の取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [out] num      全ブローブ数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    num に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_blobnum(hresult, num)

def fnFIE_measure_get_real_blobnum(hresult, num) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_real_blobnum( const FHANDLE hresult, UINT* num )
    有効BLOB数の取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [out] num      有効ブローブ数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 不正なハンドルが渡された
    - F_ERR_INVALID_PARAM   num に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_real_blobnum(hresult, num):
    r"""INT FVALGAPI fnFIE_measure_get_real_blobnum( const FHANDLE hresult, UINT* num )
    有効BLOB数の取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [out] num      有効ブローブ数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 不正なハンドルが渡された
    - F_ERR_INVALID_PARAM   num に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_real_blobnum(hresult, num)

def fnFIE_measure_get_color(hresult, blobno, color) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_color( const FHANDLE hresult, UINT blobno, UINT* color )
    色の取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] color    ブローブ色 0==黒, 1==白

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正,  color に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_color(hresult, blobno, color):
    r"""INT FVALGAPI fnFIE_measure_get_color( const FHANDLE hresult, UINT blobno, UINT* color )
    色の取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] color    ブローブ色 0==黒, 1==白

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正,  color に NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_color(hresult, blobno, color)

def fnFIE_measure_get_xyrange(hresult, blobno, xmin, ymin, xmax, ymax) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_xyrange( const FHANDLE hresult, UINT blobno, INT* xmin, INT* ymin, INT* xmax, INT* ymax )
    xyrangeの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] xmin     ｘ座標最小値
    - [out] ymin     ｙ座標最小値
    - [out] xmax     ｘ座標最大値
    - [out] ymax     ｙ座標最大値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_xyrange(hresult, blobno, xmin=DUMMY_INT, ymin=DUMMY_INT, xmax=DUMMY_INT, ymax=DUMMY_INT):
    r"""INT FVALGAPI fnFIE_measure_get_xyrange( const FHANDLE hresult, UINT blobno, INT* xmin, INT* ymin, INT* xmax, INT* ymax )
    xyrangeの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] xmin     ｘ座標最小値
    - [out] ymin     ｙ座標最小値
    - [out] xmax     ｘ座標最大値
    - [out] ymax     ｙ座標最大値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_xyrange(hresult, blobno, xmin, ymin, xmax, ymax)

def fnFIE_measure_get_area(hresult, blobno, area) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_area( const FHANDLE hresult, UINT blobno, UINT* area )
    対象ブローブの面積の取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] area     面積

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_area(hresult, blobno, area):
    r"""INT FVALGAPI fnFIE_measure_get_area( const FHANDLE hresult, UINT blobno, UINT* area )
    対象ブローブの面積の取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] area     面積

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_area(hresult, blobno, area)

def fnFIE_measure_get_maxminpos(hresult, blobno, xmin_at_ymin, xmax_at_ymax, ymin_at_xmax, ymax_at_xmin) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_maxminpos( const FHANDLE hresult, UINT blobno, INT* xmin_at_ymin, INT* xmax_at_ymax, INT* ymin_at_xmax, INT* ymax_at_xmin )
    座標の最大最小位置の取得

    Params:
    - [in]  hresult         ブローブ解析結果ハンドル
    - [in]  blobno          対象ブローブのブローブ番号
    - [out] xmin_at_ymin    ｙの最小位置におけるｘの最小値
    - [out] xmax_at_ymax    ｙの最大位置におけるｘの最大値
    - [out] ymin_at_xmax    ｘの最大位置におけるｙの最小値
    - [out] ymax_at_xmin    ｘの最小位置におけるｙの最大値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_maxminpos(hresult, blobno, xmin_at_ymin=DUMMY_INT, xmax_at_ymax=DUMMY_INT, ymin_at_xmax=DUMMY_INT, ymax_at_xmin=DUMMY_INT):
    r"""INT FVALGAPI fnFIE_measure_get_maxminpos( const FHANDLE hresult, UINT blobno, INT* xmin_at_ymin, INT* xmax_at_ymax, INT* ymin_at_xmax, INT* ymax_at_xmin )
    座標の最大最小位置の取得

    Params:
    - [in]  hresult         ブローブ解析結果ハンドル
    - [in]  blobno          対象ブローブのブローブ番号
    - [out] xmin_at_ymin    ｙの最小位置におけるｘの最小値
    - [out] xmax_at_ymax    ｙの最大位置におけるｘの最大値
    - [out] ymin_at_xmax    ｘの最大位置におけるｙの最小値
    - [out] ymax_at_xmin    ｘの最小位置におけるｙの最大値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_maxminpos(hresult, blobno, xmin_at_ymin, xmax_at_ymax, ymin_at_xmax, ymax_at_xmin)

def fnFIE_measure_get_xydiff(hresult, blobno, xdiff, ydiff) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_xydiff( const FHANDLE hresult, UINT blobno, INT* xdiff, INT* ydiff )
    外接矩形サイズの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] xdiff    外接矩形横サイズ
    - [out] ydiff    外接矩形縦サイズ

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_xydiff(hresult, blobno, xdiff=DUMMY_INT, ydiff=DUMMY_INT):
    r"""INT FVALGAPI fnFIE_measure_get_xydiff( const FHANDLE hresult, UINT blobno, INT* xdiff, INT* ydiff )
    外接矩形サイズの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] xdiff    外接矩形横サイズ
    - [out] ydiff    外接矩形縦サイズ

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_xydiff(hresult, blobno, xdiff, ydiff)

def fnFIE_measure_get_rect1_area(hresult, blobno, rect1_area) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_rect1_area( const FHANDLE hresult, UINT blobno, UINT* rect1_area )
    外接矩形面積の取得

    Params:
    - [in]  hresult    ブローブ解析結果ハンドル
    - [in]  blobno     対象ブローブのブローブ番号
    - [out] rect1_area 外接矩形面積

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_rect1_area(hresult, blobno, rect1_area):
    r"""INT FVALGAPI fnFIE_measure_get_rect1_area( const FHANDLE hresult, UINT blobno, UINT* rect1_area )
    外接矩形面積の取得

    Params:
    - [in]  hresult    ブローブ解析結果ハンドル
    - [in]  blobno     対象ブローブのブローブ番号
    - [out] rect1_area 外接矩形面積

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_rect1_area(hresult, blobno, rect1_area)

def fnFIE_measure_get_rect1_lratio(hresult, blobno, rect1_lratio) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_rect1_lratio( const FHANDLE hresult, UINT blobno, DOUBLE* rect1_lratio )
    外接矩形縦横比の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] rect1_lratio  外接矩形縦横比

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_rect1_lratio(hresult, blobno, rect1_lratio):
    r"""INT FVALGAPI fnFIE_measure_get_rect1_lratio( const FHANDLE hresult, UINT blobno, DOUBLE* rect1_lratio )
    外接矩形縦横比の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] rect1_lratio  外接矩形縦横比

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_rect1_lratio(hresult, blobno, rect1_lratio)

def fnFIE_measure_get_rect1_sratio(hresult, blobno, rect1_sratio) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_rect1_sratio( const FHANDLE hresult, UINT blobno, DOUBLE* rect1_sratio )
    外接矩形面積比の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] rect1_sratio  外接矩形面積比

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_rect1_sratio(hresult, blobno, rect1_sratio):
    r"""INT FVALGAPI fnFIE_measure_get_rect1_sratio( const FHANDLE hresult, UINT blobno, DOUBLE* rect1_sratio )
    外接矩形面積比の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] rect1_sratio  外接矩形面積比

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_rect1_sratio(hresult, blobno, rect1_sratio)

def fnFIE_measure_get_moment1(hresult, blobno, sumx, sumy) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_moment1( const FHANDLE hresult, UINT blobno, DLONG* sumx, DLONG* sumy )
    １次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] sumx     ｘ方向１次モーメント
    - [out] sumy     ｙ方向１次モーメント

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_moment1(hresult, blobno, sumx=DUMMY_DLONG, sumy=DUMMY_DLONG):
    r"""INT FVALGAPI fnFIE_measure_get_moment1( const FHANDLE hresult, UINT blobno, DLONG* sumx, DLONG* sumy )
    １次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] sumx     ｘ方向１次モーメント
    - [out] sumy     ｙ方向１次モーメント

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_moment1(hresult, blobno, sumx, sumy)

def fnFIE_measure_get_moment2(hresult, blobno, sumx2, sumy2, sumxy) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_moment2( const FHANDLE hresult, UINT blobno, UDLONG* sumx2, UDLONG* sumy2, DLONG* sumxy )
    ２次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] sumx2    ｘ方向２次モーメント
    - [out] sumy2    ｙ方向２次モーメント
    - [out] sumxy    ｘｙ方向２次モーメント

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_moment2(hresult, blobno, sumx2=DUMMY_UDLONG, sumy2=DUMMY_UDLONG, sumxy=DUMMY_UDLONG):
    r"""INT FVALGAPI fnFIE_measure_get_moment2( const FHANDLE hresult, UINT blobno, UDLONG* sumx2, UDLONG* sumy2, DLONG* sumxy )
    ２次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] sumx2    ｘ方向２次モーメント
    - [out] sumy2    ｙ方向２次モーメント
    - [out] sumxy    ｘｙ方向２次モーメント

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_moment2(hresult, blobno, sumx2, sumy2, sumxy)

def fnFIE_measure_get_central_moment2(hresult, blobno, mg20, mg02, mg11) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_central_moment2( const FHANDLE hresult, UINT blobno, DOUBLE* mg20, DOUBLE* mg02, DOUBLE* mg11 )
    重心２次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] mg20     ｘ方向２次モーメント
    - [out] mg02     ｙ方向２次モーメント
    - [out] mg11     ｘｙ方向２次モーメント

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_central_moment2(hresult, blobno, mg20=DUMMY_DOUBLE, mg02=DUMMY_DOUBLE, mg11=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_measure_get_central_moment2( const FHANDLE hresult, UINT blobno, DOUBLE* mg20, DOUBLE* mg02, DOUBLE* mg11 )
    重心２次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] mg20     ｘ方向２次モーメント
    - [out] mg02     ｙ方向２次モーメント
    - [out] mg11     ｘｙ方向２次モーメント

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_central_moment2(hresult, blobno, mg20, mg02, mg11)

def fnFIE_measure_get_moment3(hresult, blobno, m30, m03, m21, m12) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_moment3( const FHANDLE hresult, UINT blobno, DOUBLE* m30, DOUBLE* m03, DOUBLE* m21, DOUBLE* m12 )
    ３次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] m30      $ M_{30} $
    - [out] m03      $ M_{03} $
    - [out] m21      $ M_{21} $
    - [out] m12      $ M_{12} $

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_moment3(hresult, blobno, m30=DUMMY_DOUBLE, m03=DUMMY_DOUBLE, m21=DUMMY_DOUBLE, m12=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_measure_get_moment3( const FHANDLE hresult, UINT blobno, DOUBLE* m30, DOUBLE* m03, DOUBLE* m21, DOUBLE* m12 )
    ３次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] m30      $ M_{30} $
    - [out] m03      $ M_{03} $
    - [out] m21      $ M_{21} $
    - [out] m12      $ M_{12} $

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_moment3(hresult, blobno, m30, m03, m21, m12)

def fnFIE_measure_get_central_moment3(hresult, blobno, mg30, mg03, mg21, mg12) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_central_moment3( const FHANDLE hresult, UINT blobno, DOUBLE* mg30, DOUBLE* mg03, DOUBLE* mg21, DOUBLE* mg12 )
    重心３次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] mg30      $ MG_{30} $
    - [out] mg03      $ MG_{03} $
    - [out] mg21      $ MG_{21} $
    - [out] mg12      $ MG_{12} $

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_central_moment3(hresult, blobno, mg30=DUMMY_DOUBLE, mg03=DUMMY_DOUBLE, mg21=DUMMY_DOUBLE, mg12=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_measure_get_central_moment3( const FHANDLE hresult, UINT blobno, DOUBLE* mg30, DOUBLE* mg03, DOUBLE* mg21, DOUBLE* mg12 )
    重心３次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] mg30      $ MG_{30} $
    - [out] mg03      $ MG_{03} $
    - [out] mg21      $ MG_{21} $
    - [out] mg12      $ MG_{12} $

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_central_moment3(hresult, blobno, mg30, mg03, mg21, mg12)

def fnFIE_measure_get_moment(hresult, blobno, xn, yn, m) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_moment( const FHANDLE hresult, UINT blobno, INT xn, INT yn, DOUBLE* m )
    Ｎ次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [in]  xn       ｘの次数( 0以上 )
    - [in]  yn       ｙの次数( 0以上 )
    - [out] m        $ M_{pq} $

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM   以下のいずれかの理由によりパラメータエラー
                                  -  blobno に指定されたブローブ番号が不正
                                  - パラメータに NULL pointer が渡された
                                  -  xn または  yn が0より小さい
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_moment(hresult, blobno, xn, yn, m):
    r"""INT FVALGAPI fnFIE_measure_get_moment( const FHANDLE hresult, UINT blobno, INT xn, INT yn, DOUBLE* m )
    Ｎ次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [in]  xn       ｘの次数( 0以上 )
    - [in]  yn       ｙの次数( 0以上 )
    - [out] m        $ M_{pq} $

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM   以下のいずれかの理由によりパラメータエラー
                                  -  blobno に指定されたブローブ番号が不正
                                  - パラメータに NULL pointer が渡された
                                  -  xn または  yn が0より小さい
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_moment(hresult, blobno, xn, yn, m)

def fnFIE_measure_get_central_moment(hresult, blobno, xn, yn, mg) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_central_moment( const FHANDLE hresult, UINT blobno, INT xn, INT yn, DOUBLE* mg )
    重心Ｎ次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [in]  xn       ｘの次数( 0以上 )
    - [in]  yn       ｙの次数( 0以上 )
    - [out] mg       $ MG_{pq} $

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM   以下のいずれかの理由によりパラメータエラー
                                  -  blobno に指定されたブローブ番号が不正
                                  - パラメータに NULL pointer が渡された
                                  -  xn または  yn が0より小さい
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_central_moment(hresult, blobno, xn, yn, mg):
    r"""INT FVALGAPI fnFIE_measure_get_central_moment( const FHANDLE hresult, UINT blobno, INT xn, INT yn, DOUBLE* mg )
    重心Ｎ次モーメントの取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [in]  xn       ｘの次数( 0以上 )
    - [in]  yn       ｙの次数( 0以上 )
    - [out] mg       $ MG_{pq} $

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM   以下のいずれかの理由によりパラメータエラー
                                  -  blobno に指定されたブローブ番号が不正
                                  - パラメータに NULL pointer が渡された
                                  -  xn または  yn が0より小さい
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_central_moment(hresult, blobno, xn, yn, mg)

def fnFIE_measure_get_hu_moments(hresult, blobno, h) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_hu_moments( const FHANDLE hresult, UINT blobno, DOUBLE* h )
    Huモーメント不変量の取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] h        Huモーメント不変量の出力先配列。サイズは7

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_hu_moments(hresult, blobno, h):
    r"""INT FVALGAPI fnFIE_measure_get_hu_moments( const FHANDLE hresult, UINT blobno, DOUBLE* h )
    Huモーメント不変量の取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] h        Huモーメント不変量の出力先配列。サイズは7

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_hu_moments(hresult, blobno, h)

def fnFIE_measure_get_center(hresult, blobno, centerx, centery) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_center( const FHANDLE hresult, UINT blobno, DOUBLE* centerx, DOUBLE* centery )
    重心の取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] centerx  重心のｘ座標
    - [out] centery  重心のｙ座標

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_center(hresult, blobno, centerx=DUMMY_DOUBLE, centery=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_measure_get_center( const FHANDLE hresult, UINT blobno, DOUBLE* centerx, DOUBLE* centery )
    重心の取得

    Params:
    - [in]  hresult  ブローブ解析結果ハンドル
    - [in]  blobno   対象ブローブのブローブ番号
    - [out] centerx  重心のｘ座標
    - [out] centery  重心のｙ座標

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_center(hresult, blobno, centerx, centery)

def fnFIE_measure_get_equivalent_ellipse(hresult, blobno, majoraxis, minoraxis, theta, aratio) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_equivalent_ellipse( const FHANDLE hresult, UINT blobno, DOUBLE* majoraxis, DOUBLE* minoraxis, DOUBLE* theta, DOUBLE* aratio )
    等価楕円の取得

    Params:
    - [in]  hresult   ブローブ解析結果ハンドル
    - [in]  blobno    対象ブローブのブローブ番号
    - [out] majoraxis 慣性等価楕円 主軸長
    - [out] minoraxis 慣性等価楕円 副軸長
    - [out] theta     慣性等価楕円 主軸傾き( -π/2 <=  theta <= π/2 )
    - [out] aratio    慣性等価楕円 主軸副軸長比

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_equivalent_ellipse(hresult, blobno, majoraxis=DUMMY_DOUBLE, minoraxis=DUMMY_DOUBLE, theta=DUMMY_DOUBLE, aratio=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_measure_get_equivalent_ellipse( const FHANDLE hresult, UINT blobno, DOUBLE* majoraxis, DOUBLE* minoraxis, DOUBLE* theta, DOUBLE* aratio )
    等価楕円の取得

    Params:
    - [in]  hresult   ブローブ解析結果ハンドル
    - [in]  blobno    対象ブローブのブローブ番号
    - [out] majoraxis 慣性等価楕円 主軸長
    - [out] minoraxis 慣性等価楕円 副軸長
    - [out] theta     慣性等価楕円 主軸傾き( -π/2 <=  theta <= π/2 )
    - [out] aratio    慣性等価楕円 主軸副軸長比

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_equivalent_ellipse(hresult, blobno, majoraxis, minoraxis, theta, aratio)

def fnFIE_measure_get_equivalent_disk(hresult, blobno, diameter) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_equivalent_disk( const FHANDLE hresult, UINT blobno, DOUBLE* diameter )
    面積等価円の取得

    Params:
    - [in]  hresult   ブローブ解析結果ハンドル
    - [in]  blobno    対象ブローブのブローブ番号
    - [out] diameter  面積等価円直径

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_equivalent_disk(hresult, blobno, diameter):
    r"""INT FVALGAPI fnFIE_measure_get_equivalent_disk( const FHANDLE hresult, UINT blobno, DOUBLE* diameter )
    面積等価円の取得

    Params:
    - [in]  hresult   ブローブ解析結果ハンドル
    - [in]  blobno    対象ブローブのブローブ番号
    - [out] diameter  面積等価円直径

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_equivalent_disk(hresult, blobno, diameter)

def fnFIE_measure_get_rect2_size(hresult, blobno, lsize, wsize) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_rect2_size( const FHANDLE hresult, UINT blobno, DOUBLE* lsize, DOUBLE* wsize )
    外接長方形の取得

    Params:
    - [in]  hresult   ブローブ解析結果ハンドル
    - [in]  blobno    対象ブローブのブローブ番号
    - [out] lsize     外接長方形横長
    - [out] wsize     外接長方形縦長

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_rect2_size(hresult, blobno, lsize=DUMMY_DOUBLE, wsize=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_measure_get_rect2_size( const FHANDLE hresult, UINT blobno, DOUBLE* lsize, DOUBLE* wsize )
    外接長方形の取得

    Params:
    - [in]  hresult   ブローブ解析結果ハンドル
    - [in]  blobno    対象ブローブのブローブ番号
    - [out] lsize     外接長方形横長
    - [out] wsize     外接長方形縦長

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_rect2_size(hresult, blobno, lsize, wsize)

def fnFIE_measure_get_rect2_area(hresult, blobno, rect2_area) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_rect2_area( const FHANDLE hresult, UINT blobno, DOUBLE* rect2_area )
    外接長方形面積の取得

    Params:
    - [in]  hresult    ブローブ解析結果ハンドル
    - [in]  blobno     対象ブローブのブローブ番号
    - [out] rect2_area 外接長方形面積

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_rect2_area(hresult, blobno, rect2_area):
    r"""INT FVALGAPI fnFIE_measure_get_rect2_area( const FHANDLE hresult, UINT blobno, DOUBLE* rect2_area )
    外接長方形面積の取得

    Params:
    - [in]  hresult    ブローブ解析結果ハンドル
    - [in]  blobno     対象ブローブのブローブ番号
    - [out] rect2_area 外接長方形面積

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_rect2_area(hresult, blobno, rect2_area)

def fnFIE_measure_get_rect2_lratio(hresult, blobno, rect2_lratio) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_rect2_lratio( const FHANDLE hresult, UINT blobno, DOUBLE* rect2_lratio )
    外接長方形縦横比の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [out] rect2_lratio 外接長方形縦横比

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_rect2_lratio(hresult, blobno, rect2_lratio):
    r"""INT FVALGAPI fnFIE_measure_get_rect2_lratio( const FHANDLE hresult, UINT blobno, DOUBLE* rect2_lratio )
    外接長方形縦横比の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [out] rect2_lratio 外接長方形縦横比

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_rect2_lratio(hresult, blobno, rect2_lratio)

def fnFIE_measure_get_rect2_sratio(hresult, blobno, rect2_sratio) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_rect2_sratio( const FHANDLE hresult, UINT blobno, DOUBLE* rect2_sratio )
    外接長方形面積比の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [out] rect2_sratio 外接長方形面積比

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_rect2_sratio(hresult, blobno, rect2_sratio):
    r"""INT FVALGAPI fnFIE_measure_get_rect2_sratio( const FHANDLE hresult, UINT blobno, DOUBLE* rect2_sratio )
    外接長方形面積比の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [out] rect2_sratio 外接長方形面積比

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_rect2_sratio(hresult, blobno, rect2_sratio)

def fnFIE_measure_get_feret_diameter(hresult, blobno, theta, mode, diameter) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_feret_diameter( const FHANDLE hresult, UINT blobno, DOUBLE theta, INT mode, DOUBLE* diameter )
    フェレ径の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [in]  theta        計測角度(ラジアン)
    - [in]  mode         画素領域モード
                            - 0 : 点で計測
                            - 1 : 矩形の広がりを持つ点で計測
    - [out] diameter     フェレ径

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_feret_diameter(hresult, blobno, theta, mode, diameter):
    r"""INT FVALGAPI fnFIE_measure_get_feret_diameter( const FHANDLE hresult, UINT blobno, DOUBLE theta, INT mode, DOUBLE* diameter )
    フェレ径の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [in]  theta        計測角度(ラジアン)
    - [in]  mode         画素領域モード
                            - 0 : 点で計測
                            - 1 : 矩形の広がりを持つ点で計測
    - [out] diameter     フェレ径

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT   hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_feret_diameter(hresult, blobno, theta, mode, diameter)

def fnFIE_measure_get_perimeter(hresult, blobno, perimeter) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_perimeter( const FHANDLE hresult, UINT blobno, DOUBLE* perimeter )
    対象ブローブの周囲長の取得

    Params:
    - [in]  hresult    ブローブ解析結果ハンドル
    - [in]  blobno     対象ブローブのブローブ番号
    - [out] perimeter  周囲長

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_OBJECT   hresult に不正なハンドルが渡された。
    - F_ERR_INVALID_PARAM        blobno に不正なブローブ番号が渡された, パラメータに NULL ポインタが渡された。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_perimeter(hresult, blobno, perimeter):
    r"""INT FVALGAPI fnFIE_measure_get_perimeter( const FHANDLE hresult, UINT blobno, DOUBLE* perimeter )
    対象ブローブの周囲長の取得

    Params:
    - [in]  hresult    ブローブ解析結果ハンドル
    - [in]  blobno     対象ブローブのブローブ番号
    - [out] perimeter  周囲長

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_OBJECT   hresult に不正なハンドルが渡された。
    - F_ERR_INVALID_PARAM        blobno に不正なブローブ番号が渡された, パラメータに NULL ポインタが渡された。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_perimeter(hresult, blobno, perimeter)

def fnFIE_measure_get_boundary(hresult, blobno, pnts, pnum) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_boundary( const FHANDLE hresult, UINT blobno, PNT_T** pnts, UINT* pnum )
    周囲座標の取得

    Params:
    - [in]  hresult    ブローブ解析結果ハンドル
    - [in]  blobno     対象ブローブのブローブ番号
    - [out] pnts       出力点列の先頭ポインタを格納するアドレス(*pnts = NULL)
    - [out] pnum       出力点列の点の数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_OBJECT   hresult に不正なハンドルが渡された。
    - F_ERR_INVALID_PARAM       パラメータエラー
                                      -  blobno に不正なブローブ番号が渡された
                                      - パラメータに NULL ポインタが渡された。
                                      -  pnts が NULL でない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_boundary(hresult, blobno, pnts, pnum):
    r"""INT FVALGAPI fnFIE_measure_get_boundary( const FHANDLE hresult, UINT blobno, PNT_T** pnts, UINT* pnum )
    周囲座標の取得

    Params:
    - [in]  hresult    ブローブ解析結果ハンドル
    - [in]  blobno     対象ブローブのブローブ番号
    - [out] pnts       出力点列の先頭ポインタを格納するアドレス(*pnts = NULL)
    - [out] pnum       出力点列の点の数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_OBJECT   hresult に不正なハンドルが渡された。
    - F_ERR_INVALID_PARAM       パラメータエラー
                                      -  blobno に不正なブローブ番号が渡された
                                      - パラメータに NULL ポインタが渡された。
                                      -  pnts が NULL でない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_boundary(hresult, blobno, pnts, pnum)

def fnFIE_measure_get_boundary_ex(hresult, blobno, connection, ext_pnts, ext_pnum, int_pnts, int_pnum) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_boundary_ex( const FHANDLE hresult, UINT blobno, INT connection, PNT_T** ext_pnts, UINT* ext_pnum, PNT_T** int_pnts, UINT* int_pnum )
    周囲座標の取得

    Params:
    - [in]  hresult    ブローブ解析結果ハンドル
    - [in]  blobno     対象ブローブのブローブ番号
    - [in]  connection 連結条件
                            - 0: ブローブ解析したときの設定に従う
                            - 4: ４連結にて処理する
                            - 8: ８連結にて処理する
    - [out] ext_pnts    external boundary の出力点列の先頭ポインタを格納するアドレス
                            不要な場合は  ext_pnts に NULL を渡す。 ext_pnts != NULL の場合、
                            関数エントリー時  *ext_pnts == NULL でなければなりません
    - [out] ext_pnum     ext_pnts に出力された点の数
                             ext_pnts == NULL の場合、このパラメータは参照されません
    - [out] int_pnts    出力点列の先頭ポインタを格納するアドレス
                            不要な場合は  int_pnts に NULL を渡す。 int_pnts != NULL の場合、
                            関数エントリー時  *int_pnts == NULL でなければなりません
    - [out] int_pnum     int_pnts に出力された点の数
                             int_pnts == NULL の場合、このパラメータは参照されません

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_OBJECT   hresult に不正なハンドルが渡された。
    - F_ERR_INVALID_PARAM       パラメータエラー
                                      -  blobno に不正なブローブ番号が渡された
                                      - パラメータに NULL ポインタが渡された。
                                      -  ext_pnts と  int_pnts がともに NULL
                                      -  *ext_pnts 又は *int_pnts が NULL でない
                                      -  ext_pnum 又は  int_pnum が NULL
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_boundary_ex(hresult, blobno, connection, ext_pnts, ext_pnum, int_pnts, int_pnum):
    r"""INT FVALGAPI fnFIE_measure_get_boundary_ex( const FHANDLE hresult, UINT blobno, INT connection, PNT_T** ext_pnts, UINT* ext_pnum, PNT_T** int_pnts, UINT* int_pnum )
    周囲座標の取得

    Params:
    - [in]  hresult    ブローブ解析結果ハンドル
    - [in]  blobno     対象ブローブのブローブ番号
    - [in]  connection 連結条件
                            - 0: ブローブ解析したときの設定に従う
                            - 4: ４連結にて処理する
                            - 8: ８連結にて処理する
    - [out] ext_pnts    external boundary の出力点列の先頭ポインタを格納するアドレス
                            不要な場合は  ext_pnts に NULL を渡す。 ext_pnts != NULL の場合、
                            関数エントリー時  *ext_pnts == NULL でなければなりません
    - [out] ext_pnum     ext_pnts に出力された点の数
                             ext_pnts == NULL の場合、このパラメータは参照されません
    - [out] int_pnts    出力点列の先頭ポインタを格納するアドレス
                            不要な場合は  int_pnts に NULL を渡す。 int_pnts != NULL の場合、
                            関数エントリー時  *int_pnts == NULL でなければなりません
    - [out] int_pnum     int_pnts に出力された点の数
                             int_pnts == NULL の場合、このパラメータは参照されません

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_OBJECT   hresult に不正なハンドルが渡された。
    - F_ERR_INVALID_PARAM       パラメータエラー
                                      -  blobno に不正なブローブ番号が渡された
                                      - パラメータに NULL ポインタが渡された。
                                      -  ext_pnts と  int_pnts がともに NULL
                                      -  *ext_pnts 又は *int_pnts が NULL でない
                                      -  ext_pnum 又は  int_pnum が NULL
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_boundary_ex(hresult, blobno, connection, ext_pnts, ext_pnum, int_pnts, int_pnum)

def fnFIE_measure_get_convex2d(hresult, blobno, ppHull, verNum) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_convex2d( const FHANDLE hresult, UINT blobno, PNT_T** ppHull, UINT* verNum )
    凸包の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [out] ppHull       出力される凸包の頂点列（*ppHullは必ずNULLでなければならない）
    - [out] verNum       出力される凸包の頂点の個数

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    パラメータエラー
                                     -  blobno に指定されたブローブ番号が不正
                                     - パラメータに NULL pointer が渡された
                                     - *ppHull がNULLで無い
    - F_ERR_CALC_IMPOSSIBLE  計算不能
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_convex2d(hresult, blobno, ppHull, verNum):
    r"""INT FVALGAPI fnFIE_measure_get_convex2d( const FHANDLE hresult, UINT blobno, PNT_T** ppHull, UINT* verNum )
    凸包の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [out] ppHull       出力される凸包の頂点列（*ppHullは必ずNULLでなければならない）
    - [out] verNum       出力される凸包の頂点の個数

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    パラメータエラー
                                     -  blobno に指定されたブローブ番号が不正
                                     - パラメータに NULL pointer が渡された
                                     - *ppHull がNULLで無い
    - F_ERR_CALC_IMPOSSIBLE  計算不能
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_convex2d(hresult, blobno, ppHull, verNum)

def fnFIE_measure_get_circmcircle(hresult, blobno, center, radius) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_circmcircle( const FHANDLE hresult, UINT blobno, DPNT_T* center, DOUBLE* radius )
    最小外接円の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [out] center       最小外接円の中心
    - [out] radius       最小外接円の半径

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不能
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_circmcircle(hresult, blobno, center, radius):
    r"""INT FVALGAPI fnFIE_measure_get_circmcircle( const FHANDLE hresult, UINT blobno, DPNT_T* center, DOUBLE* radius )
    最小外接円の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [out] center       最小外接円の中心
    - [out] radius       最小外接円の半径

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不能
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_circmcircle(hresult, blobno, center, radius)

def fnFIE_measure_get_feret_diameter_maxmin(hresult, blobno, feretmax, fmax_theta, feretmin, fmin_theta) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_feret_diameter_maxmin( const FHANDLE hresult, UINT blobno, DOUBLE* feretmax, DOUBLE* fmax_theta, DOUBLE* feretmin, DOUBLE* fmin_theta )
    最大フェレ径、最小フェレ径の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [out] feretmax    最大フェレ径
    - [out] fmax_theta  最大フェレ径の角度( -π/2 <=  fmax_theta < π/2 )
    - [out] feretmin    最小フェレ径
    - [out] fmin_theta  最小フェレ径の角度( -π/2 <=  fmin_theta < π/2 )

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不能
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_feret_diameter_maxmin(hresult, blobno, feretmax=DUMMY_DOUBLE, fmax_theta=DUMMY_DOUBLE, feretmin=DUMMY_DOUBLE, fmin_theta=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_measure_get_feret_diameter_maxmin( const FHANDLE hresult, UINT blobno, DOUBLE* feretmax, DOUBLE* fmax_theta, DOUBLE* feretmin, DOUBLE* fmin_theta )
    最大フェレ径、最小フェレ径の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [out] feretmax    最大フェレ径
    - [out] fmax_theta  最大フェレ径の角度( -π/2 <=  fmax_theta < π/2 )
    - [out] feretmin    最小フェレ径
    - [out] fmin_theta  最小フェレ径の角度( -π/2 <=  fmin_theta < π/2 )

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不能
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_feret_diameter_maxmin(hresult, blobno, feretmax, fmax_theta, feretmin, fmin_theta)

def fnFIE_measure_get_rect2pos(hresult, blobno, points) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_rect2pos( const FHANDLE hresult, UINT blobno, DPNT_T* points )
    外接長方形の頂点座標の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [out] points       外接長方形の４頂点の点列。サイズは４

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_rect2pos(hresult, blobno, points):
    r"""INT FVALGAPI fnFIE_measure_get_rect2pos( const FHANDLE hresult, UINT blobno, DPNT_T* points )
    外接長方形の頂点座標の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [out] points       外接長方形の４頂点の点列。サイズは４

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_rect2pos(hresult, blobno, points)

def fnFIE_measure_get_bounding_rotated_rect_pos(hresult, blobno, theta, points) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_bounding_rotated_rect_pos( const FHANDLE hresult, UINT blobno, DOUBLE theta, DPNT_T* points )
    指定角度外接長方形の頂点座標の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [in]  theta        外接長方形の角度（外接長方形のある一辺とx軸がなす角度）単位：ラジアン
    - [out] points       外接長方形の４頂点の点列。サイズは４

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_bounding_rotated_rect_pos(hresult, blobno, theta, points):
    r"""INT FVALGAPI fnFIE_measure_get_bounding_rotated_rect_pos( const FHANDLE hresult, UINT blobno, DOUBLE theta, DPNT_T* points )
    指定角度外接長方形の頂点座標の取得

    Params:
    - [in]  hresult      ブローブ解析結果ハンドル
    - [in]  blobno       対象ブローブのブローブ番号
    - [in]  theta        外接長方形の角度（外接長方形のある一辺とx軸がなす角度）単位：ラジアン
    - [out] points       外接長方形の４頂点の点列。サイズは４

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_bounding_rotated_rect_pos(hresult, blobno, theta, points)

def fnFIE_measure_get_equivalent_circle(hresult, blobno, diameter_equicircle) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_equivalent_circle( const FHANDLE hresult, UINT blobno, DOUBLE* diameter_equicircle )
    周囲長等価円の取得

    Params:
    - [in]  hresult               ブローブ解析結果ハンドル
    - [in]  blobno                対象ブローブのブローブ番号
    - [out] diameter_equicircle   周囲長等価円直径

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_equivalent_circle(hresult, blobno, diameter_equicircle):
    r"""INT FVALGAPI fnFIE_measure_get_equivalent_circle( const FHANDLE hresult, UINT blobno, DOUBLE* diameter_equicircle )
    周囲長等価円の取得

    Params:
    - [in]  hresult               ブローブ解析結果ハンドル
    - [in]  blobno                対象ブローブのブローブ番号
    - [out] diameter_equicircle   周囲長等価円直径

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_equivalent_circle(hresult, blobno, diameter_equicircle)

def fnFIE_measure_get_convexfeature(hresult, blobno, convex_area, convex_perim) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_convexfeature( const FHANDLE hresult, UINT blobno, DOUBLE* convex_area, DOUBLE* convex_perim )
    凸包面積・周囲長の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] convex_area   凸包面積
    - [out] convex_perim  凸包周囲長

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不能
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_convexfeature(hresult, blobno, convex_area, convex_perim):
    r"""INT FVALGAPI fnFIE_measure_get_convexfeature( const FHANDLE hresult, UINT blobno, DOUBLE* convex_area, DOUBLE* convex_perim )
    凸包面積・周囲長の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] convex_area   凸包面積
    - [out] convex_perim  凸包周囲長

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不能
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_convexfeature(hresult, blobno, convex_area, convex_perim)

def fnFIE_measure_get_convexratio(hresult, blobno, convex_arearatio, convex_perimratio) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_convexratio( const FHANDLE hresult, UINT blobno, DOUBLE* convex_arearatio, DOUBLE* convex_perimratio )
    凸包面積比・周囲長比の取得

    Params:
    - [in]  hresult           ブローブ解析結果ハンドル
    - [in]  blobno            対象ブローブのブローブ番号
    - [out] convex_arearatio  凸包面積比
    - [out] convex_perimratio 凸包周囲長比

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正
    - F_ERR_CALC_IMPOSSIBLE  計算不能
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_convexratio(hresult, blobno, convex_arearatio, convex_perimratio):
    r"""INT FVALGAPI fnFIE_measure_get_convexratio( const FHANDLE hresult, UINT blobno, DOUBLE* convex_arearatio, DOUBLE* convex_perimratio )
    凸包面積比・周囲長比の取得

    Params:
    - [in]  hresult           ブローブ解析結果ハンドル
    - [in]  blobno            対象ブローブのブローブ番号
    - [out] convex_arearatio  凸包面積比
    - [out] convex_perimratio 凸包周囲長比

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正
    - F_ERR_CALC_IMPOSSIBLE  計算不能
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_convexratio(hresult, blobno, convex_arearatio, convex_perimratio)

def fnFIE_measure_get_distance_to_boundary(hresult, blobno, dpmax, dpmin, dpave, dpsigma) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_distance_to_boundary( const FHANDLE hresult, UINT blobno, DOUBLE* dpmax, DOUBLE* dpmin, DOUBLE* dpave, DOUBLE* dpsigma )
    外周距離の取得

    Params:
    - [in]  hresult     ブローブ解析結果ハンドル
    - [in]  blobno      対象ブローブのブローブ番号
    - [out] dpmax       外周距離最大値
    - [out] dpmin       外周距離最小値
    - [out] dpave       外周距離平均値
    - [out] dpsigma     外周距離標準偏差値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不能
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_distance_to_boundary(hresult, blobno, dpmax=DUMMY_DOUBLE, dpmin=DUMMY_DOUBLE, dpave=DUMMY_DOUBLE, dpsigma=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_measure_get_distance_to_boundary( const FHANDLE hresult, UINT blobno, DOUBLE* dpmax, DOUBLE* dpmin, DOUBLE* dpave, DOUBLE* dpsigma )
    外周距離の取得

    Params:
    - [in]  hresult     ブローブ解析結果ハンドル
    - [in]  blobno      対象ブローブのブローブ番号
    - [out] dpmax       外周距離最大値
    - [out] dpmin       外周距離最小値
    - [out] dpave       外周距離平均値
    - [out] dpsigma     外周距離標準偏差値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不能
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_distance_to_boundary(hresult, blobno, dpmax, dpmin, dpave, dpsigma)

def fnFIE_measure_get_circularity1(hresult, blobno, circularity1) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_circularity1( const FHANDLE hresult, UINT blobno, DOUBLE* circularity1 )
    真円度＃１の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] circularity1  真円度＃１

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NOMEMORY         メモリ不足エラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_circularity1(hresult, blobno, circularity1):
    r"""INT FVALGAPI fnFIE_measure_get_circularity1( const FHANDLE hresult, UINT blobno, DOUBLE* circularity1 )
    真円度＃１の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] circularity1  真円度＃１

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NOMEMORY         メモリ不足エラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_circularity1(hresult, blobno, circularity1)

def fnFIE_measure_get_circularity2(hresult, blobno, circularity2) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_circularity2( const FHANDLE hresult, UINT blobno, DOUBLE* circularity2 )
    真円度＃２の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] circularity2  真円度＃２

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NOMEMORY         メモリ不足エラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_circularity2(hresult, blobno, circularity2):
    r"""INT FVALGAPI fnFIE_measure_get_circularity2( const FHANDLE hresult, UINT blobno, DOUBLE* circularity2 )
    真円度＃２の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] circularity2  真円度＃２

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NOMEMORY         メモリ不足エラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_circularity2(hresult, blobno, circularity2)

def fnFIE_measure_get_circularity3(hresult, blobno, circularity3) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_circularity3( const FHANDLE hresult, UINT blobno, DOUBLE* circularity3 )
    真円度＃３の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] circularity3  真円度＃３

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NOMEMORY         メモリ不足エラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_circularity3(hresult, blobno, circularity3):
    r"""INT FVALGAPI fnFIE_measure_get_circularity3( const FHANDLE hresult, UINT blobno, DOUBLE* circularity3 )
    真円度＃３の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] circularity3  真円度＃３

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NOMEMORY         メモリ不足エラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_circularity3(hresult, blobno, circularity3)

def fnFIE_measure_get_hole_num(hresult, blobno, holes) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_hole_num( const FHANDLE hresult, UINT blobno, UINT* holes )
    穴数の取得

    Params:
    - [in]  hresult   ブローブ解析結果ハンドル
    - [in]  blobno    対象ブローブのブローブ番号
    - [out] holes     穴数

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不可
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_hole_num(hresult, blobno, holes):
    r"""INT FVALGAPI fnFIE_measure_get_hole_num( const FHANDLE hresult, UINT blobno, UINT* holes )
    穴数の取得

    Params:
    - [in]  hresult   ブローブ解析結果ハンドル
    - [in]  blobno    対象ブローブのブローブ番号
    - [out] holes     穴数

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不可
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_hole_num(hresult, blobno, holes)

def fnFIE_measure_get_sibling_num(hresult, blobno, sibling_num) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_sibling_num( const FHANDLE hresult, UINT blobno, UINT* sibling_num )
    兄弟ブローブ数の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] sibling_num   兄弟ブローブ数

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_sibling_num(hresult, blobno, sibling_num):
    r"""INT FVALGAPI fnFIE_measure_get_sibling_num( const FHANDLE hresult, UINT blobno, UINT* sibling_num )
    兄弟ブローブ数の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] sibling_num   兄弟ブローブ数

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_sibling_num(hresult, blobno, sibling_num)

def fnFIE_measure_get_hole_area(hresult, blobno, sc) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_hole_area( const FHANDLE hresult, UINT blobno, UINT* sc )
    穴面積の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] sc            穴面積

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不可
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_hole_area(hresult, blobno, sc):
    r"""INT FVALGAPI fnFIE_measure_get_hole_area( const FHANDLE hresult, UINT blobno, UINT* sc )
    穴面積の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] sc            穴面積

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不可
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_hole_area(hresult, blobno, sc)

def fnFIE_measure_get_area_with_hole(hresult, blobno, st) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_area_with_hole( const FHANDLE hresult, UINT blobno, UINT* st )
    面積（穴面積含む）の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] st            穴を含んだブローブ面積

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不可
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_area_with_hole(hresult, blobno, st):
    r"""INT FVALGAPI fnFIE_measure_get_area_with_hole( const FHANDLE hresult, UINT blobno, UINT* st )
    面積（穴面積含む）の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] st            穴を含んだブローブ面積

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不可
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_area_with_hole(hresult, blobno, st)

def fnFIE_measure_get_hole_ratio(hresult, blobno, hratio) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_hole_ratio( const FHANDLE hresult, UINT blobno, DOUBLE* hratio )
    穴面積比の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] hratio        穴面積比

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不可
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_hole_ratio(hresult, blobno, hratio):
    r"""INT FVALGAPI fnFIE_measure_get_hole_ratio( const FHANDLE hresult, UINT blobno, DOUBLE* hratio )
    穴面積比の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] hratio        穴面積比

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不可
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_hole_ratio(hresult, blobno, hratio)

def fnFIE_measure_get_distance_to_childs(hresult, blobno, dcmax, dcmin, dcave) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_distance_to_childs( const FHANDLE hresult, UINT blobno, DOUBLE* dcmax, DOUBLE* dcmin, DOUBLE* dcave )
    子供距離の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] dcmax         子供距離最大値
    - [out] dcmin         子供距離最小値
    - [out] dcave         子供距離平均値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不可
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_distance_to_childs(hresult, blobno, dcmax=DUMMY_DOUBLE, dcmin=DUMMY_DOUBLE, dcave=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_measure_get_distance_to_childs( const FHANDLE hresult, UINT blobno, DOUBLE* dcmax, DOUBLE* dcmin, DOUBLE* dcave )
    子供距離の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] dcmax         子供距離最大値
    - [out] dcmin         子供距離最小値
    - [out] dcave         子供距離平均値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不可
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_distance_to_childs(hresult, blobno, dcmax, dcmin, dcave)

def fnFIE_measure_get_pps(hresult, blobno, pps) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_pps( const FHANDLE hresult, UINT blobno, DOUBLE* pps )
    面積周囲長比(pps)の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] pps           PPS

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_pps(hresult, blobno, pps):
    r"""INT FVALGAPI fnFIE_measure_get_pps( const FHANDLE hresult, UINT blobno, DOUBLE* pps )
    面積周囲長比(pps)の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] pps           PPS

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_NOMEMORY         メモリ不足
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_pps(hresult, blobno, pps)

def fnFIE_measure_get_distance_to_siblings(hresult, blobno, dsmax, dsmin, dsave) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_distance_to_siblings( const FHANDLE hresult, UINT blobno, DOUBLE* dsmax, DOUBLE* dsmin, DOUBLE* dsave )
    隣接エリア（兄弟ブローブ）間距離の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] dsmax         隣接間距離最大値
    - [out] dsmin         隣接間距離最小値
    - [out] dsave         隣接間距離平均値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不可
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_distance_to_siblings(hresult, blobno, dsmax=DUMMY_DOUBLE, dsmin=DUMMY_DOUBLE, dsave=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_measure_get_distance_to_siblings( const FHANDLE hresult, UINT blobno, DOUBLE* dsmax, DOUBLE* dsmin, DOUBLE* dsave )
    隣接エリア（兄弟ブローブ）間距離の取得

    Params:
    - [in]  hresult       ブローブ解析結果ハンドル
    - [in]  blobno        対象ブローブのブローブ番号
    - [out] dsmax         隣接間距離最大値
    - [out] dsmin         隣接間距離最小値
    - [out] dsave         隣接間距離平均値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM     blobno に指定されたブローブ番号が不正, パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  計算不可
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_distance_to_siblings(hresult, blobno, dsmax, dsmin, dsave)

def fnFIE_measure_get_blobno_on_xy(hresult, x, y, blobno) -> Any:
    r"""INT FVALGAPI fnFIE_measure_get_blobno_on_xy( const FHANDLE hresult, INT x, INT y, UINT* blobno )
    座標(x,y)の位置のブローブ番号取得

    Params:
    - [in]  hresult    ブローブ解析結果ハンドル
    - [in]  x          ブローブ番号を取得するＸ座標
    - [in]  y          ブローブ番号を取得するＹ座標
    - [out] blobno     ブローブ番号

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    パラメータエラー、以下のいずれか。
                                     -  x,  y に渡された座標がブローブ解析をした領域外
                                     - または パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  (  x,  y ) を含むブローブが無い。
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def measure_get_blobno_on_xy(hresult, x, y, blobno):
    r"""INT FVALGAPI fnFIE_measure_get_blobno_on_xy( const FHANDLE hresult, INT x, INT y, UINT* blobno )
    座標(x,y)の位置のブローブ番号取得

    Params:
    - [in]  hresult    ブローブ解析結果ハンドル
    - [in]  x          ブローブ番号を取得するＸ座標
    - [in]  y          ブローブ番号を取得するＹ座標
    - [out] blobno     ブローブ番号

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_OBJECT    hresult に指定されたオブジェクトハンドルが不正
    - F_ERR_INVALID_PARAM    パラメータエラー、以下のいずれか。
                                     -  x,  y に渡された座標がブローブ解析をした領域外
                                     - または パラメータに NULL pointer が渡された
    - F_ERR_CALC_IMPOSSIBLE  (  x,  y ) を含むブローブが無い。
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_measure_get_blobno_on_xy(hresult, x, y, blobno)

def fnFIE_fft_free_spec(hFFT) -> Any:
    r"""void fnFIE_fft_free_spec( FHANDLE hFFT )
    FFTオブジェクトの解放

    Params:
    - [in] hFFT 解放するFFTオブジェクトのハンドル

    Returns:
    """
    raise NotImplementedError

def fft_free_spec(hFFT):
    r"""void fnFIE_fft_free_spec( FHANDLE hFFT )
    FFTオブジェクトの解放

    Params:
    - [in] hFFT 解放するFFTオブジェクトのハンドル

    Returns:
    """

    return _fie.fnFIE_fft_free_spec(hFFT)

def fnFIE_fft_1D_alloc(phFFT, iOrder, iDirection, iNormalization, iSignalDataType, iFourierDataType) -> Any:
    r"""INT FVALGAPI fnFIE_fft_1D_alloc( FHANDLE* phFFT, INT iOrder, enum f_fft_direction iDirection, enum f_fft_normalize_type iNormalization, enum f_fft_data_type iSignalDataType, enum f_fft_data_type iFourierDataType )
    １次元フーリエ変換用にFFTハンドルを初期化する

    Params:
    - [in,out]  phFFT               FFTハンドルのポインタ。ポインタの入力値はNULLでなければいけません。
    - [in]      iOrder              データ長の次数。データの入出力長  N は $ N \leq 2^{iOrder} $ を満たさなければいけません
    - [in]      iDirection          実行するフーリエ変換の方向。  f_fft_direction を参照して下さい。
    - [in]      iNormalization      正規化手法。  f_fft_normalize_type を参照して下さい。
    - [in]      iSignalDataType     時間領域データの形式。  f_fft_data_type を参照して下さい。
    - [in]      iFourierDataType    周波数領域データの形式。  f_fft_data_type を参照して下さい。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM
        -  phFFT のポインタ値がNULLでない
        - $ iOrder \leq 0 $ 又は $ iOrder > 31 $
        - パラメータの組合せが不適切
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_1D_alloc(phFFT, iOrder, iDirection=F_FFT_BIDIRECTION, iNormalization=F_FFT_DIV_INV_BY_N, iSignalDataType=F_1D_FFT_FCOMPLEX, iFourierDataType=F_1D_FFT_FCOMPLEX):
    r"""INT FVALGAPI fnFIE_fft_1D_alloc( FHANDLE* phFFT, INT iOrder, enum f_fft_direction iDirection, enum f_fft_normalize_type iNormalization, enum f_fft_data_type iSignalDataType, enum f_fft_data_type iFourierDataType )
    １次元フーリエ変換用にFFTハンドルを初期化する

    Params:
    - [in,out]  phFFT               FFTハンドルのポインタ。ポインタの入力値はNULLでなければいけません。
    - [in]      iOrder              データ長の次数。データの入出力長  N は $ N \leq 2^{iOrder} $ を満たさなければいけません
    - [in]      iDirection          実行するフーリエ変換の方向。  f_fft_direction を参照して下さい。
    - [in]      iNormalization      正規化手法。  f_fft_normalize_type を参照して下さい。
    - [in]      iSignalDataType     時間領域データの形式。  f_fft_data_type を参照して下さい。
    - [in]      iFourierDataType    周波数領域データの形式。  f_fft_data_type を参照して下さい。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM
        -  phFFT のポインタ値がNULLでない
        - $ iOrder \leq 0 $ 又は $ iOrder > 31 $
        - パラメータの組合せが不適切
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_1D_alloc(phFFT, iOrder, iDirection, iNormalization, iSignalDataType, iFourierDataType)

def fnFIE_fft_2D_alloc(phFFT, iWidth, iHeight, iDirection, iNormalization, iImgDataType, iFourierDataType) -> Any:
    r"""INT FVALGAPI fnFIE_fft_2D_alloc( FHANDLE* phFFT, INT iWidth, INT iHeight, enum f_fft_direction iDirection, enum f_fft_normalize_type iNormalization, enum f_fft_data_type iImgDataType, enum f_fft_data_type iFourierDataType )
    ２次元フーリエ変換用にFFTハンドルを初期化する

    Params:
    - [in,out]  phFFT               FFTハンドルのポインタ。ポインタの入力値はNULLでなければいけません。
    - [in]      iWidth              フーリエ変換を行う空間領域又は周波数領域画像の幅
    - [in]      iHeight             フーリエ変換を行う空間領域又は周波数領域画像の高さ
    - [in]      iDirection          実行するフーリエ変換の方向。  f_fft_direction を参照して下さい。
    - [in]      iNormalization      正規化手法。  f_fft_normalize_type を参照して下さい。
    - [in]      iImgDataType        時間領域データの形式。  f_fft_data_type を参照して下さい。
    - [in]      iFourierDataType    周波数領域データの形式。  f_fft_data_type を参照して下さい。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM
        -  phFFT のポインタ値がNULLでない
        - $ iWidth \leq 1 $ 又は $ iHeight \leq 1 $
        - パラメータの組合せが不適切
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_2D_alloc(phFFT, iWidth, iHeight, iDirection=F_FFT_BIDIRECTION, iNormalization=F_FFT_DIV_INV_BY_N, iImgDataType=F_2D_FFT_REAL, iFourierDataType=F_2D_FFT_DOUBLEC):
    r"""INT FVALGAPI fnFIE_fft_2D_alloc( FHANDLE* phFFT, INT iWidth, INT iHeight, enum f_fft_direction iDirection, enum f_fft_normalize_type iNormalization, enum f_fft_data_type iImgDataType, enum f_fft_data_type iFourierDataType )
    ２次元フーリエ変換用にFFTハンドルを初期化する

    Params:
    - [in,out]  phFFT               FFTハンドルのポインタ。ポインタの入力値はNULLでなければいけません。
    - [in]      iWidth              フーリエ変換を行う空間領域又は周波数領域画像の幅
    - [in]      iHeight             フーリエ変換を行う空間領域又は周波数領域画像の高さ
    - [in]      iDirection          実行するフーリエ変換の方向。  f_fft_direction を参照して下さい。
    - [in]      iNormalization      正規化手法。  f_fft_normalize_type を参照して下さい。
    - [in]      iImgDataType        時間領域データの形式。  f_fft_data_type を参照して下さい。
    - [in]      iFourierDataType    周波数領域データの形式。  f_fft_data_type を参照して下さい。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM
        -  phFFT のポインタ値がNULLでない
        - $ iWidth \leq 1 $ 又は $ iHeight \leq 1 $
        - パラメータの組合せが不適切
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_2D_alloc(phFFT, iWidth, iHeight, iDirection, iNormalization, iImgDataType, iFourierDataType)

def fnFIE_fft_copy_spec(hfft) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_fft_copy_spec( FHANDLE hfft )
    FFT処理情報オブジェクトのコピー

    Params:
    - [in] hfft コピーするFFT処理情報オブジェクトのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """
    raise NotImplementedError

def fft_copy_spec(hfft):
    r"""FHANDLE FVALGAPI fnFIE_fft_copy_spec( FHANDLE hfft )
    FFT処理情報オブジェクトのコピー

    Params:
    - [in] hfft コピーするFFT処理情報オブジェクトのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """

    return _fie.fnFIE_fft_copy_spec(hfft)

def fnFIE_fft_get_spec(hFFT, ipSpecType, ipWidth, ipHeight, ipNormalization) -> Any:
    r"""INT FVALGAPI fnFIE_fft_get_spec( const FHANDLE hFFT, INT* ipSpecType, INT* ipWidth, INT* ipHeight, INT* ipNormalization )
    FFTハンドルが保持しているパラメータを取得する

    Params:
    - [in]      hFFT                FFTハンドル
    - [out]     ipSpecType          FFTハンドルの種類
    - [out]     ipWidth             １次元FFTの場合はデータ長を返します。２次元FFTの場合は画像幅を返します。
    - [out]     ipHeight            １次元FFTの場合は0を返します。２次元FFTの場合は画像高さを返します。
    - [in]      ipNormalization     正規化手法。  f_fft_normalize_type を参照して下さい。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT がNULLポインタ
    - F_ERR_INVALID_PARAM        hFFT の型が F_OBJID_FFTSPEC ではない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_get_spec(hFFT, ipSpecType=None, ipWidth=None, ipHeight=None, ipNormalization=None):
    r"""INT FVALGAPI fnFIE_fft_get_spec( const FHANDLE hFFT, INT* ipSpecType, INT* ipWidth, INT* ipHeight, INT* ipNormalization )
    FFTハンドルが保持しているパラメータを取得する

    Params:
    - [in]      hFFT                FFTハンドル
    - [out]     ipSpecType          FFTハンドルの種類
    - [out]     ipWidth             １次元FFTの場合はデータ長を返します。２次元FFTの場合は画像幅を返します。
    - [out]     ipHeight            １次元FFTの場合は0を返します。２次元FFTの場合は画像高さを返します。
    - [in]      ipNormalization     正規化手法。  f_fft_normalize_type を参照して下さい。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT がNULLポインタ
    - F_ERR_INVALID_PARAM        hFFT の型が F_OBJID_FFTSPEC ではない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_get_spec(hFFT, ipSpecType, ipWidth, ipHeight, ipNormalization)

def fnFIE_fft_check_spec(hFFT, iWidth, iHeight, iDirection, iSignalDataType, iFourierDataType) -> Any:
    r"""INT FVALGAPI fnFIE_fft_check_spec( const FHANDLE hFFT, INT iWidth, INT iHeight, INT iDirection, INT iSignalDataType, INT iFourierDataType )
    FFTハンドルの有効性チェック

    Params:
    - [in]      hFFT                既存FFTハンドル
    - [in]      iWidth              １次元FFTの場合はデータ長を入力。２次元FFTの場合は画像幅を入力。
    - [in]      iHeight             １次元FFTの場合は0を入力。２次元FFTの場合は画像高さを入力。
    - [in]      iDirection          実行するフーリエ変換の方向。  f_fft_direction を参照して下さい。
    - [in]      iSignalDataType     時間領域データの形式。  f_fft_data_type を参照して下さい。
    - [in]      iFourierDataType    周波数領域データの形式。  f_fft_data_type を参照して下さい。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT がNULLポインタ
    - F_ERR_INVALID_PARAM       パラメータ不正
                                    -  hFFT の型が F_OBJID_FFTSPEC ではない
                                    - 入力パラメータは有効なFIE_FFTのパラメータではない
    - F_ERR_FFT_INVALID_SPEC    既存FFTハンドルは指定された条件のFFTに適用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_check_spec(hFFT, iWidth, iHeight, iDirection, iSignalDataType, iFourierDataType):
    r"""INT FVALGAPI fnFIE_fft_check_spec( const FHANDLE hFFT, INT iWidth, INT iHeight, INT iDirection, INT iSignalDataType, INT iFourierDataType )
    FFTハンドルの有効性チェック

    Params:
    - [in]      hFFT                既存FFTハンドル
    - [in]      iWidth              １次元FFTの場合はデータ長を入力。２次元FFTの場合は画像幅を入力。
    - [in]      iHeight             １次元FFTの場合は0を入力。２次元FFTの場合は画像高さを入力。
    - [in]      iDirection          実行するフーリエ変換の方向。  f_fft_direction を参照して下さい。
    - [in]      iSignalDataType     時間領域データの形式。  f_fft_data_type を参照して下さい。
    - [in]      iFourierDataType    周波数領域データの形式。  f_fft_data_type を参照して下さい。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT がNULLポインタ
    - F_ERR_INVALID_PARAM       パラメータ不正
                                    -  hFFT の型が F_OBJID_FFTSPEC ではない
                                    - 入力パラメータは有効なFIE_FFTのパラメータではない
    - F_ERR_FFT_INVALID_SPEC    既存FFTハンドルは指定された条件のFFTに適用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_check_spec(hFFT, iWidth, iHeight, iDirection, iSignalDataType, iFourierDataType)

def fnFIE_fft_fwd_CtoC_in(hFFT, vpData, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_CtoC_in( FHANDLE hFFT, FCOMPLEX* vpData, INT iOrder )
    interleaved format の複素数データの１次元順方向フーリエ変換を行う（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out]  vpData      時間領域の１次元入力データのポインタ（＝周波数領域の出力データ）
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  vpData に NULLポインタが渡された。
    - F_ERR_INVALID_PARAM       パラメータエラー
                                    -  hFFT が F_OBJID_FFTSPEC 型ではない
                                    -  iOrder > 31 または  iOrder <= 0
                                    - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC    指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_CtoC_in(hFFT, vpData, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_CtoC_in( FHANDLE hFFT, FCOMPLEX* vpData, INT iOrder )
    interleaved format の複素数データの１次元順方向フーリエ変換を行う（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out]  vpData      時間領域の１次元入力データのポインタ（＝周波数領域の出力データ）
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  vpData に NULLポインタが渡された。
    - F_ERR_INVALID_PARAM       パラメータエラー
                                    -  hFFT が F_OBJID_FFTSPEC 型ではない
                                    -  iOrder > 31 または  iOrder <= 0
                                    - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC    指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_CtoC_in(hFFT, vpData, iOrder)

def fnFIE_fft_inv_CtoC_in(hFFT, vpData, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_CtoC_in( FHANDLE hFFT, FCOMPLEX* vpData, INT iOrder )
    interleaved format の複素数データの１次元逆フーリエ変換を行う（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] vpData       周波数領域の１次元入力データのポインタ（＝時間領域の出力データ）
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  vpData に NULLポインタが渡された。
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_CtoC_in(hFFT, vpData, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_CtoC_in( FHANDLE hFFT, FCOMPLEX* vpData, INT iOrder )
    interleaved format の複素数データの１次元逆フーリエ変換を行う（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] vpData       周波数領域の１次元入力データのポインタ（＝時間領域の出力データ）
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  vpData に NULLポインタが渡された。
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_CtoC_in(hFFT, vpData, iOrder)

def fnFIE_fft_fwd_CtoC_out(hFFT, vpSrc, vpDst, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_CtoC_out( FHANDLE hFFT, const FCOMPLEX* vpSrc, FCOMPLEX* vpDst, INT iOrder )
    interleaved format の複素数データの１次元順方向フーリエ変換を行う（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      vpSrc       時間領域の１次元入力データのポインタ
    - [out]     vpDst       周波数領域の１次元出力データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  vpSrc 又は  vpDst に NULLポインタが渡された。
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_CtoC_out(hFFT, vpSrc, vpDst, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_CtoC_out( FHANDLE hFFT, const FCOMPLEX* vpSrc, FCOMPLEX* vpDst, INT iOrder )
    interleaved format の複素数データの１次元順方向フーリエ変換を行う（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      vpSrc       時間領域の１次元入力データのポインタ
    - [out]     vpDst       周波数領域の１次元出力データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  vpSrc 又は  vpDst に NULLポインタが渡された。
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_CtoC_out(hFFT, vpSrc, vpDst, iOrder)

def fnFIE_fft_inv_CtoC_out(hFFT, vpSrc, vpDst, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_CtoC_out( FHANDLE hFFT, const FCOMPLEX* vpSrc, FCOMPLEX* vpDst, INT iOrder )
    interleaved format の複素数データの１次元逆フーリエ変換を行う（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      vpSrc       時間領域の１次元入力データのポインタ
    - [out]     vpDst       周波数領域の１次元出力データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  vpSrc 又は  vpDst に NULLポインタが渡された。
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_CtoC_out(hFFT, vpSrc, vpDst, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_CtoC_out( FHANDLE hFFT, const FCOMPLEX* vpSrc, FCOMPLEX* vpDst, INT iOrder )
    interleaved format の複素数データの１次元逆フーリエ変換を行う（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      vpSrc       時間領域の１次元入力データのポインタ
    - [out]     vpDst       周波数領域の１次元出力データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  vpSrc 又は  vpDst に NULLポインタが渡された。
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_CtoC_out(hFFT, vpSrc, vpDst, iOrder)

def fnFIE_fft_fwd_DDtoDD_in(hFFT, dpRe, dpIm, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_DDtoDD_in( FHANDLE hFFT, DOUBLE* dpRe, DOUBLE* dpIm, INT iOrder )
    splitted format の複素数データの１次元順方向フーリエ変換を行う（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] dpRe     時間領域の１次元入力データの実部のポインタ（＝周波数領域の出力データの実部）
    - [in,out] dpIm     時間領域の１次元入力データの虚部のポインタ（＝周波数領域の出力データの虚部）
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  dpRe 又は  dpIm に NULLポインタが渡された。
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_DDtoDD_in(hFFT, dpRe, dpIm, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_DDtoDD_in( FHANDLE hFFT, DOUBLE* dpRe, DOUBLE* dpIm, INT iOrder )
    splitted format の複素数データの１次元順方向フーリエ変換を行う（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] dpRe     時間領域の１次元入力データの実部のポインタ（＝周波数領域の出力データの実部）
    - [in,out] dpIm     時間領域の１次元入力データの虚部のポインタ（＝周波数領域の出力データの虚部）
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  dpRe 又は  dpIm に NULLポインタが渡された。
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_DDtoDD_in(hFFT, dpRe, dpIm, iOrder)

def fnFIE_fft_inv_DDtoDD_in(hFFT, dpRe, dpIm, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_DDtoDD_in( FHANDLE hFFT, DOUBLE* dpRe, DOUBLE* dpIm, INT iOrder )
    splitted format の複素数データの１次元逆フーリエ変換を行う（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] dpRe     周波数領域の１次元入力データの実部のポインタ（＝時間領域の出力データの実部）
    - [in,out] dpIm     周波数領域の１次元入力データの虚部のポインタ（＝時間領域の出力データの虚部）
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  dpRe 又は  dpIm に NULLポインタが渡された。
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_DDtoDD_in(hFFT, dpRe, dpIm, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_DDtoDD_in( FHANDLE hFFT, DOUBLE* dpRe, DOUBLE* dpIm, INT iOrder )
    splitted format の複素数データの１次元逆フーリエ変換を行う（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] dpRe     周波数領域の１次元入力データの実部のポインタ（＝時間領域の出力データの実部）
    - [in,out] dpIm     周波数領域の１次元入力データの虚部のポインタ（＝時間領域の出力データの虚部）
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  dpRe 又は  dpIm に NULLポインタが渡された。
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_DDtoDD_in(hFFT, dpRe, dpIm, iOrder)

def fnFIE_fft_fwd_DDtoDD_out(hFFT, dpSrcRe, dpSrcIm, dpDstRe, dpDstIm, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_DDtoDD_out( FHANDLE hFFT, const DOUBLE* dpSrcRe, const DOUBLE* dpSrcIm, DOUBLE* dpDstRe, DOUBLE* dpDstIm, INT iOrder )
    splitted format の複素数データの１次元順方向フーリエ変換を行う（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpSrcRe     時間領域の１次元入力データの実部のポインタ
    - [in]      dpSrcIm     時間領域の１次元入力データの虚部のポインタ
    - [out]     dpDstRe     周波数領域の１次元出力データの実部のポインタ
    - [out]     dpDstIm     周波数領域の１次元出力データの虚部のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrcRe ,  dpSrcIm ,  dpDstRe ,  dpDstIm のいずれかにNULLポインタが渡された。
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_DDtoDD_out(hFFT, dpSrcRe, dpSrcIm, dpDstRe, dpDstIm, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_DDtoDD_out( FHANDLE hFFT, const DOUBLE* dpSrcRe, const DOUBLE* dpSrcIm, DOUBLE* dpDstRe, DOUBLE* dpDstIm, INT iOrder )
    splitted format の複素数データの１次元順方向フーリエ変換を行う（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpSrcRe     時間領域の１次元入力データの実部のポインタ
    - [in]      dpSrcIm     時間領域の１次元入力データの虚部のポインタ
    - [out]     dpDstRe     周波数領域の１次元出力データの実部のポインタ
    - [out]     dpDstIm     周波数領域の１次元出力データの虚部のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrcRe ,  dpSrcIm ,  dpDstRe ,  dpDstIm のいずれかにNULLポインタが渡された。
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_DDtoDD_out(hFFT, dpSrcRe, dpSrcIm, dpDstRe, dpDstIm, iOrder)

def fnFIE_fft_inv_DDtoDD_out(hFFT, dpSrcRe, dpSrcIm, dpDstRe, dpDstIm, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_DDtoDD_out( FHANDLE hFFT, const DOUBLE* dpSrcRe, const DOUBLE* dpSrcIm, DOUBLE* dpDstRe, DOUBLE* dpDstIm, INT iOrder )
    splitted format の複素数データの１次元逆フーリエ変換を行う（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpSrcRe     周波数領域の１次元入力データの実部のポインタ
    - [in]      dpSrcIm     周波数領域の１次元入力データの虚部のポインタ
    - [out]     dpDstRe     時間領域の１次元出力データの実部のポインタ
    - [out]     dpDstIm     時間領域の１次元出力データの虚部のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrcRe ,  dpSrcIm ,  dpDstRe ,  dpDstIm のいずれかにNULLポインタが渡された。
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_DDtoDD_out(hFFT, dpSrcRe, dpSrcIm, dpDstRe, dpDstIm, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_DDtoDD_out( FHANDLE hFFT, const DOUBLE* dpSrcRe, const DOUBLE* dpSrcIm, DOUBLE* dpDstRe, DOUBLE* dpDstIm, INT iOrder )
    splitted format の複素数データの１次元逆フーリエ変換を行う（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpSrcRe     周波数領域の１次元入力データの実部のポインタ
    - [in]      dpSrcIm     周波数領域の１次元入力データの虚部のポインタ
    - [out]     dpDstRe     時間領域の１次元出力データの実部のポインタ
    - [out]     dpDstIm     時間領域の１次元出力データの虚部のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrcRe ,  dpSrcIm ,  dpDstRe ,  dpDstIm のいずれかにNULLポインタが渡された。
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_DDtoDD_out(hFFT, dpSrcRe, dpSrcIm, dpDstRe, dpDstIm, iOrder)

def fnFIE_fft_fwd_UC8toC(hFFT, ucpSrc, vpDst, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_UC8toC( FHANDLE hFFT, const UCHAR* ucpSrc, FCOMPLEX* vpDst, INT iOrder )
    時間領域の１次元実数データの順方向フーリエ変換を行い、interleaved format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      ucpSrc      時間領域の１次元の実数入力データのポインタ
    - [out]     vpDst       周波数領域の１次元の複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  ucpSrc ,  vpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_UC8toC(hFFT, ucpSrc, vpDst, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_UC8toC( FHANDLE hFFT, const UCHAR* ucpSrc, FCOMPLEX* vpDst, INT iOrder )
    時間領域の１次元実数データの順方向フーリエ変換を行い、interleaved format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      ucpSrc      時間領域の１次元の実数入力データのポインタ
    - [out]     vpDst       周波数領域の１次元の複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  ucpSrc ,  vpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_UC8toC(hFFT, ucpSrc, vpDst, iOrder)

def fnFIE_fft_inv_CtoUC8(hFFT, vpSrc, ucpDst, dScaleFactor, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_CtoUC8( FHANDLE hFFT, const FCOMPLEX* vpSrc, UCHAR* ucpDst, DOUBLE dScaleFactor, INT iOrder )
    interleaved format の周波数領域１次元複素数データを逆フーリエ変換し、UCHAR 型の実数データを出力する

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      vpSrc           周波数領域の１次元複素数入力データのポインタ
    - [out]     ucpDst          時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUCHAR型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  vpSrc ,  ucpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_CtoUC8(hFFT, vpSrc, ucpDst, dScaleFactor, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_CtoUC8( FHANDLE hFFT, const FCOMPLEX* vpSrc, UCHAR* ucpDst, DOUBLE dScaleFactor, INT iOrder )
    interleaved format の周波数領域１次元複素数データを逆フーリエ変換し、UCHAR 型の実数データを出力する

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      vpSrc           周波数領域の１次元複素数入力データのポインタ
    - [out]     ucpDst          時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUCHAR型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  vpSrc ,  ucpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_CtoUC8(hFFT, vpSrc, ucpDst, dScaleFactor, iOrder)

def fnFIE_fft_fwd_UC8toDD(hFFT, ucpSrc, dpRe, dpIm, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_UC8toDD( FHANDLE hFFT, const UCHAR* ucpSrc, DOUBLE* dpRe, DOUBLE* dpIm, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、splitted format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      ucpSrc      時間領域の１次元実数入力データのポインタ
    - [out]     dpRe        周波数領域の１次元複素数出力データの実部のポインタ
    - [out]     dpIm        周波数領域の１次元複素数出力データの虚部のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  ucpSrc ,  dpRe ,  dpIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_UC8toDD(hFFT, ucpSrc, dpRe, dpIm, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_UC8toDD( FHANDLE hFFT, const UCHAR* ucpSrc, DOUBLE* dpRe, DOUBLE* dpIm, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、splitted format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      ucpSrc      時間領域の１次元実数入力データのポインタ
    - [out]     dpRe        周波数領域の１次元複素数出力データの実部のポインタ
    - [out]     dpIm        周波数領域の１次元複素数出力データの虚部のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  ucpSrc ,  dpRe ,  dpIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_UC8toDD(hFFT, ucpSrc, dpRe, dpIm, iOrder)

def fnFIE_fft_inv_DDtoUC8(hFFT, dpRe, dpIm, ucpDst, dScaleFactor, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_DDtoUC8( FHANDLE hFFT, const DOUBLE* dpRe, const DOUBLE* dpIm, UCHAR* ucpDst, DOUBLE dScaleFactor, INT iOrder )
    周波数領域の１次元複素数データを逆フーリエ変換し、UCHAR型の時間領域１次元実数データを出力する

    Params:
    - [in]      hFFT            handle of FFT structure
    - [in]      dpRe            周波数領域の１次元複素数入力データの実部のポインタ
    - [in]      dpIm            周波数領域の１次元複素数入力データの虚部のポインタ
    - [out]     ucpDst          時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUCHAR型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpRe ,  dpIm ,  ucpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_DDtoUC8(hFFT, dpRe, dpIm, ucpDst, dScaleFactor, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_DDtoUC8( FHANDLE hFFT, const DOUBLE* dpRe, const DOUBLE* dpIm, UCHAR* ucpDst, DOUBLE dScaleFactor, INT iOrder )
    周波数領域の１次元複素数データを逆フーリエ変換し、UCHAR型の時間領域１次元実数データを出力する

    Params:
    - [in]      hFFT            handle of FFT structure
    - [in]      dpRe            周波数領域の１次元複素数入力データの実部のポインタ
    - [in]      dpIm            周波数領域の１次元複素数入力データの虚部のポインタ
    - [out]     ucpDst          時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUCHAR型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpRe ,  dpIm ,  ucpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_DDtoUC8(hFFT, dpRe, dpIm, ucpDst, dScaleFactor, iOrder)

def fnFIE_fft_fwd_UC8toPack(hFFT, ucpSrc, dpDst, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_UC8toPack( FHANDLE hFFT, const UCHAR* ucpSrc, DOUBLE* dpDst, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、packed format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      ucpSrc      時間領域の１次元実数入力データのポインタ
    - [out]     dpDst       packed format の周波数領域の１次元複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  ucpSrc ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_UC8toPack(hFFT, ucpSrc, dpDst, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_UC8toPack( FHANDLE hFFT, const UCHAR* ucpSrc, DOUBLE* dpDst, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、packed format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      ucpSrc      時間領域の１次元実数入力データのポインタ
    - [out]     dpDst       packed format の周波数領域の１次元複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  ucpSrc ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_UC8toPack(hFFT, ucpSrc, dpDst, iOrder)

def fnFIE_fft_inv_PacktoUC8(hFFT, dpSrc, ucpDst, dScaleFactor, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_PacktoUC8( FHANDLE hFFT, const DOUBLE* dpSrc, UCHAR* ucpDst, DOUBLE dScaleFactor, INT iOrder )
    packed format の周波数領域の１次元複素数データを逆フーリエ変換し、UCHAR型の時間領域１次元実数データを出力する。

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      dpSrc           packed format の周波数領域１次元複素数入力データのポインタ
    - [out]     ucpDst          時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUCHAR型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  ucpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_PacktoUC8(hFFT, dpSrc, ucpDst, dScaleFactor, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_PacktoUC8( FHANDLE hFFT, const DOUBLE* dpSrc, UCHAR* ucpDst, DOUBLE dScaleFactor, INT iOrder )
    packed format の周波数領域の１次元複素数データを逆フーリエ変換し、UCHAR型の時間領域１次元実数データを出力する。

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      dpSrc           packed format の周波数領域１次元複素数入力データのポインタ
    - [out]     ucpDst          時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUCHAR型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  ucpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_PacktoUC8(hFFT, dpSrc, ucpDst, dScaleFactor, iOrder)

def fnFIE_fft_fwd_US16toC(hFFT, uspSrc, vpDst, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_US16toC( FHANDLE hFFT, const USHORT* uspSrc, FCOMPLEX* vpDst, INT iOrder )
    時間領域の１次元実数データの順方向フーリエ変換を行い、interleaved format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      uspSrc      時間領域の１次元の実数入力データのポインタ
    - [out]     vpDst       周波数領域の１次元の複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  uspSrc ,  vpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_US16toC(hFFT, uspSrc, vpDst, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_US16toC( FHANDLE hFFT, const USHORT* uspSrc, FCOMPLEX* vpDst, INT iOrder )
    時間領域の１次元実数データの順方向フーリエ変換を行い、interleaved format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      uspSrc      時間領域の１次元の実数入力データのポインタ
    - [out]     vpDst       周波数領域の１次元の複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  uspSrc ,  vpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_US16toC(hFFT, uspSrc, vpDst, iOrder)

def fnFIE_fft_inv_CtoUS16(hFFT, vpSrc, uspDst, dScaleFactor, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_CtoUS16( FHANDLE hFFT, const FCOMPLEX* vpSrc, USHORT* uspDst, DOUBLE dScaleFactor, INT iOrder )
    interleaved format の周波数領域１次元複素数データを逆フーリエ変換し、USHORT 型の実数データを出力する

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      vpSrc           周波数領域の１次元複素数入力データのポインタ
    - [out]     uspDst          時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUCHAR型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  vpSrc ,  uspDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_CtoUS16(hFFT, vpSrc, uspDst, dScaleFactor, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_CtoUS16( FHANDLE hFFT, const FCOMPLEX* vpSrc, USHORT* uspDst, DOUBLE dScaleFactor, INT iOrder )
    interleaved format の周波数領域１次元複素数データを逆フーリエ変換し、USHORT 型の実数データを出力する

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      vpSrc           周波数領域の１次元複素数入力データのポインタ
    - [out]     uspDst          時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUCHAR型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  vpSrc ,  uspDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_CtoUS16(hFFT, vpSrc, uspDst, dScaleFactor, iOrder)

def fnFIE_fft_fwd_US16toDD(hFFT, uspSrc, dpRe, dpIm, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_US16toDD( FHANDLE hFFT, const USHORT* uspSrc, DOUBLE* dpRe, DOUBLE* dpIm, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、splitted format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      uspSrc      時間領域の１次元実数入力データのポインタ
    - [out]     dpRe        周波数領域の１次元複素数出力データの実部のポインタ
    - [out]     dpIm        周波数領域の１次元複素数出力データの虚部のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  uspSrc ,  dpRe ,  dpIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_US16toDD(hFFT, uspSrc, dpRe, dpIm, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_US16toDD( FHANDLE hFFT, const USHORT* uspSrc, DOUBLE* dpRe, DOUBLE* dpIm, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、splitted format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      uspSrc      時間領域の１次元実数入力データのポインタ
    - [out]     dpRe        周波数領域の１次元複素数出力データの実部のポインタ
    - [out]     dpIm        周波数領域の１次元複素数出力データの虚部のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  uspSrc ,  dpRe ,  dpIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_US16toDD(hFFT, uspSrc, dpRe, dpIm, iOrder)

def fnFIE_fft_inv_DDtoUS16(hFFT, dpRe, dpIm, uspDst, dScaleFactor, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_DDtoUS16( FHANDLE hFFT, const DOUBLE* dpRe, const DOUBLE* dpIm, USHORT* uspDst, DOUBLE dScaleFactor, INT iOrder )
    周波数領域の１次元複素数データを逆フーリエ変換し、USHORT型の時間領域１次元実数データを出力する

    Params:
    - [in]      hFFT            handle of FFT structure
    - [in]      dpRe            周波数領域の１次元複素数入力データの実部のポインタ
    - [in]      dpIm            周波数領域の１次元複素数入力データの虚部のポインタ
    - [out]     uspDst          時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUSHORT型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpRe ,  dpIm ,  uspDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_DDtoUS16(hFFT, dpRe, dpIm, uspDst, dScaleFactor, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_DDtoUS16( FHANDLE hFFT, const DOUBLE* dpRe, const DOUBLE* dpIm, USHORT* uspDst, DOUBLE dScaleFactor, INT iOrder )
    周波数領域の１次元複素数データを逆フーリエ変換し、USHORT型の時間領域１次元実数データを出力する

    Params:
    - [in]      hFFT            handle of FFT structure
    - [in]      dpRe            周波数領域の１次元複素数入力データの実部のポインタ
    - [in]      dpIm            周波数領域の１次元複素数入力データの虚部のポインタ
    - [out]     uspDst          時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUSHORT型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpRe ,  dpIm ,  uspDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_DDtoUS16(hFFT, dpRe, dpIm, uspDst, dScaleFactor, iOrder)

def fnFIE_fft_fwd_US16toPack(hFFT, uspSrc, dpDst, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_US16toPack( FHANDLE hFFT, const USHORT* uspSrc, DOUBLE* dpDst, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、packed format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      uspSrc      時間領域の１次元実数入力データのポインタ
    - [out]     dpDst       packed format の周波数領域の１次元複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  uspSrc ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_US16toPack(hFFT, uspSrc, dpDst, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_US16toPack( FHANDLE hFFT, const USHORT* uspSrc, DOUBLE* dpDst, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、packed format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      uspSrc      時間領域の１次元実数入力データのポインタ
    - [out]     dpDst       packed format の周波数領域の１次元複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  uspSrc ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_US16toPack(hFFT, uspSrc, dpDst, iOrder)

def fnFIE_fft_inv_PacktoUS16(hFFT, dpSrc, uspDst, dScaleFactor, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_PacktoUS16( FHANDLE hFFT, const DOUBLE* dpSrc, USHORT* uspDst, DOUBLE dScaleFactor, INT iOrder )
    packed format の周波数領域の１次元複素数データを逆フーリエ変換し、USHORT型の時間領域１次元実数データを出力する。

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      dpSrc           packed format の周波数領域１次元複素数入力データのポインタ
    - [out]     uspDst          時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUCHAR型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  uspDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_PacktoUS16(hFFT, dpSrc, uspDst, dScaleFactor, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_PacktoUS16( FHANDLE hFFT, const DOUBLE* dpSrc, USHORT* uspDst, DOUBLE dScaleFactor, INT iOrder )
    packed format の周波数領域の１次元複素数データを逆フーリエ変換し、USHORT型の時間領域１次元実数データを出力する。

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      dpSrc           packed format の周波数領域１次元複素数入力データのポインタ
    - [out]     uspDst          時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUCHAR型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  uspDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_PacktoUS16(hFFT, dpSrc, uspDst, dScaleFactor, iOrder)

def fnFIE_fft_fwd_S16toC(hFFT, spSrc, vpDst, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_S16toC( FHANDLE hFFT, const SHORT* spSrc, FCOMPLEX* vpDst, INT iOrder )
    時間領域の１次元実数データの順方向フーリエ変換を行い、interleaved format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      spSrc       時間領域の１次元の実数入力データのポインタ
    - [out]     vpDst       周波数領域の１次元の複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  spSrc ,  vpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_S16toC(hFFT, spSrc, vpDst, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_S16toC( FHANDLE hFFT, const SHORT* spSrc, FCOMPLEX* vpDst, INT iOrder )
    時間領域の１次元実数データの順方向フーリエ変換を行い、interleaved format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      spSrc       時間領域の１次元の実数入力データのポインタ
    - [out]     vpDst       周波数領域の１次元の複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  spSrc ,  vpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_S16toC(hFFT, spSrc, vpDst, iOrder)

def fnFIE_fft_inv_CtoS16(hFFT, vpSrc, spDst, dScaleFactor, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_CtoS16( FHANDLE hFFT, const FCOMPLEX* vpSrc, SHORT* spDst, DOUBLE dScaleFactor, INT iOrder )
    interleaved format の周波数領域１次元複素数データを逆フーリエ変換し、SHORT 型の実数データを出力する

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      vpSrc           周波数領域の１次元複素数入力データのポインタ
    - [out]     spDst           時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をSHORT型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  vpSrc ,  spDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_CtoS16(hFFT, vpSrc, spDst, dScaleFactor, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_CtoS16( FHANDLE hFFT, const FCOMPLEX* vpSrc, SHORT* spDst, DOUBLE dScaleFactor, INT iOrder )
    interleaved format の周波数領域１次元複素数データを逆フーリエ変換し、SHORT 型の実数データを出力する

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      vpSrc           周波数領域の１次元複素数入力データのポインタ
    - [out]     spDst           時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をSHORT型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  vpSrc ,  spDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_CtoS16(hFFT, vpSrc, spDst, dScaleFactor, iOrder)

def fnFIE_fft_fwd_S16toDD(hFFT, spSrc, dpRe, dpIm, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_S16toDD( FHANDLE hFFT, const SHORT* spSrc, DOUBLE* dpRe, DOUBLE* dpIm, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、splitted format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      spSrc       時間領域の１次元実数入力データのポインタ
    - [out]     dpRe        周波数領域の１次元複素数出力データの実部のポインタ
    - [out]     dpIm        周波数領域の１次元複素数出力データの虚部のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  spSrc ,  dpRe ,  dpIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_S16toDD(hFFT, spSrc, dpRe, dpIm, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_S16toDD( FHANDLE hFFT, const SHORT* spSrc, DOUBLE* dpRe, DOUBLE* dpIm, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、splitted format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      spSrc       時間領域の１次元実数入力データのポインタ
    - [out]     dpRe        周波数領域の１次元複素数出力データの実部のポインタ
    - [out]     dpIm        周波数領域の１次元複素数出力データの虚部のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  spSrc ,  dpRe ,  dpIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_S16toDD(hFFT, spSrc, dpRe, dpIm, iOrder)

def fnFIE_fft_inv_DDtoS16(hFFT, dpRe, dpIm, spDst, dScaleFactor, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_DDtoS16( FHANDLE hFFT, const DOUBLE* dpRe, const DOUBLE* dpIm, SHORT* spDst, DOUBLE dScaleFactor, INT iOrder )
    周波数領域の１次元複素数データを逆フーリエ変換し、SHORT型の時間領域１次元実数データを出力する

    Params:
    - [in]      hFFT            handle of FFT structure
    - [in]      dpRe            周波数領域の１次元複素数入力データの実部のポインタ
    - [in]      dpIm            周波数領域の１次元複素数入力データの虚部のポインタ
    - [out]     spDst           時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をSHORT型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpRe ,  dpIm ,  spDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_DDtoS16(hFFT, dpRe, dpIm, spDst, dScaleFactor, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_DDtoS16( FHANDLE hFFT, const DOUBLE* dpRe, const DOUBLE* dpIm, SHORT* spDst, DOUBLE dScaleFactor, INT iOrder )
    周波数領域の１次元複素数データを逆フーリエ変換し、SHORT型の時間領域１次元実数データを出力する

    Params:
    - [in]      hFFT            handle of FFT structure
    - [in]      dpRe            周波数領域の１次元複素数入力データの実部のポインタ
    - [in]      dpIm            周波数領域の１次元複素数入力データの虚部のポインタ
    - [out]     spDst           時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をSHORT型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpRe ,  dpIm ,  spDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_DDtoS16(hFFT, dpRe, dpIm, spDst, dScaleFactor, iOrder)

def fnFIE_fft_fwd_S16toPack(hFFT, spSrc, dpDst, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_S16toPack( FHANDLE hFFT, const SHORT* spSrc, DOUBLE* dpDst, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、packed format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      spSrc       時間領域の１次元実数入力データのポインタ
    - [out]     dpDst       packed format の周波数領域の１次元複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  spSrc ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_S16toPack(hFFT, spSrc, dpDst, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_S16toPack( FHANDLE hFFT, const SHORT* spSrc, DOUBLE* dpDst, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、packed format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      spSrc       時間領域の１次元実数入力データのポインタ
    - [out]     dpDst       packed format の周波数領域の１次元複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  spSrc ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_S16toPack(hFFT, spSrc, dpDst, iOrder)

def fnFIE_fft_inv_PacktoS16(hFFT, dpSrc, spDst, dScaleFactor, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_PacktoS16( FHANDLE hFFT, const DOUBLE* dpSrc, SHORT* spDst, DOUBLE dScaleFactor, INT iOrder )
    packed format の周波数領域の１次元複素数データを逆フーリエ変換し、UCHAR型の時間領域１次元実数データを出力する。

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      dpSrc           packed format の周波数領域１次元複素数入力データのポインタ
    - [out]     spDst           時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUCHAR型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  spDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_PacktoS16(hFFT, dpSrc, spDst, dScaleFactor, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_PacktoS16( FHANDLE hFFT, const DOUBLE* dpSrc, SHORT* spDst, DOUBLE dScaleFactor, INT iOrder )
    packed format の周波数領域の１次元複素数データを逆フーリエ変換し、UCHAR型の時間領域１次元実数データを出力する。

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      dpSrc           packed format の周波数領域１次元複素数入力データのポインタ
    - [out]     spDst           時間領域の１次元実数出力データのポインタ
    - [in]      dScaleFactor    変換結果をUCHAR型の値範囲内に納めるために掛ける値
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  spDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
        -  dScaleFactor が 0.0
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_PacktoS16(hFFT, dpSrc, spDst, dScaleFactor, iOrder)

def fnFIE_fft_fwd_D64toC(hFFT, dpSrc, vpDst, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_D64toC( FHANDLE hFFT, const DOUBLE* dpSrc, FCOMPLEX* vpDst, INT iOrder )
    時間領域の１次元実数データの順方向フーリエ変換を行い、interleaved format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpSrc       時間領域の１次元の実数入力データのポインタ
    - [out]     vpDst       周波数領域の１次元の複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  vpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_D64toC(hFFT, dpSrc, vpDst, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_D64toC( FHANDLE hFFT, const DOUBLE* dpSrc, FCOMPLEX* vpDst, INT iOrder )
    時間領域の１次元実数データの順方向フーリエ変換を行い、interleaved format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpSrc       時間領域の１次元の実数入力データのポインタ
    - [out]     vpDst       周波数領域の１次元の複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  vpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_D64toC(hFFT, dpSrc, vpDst, iOrder)

def fnFIE_fft_inv_CtoD64(hFFT, vpSrc, dpDst, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_CtoD64( FHANDLE hFFT, const FCOMPLEX* vpSrc, DOUBLE* dpDst, INT iOrder )
    interleaved format の周波数領域１次元複素数データを逆フーリエ変換し、DOUBLE型の実数データを出力する

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      vpSrc           周波数領域の１次元複素数入力データのポインタ
    - [out]     dpDst           時間領域の１次元実数出力データのポインタ
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  vpSrc ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_CtoD64(hFFT, vpSrc, dpDst, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_CtoD64( FHANDLE hFFT, const FCOMPLEX* vpSrc, DOUBLE* dpDst, INT iOrder )
    interleaved format の周波数領域１次元複素数データを逆フーリエ変換し、DOUBLE型の実数データを出力する

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      vpSrc           周波数領域の１次元複素数入力データのポインタ
    - [out]     dpDst           時間領域の１次元実数出力データのポインタ
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  vpSrc ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_CtoD64(hFFT, vpSrc, dpDst, iOrder)

def fnFIE_fft_fwd_D64toDD(hFFT, dpSrc, dpRe, dpIm, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_D64toDD( FHANDLE hFFT, const DOUBLE* dpSrc, DOUBLE* dpRe, DOUBLE* dpIm, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、splitted format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpSrc       時間領域の１次元実数入力データのポインタ
    - [out]     dpRe        周波数領域の１次元複素数出力データの実部のポインタ
    - [out]     dpIm        周波数領域の１次元複素数出力データの虚部のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  dpRe ,  dpIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_D64toDD(hFFT, dpSrc, dpRe, dpIm, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_D64toDD( FHANDLE hFFT, const DOUBLE* dpSrc, DOUBLE* dpRe, DOUBLE* dpIm, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、splitted format の複素数データを出力する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpSrc       時間領域の１次元実数入力データのポインタ
    - [out]     dpRe        周波数領域の１次元複素数出力データの実部のポインタ
    - [out]     dpIm        周波数領域の１次元複素数出力データの虚部のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  dpRe ,  dpIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_D64toDD(hFFT, dpSrc, dpRe, dpIm, iOrder)

def fnFIE_fft_inv_DDtoD64(hFFT, dpRe, dpIm, dpDst, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_DDtoD64( FHANDLE hFFT, const DOUBLE* dpRe, const DOUBLE* dpIm, DOUBLE* dpDst, INT iOrder )
    周波数領域の１次元複素数データを逆フーリエ変換し、DOUBLE型の時間領域１次元実数データを出力する

    Params:
    - [in]      hFFT        handle of FFT structure
    - [in]      dpRe        周波数領域の１次元複素数入力データの実部のポインタ
    - [in]      dpIm        周波数領域の１次元複素数入力データの虚部のポインタ
    - [out]     dpDst       時間領域の１次元実数出力データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpRe ,  dpIm ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_DDtoD64(hFFT, dpRe, dpIm, dpDst, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_DDtoD64( FHANDLE hFFT, const DOUBLE* dpRe, const DOUBLE* dpIm, DOUBLE* dpDst, INT iOrder )
    周波数領域の１次元複素数データを逆フーリエ変換し、DOUBLE型の時間領域１次元実数データを出力する

    Params:
    - [in]      hFFT        handle of FFT structure
    - [in]      dpRe        周波数領域の１次元複素数入力データの実部のポインタ
    - [in]      dpIm        周波数領域の１次元複素数入力データの虚部のポインタ
    - [out]     dpDst       時間領域の１次元実数出力データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpRe ,  dpIm ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_DDtoD64(hFFT, dpRe, dpIm, dpDst, iOrder)

def fnFIE_fft_fwd_D64toPack_out(hFFT, dpSrc, dpDst, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_D64toPack_out( FHANDLE hFFT, const DOUBLE* dpSrc, DOUBLE* dpDst, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、packed format の複素数データを出力する。（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpSrc       時間領域の１次元実数入力データのポインタ
    - [out]     dpDst       packed format の周波数領域の１次元複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_D64toPack_out(hFFT, dpSrc, dpDst, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_D64toPack_out( FHANDLE hFFT, const DOUBLE* dpSrc, DOUBLE* dpDst, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、packed format の複素数データを出力する。（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpSrc       時間領域の１次元実数入力データのポインタ
    - [out]     dpDst       packed format の周波数領域の１次元複素数データのポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_D64toPack_out(hFFT, dpSrc, dpDst, iOrder)

def fnFIE_fft_inv_PacktoD64_out(hFFT, dpSrc, dpDst, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_PacktoD64_out( FHANDLE hFFT, const DOUBLE* dpSrc, DOUBLE* dpDst, INT iOrder )
    packed format の周波数領域の１次元複素数データを逆フーリエ変換し、DOUBLE型の時間領域１次元実数データを出力する。

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      dpSrc           packed format の周波数領域１次元複素数入力データのポインタ
    - [out]     dpDst           時間領域の１次元実数出力データのポインタ
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_PacktoD64_out(hFFT, dpSrc, dpDst, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_PacktoD64_out( FHANDLE hFFT, const DOUBLE* dpSrc, DOUBLE* dpDst, INT iOrder )
    packed format の周波数領域の１次元複素数データを逆フーリエ変換し、DOUBLE型の時間領域１次元実数データを出力する。

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      dpSrc           packed format の周波数領域１次元複素数入力データのポインタ
    - [out]     dpDst           時間領域の１次元実数出力データのポインタ
    - [in]      iOrder          データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  dpSrc ,  dpDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_PacktoD64_out(hFFT, dpSrc, dpDst, iOrder)

def fnFIE_fft_fwd_D64toPack_in(hFFT, dpVec, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_fwd_D64toPack_in( FHANDLE hFFT, DOUBLE* dpVec, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、packed format の複素数データを出力する。（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpVec       時間領域の１次元実数入力データ（＝packed format の周波数領域の１次元複素数出力データ)のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  vpVec にNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_fwd_D64toPack_in(hFFT, dpVec, iOrder):
    r"""INT FVALGAPI fnFIE_fft_fwd_D64toPack_in( FHANDLE hFFT, DOUBLE* dpVec, INT iOrder )
    時間領域の１次元実数データを順方向フーリエ変換し、packed format の複素数データを出力する。（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpVec       時間領域の１次元実数入力データ（＝packed format の周波数領域の１次元複素数出力データ)のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  vpVec にNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_fwd_D64toPack_in(hFFT, dpVec, iOrder)

def fnFIE_fft_inv_PacktoD64_in(hFFT, dpVec, iOrder) -> Any:
    r"""INT FVALGAPI fnFIE_fft_inv_PacktoD64_in( FHANDLE hFFT, DOUBLE* dpVec, INT iOrder )
    packed format の周波数領域の１次元複素数データを逆フーリエ変換し、DOUBLE型の時間領域１次元実数データを出力する。

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpVec       packed format の周波数領域１次元複素数入力データ（＝時間領域の１次元実数出力データ)のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  vpVec にNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft_inv_PacktoD64_in(hFFT, dpVec, iOrder):
    r"""INT FVALGAPI fnFIE_fft_inv_PacktoD64_in( FHANDLE hFFT, DOUBLE* dpVec, INT iOrder )
    packed format の周波数領域の１次元複素数データを逆フーリエ変換し、DOUBLE型の時間領域１次元実数データを出力する。

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      dpVec       packed format の周波数領域１次元複素数入力データ（＝時間領域の１次元実数出力データ)のポインタ
    - [in]      iOrder      データ長の次数。入出力データ長は $ N=2^{iOrder} $ になります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  vpVec にNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        - iOrder > 31 または iOrder <= 0
        - 入力データ長 ($ = 2^{iOrder} $ ) が  hFFT ハンドル 初期化時に指定された最大データ長より長い
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft_inv_PacktoD64_in(hFFT, dpVec, iOrder)

def fnFIE_fft2_fwd_CtoC_in(hFFT, hImg) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_fwd_CtoC_in( FHANDLE hFFT, FHANDLE hImg )
    ２次元の複素数画像を順方向フーリエ変換する（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] hImg     空間領域の２次元複素数画像のハンドル（＝周波数領域の出力画像） ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  hImg にNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImg が不正なハンドル
        -  hImg の型が F_IMG_DOUBLE でない
        -  hImg の幅が偶数でない
        -  hImg の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_fwd_CtoC_in(hFFT, hImg):
    r"""INT FVALGAPI fnFIE_fft2_fwd_CtoC_in( FHANDLE hFFT, FHANDLE hImg )
    ２次元の複素数画像を順方向フーリエ変換する（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] hImg     空間領域の２次元複素数画像のハンドル（＝周波数領域の出力画像） ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  hImg にNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImg が不正なハンドル
        -  hImg の型が F_IMG_DOUBLE でない
        -  hImg の幅が偶数でない
        -  hImg の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_fwd_CtoC_in(hFFT, hImg)

def fnFIE_fft2_inv_CtoC_in(hFFT, hImg) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_inv_CtoC_in( FHANDLE hFFT, FHANDLE hImg )
    ２次元の複素数画像を逆フーリエ変換する（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] hImg     周波数領域の２次元複素数入力画像のハンドル（＝空間領域の出力画像） ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  hImg にNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImg が不正なハンドル
        -  hImg の型が F_IMG_DOUBLE でない
        -  hImg の幅が偶数でない
        -  hImg の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_inv_CtoC_in(hFFT, hImg):
    r"""INT FVALGAPI fnFIE_fft2_inv_CtoC_in( FHANDLE hFFT, FHANDLE hImg )
    ２次元の複素数画像を逆フーリエ変換する（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] hImg     周波数領域の２次元複素数入力画像のハンドル（＝空間領域の出力画像） ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT 又は  hImg にNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImg が不正なハンドル
        -  hImg の型が F_IMG_DOUBLE でない
        -  hImg の幅が偶数でない
        -  hImg の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_inv_CtoC_in(hFFT, hImg)

def fnFIE_fft2_fwd_CtoC_out(hFFT, hImgSrc, hImgDst) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_fwd_CtoC_out( FHANDLE hFFT, FHANDLE hImgSrc, FHANDLE hImgDst )
    ２次元の複素数画像を順方向フーリエ変換する（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      hImgSrc     空間領域の複素数入力画像のハンドル ( type: double )
    - [out]     hImgDst     周波数領域の複素数出力画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hImgSrc ,  hImgDst  のいずれかNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImgSrc 又は  hImgDst が不正なハンドル
        -  hImgSrc 又は  hImgDst の型が F_IMG_DOUBLE でない
        -  hImgSrc 又は  hImgDst の幅が偶数でない
        -  hImgSrc 又は  hImgDst の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_fwd_CtoC_out(hFFT, hImgSrc, hImgDst):
    r"""INT FVALGAPI fnFIE_fft2_fwd_CtoC_out( FHANDLE hFFT, FHANDLE hImgSrc, FHANDLE hImgDst )
    ２次元の複素数画像を順方向フーリエ変換する（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      hImgSrc     空間領域の複素数入力画像のハンドル ( type: double )
    - [out]     hImgDst     周波数領域の複素数出力画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hImgSrc ,  hImgDst  のいずれかNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImgSrc 又は  hImgDst が不正なハンドル
        -  hImgSrc 又は  hImgDst の型が F_IMG_DOUBLE でない
        -  hImgSrc 又は  hImgDst の幅が偶数でない
        -  hImgSrc 又は  hImgDst の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_fwd_CtoC_out(hFFT, hImgSrc, hImgDst)

def fnFIE_fft2_inv_CtoC_out(hFFT, hImgSrc, hImgDst) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_inv_CtoC_out( FHANDLE hFFT, FHANDLE hImgSrc, FHANDLE hImgDst )
    ２次元の複素数画像を逆フーリエ変換する（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      hImgSrc     周波数領域の複素数入力画像のハンドル ( type: double )
    - [out]     hImgDst     空間領域の複素数出力画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hImgSrc ,  hImgDst  のいずれかNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImgSrc 又は  hImgDst が不正なハンドル
        -  hImgSrc 又は  hImgDst の型が F_IMG_DOUBLE でない
        -  hImgSrc 又は  hImgDst の幅が偶数でない
        -  hImgSrc 又は  hImgDst の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_inv_CtoC_out(hFFT, hImgSrc, hImgDst):
    r"""INT FVALGAPI fnFIE_fft2_inv_CtoC_out( FHANDLE hFFT, FHANDLE hImgSrc, FHANDLE hImgDst )
    ２次元の複素数画像を逆フーリエ変換する（アウトプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      hImgSrc     周波数領域の複素数入力画像のハンドル ( type: double )
    - [out]     hImgDst     空間領域の複素数出力画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hImgSrc ,  hImgDst  のいずれかNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImgSrc 又は  hImgDst が不正なハンドル
        -  hImgSrc 又は  hImgDst の型が F_IMG_DOUBLE でない
        -  hImgSrc 又は  hImgDst の幅が偶数でない
        -  hImgSrc 又は  hImgDst の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_inv_CtoC_out(hFFT, hImgSrc, hImgDst)

def fnFIE_fft2_fwd_DDtoDD_in(hFFT, hImgRe, hImgIm) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_fwd_DDtoDD_in( FHANDLE hFFT, FHANDLE hImgRe, FHANDLE hImgIm )
    ２次元の複素数画像を順方向フーリエ変換する（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] hImgRe       空間領域２次元複素数入力データの実部画像のハンドル（＝周波数領域２次元複素数出力データの実部画像） ( type: double )
    - [in,out] hImgIm       空間領域２次元複素数入力データの虚部画像のハンドル（＝周波数領域２次元複素数出力データの虚部画像） ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hImgRe ,又は  hImgIm  にNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImgRe 又は  hImgIm が不正なハンドル
        -  hImgRe 又は  hImgIm の型が F_IMG_DOUBLE でない
        -  hImgRe と  hImgIm の 幅、高さ、チャネル数 が異なっている
        -  hImgRe 又は  hImgIm の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_fwd_DDtoDD_in(hFFT, hImgRe, hImgIm):
    r"""INT FVALGAPI fnFIE_fft2_fwd_DDtoDD_in( FHANDLE hFFT, FHANDLE hImgRe, FHANDLE hImgIm )
    ２次元の複素数画像を順方向フーリエ変換する（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] hImgRe       空間領域２次元複素数入力データの実部画像のハンドル（＝周波数領域２次元複素数出力データの実部画像） ( type: double )
    - [in,out] hImgIm       空間領域２次元複素数入力データの虚部画像のハンドル（＝周波数領域２次元複素数出力データの虚部画像） ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hImgRe ,又は  hImgIm  にNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImgRe 又は  hImgIm が不正なハンドル
        -  hImgRe 又は  hImgIm の型が F_IMG_DOUBLE でない
        -  hImgRe と  hImgIm の 幅、高さ、チャネル数 が異なっている
        -  hImgRe 又は  hImgIm の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_fwd_DDtoDD_in(hFFT, hImgRe, hImgIm)

def fnFIE_fft2_inv_DDtoDD_in(hFFT, hImgRe, hImgIm) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_inv_DDtoDD_in( FHANDLE hFFT, FHANDLE hImgRe, FHANDLE hImgIm )
    ２次元の複素数画像を逆フーリエ変換する（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] hImgRe       周波数領域２次元複素数入力データの実部画像のハンドル（＝空間領域２次元複素数出力データの実部画像） ( type: double )
    - [in,out] hImgIm       周波数領域２次元複素数入力データの虚部画像のハンドル（＝空間領域２次元複素数出力データの虚部画像） ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hImgRe ,又は  hImgIm  にNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImgRe 又は  hImgIm が不正なハンドル
        -  hImgRe 又は  hImgIm の型が F_IMG_DOUBLE でない
        -  hImgRe と  hImgIm の 幅、高さ、チャネル数 が異なっている
        -  hImgRe 又は  hImgIm の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_inv_DDtoDD_in(hFFT, hImgRe, hImgIm):
    r"""INT FVALGAPI fnFIE_fft2_inv_DDtoDD_in( FHANDLE hFFT, FHANDLE hImgRe, FHANDLE hImgIm )
    ２次元の複素数画像を逆フーリエ変換する（インプレース処理）

    Params:
    - [in]      hFFT        FFTハンドル
    - [in,out] hImgRe       周波数領域２次元複素数入力データの実部画像のハンドル（＝空間領域２次元複素数出力データの実部画像） ( type: double )
    - [in,out] hImgIm       周波数領域２次元複素数入力データの虚部画像のハンドル（＝空間領域２次元複素数出力データの虚部画像） ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hImgRe ,又は  hImgIm  にNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImgRe 又は  hImgIm が不正なハンドル
        -  hImgRe 又は  hImgIm の型が F_IMG_DOUBLE でない
        -  hImgRe と  hImgIm の 幅、高さ、チャネル数 が異なっている
        -  hImgRe 又は  hImgIm の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC  指定された  hFFT ハンドルはこの処理に使用できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_inv_DDtoDD_in(hFFT, hImgRe, hImgIm)

def fnFIE_fft2_fwd_DDtoDD_out(hFFT, hImgSrcRe, hImgSrcIm, hImgDstRe, hImgDstIm) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_fwd_DDtoDD_out( FHANDLE hFFT, FHANDLE hImgSrcRe, FHANDLE hImgSrcIm, FHANDLE hImgDstRe, FHANDLE hImgDstIm )
    ２次元の複素数画像を順方向フーリエ変換する（アウトプレース処理）

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      hImgSrcRe       空間領域２次元複素数入力データの実部画像のハンドル ( type: double )
    - [in]      hImgSrcIm       空間領域２次元複素数入力データの虚部画像のハンドル ( type: double )
    - [in]      hImgDstRe       周波数領域２次元複素数出力データの実部画像のハンドル ( type: double )
    - [in]      hImgDstIm       周波数領域２次元複素数出力データの虚部画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm のいずれかが不正なハンドル
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm のいずれか型が F_IMG_DOUBLE でない
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm の 幅、高さ、チャネル数 が異なっている
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC
        -  hFFT ハンドルは入力画像のFFTに適用できない。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_fwd_DDtoDD_out(hFFT, hImgSrcRe, hImgSrcIm, hImgDstRe, hImgDstIm):
    r"""INT FVALGAPI fnFIE_fft2_fwd_DDtoDD_out( FHANDLE hFFT, FHANDLE hImgSrcRe, FHANDLE hImgSrcIm, FHANDLE hImgDstRe, FHANDLE hImgDstIm )
    ２次元の複素数画像を順方向フーリエ変換する（アウトプレース処理）

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      hImgSrcRe       空間領域２次元複素数入力データの実部画像のハンドル ( type: double )
    - [in]      hImgSrcIm       空間領域２次元複素数入力データの虚部画像のハンドル ( type: double )
    - [in]      hImgDstRe       周波数領域２次元複素数出力データの実部画像のハンドル ( type: double )
    - [in]      hImgDstIm       周波数領域２次元複素数出力データの虚部画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm のいずれかが不正なハンドル
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm のいずれか型が F_IMG_DOUBLE でない
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm の 幅、高さ、チャネル数 が異なっている
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC
        -  hFFT ハンドルは入力画像のFFTに適用できない。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_fwd_DDtoDD_out(hFFT, hImgSrcRe, hImgSrcIm, hImgDstRe, hImgDstIm)

def fnFIE_fft2_inv_DDtoDD_out(hFFT, hImgSrcRe, hImgSrcIm, hImgDstRe, hImgDstIm) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_inv_DDtoDD_out( FHANDLE hFFT, FHANDLE hImgSrcRe, FHANDLE hImgSrcIm, FHANDLE hImgDstRe, FHANDLE hImgDstIm )
    ２次元の複素数画像を逆フーリエ変換する（アウトプレース処理）

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      hImgSrcRe       周波数領域２次元複素数入力データの実部画像のハンドル ( type: double )
    - [in]      hImgSrcIm       周波数領域２次元複素数入力データの虚部画像のハンドル ( type: double )
    - [in]      hImgDstRe       空間領域２次元複素数出力データの実部画像のハンドル ( type: double )
    - [in]      hImgDstIm       空間領域２次元複素数出力データの虚部画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm のいずれかが不正なハンドル
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm のいずれか型が F_IMG_DOUBLE でない
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm の 幅、高さ、チャネル数 が異なっている
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC
        -  hFFT ハンドルは入力画像のFFTに適用できない。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_inv_DDtoDD_out(hFFT, hImgSrcRe, hImgSrcIm, hImgDstRe, hImgDstIm):
    r"""INT FVALGAPI fnFIE_fft2_inv_DDtoDD_out( FHANDLE hFFT, FHANDLE hImgSrcRe, FHANDLE hImgSrcIm, FHANDLE hImgDstRe, FHANDLE hImgDstIm )
    ２次元の複素数画像を逆フーリエ変換する（アウトプレース処理）

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      hImgSrcRe       周波数領域２次元複素数入力データの実部画像のハンドル ( type: double )
    - [in]      hImgSrcIm       周波数領域２次元複素数入力データの虚部画像のハンドル ( type: double )
    - [in]      hImgDstRe       空間領域２次元複素数出力データの実部画像のハンドル ( type: double )
    - [in]      hImgDstIm       空間領域２次元複素数出力データの虚部画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm のいずれかが不正なハンドル
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm のいずれか型が F_IMG_DOUBLE でない
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm の 幅、高さ、チャネル数 が異なっている
        -  hImgSrcRe ,  hImgSrcIm ,  hImgDstRe ,  hImgDstIm の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC
        -  hFFT ハンドルは入力画像のFFTに適用できない。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_inv_DDtoDD_out(hFFT, hImgSrcRe, hImgSrcIm, hImgDstRe, hImgDstIm)

def fnFIE_fft2_fwd_RealtoDD(hFFT, hSrcRe, hDstRe, hDstIm) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_fwd_RealtoDD( FHANDLE hFFT, FHANDLE hSrcRe, FHANDLE hDstRe, FHANDLE hDstIm )
    ２次元実数画像を順方向フーリエ変換する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      hSrcRe      空間領域２次元実数画像のハンドル ( type: uc8, us16, s16, double )
    - [out]     hDstRe      周波数領域２次元複素数出力データの実部画像のハンドル ( type: double )
    - [out]     hDstIm      周波数領域２次元複素数出力データの虚部画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hSrcRe ,  hDstRe ,  hDstIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hSrcRe ,  hDstRe ,  hDstIm のいずれかが不正なハンドル
        -  hDstRe ,  hDstIm のいずれか型が F_IMG_DOUBLE でない
        -  hSrcRe の型が F_IMG_UC8, F_IMG_US16, F_IMG_S16, F_IMG_DOUBLE のいずれでもない。
        -  hSrcRe ,  hDstRe ,  hDstIm の 幅、高さ、チャネル数 が異なっている
        -  hSrcRe ,  hDstRe ,  hDstIm の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC
        -  hFFT ハンドルは入力画像のFFTに適用できない。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_fwd_RealtoDD(hFFT, hSrcRe, hDstRe, hDstIm):
    r"""INT FVALGAPI fnFIE_fft2_fwd_RealtoDD( FHANDLE hFFT, FHANDLE hSrcRe, FHANDLE hDstRe, FHANDLE hDstIm )
    ２次元実数画像を順方向フーリエ変換する

    Params:
    - [in]      hFFT        FFTハンドル
    - [in]      hSrcRe      空間領域２次元実数画像のハンドル ( type: uc8, us16, s16, double )
    - [out]     hDstRe      周波数領域２次元複素数出力データの実部画像のハンドル ( type: double )
    - [out]     hDstIm      周波数領域２次元複素数出力データの虚部画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hSrcRe ,  hDstRe ,  hDstIm のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM        hFFT が F_OBJID_FFTSPEC 型ではない
    - F_ERR_INVALID_IMAGE
        -  hSrcRe ,  hDstRe ,  hDstIm のいずれかが不正なハンドル
        -  hDstRe ,  hDstIm のいずれか型が F_IMG_DOUBLE でない
        -  hSrcRe の型が F_IMG_UC8, F_IMG_US16, F_IMG_S16, F_IMG_DOUBLE のいずれでもない。
        -  hSrcRe ,  hDstRe ,  hDstIm の 幅、高さ、チャネル数 が異なっている
        -  hSrcRe ,  hDstRe ,  hDstIm の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC
        -  hFFT ハンドルは入力画像のFFTに適用できない。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_fwd_RealtoDD(hFFT, hSrcRe, hDstRe, hDstIm)

def fnFIE_fft2_inv_DDtoReal(hFFT, hSrcRe, hSrcIm, hDst, dScaleFactor) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_inv_DDtoReal( FHANDLE hFFT, FHANDLE hSrcRe, FHANDLE hSrcIm, FHANDLE hDst, DOUBLE dScaleFactor )
    ２次元複素数画像を逆フーリエ変換し、実数画像を出力する

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      hSrcRe          周波数領域２次元複素数入力データの実部画像のハンドル ( type: double )
    - [in]      hSrcIm          周波数領域２次元複素数入力データの虚部画像のハンドル ( type: double )
    - [out]     hDst            空間領域２次元実数出力画像のハンドル ( type: uc8, us16, s16, double )
    - [in]      dScaleFactor    出力画像の値範囲内に出力値を制限するためのスケール値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hSrcRe ,  hSrcIm ,  hDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        -  dScaleFactor が 0.0
    - F_ERR_INVALID_IMAGE
        -  hSrcRe ,  hSrcIm ,  hDst のいずれかが不正なハンドル
        -  hSrcRe ,  hSrcIm のいずれか型が F_IMG_DOUBLE でない
        -  hDst の型が F_IMG_UC8, F_IMG_US16, F_IMG_S16, F_IMG_DOUBLE のいずれでもない。
        -  hSrcRe ,  hSrcIm ,  hDst の 幅、高さ、チャネル数 が異なっている
        -  hSrcRe ,  hSrcIm ,  hDst の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC
        -  hFFT ハンドルは入力画像のFFTに適用できない。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_inv_DDtoReal(hFFT, hSrcRe, hSrcIm, hDst, dScaleFactor=1.0):
    r"""INT FVALGAPI fnFIE_fft2_inv_DDtoReal( FHANDLE hFFT, FHANDLE hSrcRe, FHANDLE hSrcIm, FHANDLE hDst, DOUBLE dScaleFactor )
    ２次元複素数画像を逆フーリエ変換し、実数画像を出力する

    Params:
    - [in]      hFFT            FFTハンドル
    - [in]      hSrcRe          周波数領域２次元複素数入力データの実部画像のハンドル ( type: double )
    - [in]      hSrcIm          周波数領域２次元複素数入力データの虚部画像のハンドル ( type: double )
    - [out]     hDst            空間領域２次元実数出力画像のハンドル ( type: uc8, us16, s16, double )
    - [in]      dScaleFactor    出力画像の値範囲内に出力値を制限するためのスケール値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT   hFFT ,  hSrcRe ,  hSrcIm ,  hDst のいずれかにNULLポインタが渡された
    - F_ERR_INVALID_PARAM
        -  hFFT が F_OBJID_FFTSPEC 型ではない
        -  dScaleFactor が 0.0
    - F_ERR_INVALID_IMAGE
        -  hSrcRe ,  hSrcIm ,  hDst のいずれかが不正なハンドル
        -  hSrcRe ,  hSrcIm のいずれか型が F_IMG_DOUBLE でない
        -  hDst の型が F_IMG_UC8, F_IMG_US16, F_IMG_S16, F_IMG_DOUBLE のいずれでもない。
        -  hSrcRe ,  hSrcIm ,  hDst の 幅、高さ、チャネル数 が異なっている
        -  hSrcRe ,  hSrcIm ,  hDst の幅又は高さが1である
    - F_ERR_FFT_INVALID_SPEC
        -  hFFT ハンドルは入力画像のFFTに適用できない。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_inv_DDtoReal(hFFT, hSrcRe, hSrcIm, hDst, dScaleFactor)

def fnFIE_fft2_get_mag_and_phase_DD(hImgRe, hImgIm, hMag, hPhase) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_get_mag_and_phase_DD( FHANDLE hImgRe, FHANDLE hImgIm, FHANDLE hMag, FHANDLE hPhase )
    周波数領域複素数画像の強度と角度を計算する

    Params:
    - [in]      hImgRe      周波数領域の入力複素数画像の実部画像のハンドル ( type: double )
    - [in]      hImgIm      周波数領域の入力複素数画像の虚部画像のハンドル ( type: double )
    - [out]     hMag        強度画像のハンドル ( type: double )
    - [out]     hPhase      角度画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE
        -  hImgRe 又は  hImgIm が NULL
        -  hMag と  hPhase が両方ともNULL
        -  hImgRe ,  hImgIm ,  hMag ,  hPhase のいずれかの画像型が F_IMG_DOUBLE でない
        -  hImgRe ,  hImgIm ,  hMag ,  hPhase の幅、高さ、チャネル数が同じでない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_get_mag_and_phase_DD(hImgRe, hImgIm, hMag, hPhase=None):
    r"""INT FVALGAPI fnFIE_fft2_get_mag_and_phase_DD( FHANDLE hImgRe, FHANDLE hImgIm, FHANDLE hMag, FHANDLE hPhase )
    周波数領域複素数画像の強度と角度を計算する

    Params:
    - [in]      hImgRe      周波数領域の入力複素数画像の実部画像のハンドル ( type: double )
    - [in]      hImgIm      周波数領域の入力複素数画像の虚部画像のハンドル ( type: double )
    - [out]     hMag        強度画像のハンドル ( type: double )
    - [out]     hPhase      角度画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE
        -  hImgRe 又は  hImgIm が NULL
        -  hMag と  hPhase が両方ともNULL
        -  hImgRe ,  hImgIm ,  hMag ,  hPhase のいずれかの画像型が F_IMG_DOUBLE でない
        -  hImgRe ,  hImgIm ,  hMag ,  hPhase の幅、高さ、チャネル数が同じでない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_get_mag_and_phase_DD(hImgRe, hImgIm, hMag, hPhase)

def fnFIE_fft2_get_mag_and_phase_C(hImgFourier, hMag, hPhase) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_get_mag_and_phase_C( FHANDLE hImgFourier, FHANDLE hMag, FHANDLE hPhase )
    周波数領域複素数画像の強度と角度を計算する

    Params:
    - [in]      hImgFourier 周波数領域の入力複素数画像のハンドル ( type: double )
    - [out]     hMag        強度画像のハンドル ( type: double )
    - [out]     hPhase      角度画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE
        -  hImgFourier がNULL
        -  hImgFourier の画像幅が偶数でない
        -  hMag と  hPhase の両方がNULL
        -  hImgFourier ,  hMag ,  hPhase の何れかの型が F_IMG_DOUBLE でない
        -  hImgFourier ,  hMag ,  hPhase の幅、高さ、チャネル数が同じでない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_get_mag_and_phase_C(hImgFourier, hMag, hPhase=None):
    r"""INT FVALGAPI fnFIE_fft2_get_mag_and_phase_C( FHANDLE hImgFourier, FHANDLE hMag, FHANDLE hPhase )
    周波数領域複素数画像の強度と角度を計算する

    Params:
    - [in]      hImgFourier 周波数領域の入力複素数画像のハンドル ( type: double )
    - [out]     hMag        強度画像のハンドル ( type: double )
    - [out]     hPhase      角度画像のハンドル ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE
        -  hImgFourier がNULL
        -  hImgFourier の画像幅が偶数でない
        -  hMag と  hPhase の両方がNULL
        -  hImgFourier ,  hMag ,  hPhase の何れかの型が F_IMG_DOUBLE でない
        -  hImgFourier ,  hMag ,  hPhase の幅、高さ、チャネル数が同じでない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_get_mag_and_phase_C(hImgFourier, hMag, hPhase)

def fnFIE_fft2_mul_DDtoDD(hSrc1Re, hSrc1Im, hSrc2Re, hSrc2Im, hDstRe, hDstIm) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_mul_DDtoDD( FHANDLE hSrc1Re, FHANDLE hSrc1Im, FHANDLE hSrc2Re, FHANDLE hSrc2Im, FHANDLE hDstRe, FHANDLE hDstIm )
    splitted format の複素数画像間の乗算

    Params:
    - [in]      hSrc1Re     1つ目の入力複素数画像の実部画像 ( type: double )
    - [in]      hSrc1Im     1つ目の入力複素数画像の虚部画像 ( type: double )
    - [in]      hSrc2Re     2つ目の入力複素数画像の実部画像 ( type: double )
    - [in]      hSrc2Im     2つ目の入力複素数画像の虚部画像 ( type: double )
    - [out]     hDstRe      出力複素数画像の実部画像 ( type: double )
    - [out]     hDstIm      出力複素数画像の虚部画像 ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_mul_DDtoDD(hSrc1Re, hSrc1Im, hSrc2Re, hSrc2Im, hDstRe, hDstIm):
    r"""INT FVALGAPI fnFIE_fft2_mul_DDtoDD( FHANDLE hSrc1Re, FHANDLE hSrc1Im, FHANDLE hSrc2Re, FHANDLE hSrc2Im, FHANDLE hDstRe, FHANDLE hDstIm )
    splitted format の複素数画像間の乗算

    Params:
    - [in]      hSrc1Re     1つ目の入力複素数画像の実部画像 ( type: double )
    - [in]      hSrc1Im     1つ目の入力複素数画像の虚部画像 ( type: double )
    - [in]      hSrc2Re     2つ目の入力複素数画像の実部画像 ( type: double )
    - [in]      hSrc2Im     2つ目の入力複素数画像の虚部画像 ( type: double )
    - [out]     hDstRe      出力複素数画像の実部画像 ( type: double )
    - [out]     hDstIm      出力複素数画像の虚部画像 ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_mul_DDtoDD(hSrc1Re, hSrc1Im, hSrc2Re, hSrc2Im, hDstRe, hDstIm)

def fnFIE_fft2_div_DDtoDD(hSrc1Re, hSrc1Im, hSrc2Re, hSrc2Im, hDstRe, hDstIm) -> Any:
    r"""INT FVALGAPI fnFIE_fft2_div_DDtoDD( FHANDLE hSrc1Re, FHANDLE hSrc1Im, FHANDLE hSrc2Re, FHANDLE hSrc2Im, FHANDLE hDstRe, FHANDLE hDstIm )
    splitted format の複素数画像間の除算

    Params:
    - [in]      hSrc1Re     分子となる入力複素数画像の実部画像 ( type: double )
    - [in]      hSrc1Im     分子となる入力複素数画像の虚部画像 ( type: double )
    - [in]      hSrc2Re     分母となる入力複素数画像の実部画像 ( type: double )
    - [in]      hSrc2Im     分母となる入力複素数画像の虚部画像 ( type: double )
    - [out]     hDstRe      出力複素数画像の実部画像 ( type: double )
    - [out]     hDstIm      出力複素数画像の虚部画像 ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fft2_div_DDtoDD(hSrc1Re, hSrc1Im, hSrc2Re, hSrc2Im, hDstRe, hDstIm):
    r"""INT FVALGAPI fnFIE_fft2_div_DDtoDD( FHANDLE hSrc1Re, FHANDLE hSrc1Im, FHANDLE hSrc2Re, FHANDLE hSrc2Im, FHANDLE hDstRe, FHANDLE hDstIm )
    splitted format の複素数画像間の除算

    Params:
    - [in]      hSrc1Re     分子となる入力複素数画像の実部画像 ( type: double )
    - [in]      hSrc1Im     分子となる入力複素数画像の虚部画像 ( type: double )
    - [in]      hSrc2Re     分母となる入力複素数画像の実部画像 ( type: double )
    - [in]      hSrc2Im     分母となる入力複素数画像の虚部画像 ( type: double )
    - [out]     hDstRe      出力複素数画像の実部画像 ( type: double )
    - [out]     hDstIm      出力複素数画像の虚部画像 ( type: double )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fft2_div_DDtoDD(hSrc1Re, hSrc1Im, hSrc2Re, hSrc2Im, hDstRe, hDstIm)

def fnFIE_draw_point(hImg, val, pnt) -> Any:
    r"""INT FVALGAPI fnFIE_draw_point( FHANDLE hImg, DOUBLE* val, DPNT_T pnt )
    点の描画

    Params:
    - [in,out]  hImg    画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val     濃度値を格納した配列の先頭アドレス
    - [in]      pnt     座標点

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def draw_point(hImg, val, pnt):
    r"""INT FVALGAPI fnFIE_draw_point( FHANDLE hImg, DOUBLE* val, DPNT_T pnt )
    点の描画

    Params:
    - [in,out]  hImg    画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val     濃度値を格納した配列の先頭アドレス
    - [in]      pnt     座標点

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_draw_point(hImg, val, pnt)

def fnFIE_draw_line(hImg, val, line) -> Any:
    r"""INT FVALGAPI fnFIE_draw_line( FHANDLE hImg, DOUBLE* val, DLINE_T line )
    直線の描画

    Params:
    - [in,out]  hImg    画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val     濃度値を格納した配列の先頭アドレス
    - [in]      line    描画する直線の式

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def draw_line(hImg, val, line):
    r"""INT FVALGAPI fnFIE_draw_line( FHANDLE hImg, DOUBLE* val, DLINE_T line )
    直線の描画

    Params:
    - [in,out]  hImg    画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val     濃度値を格納した配列の先頭アドレス
    - [in]      line    描画する直線の式

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_draw_line(hImg, val, line)

def fnFIE_draw_line_seg(hImg, val, start, end) -> Any:
    r"""INT FVALGAPI fnFIE_draw_line_seg( FHANDLE hImg, DOUBLE* val, DPNT_T start, DPNT_T end )
    線分の描画

    Params:
    - [in,out]  hImg    画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val     濃度値を格納した配列の先頭アドレス
    - [in]      start   描画開始点の座標
    - [in]      end     描画終了点の座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def draw_line_seg(hImg, val, start, end):
    r"""INT FVALGAPI fnFIE_draw_line_seg( FHANDLE hImg, DOUBLE* val, DPNT_T start, DPNT_T end )
    線分の描画

    Params:
    - [in,out]  hImg    画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val     濃度値を格納した配列の先頭アドレス
    - [in]      start   描画開始点の座標
    - [in]      end     描画終了点の座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_draw_line_seg(hImg, val, start, end)

def fnFIE_draw_circle(hImg, val, mode, center, radius) -> Any:
    r"""INT FVALGAPI fnFIE_draw_circle( FHANDLE hImg, DOUBLE* val, enum f_draw_fill_mode mode, DPNT_T center, DOUBLE radius )
    円の描画

    Params:
    - [in,out]  hImg    画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val     濃度値を格納した配列の先頭アドレス
    - [in]      mode    描画モード
                        - F_DRAW_LINE       図形の線のみを描画
                        - F_DRAW_FILL_IN    図形の内側を塗りつぶし
                        - F_DRAW_FILL_OUT   図形の外側を塗りつぶし
    - [in]      center  中心点
    - [in]      radius  半径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def draw_circle(hImg, val, mode, center, radius):
    r"""INT FVALGAPI fnFIE_draw_circle( FHANDLE hImg, DOUBLE* val, enum f_draw_fill_mode mode, DPNT_T center, DOUBLE radius )
    円の描画

    Params:
    - [in,out]  hImg    画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val     濃度値を格納した配列の先頭アドレス
    - [in]      mode    描画モード
                        - F_DRAW_LINE       図形の線のみを描画
                        - F_DRAW_FILL_IN    図形の内側を塗りつぶし
                        - F_DRAW_FILL_OUT   図形の外側を塗りつぶし
    - [in]      center  中心点
    - [in]      radius  半径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_draw_circle(hImg, val, mode, center, radius)

def fnFIE_draw_ellipse(hImg, val, mode, center, major, minor, theta) -> Any:
    r"""INT FVALGAPI fnFIE_draw_ellipse( FHANDLE hImg, DOUBLE* val, enum f_draw_fill_mode mode, DPNT_T center, DOUBLE major, DOUBLE minor, DOUBLE theta )
    楕円の描画

    Params:
    - [in,out]  hImg    画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val     濃度値を格納した配列の先頭アドレス
    - [in]      mode    描画モード
                        - F_DRAW_LINE       図形の線のみを描画
                        - F_DRAW_FILL_IN    図形の内側を塗りつぶし
                        - F_DRAW_FILL_OUT   図形の外側を塗りつぶし
    - [in]      center  中心点
    - [in]      major   長軸（x軸方向）の半径
    - [in]      minor   短軸（y軸方向）の半径
    - [in]      theta   回転角（ラジアン）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算ができない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def draw_ellipse(hImg, val, mode, center, major, minor, theta=0.0):
    r"""INT FVALGAPI fnFIE_draw_ellipse( FHANDLE hImg, DOUBLE* val, enum f_draw_fill_mode mode, DPNT_T center, DOUBLE major, DOUBLE minor, DOUBLE theta )
    楕円の描画

    Params:
    - [in,out]  hImg    画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val     濃度値を格納した配列の先頭アドレス
    - [in]      mode    描画モード
                        - F_DRAW_LINE       図形の線のみを描画
                        - F_DRAW_FILL_IN    図形の内側を塗りつぶし
                        - F_DRAW_FILL_OUT   図形の外側を塗りつぶし
    - [in]      center  中心点
    - [in]      major   長軸（x軸方向）の半径
    - [in]      minor   短軸（y軸方向）の半径
    - [in]      theta   回転角（ラジアン）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算ができない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_draw_ellipse(hImg, val, mode, center, major, minor, theta)

def fnFIE_draw_rect(hImg, val, mode, start, width, height, center, theta) -> Any:
    r"""INT FVALGAPI fnFIE_draw_rect( FHANDLE hImg, DOUBLE* val, enum f_draw_fill_mode mode, DPNT_T start, DOUBLE width, DOUBLE height, DPNT_T center, DOUBLE theta )
    長方形の描画

    Params:
    - [in,out]  hImg        画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val         濃度値を格納した配列の先頭アドレス
    - [in]      mode        描画モード
                            - F_DRAW_LINE       図形の線のみを描画
                            - F_DRAW_FILL_IN    図形の内側を塗りつぶし
                            - F_DRAW_FILL_OUT   図形の外側を塗りつぶし
    - [in]      start       始点
    - [in]      width       幅
    - [in]      height      高さ
    - [in]      center      回転のための中心点
    - [in]      theta       回転角（ラジアン）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def draw_rect(hImg, val, mode, start, width, height, center, theta=0.0):
    r"""INT FVALGAPI fnFIE_draw_rect( FHANDLE hImg, DOUBLE* val, enum f_draw_fill_mode mode, DPNT_T start, DOUBLE width, DOUBLE height, DPNT_T center, DOUBLE theta )
    長方形の描画

    Params:
    - [in,out]  hImg        画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val         濃度値を格納した配列の先頭アドレス
    - [in]      mode        描画モード
                            - F_DRAW_LINE       図形の線のみを描画
                            - F_DRAW_FILL_IN    図形の内側を塗りつぶし
                            - F_DRAW_FILL_OUT   図形の外側を塗りつぶし
    - [in]      start       始点
    - [in]      width       幅
    - [in]      height      高さ
    - [in]      center      回転のための中心点
    - [in]      theta       回転角（ラジアン）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_draw_rect(hImg, val, mode, start, width, height, center, theta)

def fnFIE_draw_polygon(hImg, val, mode, pnts, num) -> Any:
    r"""INT FVALGAPI fnFIE_draw_polygon( FHANDLE hImg, DOUBLE* val, enum f_draw_fill_mode mode, DPNT_T* pnts, INT num )
    多角形の描画

    Params:
    - [in,out]  hImg    画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val     濃度値を格納した配列の先頭アドレス
    - [in]      mode    描画モード
                        - F_DRAW_LINE       図形の線のみを描画
                        - F_DRAW_FILL_IN    図形の内側を塗りつぶし
                        - F_DRAW_FILL_OUT   図形の外側を塗りつぶし
    - [in]      pnts    頂点群
    - [in]      num     頂点数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def draw_polygon(hImg, val, mode, pnts, num):
    r"""INT FVALGAPI fnFIE_draw_polygon( FHANDLE hImg, DOUBLE* val, enum f_draw_fill_mode mode, DPNT_T* pnts, INT num )
    多角形の描画

    Params:
    - [in,out]  hImg    画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val     濃度値を格納した配列の先頭アドレス
    - [in]      mode    描画モード
                        - F_DRAW_LINE       図形の線のみを描画
                        - F_DRAW_FILL_IN    図形の内側を塗りつぶし
                        - F_DRAW_FILL_OUT   図形の外側を塗りつぶし
    - [in]      pnts    頂点群
    - [in]      num     頂点数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_draw_polygon(hImg, val, mode, pnts, num)

def fnFIE_draw_curve(hImg, val, pnts, num, mode) -> Any:
    r"""INT FVALGAPI fnFIE_draw_curve( FHANDLE hImg, DOUBLE* val, DPNT_T* pnts, INT num, enum f_draw_curve_mode mode )
    曲線の描画

    Params:
    - [in,out]  hImg        画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val         濃度値を格納した配列の先頭アドレス
    - [in]      pnts        点群データ
    - [in]      num         点群の数
    - [in]      mode        曲線の種類
                            - F_DRAW_CUBIC_BSPLINE      ３次Ｂスプライン曲線
                            - F_DRAW_QUADRATIC_BEZIER       ２次ベジェ曲線
                            - F_DRAW_CUBIC_CATMULL_ROM  ３次カットマル-ロム曲線
                            - F_DRAW_POLYGONAL_LINE     折れ線

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算ができない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def draw_curve(hImg, val, pnts, num, mode=F_DRAW_CUBIC_BSPLINE):
    r"""INT FVALGAPI fnFIE_draw_curve( FHANDLE hImg, DOUBLE* val, DPNT_T* pnts, INT num, enum f_draw_curve_mode mode )
    曲線の描画

    Params:
    - [in,out]  hImg        画像のハンドル（type：bin,uc8,s16,us16,double,rgbq）
    - [in]      val         濃度値を格納した配列の先頭アドレス
    - [in]      pnts        点群データ
    - [in]      num         点群の数
    - [in]      mode        曲線の種類
                            - F_DRAW_CUBIC_BSPLINE      ３次Ｂスプライン曲線
                            - F_DRAW_QUADRATIC_BEZIER       ２次ベジェ曲線
                            - F_DRAW_CUBIC_CATMULL_ROM  ３次カットマル-ロム曲線
                            - F_DRAW_POLYGONAL_LINE     折れ線

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_NOMEMORY            メモリ不足により異常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算ができない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_draw_curve(hImg, val, pnts, num, mode)

def fnFIE_draw_curve_get_point_set(pnts, num_pnt, mode, num_inter) -> Any:
    r"""DPNT_T* FVALGAPI fnFIE_draw_curve_get_point_set( DPNT_T* pnts, INT num_pnt, enum f_draw_curve_mode mode, INT* num_inter )
    曲線補間をして、補間点群を取得

    Params:
    - [in]      pnts            頂点データ
    - [in]      num_pnt         頂点の数
    - [in]      mode            曲線の種類
                                - F_DRAW_CUBIC_BSPLINE      ３次Ｂスプライン曲線
                                - F_DRAW_QUADRATIC_BEZIER       ２次ベジェ曲線
                                - F_DRAW_CUBIC_CATMULL_ROM  ３次カットマル-ロム曲線
    - [out]     num_inter       求められた補間点群の数

    Returns:
    - 求められた曲線近似による補間点群の配列の先頭アドレスを返します。
            メモリ不足、不正なパラメータが渡された場合、ライセンスエラー、未初期化エラー
            などで失敗した場合は、NULLを返します。
    """
    raise NotImplementedError

def draw_curve_get_point_set(pnts, num_pnt, mode, num_inter):
    r"""DPNT_T* FVALGAPI fnFIE_draw_curve_get_point_set( DPNT_T* pnts, INT num_pnt, enum f_draw_curve_mode mode, INT* num_inter )
    曲線補間をして、補間点群を取得

    Params:
    - [in]      pnts            頂点データ
    - [in]      num_pnt         頂点の数
    - [in]      mode            曲線の種類
                                - F_DRAW_CUBIC_BSPLINE      ３次Ｂスプライン曲線
                                - F_DRAW_QUADRATIC_BEZIER       ２次ベジェ曲線
                                - F_DRAW_CUBIC_CATMULL_ROM  ３次カットマル-ロム曲線
    - [out]     num_inter       求められた補間点群の数

    Returns:
    - 求められた曲線近似による補間点群の配列の先頭アドレスを返します。
            メモリ不足、不正なパラメータが渡された場合、ライセンスエラー、未初期化エラー
            などで失敗した場合は、NULLを返します。
    """

    return _fie.fnFIE_draw_curve_get_point_set(pnts, num_pnt, mode, num_inter)

def fnFIE_region_fill(hSrcReg, hDstReg) -> Any:
    r"""INT FVALGAPI fnFIE_region_fill( FHANDLE hSrcReg, FHANDLE* hDstReg )
    リージョンの穴を塗りつぶす処理

    Params:
    - [in]  hSrcReg             入力リージョン
    - [out] hDstReg             出力リージョン

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で異常終了した
    - F_ERR_INVALID_PARAM       不正なハンドルが渡された、またリージョンの横サイズは65535以上にあるため、異常終了した
    - F_ERR_INVALID_OBJECT  入力ハンドルはリージョン対象のハンドルではない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_fill(hSrcReg, hDstReg):
    r"""INT FVALGAPI fnFIE_region_fill( FHANDLE hSrcReg, FHANDLE* hDstReg )
    リージョンの穴を塗りつぶす処理

    Params:
    - [in]  hSrcReg             入力リージョン
    - [out] hDstReg             出力リージョン

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で異常終了した
    - F_ERR_INVALID_PARAM       不正なハンドルが渡された、またリージョンの横サイズは65535以上にあるため、異常終了した
    - F_ERR_INVALID_OBJECT  入力ハンドルはリージョン対象のハンドルではない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_fill(hSrcReg, hDstReg)

def fnFIE_region_geotrans_shift(hSrcReg, hDstReg, iDx, iDy) -> Any:
    r"""INT FVALGAPI fnFIE_region_geotrans_shift( FHANDLE hSrcReg, FHANDLE* hDstReg, INT iDx, INT iDy )
    リージョンの平行移動

    Params:
    - [in]  hSrcReg         入力リージョン
    - [out] hDstReg         出力リージョン
    - [in]  iDx             横方向の移動量
    - [in]  iDy             縦方向の移動量

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で異常終了した
    - F_ERR_INVALID_PARAM       不正パラメータ
                                - 不正なハンドルが渡されたため、異常終了した
                                - 移動後の座標は32bit整数の表示範囲以外になるため、異常終了した
    - F_ERR_INVALID_OBJECT  入力ハンドルはリージョンオブジェクトのハンドルではない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_geotrans_shift(hSrcReg, hDstReg, iDx, iDy):
    r"""INT FVALGAPI fnFIE_region_geotrans_shift( FHANDLE hSrcReg, FHANDLE* hDstReg, INT iDx, INT iDy )
    リージョンの平行移動

    Params:
    - [in]  hSrcReg         入力リージョン
    - [out] hDstReg         出力リージョン
    - [in]  iDx             横方向の移動量
    - [in]  iDy             縦方向の移動量

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で異常終了した
    - F_ERR_INVALID_PARAM       不正パラメータ
                                - 不正なハンドルが渡されたため、異常終了した
                                - 移動後の座標は32bit整数の表示範囲以外になるため、異常終了した
    - F_ERR_INVALID_OBJECT  入力ハンドルはリージョンオブジェクトのハンドルではない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_geotrans_shift(hSrcReg, hDstReg, iDx, iDy)

def fnFIE_region_and_img(hSrcImg, hReg, hDstImg) -> Any:
    r"""INT FVALGAPI fnFIE_region_and_img( FHANDLE hSrcImg, FHANDLE hReg, FHANDLE hDstImg )
    リージョンと画像のAND演算

    Params:
    - [in]      hSrcImg         入力画像
    - [in]      hReg            入力リージョン
    - [out]     hDstImg         出力画像

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なハンドルが渡されたため、異常終了した
    - F_ERR_INVALID_OBJECT
                                - ハンドルhSrcImgあるいはhDstImgは画像のハンドルではないため、異常終了した
                                - リージョンの横縦範囲は画像サイズ以外になるため、異常終了した
                                - リージョン中のラン数はゼロのため、異常終了した
    - F_ERR_INVALID_IMAGE
                                - 入力と出力画像のサイズ、タイプ、あるいはチャネル数が一致ではないため、異常終了した
                                - 画像の型は許容型ではないため、異常終了した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_and_img(hSrcImg, hReg, hDstImg):
    r"""INT FVALGAPI fnFIE_region_and_img( FHANDLE hSrcImg, FHANDLE hReg, FHANDLE hDstImg )
    リージョンと画像のAND演算

    Params:
    - [in]      hSrcImg         入力画像
    - [in]      hReg            入力リージョン
    - [out]     hDstImg         出力画像

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なハンドルが渡されたため、異常終了した
    - F_ERR_INVALID_OBJECT
                                - ハンドルhSrcImgあるいはhDstImgは画像のハンドルではないため、異常終了した
                                - リージョンの横縦範囲は画像サイズ以外になるため、異常終了した
                                - リージョン中のラン数はゼロのため、異常終了した
    - F_ERR_INVALID_IMAGE
                                - 入力と出力画像のサイズ、タイプ、あるいはチャネル数が一致ではないため、異常終了した
                                - 画像の型は許容型ではないため、異常終了した
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_and_img(hSrcImg, hReg, hDstImg)

def fnFIE_region_get_runlength(hReg, uipNum) -> Any:
    r"""const F_RUNLENGTH* FVALGAPI fnFIE_region_get_runlength( FHANDLE hReg, UINT* uipNum )
    リージョンのラン配列のポインタを取得

    Params:
    - [in]      hReg            入力リージョン
    - [out]     uipNum          リージョンのラン配列中のランの数

    Returns:
    - ラン配列のポインタ     正常終了
    - NULL                  異常終了
                                    - 不正なハンドルが渡された
                                    - リージョンのラン配列自身が空配列
                                    - ライセンスエラー
                                    - 未初期化エラー
    """
    raise NotImplementedError

def region_get_runlength(hReg, uipNum):
    r"""const F_RUNLENGTH* FVALGAPI fnFIE_region_get_runlength( FHANDLE hReg, UINT* uipNum )
    リージョンのラン配列のポインタを取得

    Params:
    - [in]      hReg            入力リージョン
    - [out]     uipNum          リージョンのラン配列中のランの数

    Returns:
    - ラン配列のポインタ     正常終了
    - NULL                  異常終了
                                    - 不正なハンドルが渡された
                                    - リージョンのラン配列自身が空配列
                                    - ライセンスエラー
                                    - 未初期化エラー
    """

    return _fie.fnFIE_region_get_runlength(hReg, uipNum)

def fnFIE_region_set_runlength(hReg, pRuns, uiRunNum) -> Any:
    r"""INT FVALGAPI fnFIE_region_set_runlength( FHANDLE hReg, const F_RUNLENGTH* pRuns, UINT uiRunNum )
    リージョンオブジェクトのランレングスを設定する

    Params:
    - [in,out]      hReg            入力/出力リージョン
    - [in]          pRuns           ラン配列のポインタ
    - [in]          uiRunNum        配列中のランの数

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_PARAM           不正なハンドルが渡されたため、異常終了した
    - F_ERR_INVALID_OBJECT      入力ハンドルがリージョン対象のハンドルではないため、異常終了した
    - F_ERR_NOMEMORY                メモリー不足
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_set_runlength(hReg, pRuns, uiRunNum):
    r"""INT FVALGAPI fnFIE_region_set_runlength( FHANDLE hReg, const F_RUNLENGTH* pRuns, UINT uiRunNum )
    リージョンオブジェクトのランレングスを設定する

    Params:
    - [in,out]      hReg            入力/出力リージョン
    - [in]          pRuns           ラン配列のポインタ
    - [in]          uiRunNum        配列中のランの数

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_PARAM           不正なハンドルが渡されたため、異常終了した
    - F_ERR_INVALID_OBJECT      入力ハンドルがリージョン対象のハンドルではないため、異常終了した
    - F_ERR_NOMEMORY                メモリー不足
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_set_runlength(hReg, pRuns, uiRunNum)

def fnFIE_create_region_runlength(pRuns, uiRunNum) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_create_region_runlength( const F_RUNLENGTH* pRuns, UINT uiRunNum )
    ラン配列によってリージョンを作成

    Params:
    - [in]          pRuns           ラン配列のポインタ
    - [in]          uiRunNum        配列中のランの数

    Returns:
    - 正常終了した場合は作成されたリージョンのハンドルを返します。
            異常終了した場合はNULLを返します。
    """
    raise NotImplementedError

def create_region_runlength(pRuns, uiRunNum):
    r"""FHANDLE FVALGAPI fnFIE_create_region_runlength( const F_RUNLENGTH* pRuns, UINT uiRunNum )
    ラン配列によってリージョンを作成

    Params:
    - [in]          pRuns           ラン配列のポインタ
    - [in]          uiRunNum        配列中のランの数

    Returns:
    - 正常終了した場合は作成されたリージョンのハンドルを返します。
            異常終了した場合はNULLを返します。
    """

    return _fie.fnFIE_create_region_runlength(pRuns, uiRunNum)

def fnFIE_create_region_rect(iXS, iYS, iWidth, iHeight) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_create_region_rect( INT iXS, INT iYS, INT iWidth, INT iHeight )
    長方形リージョンを作成する関数

    Params:
    - [in]      iXS     リージョンの左上のX座標
    - [in]      iYS     リージョンの左上のY座標
    - [in]      iWidth  リージョンの横サイズ(0以上)
    - [in]      iHeight リージョンの縦サイズ(0以上)

    Returns:
    - 正常終了 作成されたリージョンのハンドル
    - NULL     異常終了
    """
    raise NotImplementedError

def create_region_rect(iXS, iYS, iWidth, iHeight):
    r"""FHANDLE FVALGAPI fnFIE_create_region_rect( INT iXS, INT iYS, INT iWidth, INT iHeight )
    長方形リージョンを作成する関数

    Params:
    - [in]      iXS     リージョンの左上のX座標
    - [in]      iYS     リージョンの左上のY座標
    - [in]      iWidth  リージョンの横サイズ(0以上)
    - [in]      iHeight リージョンの縦サイズ(0以上)

    Returns:
    - 正常終了 作成されたリージョンのハンドル
    - NULL     異常終了
    """

    return _fie.fnFIE_create_region_rect(iXS, iYS, iWidth, iHeight)

def fnFIE_create_region_circle(dpntCenter, dRadius) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_create_region_circle( DPNT_T dpntCenter, DOUBLE dRadius )
    円形リージョンを作成する関数

    Params:
    - [in]      dpntCenter  円形リージョンの円心座標
    - [in]      dRadius     円形リージョンの半径

    Returns:
    - 正常終了 作成されたリージョンのハンドル
    - NULL     異常終了
    """
    raise NotImplementedError

def create_region_circle(dpntCenter, dRadius):
    r"""FHANDLE FVALGAPI fnFIE_create_region_circle( DPNT_T dpntCenter, DOUBLE dRadius )
    円形リージョンを作成する関数

    Params:
    - [in]      dpntCenter  円形リージョンの円心座標
    - [in]      dRadius     円形リージョンの半径

    Returns:
    - 正常終了 作成されたリージョンのハンドル
    - NULL     異常終了
    """

    return _fie.fnFIE_create_region_circle(dpntCenter, dRadius)

def fnFIE_create_region_ellipse(dpntCenter, dMajor, dMinor, dTheta) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_create_region_ellipse( DPNT_T dpntCenter, DOUBLE dMajor, DOUBLE dMinor, DOUBLE dTheta )
    楕円形リージョンを作成する関数

    Params:
    - [in]  dpntCenter  楕円リージョンの円心座標
    - [in]  dMajor      楕円長軸の半径
    - [in]  dMinor      楕円短軸の半径
    - [in]  dTheta      楕円回転角（ラジアン）

    Returns:
    - 正常終了 作成されたリージョンのハンドル
    - NULL     異常終了
    """
    raise NotImplementedError

def create_region_ellipse(dpntCenter, dMajor, dMinor, dTheta=0.0):
    r"""FHANDLE FVALGAPI fnFIE_create_region_ellipse( DPNT_T dpntCenter, DOUBLE dMajor, DOUBLE dMinor, DOUBLE dTheta )
    楕円形リージョンを作成する関数

    Params:
    - [in]  dpntCenter  楕円リージョンの円心座標
    - [in]  dMajor      楕円長軸の半径
    - [in]  dMinor      楕円短軸の半径
    - [in]  dTheta      楕円回転角（ラジアン）

    Returns:
    - 正常終了 作成されたリージョンのハンドル
    - NULL     異常終了
    """

    return _fie.fnFIE_create_region_ellipse(dpntCenter, dMajor, dMinor, dTheta)

def fnFIE_create_region_polygon(dpntVertex, uiVerNum) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_create_region_polygon( const DPNT_T* dpntVertex, UINT uiVerNum )
    多角形リージョンを作成する関数

    Params:
    - [in]  dpntVertex  頂点の集合
    - [in]  uiVerNum    頂点数

    Returns:
    - 正常終了 作成されたリージョンのハンドル
    - NULL     異常終了
    """
    raise NotImplementedError

def create_region_polygon(dpntVertex, uiVerNum):
    r"""FHANDLE FVALGAPI fnFIE_create_region_polygon( const DPNT_T* dpntVertex, UINT uiVerNum )
    多角形リージョンを作成する関数

    Params:
    - [in]  dpntVertex  頂点の集合
    - [in]  uiVerNum    頂点数

    Returns:
    - 正常終了 作成されたリージョンのハンドル
    - NULL     異常終了
    """

    return _fie.fnFIE_create_region_polygon(dpntVertex, uiVerNum)

def fnFIE_region_includes_xy(hSrcReg, x, y, result) -> Any:
    r"""INT FVALGAPI fnFIE_region_includes_xy( FHANDLE hSrcReg, DOUBLE x, DOUBLE y, INT* result )
    リージョンが指定点を含むかの判定

    Params:
    - [in]      hSrcReg         入力リージョン
    - [in]      x               判定をしたい点のx座標
    - [in]      y               判定をしたい点のy座標
    - [out]     result          判定結果 座標点は含まれている==1, 座標点は含まれていない==0

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力に渡されたパラメータが無効、または不正なため異常終了
    - F_ERR_INVALID_OBJECT  渡された入力ハンドルが不正なため、異常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_includes_xy(hSrcReg, x, y, result):
    r"""INT FVALGAPI fnFIE_region_includes_xy( FHANDLE hSrcReg, DOUBLE x, DOUBLE y, INT* result )
    リージョンが指定点を含むかの判定

    Params:
    - [in]      hSrcReg         入力リージョン
    - [in]      x               判定をしたい点のx座標
    - [in]      y               判定をしたい点のy座標
    - [out]     result          判定結果 座標点は含まれている==1, 座標点は含まれていない==0

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力に渡されたパラメータが無効、または不正なため異常終了
    - F_ERR_INVALID_OBJECT  渡された入力ハンドルが不正なため、異常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_includes_xy(hSrcReg, x, y, result)

def fnFIE_region_is_overlaped(hReg1, hReg2, result) -> Any:
    r"""INT FVALGAPI fnFIE_region_is_overlaped( FHANDLE hReg1, FHANDLE hReg2, INT* result )
    リージョン同士が重なりを持つかの判定

    Params:
    - [in]      hReg1           判定するリージョン1
    - [in]      hReg2           判定するリージョン2
    - [out]     result          判定結果 重なりを持つ==1,  重なりを持たない==0

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力に渡されたパラメータが無効、または不正なため異常終了
    - F_ERR_INVALID_OBJECT  渡された入力ハンドルが不正なため、異常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def region_is_overlaped(hReg1, hReg2, result):
    r"""INT FVALGAPI fnFIE_region_is_overlaped( FHANDLE hReg1, FHANDLE hReg2, INT* result )
    リージョン同士が重なりを持つかの判定

    Params:
    - [in]      hReg1           判定するリージョン1
    - [in]      hReg2           判定するリージョン2
    - [out]     result          判定結果 重なりを持つ==1,  重なりを持たない==0

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力に渡されたパラメータが無効、または不正なため異常終了
    - F_ERR_INVALID_OBJECT  渡された入力ハンドルが不正なため、異常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_region_is_overlaped(hReg1, hReg2, result)

def fnFIE_calc_nearest_pixel_region_excludes(hreg, hmap, mode) -> Any:
    r"""INT FVALGAPI fnFIE_calc_nearest_pixel_region_excludes( FHANDLE hreg, FHANDLE hmap, INT mode )
    最も近いリージョン外のピクセル位置を格納した座標変換マップを作成

    Params:
    - [in] hreg     入力REGIONハンドル
    - [out] hmap    マップ画像(type:float, double, channels:2)
    - [in] mode     モード  f_distance_transform_mode
                        - F_DT_CITY_BLOCK ４近傍距離
                        - F_DT_CHESS_BOARD ８近傍距離
                        - F_DT_EUCLIDEAN_EXACT ユークリッド距離

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡された
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトハンドルが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_CALC_IMPOSSIBLE 計算不可
                                  - マップ全体がリージョンに含まれる場合
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def calc_nearest_pixel_region_excludes(hreg, hmap, mode=F_DT_EUCLIDEAN_EXACT):
    r"""INT FVALGAPI fnFIE_calc_nearest_pixel_region_excludes( FHANDLE hreg, FHANDLE hmap, INT mode )
    最も近いリージョン外のピクセル位置を格納した座標変換マップを作成

    Params:
    - [in] hreg     入力REGIONハンドル
    - [out] hmap    マップ画像(type:float, double, channels:2)
    - [in] mode     モード  f_distance_transform_mode
                        - F_DT_CITY_BLOCK ４近傍距離
                        - F_DT_CHESS_BOARD ８近傍距離
                        - F_DT_EUCLIDEAN_EXACT ユークリッド距離

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡された
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトハンドルが渡された
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_CALC_IMPOSSIBLE 計算不可
                                  - マップ全体がリージョンに含まれる場合
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_calc_nearest_pixel_region_excludes(hreg, hmap, mode)

def fnFIE_geotrans_estimate_perspective_matrix(fpMat, pntspFrom, pntspTo, uiNum) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_estimate_perspective_matrix( FMATRIX* fpMat, const DPNT_T* pntspFrom, const DPNT_T* pntspTo, UINT uiNum )
    [OSS] 射影変換の変換行列を計算

    Params:
    - [out]     fpMat           求められた射影変換の変換行列
    - [in]      pntspFrom       射影変換前の点の座標列
    - [in]      pntspTo         射影変換後の点の座標列
    - [in]      uiNum           pntspFrom/pntspTo の点数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ不正
                                -  fpMat ,  pntspFrom , または  pntspTo がNULL
                                - 点数が３点以下、または1073741824点(2^30点)以上
    - F_ERR_INVALID_OBJECT   fpMat が3×3の行列ではない
    - F_ERR_CALC_IMPOSSIBLE 計算不能で異常終了
                                - 関数 DGELSD 中の計算が収束できない
                                - 入力点列によって作った座標行列のランクが 8未満のため、計算できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_estimate_perspective_matrix(fpMat, pntspFrom, pntspTo, uiNum):
    r"""INT FVALGAPI fnFIE_geotrans_estimate_perspective_matrix( FMATRIX* fpMat, const DPNT_T* pntspFrom, const DPNT_T* pntspTo, UINT uiNum )
    [OSS] 射影変換の変換行列を計算

    Params:
    - [out]     fpMat           求められた射影変換の変換行列
    - [in]      pntspFrom       射影変換前の点の座標列
    - [in]      pntspTo         射影変換後の点の座標列
    - [in]      uiNum           pntspFrom/pntspTo の点数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ不正
                                -  fpMat ,  pntspFrom , または  pntspTo がNULL
                                - 点数が３点以下、または1073741824点(2^30点)以上
    - F_ERR_INVALID_OBJECT   fpMat が3×3の行列ではない
    - F_ERR_CALC_IMPOSSIBLE 計算不能で異常終了
                                - 関数 DGELSD 中の計算が収束できない
                                - 入力点列によって作った座標行列のランクが 8未満のため、計算できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_estimate_perspective_matrix(fpMat, pntspFrom, pntspTo, uiNum)

def fnFIE_geotrans_estimate_affine_matrix(fpMat, pntspFrom, pntspTo, uiNum) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_estimate_affine_matrix( FMATRIX* fpMat, const DPNT_T* pntspFrom, const DPNT_T* pntspTo, UINT uiNum )
    [OSS] アフィン変換の変換行列を計算

    Params:
    - [out]     fpMat           求められたアフィン変換の変換行列
    - [in]      pntspFrom       アフィン変換前の点列の座標
    - [in]      pntspTo         アフィン変換後の点列の座標
    - [in]      uiNum           pntspFrom/pntspTo の点数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ不正
                                -  fpMat ,  pntspFrom , または  pntspTo がNULL
                                - 点数が２点以下、または1073741824点(2^30点)以上
    - F_ERR_INVALID_OBJECT   fpMat が3×3の行列ではない
    - F_ERR_CALC_IMPOSSIBLE 計算不能で異常終了
                                - 関数 DGELSD 中の計算は収束できない
                                - 入力点列によって作った座標行列のランクが6未満のため、計算できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_estimate_affine_matrix(fpMat, pntspFrom, pntspTo, uiNum):
    r"""INT FVALGAPI fnFIE_geotrans_estimate_affine_matrix( FMATRIX* fpMat, const DPNT_T* pntspFrom, const DPNT_T* pntspTo, UINT uiNum )
    [OSS] アフィン変換の変換行列を計算

    Params:
    - [out]     fpMat           求められたアフィン変換の変換行列
    - [in]      pntspFrom       アフィン変換前の点列の座標
    - [in]      pntspTo         アフィン変換後の点列の座標
    - [in]      uiNum           pntspFrom/pntspTo の点数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ不正
                                -  fpMat ,  pntspFrom , または  pntspTo がNULL
                                - 点数が２点以下、または1073741824点(2^30点)以上
    - F_ERR_INVALID_OBJECT   fpMat が3×3の行列ではない
    - F_ERR_CALC_IMPOSSIBLE 計算不能で異常終了
                                - 関数 DGELSD 中の計算は収束できない
                                - 入力点列によって作った座標行列のランクが6未満のため、計算できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_estimate_affine_matrix(fpMat, pntspFrom, pntspTo, uiNum)

def fnFIE_geotrans_estimate_similarity_matrix(trans_mat, pnts_from, pnts_to, pnts_num) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_estimate_similarity_matrix( FMATRIX* trans_mat, const DPNT_T* pnts_from, const DPNT_T* pnts_to, UINT pnts_num )
    [OSS] 相似変換の変換行列を計算

    Params:
    - [out]     trans_mat       求められた相似変換の変換行列
    - [in]      pnts_from       相似変換前の点列の座標
    - [in]      pnts_to         相似変換後の点列の座標
    - [in]      pnts_num        pnts_from/pnts_to の点数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ不正
                                -  trans_mat ,  pnts_from , または  pnts_to がNULL
                                - 点数が１点以下、または1073741824点(2^30点)以上
    - F_ERR_INVALID_OBJECT   trans_mat が3×3の行列ではない
    - F_ERR_CALC_IMPOSSIBLE 計算不能で異常終了
                                - 関数 DGELSD 中の計算は収束できない
                                - 入力点列によって作った座標行列のランクが4未満のため、計算できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_estimate_similarity_matrix(trans_mat, pnts_from, pnts_to, pnts_num):
    r"""INT FVALGAPI fnFIE_geotrans_estimate_similarity_matrix( FMATRIX* trans_mat, const DPNT_T* pnts_from, const DPNT_T* pnts_to, UINT pnts_num )
    [OSS] 相似変換の変換行列を計算

    Params:
    - [out]     trans_mat       求められた相似変換の変換行列
    - [in]      pnts_from       相似変換前の点列の座標
    - [in]      pnts_to         相似変換後の点列の座標
    - [in]      pnts_num        pnts_from/pnts_to の点数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ不正
                                -  trans_mat ,  pnts_from , または  pnts_to がNULL
                                - 点数が１点以下、または1073741824点(2^30点)以上
    - F_ERR_INVALID_OBJECT   trans_mat が3×3の行列ではない
    - F_ERR_CALC_IMPOSSIBLE 計算不能で異常終了
                                - 関数 DGELSD 中の計算は収束できない
                                - 入力点列によって作った座標行列のランクが4未満のため、計算できない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_estimate_similarity_matrix(trans_mat, pnts_from, pnts_to, pnts_num)

def fnFIE_geotrans_estimate_euclidean_matrix(trans_mat, pnts_from, pnts_to, pnts_num) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_estimate_euclidean_matrix( FMATRIX* trans_mat, const DPNT_T* pnts_from, const DPNT_T* pnts_to, UINT pnts_num )
    [OSS] ユークリッド変換の変換行列を計算

    Params:
    - [out]     trans_mat       求められたユークリッド変換の変換行列
    - [in]      pnts_from       ユークリッド変換前の点列の座標
    - [in]      pnts_to         ユークリッド変換後の点列の座標
    - [in]      pnts_num        pnts_from/pnts_to の点数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ不正
                                -  trans_mat ,  pnts_from , または  pnts_to がNULL
                                - 点数が１点以下、または1073741824点(2^30点)以上
    - F_ERR_INVALID_OBJECT   trans_mat が3×3の行列ではない
    - F_ERR_CALC_IMPOSSIBLE 計算不能で異常終了
                                - 内部の行列演算に失敗した
                                - 最適解が一意に定まらない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_estimate_euclidean_matrix(trans_mat, pnts_from, pnts_to, pnts_num):
    r"""INT FVALGAPI fnFIE_geotrans_estimate_euclidean_matrix( FMATRIX* trans_mat, const DPNT_T* pnts_from, const DPNT_T* pnts_to, UINT pnts_num )
    [OSS] ユークリッド変換の変換行列を計算

    Params:
    - [out]     trans_mat       求められたユークリッド変換の変換行列
    - [in]      pnts_from       ユークリッド変換前の点列の座標
    - [in]      pnts_to         ユークリッド変換後の点列の座標
    - [in]      pnts_num        pnts_from/pnts_to の点数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ不正
                                -  trans_mat ,  pnts_from , または  pnts_to がNULL
                                - 点数が１点以下、または1073741824点(2^30点)以上
    - F_ERR_INVALID_OBJECT   trans_mat が3×3の行列ではない
    - F_ERR_CALC_IMPOSSIBLE 計算不能で異常終了
                                - 内部の行列演算に失敗した
                                - 最適解が一意に定まらない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_estimate_euclidean_matrix(trans_mat, pnts_from, pnts_to, pnts_num)

def fnFIE_geotrans_estimate_warp_map(hmap, pnts_from, pnts_to, pnts_num, warp_mode, param) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_estimate_warp_map( FHANDLE hmap, const DPNT_T* pnts_from, const DPNT_T* pnts_to, UINT pnts_num, enum f_geotrans_warp_mode warp_mode, DOUBLE param )
    [OSS] 変換前後の点列を用いて座標変換マップを作成

    Params:
    - [out]     hmap            座標変換マップ (type:float, double, ch:2)
    - [in]      pnts_from       座標変換前の点列の座標
    - [in]      pnts_to         座標変換後の点列の座標
    - [in]      pnts_num        pnts_from/pnts_to の点数
    - [in]      warp_mode       変換マップ作成モード
                                    - F_WARP_MODE_EUCLIDEAN
                                    - F_WARP_MODE_SIMILARITY
                                    - F_WARP_MODE_AFFINE
                                    - F_WARP_MODE_PERSPECTIVE
                                    - F_WARP_MODE_PIECEWISE_AFFINE
                                    - F_WARP_MODE_LOCAL_WEIGHTED_MEAN_LINEAR
    - [in]      param           変換マップ作成モードごとのパラメータ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトハンドルが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能で異常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_estimate_warp_map(hmap, pnts_from, pnts_to, pnts_num, warp_mode=F_WARP_MODE_LOCAL_WEIGHTED_MEAN_LINEAR, param=8.0):
    r"""INT FVALGAPI fnFIE_geotrans_estimate_warp_map( FHANDLE hmap, const DPNT_T* pnts_from, const DPNT_T* pnts_to, UINT pnts_num, enum f_geotrans_warp_mode warp_mode, DOUBLE param )
    [OSS] 変換前後の点列を用いて座標変換マップを作成

    Params:
    - [out]     hmap            座標変換マップ (type:float, double, ch:2)
    - [in]      pnts_from       座標変換前の点列の座標
    - [in]      pnts_to         座標変換後の点列の座標
    - [in]      pnts_num        pnts_from/pnts_to の点数
    - [in]      warp_mode       変換マップ作成モード
                                    - F_WARP_MODE_EUCLIDEAN
                                    - F_WARP_MODE_SIMILARITY
                                    - F_WARP_MODE_AFFINE
                                    - F_WARP_MODE_PERSPECTIVE
                                    - F_WARP_MODE_PIECEWISE_AFFINE
                                    - F_WARP_MODE_LOCAL_WEIGHTED_MEAN_LINEAR
    - [in]      param           変換マップ作成モードごとのパラメータ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足で確保に失敗した
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトハンドルが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能で異常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_estimate_warp_map(hmap, pnts_from, pnts_to, pnts_num, warp_mode, param)

def fnFIE_distance_transform(hSrc, hDst, iMode) -> Any:
    r"""INT FVALGAPI fnFIE_distance_transform( FHANDLE hSrc, FHANDLE hDst, INT iMode )
    ２値画像の距離変換を行う

    Params:
    - [in]      hSrc        入力画像のハンドル( type: bin / ch: 1 )
    - [out]     hDst        出力画像のハンドル( type: us16, double / ch: 1 )
    - [in]      iMode       距離変換モード  f_distance_transform_mode
                                - F_DT_CITY_BLOCK         ４近傍距離
                                - F_DT_CHESS_BOARD        ８近傍距離
                                - F_DT_EUCLIDEAN_APPROXI  近似ユークリッド距離
                                - F_DT_EUCLIDEAN_EXACT    ユークリッド距離

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
                                - 入力画像の型がF_IMG_BINではない
                                - 出力画像の型がF_IMG_DOUBLE、或いはF_IMG_US16ではない
                                - 入力と出力画像の幅、または高さが違う
                                - 入力と出力画像のチャネル数が１ではない
                                - 入力と出力画像の幅と高さが共に65535を超えている
    - F_ERR_INVALID_PARAM        iMode に不正な値が入力された
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def distance_transform(hSrc, hDst, iMode=F_DT_EUCLIDEAN_EXACT):
    r"""INT FVALGAPI fnFIE_distance_transform( FHANDLE hSrc, FHANDLE hDst, INT iMode )
    ２値画像の距離変換を行う

    Params:
    - [in]      hSrc        入力画像のハンドル( type: bin / ch: 1 )
    - [out]     hDst        出力画像のハンドル( type: us16, double / ch: 1 )
    - [in]      iMode       距離変換モード  f_distance_transform_mode
                                - F_DT_CITY_BLOCK         ４近傍距離
                                - F_DT_CHESS_BOARD        ８近傍距離
                                - F_DT_EUCLIDEAN_APPROXI  近似ユークリッド距離
                                - F_DT_EUCLIDEAN_EXACT    ユークリッド距離

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       画像オブジェクトの値エラー
                                - 入力画像の型がF_IMG_BINではない
                                - 出力画像の型がF_IMG_DOUBLE、或いはF_IMG_US16ではない
                                - 入力と出力画像の幅、または高さが違う
                                - 入力と出力画像のチャネル数が１ではない
                                - 入力と出力画像の幅と高さが共に65535を超えている
    - F_ERR_INVALID_PARAM        iMode に不正な値が入力された
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_distance_transform(hSrc, hDst, iMode)

def fnFIE_mat_aalloc(row, col) -> Any:
    r"""FMATRIX* FVALGAPI fnFIE_mat_aalloc( INT row, INT col )
    行列の生成

    Params:
    - [in] row  確保する行列の行数
    - [in] col  確保する行列の列数

    Returns:
    - 確保した行列。
            メモリ不足で確保に失敗した場合は、NULLを返します。
    """
    raise NotImplementedError

def mat_aalloc(row, col):
    r"""FMATRIX* FVALGAPI fnFIE_mat_aalloc( INT row, INT col )
    行列の生成

    Params:
    - [in] row  確保する行列の行数
    - [in] col  確保する行列の列数

    Returns:
    - 確保した行列。
            メモリ不足で確保に失敗した場合は、NULLを返します。
    """

    return _fie.fnFIE_mat_aalloc(row, col)

def fnFIE_mat_afree(a) -> Any:
    r"""void fnFIE_mat_afree( FMATRIX * a )
    行列の解放

    Params:
    - [in] a 解放する配列

    Returns:
    """
    raise NotImplementedError

def mat_afree(a):
    r"""void fnFIE_mat_afree( FMATRIX * a )
    行列の解放

    Params:
    - [in] a 解放する配列

    Returns:
    """

    return _fie.fnFIE_mat_afree(a)

def fnFIE_mat_arealloc(a, row, col) -> Any:
    r"""INT FVALGAPI fnFIE_mat_arealloc( FMATRIX* a, INT row, INT col )
    行列次元の変更

    Params:
    - [in,out] a    次元を変更する行列
    - [in]     row  変更後の行列の行数
    - [in]     col  変更後の行列の列数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正(a==NULL,row,colが不正)
    - F_ERR_NOMEMORY       メモリ不足エラー
    """
    raise NotImplementedError

def mat_arealloc(a, row, col):
    r"""INT FVALGAPI fnFIE_mat_arealloc( FMATRIX* a, INT row, INT col )
    行列次元の変更

    Params:
    - [in,out] a    次元を変更する行列
    - [in]     row  変更後の行列の行数
    - [in]     col  変更後の行列の列数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正(a==NULL,row,colが不正)
    - F_ERR_NOMEMORY       メモリ不足エラー
    """

    return _fie.fnFIE_mat_arealloc(a, row, col)

def fnFIE_mat_valloc(dim) -> Any:
    r"""FVECTOR* FVALGAPI fnFIE_mat_valloc( INT dim )
    ベクトルの生成

    Params:
    - [in] dim ベクトルの次元(要素数) (0 < dim < 2^29)

    Returns:
    - 確保したベクトル
            メモリ不足により異常終了した場合は、NULLを返します。
    """
    raise NotImplementedError

def mat_valloc(dim):
    r"""FVECTOR* FVALGAPI fnFIE_mat_valloc( INT dim )
    ベクトルの生成

    Params:
    - [in] dim ベクトルの次元(要素数) (0 < dim < 2^29)

    Returns:
    - 確保したベクトル
            メモリ不足により異常終了した場合は、NULLを返します。
    """

    return _fie.fnFIE_mat_valloc(dim)

def fnFIE_mat_vfree(vect) -> Any:
    r"""void fnFIE_mat_vfree( FVECTOR * vect )
    ベクトル領域の解放

    Params:
    - [in] vect 解放するベクトル

    Returns:
    """
    raise NotImplementedError

def mat_vfree(vect):
    r"""void fnFIE_mat_vfree( FVECTOR * vect )
    ベクトル領域の解放

    Params:
    - [in] vect 解放するベクトル

    Returns:
    """

    return _fie.fnFIE_mat_vfree(vect)

def fnFIE_mat_vrealloc(vect, dim) -> Any:
    r"""INT FVALGAPI fnFIE_mat_vrealloc( FVECTOR* vect, INT dim )
    ベクトルの次元変更

    Params:
    - [in,out] vect 次元変更をするベクトル
    - [in]     dim  変更後のベクトルの次元(要素数)  (0 < dim < 2^29)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正(vect==NULL, dimが不正)
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_vrealloc(vect, dim):
    r"""INT FVALGAPI fnFIE_mat_vrealloc( FVECTOR* vect, INT dim )
    ベクトルの次元変更

    Params:
    - [in,out] vect 次元変更をするベクトル
    - [in]     dim  変更後のベクトルの次元(要素数)  (0 < dim < 2^29)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正(vect==NULL, dimが不正)
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_vrealloc(vect, dim)

def fnFIE_mat_vinit(vect) -> Any:
    r"""INT FVALGAPI fnFIE_mat_vinit( FVECTOR* vect )
    vectorの初期化

    Params:
    - [in,out] vect 初期化するベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_vinit(vect):
    r"""INT FVALGAPI fnFIE_mat_vinit( FVECTOR* vect )
    vectorの初期化

    Params:
    - [in,out] vect 初期化するベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_vinit(vect)

def fnFIE_mat_vinit_val(vect, val) -> Any:
    r"""INT FVALGAPI fnFIE_mat_vinit_val( FVECTOR* vect, DOUBLE val )
    vectorの初期化(初期化値付き)

    Params:
    - [in,out] vect 初期化するベクトル
    - [in]     val  初期化値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_vinit_val(vect, val):
    r"""INT FVALGAPI fnFIE_mat_vinit_val( FVECTOR* vect, DOUBLE val )
    vectorの初期化(初期化値付き)

    Params:
    - [in,out] vect 初期化するベクトル
    - [in]     val  初期化値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_vinit_val(vect, val)

def fnFIE_mat_ainit(a) -> Any:
    r"""INT FVALGAPI fnFIE_mat_ainit( FMATRIX* a )
    行列の初期化

    Params:
    - [in,out] a 初期化したい行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_ainit(a):
    r"""INT FVALGAPI fnFIE_mat_ainit( FMATRIX* a )
    行列の初期化

    Params:
    - [in,out] a 初期化したい行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_ainit(a)

def fnFIE_mat_ainit_val(a, val) -> Any:
    r"""INT FVALGAPI fnFIE_mat_ainit_val( FMATRIX* a, DOUBLE val )
    行列の初期化(初期化値付き)

    Params:
    - [in,out] a   初期化したい行列
    - [in]     val 初期化値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_ainit_val(a, val):
    r"""INT FVALGAPI fnFIE_mat_ainit_val( FMATRIX* a, DOUBLE val )
    行列の初期化(初期化値付き)

    Params:
    - [in,out] a   初期化したい行列
    - [in]     val 初期化値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_ainit_val(a, val)

def fnFIE_mat_copy(a1, a2) -> Any:
    r"""INT FVALGAPI fnFIE_mat_copy( const FMATRIX* a1, FMATRIX* a2 )
    行列の複写

    Params:
    - [in]  a1 行列１(コピー元行列)
    - [out] a2 行列２(コピー先行列)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_copy(a1, a2):
    r"""INT FVALGAPI fnFIE_mat_copy( const FMATRIX* a1, FMATRIX* a2 )
    行列の複写

    Params:
    - [in]  a1 行列１(コピー元行列)
    - [out] a2 行列２(コピー先行列)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_copy(a1, a2)

def fnFIE_mat_copy_to_img(a, hdst) -> Any:
    r"""INT FVALGAPI fnFIE_mat_copy_to_img( const FMATRIX* a, FHANDLE hdst )
    行列から画像への複写

    Params:
    - [in]  a コピー元行列
    - [out] hdst コピー先画像 (type: uc8, s16, us16, float, double / ch: 1)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_INVALID_IMAGE  不正な画像エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_copy_to_img(a, hdst):
    r"""INT FVALGAPI fnFIE_mat_copy_to_img( const FMATRIX* a, FHANDLE hdst )
    行列から画像への複写

    Params:
    - [in]  a コピー元行列
    - [out] hdst コピー先画像 (type: uc8, s16, us16, float, double / ch: 1)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_INVALID_IMAGE  不正な画像エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_copy_to_img(a, hdst)

def fnFIE_mat_copy_from_img(hsrc, a) -> Any:
    r"""INT FVALGAPI fnFIE_mat_copy_from_img( const FHANDLE hsrc, FMATRIX* a )
    画像から行列への複写

    Params:
    - [in]  hsrc コピー元画像 (type: uc8, s16, us16, float, double / ch: 1)
    - [out] a コピー先行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_INVALID_IMAGE  不正な画像エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_copy_from_img(hsrc, a):
    r"""INT FVALGAPI fnFIE_mat_copy_from_img( const FHANDLE hsrc, FMATRIX* a )
    画像から行列への複写

    Params:
    - [in]  hsrc コピー元画像 (type: uc8, s16, us16, float, double / ch: 1)
    - [out] a コピー先行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_INVALID_IMAGE  不正な画像エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_copy_from_img(hsrc, a)

def fnFIE_mat_vcopy(v1, v2) -> Any:
    r"""INT FVALGAPI fnFIE_mat_vcopy( const FVECTOR* v1, FVECTOR* v2 )
    ベクトルの複写

    Params:
    - [in]  v1 ベクトル１(コピー元ベクトル)
    - [out] v2 ベクトル２(コピー先ベクトル)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_vcopy(v1, v2):
    r"""INT FVALGAPI fnFIE_mat_vcopy( const FVECTOR* v1, FVECTOR* v2 )
    ベクトルの複写

    Params:
    - [in]  v1 ベクトル１(コピー元ベクトル)
    - [out] v2 ベクトル２(コピー先ベクトル)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_vcopy(v1, v2)

def fnFIE_mat_eye(a) -> Any:
    r"""INT FVALGAPI fnFIE_mat_eye( FMATRIX* a )
    単位行列の作成

    Params:
    - [in,out]  a 値を設定する行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_eye(a):
    r"""INT FVALGAPI fnFIE_mat_eye( FMATRIX* a )
    単位行列の作成

    Params:
    - [in,out]  a 値を設定する行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_eye(a)

def fnFIE_mat_ones(a) -> Any:
    r"""INT FVALGAPI fnFIE_mat_ones( FMATRIX* a )
    要素が全て１の行列の作成

    Params:
    - [in,out]  a 値を設定する行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_ones(a):
    r"""INT FVALGAPI fnFIE_mat_ones( FMATRIX* a )
    要素が全て１の行列の作成

    Params:
    - [in,out]  a 値を設定する行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_ones(a)

def fnFIE_mat_zeros(a) -> Any:
    r"""INT FVALGAPI fnFIE_mat_zeros( FMATRIX* a )
    要素が全て０の行列の作成

    Params:
    - [in,out]  a 値を設定する行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_zeros(a):
    r"""INT FVALGAPI fnFIE_mat_zeros( FMATRIX* a )
    要素が全て０の行列の作成

    Params:
    - [in,out]  a 値を設定する行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_zeros(a)

def fnFIE_mat_aduplicate(src, dst) -> Any:
    r"""INT FVALGAPI fnFIE_mat_aduplicate( const FMATRIX* src, FMATRIX** dst )
    行列の複製

    Params:
    - [in]  src  コピー元行列
    - [out] dst  コピーされた行列
                     関数エントリー時  *dst == NULL でなければなりません。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    - F_ERR_NOMEMORY       メモリ不足エラー
    """
    raise NotImplementedError

def mat_aduplicate(src, dst):
    r"""INT FVALGAPI fnFIE_mat_aduplicate( const FMATRIX* src, FMATRIX** dst )
    行列の複製

    Params:
    - [in]  src  コピー元行列
    - [out] dst  コピーされた行列
                     関数エントリー時  *dst == NULL でなければなりません。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    - F_ERR_NOMEMORY       メモリ不足エラー
    """

    return _fie.fnFIE_mat_aduplicate(src, dst)

def fnFIE_mat_inverse(a) -> Any:
    r"""INT FVALGAPI fnFIE_mat_inverse( FMATRIX* a )
    逆行列の算出

    Params:
    - [in,out] a  逆行列を計算する正方行列。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_inverse(a):
    r"""INT FVALGAPI fnFIE_mat_inverse( FMATRIX* a )
    逆行列の算出

    Params:
    - [in,out] a  逆行列を計算する正方行列。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_inverse(a)

def fnFIE_mat_inverse2(a, a_inv, det) -> Any:
    r"""INT FVALGAPI fnFIE_mat_inverse2( FMATRIX* a, FMATRIX* a_inv, DOUBLE* det )
    逆行列の算出(LU分解採用)

    Params:
    - [in,out] a         逆行列を計算する行列
    - [out]    a_inv     求められた逆行列
    - [out]    det       aの行列式( det(a) )。 不要な場合はNULLを指定可能

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_inverse2(a, a_inv, det):
    r"""INT FVALGAPI fnFIE_mat_inverse2( FMATRIX* a, FMATRIX* a_inv, DOUBLE* det )
    逆行列の算出(LU分解採用)

    Params:
    - [in,out] a         逆行列を計算する行列
    - [out]    a_inv     求められた逆行列
    - [out]    det       aの行列式( det(a) )。 不要な場合はNULLを指定可能

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_inverse2(a, a_inv, det)

def fnFIE_mat_solve(a, b, x) -> Any:
    r"""INT FVALGAPI fnFIE_mat_solve( FMATRIX* a, FVECTOR* b, FVECTOR* x )
    連立一次方程式の計算

    Params:
    - [in,out]  a    係数行列Ａ。ＡはNxN、つまり正方行列でなければいけません。
    - [in]      b    連立一次方程式の右辺
                         b の次元はNでなければいけません。
    - [out]     x    答え
                         x の次元はNでなければいけません。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_solve(a, b, x):
    r"""INT FVALGAPI fnFIE_mat_solve( FMATRIX* a, FVECTOR* b, FVECTOR* x )
    連立一次方程式の計算

    Params:
    - [in,out]  a    係数行列Ａ。ＡはNxN、つまり正方行列でなければいけません。
    - [in]      b    連立一次方程式の右辺
                         b の次元はNでなければいけません。
    - [out]     x    答え
                         x の次元はNでなければいけません。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_solve(a, b, x)

def fnFIE_mat_trans(a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_trans( const FMATRIX* a, FMATRIX* ad )
    行列の転置

    Params:
    - [in]  a  入力行列
    - [out] ad 出力行列

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_trans(a, ad):
    r"""INT FVALGAPI fnFIE_mat_trans( const FMATRIX* a, FMATRIX* ad )
    行列の転置

    Params:
    - [in]  a  入力行列
    - [out] ad 出力行列

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_trans(a, ad)

def fnFIE_mat_trace(a, trace) -> Any:
    r"""INT FVALGAPI fnFIE_mat_trace( const FMATRIX* a, DOUBLE* trace )
    行列のトレースを計算

    Params:
    - [in]  a     入力行列
    - [out] trace トレース

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_trace(a, trace):
    r"""INT FVALGAPI fnFIE_mat_trace( const FMATRIX* a, DOUBLE* trace )
    行列のトレースを計算

    Params:
    - [in]  a     入力行列
    - [out] trace トレース

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_trace(a, trace)

def fnFIE_mat_triu(a, ad, k) -> Any:
    r"""INT FVALGAPI fnFIE_mat_triu( const FMATRIX* a, FMATRIX* ad, INT k )
    上三角成分の抽出

    Params:
    - [in]   a  MxN入力行列A
    - [out]  ad MxN行列。aの上三角要素が格納される。
    - [in]   k  対角位置

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_triu(a, ad, k=0):
    r"""INT FVALGAPI fnFIE_mat_triu( const FMATRIX* a, FMATRIX* ad, INT k )
    上三角成分の抽出

    Params:
    - [in]   a  MxN入力行列A
    - [out]  ad MxN行列。aの上三角要素が格納される。
    - [in]   k  対角位置

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_triu(a, ad, k)

def fnFIE_mat_tril(a, ad, k) -> Any:
    r"""INT FVALGAPI fnFIE_mat_tril( const FMATRIX* a, FMATRIX* ad, INT k )
    下三角成分の抽出

    Params:
    - [in]   a  MxN入力行列A
    - [out]  ad MxN行列。aの下三角要素が格納される。
    - [in]   k  対角位置

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_tril(a, ad, k=0):
    r"""INT FVALGAPI fnFIE_mat_tril( const FMATRIX* a, FMATRIX* ad, INT k )
    下三角成分の抽出

    Params:
    - [in]   a  MxN入力行列A
    - [out]  ad MxN行列。aの下三角要素が格納される。
    - [in]   k  対角位置

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_tril(a, ad, k)

def fnFIE_mat_circshift(a, ad, sx, sy) -> Any:
    r"""INT FVALGAPI fnFIE_mat_circshift( const FMATRIX* a, FMATRIX* ad, INT sx, INT sy )
    行列要素の循環シフト

    Params:
    - [in]   a  MxN入力行列A
    - [out]  ad シフトされたMxN行列
    - [in]   sx 列方向循環シフト量
    - [in]   sy 行方向循環シフト量

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_circshift(a, ad, sx, sy):
    r"""INT FVALGAPI fnFIE_mat_circshift( const FMATRIX* a, FMATRIX* ad, INT sx, INT sy )
    行列要素の循環シフト

    Params:
    - [in]   a  MxN入力行列A
    - [out]  ad シフトされたMxN行列
    - [in]   sx 列方向循環シフト量
    - [in]   sy 行方向循環シフト量

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_circshift(a, ad, sx, sy)

def fnFIE_mat_horzcat(a1, a2, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_horzcat( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    行列要素の水平方向結合

    Params:
    - [in]   a1 入力行列A1
    - [in]   a2 入力行列A2
    - [out]  ad A1とA2を結合した行列

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_horzcat(a1, a2, ad):
    r"""INT FVALGAPI fnFIE_mat_horzcat( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    行列要素の水平方向結合

    Params:
    - [in]   a1 入力行列A1
    - [in]   a2 入力行列A2
    - [out]  ad A1とA2を結合した行列

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_horzcat(a1, a2, ad)

def fnFIE_mat_vertcat(a1, a2, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_vertcat( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    行列要素の垂直方向結合

    Params:
    - [in]   a1 入力行列A1
    - [in]   a2 入力行列A2
    - [out]  ad A1とA2を結合した行列

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_vertcat(a1, a2, ad):
    r"""INT FVALGAPI fnFIE_mat_vertcat( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    行列要素の垂直方向結合

    Params:
    - [in]   a1 入力行列A1
    - [in]   a2 入力行列A2
    - [out]  ad A1とA2を結合した行列

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_vertcat(a1, a2, ad)

def fnFIE_mat_flipdim(a, ad, mode) -> Any:
    r"""INT FVALGAPI fnFIE_mat_flipdim( const FMATRIX* a, FMATRIX* ad, INT mode )
    行列要素の反転

    Params:
    - [in]   a    入力行列
    - [out]  ad   反転された行列
    - [in]   mode 反転させる次元

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_flipdim(a, ad, mode):
    r"""INT FVALGAPI fnFIE_mat_flipdim( const FMATRIX* a, FMATRIX* ad, INT mode )
    行列要素の反転

    Params:
    - [in]   a    入力行列
    - [out]  ad   反転された行列
    - [in]   mode 反転させる次元

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_flipdim(a, ad, mode)

def fnFIE_mat_mul_av(a, vs, vd) -> Any:
    r"""INT FVALGAPI fnFIE_mat_mul_av( const FMATRIX* a, const FVECTOR* vs, FVECTOR* vd )
    行列とベクトルのかけ算

    Params:
    - [in]  a 掛け合わせる行列(左)
    - [in]  vs 掛け合わせる列ベクトル(右)
    - [out] vd 計算結果

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_mul_av(a, vs, vd):
    r"""INT FVALGAPI fnFIE_mat_mul_av( const FMATRIX* a, const FVECTOR* vs, FVECTOR* vd )
    行列とベクトルのかけ算

    Params:
    - [in]  a 掛け合わせる行列(左)
    - [in]  vs 掛け合わせる列ベクトル(右)
    - [out] vd 計算結果

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_mul_av(a, vs, vd)

def fnFIE_mat_mul_va(vs, a, vd) -> Any:
    r"""INT FVALGAPI fnFIE_mat_mul_va( const FVECTOR* vs, const FMATRIX* a, FVECTOR* vd )
    ベクトルと行列のかけ算

    Params:
    - [in]  vs 掛け合わせる行ベクトル(左)
    - [in]  a 掛け合わせる行列(右)
    - [out] vd 計算結果(行ベクトル)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_mul_va(vs, a, vd):
    r"""INT FVALGAPI fnFIE_mat_mul_va( const FVECTOR* vs, const FMATRIX* a, FVECTOR* vd )
    ベクトルと行列のかけ算

    Params:
    - [in]  vs 掛け合わせる行ベクトル(左)
    - [in]  a 掛け合わせる行列(右)
    - [out] vd 計算結果(行ベクトル)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_mul_va(vs, a, vd)

def fnFIE_mat_mul_aa(a1, a2, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_mul_aa( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    行列と行列のかけ算

    Params:
    - [in]  a1 掛け合わせる行列(左)
    - [in]  a2 掛け合わせる行列(右)
    - [out] ad 計算結果

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_mul_aa(a1, a2, ad):
    r"""INT FVALGAPI fnFIE_mat_mul_aa( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    行列と行列のかけ算

    Params:
    - [in]  a1 掛け合わせる行列(左)
    - [in]  a2 掛け合わせる行列(右)
    - [out] ad 計算結果

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_mul_aa(a1, a2, ad)

def fnFIE_mat_mul_as(a, s, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_mul_as( const FMATRIX* a, DOUBLE s, FMATRIX* ad )
    行列とスカラーのかけ算

    Params:
    - [in]  a  掛けられる行列
    - [in]  s  掛ける値
    - [out] ad 計算結果

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_mul_as(a, s, ad):
    r"""INT FVALGAPI fnFIE_mat_mul_as( const FMATRIX* a, DOUBLE s, FMATRIX* ad )
    行列とスカラーのかけ算

    Params:
    - [in]  a  掛けられる行列
    - [in]  s  掛ける値
    - [out] ad 計算結果

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_mul_as(a, s, ad)

def fnFIE_mat_mul_vs(v, s, vd) -> Any:
    r"""INT FVALGAPI fnFIE_mat_mul_vs( const FVECTOR* v, DOUBLE s, FVECTOR* vd )
    ベクトルとスカラーのかけ算

    Params:
    - [in]  v  掛けられるベクトル
    - [in]  s  掛ける値
    - [out] vd 結果ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_mul_vs(v, s, vd):
    r"""INT FVALGAPI fnFIE_mat_mul_vs( const FVECTOR* v, DOUBLE s, FVECTOR* vd )
    ベクトルとスカラーのかけ算

    Params:
    - [in]  v  掛けられるベクトル
    - [in]  s  掛ける値
    - [out] vd 結果ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_mul_vs(v, s, vd)

def fnFIE_mat_sum_aa(a1, a2, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_sum_aa( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    行列の足し算

    Params:
    - [in]  a1 足される行列
    - [in]  a2 足す行列
    - [out] ad 結果行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_sum_aa(a1, a2, ad):
    r"""INT FVALGAPI fnFIE_mat_sum_aa( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    行列の足し算

    Params:
    - [in]  a1 足される行列
    - [in]  a2 足す行列
    - [out] ad 結果行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_sum_aa(a1, a2, ad)

def fnFIE_mat_sum_vv(v1, v2, vd) -> Any:
    r"""INT FVALGAPI fnFIE_mat_sum_vv( const FVECTOR* v1, const FVECTOR* v2, FVECTOR* vd )
    ベクトルの足し算

    Params:
    - [in]  v1 足されるベクトル
    - [in]  v2 足すベクトル
    - [out] vd 結果行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_sum_vv(v1, v2, vd):
    r"""INT FVALGAPI fnFIE_mat_sum_vv( const FVECTOR* v1, const FVECTOR* v2, FVECTOR* vd )
    ベクトルの足し算

    Params:
    - [in]  v1 足されるベクトル
    - [in]  v2 足すベクトル
    - [out] vd 結果行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_sum_vv(v1, v2, vd)

def fnFIE_mat_sum_as(a, s, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_sum_as( const FMATRIX* a, DOUBLE s, FMATRIX* ad )
    行列とスカラーの足し算

    Params:
    - [in]  a    足される行列
    - [in]  s    足す値
    - [out] ad   結果行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_sum_as(a, s, ad):
    r"""INT FVALGAPI fnFIE_mat_sum_as( const FMATRIX* a, DOUBLE s, FMATRIX* ad )
    行列とスカラーの足し算

    Params:
    - [in]  a    足される行列
    - [in]  s    足す値
    - [out] ad   結果行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_sum_as(a, s, ad)

def fnFIE_mat_sum_vs(v, s, vd) -> Any:
    r"""INT FVALGAPI fnFIE_mat_sum_vs( const FVECTOR* v, DOUBLE s, FVECTOR* vd )
    ベクトルとスカラーの足し算

    Params:
    - [in]  v  足されるベクトル
    - [in]  s  足す値
    - [out] vd 結果ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_sum_vs(v, s, vd):
    r"""INT FVALGAPI fnFIE_mat_sum_vs( const FVECTOR* v, DOUBLE s, FVECTOR* vd )
    ベクトルとスカラーの足し算

    Params:
    - [in]  v  足されるベクトル
    - [in]  s  足す値
    - [out] vd 結果ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_sum_vs(v, s, vd)

def fnFIE_mat_sub_aa(a1, a2, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_sub_aa( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    行列の引き算

    Params:
    - [in]  a1 引かれる行列
    - [in]  a2 引く行列
    - [out] ad 結果行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_sub_aa(a1, a2, ad):
    r"""INT FVALGAPI fnFIE_mat_sub_aa( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    行列の引き算

    Params:
    - [in]  a1 引かれる行列
    - [in]  a2 引く行列
    - [out] ad 結果行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_sub_aa(a1, a2, ad)

def fnFIE_mat_sub_vv(v1, v2, vd) -> Any:
    r"""INT FVALGAPI fnFIE_mat_sub_vv( const FVECTOR* v1, const FVECTOR* v2, FVECTOR* vd )
    ベクトルの引き算

    Params:
    - [in]  v1 引かれるベクトル
    - [in]  v2 引くベクトル
    - [out] vd 結果ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_sub_vv(v1, v2, vd):
    r"""INT FVALGAPI fnFIE_mat_sub_vv( const FVECTOR* v1, const FVECTOR* v2, FVECTOR* vd )
    ベクトルの引き算

    Params:
    - [in]  v1 引かれるベクトル
    - [in]  v2 引くベクトル
    - [out] vd 結果ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_sub_vv(v1, v2, vd)

def fnFIE_mat_sub_as(a, s, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_sub_as( const FMATRIX* a, const DOUBLE s, FMATRIX* ad )
    行列とスカラーの引き算

    Params:
    - [in]  a  引かれる行列
    - [in]  s  引く値
    - [out] ad 結果行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_sub_as(a, s, ad):
    r"""INT FVALGAPI fnFIE_mat_sub_as( const FMATRIX* a, const DOUBLE s, FMATRIX* ad )
    行列とスカラーの引き算

    Params:
    - [in]  a  引かれる行列
    - [in]  s  引く値
    - [out] ad 結果行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_sub_as(a, s, ad)

def fnFIE_mat_sub_vs(v, s, vd) -> Any:
    r"""INT FVALGAPI fnFIE_mat_sub_vs( const FVECTOR* v, const DOUBLE s, FVECTOR* vd )
    ベクトルとスカラーの引き算

    Params:
    - [in]  v  引かれるベクトル
    - [in]  s  引く値
    - [out] vd 結果ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_sub_vs(v, s, vd):
    r"""INT FVALGAPI fnFIE_mat_sub_vs( const FVECTOR* v, const DOUBLE s, FVECTOR* vd )
    ベクトルとスカラーの引き算

    Params:
    - [in]  v  引かれるベクトル
    - [in]  s  引く値
    - [out] vd 結果ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_sub_vs(v, s, vd)

def fnFIE_vect_inner(v1, v2, sd) -> Any:
    r"""INT FVALGAPI fnFIE_vect_inner( const FVECTOR* v1, const FVECTOR* v2, DOUBLE* sd )
    ベクトル内積計算

    Params:
    - [in]  v1  内積を計算するベクトル
    - [in]  v2  内積を計算するベクトル
    - [out] sd  計算結果

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def vect_inner(v1, v2, sd):
    r"""INT FVALGAPI fnFIE_vect_inner( const FVECTOR* v1, const FVECTOR* v2, DOUBLE* sd )
    ベクトル内積計算

    Params:
    - [in]  v1  内積を計算するベクトル
    - [in]  v2  内積を計算するベクトル
    - [out] sd  計算結果

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_vect_inner(v1, v2, sd)

def fnFIE_vect_cross(v1, v2, vd) -> Any:
    r"""INT FVALGAPI fnFIE_vect_cross( const FVECTOR* v1, const FVECTOR* v2, FVECTOR* vd )
    ベクトル外積計算

    Params:
    - [in] v1 外積を計算するベクトル
    - [in] v2 外積を計算するベクトル
    - [out] vd 計算結果ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def vect_cross(v1, v2, vd):
    r"""INT FVALGAPI fnFIE_vect_cross( const FVECTOR* v1, const FVECTOR* v2, FVECTOR* vd )
    ベクトル外積計算

    Params:
    - [in] v1 外積を計算するベクトル
    - [in] v2 外積を計算するベクトル
    - [out] vd 計算結果ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_vect_cross(v1, v2, vd)

def fnFIE_vect_normalize(v, vd) -> Any:
    r"""INT FVALGAPI fnFIE_vect_normalize( const FVECTOR* v, FVECTOR* vd )
    単位ベクトルの計算

    Params:
    - [in]  v  単位ベクトル化するベクトル
    - [out] vd 結果ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def vect_normalize(v, vd):
    r"""INT FVALGAPI fnFIE_vect_normalize( const FVECTOR* v, FVECTOR* vd )
    単位ベクトルの計算

    Params:
    - [in]  v  単位ベクトル化するベクトル
    - [out] vd 結果ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_vect_normalize(v, vd)

def fnFIE_vect_norm_l1(v) -> Any:
    r"""DOUBLE FVALGAPI fnFIE_vect_norm_l1( const FVECTOR* v )
    L1ノルムの算出

    Params:
    - [in]  v L1ノルムを計算するベクトル

    Returns:
    - L1ノルムの値。
            不正なベクトルが与えられた場合
            ライセンスエラー、または未初期化エラーが発生した場合には、0.0を返します。
    """
    raise NotImplementedError

def vect_norm_l1(v):
    r"""DOUBLE FVALGAPI fnFIE_vect_norm_l1( const FVECTOR* v )
    L1ノルムの算出

    Params:
    - [in]  v L1ノルムを計算するベクトル

    Returns:
    - L1ノルムの値。
            不正なベクトルが与えられた場合
            ライセンスエラー、または未初期化エラーが発生した場合には、0.0を返します。
    """

    return _fie.fnFIE_vect_norm_l1(v)

def fnFIE_vect_norm_l2(v) -> Any:
    r"""DOUBLE FVALGAPI fnFIE_vect_norm_l2( const FVECTOR* v )
    L2ノルムの算出

    Params:
    - [in] v L2ノルムを計算するベクトル

    Returns:
    - L2ノルムの値
            不正なベクトルが与えられた場合、
            ライセンスエラー、または未初期化エラーが発生した場合には、0.0を返します。
    """
    raise NotImplementedError

def vect_norm_l2(v):
    r"""DOUBLE FVALGAPI fnFIE_vect_norm_l2( const FVECTOR* v )
    L2ノルムの算出

    Params:
    - [in] v L2ノルムを計算するベクトル

    Returns:
    - L2ノルムの値
            不正なベクトルが与えられた場合、
            ライセンスエラー、または未初期化エラーが発生した場合には、0.0を返します。
    """

    return _fie.fnFIE_vect_norm_l2(v)

def fnFIE_vect_norm_l3(v) -> Any:
    r"""DOUBLE FVALGAPI fnFIE_vect_norm_l3( const FVECTOR* v )
    L3ノルムの算出

    Params:
    - [in] v L3ノルムを計算するベクトル

    Returns:
    - L3ノルムの値
            不正なベクトルが与えられた場合、
            ライセンスエラー、または未初期化エラーが発生した場合には、0.0を返します。
    """
    raise NotImplementedError

def vect_norm_l3(v):
    r"""DOUBLE FVALGAPI fnFIE_vect_norm_l3( const FVECTOR* v )
    L3ノルムの算出

    Params:
    - [in] v L3ノルムを計算するベクトル

    Returns:
    - L3ノルムの値
            不正なベクトルが与えられた場合、
            ライセンスエラー、または未初期化エラーが発生した場合には、0.0を返します。
    """

    return _fie.fnFIE_vect_norm_l3(v)

def fnFIE_mat_max(a, val) -> Any:
    r"""INT FVALGAPI fnFIE_mat_max( const FMATRIX* a, DOUBLE* val )
    成分の最大値抽出

    Params:
    - [in]  a    入力行列
    - [out] val  出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_max(a, val):
    r"""INT FVALGAPI fnFIE_mat_max( const FMATRIX* a, DOUBLE* val )
    成分の最大値抽出

    Params:
    - [in]  a    入力行列
    - [out] val  出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_max(a, val)

def fnFIE_mat_min(a, val) -> Any:
    r"""INT FVALGAPI fnFIE_mat_min( const FMATRIX* a, DOUBLE* val )
    成分の最小値抽出

    Params:
    - [in]  a    入力行列
    - [out] val  出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_min(a, val):
    r"""INT FVALGAPI fnFIE_mat_min( const FMATRIX* a, DOUBLE* val )
    成分の最小値抽出

    Params:
    - [in]  a    入力行列
    - [out] val  出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_min(a, val)

def fnFIE_mat_asin(a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_asin( const FMATRIX* a, FMATRIX* ad )
    各成分のasinを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_asin(a, ad):
    r"""INT FVALGAPI fnFIE_mat_asin( const FMATRIX* a, FMATRIX* ad )
    各成分のasinを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_asin(a, ad)

def fnFIE_mat_acos(a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_acos( const FMATRIX* a, FMATRIX* ad )
    各成分のacosを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_acos(a, ad):
    r"""INT FVALGAPI fnFIE_mat_acos( const FMATRIX* a, FMATRIX* ad )
    各成分のacosを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_acos(a, ad)

def fnFIE_mat_atan(a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_atan( const FMATRIX* a, FMATRIX* ad )
    各成分のatanを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_atan(a, ad):
    r"""INT FVALGAPI fnFIE_mat_atan( const FMATRIX* a, FMATRIX* ad )
    各成分のatanを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_atan(a, ad)

def fnFIE_mat_atan2(ay, ax, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_atan2( const FMATRIX* ay, const FMATRIX* ax, FMATRIX* ad )
    各成分のatan2を計算

    Params:
    - [in]  ay   入力行列（ｙ成分）
    - [in]  ax   入力行列（ｘ成分）
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_atan2(ay, ax, ad):
    r"""INT FVALGAPI fnFIE_mat_atan2( const FMATRIX* ay, const FMATRIX* ax, FMATRIX* ad )
    各成分のatan2を計算

    Params:
    - [in]  ay   入力行列（ｙ成分）
    - [in]  ax   入力行列（ｘ成分）
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_atan2(ay, ax, ad)

def fnFIE_mat_cos(a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_cos( const FMATRIX* a, FMATRIX* ad )
    各成分のcosを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_cos(a, ad):
    r"""INT FVALGAPI fnFIE_mat_cos( const FMATRIX* a, FMATRIX* ad )
    各成分のcosを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_cos(a, ad)

def fnFIE_mat_sin(a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_sin( const FMATRIX* a, FMATRIX* ad )
    各成分のsinを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_sin(a, ad):
    r"""INT FVALGAPI fnFIE_mat_sin( const FMATRIX* a, FMATRIX* ad )
    各成分のsinを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_sin(a, ad)

def fnFIE_mat_tan(a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_tan( const FMATRIX* a, FMATRIX* ad )
    各成分のtanを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_tan(a, ad):
    r"""INT FVALGAPI fnFIE_mat_tan( const FMATRIX* a, FMATRIX* ad )
    各成分のtanを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_tan(a, ad)

def fnFIE_mat_exp(a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_exp( const FMATRIX* a, FMATRIX* ad )
    各成分のexpを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_exp(a, ad):
    r"""INT FVALGAPI fnFIE_mat_exp( const FMATRIX* a, FMATRIX* ad )
    各成分のexpを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_exp(a, ad)

def fnFIE_mat_log(a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_log( const FMATRIX* a, FMATRIX* ad )
    各成分のlogを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_log(a, ad):
    r"""INT FVALGAPI fnFIE_mat_log( const FMATRIX* a, FMATRIX* ad )
    各成分のlogを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_log(a, ad)

def fnFIE_mat_sqrt(a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_sqrt( const FMATRIX* a, FMATRIX* ad )
    各成分のsqrtを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_sqrt(a, ad):
    r"""INT FVALGAPI fnFIE_mat_sqrt( const FMATRIX* a, FMATRIX* ad )
    各成分のsqrtを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_sqrt(a, ad)

def fnFIE_mat_abs(a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_abs( const FMATRIX* a, FMATRIX* ad )
    各成分の絶対値を計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_abs(a, ad):
    r"""INT FVALGAPI fnFIE_mat_abs( const FMATRIX* a, FMATRIX* ad )
    各成分の絶対値を計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_abs(a, ad)

def fnFIE_mat_ceil(a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_ceil( const FMATRIX* a, FMATRIX* ad )
    各成分のceilを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_ceil(a, ad):
    r"""INT FVALGAPI fnFIE_mat_ceil( const FMATRIX* a, FMATRIX* ad )
    各成分のceilを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_ceil(a, ad)

def fnFIE_mat_floor(a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_floor( const FMATRIX* a, FMATRIX* ad )
    各成分のfloorを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_floor(a, ad):
    r"""INT FVALGAPI fnFIE_mat_floor( const FMATRIX* a, FMATRIX* ad )
    各成分のfloorを計算

    Params:
    - [in]  a    入力行列
    - [out] ad   出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_floor(a, ad)

def fnFIE_mat_modf(a, adi, adf) -> Any:
    r"""INT FVALGAPI fnFIE_mat_modf( const FMATRIX* a, FMATRIX* adi, FMATRIX* adf )
    各成分のmodfを計算

    Params:
    - [in]  a    入力行列
    - [out] adi  整数成分出力行列
    - [out] adf  小数成分出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_modf(a, adi, adf):
    r"""INT FVALGAPI fnFIE_mat_modf( const FMATRIX* a, FMATRIX* adi, FMATRIX* adf )
    各成分のmodfを計算

    Params:
    - [in]  a    入力行列
    - [out] adi  整数成分出力行列
    - [out] adf  小数成分出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_modf(a, adi, adf)

def fnFIE_mat_mul_elem_aa(a1, a2, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_mul_elem_aa( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    成分ごとの乗算

    Params:
    - [in]  a1 入力行列１
    - [in]  a2 入力行列２
    - [out] ad 出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_mul_elem_aa(a1, a2, ad):
    r"""INT FVALGAPI fnFIE_mat_mul_elem_aa( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    成分ごとの乗算

    Params:
    - [in]  a1 入力行列１
    - [in]  a2 入力行列２
    - [out] ad 出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_mul_elem_aa(a1, a2, ad)

def fnFIE_mat_mul_elem_as(a, s, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_mul_elem_as( const FMATRIX* a, DOUBLE s, FMATRIX* ad )
    成分ごとの乗算

    Params:
    - [in]  a  入力行列
    - [in]  s  乗算定数
    - [out] ad 出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_mul_elem_as(a, s, ad):
    r"""INT FVALGAPI fnFIE_mat_mul_elem_as( const FMATRIX* a, DOUBLE s, FMATRIX* ad )
    成分ごとの乗算

    Params:
    - [in]  a  入力行列
    - [in]  s  乗算定数
    - [out] ad 出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_mul_elem_as(a, s, ad)

def fnFIE_mat_div_elem_aa(a1, a2, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_div_elem_aa( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    成分ごとの除算

    Params:
    - [in]  a1 入力行列１
    - [in]  a2 入力行列２
    - [out] ad 出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_div_elem_aa(a1, a2, ad):
    r"""INT FVALGAPI fnFIE_mat_div_elem_aa( const FMATRIX* a1, const FMATRIX* a2, FMATRIX* ad )
    成分ごとの除算

    Params:
    - [in]  a1 入力行列１
    - [in]  a2 入力行列２
    - [out] ad 出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_div_elem_aa(a1, a2, ad)

def fnFIE_mat_div_elem_as(a, s, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_div_elem_as( const FMATRIX* a, DOUBLE s, FMATRIX* ad )
    成分ごとの除算

    Params:
    - [in]  a  入力行列
    - [in]  s  除算定数
    - [out] ad 出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_div_elem_as(a, s, ad):
    r"""INT FVALGAPI fnFIE_mat_div_elem_as( const FMATRIX* a, DOUBLE s, FMATRIX* ad )
    成分ごとの除算

    Params:
    - [in]  a  入力行列
    - [in]  s  除算定数
    - [out] ad 出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_div_elem_as(a, s, ad)

def fnFIE_mat_div_elem_sa(s, a, ad) -> Any:
    r"""INT FVALGAPI fnFIE_mat_div_elem_sa( DOUBLE s, const FMATRIX* a, FMATRIX* ad )
    成分ごとの除算

    Params:
    - [in]  s  除算定数
    - [in]  a  入力行列
    - [out] ad 出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_div_elem_sa(s, a, ad):
    r"""INT FVALGAPI fnFIE_mat_div_elem_sa( DOUBLE s, const FMATRIX* a, FMATRIX* ad )
    成分ごとの除算

    Params:
    - [in]  s  除算定数
    - [in]  a  入力行列
    - [out] ad 出力行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_div_elem_sa(s, a, ad)

def fnFIE_vect_mul_elem_vv(v1, v2, vd) -> Any:
    r"""INT FVALGAPI fnFIE_vect_mul_elem_vv( const FVECTOR* v1, const FVECTOR* v2, FVECTOR* vd )
    ベクトルの成分ごとの乗算

    Params:
    - [in]  v1 入力ベクトル１
    - [in]  v2 入力ベクトル２
    - [out] vd 出力ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def vect_mul_elem_vv(v1, v2, vd):
    r"""INT FVALGAPI fnFIE_vect_mul_elem_vv( const FVECTOR* v1, const FVECTOR* v2, FVECTOR* vd )
    ベクトルの成分ごとの乗算

    Params:
    - [in]  v1 入力ベクトル１
    - [in]  v2 入力ベクトル２
    - [out] vd 出力ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_vect_mul_elem_vv(v1, v2, vd)

def fnFIE_vect_mul_elem_vs(v, s, vd) -> Any:
    r"""INT FVALGAPI fnFIE_vect_mul_elem_vs( const FVECTOR* v, DOUBLE s, FVECTOR* vd )
    ベクトルの成分ごとの乗算

    Params:
    - [in]  v  入力ベクトル
    - [in]  s  乗算定数
    - [out] vd 出力ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def vect_mul_elem_vs(v, s, vd):
    r"""INT FVALGAPI fnFIE_vect_mul_elem_vs( const FVECTOR* v, DOUBLE s, FVECTOR* vd )
    ベクトルの成分ごとの乗算

    Params:
    - [in]  v  入力ベクトル
    - [in]  s  乗算定数
    - [out] vd 出力ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_vect_mul_elem_vs(v, s, vd)

def fnFIE_vect_div_elem_vv(v1, v2, vd) -> Any:
    r"""INT FVALGAPI fnFIE_vect_div_elem_vv( const FVECTOR* v1, const FVECTOR* v2, FVECTOR* vd )
    ベクトルの成分ごとの除算

    Params:
    - [in]  v1 入力ベクトル１
    - [in]  v2 入力ベクトル２
    - [out] vd 出力ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def vect_div_elem_vv(v1, v2, vd):
    r"""INT FVALGAPI fnFIE_vect_div_elem_vv( const FVECTOR* v1, const FVECTOR* v2, FVECTOR* vd )
    ベクトルの成分ごとの除算

    Params:
    - [in]  v1 入力ベクトル１
    - [in]  v2 入力ベクトル２
    - [out] vd 出力ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_vect_div_elem_vv(v1, v2, vd)

def fnFIE_vect_div_elem_vs(v, s, vd) -> Any:
    r"""INT FVALGAPI fnFIE_vect_div_elem_vs( const FVECTOR* v, DOUBLE s, FVECTOR* vd )
    ベクトルの成分ごとの除算

    Params:
    - [in]  v  入力ベクトル
    - [in]  s  除算定数
    - [out] vd 出力ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def vect_div_elem_vs(v, s, vd):
    r"""INT FVALGAPI fnFIE_vect_div_elem_vs( const FVECTOR* v, DOUBLE s, FVECTOR* vd )
    ベクトルの成分ごとの除算

    Params:
    - [in]  v  入力ベクトル
    - [in]  s  除算定数
    - [out] vd 出力ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_vect_div_elem_vs(v, s, vd)

def fnFIE_vect_div_elem_sv(s, v, vd) -> Any:
    r"""INT FVALGAPI fnFIE_vect_div_elem_sv( DOUBLE s, const FVECTOR* v, FVECTOR* vd )
    ベクトルの成分ごとの除算

    Params:
    - [in]  s  被除算定数
    - [in]  v  入力ベクトル
    - [out] vd 出力ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def vect_div_elem_sv(s, v, vd):
    r"""INT FVALGAPI fnFIE_vect_div_elem_sv( DOUBLE s, const FVECTOR* v, FVECTOR* vd )
    ベクトルの成分ごとの除算

    Params:
    - [in]  s  被除算定数
    - [in]  v  入力ベクトル
    - [out] vd 出力ベクトル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  異常終了
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_vect_div_elem_sv(s, v, vd)

def fnFIE_mat_has_nan(a) -> Any:
    r"""INT FVALGAPI fnFIE_mat_has_nan( const FMATRIX* a )
    NaN値を含んでいるか判定

    Params:
    - [in] a  判定対象行列

    Returns:
    - 0                     a は NaN を一つも含んでいない
    - 1                     a は NaN を含んでいる
    - F_ERR_INVALID_PARAM  パラメータエラー：  a にNULLが指定された
    """
    raise NotImplementedError

def mat_has_nan(a):
    r"""INT FVALGAPI fnFIE_mat_has_nan( const FMATRIX* a )
    NaN値を含んでいるか判定

    Params:
    - [in] a  判定対象行列

    Returns:
    - 0                     a は NaN を一つも含んでいない
    - 1                     a は NaN を含んでいる
    - F_ERR_INVALID_PARAM  パラメータエラー：  a にNULLが指定された
    """

    return _fie.fnFIE_mat_has_nan(a)

def fnFIE_mat_is_nan(a) -> Any:
    r"""INT FVALGAPI fnFIE_mat_is_nan( const FMATRIX* a )
    行列がNaN値か判定

    Params:
    - [in] a  判定対象行列

    Returns:
    - 0                     a は 少なくとも１つの NaN で無い要素を含んでいる
    - 1                     a は 全ての要素が NaN である
    - F_ERR_INVALID_PARAM  パラメータエラー：  a にNULLが指定された
    """
    raise NotImplementedError

def mat_is_nan(a):
    r"""INT FVALGAPI fnFIE_mat_is_nan( const FMATRIX* a )
    行列がNaN値か判定

    Params:
    - [in] a  判定対象行列

    Returns:
    - 0                     a は 少なくとも１つの NaN で無い要素を含んでいる
    - 1                     a は 全ての要素が NaN である
    - F_ERR_INVALID_PARAM  パラメータエラー：  a にNULLが指定された
    """

    return _fie.fnFIE_mat_is_nan(a)

def fnFIE_mat_is_normal(a) -> Any:
    r"""INT FVALGAPI fnFIE_mat_is_normal( const FMATRIX* a )
    行列の非数値判定

    Params:
    - [in] a  判定対象行列

    Returns:
    - 0                     a は非数値を含んでいる
    - 1                     a は非数値を一つも含んでいない
    - F_ERR_INVALID_PARAM  パラメータエラー：  a にNULLが指定された
    """
    raise NotImplementedError

def mat_is_normal(a):
    r"""INT FVALGAPI fnFIE_mat_is_normal( const FMATRIX* a )
    行列の非数値判定

    Params:
    - [in] a  判定対象行列

    Returns:
    - 0                     a は非数値を含んでいる
    - 1                     a は非数値を一つも含んでいない
    - F_ERR_INVALID_PARAM  パラメータエラー：  a にNULLが指定された
    """

    return _fie.fnFIE_mat_is_normal(a)

def fnFIE_vect_is_normal(v) -> Any:
    r"""INT FVALGAPI fnFIE_vect_is_normal( const FVECTOR* v )
    ベクトルの非数値判定

    Params:
    - [in] v  判定対象ベクトル

    Returns:
    - 0                     v は非数値を含んでいる
    - 1                     v は非数値を一つも含んでいない
    - F_ERR_INVALID_PARAM  パラメータエラー：  v にNULLが指定された
    """
    raise NotImplementedError

def vect_is_normal(v):
    r"""INT FVALGAPI fnFIE_vect_is_normal( const FVECTOR* v )
    ベクトルの非数値判定

    Params:
    - [in] v  判定対象ベクトル

    Returns:
    - 0                     v は非数値を含んでいる
    - 1                     v は非数値を一つも含んでいない
    - F_ERR_INVALID_PARAM  パラメータエラー：  v にNULLが指定された
    """

    return _fie.fnFIE_vect_is_normal(v)

def fnFIE_mat_rand(a) -> Any:
    r"""INT FVALGAPI fnFIE_mat_rand( FMATRIX* a )
    [OSS] ランダム行列の作成

    Params:
    - [in,out]  a 値を設定する行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_rand(a):
    r"""INT FVALGAPI fnFIE_mat_rand( FMATRIX* a )
    [OSS] ランダム行列の作成

    Params:
    - [in,out]  a 値を設定する行列

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ不正終了
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_rand(a)

def fnFIE_mat_det(a, det) -> Any:
    r"""INT FVALGAPI fnFIE_mat_det( const FMATRIX* a, DOUBLE* det )
    [OSS] 行列式の計算

    Params:
    - [in]  a    入力NxN行列
    - [out] det  行列式の値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   入力パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_det(a, det):
    r"""INT FVALGAPI fnFIE_mat_det( const FMATRIX* a, DOUBLE* det )
    [OSS] 行列式の計算

    Params:
    - [in]  a    入力NxN行列
    - [out] det  行列式の値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   入力パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_det(a, det)

def fnFIE_mat_norm(a, type, norm) -> Any:
    r"""INT FVALGAPI fnFIE_mat_norm( const FMATRIX* a, INT type, DOUBLE* norm )
    [OSS] 行列のノルムの計算

    Params:
    - [in]  a    入力MxN行列
    - [in]  type 求めるノルムの種類
                     - 1       : 1-norm
                     - 2       : 2-norm (特異値の最大値)
                     - I32_MAX : infinity norm
                     - -1      : Frobenius norm
    - [out] norm ノルムの値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_norm(a, type=-1, norm=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_mat_norm( const FMATRIX* a, INT type, DOUBLE* norm )
    [OSS] 行列のノルムの計算

    Params:
    - [in]  a    入力MxN行列
    - [in]  type 求めるノルムの種類
                     - 1       : 1-norm
                     - 2       : 2-norm (特異値の最大値)
                     - I32_MAX : infinity norm
                     - -1      : Frobenius norm
    - [out] norm ノルムの値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    if norm is REQUIRED_PLACEHOLDER: raise TypeError("argument 'norm' is missing")
    return _fie.fnFIE_mat_norm(a, type, norm)

def fnFIE_mat_rank(a, tol, rank) -> Any:
    r"""INT FVALGAPI fnFIE_mat_rank( const FMATRIX* a, DOUBLE tol, INT* rank )
    [OSS] 行列のランクの計算

    Params:
    - [in]  a    入力MxN行列
    - [in]  tol  ０と見なす閾値
                     tol<0.0 の値が指定されたときは、max(a->row,a->col) * max(s) * eps の値を使用します。
    - [out] rank ランクの値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_rank(a, tol=-1.0, rank=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_mat_rank( const FMATRIX* a, DOUBLE tol, INT* rank )
    [OSS] 行列のランクの計算

    Params:
    - [in]  a    入力MxN行列
    - [in]  tol  ０と見なす閾値
                     tol<0.0 の値が指定されたときは、max(a->row,a->col) * max(s) * eps の値を使用します。
    - [out] rank ランクの値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    if rank is REQUIRED_PLACEHOLDER: raise TypeError("argument 'rank' is missing")
    return _fie.fnFIE_mat_rank(a, tol, rank)

def fnFIE_mat_svd(a, sigma, u, vt) -> Any:
    r"""INT FVALGAPI fnFIE_mat_svd( const FMATRIX* a, DOUBLE* sigma, FMATRIX* u, FMATRIX* vt )
    [OSS] 行列の特異値分解

    Params:
    - [in]  a     入力 $ M \times N $ 行列
    - [out] sigma 大きい順( sigma(i) >= sigma(i+1) )にソートされた
                      特異値配列。$ \min(M,N) $ 個の領域が必要。
    - [out] u     $ M \times M $ 直交行列 ${\bf U}$
                      計算不要な場合はNULLを指定して下さい。
                       u にNULLを指定する場合は  vt もNULLを指定しなければいけません。
    - [out] vt    $ N \times N $ 直交行列 ${\bf V}^T$
                      計算不要な場合はNULLを指定して下さい。
                       vt にNULLを指定する場合は  u もNULLを指定しなければいけません。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_svd(a, sigma, u=None, vt=None):
    r"""INT FVALGAPI fnFIE_mat_svd( const FMATRIX* a, DOUBLE* sigma, FMATRIX* u, FMATRIX* vt )
    [OSS] 行列の特異値分解

    Params:
    - [in]  a     入力 $ M \times N $ 行列
    - [out] sigma 大きい順( sigma(i) >= sigma(i+1) )にソートされた
                      特異値配列。$ \min(M,N) $ 個の領域が必要。
    - [out] u     $ M \times M $ 直交行列 ${\bf U}$
                      計算不要な場合はNULLを指定して下さい。
                       u にNULLを指定する場合は  vt もNULLを指定しなければいけません。
    - [out] vt    $ N \times N $ 直交行列 ${\bf V}^T$
                      計算不要な場合はNULLを指定して下さい。
                       vt にNULLを指定する場合は  u もNULLを指定しなければいけません。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_svd(a, sigma, u, vt)

def fnFIE_mat_svd2(a, u, sigma, vt, mode, tol, rank) -> Any:
    r"""INT FVALGAPI fnFIE_mat_svd2( const FMATRIX* a, FMATRIX** u, FVECTOR** sigma, FMATRIX** vt, INT mode, DOUBLE tol, INT* rank )
    [OSS] 行列の特異値分解 (convenience function)

    Params:
    - [in]  a     入力 $ M \times N $ 行列
    - [out] u     直交行列 $U$ のポインタ
                      計算不要な場合はNULLを指定して下さい。
                       u != NULL の場合  *u は NULL 又は fnFIE_mat_aalloc()
                      で確保されたFMATRIXのポインタでなければなりません。
    - [out] sigma 大きい順( sigma(i) >= sigma(i+1) )にソートされた特異値配列。
                      計算不要な場合はNULLを指定して下さい。
                       sigma != NULL の場合  *sigma は NULL 又は fnFIE_mat_valloc()
                      で確保されたFVECTORのポインタでなければなりません。
    - [out] vt    直交行列 $V^T$
                      計算不要な場合はNULLを指定して下さい。
                       vt != NULL の場合  *vt は NULL 又は fnFIE_mat_aalloc()
                      で確保されたFMATRIXのポインタでなければなりません。
    - [in]  mode  演算モード指定。次の何れかの値を指定。
                      ( M =  a->row, N =  a->col, K = min(M,N), L = max(M,N) とおく )
                     - 0: full SVD (  *u は MxM 行列,  *vt は NxN 行列,  *sigma の次元は L )
                             (*sigma)->v[K] から (*sigma)->v[L-1] は常にゼロになります。
                     - 1: M<=N の時、full SVD (  mode=0 の場合と一緒 )
                             M>N の時、 economy SVD (  u は MxK 行列,  vt は KxN 行列,  *sigma の次元は L )
                             (*sigma)->v[K] から (*sigma)->v[L-1] は常にゼロになります。
                     - 2: economy SVD (  u は MxK 行列,  vt は KxN 行列,  *sigma の次元は K )
    - [in]  rcond ランク計算時の閾値設定
                      ランク計算時に 特異値 sigma[i] <= rcond*sigma[0] の値をゼロと見なします。
                      rcond<0.0 の値が指定されたときは、max(sigma) * eps の値を使用します。
                       rank にNULLが指定された場合は本パラメータは使用されません。
    - [out] rank  ランクの値
                      不要な場合はNULLを指定してください。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_svd2(a, u, sigma, vt, mode, tol=-1.0, rank=None):
    r"""INT FVALGAPI fnFIE_mat_svd2( const FMATRIX* a, FMATRIX** u, FVECTOR** sigma, FMATRIX** vt, INT mode, DOUBLE tol, INT* rank )
    [OSS] 行列の特異値分解 (convenience function)

    Params:
    - [in]  a     入力 $ M \times N $ 行列
    - [out] u     直交行列 $U$ のポインタ
                      計算不要な場合はNULLを指定して下さい。
                       u != NULL の場合  *u は NULL 又は fnFIE_mat_aalloc()
                      で確保されたFMATRIXのポインタでなければなりません。
    - [out] sigma 大きい順( sigma(i) >= sigma(i+1) )にソートされた特異値配列。
                      計算不要な場合はNULLを指定して下さい。
                       sigma != NULL の場合  *sigma は NULL 又は fnFIE_mat_valloc()
                      で確保されたFVECTORのポインタでなければなりません。
    - [out] vt    直交行列 $V^T$
                      計算不要な場合はNULLを指定して下さい。
                       vt != NULL の場合  *vt は NULL 又は fnFIE_mat_aalloc()
                      で確保されたFMATRIXのポインタでなければなりません。
    - [in]  mode  演算モード指定。次の何れかの値を指定。
                      ( M =  a->row, N =  a->col, K = min(M,N), L = max(M,N) とおく )
                     - 0: full SVD (  *u は MxM 行列,  *vt は NxN 行列,  *sigma の次元は L )
                             (*sigma)->v[K] から (*sigma)->v[L-1] は常にゼロになります。
                     - 1: M<=N の時、full SVD (  mode=0 の場合と一緒 )
                             M>N の時、 economy SVD (  u は MxK 行列,  vt は KxN 行列,  *sigma の次元は L )
                             (*sigma)->v[K] から (*sigma)->v[L-1] は常にゼロになります。
                     - 2: economy SVD (  u は MxK 行列,  vt は KxN 行列,  *sigma の次元は K )
    - [in]  rcond ランク計算時の閾値設定
                      ランク計算時に 特異値 sigma[i] <= rcond*sigma[0] の値をゼロと見なします。
                      rcond<0.0 の値が指定されたときは、max(sigma) * eps の値を使用します。
                       rank にNULLが指定された場合は本パラメータは使用されません。
    - [out] rank  ランクの値
                      不要な場合はNULLを指定してください。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_svd2(a, u, sigma, vt, mode, tol, rank)

def fnFIE_mat_chol(a, uplo) -> Any:
    r"""INT FVALGAPI fnFIE_mat_chol( FMATRIX* a, CHAR* uplo )
    [OSS] 行列のコレスキー分解

    Params:
    - [in,out] a    入力時、分解を行う行列Ａ.
                        - UPLO = 'U'のとき、 A の上三角部に 行列Ａの上三角部を格納する。
                        このとき、 A の下三角部は参照されない。
                        - UPLO = 'L'のとき、 A の下三角部に 行列Ａの下三角部を格納する。
                        このとき、 A の上三角部は参照されない。
                        .
                        正常終了時、コレスキー分解 $ A = U^T U $ または $ A = L  L^T $
                        から得られた  U または  L が格納される。
                         U が格納された場合、下三角部の要素は 0 となる。
                         L が格納された場合、上三角部の要素は 0 となる。
    - [in]      uplo
                          - 'U':  Aの上三角部に値が格納されている
                          - 'L':  Aの下三角部に値が格納されている

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_chol(a, uplo):
    r"""INT FVALGAPI fnFIE_mat_chol( FMATRIX* a, CHAR* uplo )
    [OSS] 行列のコレスキー分解

    Params:
    - [in,out] a    入力時、分解を行う行列Ａ.
                        - UPLO = 'U'のとき、 A の上三角部に 行列Ａの上三角部を格納する。
                        このとき、 A の下三角部は参照されない。
                        - UPLO = 'L'のとき、 A の下三角部に 行列Ａの下三角部を格納する。
                        このとき、 A の上三角部は参照されない。
                        .
                        正常終了時、コレスキー分解 $ A = U^T U $ または $ A = L  L^T $
                        から得られた  U または  L が格納される。
                         U が格納された場合、下三角部の要素は 0 となる。
                         L が格納された場合、上三角部の要素は 0 となる。
    - [in]      uplo
                          - 'U':  Aの上三角部に値が格納されている
                          - 'L':  Aの下三角部に値が格納されている

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_chol(a, uplo)

def fnFIE_mat_lu(a, pivot) -> Any:
    r"""INT FVALGAPI fnFIE_mat_lu( FMATRIX* a, INT* pivot )
    [OSS] 行列のＬＵ分解

    Params:
    - [in,out]  a     入力時、分解する入力MxN行列A
                          出力時、三角分解 $ A = P L U $ の因子LとU。
                          Lの単位対角要素は格納されません。
    - [out]     pivot 軸選択用添字。min(M,N)の領域が必要です。
                          0 ≦i ＜ min(M,N) に対して、行i は 行pivot[i] と交換されています。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_CALC_IMPOSSIBLE 分解は正常に終了したが、U が特異になった
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_lu(a, pivot):
    r"""INT FVALGAPI fnFIE_mat_lu( FMATRIX* a, INT* pivot )
    [OSS] 行列のＬＵ分解

    Params:
    - [in,out]  a     入力時、分解する入力MxN行列A
                          出力時、三角分解 $ A = P L U $ の因子LとU。
                          Lの単位対角要素は格納されません。
    - [out]     pivot 軸選択用添字。min(M,N)の領域が必要です。
                          0 ≦i ＜ min(M,N) に対して、行i は 行pivot[i] と交換されています。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_CALC_IMPOSSIBLE 分解は正常に終了したが、U が特異になった
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_lu(a, pivot)

def fnFIE_mat_qr(a, q, r) -> Any:
    r"""INT FVALGAPI fnFIE_mat_qr( const FMATRIX* a, FMATRIX* q, FMATRIX* r )
    [OSS] 行列のＱＲ分解

    Params:
    - [in]   a  分解を行う MxN行列A.
    - [out]  q  MxMの直交行列Q
    - [out]  r  MxNの三角行列R

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_qr(a, q, r):
    r"""INT FVALGAPI fnFIE_mat_qr( const FMATRIX* a, FMATRIX* q, FMATRIX* r )
    [OSS] 行列のＱＲ分解

    Params:
    - [in]   a  分解を行う MxN行列A.
    - [out]  q  MxMの直交行列Q
    - [out]  r  MxNの三角行列R

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_qr(a, q, r)

def fnFIE_mat_eig(a, lambda_, vr, vl) -> Any:
    r"""INT FVALGAPI fnFIE_mat_eig( const FMATRIX* a, FCOMPLEX* lambda, FCOMPLEX* vr, FCOMPLEX* vl )
    [OSS] 行列の固有値・固有ベクトル計算

    Params:
    - [in]   a       固有値を計算するNxN正方行列A
    - [out]  lambda  固有値配列。
                         N個分の領域が必要。
    - [out]  vr      Aの右固有ベクトル $v_j$
                         N*N個の領域が必要。
                         $v_j$ は vr[j*N]〜vr[j*(N+1)-1] に格納される。
                         vrが計算不要な場合はNULLを指定して下さい。
    - [out]  vl      Aの左固有ベクトル $u_j$
                         N*N個の領域が必要。
                         $u_j$ は vl[j*N]〜vl[j*(N+1)-1] に格納される。
                         vrが計算不要な場合はNULLを指定して下さい。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_eig(a, lambda_, vr=None, vl=None):
    r"""INT FVALGAPI fnFIE_mat_eig( const FMATRIX* a, FCOMPLEX* lambda, FCOMPLEX* vr, FCOMPLEX* vl )
    [OSS] 行列の固有値・固有ベクトル計算

    Params:
    - [in]   a       固有値を計算するNxN正方行列A
    - [out]  lambda  固有値配列。
                         N個分の領域が必要。
    - [out]  vr      Aの右固有ベクトル $v_j$
                         N*N個の領域が必要。
                         $v_j$ は vr[j*N]〜vr[j*(N+1)-1] に格納される。
                         vrが計算不要な場合はNULLを指定して下さい。
    - [out]  vl      Aの左固有ベクトル $u_j$
                         N*N個の領域が必要。
                         $u_j$ は vl[j*N]〜vl[j*(N+1)-1] に格納される。
                         vrが計算不要な場合はNULLを指定して下さい。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_eig(a, lambda_, vr, vl)

def fnFIE_mat_cond(a, type, cond) -> Any:
    r"""INT FVALGAPI fnFIE_mat_cond( const FMATRIX* a, INT type, DOUBLE* cond )
    [OSS] 行列の条件数計算

    Params:
    - [in]   a    固有値を計算するMxN行列A
    - [in]  type  求める条件数の種類
                       - 1       : 1-norm 条件数
                       - 2       : 2-norm 条件数
                       - I32_MAX : infinity norm 条件数
                       - -1      : Frobenius norm 条件数
    - [out]  cond 条件数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_cond(a, type=-1, cond=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_mat_cond( const FMATRIX* a, INT type, DOUBLE* cond )
    [OSS] 行列の条件数計算

    Params:
    - [in]   a    固有値を計算するMxN行列A
    - [in]  type  求める条件数の種類
                       - 1       : 1-norm 条件数
                       - 2       : 2-norm 条件数
                       - I32_MAX : infinity norm 条件数
                       - -1      : Frobenius norm 条件数
    - [out]  cond 条件数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    if cond is REQUIRED_PLACEHOLDER: raise TypeError("argument 'cond' is missing")
    return _fie.fnFIE_mat_cond(a, type, cond)

def fnFIE_mat_rcond(a, rcond) -> Any:
    r"""INT FVALGAPI fnFIE_mat_rcond( const FMATRIX* a, DOUBLE* rcond )
    [OSS] 行列の条件数の逆数計算

    Params:
    - [in]   a       条件数の逆数を計算するNxN正方行列A
    - [out]  rcond   条件数の逆数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_rcond(a, rcond):
    r"""INT FVALGAPI fnFIE_mat_rcond( const FMATRIX* a, DOUBLE* rcond )
    [OSS] 行列の条件数の逆数計算

    Params:
    - [in]   a       条件数の逆数を計算するNxN正方行列A
    - [out]  rcond   条件数の逆数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_rcond(a, rcond)

def fnFIE_mat_inverse3(a, ai, det) -> Any:
    r"""INT FVALGAPI fnFIE_mat_inverse3( const FMATRIX* a, FMATRIX* ai, DOUBLE* det )
    [OSS] 行列の逆行列計算(LAPACK使用)

    Params:
    - [in]   a     逆行列を計算するNxN行列A
    - [out]  ai     A の逆行列
    - [out]  det    A の行列式
                       計算不要な場合はNULLを指定可能。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE LU分解の結果、因子Uが特異になったため計算出来なかった。
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_inverse3(a, ai, det):
    r"""INT FVALGAPI fnFIE_mat_inverse3( const FMATRIX* a, FMATRIX* ai, DOUBLE* det )
    [OSS] 行列の逆行列計算(LAPACK使用)

    Params:
    - [in]   a     逆行列を計算するNxN行列A
    - [out]  ai     A の逆行列
    - [out]  det    A の行列式
                       計算不要な場合はNULLを指定可能。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE LU分解の結果、因子Uが特異になったため計算出来なかった。
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_inverse3(a, ai, det)

def fnFIE_mat_pseudo_inverse(a, ai, threshold, rank) -> Any:
    r"""INT FVALGAPI fnFIE_mat_pseudo_inverse( const FMATRIX* a, FMATRIX* ai, DOUBLE threshold, INT* rank )
    [OSS] 行列の擬似逆行列計算(LAPACK使用)

    Params:
    - [in]   a          擬似逆行列を計算する行列（サイズ：MxN）
    - [out]  ai          a の擬似逆行列（サイズ：NxM）
        - [in]   threshold  擬似行列計算する際に特異値の閾値
        - [out]  rank        a のランク。NULLを指定可能。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_pseudo_inverse(a, ai, threshold, rank=None):
    r"""INT FVALGAPI fnFIE_mat_pseudo_inverse( const FMATRIX* a, FMATRIX* ai, DOUBLE threshold, INT* rank )
    [OSS] 行列の擬似逆行列計算(LAPACK使用)

    Params:
    - [in]   a          擬似逆行列を計算する行列（サイズ：MxN）
    - [out]  ai          a の擬似逆行列（サイズ：NxM）
        - [in]   threshold  擬似行列計算する際に特異値の閾値
        - [out]  rank        a のランク。NULLを指定可能。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE    ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_pseudo_inverse(a, ai, threshold, rank)

def fnFIE_mat_linsolve(a, x, b, method, residual, rcond, rank) -> Any:
    r"""INT FVALGAPI fnFIE_mat_linsolve( const FMATRIX* a, FVECTOR* x, const FVECTOR* b, INT method, DOUBLE* residual, DOUBLE rcond, INT* rank )
    [OSS] 連立一次方程式の計算

    Params:
    - [in]   a         MxN 係数行列 $\bf{A}$
    - [out]  x         解ベクトル $\bf{x}$
                            x の次元はNでなければいけません。
    - [in]   b         右辺ベクトル $\bf{b}$
                            b の次元はMでなければいけません。
    - [in]   method    解法。下記のいずれかを指定
                           - 0 : QR または LQ 分解を使用した手法により計算
                           - 1 : SVD を使用した手法により計算
    - [out]  residual  誤差二乗和
                            a->row <=  a->col の場合、本パラメータは使用されません。
                           不要な場合はNULLを指定してください。
    - [in]   rcond     ゼロ判定閾値
                            method != 1 の場合本パラメータは無視されます。
                           ランク計算時に 特異値 sigma[i] <= rcond*sigma[0] の値をゼロと見なします。
                           rcond<0.0 の値が指定されたときは、max(sigma) * eps の値を使用します。
    - [out]  rank      行列  a のランク
                           不要な場合はNULLを指定してください。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_linsolve(a, x, b, method, residual=None, rcond=-1.0, rank=None):
    r"""INT FVALGAPI fnFIE_mat_linsolve( const FMATRIX* a, FVECTOR* x, const FVECTOR* b, INT method, DOUBLE* residual, DOUBLE rcond, INT* rank )
    [OSS] 連立一次方程式の計算

    Params:
    - [in]   a         MxN 係数行列 $\bf{A}$
    - [out]  x         解ベクトル $\bf{x}$
                            x の次元はNでなければいけません。
    - [in]   b         右辺ベクトル $\bf{b}$
                            b の次元はMでなければいけません。
    - [in]   method    解法。下記のいずれかを指定
                           - 0 : QR または LQ 分解を使用した手法により計算
                           - 1 : SVD を使用した手法により計算
    - [out]  residual  誤差二乗和
                            a->row <=  a->col の場合、本パラメータは使用されません。
                           不要な場合はNULLを指定してください。
    - [in]   rcond     ゼロ判定閾値
                            method != 1 の場合本パラメータは無視されます。
                           ランク計算時に 特異値 sigma[i] <= rcond*sigma[0] の値をゼロと見なします。
                           rcond<0.0 の値が指定されたときは、max(sigma) * eps の値を使用します。
    - [out]  rank      行列  a のランク
                           不要な場合はNULLを指定してください。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_linsolve(a, x, b, method, residual, rcond, rank)

def fnFIE_mat_linsolve2(a, x, b, method, residuals, rcond, rank) -> Any:
    r"""INT FVALGAPI fnFIE_mat_linsolve2( const FMATRIX* a, FMATRIX* x, const FMATRIX* b, INT method, DOUBLE* residuals, DOUBLE rcond, INT* rank )
    [OSS] 連立一次方程式の計算

    Params:
    - [in]   a         MxN 係数行列 $\bf{A}$
    - [out]  x         NxNRHS 解行列 $\bf{X}$
    - [in]   b         MxNRHS 右辺行列 $\bf{B}$
    - [in]   method    解法。下記のいずれかを指定
                           - 0 : QR または LQ 分解を使用した手法により計算
                           - 1 : SVD を使用した手法により計算
    - [out]  residuals 誤差二乗和
                            a->row <=  a->col の場合、本パラメータは使用されません。
                           不要な場合はNULLを指定してください。
                           そうでない場合は、NRHS * sizeof(DOUBLE) byte のバッファが必要です。
    - [in]   rcond     ゼロ判定閾値
                            method != 1 の場合本パラメータは無視されます。
                           ランク計算時に 特異値 sigma[i] <= rcond*sigma[0] の値をゼロと見なします。
                           rcond<0.0 の値が指定されたときは、max(sigma) * eps の値を使用します。
    - [out]  rank      行列  a のランク
                           不要な場合はNULLを指定してください。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def mat_linsolve2(a, x, b, method, residuals, rcond=-1.0, rank=None):
    r"""INT FVALGAPI fnFIE_mat_linsolve2( const FMATRIX* a, FMATRIX* x, const FMATRIX* b, INT method, DOUBLE* residuals, DOUBLE rcond, INT* rank )
    [OSS] 連立一次方程式の計算

    Params:
    - [in]   a         MxN 係数行列 $\bf{A}$
    - [out]  x         NxNRHS 解行列 $\bf{X}$
    - [in]   b         MxNRHS 右辺行列 $\bf{B}$
    - [in]   method    解法。下記のいずれかを指定
                           - 0 : QR または LQ 分解を使用した手法により計算
                           - 1 : SVD を使用した手法により計算
    - [out]  residuals 誤差二乗和
                            a->row <=  a->col の場合、本パラメータは使用されません。
                           不要な場合はNULLを指定してください。
                           そうでない場合は、NRHS * sizeof(DOUBLE) byte のバッファが必要です。
    - [in]   rcond     ゼロ判定閾値
                            method != 1 の場合本パラメータは無視されます。
                           ランク計算時に 特異値 sigma[i] <= rcond*sigma[0] の値をゼロと見なします。
                           rcond<0.0 の値が指定されたときは、max(sigma) * eps の値を使用します。
    - [out]  rank      行列  a のランク
                           不要な場合はNULLを指定してください。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_mat_linsolve2(a, x, b, method, residuals, rcond, rank)

def fnFIE_color_convert(src, src_color_space, dst, dst_color_space, cs_table) -> Any:
    r"""INT FVALGAPI fnFIE_color_convert( const FHANDLE src, enum f_color_space src_color_space, FHANDLE dst, enum f_color_space dst_color_space, const FHANDLE cs_table )
    色空間変換処理

    Params:
    - [in]  src                 入力画像オブジェクト(type:uc8,double)
    - [in]  src_color_space     入力画像オブジェクトの色空間
                                - F_CS_RGB
                                - F_CS_GRAY
                                - F_CS_XYZ
                                - F_CS_YUV
                                - F_CS_YIQ
                                - F_CS_I1I2I3
                                - F_CS_HSV_SMITH
                                - F_CS_HSV_JOBLOVE
                                - F_CS_LAB
                                - F_CS_HSV_FAST
                                - F_CS_LAB_FAST
    - [out] dst                 出力画像オブジェクト(type:uc8,double)
    - [in]  dst_color_space     出力画像オブジェクトの色空間
                                - F_CS_RGB
                                - F_CS_GRAY
                                - F_CS_XYZ
                                - F_CS_YUV
                                - F_CS_YIQ
                                - F_CS_I1I2I3
                                - F_CS_HSV_SMITH
                                - F_CS_HSV_JOBLOVE
                                - F_CS_LAB
                                - F_CS_HSV_FAST
                                - F_CS_LAB_FAST
    - [in]  cs_table            FIEオブジェクト（数値テーブル）のハンドル
                                    必要がない場合は NULL を指定

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された。
                                    不正な色空間を指定した。
                                    不正な数値テーブルが渡された。
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def color_convert(src, src_color_space, dst, dst_color_space, cs_table):
    r"""INT FVALGAPI fnFIE_color_convert( const FHANDLE src, enum f_color_space src_color_space, FHANDLE dst, enum f_color_space dst_color_space, const FHANDLE cs_table )
    色空間変換処理

    Params:
    - [in]  src                 入力画像オブジェクト(type:uc8,double)
    - [in]  src_color_space     入力画像オブジェクトの色空間
                                - F_CS_RGB
                                - F_CS_GRAY
                                - F_CS_XYZ
                                - F_CS_YUV
                                - F_CS_YIQ
                                - F_CS_I1I2I3
                                - F_CS_HSV_SMITH
                                - F_CS_HSV_JOBLOVE
                                - F_CS_LAB
                                - F_CS_HSV_FAST
                                - F_CS_LAB_FAST
    - [out] dst                 出力画像オブジェクト(type:uc8,double)
    - [in]  dst_color_space     出力画像オブジェクトの色空間
                                - F_CS_RGB
                                - F_CS_GRAY
                                - F_CS_XYZ
                                - F_CS_YUV
                                - F_CS_YIQ
                                - F_CS_I1I2I3
                                - F_CS_HSV_SMITH
                                - F_CS_HSV_JOBLOVE
                                - F_CS_LAB
                                - F_CS_HSV_FAST
                                - F_CS_LAB_FAST
    - [in]  cs_table            FIEオブジェクト（数値テーブル）のハンドル
                                    必要がない場合は NULL を指定

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された。
                                    不正な色空間を指定した。
                                    不正な数値テーブルが渡された。
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_color_convert(src, src_color_space, dst, dst_color_space, cs_table)

def fnFIE_open_color_convert_mathtbl() -> Any:
    r"""FHANDLE FVALGAPI fnFIE_open_color_convert_mathtbl( VOID )
    数値テーブルの生成

    Params:


    Returns:
    - FIEオブジェクトのハンドルを返します。
                ライセンスエラー、未初期化エラー、またはメモリ不足などで失敗した場合は、NULLを返します。
    """
    raise NotImplementedError

def open_color_convert_mathtbl():
    r"""FHANDLE FVALGAPI fnFIE_open_color_convert_mathtbl( VOID )
    数値テーブルの生成

    Params:


    Returns:
    - FIEオブジェクトのハンドルを返します。
                ライセンスエラー、未初期化エラー、またはメモリ不足などで失敗した場合は、NULLを返します。
    """

    return _fie.fnFIE_open_color_convert_mathtbl()

def fnFIE_close_color_convert_mathtbl(hcs_table) -> Any:
    r"""void fnFIE_close_color_convert_mathtbl( FHANDLE hcs_table )
    数値テーブルの破棄

    Params:
    - [in]  hcs_table FIEオブジェクトのハンドル

    Returns:
    """
    raise NotImplementedError

def close_color_convert_mathtbl(hcs_table):
    r"""void fnFIE_close_color_convert_mathtbl( FHANDLE hcs_table )
    数値テーブルの破棄

    Params:
    - [in]  hcs_table FIEオブジェクトのハンドル

    Returns:
    """

    return _fie.fnFIE_close_color_convert_mathtbl(hcs_table)

def fnFIE_color_convert_copy_mathtbl(htbl) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_color_convert_copy_mathtbl( FHANDLE htbl )
    数値テーブルのコピー

    Params:
    - [in] htbl コピーする数値テーブルのハンドル

    Returns:
    - 正常終了時にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """
    raise NotImplementedError

def color_convert_copy_mathtbl(htbl):
    r"""FHANDLE FVALGAPI fnFIE_color_convert_copy_mathtbl( FHANDLE htbl )
    数値テーブルのコピー

    Params:
    - [in] htbl コピーする数値テーブルのハンドル

    Returns:
    - 正常終了時にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """

    return _fie.fnFIE_color_convert_copy_mathtbl(htbl)

def fnFIE_img_hsv_to_gray(hsrc, hdst, hue_base, hue_range, sat_low, sat_high) -> Any:
    r"""INT FVALGAPI fnFIE_img_hsv_to_gray( FHANDLE hsrc, FHANDLE hdst, DOUBLE hue_base, DOUBLE hue_range, DOUBLE sat_low, DOUBLE sat_high )
    色彩特徴量画像の生成（HSV色空間基準）

    Params:
    - [in]  hsrc        入力画像のハンドル（ type : uc8, s16, us16, double, rgbq, float, rgbtri)( channel : 3 ）
    - [out] hdst        出力画像のハンドル（ type : uc8, s16, us16, double, float)( channel : 1 ）
    - [in]  hue_base    色相基準（ 0 <=  hue_base < 360 ）単位：度
    - [in]  hue_range   色相範囲（ 0 <=  hue_range <= 180 ） 単位：度
    - [in]  sat_low     彩度下限（ 0 <=  sat_low <= 255）
    - [in]  sat_high    彩度上限（ 0 <=  sat_high <= 255）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトを渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_hsv_to_gray(hsrc, hdst, hue_base, hue_range=30, sat_low=0, sat_high=255):
    r"""INT FVALGAPI fnFIE_img_hsv_to_gray( FHANDLE hsrc, FHANDLE hdst, DOUBLE hue_base, DOUBLE hue_range, DOUBLE sat_low, DOUBLE sat_high )
    色彩特徴量画像の生成（HSV色空間基準）

    Params:
    - [in]  hsrc        入力画像のハンドル（ type : uc8, s16, us16, double, rgbq, float, rgbtri)( channel : 3 ）
    - [out] hdst        出力画像のハンドル（ type : uc8, s16, us16, double, float)( channel : 1 ）
    - [in]  hue_base    色相基準（ 0 <=  hue_base < 360 ）単位：度
    - [in]  hue_range   色相範囲（ 0 <=  hue_range <= 180 ） 単位：度
    - [in]  sat_low     彩度下限（ 0 <=  sat_low <= 255）
    - [in]  sat_high    彩度上限（ 0 <=  sat_high <= 255）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトを渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_hsv_to_gray(hsrc, hdst, hue_base, hue_range, sat_low, sat_high)

def fnFIE_polar_trans_img(hsrc, hdst, origin_in, width, height, origin_out, radius, start_angle, range_angle, coord_mode, back_clear, sampling_mode) -> Any:
    r"""INT FVALGAPI fnFIE_polar_trans_img( const FHANDLE hsrc, FHANDLE hdst, DPNT_T origin_in, DOUBLE width, DOUBLE height, DPNT_T origin_out, DOUBLE radius, DOUBLE start_angle, DOUBLE range_angle, enum f_coord_mode coord_mode, INT back_clear, enum f_sampling_mode sampling_mode )
    画像間の極座標変換

    Params:
    - [in]  hsrc            入力画像( type : bin, uc8, us16, double )
    - [out] hdst            出力画像( type : bin, uc8, us16, double )
    - [in]  origin_in       入力側での処理対象領域の開始座標
    - [in]  width           入力側での処理対象領域の幅
    - [in]  height          入力側での処理対象領域の高さ
    - [in]  origin_out      出力側での円板の回転中心
    - [in]  radius          出力側での円板の半径
    - [in]  start_angle     出力側での処理開始角度
    - [in]  range_angle     出力側での角度の処理範囲
    - [in]  coord_mode      入力側での回転中心位置
                            - F_PT_UPPER    処理対象領域の右上座標
                            - F_PT_LOWER    処理対象領域の左下座標
                            - F_PT_LEFT 処理対象領域の左上座標
                            - F_PT_RIGHT    処理対象領域の右下座標
    - [in]  back_clear      出力画像の背景処理方法
                            - TRUE   領域外になる画素は０クリア
                            - FALSE  領域外になる画素は処理しない
    - [in]  sampling_mode   濃度補間法
                            - F_SAMPLING_NN       最近傍法により濃度補間を行う
                            - F_SAMPLING_BILINEAR 共一次線形補間法により濃度補間を行う
                            - F_SAMPLING_CUBIC    三次畳み込み法により濃度補間を行う

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_NOMEMORY        メモリ不足（F_SAMPLING_CUBICを指定した場合のみ）
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def polar_trans_img(hsrc, hdst, origin_in, width, height, origin_out, radius, start_angle=0.0, range_angle=2 * _math.pi, coord_mode=F_PT_LOWER, back_clear=True, sampling_mode=F_SAMPLING_NN):
    r"""INT FVALGAPI fnFIE_polar_trans_img( const FHANDLE hsrc, FHANDLE hdst, DPNT_T origin_in, DOUBLE width, DOUBLE height, DPNT_T origin_out, DOUBLE radius, DOUBLE start_angle, DOUBLE range_angle, enum f_coord_mode coord_mode, INT back_clear, enum f_sampling_mode sampling_mode )
    画像間の極座標変換

    Params:
    - [in]  hsrc            入力画像( type : bin, uc8, us16, double )
    - [out] hdst            出力画像( type : bin, uc8, us16, double )
    - [in]  origin_in       入力側での処理対象領域の開始座標
    - [in]  width           入力側での処理対象領域の幅
    - [in]  height          入力側での処理対象領域の高さ
    - [in]  origin_out      出力側での円板の回転中心
    - [in]  radius          出力側での円板の半径
    - [in]  start_angle     出力側での処理開始角度
    - [in]  range_angle     出力側での角度の処理範囲
    - [in]  coord_mode      入力側での回転中心位置
                            - F_PT_UPPER    処理対象領域の右上座標
                            - F_PT_LOWER    処理対象領域の左下座標
                            - F_PT_LEFT 処理対象領域の左上座標
                            - F_PT_RIGHT    処理対象領域の右下座標
    - [in]  back_clear      出力画像の背景処理方法
                            - TRUE   領域外になる画素は０クリア
                            - FALSE  領域外になる画素は処理しない
    - [in]  sampling_mode   濃度補間法
                            - F_SAMPLING_NN       最近傍法により濃度補間を行う
                            - F_SAMPLING_BILINEAR 共一次線形補間法により濃度補間を行う
                            - F_SAMPLING_CUBIC    三次畳み込み法により濃度補間を行う

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_NOMEMORY        メモリ不足（F_SAMPLING_CUBICを指定した場合のみ）
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_polar_trans_img(hsrc, hdst, origin_in, width, height, origin_out, radius, start_angle, range_angle, coord_mode, back_clear, sampling_mode)

def fnFIE_polar_trans_img_inv(hsrc, hdst, origin_in, radius, start_angle, range_angle, origin_out, width, height, coord_mode, back_clear, sampling_mode) -> Any:
    r"""INT FVALGAPI fnFIE_polar_trans_img_inv( const FHANDLE hsrc, FHANDLE hdst, DPNT_T origin_in, DOUBLE radius, DOUBLE start_angle, DOUBLE range_angle, DPNT_T origin_out, DOUBLE width, DOUBLE height, enum f_coord_mode coord_mode, INT back_clear, enum f_sampling_mode sampling_mode )
    画像間の逆極座標変換

    Params:
    - [in]  hsrc            入力画像( type : bin, uc8, us16, double )
    - [out] hdst            出力画像( type : bin, uc8, us16, double )
    - [in]  origin_in       入力側での処理対象領域の開始座標
    - [in]  radius          入力側での円板の半径
    - [in]  start_angle     入力側での処理開始角度
    - [in]  range_angle     入力側での角度の処理範囲
    - [in]  origin_out      出力側での円板の回転中心
    - [in]  width           出力側での処理対象領域の幅
    - [in]  height          出力側での処理対象領域の高さ
    - [in]  coord_mode      出力側での回転中心位置
                            - F_PT_UPPER    処理対象領域の右上座標
                            - F_PT_LOWER    処理対象領域の左下座標
                            - F_PT_LEFT 処理対象領域の左上座標
                            - F_PT_RIGHT    処理対象領域の右下座標
    - [in]  back_clear      出力画像の背景処理方法
                            - TRUE   領域外になる画素は０クリア
                            - FALSE  領域外になる画素は処理しない
    - [in]  sampling_mode   濃度補間法
                            - F_SAMPLING_NN       最近傍法により濃度補間を行う
                            - F_SAMPLING_BILINEAR 共一次線形補間法により濃度補間を行う
                            - F_SAMPLING_CUBIC    三次畳み込み法により濃度補間を行う

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_NOMEMORY        メモリ不足（F_SAMPLING_CUBICを指定した場合のみ）
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def polar_trans_img_inv(hsrc, hdst, origin_in, radius, start_angle, range_angle, origin_out, width, height, coord_mode=F_PT_LOWER, back_clear=True, sampling_mode=F_SAMPLING_NN):
    r"""INT FVALGAPI fnFIE_polar_trans_img_inv( const FHANDLE hsrc, FHANDLE hdst, DPNT_T origin_in, DOUBLE radius, DOUBLE start_angle, DOUBLE range_angle, DPNT_T origin_out, DOUBLE width, DOUBLE height, enum f_coord_mode coord_mode, INT back_clear, enum f_sampling_mode sampling_mode )
    画像間の逆極座標変換

    Params:
    - [in]  hsrc            入力画像( type : bin, uc8, us16, double )
    - [out] hdst            出力画像( type : bin, uc8, us16, double )
    - [in]  origin_in       入力側での処理対象領域の開始座標
    - [in]  radius          入力側での円板の半径
    - [in]  start_angle     入力側での処理開始角度
    - [in]  range_angle     入力側での角度の処理範囲
    - [in]  origin_out      出力側での円板の回転中心
    - [in]  width           出力側での処理対象領域の幅
    - [in]  height          出力側での処理対象領域の高さ
    - [in]  coord_mode      出力側での回転中心位置
                            - F_PT_UPPER    処理対象領域の右上座標
                            - F_PT_LOWER    処理対象領域の左下座標
                            - F_PT_LEFT 処理対象領域の左上座標
                            - F_PT_RIGHT    処理対象領域の右下座標
    - [in]  back_clear      出力画像の背景処理方法
                            - TRUE   領域外になる画素は０クリア
                            - FALSE  領域外になる画素は処理しない
    - [in]  sampling_mode   濃度補間法
                            - F_SAMPLING_NN       最近傍法により濃度補間を行う
                            - F_SAMPLING_BILINEAR 共一次線形補間法により濃度補間を行う
                            - F_SAMPLING_CUBIC    三次畳み込み法により濃度補間を行う

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_NOMEMORY        メモリ不足（F_SAMPLING_CUBICを指定した場合のみ）
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_polar_trans_img_inv(hsrc, hdst, origin_in, radius, start_angle, range_angle, origin_out, width, height, coord_mode, back_clear, sampling_mode)

def fnFIE_polar_trans_map(hmap, origin_in, width, height, origin_out, radius, start_angle, range_angle, coord_mode) -> Any:
    r"""INT FVALGAPI fnFIE_polar_trans_map( FHANDLE hmap, DPNT_T origin_in, DOUBLE width, DOUBLE height, DPNT_T origin_out, DOUBLE radius, DOUBLE start_angle, DOUBLE range_angle, enum f_coord_mode coord_mode )
    極座標変換マップの作成

    Params:
    - [out] hmap            変換マップ( type : double, float / channel : 2 )
    - [in]  origin_in       入力側での処理対象領域の開始座標
    - [in]  width           入力側での処理対象領域の幅
    - [in]  height          入力側での処理対象領域の高さ
    - [in]  origin_out      出力側での円板の回転中心
    - [in]  radius          出力側での円板の半径
    - [in]  start_angle     出力側での処理開始角度
    - [in]  range_angle     出力側での角度の処理範囲
    - [in]  coord_mode      入力側での回転中心位置
                            - F_PT_UPPER    処理対象領域の右上座標
                            - F_PT_LOWER    処理対象領域の左下座標
                            - F_PT_LEFT 処理対象領域の左上座標
                            - F_PT_RIGHT    処理対象領域の右下座標

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def polar_trans_map(hmap, origin_in, width, height, origin_out, radius, start_angle=0.0, range_angle=2 * _math.pi, coord_mode=F_PT_LOWER):
    r"""INT FVALGAPI fnFIE_polar_trans_map( FHANDLE hmap, DPNT_T origin_in, DOUBLE width, DOUBLE height, DPNT_T origin_out, DOUBLE radius, DOUBLE start_angle, DOUBLE range_angle, enum f_coord_mode coord_mode )
    極座標変換マップの作成

    Params:
    - [out] hmap            変換マップ( type : double, float / channel : 2 )
    - [in]  origin_in       入力側での処理対象領域の開始座標
    - [in]  width           入力側での処理対象領域の幅
    - [in]  height          入力側での処理対象領域の高さ
    - [in]  origin_out      出力側での円板の回転中心
    - [in]  radius          出力側での円板の半径
    - [in]  start_angle     出力側での処理開始角度
    - [in]  range_angle     出力側での角度の処理範囲
    - [in]  coord_mode      入力側での回転中心位置
                            - F_PT_UPPER    処理対象領域の右上座標
                            - F_PT_LOWER    処理対象領域の左下座標
                            - F_PT_LEFT 処理対象領域の左上座標
                            - F_PT_RIGHT    処理対象領域の右下座標

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_polar_trans_map(hmap, origin_in, width, height, origin_out, radius, start_angle, range_angle, coord_mode)

def fnFIE_polar_trans_map_inv(hmap, origin_in, radius, start_angle, range_angle, origin_out, width, height, coord_mode) -> Any:
    r"""INT FVALGAPI fnFIE_polar_trans_map_inv( FHANDLE hmap, DPNT_T origin_in, DOUBLE radius, DOUBLE start_angle, DOUBLE range_angle, DPNT_T origin_out, DOUBLE width, DOUBLE height, enum f_coord_mode coord_mode )
    逆極座標変換マップの作成

    Params:
    - [out] hmap            変換マップ( type : double, float / channel : 2 )
    - [in]  origin_in       入力側での処理対象領域の開始座標
    - [in]  radius          入力側での円板の半径
    - [in]  start_angle     入力側での処理開始角度
    - [in]  range_angle     入力側での角度の処理範囲
    - [in]  origin_out      出力側での円板の回転中心
    - [in]  width           出力側での処理対象領域の幅
    - [in]  height          出力側での処理対象領域の高さ
    - [in]  coord_mode      出力側での回転中心位置
                            - F_PT_UPPER    処理対象領域の右上座標
                            - F_PT_LOWER    処理対象領域の左下座標
                            - F_PT_LEFT 処理対象領域の左上座標
                            - F_PT_RIGHT    処理対象領域の右下座標

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def polar_trans_map_inv(hmap, origin_in, radius, start_angle, range_angle, origin_out, width, height, coord_mode=F_PT_LOWER):
    r"""INT FVALGAPI fnFIE_polar_trans_map_inv( FHANDLE hmap, DPNT_T origin_in, DOUBLE radius, DOUBLE start_angle, DOUBLE range_angle, DPNT_T origin_out, DOUBLE width, DOUBLE height, enum f_coord_mode coord_mode )
    逆極座標変換マップの作成

    Params:
    - [out] hmap            変換マップ( type : double, float / channel : 2 )
    - [in]  origin_in       入力側での処理対象領域の開始座標
    - [in]  radius          入力側での円板の半径
    - [in]  start_angle     入力側での処理開始角度
    - [in]  range_angle     入力側での角度の処理範囲
    - [in]  origin_out      出力側での円板の回転中心
    - [in]  width           出力側での処理対象領域の幅
    - [in]  height          出力側での処理対象領域の高さ
    - [in]  coord_mode      出力側での回転中心位置
                            - F_PT_UPPER    処理対象領域の右上座標
                            - F_PT_LOWER    処理対象領域の左下座標
                            - F_PT_LEFT 処理対象領域の左上座標
                            - F_PT_RIGHT    処理対象領域の右下座標

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_INVALID_IMAGE   不正な画像オブジェクトが渡された
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_polar_trans_map_inv(hmap, origin_in, radius, start_angle, range_angle, origin_out, width, height, coord_mode)

def fnFIE_polar_trans_pnt(psrc, pdst, num_pnt, origin_in, width, height, origin_out, radius, start_angle, range_angle, coord_mode) -> Any:
    r"""INT FVALGAPI fnFIE_polar_trans_pnt( const DPNT_T* psrc, DPNT_T* pdst, INT num_pnt, DPNT_T origin_in, DOUBLE width, DOUBLE height, DPNT_T origin_out, DOUBLE radius, DOUBLE start_angle, DOUBLE range_angle, enum f_coord_mode coord_mode )
    点群間の極座標変換

    Params:
    - [in]  psrc            入力座標群配列の先頭ポインタ
    - [out] pdst            出力座標群配列の先頭ポインタ
    - [in]  num_pnt         座標数
    - [in]  origin_in       入力側での処理対象領域の開始座標
    - [in]  width           入力側での処理対象領域の幅
    - [in]  height          入力側での処理対象領域の高さ
    - [in]  origin_out      出力側での円板の回転中心
    - [in]  radius          出力側での円板の半径
    - [in]  start_angle     出力側での処理開始角度
    - [in]  range_angle     出力側での角度の処理範囲
    - [in]  coord_mode      入力側での回転中心位置
                            - F_PT_UPPER    処理対象領域の右上座標
                            - F_PT_LOWER    処理対象領域の左下座標
                            - F_PT_LEFT 処理対象領域の左上座標
                            - F_PT_RIGHT    処理対象領域の右下座標

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def polar_trans_pnt(psrc, pdst, num_pnt, origin_in, width, height, origin_out, radius, start_angle=0.0, range_angle=2 * _math.pi, coord_mode=F_PT_LOWER):
    r"""INT FVALGAPI fnFIE_polar_trans_pnt( const DPNT_T* psrc, DPNT_T* pdst, INT num_pnt, DPNT_T origin_in, DOUBLE width, DOUBLE height, DPNT_T origin_out, DOUBLE radius, DOUBLE start_angle, DOUBLE range_angle, enum f_coord_mode coord_mode )
    点群間の極座標変換

    Params:
    - [in]  psrc            入力座標群配列の先頭ポインタ
    - [out] pdst            出力座標群配列の先頭ポインタ
    - [in]  num_pnt         座標数
    - [in]  origin_in       入力側での処理対象領域の開始座標
    - [in]  width           入力側での処理対象領域の幅
    - [in]  height          入力側での処理対象領域の高さ
    - [in]  origin_out      出力側での円板の回転中心
    - [in]  radius          出力側での円板の半径
    - [in]  start_angle     出力側での処理開始角度
    - [in]  range_angle     出力側での角度の処理範囲
    - [in]  coord_mode      入力側での回転中心位置
                            - F_PT_UPPER    処理対象領域の右上座標
                            - F_PT_LOWER    処理対象領域の左下座標
                            - F_PT_LEFT 処理対象領域の左上座標
                            - F_PT_RIGHT    処理対象領域の右下座標

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_polar_trans_pnt(psrc, pdst, num_pnt, origin_in, width, height, origin_out, radius, start_angle, range_angle, coord_mode)

def fnFIE_polar_trans_pnt_inv(psrc, pdst, num_pnt, origin_in, radius, start_angle, range_angle, origin_out, width, height, coord_mode) -> Any:
    r"""INT FVALGAPI fnFIE_polar_trans_pnt_inv( const DPNT_T* psrc, DPNT_T* pdst, INT num_pnt, DPNT_T origin_in, DOUBLE radius, DOUBLE start_angle, DOUBLE range_angle, DPNT_T origin_out, DOUBLE width, DOUBLE height, enum f_coord_mode coord_mode )
    点群間の逆極座標変換

    Params:
    - [in]  psrc            入力座標群配列の先頭ポインタ
    - [out] pdst            出力座標群配列の先頭ポインタ
    - [in]  num_pnt         座標数
    - [in]  origin_in       入力側での処理対象領域の開始座標
    - [in]  radius          入力側での円板の半径
    - [in]  start_angle     入力側での処理開始角度
    - [in]  range_angle     入力側での角度の処理範囲
    - [in]  origin_out      出力側での円板の回転中心
    - [in]  width           出力側での処理対象領域の幅
    - [in]  height          出力側での処理対象領域の高さ
    - [in]  coord_mode      出力側での回転中心位置
                            - F_PT_UPPER    処理対象領域の右上座標
                            - F_PT_LOWER    処理対象領域の左下座標
                            - F_PT_LEFT 処理対象領域の左上座標
                            - F_PT_RIGHT    処理対象領域の右下座標

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def polar_trans_pnt_inv(psrc, pdst, num_pnt, origin_in, radius, start_angle, range_angle, origin_out, width, height, coord_mode=F_PT_LOWER):
    r"""INT FVALGAPI fnFIE_polar_trans_pnt_inv( const DPNT_T* psrc, DPNT_T* pdst, INT num_pnt, DPNT_T origin_in, DOUBLE radius, DOUBLE start_angle, DOUBLE range_angle, DPNT_T origin_out, DOUBLE width, DOUBLE height, enum f_coord_mode coord_mode )
    点群間の逆極座標変換

    Params:
    - [in]  psrc            入力座標群配列の先頭ポインタ
    - [out] pdst            出力座標群配列の先頭ポインタ
    - [in]  num_pnt         座標数
    - [in]  origin_in       入力側での処理対象領域の開始座標
    - [in]  radius          入力側での円板の半径
    - [in]  start_angle     入力側での処理開始角度
    - [in]  range_angle     入力側での角度の処理範囲
    - [in]  origin_out      出力側での円板の回転中心
    - [in]  width           出力側での処理対象領域の幅
    - [in]  height          出力側での処理対象領域の高さ
    - [in]  coord_mode      出力側での回転中心位置
                            - F_PT_UPPER    処理対象領域の右上座標
                            - F_PT_LOWER    処理対象領域の左下座標
                            - F_PT_LEFT 処理対象領域の左上座標
                            - F_PT_RIGHT    処理対象領域の右下座標

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_polar_trans_pnt_inv(psrc, pdst, num_pnt, origin_in, radius, start_angle, range_angle, origin_out, width, height, coord_mode)

def fnFIE_radon(hsrc, hdst, start_angle, range_angle, sampling_mode) -> Any:
    r"""INT FVALGAPI fnFIE_radon( FHANDLE hsrc, FHANDLE hdst, DOUBLE start_angle, DOUBLE range_angle, enum f_sampling_mode sampling_mode )
    ラドン変換

    Params:
    - [in]  hsrc            入力画像( type: uc8, s16, us16, float, double )
    - [out] hdst            出力画像( type: uc8, s16, us16, float, double )
    - [in]  start_angle     処理開始角度
    - [in]  range_angle     角度の処理範囲
    - [in]  sampling_mode   画素値補間方法

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像ハンドル
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def radon(hsrc, hdst, start_angle=0.0, range_angle=2 * _math.pi, sampling_mode=F_SAMPLING_NN):
    r"""INT FVALGAPI fnFIE_radon( FHANDLE hsrc, FHANDLE hdst, DOUBLE start_angle, DOUBLE range_angle, enum f_sampling_mode sampling_mode )
    ラドン変換

    Params:
    - [in]  hsrc            入力画像( type: uc8, s16, us16, float, double )
    - [out] hdst            出力画像( type: uc8, s16, us16, float, double )
    - [in]  start_angle     処理開始角度
    - [in]  range_angle     角度の処理範囲
    - [in]  sampling_mode   画素値補間方法

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像ハンドル
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_radon(hsrc, hdst, start_angle, range_angle, sampling_mode)

def fnFIE_projection_rot_rectangle(hsrc, hdst, center, direction, start_angle, pitch_angle, samp_num_t, pitch_t, pitch_s, samp_mode) -> Any:
    r"""INT FVALGAPI fnFIE_projection_rot_rectangle( FHANDLE hsrc, FHANDLE hdst, DPNT_T center, INT direction, DOUBLE start_angle, DOUBLE pitch_angle, INT samp_num_t, DOUBLE pitch_t, DOUBLE pitch_s, enum f_sampling_mode samp_mode )
    回転する矩形領域内での濃度投影

    Params:
    - [in]  hsrc            入力画像( type: uc8, s16, us16, float, double )
    - [out] hdst            出力画像( type: uc8, s16, us16, float, double )
    - [in]  center          矩形の中心座標
    - [in]  direction       投影結果の出力方向
    - [in]  start_angle     θ 方向のサンプリング開始角度
    - [in]  pitch_angle     θ 方向のサンプリング間隔
    - [in]  samp_num_t      t 方向のサンプリング数 ( > 0 )
    - [in]  pitch_t         t 方向のサンプリング間隔 ( > 0 )
    - [in]  pitch_s         s 方向のサンプリング間隔 ( > 0 )
    - [in]  samp_mode       画素値補間方法

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像ハンドル
    - F_ERR_INVALID_PARAM   不正なパラメータ
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def projection_rot_rectangle(hsrc, hdst, center, direction=0, start_angle=0.0, pitch_angle=1.0, samp_num_t=1000, pitch_t=1.0, pitch_s=1.0, samp_mode=F_SAMPLING_NN):
    r"""INT FVALGAPI fnFIE_projection_rot_rectangle( FHANDLE hsrc, FHANDLE hdst, DPNT_T center, INT direction, DOUBLE start_angle, DOUBLE pitch_angle, INT samp_num_t, DOUBLE pitch_t, DOUBLE pitch_s, enum f_sampling_mode samp_mode )
    回転する矩形領域内での濃度投影

    Params:
    - [in]  hsrc            入力画像( type: uc8, s16, us16, float, double )
    - [out] hdst            出力画像( type: uc8, s16, us16, float, double )
    - [in]  center          矩形の中心座標
    - [in]  direction       投影結果の出力方向
    - [in]  start_angle     θ 方向のサンプリング開始角度
    - [in]  pitch_angle     θ 方向のサンプリング間隔
    - [in]  samp_num_t      t 方向のサンプリング数 ( > 0 )
    - [in]  pitch_t         t 方向のサンプリング間隔 ( > 0 )
    - [in]  pitch_s         s 方向のサンプリング間隔 ( > 0 )
    - [in]  samp_mode       画素値補間方法

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像ハンドル
    - F_ERR_INVALID_PARAM   不正なパラメータ
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_projection_rot_rectangle(hsrc, hdst, center, direction, start_angle, pitch_angle, samp_num_t, pitch_t, pitch_s, samp_mode)

def fnFIE_barcode_execute(fimg, fBOObj) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_execute( FHANDLE fimg, FHANDLE fBOObj )
    バーコード認識の実行

    Params:
    - [in]      fimg        入力画像オブジェクトハンドル ( type: uc8 )
    - [in,out]  fBOObj      バーコードオブジェクトハンドル

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_IMAGE           不正な画像ハンドルが渡されたため、異常終了。画像の種類やチャネル数が違う場合はこのエラーを出します。
    - F_ERR_INVALID_OBJECT      不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NOMEMORY                メモリ不足
    - F_ERR_MEASURE_RUN_OVERFLOW    ２値ブローブ解析中にランテーブルがオーバーフローしたため中断した
    - F_ERR_MEASURE_BLOB_OVERFLOW   ２値ブローブ解析中にブローブテーブルがオーバーフローしたため中断した
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_execute(fimg, fBOObj):
    r"""INT FVALGAPI fnFIE_barcode_execute( FHANDLE fimg, FHANDLE fBOObj )
    バーコード認識の実行

    Params:
    - [in]      fimg        入力画像オブジェクトハンドル ( type: uc8 )
    - [in,out]  fBOObj      バーコードオブジェクトハンドル

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_IMAGE           不正な画像ハンドルが渡されたため、異常終了。画像の種類やチャネル数が違う場合はこのエラーを出します。
    - F_ERR_INVALID_OBJECT      不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NOMEMORY                メモリ不足
    - F_ERR_MEASURE_RUN_OVERFLOW    ２値ブローブ解析中にランテーブルがオーバーフローしたため中断した
    - F_ERR_MEASURE_BLOB_OVERFLOW   ２値ブローブ解析中にブローブテーブルがオーバーフローしたため中断した
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_execute(fimg, fBOObj)

def fnFIE_barcode_alloc_obj(pfBOObj, iMaxNoOfBarcodes) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_alloc_obj( FHANDLE* pfBOObj, INT iMaxNoOfBarcodes )
    バーコードオブジェクト生成

    Params:
    - [out] pfBOObj             バーコードオブジェクトハンドルへのポインタ(*pfBOObjはNULLで初期化してください。)
    - [in]  iMaxNoOfBarcodes    １回の実行での認識可能な最大数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_NOMEMORY            メモリ容量不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_alloc_obj(pfBOObj, iMaxNoOfBarcodes=10):
    r"""INT FVALGAPI fnFIE_barcode_alloc_obj( FHANDLE* pfBOObj, INT iMaxNoOfBarcodes )
    バーコードオブジェクト生成

    Params:
    - [out] pfBOObj             バーコードオブジェクトハンドルへのポインタ(*pfBOObjはNULLで初期化してください。)
    - [in]  iMaxNoOfBarcodes    １回の実行での認識可能な最大数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_NOMEMORY            メモリ容量不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_alloc_obj(pfBOObj, iMaxNoOfBarcodes)

def fnFIE_barcode_free_obj(fBOObj) -> Any:
    r"""void fnFIE_barcode_free_obj( FHANDLE fBOObj )
    バーコードオブジェクトの解放

    Params:
    - [in] fBOObj 解放するバーコードオブジェクトのハンドル

    Returns:
    """
    raise NotImplementedError

def barcode_free_obj(fBOObj):
    r"""void fnFIE_barcode_free_obj( FHANDLE fBOObj )
    バーコードオブジェクトの解放

    Params:
    - [in] fBOObj 解放するバーコードオブジェクトのハンドル

    Returns:
    """

    return _fie.fnFIE_barcode_free_obj(fBOObj)

def fnFIE_barcode_reset_obj(fBOObj) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_reset_obj( FHANDLE fBOObj )
    バーコードオブジェクトの初期化

    Params:
    - [in] fBOObj 解放するバーコードオブジェクトのハンドル

    Returns:
    """
    raise NotImplementedError

def barcode_reset_obj(fBOObj):
    r"""INT FVALGAPI fnFIE_barcode_reset_obj( FHANDLE fBOObj )
    バーコードオブジェクトの初期化

    Params:
    - [in] fBOObj 解放するバーコードオブジェクトのハンドル

    Returns:
    """

    return _fie.fnFIE_barcode_reset_obj(fBOObj)

def fnFIE_barcode_set_types(fBOObj, iBarcodeType) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_set_types( FHANDLE fBOObj, INT iBarcodeType )
    バーコード種別の設定

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [in]  iBarcodeType    バーコード種別

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_set_types(fBOObj, iBarcodeType):
    r"""INT FVALGAPI fnFIE_barcode_set_types( FHANDLE fBOObj, INT iBarcodeType )
    バーコード種別の設定

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [in]  iBarcodeType    バーコード種別

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_set_types(fBOObj, iBarcodeType)

def fnFIE_barcode_get_types(fBOObj, piBarcodeType) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_get_types( FHANDLE fBOObj, INT* piBarcodeType )
    バーコード種別の取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [out] piBarcodeType   バーコード種別

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_get_types(fBOObj, piBarcodeType):
    r"""INT FVALGAPI fnFIE_barcode_get_types( FHANDLE fBOObj, INT* piBarcodeType )
    バーコード種別の取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [out] piBarcodeType   バーコード種別

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_get_types(fBOObj, piBarcodeType)

def fnFIE_barcode_set_checkdigit(fBOObj, bCheckDigit) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_set_checkdigit( FHANDLE fBOObj, BOOL bCheckDigit )
    チェックディジットの設定(Code 39,ITFのみ有効)

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [in]  bCheckDigit     チェックの有無(TRUE or FALSE)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_set_checkdigit(fBOObj, bCheckDigit):
    r"""INT FVALGAPI fnFIE_barcode_set_checkdigit( FHANDLE fBOObj, BOOL bCheckDigit )
    チェックディジットの設定(Code 39,ITFのみ有効)

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [in]  bCheckDigit     チェックの有無(TRUE or FALSE)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_set_checkdigit(fBOObj, bCheckDigit)

def fnFIE_barcode_get_checkdigit(fBOObj, pbCheckDigit) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_get_checkdigit( FHANDLE fBOObj, BOOL* pbCheckDigit )
    チェックディジットの取得(Code 39,ITFのみ有効)

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [out] pbCheckDigit    チェックの有無

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_get_checkdigit(fBOObj, pbCheckDigit):
    r"""INT FVALGAPI fnFIE_barcode_get_checkdigit( FHANDLE fBOObj, BOOL* pbCheckDigit )
    チェックディジットの取得(Code 39,ITFのみ有効)

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [out] pbCheckDigit    チェックの有無

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_get_checkdigit(fBOObj, pbCheckDigit)

def fnFIE_barcode_set_binwinsize(fBOObj, iBinWinSize) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_set_binwinsize( FHANDLE fBOObj, INT iBinWinSize )
    ２値化に使用する局所領域サイズの設定

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [in]  iBinWinSize     ２値化に使用するウィンドウサイズ。奇数で指定。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_set_binwinsize(fBOObj, iBinWinSize):
    r"""INT FVALGAPI fnFIE_barcode_set_binwinsize( FHANDLE fBOObj, INT iBinWinSize )
    ２値化に使用する局所領域サイズの設定

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [in]  iBinWinSize     ２値化に使用するウィンドウサイズ。奇数で指定。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_set_binwinsize(fBOObj, iBinWinSize)

def fnFIE_barcode_get_binwinsize(fBOObj, piBinWinSize) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_get_binwinsize( FHANDLE fBOObj, INT* piBinWinSize )
    ２値化に使用する局所領域サイズの取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [out] piBinWinSize    ２値化に使用するウィンドウサイズ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_get_binwinsize(fBOObj, piBinWinSize):
    r"""INT FVALGAPI fnFIE_barcode_get_binwinsize( FHANDLE fBOObj, INT* piBinWinSize )
    ２値化に使用する局所領域サイズの取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [out] piBinWinSize    ２値化に使用するウィンドウサイズ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_get_binwinsize(fBOObj, piBinWinSize)

def fnFIE_barcode_set_timeout(fBOObj, dTimeOut) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_set_timeout( FHANDLE fBOObj, DOUBLE dTimeOut )
    タイムアウトの設定

    Params:
    - [in]  fBOObj      バーコードオブジェクトハンドル
    - [in]  dTimeOut    タイムアウト時間(ms)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_set_timeout(fBOObj, dTimeOut):
    r"""INT FVALGAPI fnFIE_barcode_set_timeout( FHANDLE fBOObj, DOUBLE dTimeOut )
    タイムアウトの設定

    Params:
    - [in]  fBOObj      バーコードオブジェクトハンドル
    - [in]  dTimeOut    タイムアウト時間(ms)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_set_timeout(fBOObj, dTimeOut)

def fnFIE_barcode_get_timeout(fBOObj, pdTimeOut) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_get_timeout( FHANDLE fBOObj, DOUBLE* pdTimeOut )
    タイムアウトの取得

    Params:
    - [in]  fBOObj      バーコードオブジェクトハンドル
    - [out] pdTimeOut   タイムアウト時間(ms)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_get_timeout(fBOObj, pdTimeOut):
    r"""INT FVALGAPI fnFIE_barcode_get_timeout( FHANDLE fBOObj, DOUBLE* pdTimeOut )
    タイムアウトの取得

    Params:
    - [in]  fBOObj      バーコードオブジェクトハンドル
    - [out] pdTimeOut   タイムアウト時間(ms)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_get_timeout(fBOObj, pdTimeOut)

def fnFIE_barcode_copy_obj(fBOObj) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_barcode_copy_obj( FHANDLE fBOObj )
    バーコードオブジェクトのコピー

    Params:
    - [in]  fBOObj      コピー元となるバーコードオブジェクトのハンドル

    Returns:
    - 正常終了時にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """
    raise NotImplementedError

def barcode_copy_obj(fBOObj):
    r"""FHANDLE FVALGAPI fnFIE_barcode_copy_obj( FHANDLE fBOObj )
    バーコードオブジェクトのコピー

    Params:
    - [in]  fBOObj      コピー元となるバーコードオブジェクトのハンドル

    Returns:
    - 正常終了時にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """

    return _fie.fnFIE_barcode_copy_obj(fBOObj)

def fnFIE_barcode_add_offsets(fBOObj, iOffsetX, iOffsetY) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_add_offsets( FHANDLE fBOObj, INT iOffsetX, INT iOffsetY )
    バーコード位置のオフセット量設定

    Params:
    - [in]  fBOObj      バーコードオブジェクトのハンドル
    - [in]  iOffsetX    X 座標オフセット量(0<=)
    - [in]  iOffsetY    Y 座標オフセット量(0<=)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_add_offsets(fBOObj, iOffsetX, iOffsetY):
    r"""INT FVALGAPI fnFIE_barcode_add_offsets( FHANDLE fBOObj, INT iOffsetX, INT iOffsetY )
    バーコード位置のオフセット量設定

    Params:
    - [in]  fBOObj      バーコードオブジェクトのハンドル
    - [in]  iOffsetX    X 座標オフセット量(0<=)
    - [in]  iOffsetY    Y 座標オフセット量(0<=)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_add_offsets(fBOObj, iOffsetX, iOffsetY)

def fnFIE_barcode_query_num(fBOObj, piNoOfBarcodes) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_query_num( FHANDLE fBOObj, INT* piNoOfBarcodes )
    バーコード認識数取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトのハンドル
    - [out] piNoOfBarcodes  認識したバーコード数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_query_num(fBOObj, piNoOfBarcodes):
    r"""INT FVALGAPI fnFIE_barcode_query_num( FHANDLE fBOObj, INT* piNoOfBarcodes )
    バーコード認識数取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトのハンドル
    - [out] piNoOfBarcodes  認識したバーコード数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_query_num(fBOObj, piNoOfBarcodes)

def fnFIE_barcode_query_msg(fBOObj, iBarcodeNo, ppcMsg) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_query_msg( FHANDLE fBOObj, INT iBarcodeNo, CHAR** ppcMsg )
    認識したバーコード文字列の取得

    Params:
    - [in]  fBOObj      バーコードオブジェクトのハンドル
    - [in]  iBarcodeNo  バーコード番号
    - [out] ppcMsg      指定したバーコード番号で得られた認識文字列(*ppcMsgはNULLで初期化してください。)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_query_msg(fBOObj, iBarcodeNo, ppcMsg):
    r"""INT FVALGAPI fnFIE_barcode_query_msg( FHANDLE fBOObj, INT iBarcodeNo, CHAR** ppcMsg )
    認識したバーコード文字列の取得

    Params:
    - [in]  fBOObj      バーコードオブジェクトのハンドル
    - [in]  iBarcodeNo  バーコード番号
    - [out] ppcMsg      指定したバーコード番号で得られた認識文字列(*ppcMsgはNULLで初期化してください。)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_query_msg(fBOObj, iBarcodeNo, ppcMsg)

def fnFIE_barcode_query_start_stop_pos(fBOObj, iBarcodeNo, pdStartX, pdStartY, pdEndX, pdEndY) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_query_start_stop_pos( FHANDLE fBOObj, INT iBarcodeNo, DOUBLE* pdStartX, DOUBLE* pdStartY, DOUBLE* pdEndX, DOUBLE* pdEndY )
    バーコード位置の取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトのハンドル
    - [in]  iBarcodeNo      認識したバーコード番号
    - [out] pdStartX        指定したバーコード番号に対応するバーコード位置 始点 X(画素)
    - [out] pdStartY        指定したバーコード番号に対応するバーコード位置 始点 Y(画素)
    - [out] pdEndX          指定したバーコード番号に対応するバーコード位置 終点 X(画素)
    - [out] pdEndY          指定したバーコード番号に対応するバーコード位置 終点 Y(画素)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_query_start_stop_pos(fBOObj, iBarcodeNo, pdStartX=DUMMY_DOUBLE, pdStartY=DUMMY_DOUBLE, pdEndX=DUMMY_DOUBLE, pdEndY=DUMMY_DOUBLE):
    r"""INT FVALGAPI fnFIE_barcode_query_start_stop_pos( FHANDLE fBOObj, INT iBarcodeNo, DOUBLE* pdStartX, DOUBLE* pdStartY, DOUBLE* pdEndX, DOUBLE* pdEndY )
    バーコード位置の取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトのハンドル
    - [in]  iBarcodeNo      認識したバーコード番号
    - [out] pdStartX        指定したバーコード番号に対応するバーコード位置 始点 X(画素)
    - [out] pdStartY        指定したバーコード番号に対応するバーコード位置 始点 Y(画素)
    - [out] pdEndX          指定したバーコード番号に対応するバーコード位置 終点 X(画素)
    - [out] pdEndY          指定したバーコード番号に対応するバーコード位置 終点 Y(画素)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_query_start_stop_pos(fBOObj, iBarcodeNo, pdStartX, pdStartY, pdEndX, pdEndY)

def fnFIE_barcode_query_type(fBOObj, iBarcodeNo, piBarcodeType) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_query_type( FHANDLE fBOObj, INT iBarcodeNo, INT* piBarcodeType )
    バーコード種別取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトのハンドル
    - [in]  iBarcodeNo      認識したバーコード番号
    - [out] piBarcodeType   バーコード番号に対応するバーコード種別

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_query_type(fBOObj, iBarcodeNo, piBarcodeType):
    r"""INT FVALGAPI fnFIE_barcode_query_type( FHANDLE fBOObj, INT iBarcodeNo, INT* piBarcodeType )
    バーコード種別取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトのハンドル
    - [in]  iBarcodeNo      認識したバーコード番号
    - [out] piBarcodeType   バーコード番号に対応するバーコード種別

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_query_type(fBOObj, iBarcodeNo, piBarcodeType)

def fnFIE_barcode_query_timings(fBOObj, pdImageBinarizationTime, pdBlobsExtractionTime, pdBlobsSelectionTime, pdSignalExtractionTime, pdBarcodeDecodingTime, pdTotalDecodingTime) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_query_timings( FHANDLE fBOObj, DOUBLE* pdImageBinarizationTime, DOUBLE* pdBlobsExtractionTime, DOUBLE* pdBlobsSelectionTime, DOUBLE* pdSignalExtractionTime, DOUBLE* pdBarcodeDecodingTime, DOUBLE* pdTotalDecodingTime )
    バーコード認識処理時間の取得

    Params:
    - [in]  fBOObj                  バーコードオブジェクトのハンドル
    - [out] pdImageBinarizationTime ２値化処理時間(ms)
    - [out] pdBlobsExtractionTime   ２値画像からの塊抽出処理時間(ms)
    - [out] pdBlobsSelectionTime    抽出した塊の選別処理時間(ms)
    - [out] pdSignalExtractionTime  選別後の塊からバーコードの認識時間(ms)
    - [out] pdBarcodeDecodingTime   バーコードの認識処理時間(ms)
    - [out] pdTotalDecodingTime     トータル処理時間(ms)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_query_timings(fBOObj, pdImageBinarizationTime=None, pdBlobsExtractionTime=None, pdBlobsSelectionTime=None, pdSignalExtractionTime=None, pdBarcodeDecodingTime=None, pdTotalDecodingTime=None):
    r"""INT FVALGAPI fnFIE_barcode_query_timings( FHANDLE fBOObj, DOUBLE* pdImageBinarizationTime, DOUBLE* pdBlobsExtractionTime, DOUBLE* pdBlobsSelectionTime, DOUBLE* pdSignalExtractionTime, DOUBLE* pdBarcodeDecodingTime, DOUBLE* pdTotalDecodingTime )
    バーコード認識処理時間の取得

    Params:
    - [in]  fBOObj                  バーコードオブジェクトのハンドル
    - [out] pdImageBinarizationTime ２値化処理時間(ms)
    - [out] pdBlobsExtractionTime   ２値画像からの塊抽出処理時間(ms)
    - [out] pdBlobsSelectionTime    抽出した塊の選別処理時間(ms)
    - [out] pdSignalExtractionTime  選別後の塊からバーコードの認識時間(ms)
    - [out] pdBarcodeDecodingTime   バーコードの認識処理時間(ms)
    - [out] pdTotalDecodingTime     トータル処理時間(ms)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_query_timings(fBOObj, pdImageBinarizationTime, pdBlobsExtractionTime, pdBlobsSelectionTime, pdSignalExtractionTime, pdBarcodeDecodingTime, pdTotalDecodingTime)

def fnFIE_barcode_query_raw(fBOObj, iBarcodeNo, ppiRawdata, piNoOfRawdata) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_query_raw( FHANDLE fBOObj, INT iBarcodeNo, INT** ppiRawdata, INT* piNoOfRawdata )
    認識したバーコードに書かれたデータの取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトのハンドル
    - [in]  iBarcodeNo      認識ドしたバーコード番号
    - [out] ppiRawdata      指定したバーコード番号に対応する文字列変換前のバーコードデータ(*ppiRawdataはNULLで初期化してください。)
    - [out] piNoOfRawdata   指定したバーコード番号に対応する文字列変換前のバーコードデータ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_query_raw(fBOObj, iBarcodeNo, ppiRawdata, piNoOfRawdata):
    r"""INT FVALGAPI fnFIE_barcode_query_raw( FHANDLE fBOObj, INT iBarcodeNo, INT** ppiRawdata, INT* piNoOfRawdata )
    認識したバーコードに書かれたデータの取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトのハンドル
    - [in]  iBarcodeNo      認識ドしたバーコード番号
    - [out] ppiRawdata      指定したバーコード番号に対応する文字列変換前のバーコードデータ(*ppiRawdataはNULLで初期化してください。)
    - [out] piNoOfRawdata   指定したバーコード番号に対応する文字列変換前のバーコードデータ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_query_raw(fBOObj, iBarcodeNo, ppiRawdata, piNoOfRawdata)

def fnFIE_barcode_set_duplicate(fBOObj, bDuplicate) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_set_duplicate( FHANDLE fBOObj, BOOL bDuplicate )
    重複回答フラグの設定

    Params:
    - [in]  fBOObj      バーコードオブジェクトハンドル
    - [in]  bDuplicate  重複回答許可 (TRUE or FALSE)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_set_duplicate(fBOObj, bDuplicate):
    r"""INT FVALGAPI fnFIE_barcode_set_duplicate( FHANDLE fBOObj, BOOL bDuplicate )
    重複回答フラグの設定

    Params:
    - [in]  fBOObj      バーコードオブジェクトハンドル
    - [in]  bDuplicate  重複回答許可 (TRUE or FALSE)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_set_duplicate(fBOObj, bDuplicate)

def fnFIE_barcode_get_duplicate(fBOObj, pbDuplicate) -> Any:
    r"""INT FVALGAPI fnFIE_barcode_get_duplicate( FHANDLE fBOObj, BOOL* pbDuplicate )
    重複回答フラグの取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [out] pbDuplicate     重複回答許可

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def barcode_get_duplicate(fBOObj, pbDuplicate):
    r"""INT FVALGAPI fnFIE_barcode_get_duplicate( FHANDLE fBOObj, BOOL* pbDuplicate )
    重複回答フラグの取得

    Params:
    - [in]  fBOObj          バーコードオブジェクトハンドル
    - [out] pbDuplicate     重複回答許可

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_barcode_get_duplicate(fBOObj, pbDuplicate)

def fnFIE_gs2_alloc(first_buff_size, last_buff_size, cache_pow_num) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_gs2_alloc( UINT first_buff_size, UINT last_buff_size, UINT cache_pow_num )
    グレイサーチオブジェクトの生成

    Params:
    -  [in] first_buff_size 初期サーチ結果候補初期バッファサイズ
                                通常は0を指定してください。0を指定すると、デフォルト値を使用します。
                                初期サイズが小さく、メモリが足りなくなった場合には内部で自動で再アロケートを行いますが、
                                メモリの再アロケートを少なくしたい等の理由で、初期サイズを変更する場合に指定します。
                                なお、この設定値によってサーチ結果が変化することはありません。
    -  [in] last_buff_size  最終サーチ結果候補初期バッファサイズ
                                通常は0を指定してください。0を指定すると、デフォルト値を使用します。
                                初期サイズが小さく、メモリが足りなくなった場合には内部で自動で再アロケートを行いますが、
                                メモリの再アロケートを少なくしたい等の理由で、初期サイズを変更する場合に指定します。
                                なお、この設定値によってサーチ結果が変化することはありません。
    -  [in] cache_pow_num   中間スコアキャッシュサイズ( 0 または 3〜15 )
                                通常は0を指定してください。0を指定すると、デフォルト値を使用します。
                                本ライブラリでは重複した相関スコアの計算を避けるために、既に計算した
                                相関スコアを一時的に保存するキャッシュ領域を持ちます。
                                本パラメータはこの相関スコアのキャッシュサイズを指定します。
                                大きな値を設定するとキャッシュヒット率が上がる場合がありますが、
                                その効果はわずかな場合が多く、必要なメモリ量が大幅に増えるため、
                                デフォルト値以外での利用は推奨しません。
                                なお、この設定値によってサーチ結果が変化することはありません。

    Returns:
    - 正常終了した場合は、生成したグレイサーチオブジェクトのハンドルを返します。
            ライセンスエラー、未初期化エラー、パラメータエラー、またはメモリ不足エラーにより生成できなかったときはNULLを返します。
    """
    raise NotImplementedError

def gs2_alloc(first_buff_size=0, last_buff_size=0, cache_pow_num=0):
    r"""FHANDLE FVALGAPI fnFIE_gs2_alloc( UINT first_buff_size, UINT last_buff_size, UINT cache_pow_num )
    グレイサーチオブジェクトの生成

    Params:
    -  [in] first_buff_size 初期サーチ結果候補初期バッファサイズ
                                通常は0を指定してください。0を指定すると、デフォルト値を使用します。
                                初期サイズが小さく、メモリが足りなくなった場合には内部で自動で再アロケートを行いますが、
                                メモリの再アロケートを少なくしたい等の理由で、初期サイズを変更する場合に指定します。
                                なお、この設定値によってサーチ結果が変化することはありません。
    -  [in] last_buff_size  最終サーチ結果候補初期バッファサイズ
                                通常は0を指定してください。0を指定すると、デフォルト値を使用します。
                                初期サイズが小さく、メモリが足りなくなった場合には内部で自動で再アロケートを行いますが、
                                メモリの再アロケートを少なくしたい等の理由で、初期サイズを変更する場合に指定します。
                                なお、この設定値によってサーチ結果が変化することはありません。
    -  [in] cache_pow_num   中間スコアキャッシュサイズ( 0 または 3〜15 )
                                通常は0を指定してください。0を指定すると、デフォルト値を使用します。
                                本ライブラリでは重複した相関スコアの計算を避けるために、既に計算した
                                相関スコアを一時的に保存するキャッシュ領域を持ちます。
                                本パラメータはこの相関スコアのキャッシュサイズを指定します。
                                大きな値を設定するとキャッシュヒット率が上がる場合がありますが、
                                その効果はわずかな場合が多く、必要なメモリ量が大幅に増えるため、
                                デフォルト値以外での利用は推奨しません。
                                なお、この設定値によってサーチ結果が変化することはありません。

    Returns:
    - 正常終了した場合は、生成したグレイサーチオブジェクトのハンドルを返します。
            ライセンスエラー、未初期化エラー、パラメータエラー、またはメモリ不足エラーにより生成できなかったときはNULLを返します。
    """

    return _fie.fnFIE_gs2_alloc(first_buff_size, last_buff_size, cache_pow_num)

def fnFIE_gs2_free(hgs) -> Any:
    r"""void fnFIE_gs2_free( FHANDLE hgs )
    グレイサーチオブジェクトの解放

    Params:
    - [in] hgs  解放するグレイサーチオブジェクト

    Returns:
    """
    raise NotImplementedError

def gs2_free(hgs):
    r"""void fnFIE_gs2_free( FHANDLE hgs )
    グレイサーチオブジェクトの解放

    Params:
    - [in] hgs  解放するグレイサーチオブジェクト

    Returns:
    """

    return _fie.fnFIE_gs2_free(hgs)

def fnFIE_gs2_copy(hgs) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_gs2_copy( FHANDLE hgs )
    サーチオブジェクトの複製

    Params:
    - [in] hgs  コピーするグレイサーチオブジェクト

    Returns:
    - サーチオブジェクトのポインタ 正常終了
    - NULL  引数異常またはメモリ不足
    """
    raise NotImplementedError

def gs2_copy(hgs):
    r"""FHANDLE FVALGAPI fnFIE_gs2_copy( FHANDLE hgs )
    サーチオブジェクトの複製

    Params:
    - [in] hgs  コピーするグレイサーチオブジェクト

    Returns:
    - サーチオブジェクトのポインタ 正常終了
    - NULL  引数異常またはメモリ不足
    """

    return _fie.fnFIE_gs2_copy(hgs)

def fnFIE_gs2_search(hgs, hpattern, himage, search_window, threshold_mid, threshold_final, edge_detect, reverse_mode, pitch_x, pitch_y, search_mode, search_type, result, max_result_num, result_num) -> Any:
    r"""INT FVALGAPI fnFIE_gs2_search( FHANDLE hgs, FHANDLE hpattern, FHANDLE himage, BOX_T search_window, INT threshold_mid, INT threshold_final, INT edge_detect, INT reverse_mode, INT pitch_x, INT pitch_y, enum f_gs2_mode search_mode, INT search_type, F_GS_RESULT* result, INT max_result_num, INT* result_num )
    グレイサーチの実行

    Params:
    - [in,out] hgs              グレイサーチオブジェクト
    - [in]     hpattern         グレイサーチパターンオブジェクト
    - [in]     himage           サーチ対象となる画像オブジェクト ( type : uc8 )
                                    チャネル数は1でなければいけません。
                                    また、パタンのサイズよりも縦横共に大きい必要があります。
    - [in]     search_window    サーチウインドウ
                                    画像オブジェクトの中でサーチを行う処理範囲を  himage 上の座標で指定します。
                                     himage の内部に納まるように座標を指定する必要があります。
                                    また、パタンのサイズよりも大きい必要があります。
    - [in]     threshold_mid    途中相関値 ( 1000 〜 9999 )
    - [in]     threshold_final  最終相関値 ( 1000 〜 9999 )
    - [in]     edge_detect      サーチウインドウ周囲接触フラグ
                                     - TRUE サーチウインドウに接したパターンも検出
                                     - FALSE サーチウインドウに接したパターンを検出しない
    - [in]     reverse_mode     反転パターン検出モードフラグ 濃度反転しているパターンも検出するかどうかを指定します。
                                     - TRUE 反転パターンも検出
                                     - FALSE 反転パターンを検出しない
    - [in]     pitch_x          最終的な回答の出力時に、同一の解であるとみなす範囲を指定します。
                                    0を入力した場合、パターンサイズの半分になります。
    - [in]     pitch_y          最終的な回答の出力時に、同一の解であるとみなす範囲を指定します。
                                    0を入力した場合、パターンサイズの半分になります。
    - [in]     search_mode      サーチ精度を指定します。
                                     - F_GS2_NORMAL_MODE 通常精度
                                     - F_GS2_HIGH_MODE   高精度
                                     - F_GS2_SUPER_MODE  超高精度
                                     - F_GS2_ULTRA_SUPER_MODE  ウルトラ超高精度
    - [in]     search_type      サーチ複雑度を指定します。( 1 〜 9 )
    - [out]    result           サーチ結果　 サーチスコア( 0 〜 10000 )と結果座標の100倍値を返します。
    - [in]     max_result_num   サーチ結果取得個数。
                                    相関値の上位からこの個数だけ回答します。
                                     result はこの個数よりも大きい配列でなければいけません。
    - [out]    result_num       見つかったサーチ結果の個数 ( 0 〜  max_result_num )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       引数異常 範囲外の引数を与えた、継続サーチ時に圧縮フィルタ種別が同一でないなど
    - F_ERR_INVALID_OBJECT  引数オブジェクトの種別が異常,引数オブジェクトがNULL
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       対応していない画像が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gs2_search(hgs, hpattern, himage, search_window, threshold_mid=5000, threshold_final=6000, edge_detect=TRUE, reverse_mode=FALSE, pitch_x=0, pitch_y=0, search_mode=F_GS2_NORMAL_MODE, search_type=1, result=REQUIRED_PLACEHOLDER, max_result_num=REQUIRED_PLACEHOLDER, result_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_gs2_search( FHANDLE hgs, FHANDLE hpattern, FHANDLE himage, BOX_T search_window, INT threshold_mid, INT threshold_final, INT edge_detect, INT reverse_mode, INT pitch_x, INT pitch_y, enum f_gs2_mode search_mode, INT search_type, F_GS_RESULT* result, INT max_result_num, INT* result_num )
    グレイサーチの実行

    Params:
    - [in,out] hgs              グレイサーチオブジェクト
    - [in]     hpattern         グレイサーチパターンオブジェクト
    - [in]     himage           サーチ対象となる画像オブジェクト ( type : uc8 )
                                    チャネル数は1でなければいけません。
                                    また、パタンのサイズよりも縦横共に大きい必要があります。
    - [in]     search_window    サーチウインドウ
                                    画像オブジェクトの中でサーチを行う処理範囲を  himage 上の座標で指定します。
                                     himage の内部に納まるように座標を指定する必要があります。
                                    また、パタンのサイズよりも大きい必要があります。
    - [in]     threshold_mid    途中相関値 ( 1000 〜 9999 )
    - [in]     threshold_final  最終相関値 ( 1000 〜 9999 )
    - [in]     edge_detect      サーチウインドウ周囲接触フラグ
                                     - TRUE サーチウインドウに接したパターンも検出
                                     - FALSE サーチウインドウに接したパターンを検出しない
    - [in]     reverse_mode     反転パターン検出モードフラグ 濃度反転しているパターンも検出するかどうかを指定します。
                                     - TRUE 反転パターンも検出
                                     - FALSE 反転パターンを検出しない
    - [in]     pitch_x          最終的な回答の出力時に、同一の解であるとみなす範囲を指定します。
                                    0を入力した場合、パターンサイズの半分になります。
    - [in]     pitch_y          最終的な回答の出力時に、同一の解であるとみなす範囲を指定します。
                                    0を入力した場合、パターンサイズの半分になります。
    - [in]     search_mode      サーチ精度を指定します。
                                     - F_GS2_NORMAL_MODE 通常精度
                                     - F_GS2_HIGH_MODE   高精度
                                     - F_GS2_SUPER_MODE  超高精度
                                     - F_GS2_ULTRA_SUPER_MODE  ウルトラ超高精度
    - [in]     search_type      サーチ複雑度を指定します。( 1 〜 9 )
    - [out]    result           サーチ結果　 サーチスコア( 0 〜 10000 )と結果座標の100倍値を返します。
    - [in]     max_result_num   サーチ結果取得個数。
                                    相関値の上位からこの個数だけ回答します。
                                     result はこの個数よりも大きい配列でなければいけません。
    - [out]    result_num       見つかったサーチ結果の個数 ( 0 〜  max_result_num )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       引数異常 範囲外の引数を与えた、継続サーチ時に圧縮フィルタ種別が同一でないなど
    - F_ERR_INVALID_OBJECT  引数オブジェクトの種別が異常,引数オブジェクトがNULL
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       対応していない画像が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if result is REQUIRED_PLACEHOLDER: raise TypeError("argument 'result' is missing")
    if max_result_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'max_result_num' is missing")
    if result_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'result_num' is missing")
    return _fie.fnFIE_gs2_search(hgs, hpattern, himage, search_window, threshold_mid, threshold_final, edge_detect, reverse_mode, pitch_x, pitch_y, search_mode, search_type, result, max_result_num, result_num)

def fnFIE_gs2_search_enforce(hgs, hpattern, himage, search_window, threshold_mid, threshold_final, edge_detect, reverse_mode, pitch_x, pitch_y, first_unit, last_unit, result, max_result_num, result_num) -> Any:
    r"""INT FVALGAPI fnFIE_gs2_search_enforce( FHANDLE hgs, FHANDLE hpattern, FHANDLE himage, BOX_T search_window, INT threshold_mid, INT threshold_final, INT edge_detect, INT reverse_mode, INT pitch_x, INT pitch_y, INT first_unit, INT last_unit, F_GS_RESULT* result, INT max_result_num, INT* result_num )
    [非推奨]グレイサーチの実行（圧縮度を強制する版）

    Params:
    - [in,out] hgs              グレイサーチオブジェクト
    - [in]     hpattern         グレイサーチパターンオブジェクト
    - [in]     himage           サーチ対象となる画像オブジェクト ( type : uc8 )
                                    チャネル数は1でなければいけません。
                                    また、パタンのサイズよりも縦横共に大きい必要があります。
    - [in]     search_window    サーチウインドウ
                                    画像オブジェクトの中でサーチを行う処理範囲を  himage 上の座標で指定します。
                                     himage の内部に納まるように座標を指定する必要があります。
                                    また、パタンのサイズよりも大きい必要があります。
    - [in]     threshold_mid    途中相関値 ( 1000 〜 9999 )
    - [in]     threshold_final  最終相関値 ( 1000 〜 9999 )
    - [in]     edge_detect      サーチウインドウ周囲接触フラグ
                                     - TRUE サーチウインドウに接したパターンも検出
                                     - FALSE サーチウインドウに接したパターンを検出しない
    - [in]     reverse_mode     反転パターン検出モードフラグ
                                    濃度反転しているパターンも検出するかどうかを指定します。
                                      - TRUE 反転パターンも検出
                                      - FALSE 反転パターンを検出しない
    - [in]     pitch_x          最終的な回答の出力時に、同一の解であるとみなす範囲を指定します。
                                    0を入力した場合、パターン幅の半分になります。
    - [in]     pitch_y          最終的な回答の出力時に、同一の解であるとみなす範囲を指定します。
                                    0を入力した場合、パターン高さの半分になります。
    - [in]     first_unit       サーチ開始圧縮度を指定します。( 0 〜 9 )
                                    圧縮度がnのとき、2の-n乗倍の画像でサーチを開始します。
    - [in]     last_unit        サーチ終了圧縮度を指定します。( 0 〜 9 )
                                    圧縮度がnのとき、2の-n乗倍の画像でサーチを完了します。
    - [out]    result           サーチ結果
                                    サーチスコア( 0 〜 10000 )と結果座標の100倍値を返します。
    - [in]     max_result_num   サーチ結果取得個数。
                                    相関値の上位からこの個数だけ回答します。
                                     result はこの個数よりも大きい配列でなければいけません。
    - [out]    result_num       見つかったサーチ結果の個数 ( 0 〜  max_result_num )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       引数異常 引数オブジェクトがない、範囲外の引数を与えた、継続サーチ時に圧縮フィルタ種別が同一でないなど
    - F_ERR_INVALID_OBJECT  引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       対応していない画像が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gs2_search_enforce(hgs, hpattern, himage, search_window, threshold_mid=5000, threshold_final=6000, edge_detect=TRUE, reverse_mode=FALSE, pitch_x=0, pitch_y=0, first_unit=2, last_unit=0, result=REQUIRED_PLACEHOLDER, max_result_num=REQUIRED_PLACEHOLDER, result_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_gs2_search_enforce( FHANDLE hgs, FHANDLE hpattern, FHANDLE himage, BOX_T search_window, INT threshold_mid, INT threshold_final, INT edge_detect, INT reverse_mode, INT pitch_x, INT pitch_y, INT first_unit, INT last_unit, F_GS_RESULT* result, INT max_result_num, INT* result_num )
    [非推奨]グレイサーチの実行（圧縮度を強制する版）

    Params:
    - [in,out] hgs              グレイサーチオブジェクト
    - [in]     hpattern         グレイサーチパターンオブジェクト
    - [in]     himage           サーチ対象となる画像オブジェクト ( type : uc8 )
                                    チャネル数は1でなければいけません。
                                    また、パタンのサイズよりも縦横共に大きい必要があります。
    - [in]     search_window    サーチウインドウ
                                    画像オブジェクトの中でサーチを行う処理範囲を  himage 上の座標で指定します。
                                     himage の内部に納まるように座標を指定する必要があります。
                                    また、パタンのサイズよりも大きい必要があります。
    - [in]     threshold_mid    途中相関値 ( 1000 〜 9999 )
    - [in]     threshold_final  最終相関値 ( 1000 〜 9999 )
    - [in]     edge_detect      サーチウインドウ周囲接触フラグ
                                     - TRUE サーチウインドウに接したパターンも検出
                                     - FALSE サーチウインドウに接したパターンを検出しない
    - [in]     reverse_mode     反転パターン検出モードフラグ
                                    濃度反転しているパターンも検出するかどうかを指定します。
                                      - TRUE 反転パターンも検出
                                      - FALSE 反転パターンを検出しない
    - [in]     pitch_x          最終的な回答の出力時に、同一の解であるとみなす範囲を指定します。
                                    0を入力した場合、パターン幅の半分になります。
    - [in]     pitch_y          最終的な回答の出力時に、同一の解であるとみなす範囲を指定します。
                                    0を入力した場合、パターン高さの半分になります。
    - [in]     first_unit       サーチ開始圧縮度を指定します。( 0 〜 9 )
                                    圧縮度がnのとき、2の-n乗倍の画像でサーチを開始します。
    - [in]     last_unit        サーチ終了圧縮度を指定します。( 0 〜 9 )
                                    圧縮度がnのとき、2の-n乗倍の画像でサーチを完了します。
    - [out]    result           サーチ結果
                                    サーチスコア( 0 〜 10000 )と結果座標の100倍値を返します。
    - [in]     max_result_num   サーチ結果取得個数。
                                    相関値の上位からこの個数だけ回答します。
                                     result はこの個数よりも大きい配列でなければいけません。
    - [out]    result_num       見つかったサーチ結果の個数 ( 0 〜  max_result_num )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       引数異常 引数オブジェクトがない、範囲外の引数を与えた、継続サーチ時に圧縮フィルタ種別が同一でないなど
    - F_ERR_INVALID_OBJECT  引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       対応していない画像が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if result is REQUIRED_PLACEHOLDER: raise TypeError("argument 'result' is missing")
    if max_result_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'max_result_num' is missing")
    if result_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'result_num' is missing")
    return _fie.fnFIE_gs2_search_enforce(hgs, hpattern, himage, search_window, threshold_mid, threshold_final, edge_detect, reverse_mode, pitch_x, pitch_y, first_unit, last_unit, result, max_result_num, result_num)

def fnFIE_gs2_search_enforce2(hgs, hpattern, himage, search_window, threshold_mid, threshold_final, edge_detect, reverse_mode, pitch_x, pitch_y, first_unit, last_unit, subpxl_neib, result, max_result_num, result_num) -> Any:
    r"""INT FVALGAPI fnFIE_gs2_search_enforce2( FHANDLE hgs, FHANDLE hpattern, FHANDLE himage, BOX_T search_window, INT threshold_mid, INT threshold_final, INT edge_detect, INT reverse_mode, INT pitch_x, INT pitch_y, INT first_unit, INT last_unit, enum f_gs2_subpxl_neib subpxl_neib, F_GS_RESULT* result, INT max_result_num, INT* result_num )
    グレイサーチの実行（圧縮度を強制する版２：サブピクセル推定近傍指定追加版）

    Params:
    - [in,out] hgs              グレイサーチオブジェクト
    - [in]     hpattern         グレイサーチパターンオブジェクト
    - [in]     himage           サーチ対象となる画像オブジェクト ( type : uc8 )
                                    チャネル数は1でなければいけません。
                                    また、パタンのサイズよりも縦横共に大きい必要があります。
    - [in]     search_window    サーチウインドウ
                                    画像オブジェクトの中でサーチを行う処理範囲を  himage 上の座標で指定します。
                                     himage の内部に納まるように座標を指定する必要があります。
                                    また、パタンのサイズよりも大きい必要があります。
    - [in]     threshold_mid    途中相関値 ( 1000 〜 9999 )
    - [in]     threshold_final  最終相関値 ( 1000 〜 9999 )
    - [in]     edge_detect      サーチウインドウ周囲接触フラグ
                                     - TRUE サーチウインドウに接したパターンも検出
                                     - FALSE サーチウインドウに接したパターンを検出しない
    - [in]     reverse_mode     反転パターン検出モードフラグ
                                    濃度反転しているパターンも検出するかどうかを指定します。
                                      - TRUE 反転パターンも検出
                                      - FALSE 反転パターンを検出しない
    - [in]     pitch_x          最終的な回答の出力時に、同一の解であるとみなす範囲を指定します。
                                    0を入力した場合、パターン幅の半分になります。
    - [in]     pitch_y          最終的な回答の出力時に、同一の解であるとみなす範囲を指定します。
                                    0を入力した場合、パターン高さの半分になります。
    - [in]     first_unit       サーチ開始圧縮度を指定します。( 0 〜 9 )
                                    圧縮度がnのとき、2の-n乗倍の画像でサーチを開始します。
    - [in]     last_unit        サーチ終了圧縮度を指定します。( 0 〜 9 )
                                    圧縮度がnのとき、2の-n乗倍の画像でサーチを完了します。
    - [in]     subpxl_neib      精サーチ・サブピクセル推定に用いる近傍を指定します。
                                    ８近傍を指定する場合、サーチ終了圧縮度(last_unit)は 0 を推奨します。
                                     - F_GS2_SUBPXL_NEIB_4  ４近傍
                                     - F_GS2_SUBPXL_NEIB_8  ８近傍
    - [out]    result           サーチ結果
                                    サーチスコア( 0 〜 10000 )と結果座標の100倍値を返します。
    - [in]     max_result_num   サーチ結果取得個数。
                                    相関値の上位からこの個数だけ回答します。
                                     result はこの個数よりも大きい配列でなければいけません。
    - [out]    result_num       見つかったサーチ結果の個数 ( 0 〜  max_result_num )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       引数異常 引数オブジェクトがない、範囲外の引数を与えた、継続サーチ時に圧縮フィルタ種別が同一でないなど
    - F_ERR_INVALID_OBJECT  引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       対応していない画像が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gs2_search_enforce2(hgs, hpattern, himage, search_window, threshold_mid=5000, threshold_final=6000, edge_detect=TRUE, reverse_mode=FALSE, pitch_x=0, pitch_y=0, first_unit=2, last_unit=0, subpxl_neib=F_GS2_SUBPXL_NEIB_4, result=REQUIRED_PLACEHOLDER, max_result_num=REQUIRED_PLACEHOLDER, result_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_gs2_search_enforce2( FHANDLE hgs, FHANDLE hpattern, FHANDLE himage, BOX_T search_window, INT threshold_mid, INT threshold_final, INT edge_detect, INT reverse_mode, INT pitch_x, INT pitch_y, INT first_unit, INT last_unit, enum f_gs2_subpxl_neib subpxl_neib, F_GS_RESULT* result, INT max_result_num, INT* result_num )
    グレイサーチの実行（圧縮度を強制する版２：サブピクセル推定近傍指定追加版）

    Params:
    - [in,out] hgs              グレイサーチオブジェクト
    - [in]     hpattern         グレイサーチパターンオブジェクト
    - [in]     himage           サーチ対象となる画像オブジェクト ( type : uc8 )
                                    チャネル数は1でなければいけません。
                                    また、パタンのサイズよりも縦横共に大きい必要があります。
    - [in]     search_window    サーチウインドウ
                                    画像オブジェクトの中でサーチを行う処理範囲を  himage 上の座標で指定します。
                                     himage の内部に納まるように座標を指定する必要があります。
                                    また、パタンのサイズよりも大きい必要があります。
    - [in]     threshold_mid    途中相関値 ( 1000 〜 9999 )
    - [in]     threshold_final  最終相関値 ( 1000 〜 9999 )
    - [in]     edge_detect      サーチウインドウ周囲接触フラグ
                                     - TRUE サーチウインドウに接したパターンも検出
                                     - FALSE サーチウインドウに接したパターンを検出しない
    - [in]     reverse_mode     反転パターン検出モードフラグ
                                    濃度反転しているパターンも検出するかどうかを指定します。
                                      - TRUE 反転パターンも検出
                                      - FALSE 反転パターンを検出しない
    - [in]     pitch_x          最終的な回答の出力時に、同一の解であるとみなす範囲を指定します。
                                    0を入力した場合、パターン幅の半分になります。
    - [in]     pitch_y          最終的な回答の出力時に、同一の解であるとみなす範囲を指定します。
                                    0を入力した場合、パターン高さの半分になります。
    - [in]     first_unit       サーチ開始圧縮度を指定します。( 0 〜 9 )
                                    圧縮度がnのとき、2の-n乗倍の画像でサーチを開始します。
    - [in]     last_unit        サーチ終了圧縮度を指定します。( 0 〜 9 )
                                    圧縮度がnのとき、2の-n乗倍の画像でサーチを完了します。
    - [in]     subpxl_neib      精サーチ・サブピクセル推定に用いる近傍を指定します。
                                    ８近傍を指定する場合、サーチ終了圧縮度(last_unit)は 0 を推奨します。
                                     - F_GS2_SUBPXL_NEIB_4  ４近傍
                                     - F_GS2_SUBPXL_NEIB_8  ８近傍
    - [out]    result           サーチ結果
                                    サーチスコア( 0 〜 10000 )と結果座標の100倍値を返します。
    - [in]     max_result_num   サーチ結果取得個数。
                                    相関値の上位からこの個数だけ回答します。
                                     result はこの個数よりも大きい配列でなければいけません。
    - [out]    result_num       見つかったサーチ結果の個数 ( 0 〜  max_result_num )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       引数異常 引数オブジェクトがない、範囲外の引数を与えた、継続サーチ時に圧縮フィルタ種別が同一でないなど
    - F_ERR_INVALID_OBJECT  引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       対応していない画像が渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if result is REQUIRED_PLACEHOLDER: raise TypeError("argument 'result' is missing")
    if max_result_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'max_result_num' is missing")
    if result_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'result_num' is missing")
    return _fie.fnFIE_gs2_search_enforce2(hgs, hpattern, himage, search_window, threshold_mid, threshold_final, edge_detect, reverse_mode, pitch_x, pitch_y, first_unit, last_unit, subpxl_neib, result, max_result_num, result_num)

def fnFIE_gs2_pattern_alloc(himage, hmask, mark_offsetx, mark_offsety, filter, errorcode) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_gs2_pattern_alloc( FHANDLE himage, FHANDLE hmask, INT mark_offsetx, INT mark_offsety, enum f_comp_filter filter, INT* errorcode )
    グレイサーチパターンオブジェクトの生成

    Params:
    -  [in] himage          サーチパターンにする画像オブジェクト ( type: uc8 )
    -  [in] hmask           マスクにする画像オブジェクト ( type: bin, uc8 )
                                NULLを投入するとマスクなしのパターンになります。
    -  [in] mark_offsetx        回答Ｘ座標オフセット(100倍値)
    -  [in] mark_offsety        回答Ｙ座標オフセット(100倍値)
    -  [in] filter          内部で画像ピラミッドの生成に使うフィルタの種別
                                - F_COMP_MODE_SMOOTH    通常（平均）フィルタ 特に問題なければこれを指定
                                - F_COMP_MODE_MIN       最小値フィルタ パタンが黒い細線で構成されているような場合に指定
                                - F_COMP_MODE_MAX       最大値フィルタ パタンが白い細線で構成されているような場合に指定
                                - F_COMP_MODE_AVERAGE2  再平均フィルタ パタンにカメラノイズが多い場合に指定
    -  [out] errorcode      エラーコード。エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                - F_ERR_NONE            正常終了
                                - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
                                - F_ERR_NOMEMORY        メモリ不足
                                - F_ERR_INVALID_OBJECT  渡されたオブジェクトの種別が異常
                                - F_ERR_GS_NO_CONTRAST  パタン画像に情報が足りないため、パタンにならない。
                                    （==マスク部をのぞいた画像の濃度分散が0.0になる）
                                - F_ERR_INVALID_IMAGE       対応していない画像が渡された
                                    -  hmask と  himage のサイズが違う
                                    - 非対応画像type
                                    - チャネル数が1でない
                                    - 入力画像が大きすぎる
                                - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  himage オブジェクトがNULL
                                    -  filter に異常な値が渡された

    Returns:
    - 正常終了した場合は、生成したグレイサーチパターンオブジェクトのハンドルを返します。
            ライセンスエラー、未初期化エラー、パラメータエラー、またはメモリ不足により生成できなかったときはNULLを返します。
    """
    raise NotImplementedError

def gs2_pattern_alloc(himage, hmask, mark_offsetx, mark_offsety, filter=F_COMP_MODE_AVERAGE2, errorcode=None):
    r"""FHANDLE FVALGAPI fnFIE_gs2_pattern_alloc( FHANDLE himage, FHANDLE hmask, INT mark_offsetx, INT mark_offsety, enum f_comp_filter filter, INT* errorcode )
    グレイサーチパターンオブジェクトの生成

    Params:
    -  [in] himage          サーチパターンにする画像オブジェクト ( type: uc8 )
    -  [in] hmask           マスクにする画像オブジェクト ( type: bin, uc8 )
                                NULLを投入するとマスクなしのパターンになります。
    -  [in] mark_offsetx        回答Ｘ座標オフセット(100倍値)
    -  [in] mark_offsety        回答Ｙ座標オフセット(100倍値)
    -  [in] filter          内部で画像ピラミッドの生成に使うフィルタの種別
                                - F_COMP_MODE_SMOOTH    通常（平均）フィルタ 特に問題なければこれを指定
                                - F_COMP_MODE_MIN       最小値フィルタ パタンが黒い細線で構成されているような場合に指定
                                - F_COMP_MODE_MAX       最大値フィルタ パタンが白い細線で構成されているような場合に指定
                                - F_COMP_MODE_AVERAGE2  再平均フィルタ パタンにカメラノイズが多い場合に指定
    -  [out] errorcode      エラーコード。エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                - F_ERR_NONE            正常終了
                                - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
                                - F_ERR_NOMEMORY        メモリ不足
                                - F_ERR_INVALID_OBJECT  渡されたオブジェクトの種別が異常
                                - F_ERR_GS_NO_CONTRAST  パタン画像に情報が足りないため、パタンにならない。
                                    （==マスク部をのぞいた画像の濃度分散が0.0になる）
                                - F_ERR_INVALID_IMAGE       対応していない画像が渡された
                                    -  hmask と  himage のサイズが違う
                                    - 非対応画像type
                                    - チャネル数が1でない
                                    - 入力画像が大きすぎる
                                - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  himage オブジェクトがNULL
                                    -  filter に異常な値が渡された

    Returns:
    - 正常終了した場合は、生成したグレイサーチパターンオブジェクトのハンドルを返します。
            ライセンスエラー、未初期化エラー、パラメータエラー、またはメモリ不足により生成できなかったときはNULLを返します。
    """

    return _fie.fnFIE_gs2_pattern_alloc(himage, hmask, mark_offsetx, mark_offsety, filter, errorcode)

def fnFIE_gs2_pattern_free(hpattern) -> Any:
    r"""void fnFIE_gs2_pattern_free( FHANDLE hpattern )
    グレイサーチパターンオブジェクトの解放

    Params:
    -  [in]  hpattern  解放するグレイサーチパターンオブジェクト

    Returns:
    """
    raise NotImplementedError

def gs2_pattern_free(hpattern):
    r"""void fnFIE_gs2_pattern_free( FHANDLE hpattern )
    グレイサーチパターンオブジェクトの解放

    Params:
    -  [in]  hpattern  解放するグレイサーチパターンオブジェクト

    Returns:
    """

    return _fie.fnFIE_gs2_pattern_free(hpattern)

def fnFIE_gs2_pattern_copy(hpattern) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_gs2_pattern_copy( FHANDLE hpattern )
    グレイサーチオブジェクトdeep copy

    Params:
    - [in] hpattern 複製元のグレイサーチオブジェクト

    Returns:
    - 正常終了した場合は、生成したグレイサーチオブジェクトのハンドルを返します。
            パラメータエラー、又はメモリ不足により生成できなかったときはNULLを返します。
    """
    raise NotImplementedError

def gs2_pattern_copy(hpattern):
    r"""FHANDLE FVALGAPI fnFIE_gs2_pattern_copy( FHANDLE hpattern )
    グレイサーチオブジェクトdeep copy

    Params:
    - [in] hpattern 複製元のグレイサーチオブジェクト

    Returns:
    - 正常終了した場合は、生成したグレイサーチオブジェクトのハンドルを返します。
            パラメータエラー、又はメモリ不足により生成できなかったときはNULLを返します。
    """

    return _fie.fnFIE_gs2_pattern_copy(hpattern)

def fnFIE_gs2_pattern_set_mask(hpattern, hmask) -> Any:
    r"""INT FVALGAPI fnFIE_gs2_pattern_set_mask( FHANDLE hpattern, FHANDLE hmask )
    パタンマスクの再設定

    Params:
    - [in,out] hpattern   グレイサーチパタンオブジェクト
    - [in]     hmask     新しいマスクにする画像オブジェクト( type : bin, uc8 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  渡されたオブジェクトの種別が異常,またはオブジェクトがNULL
    - F_ERR_GS_NO_CONTRAST  パタン画像に情報が足りないため、パタンにならない。
                                    （==マスク部をのぞいた画像の濃度分散が0.0になる）
    - F_ERR_INVALID_IMAGE       対応していない画像が渡された,または画像がNULL
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  hmask のチャネル数が1でない
                                    -  hmask とパタンのサイズが違う
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gs2_pattern_set_mask(hpattern, hmask):
    r"""INT FVALGAPI fnFIE_gs2_pattern_set_mask( FHANDLE hpattern, FHANDLE hmask )
    パタンマスクの再設定

    Params:
    - [in,out] hpattern   グレイサーチパタンオブジェクト
    - [in]     hmask     新しいマスクにする画像オブジェクト( type : bin, uc8 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  渡されたオブジェクトの種別が異常,またはオブジェクトがNULL
    - F_ERR_GS_NO_CONTRAST  パタン画像に情報が足りないため、パタンにならない。
                                    （==マスク部をのぞいた画像の濃度分散が0.0になる）
    - F_ERR_INVALID_IMAGE       対応していない画像が渡された,または画像がNULL
    - F_ERR_INVALID_PARAM       パラメータ異常
                                    -  hmask のチャネル数が1でない
                                    -  hmask とパタンのサイズが違う
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gs2_pattern_set_mask(hpattern, hmask)

def fnFIE_gs2_pattern_unset_mask(hpattern) -> Any:
    r"""INT FVALGAPI fnFIE_gs2_pattern_unset_mask( FHANDLE hpattern )
    パタンマスクの除去

    Params:
    - [in,out] hpattern   グレイサーチパタンオブジェクト

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       引数異常
    - F_ERR_INVALID_OBJECT  パタンオブジェクト以外が渡された,またはオブジェクトがNULL
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_GS_NO_CONTRAST  パタン画像に情報が足りないため、パタンにならない。
                                    （==画像の濃度分散が0.0になる）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gs2_pattern_unset_mask(hpattern):
    r"""INT FVALGAPI fnFIE_gs2_pattern_unset_mask( FHANDLE hpattern )
    パタンマスクの除去

    Params:
    - [in,out] hpattern   グレイサーチパタンオブジェクト

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       引数異常
    - F_ERR_INVALID_OBJECT  パタンオブジェクト以外が渡された,またはオブジェクトがNULL
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_GS_NO_CONTRAST  パタン画像に情報が足りないため、パタンにならない。
                                    （==画像の濃度分散が0.0になる）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gs2_pattern_unset_mask(hpattern)

def fnFIE_gs2_pattern_rotate(hpattern, rot_angle, clip_width, clip_height, rotate_method, rotate_pattern) -> Any:
    r"""INT FVALGAPI fnFIE_gs2_pattern_rotate( FHANDLE hpattern, INT rot_angle, INT clip_width, INT clip_height, INT rotate_method, FHANDLE* rotate_pattern )
    回転パターンの生成

    Params:
    - [in]  hpattern        参考にするパターン
    - [in]  rot_angle       回転角 degreeの10倍値
    - [in]  clip_width      回転パターン幅の上限
    - [in]  clip_height     回転パターン高さの上限
    - [in]  rotate_method   回転の方法
                                 - 0 または 1 NN法
                                 - 2 bilinear法
    - [out] rotate_pattern  新たに作成する回転済みパターンへのポインタ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       引数異常
    - F_ERR_INVALID_OBJECT  入力オブジェクト異常
    - F_ERR_INVALID_IMAGE       入力したパターン内の画像が大きすぎる
    - F_ERR_GS_NO_CONTRAST  パタン画像に情報が足りないため、パタンにならない。
                                    （==画像の濃度分散が0.0になる）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gs2_pattern_rotate(hpattern, rot_angle, clip_width=I32_MAX, clip_height=I32_MAX, rotate_method=2, rotate_pattern=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_gs2_pattern_rotate( FHANDLE hpattern, INT rot_angle, INT clip_width, INT clip_height, INT rotate_method, FHANDLE* rotate_pattern )
    回転パターンの生成

    Params:
    - [in]  hpattern        参考にするパターン
    - [in]  rot_angle       回転角 degreeの10倍値
    - [in]  clip_width      回転パターン幅の上限
    - [in]  clip_height     回転パターン高さの上限
    - [in]  rotate_method   回転の方法
                                 - 0 または 1 NN法
                                 - 2 bilinear法
    - [out] rotate_pattern  新たに作成する回転済みパターンへのポインタ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       引数異常
    - F_ERR_INVALID_OBJECT  入力オブジェクト異常
    - F_ERR_INVALID_IMAGE       入力したパターン内の画像が大きすぎる
    - F_ERR_GS_NO_CONTRAST  パタン画像に情報が足りないため、パタンにならない。
                                    （==画像の濃度分散が0.0になる）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if rotate_pattern is REQUIRED_PLACEHOLDER: raise TypeError("argument 'rotate_pattern' is missing")
    return _fie.fnFIE_gs2_pattern_rotate(hpattern, rot_angle, clip_width, clip_height, rotate_method, rotate_pattern)

def fnFIE_gs2_pattern_get_image(hpattern, himage) -> Any:
    r"""INT FVALGAPI fnFIE_gs2_pattern_get_image( FHANDLE hpattern, FHANDLE* himage )
    パターン画像を取得する

    Params:
    - [in]  hpattern    グレイサーチパターンオブジェクト
    - [out] himage      パタン画像 ( type: uc8 )
                                 himage はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_INVALID_PARAM       引数異常
    - F_ERR_INVALID_OBJECT  パタンでないオブジェクトが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NONE                正常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gs2_pattern_get_image(hpattern, himage):
    r"""INT FVALGAPI fnFIE_gs2_pattern_get_image( FHANDLE hpattern, FHANDLE* himage )
    パターン画像を取得する

    Params:
    - [in]  hpattern    グレイサーチパターンオブジェクト
    - [out] himage      パタン画像 ( type: uc8 )
                                 himage はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_INVALID_PARAM       引数異常
    - F_ERR_INVALID_OBJECT  パタンでないオブジェクトが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NONE                正常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gs2_pattern_get_image(hpattern, himage)

def fnFIE_gs2_pattern_get_mask(hpattern, himage) -> Any:
    r"""INT FVALGAPI fnFIE_gs2_pattern_get_mask( FHANDLE hpattern, FHANDLE* himage )
    マスク画像を取得する

    Params:
    - [in]      hpattern    グレイサーチパターンオブジェクト
    - [out]     himage      マスク画像 ( type: bin )
                                 himage はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_INVALID_PARAM       引数異常またはマスクが存在しない
    - F_ERR_INVALID_OBJECT  オブジェクト異常
    - F_ERR_NONE                正常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gs2_pattern_get_mask(hpattern, himage):
    r"""INT FVALGAPI fnFIE_gs2_pattern_get_mask( FHANDLE hpattern, FHANDLE* himage )
    マスク画像を取得する

    Params:
    - [in]      hpattern    グレイサーチパターンオブジェクト
    - [out]     himage      マスク画像 ( type: bin )
                                 himage はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_INVALID_PARAM       引数異常またはマスクが存在しない
    - F_ERR_INVALID_OBJECT  オブジェクト異常
    - F_ERR_NONE                正常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gs2_pattern_get_mask(hpattern, himage)

def fnFIE_gs2_pattern_get_comp_filter(hpattern, filter) -> Any:
    r"""INT FVALGAPI fnFIE_gs2_pattern_get_comp_filter( FHANDLE hpattern, enum f_comp_filter* filter )
    圧縮フィルタ種別の取得

    Params:
    -  [in]  hpattern   グレイサーチパターンオブジェクト
    -  [out] filter     圧縮フィルタ種別

    Returns:
    - F_ERR_INVALID_PARAM       引数異常
    - F_ERR_INVALID_OBJECT  パタン以外のオブジェクトが渡された
    - F_ERR_NONE                正常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gs2_pattern_get_comp_filter(hpattern, filter):
    r"""INT FVALGAPI fnFIE_gs2_pattern_get_comp_filter( FHANDLE hpattern, enum f_comp_filter* filter )
    圧縮フィルタ種別の取得

    Params:
    -  [in]  hpattern   グレイサーチパターンオブジェクト
    -  [out] filter     圧縮フィルタ種別

    Returns:
    - F_ERR_INVALID_PARAM       引数異常
    - F_ERR_INVALID_OBJECT  パタン以外のオブジェクトが渡された
    - F_ERR_NONE                正常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gs2_pattern_get_comp_filter(hpattern, filter)

def fnFIE_gs2_pattern_get_offset(hpattern, x, y) -> Any:
    r"""INT FVALGAPI fnFIE_gs2_pattern_get_offset( FHANDLE hpattern, INT* x, INT* y )
    通知座標オフセットの取得

    Params:
    -  [in]  hpattern   グレイサーチパターンオブジェクト
    -  [out] x          水平方向通知座標オフセット(100倍値)
    -  [out] y          垂直方向通知座標オフセット(100倍値)

    Returns:
    - F_ERR_INVALID_PARAM   引数異常
    - F_ERR_INVALID_OBJECT  パタン以外のオブジェクトが渡された
    - F_ERR_NONE                正常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gs2_pattern_get_offset(hpattern, x, y):
    r"""INT FVALGAPI fnFIE_gs2_pattern_get_offset( FHANDLE hpattern, INT* x, INT* y )
    通知座標オフセットの取得

    Params:
    -  [in]  hpattern   グレイサーチパターンオブジェクト
    -  [out] x          水平方向通知座標オフセット(100倍値)
    -  [out] y          垂直方向通知座標オフセット(100倍値)

    Returns:
    - F_ERR_INVALID_PARAM   引数異常
    - F_ERR_INVALID_OBJECT  パタン以外のオブジェクトが渡された
    - F_ERR_NONE                正常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gs2_pattern_get_offset(hpattern, x, y)

def fnFIE_gs2_pattern_set_offset(hpattern, x, y) -> Any:
    r"""INT FVALGAPI fnFIE_gs2_pattern_set_offset( FHANDLE hpattern, INT x, INT y )
    通知座標オフセットの設定

    Params:
    -  [in,out] hpattern    グレイサーチパターンオブジェクト
    -  [in]     x           水平方向通知座標オフセット(100倍値)
    -  [in]     y           垂直方向通知座標オフセット(100倍値)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  パタン以外のオブジェクトが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gs2_pattern_set_offset(hpattern, x, y):
    r"""INT FVALGAPI fnFIE_gs2_pattern_set_offset( FHANDLE hpattern, INT x, INT y )
    通知座標オフセットの設定

    Params:
    -  [in,out] hpattern    グレイサーチパターンオブジェクト
    -  [in]     x           水平方向通知座標オフセット(100倍値)
    -  [in]     y           垂直方向通知座標オフセット(100倍値)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  パタン以外のオブジェクトが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gs2_pattern_set_offset(hpattern, x, y)

def fnFIE_gs2_pattern_set_comp_filter(hpattern, filter) -> Any:
    r"""INT FVALGAPI fnFIE_gs2_pattern_set_comp_filter( FHANDLE hpattern, enum f_comp_filter filter )
    圧縮フィルタの変更

    Params:
    -  [in,out] hpattern    グレイサーチパターンオブジェクト
    -  [in]     filter      圧縮フィルタの種別
                                 - F_COMP_MODE_SMOOTH   通常 2x2（平均）フィルタ 特に問題なければこれを指定
                                 - F_COMP_MODE_MIN      最小値フィルタ パタンが黒い細線で構成されているような場合に指定
                                 - F_COMP_MODE_MAX      最大値フィルタ パタンが白い細線で構成されているような場合に指定
                                 - F_COMP_MODE_AVERAGE2 再平均フィルタ パタンにカメラノイズが多い場合に指定

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       引数異常
    - F_ERR_INVALID_OBJECT  オブジェクト異常
    - F_ERR_GS_NO_CONTRAST  パタン画像の分散が0になるため、パタンにならない。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gs2_pattern_set_comp_filter(hpattern, filter):
    r"""INT FVALGAPI fnFIE_gs2_pattern_set_comp_filter( FHANDLE hpattern, enum f_comp_filter filter )
    圧縮フィルタの変更

    Params:
    -  [in,out] hpattern    グレイサーチパターンオブジェクト
    -  [in]     filter      圧縮フィルタの種別
                                 - F_COMP_MODE_SMOOTH   通常 2x2（平均）フィルタ 特に問題なければこれを指定
                                 - F_COMP_MODE_MIN      最小値フィルタ パタンが黒い細線で構成されているような場合に指定
                                 - F_COMP_MODE_MAX      最大値フィルタ パタンが白い細線で構成されているような場合に指定
                                 - F_COMP_MODE_AVERAGE2 再平均フィルタ パタンにカメラノイズが多い場合に指定

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       引数異常
    - F_ERR_INVALID_OBJECT  オブジェクト異常
    - F_ERR_GS_NO_CONTRAST  パタン画像の分散が0になるため、パタンにならない。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gs2_pattern_set_comp_filter(hpattern, filter)

def fnFIE_gs2_pattern_get_comp_image(hpattern, unit, himage) -> Any:
    r"""INT FVALGAPI fnFIE_gs2_pattern_get_comp_image( FHANDLE hpattern, INT unit, FHANDLE* himage )
    圧縮画像を取得する

    Params:
    - [in]  hpattern    グレイサーチパターンオブジェクト
    - [in]  unit        圧縮度( 0 〜 9 )
    - [out] himage      パタン画像 ( type: uc8 )
                                 himage はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_INVALID_PARAM       引数異常、または指定した圧縮度に該当するパタン画像がない
    - F_ERR_INVALID_OBJECT  パタンでないオブジェクトが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NONE                正常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def gs2_pattern_get_comp_image(hpattern, unit, himage):
    r"""INT FVALGAPI fnFIE_gs2_pattern_get_comp_image( FHANDLE hpattern, INT unit, FHANDLE* himage )
    圧縮画像を取得する

    Params:
    - [in]  hpattern    グレイサーチパターンオブジェクト
    - [in]  unit        圧縮度( 0 〜 9 )
    - [out] himage      パタン画像 ( type: uc8 )
                                 himage はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_INVALID_PARAM       引数異常、または指定した圧縮度に該当するパタン画像がない
    - F_ERR_INVALID_OBJECT  パタンでないオブジェクトが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NONE                正常終了
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_gs2_pattern_get_comp_image(hpattern, unit, himage)

def fnFIE_qr_alloc_obj(pfQRCObj) -> Any:
    r"""INT FVALGAPI fnFIE_qr_alloc_obj( FHANDLE* pfQRCObj )
    [OSS] QRコードオブジェクトの生成

    Params:
    - [in] pfQRCObj     QRコードオブジェクトのポインタ。関数エントリー時には  *pfQRCObj を NULL で初期化してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_alloc_obj(pfQRCObj):
    r"""INT FVALGAPI fnFIE_qr_alloc_obj( FHANDLE* pfQRCObj )
    [OSS] QRコードオブジェクトの生成

    Params:
    - [in] pfQRCObj     QRコードオブジェクトのポインタ。関数エントリー時には  *pfQRCObj を NULL で初期化してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_alloc_obj(pfQRCObj)

def fnFIE_qr_execute(fQRCObj, fimg) -> Any:
    r"""INT FVALGAPI fnFIE_qr_execute( FHANDLE fQRCObj, FHANDLE fimg )
    [OSS] QRコード デコード関数

    Params:
    - [in,out] fQRCObj  QRコードオブジェクト
    - [in] fimg     入力画像(type:UC8/ch:1)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_IMAGE  画像オブジェクトの異常
    - F_ERR_NOMEMORY       メモリ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_execute(fQRCObj, fimg):
    r"""INT FVALGAPI fnFIE_qr_execute( FHANDLE fQRCObj, FHANDLE fimg )
    [OSS] QRコード デコード関数

    Params:
    - [in,out] fQRCObj  QRコードオブジェクト
    - [in] fimg     入力画像(type:UC8/ch:1)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_IMAGE  画像オブジェクトの異常
    - F_ERR_NOMEMORY       メモリ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_execute(fQRCObj, fimg)

def fnFIE_qr_free_obj(fQRCObj) -> Any:
    r"""void fnFIE_qr_free_obj( FHANDLE fQRCObj )
    [OSS] QRコードオブジェクトの解放

    Params:
    - [in] fQRCObj  QRコードオブジェクト

    Returns:
    """
    raise NotImplementedError

def qr_free_obj(fQRCObj):
    r"""void fnFIE_qr_free_obj( FHANDLE fQRCObj )
    [OSS] QRコードオブジェクトの解放

    Params:
    - [in] fQRCObj  QRコードオブジェクト

    Returns:
    """

    return _fie.fnFIE_qr_free_obj(fQRCObj)

def fnFIE_qr_reset_obj(fQRCObj) -> Any:
    r"""INT FVALGAPI fnFIE_qr_reset_obj( FHANDLE fQRCObj )
    [OSS] QRコードオブジェクトの初期化

    Params:


    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_reset_obj(fQRCObj):
    r"""INT FVALGAPI fnFIE_qr_reset_obj( FHANDLE fQRCObj )
    [OSS] QRコードオブジェクトの初期化

    Params:


    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_reset_obj(fQRCObj)

def fnFIE_qr_add_offsets(fQRCObj, iOffsetX, iOffsetY) -> Any:
    r"""INT FVALGAPI fnFIE_qr_add_offsets( FHANDLE fQRCObj, INT iOffsetX, INT iOffsetY )
    [OSS] QRコード検出位置に加味するオフセット量の設定

    Params:
    - [in,out] fQRCObj      QRコードオブジェクト
    - [in] iOffsetX     検出位置に足されるオフセット量Ｘ
    - [in] iOffsetY     検出位置に足されるオフセット量Ｙ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_add_offsets(fQRCObj, iOffsetX, iOffsetY):
    r"""INT FVALGAPI fnFIE_qr_add_offsets( FHANDLE fQRCObj, INT iOffsetX, INT iOffsetY )
    [OSS] QRコード検出位置に加味するオフセット量の設定

    Params:
    - [in,out] fQRCObj      QRコードオブジェクト
    - [in] iOffsetX     検出位置に足されるオフセット量Ｘ
    - [in] iOffsetY     検出位置に足されるオフセット量Ｙ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_add_offsets(fQRCObj, iOffsetX, iOffsetY)

def fnFIE_qr_copy_obj(fQRCObj) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_qr_copy_obj( FHANDLE fQRCObj )
    [OSS] QRコードオブジェクトのコピー

    Params:


    Returns:
    """
    raise NotImplementedError

def qr_copy_obj(fQRCObj):
    r"""FHANDLE FVALGAPI fnFIE_qr_copy_obj( FHANDLE fQRCObj )
    [OSS] QRコードオブジェクトのコピー

    Params:


    Returns:
    """

    return _fie.fnFIE_qr_copy_obj(fQRCObj)

def fnFIE_qr_set_binwinsize(fQRCObj, iWinSize) -> Any:
    r"""INT FVALGAPI fnFIE_qr_set_binwinsize( FHANDLE fQRCObj, INT iWinSize )
    [OSS] QRコード検出時の２値化ウィンドウサイズ

    Params:
    - [in,out] fQRCObj      QRコードオブジェクト
    - [in]     iWinSize     ２値化ウィンドウサイズ(初期値:11, 3≦ iWinSize≦15,  iWinSize は奇数)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_set_binwinsize(fQRCObj, iWinSize):
    r"""INT FVALGAPI fnFIE_qr_set_binwinsize( FHANDLE fQRCObj, INT iWinSize )
    [OSS] QRコード検出時の２値化ウィンドウサイズ

    Params:
    - [in,out] fQRCObj      QRコードオブジェクト
    - [in]     iWinSize     ２値化ウィンドウサイズ(初期値:11, 3≦ iWinSize≦15,  iWinSize は奇数)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_set_binwinsize(fQRCObj, iWinSize)

def fnFIE_qr_get_binwinsize(fQRCObj, piWinSize) -> Any:
    r"""INT FVALGAPI fnFIE_qr_get_binwinsize( FHANDLE fQRCObj, INT* piWinSize )
    [OSS] ２値化ウィンドウサイズの取得

    Params:
    - [in] fQRCObj      QRコードオブジェクト
    - [out] piWinSize   ２値化ウィンドウサイズ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_get_binwinsize(fQRCObj, piWinSize):
    r"""INT FVALGAPI fnFIE_qr_get_binwinsize( FHANDLE fQRCObj, INT* piWinSize )
    [OSS] ２値化ウィンドウサイズの取得

    Params:
    - [in] fQRCObj      QRコードオブジェクト
    - [out] piWinSize   ２値化ウィンドウサイズ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_get_binwinsize(fQRCObj, piWinSize)

def fnFIE_qr_set_minvar(fQRCObj, iBinMinVar) -> Any:
    r"""INT FVALGAPI fnFIE_qr_set_minvar( FHANDLE fQRCObj, INT iBinMinVar )
    [OSS] QRコード２値化分散しきい値の設定

    Params:
    - [in,out] fQRCObj       QRコードオブジェクト
    - [in] iBinMinVar        ２値化最小分散値 (初期値:1000, 0≦ iBinMinVar)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_set_minvar(fQRCObj, iBinMinVar):
    r"""INT FVALGAPI fnFIE_qr_set_minvar( FHANDLE fQRCObj, INT iBinMinVar )
    [OSS] QRコード２値化分散しきい値の設定

    Params:
    - [in,out] fQRCObj       QRコードオブジェクト
    - [in] iBinMinVar        ２値化最小分散値 (初期値:1000, 0≦ iBinMinVar)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_set_minvar(fQRCObj, iBinMinVar)

def fnFIE_qr_get_minvar(fQRCObj, piBinMinVar) -> Any:
    r"""INT FVALGAPI fnFIE_qr_get_minvar( FHANDLE fQRCObj, INT* piBinMinVar )
    [OSS] ２値化分散しきい値の取得

    Params:
    - [in] fQRCObj      QRコードオブジェクト
    - [out] piBinMinVar ２値化分散しきい値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_get_minvar(fQRCObj, piBinMinVar):
    r"""INT FVALGAPI fnFIE_qr_get_minvar( FHANDLE fQRCObj, INT* piBinMinVar )
    [OSS] ２値化分散しきい値の取得

    Params:
    - [in] fQRCObj      QRコードオブジェクト
    - [out] piBinMinVar ２値化分散しきい値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_get_minvar(fQRCObj, piBinMinVar)

def fnFIE_qr_set_effortlevel(fQRCObj, iEffortLevel) -> Any:
    r"""INT FVALGAPI fnFIE_qr_set_effortlevel( FHANDLE fQRCObj, enum f_qr_mode iEffortLevel )
    [OSS] 動作モードの設定

    Params:
    - [in,out] fQRCObj       QRコードオブジェクト
    - [in]     EffortLevel  動作モード
                            - F_QR_NORMAL_EFFORT  通常検出モード
                            - F_QR_MAXIMUM_EFFORT 最大検出モード

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_set_effortlevel(fQRCObj, iEffortLevel):
    r"""INT FVALGAPI fnFIE_qr_set_effortlevel( FHANDLE fQRCObj, enum f_qr_mode iEffortLevel )
    [OSS] 動作モードの設定

    Params:
    - [in,out] fQRCObj       QRコードオブジェクト
    - [in]     EffortLevel  動作モード
                            - F_QR_NORMAL_EFFORT  通常検出モード
                            - F_QR_MAXIMUM_EFFORT 最大検出モード

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_set_effortlevel(fQRCObj, iEffortLevel)

def fnFIE_qr_get_effortlevel(fQRCObj, piEffortLevel) -> Any:
    r"""INT FVALGAPI fnFIE_qr_get_effortlevel( FHANDLE fQRCObj, enum f_qr_mode* piEffortLevel )
    [OSS] 動作モードの取得

    Params:
    - [in] fQRCObj          QRコードオブジェクト
    - [out] piEffortLevel   設定している動作モード
                            - F_QR_NORMAL_EFFORT  通常検出モード
                            - F_QR_MAXIMUM_EFFORT 最大検出モード

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_get_effortlevel(fQRCObj, piEffortLevel):
    r"""INT FVALGAPI fnFIE_qr_get_effortlevel( FHANDLE fQRCObj, enum f_qr_mode* piEffortLevel )
    [OSS] 動作モードの取得

    Params:
    - [in] fQRCObj          QRコードオブジェクト
    - [out] piEffortLevel   設定している動作モード
                            - F_QR_NORMAL_EFFORT  通常検出モード
                            - F_QR_MAXIMUM_EFFORT 最大検出モード

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_get_effortlevel(fQRCObj, piEffortLevel)

def fnFIE_qr_query_decoded(fQRCObj, ppiDecodedQRIndex, piNoOfDecodedQRs) -> Any:
    r"""INT FVALGAPI fnFIE_qr_query_decoded( FHANDLE fQRCObj, const INT** ppiDecodedQRIndex, INT* piNoOfDecodedQRs )
    [OSS] QRコード検出個数とインデックス配列の取得

    Params:
    - [in] fQRCObj              QRコードオブジェクト
    - [out] ppiDecodedQRIndex   正常に読み取ることができたQRコードインデックス配列の参照。関数エントリー時には  *ppiDecodedQRIndex を NULL で初期化してください。
    - [out] piNumOfDecodedQRs   正常に読み取ることができたQRコード数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_query_decoded(fQRCObj, ppiDecodedQRIndex, piNoOfDecodedQRs):
    r"""INT FVALGAPI fnFIE_qr_query_decoded( FHANDLE fQRCObj, const INT** ppiDecodedQRIndex, INT* piNoOfDecodedQRs )
    [OSS] QRコード検出個数とインデックス配列の取得

    Params:
    - [in] fQRCObj              QRコードオブジェクト
    - [out] ppiDecodedQRIndex   正常に読み取ることができたQRコードインデックス配列の参照。関数エントリー時には  *ppiDecodedQRIndex を NULL で初期化してください。
    - [out] piNumOfDecodedQRs   正常に読み取ることができたQRコード数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_query_decoded(fQRCObj, ppiDecodedQRIndex, piNoOfDecodedQRs)

def fnFIE_qr_query_undecoded(fQRCObj, ppiUndecodedQRIndex, piNoOfUndecodedQRs) -> Any:
    r"""INT FVALGAPI fnFIE_qr_query_undecoded( FHANDLE fQRCObj, const INT** ppiUndecodedQRIndex, INT* piNoOfUndecodedQRs )
    [OSS] デコードに失敗したQRコード個数とインデックス配列の取得

    Params:
    - [in] fQRCObj              QRコードオブジェクト
    - [out] ppiUndecodedQRIndex デコードに失敗したQRコードインデックス配列の参照。関数エントリー時には  *ppiUndecodedQRIndex を NULL で初期化してください。
    - [out] piNumOfUndecodedQRs デコードに失敗したQRコード数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_query_undecoded(fQRCObj, ppiUndecodedQRIndex, piNoOfUndecodedQRs):
    r"""INT FVALGAPI fnFIE_qr_query_undecoded( FHANDLE fQRCObj, const INT** ppiUndecodedQRIndex, INT* piNoOfUndecodedQRs )
    [OSS] デコードに失敗したQRコード個数とインデックス配列の取得

    Params:
    - [in] fQRCObj              QRコードオブジェクト
    - [out] ppiUndecodedQRIndex デコードに失敗したQRコードインデックス配列の参照。関数エントリー時には  *ppiUndecodedQRIndex を NULL で初期化してください。
    - [out] piNumOfUndecodedQRs デコードに失敗したQRコード数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_query_undecoded(fQRCObj, ppiUndecodedQRIndex, piNoOfUndecodedQRs)

def fnFIE_qr_query_message(fQRCObj, iIndex, ppcMessage) -> Any:
    r"""INT FVALGAPI fnFIE_qr_query_message( FHANDLE fQRCObj, INT iIndex, const CHAR** ppcMessage )
    [OSS] QRコードのメッセージの参照

    Params:
    - [in]  fQRCObj     QRコードオブジェクト
    - [in]  iIndex      検出したQRコードインデックス配列の参照位置。(0≦ iIndex＜位置検出できたQRコード数)
    - [out] ppcMessage  読み取ったQRコードメッセージ。関数エントリー時には  *ppcMessage を NULL で初期化してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NODATA         メッセージがありません( iIndex にデコードに失敗した値を指定)
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_query_message(fQRCObj, iIndex, ppcMessage):
    r"""INT FVALGAPI fnFIE_qr_query_message( FHANDLE fQRCObj, INT iIndex, const CHAR** ppcMessage )
    [OSS] QRコードのメッセージの参照

    Params:
    - [in]  fQRCObj     QRコードオブジェクト
    - [in]  iIndex      検出したQRコードインデックス配列の参照位置。(0≦ iIndex＜位置検出できたQRコード数)
    - [out] ppcMessage  読み取ったQRコードメッセージ。関数エントリー時には  *ppcMessage を NULL で初期化してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NODATA         メッセージがありません( iIndex にデコードに失敗した値を指定)
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_query_message(fQRCObj, iIndex, ppcMessage)

def fnFIE_qr_query_center(fQRCObj, iIndex, pdCenterX, pdCenterY) -> Any:
    r"""INT FVALGAPI fnFIE_qr_query_center( FHANDLE fQRCObj, INT iIndex, DOUBLE* pdCenterX, DOUBLE* pdCenterY )
    [OSS] 読み取りに成功したQRコードの中心位置を取得

    Params:
    - [in]  fQRCObj     QRコードオブジェクト
    - [in]  iIndex      検出したQRコードインデックス配列の参照位置(0≦ iIndex＜位置検出できたQRコード数)
    - [out] pdCenterX   QRコードの中心 X 座標
    - [out] pdCenterY   QRコードの中心 Y 座標

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_query_center(fQRCObj, iIndex, pdCenterX, pdCenterY):
    r"""INT FVALGAPI fnFIE_qr_query_center( FHANDLE fQRCObj, INT iIndex, DOUBLE* pdCenterX, DOUBLE* pdCenterY )
    [OSS] 読み取りに成功したQRコードの中心位置を取得

    Params:
    - [in]  fQRCObj     QRコードオブジェクト
    - [in]  iIndex      検出したQRコードインデックス配列の参照位置(0≦ iIndex＜位置検出できたQRコード数)
    - [out] pdCenterX   QRコードの中心 X 座標
    - [out] pdCenterY   QRコードの中心 Y 座標

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_query_center(fQRCObj, iIndex, pdCenterX, pdCenterY)

def fnFIE_qr_query_size(fQRCObj, iIndex, piQRSize) -> Any:
    r"""INT FVALGAPI fnFIE_qr_query_size( FHANDLE fQRCObj, INT iIndex, INT* piQRSize )
    [OSS] 位置検出したQRコードのサイズの取得

    Params:
    - [in]  fQRCObj  QRコードオブジェクト
    - [in]  iIndex   検出したQRコードインデックス配列の参照位置(0≦ iIndex＜位置検出できたQRコード数)
    - [out] piQRSize QRコードサイズ(=１辺のセル個数(21〜177) )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_query_size(fQRCObj, iIndex, piQRSize):
    r"""INT FVALGAPI fnFIE_qr_query_size( FHANDLE fQRCObj, INT iIndex, INT* piQRSize )
    [OSS] 位置検出したQRコードのサイズの取得

    Params:
    - [in]  fQRCObj  QRコードオブジェクト
    - [in]  iIndex   検出したQRコードインデックス配列の参照位置(0≦ iIndex＜位置検出できたQRコード数)
    - [out] piQRSize QRコードサイズ(=１辺のセル個数(21〜177) )

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_query_size(fQRCObj, iIndex, piQRSize)

def fnFIE_qr_query_appts(fQRCObj, iIndex, ppfmatAPPos) -> Any:
    r"""INT FVALGAPI fnFIE_qr_query_appts( FHANDLE fQRCObj, INT iIndex, FMATRIX** ppfmatAPPos )
    [OSS] 読み取りに成功したQRコードのファインダーパタン、アライメントパタンの中心位置の参照

    Params:
    - [in] fQRCObj      QRコードオブジェクト
    - [in] iIndex       検出したQRコードインデックス配列の参照位置(0≦ iIndex＜位置検出できたQRコード数)
    - [out] ppfmatAPPos アライメントパタン中心座標( x, y)の参照。関数エントリー時には  *ppfmatAPPos を NULL で初期化してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_query_appts(fQRCObj, iIndex, ppfmatAPPos):
    r"""INT FVALGAPI fnFIE_qr_query_appts( FHANDLE fQRCObj, INT iIndex, FMATRIX** ppfmatAPPos )
    [OSS] 読み取りに成功したQRコードのファインダーパタン、アライメントパタンの中心位置の参照

    Params:
    - [in] fQRCObj      QRコードオブジェクト
    - [in] iIndex       検出したQRコードインデックス配列の参照位置(0≦ iIndex＜位置検出できたQRコード数)
    - [out] ppfmatAPPos アライメントパタン中心座標( x, y)の参照。関数エントリー時には  *ppfmatAPPos を NULL で初期化してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_query_appts(fQRCObj, iIndex, ppfmatAPPos)

def fnFIE_qr_query_cellones(fQRCObj, iIndex, ppfmatOneCells) -> Any:
    r"""INT FVALGAPI fnFIE_qr_query_cellones( FHANDLE fQRCObj, INT iIndex, FMATRIX** ppfmatOneCells )
    [OSS] 読み取りに成功したQRコードのセル位置情報の参照

    Params:
    - [in] fQRCObj          QRコードオブジェクト
    - [in]  iIndex          検出したQRコードインデックス配列の参照位置(0≦ iIndex＜位置検出できたQRコード数)
    - [out] ppfmatCellOnes  セルが存在する位置情報( x, y)の列ベクトルの参照。関数エントリー時には  *ppfmatCellOnes を NULL で初期化してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_query_cellones(fQRCObj, iIndex, ppfmatOneCells):
    r"""INT FVALGAPI fnFIE_qr_query_cellones( FHANDLE fQRCObj, INT iIndex, FMATRIX** ppfmatOneCells )
    [OSS] 読み取りに成功したQRコードのセル位置情報の参照

    Params:
    - [in] fQRCObj          QRコードオブジェクト
    - [in]  iIndex          検出したQRコードインデックス配列の参照位置(0≦ iIndex＜位置検出できたQRコード数)
    - [out] ppfmatCellOnes  セルが存在する位置情報( x, y)の列ベクトルの参照。関数エントリー時には  *ppfmatCellOnes を NULL で初期化してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_query_cellones(fQRCObj, iIndex, ppfmatOneCells)

def fnFIE_qr_query_mincellwidth(fQRCObj, iIndex, pdMinCellWidth) -> Any:
    r"""INT FVALGAPI fnFIE_qr_query_mincellwidth( FHANDLE fQRCObj, INT iIndex, DOUBLE* pdMinCellWidth )
    [OSS] 検出したQRコードの最小セルサイズの取得

    Params:
    - [in] fQRCObj          QRコードオブジェクト
    - [in] iIndex           検出したQRコードインデックス配列の参照位置(0≦ iIndex＜位置検出できたQRコード数)
    - [out] pdMinCellWidth  最小セル幅

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_query_mincellwidth(fQRCObj, iIndex, pdMinCellWidth):
    r"""INT FVALGAPI fnFIE_qr_query_mincellwidth( FHANDLE fQRCObj, INT iIndex, DOUBLE* pdMinCellWidth )
    [OSS] 検出したQRコードの最小セルサイズの取得

    Params:
    - [in] fQRCObj          QRコードオブジェクト
    - [in] iIndex           検出したQRコードインデックス配列の参照位置(0≦ iIndex＜位置検出できたQRコード数)
    - [out] pdMinCellWidth  最小セル幅

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_query_mincellwidth(fQRCObj, iIndex, pdMinCellWidth)

def fnFIE_qr_query_delimitingpts(fQRCObj, iIndex, ppfmatDelimitingPts) -> Any:
    r"""INT FVALGAPI fnFIE_qr_query_delimitingpts( FHANDLE fQRCObj, INT iIndex, FMATRIX** ppfmatDelimitingPts )
    [OSS] QRコード区切り座標値の参照

    Params:
    - [in] fQRCObj              QRコードオブジェクト
    - [in] iIndex               検出したQRコードインデックス配列の参照位置(0≦ iIndex＜位置検出できたQRコード数)
    - [out] ppfmatDelimitingPts QRコード区切り座標値( x, y)の列ベクトルの参照。関数エントリー時には  *ppfmatDelimitingPts を NULL で初期化してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_query_delimitingpts(fQRCObj, iIndex, ppfmatDelimitingPts):
    r"""INT FVALGAPI fnFIE_qr_query_delimitingpts( FHANDLE fQRCObj, INT iIndex, FMATRIX** ppfmatDelimitingPts )
    [OSS] QRコード区切り座標値の参照

    Params:
    - [in] fQRCObj              QRコードオブジェクト
    - [in] iIndex               検出したQRコードインデックス配列の参照位置(0≦ iIndex＜位置検出できたQRコード数)
    - [out] ppfmatDelimitingPts QRコード区切り座標値( x, y)の列ベクトルの参照。関数エントリー時には  *ppfmatDelimitingPts を NULL で初期化してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_query_delimitingpts(fQRCObj, iIndex, ppfmatDelimitingPts)

def fnFIE_qr_query_timings(fQRCObj, pdExtractFPsTiming, pdGetFPTripletsPairsTiming, pdDecodeTiming, pdExtractAPsTiming, pdBinarizationTiming, pdBlobTiming, pdBlobFPSearchTiming, pdLMTiming, pdTotalTiming) -> Any:
    r"""INT FVALGAPI fnFIE_qr_query_timings( FHANDLE fQRCObj, DOUBLE* pdExtractFPsTiming, DOUBLE* pdGetFPTripletsPairsTiming, DOUBLE* pdDecodeTiming, DOUBLE* pdExtractAPsTiming, DOUBLE* pdBinarizationTiming, DOUBLE* pdBlobTiming, DOUBLE* pdBlobFPSearchTiming, DOUBLE* pdLMTiming, DOUBLE* pdTotalTiming )
    [OSS] QRコード読み取り時間取得

    Params:
    - [in] fQRCObj                              QRコードオブジェクト
    - [out] pdExtractFPsTiming                  ファインダーパタン検出時間
    - [out] pdGetFPTripletsPairsTiming          ファインダーパタンセット検出時間
    - [out] pdDecodeTiming                      ファインダーパタンに対する解読時間
    - [out] pdExtractAPsTiming                  アライメントパタン検出時間
    - [out] pdBinarizationTiming                画像２値化処理時間
    - [out] pdBlobTiming                        ブロブ検出時間
    - [out] pdBlobFPSearchTiming                ファインダーパタンのためのブロブサーチ時間
    - [out] pdLMTiming                          LM法による最適化処理時間
    - [out] pdTotalTiming                       トータル処理時間

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_query_timings(fQRCObj, pdExtractFPsTiming, pdGetFPTripletsPairsTiming, pdDecodeTiming, pdExtractAPsTiming, pdBinarizationTiming, pdBlobTiming, pdBlobFPSearchTiming, pdLMTiming, pdTotalTiming):
    r"""INT FVALGAPI fnFIE_qr_query_timings( FHANDLE fQRCObj, DOUBLE* pdExtractFPsTiming, DOUBLE* pdGetFPTripletsPairsTiming, DOUBLE* pdDecodeTiming, DOUBLE* pdExtractAPsTiming, DOUBLE* pdBinarizationTiming, DOUBLE* pdBlobTiming, DOUBLE* pdBlobFPSearchTiming, DOUBLE* pdLMTiming, DOUBLE* pdTotalTiming )
    [OSS] QRコード読み取り時間取得

    Params:
    - [in] fQRCObj                              QRコードオブジェクト
    - [out] pdExtractFPsTiming                  ファインダーパタン検出時間
    - [out] pdGetFPTripletsPairsTiming          ファインダーパタンセット検出時間
    - [out] pdDecodeTiming                      ファインダーパタンに対する解読時間
    - [out] pdExtractAPsTiming                  アライメントパタン検出時間
    - [out] pdBinarizationTiming                画像２値化処理時間
    - [out] pdBlobTiming                        ブロブ検出時間
    - [out] pdBlobFPSearchTiming                ファインダーパタンのためのブロブサーチ時間
    - [out] pdLMTiming                          LM法による最適化処理時間
    - [out] pdTotalTiming                       トータル処理時間

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_query_timings(fQRCObj, pdExtractFPsTiming, pdGetFPTripletsPairsTiming, pdDecodeTiming, pdExtractAPsTiming, pdBinarizationTiming, pdBlobTiming, pdBlobFPSearchTiming, pdLMTiming, pdTotalTiming)

def fnFIE_qr_set_binarize_method(fQRCObj, mode, threshold) -> Any:
    r"""INT FVALGAPI fnFIE_qr_set_binarize_method( FHANDLE fQRCObj, enum f_qr_binarize_mode mode, INT threshold )
    [OSS] 二値化手法の設定

    Params:
    - [in,out] fQRCObj  QRコードオブジェクト
    - [in] mode 設定する二値化手法
                            - F_QR_BIN_SHIFT_AVERAGE  通常モード　局所領域平均値による二値化を行います。
                            - F_QR_BIN_SHIFT_AVERAGE_OFFSET  オフセット付き局所領域平均値による二値化 　 局所領域平均値に定数を加算した結果を閾値にして二値化を行います。
                            - F_QR_BIN_FIX 固定閾値による二値化を行います。
                            - F_QR_BIN_DISCRIMINATION 大津の判別分析法による二値化を行います。
                            - F_QR_BIN_KITTLER キトラー法による二値化を行います。
    - [in] threshold    二値化手法別の閾値　引数  mode によって以下のように異なります。
                            - F_QR_BIN_SHIFT_AVERAGE の場合 分散閾値を設定します。 fnFIE_qr_set_minvar() で設定する数値と同一で、初期値は1000です。値域は$ 0 \leq threshold $ です。
                            - F_QR_BIN_SHIFT_AVERAGE_OFFSET の場合、局所領域平均値に加算する数値を設定します。20程度を推奨します。 $ (-255 \leq threshold \leq 255 ) $
                            - F_QR_BIN_FIX の場合、二値化閾値そのものを設定します。$ (0 \leq threshold \leq 255) $
                            - F_QR_BIN_DISCRIMINATION の場合、引数は無視されます。
                            - F_QR_BIN_KITTLER の場合、引数は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_set_binarize_method(fQRCObj, mode, threshold):
    r"""INT FVALGAPI fnFIE_qr_set_binarize_method( FHANDLE fQRCObj, enum f_qr_binarize_mode mode, INT threshold )
    [OSS] 二値化手法の設定

    Params:
    - [in,out] fQRCObj  QRコードオブジェクト
    - [in] mode 設定する二値化手法
                            - F_QR_BIN_SHIFT_AVERAGE  通常モード　局所領域平均値による二値化を行います。
                            - F_QR_BIN_SHIFT_AVERAGE_OFFSET  オフセット付き局所領域平均値による二値化 　 局所領域平均値に定数を加算した結果を閾値にして二値化を行います。
                            - F_QR_BIN_FIX 固定閾値による二値化を行います。
                            - F_QR_BIN_DISCRIMINATION 大津の判別分析法による二値化を行います。
                            - F_QR_BIN_KITTLER キトラー法による二値化を行います。
    - [in] threshold    二値化手法別の閾値　引数  mode によって以下のように異なります。
                            - F_QR_BIN_SHIFT_AVERAGE の場合 分散閾値を設定します。 fnFIE_qr_set_minvar() で設定する数値と同一で、初期値は1000です。値域は$ 0 \leq threshold $ です。
                            - F_QR_BIN_SHIFT_AVERAGE_OFFSET の場合、局所領域平均値に加算する数値を設定します。20程度を推奨します。 $ (-255 \leq threshold \leq 255 ) $
                            - F_QR_BIN_FIX の場合、二値化閾値そのものを設定します。$ (0 \leq threshold \leq 255) $
                            - F_QR_BIN_DISCRIMINATION の場合、引数は無視されます。
                            - F_QR_BIN_KITTLER の場合、引数は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_set_binarize_method(fQRCObj, mode, threshold)

def fnFIE_qr_get_binarize_method(fQRCObj, mode, threshold) -> Any:
    r"""INT FVALGAPI fnFIE_qr_get_binarize_method( FHANDLE fQRCObj, enum f_qr_binarize_mode* mode, INT* threshold )
    [OSS] 二値化手法の取得

    Params:
    - [in] fQRCObj  QRコードオブジェクト
    - [out] mode    設定されている二値化手法
                            - F_QR_BIN_SHIFT_AVERAGE  通常モード　局所領域平均値による二値化を行います。
                            - F_QR_BIN_SHIFT_AVERAGE_OFFSET  オフセット付き局所領域平均値による二値化 　 局所領域平均値に定数を加算した結果を閾値にして二値化を行います。
                            - F_QR_BIN_FIX 固定閾値による二値化を行います。
                            - F_QR_BIN_DISCRIMINATION 大津の判別分析法による二値化を行います。
                            - F_QR_BIN_KITTLER キトラー法による二値化を行います。
    - [out] threshold   二値化手法別の閾値　  mode によって以下のように異なります。
                            - F_QR_BIN_SHIFT_AVERAGE の場合 分散閾値を取得します。 fnFIE_qr_get_minvar() で取得する数値と同一です。
                            - F_QR_BIN_SHIFT_AVERAGE_OFFSET の場合、局所領域平均値に加算する数値を返します。
                            - F_QR_BIN_FIX の場合、二値化閾値を返します。
                            - F_QR_BIN_DISCRIMINATION の場合、0が返ります。
                            - F_QR_BIN_KITTLER の場合、0が返ります。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_get_binarize_method(fQRCObj, mode, threshold):
    r"""INT FVALGAPI fnFIE_qr_get_binarize_method( FHANDLE fQRCObj, enum f_qr_binarize_mode* mode, INT* threshold )
    [OSS] 二値化手法の取得

    Params:
    - [in] fQRCObj  QRコードオブジェクト
    - [out] mode    設定されている二値化手法
                            - F_QR_BIN_SHIFT_AVERAGE  通常モード　局所領域平均値による二値化を行います。
                            - F_QR_BIN_SHIFT_AVERAGE_OFFSET  オフセット付き局所領域平均値による二値化 　 局所領域平均値に定数を加算した結果を閾値にして二値化を行います。
                            - F_QR_BIN_FIX 固定閾値による二値化を行います。
                            - F_QR_BIN_DISCRIMINATION 大津の判別分析法による二値化を行います。
                            - F_QR_BIN_KITTLER キトラー法による二値化を行います。
    - [out] threshold   二値化手法別の閾値　  mode によって以下のように異なります。
                            - F_QR_BIN_SHIFT_AVERAGE の場合 分散閾値を取得します。 fnFIE_qr_get_minvar() で取得する数値と同一です。
                            - F_QR_BIN_SHIFT_AVERAGE_OFFSET の場合、局所領域平均値に加算する数値を返します。
                            - F_QR_BIN_FIX の場合、二値化閾値を返します。
                            - F_QR_BIN_DISCRIMINATION の場合、0が返ります。
                            - F_QR_BIN_KITTLER の場合、0が返ります。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT QRコードオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_get_binarize_method(fQRCObj, mode, threshold)

def fnFIE_qr_set_timeout(fQRCObj, timeout) -> Any:
    r"""INT FVALGAPI fnFIE_qr_set_timeout( FHANDLE fQRCObj, DOUBLE timeout )
    [OSS] タイムアウトの設定

    Params:
    - [in]  fQRCObj QRコードオブジェクト
    - [in]  timeout タイムアウト時間(ms) ( timeout >= 0.0 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_set_timeout(fQRCObj, timeout):
    r"""INT FVALGAPI fnFIE_qr_set_timeout( FHANDLE fQRCObj, DOUBLE timeout )
    [OSS] タイムアウトの設定

    Params:
    - [in]  fQRCObj QRコードオブジェクト
    - [in]  timeout タイムアウト時間(ms) ( timeout >= 0.0 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_set_timeout(fQRCObj, timeout)

def fnFIE_qr_get_timeout(fQRCObj, timeout) -> Any:
    r"""INT FVALGAPI fnFIE_qr_get_timeout( FHANDLE fQRCObj, DOUBLE* timeout )
    [OSS] タイムアウトの取得

    Params:
    - [in]  fQRCObj QRコードオブジェクト
    - [out] timeout タイムアウト時間(ms) ( timeout >= 0.0 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def qr_get_timeout(fQRCObj, timeout):
    r"""INT FVALGAPI fnFIE_qr_get_timeout( FHANDLE fQRCObj, DOUBLE* timeout )
    [OSS] タイムアウトの取得

    Params:
    - [in]  fQRCObj QRコードオブジェクト
    - [out] timeout タイムアウト時間(ms) ( timeout >= 0.0 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_qr_get_timeout(fQRCObj, timeout)

def fnFIE_dm_alloc_obj(hdm) -> Any:
    r"""INT FVALGAPI fnFIE_dm_alloc_obj( FHANDLE* hdm )
    [OSS] データマトリックスオブジェクトの生成

    Params:
    - [out] hdm     データマトリックスオブジェクトハンドルへのポインタ。関数エントリー時には  *hdm を NULL で初期化してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_alloc_obj(hdm):
    r"""INT FVALGAPI fnFIE_dm_alloc_obj( FHANDLE* hdm )
    [OSS] データマトリックスオブジェクトの生成

    Params:
    - [out] hdm     データマトリックスオブジェクトハンドルへのポインタ。関数エントリー時には  *hdm を NULL で初期化してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_alloc_obj(hdm)

def fnFIE_dm_free_obj(hdm) -> Any:
    r"""void fnFIE_dm_free_obj( FHANDLE hdm )
    [OSS] データマトリックスオブジェクトの解放

    Params:
    - [in] hdm  データマトリックスオブジェクトハンドル

    Returns:
    """
    raise NotImplementedError

def dm_free_obj(hdm):
    r"""void fnFIE_dm_free_obj( FHANDLE hdm )
    [OSS] データマトリックスオブジェクトの解放

    Params:
    - [in] hdm  データマトリックスオブジェクトハンドル

    Returns:
    """

    return _fie.fnFIE_dm_free_obj(hdm)

def fnFIE_dm_reset_obj(hdm) -> Any:
    r"""INT FVALGAPI fnFIE_dm_reset_obj( FHANDLE hdm )
    [OSS] データマトリックスオブジェクトの初期化

    Params:
    - [in] hdm      データマトリックスオブジェクトハンドル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_reset_obj(hdm):
    r"""INT FVALGAPI fnFIE_dm_reset_obj( FHANDLE hdm )
    [OSS] データマトリックスオブジェクトの初期化

    Params:
    - [in] hdm      データマトリックスオブジェクトハンドル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_reset_obj(hdm)

def fnFIE_dm_copy_obj(hdm) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_dm_copy_obj( FHANDLE hdm )
    [OSS] データマトリックスオブジェクトのコピー

    Params:
    - [in] hdm      コピー対象とするデータマトリックスオブジェクトハンドル

    Returns:
    - 非NULL値       正常終了(データマトリックスオブジェクトハンドル)
    - NULL           異常終了(オブジェクトエラーorライセンスエラーor未初期化エラーorメモリ異常)
    """
    raise NotImplementedError

def dm_copy_obj(hdm):
    r"""FHANDLE FVALGAPI fnFIE_dm_copy_obj( FHANDLE hdm )
    [OSS] データマトリックスオブジェクトのコピー

    Params:
    - [in] hdm      コピー対象とするデータマトリックスオブジェクトハンドル

    Returns:
    - 非NULL値       正常終了(データマトリックスオブジェクトハンドル)
    - NULL           異常終了(オブジェクトエラーorライセンスエラーor未初期化エラーorメモリ異常)
    """

    return _fie.fnFIE_dm_copy_obj(hdm)

def fnFIE_dm_execute(hdm, fimg) -> Any:
    r"""INT FVALGAPI fnFIE_dm_execute( FHANDLE hdm, FHANDLE fimg )
    [OSS] データマトリックス デコード実行関数

    Params:
    - [in] hdm  データマトリックスオブジェクトハンドル
    - [in] himg     入力画像(type:UC8, BIN/ch:1)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_IMAGE  画像オブジェクトの異常
    - F_ERR_NOMEMORY       メモリ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_execute(hdm, fimg):
    r"""INT FVALGAPI fnFIE_dm_execute( FHANDLE hdm, FHANDLE fimg )
    [OSS] データマトリックス デコード実行関数

    Params:
    - [in] hdm  データマトリックスオブジェクトハンドル
    - [in] himg     入力画像(type:UC8, BIN/ch:1)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_IMAGE  画像オブジェクトの異常
    - F_ERR_NOMEMORY       メモリ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_execute(hdm, fimg)

def fnFIE_dm_query_decoded(hdm, decoded_index, num_of_decoded) -> Any:
    r"""INT FVALGAPI fnFIE_dm_query_decoded( FHANDLE hdm, const INT** decoded_index, INT* num_of_decoded )
    [OSS] データマトリックス 検出数とインデックス配列の取得

    Params:
    - [in] hdm              データマトリックスオブジェクトハンドル
    - [out] decoded_index   正常に読み取ることができたデータマトリックスインデックス番号の配列への参照ポインタ。関数エントリー時には  *decoded_index を NULL で初期化してください。
    - [out] num_decoded     正常に読み取ることができたデータマトリックス数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_query_decoded(hdm, decoded_index, num_of_decoded):
    r"""INT FVALGAPI fnFIE_dm_query_decoded( FHANDLE hdm, const INT** decoded_index, INT* num_of_decoded )
    [OSS] データマトリックス 検出数とインデックス配列の取得

    Params:
    - [in] hdm              データマトリックスオブジェクトハンドル
    - [out] decoded_index   正常に読み取ることができたデータマトリックスインデックス番号の配列への参照ポインタ。関数エントリー時には  *decoded_index を NULL で初期化してください。
    - [out] num_decoded     正常に読み取ることができたデータマトリックス数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_query_decoded(hdm, decoded_index, num_of_decoded)

def fnFIE_dm_query_undecoded(hdm, undecoded_index, num_of_undecoded) -> Any:
    r"""INT FVALGAPI fnFIE_dm_query_undecoded( FHANDLE hdm, const INT** undecoded_index, INT* num_of_undecoded )
    [OSS] データマトリックス 検出したが、読み取ることができなかったデータマトリックス数とインデックス配列の取得

    Params:
    - [in] hdm              データマトリックスオブジェクトハンドル
    - [out] undecoded_index 正常に読み取ることができなかったデータマトリックスインデックス配列の参照。関数エントリー時には  *undecoded_index を NULL で初期化してください。
    - [out] num_ndecoded        正常に読み取ることができなかったデータマトリックス数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_query_undecoded(hdm, undecoded_index, num_of_undecoded):
    r"""INT FVALGAPI fnFIE_dm_query_undecoded( FHANDLE hdm, const INT** undecoded_index, INT* num_of_undecoded )
    [OSS] データマトリックス 検出したが、読み取ることができなかったデータマトリックス数とインデックス配列の取得

    Params:
    - [in] hdm              データマトリックスオブジェクトハンドル
    - [out] undecoded_index 正常に読み取ることができなかったデータマトリックスインデックス配列の参照。関数エントリー時には  *undecoded_index を NULL で初期化してください。
    - [out] num_ndecoded        正常に読み取ることができなかったデータマトリックス数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_query_undecoded(hdm, undecoded_index, num_of_undecoded)

def fnFIE_dm_query_message(hdm, id, message, message_length) -> Any:
    r"""INT FVALGAPI fnFIE_dm_query_message( FHANDLE hdm, INT id, const CHAR** message, INT* message_length )
    [OSS] データマトリックス指定したインデックス番号にあるデータマトリックスのメッセージを取得

    Params:
    - [in]  hdm             データマトリックスオブジェクトハンドル
    - [in]  id              fnFIE_dm_query_decoded() によって得られたインデックス配列の参照値。
    - [out] message         読み取ったデータマトリックスメッセージ。関数エントリー時には  *message を NULL で初期化してください。
    - [out] message_length  読み取ったデータマトリックスメッセージの文字列長。メッセージ自体に \0(終端文字)を含む可能性がある場合には文字列長を取得して  message を使用してください。特に必要がないことがわかっている場合には  message_length は NULL を指定可能です。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NODATA         メッセージがありません(パラメータ  id に、検出したがデコードに失敗したインデックス番号を指定しました)
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_query_message(hdm, id, message, message_length):
    r"""INT FVALGAPI fnFIE_dm_query_message( FHANDLE hdm, INT id, const CHAR** message, INT* message_length )
    [OSS] データマトリックス指定したインデックス番号にあるデータマトリックスのメッセージを取得

    Params:
    - [in]  hdm             データマトリックスオブジェクトハンドル
    - [in]  id              fnFIE_dm_query_decoded() によって得られたインデックス配列の参照値。
    - [out] message         読み取ったデータマトリックスメッセージ。関数エントリー時には  *message を NULL で初期化してください。
    - [out] message_length  読み取ったデータマトリックスメッセージの文字列長。メッセージ自体に \0(終端文字)を含む可能性がある場合には文字列長を取得して  message を使用してください。特に必要がないことがわかっている場合には  message_length は NULL を指定可能です。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NODATA         メッセージがありません(パラメータ  id に、検出したがデコードに失敗したインデックス番号を指定しました)
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_query_message(hdm, id, message, message_length)

def fnFIE_dm_add_offsets(hdm, offset_x, offset_y) -> Any:
    r"""INT FVALGAPI fnFIE_dm_add_offsets( FHANDLE hdm, INT offset_x, INT offset_y )
    [OSS] データマトリックス 検出位置に加味するオフセット量の設定

    Params:
    - [in,out] hdm          データマトリックスオブジェクトハンドル
    - [in]     offset_x     検出位置に足されるオフセット量Ｘ
    - [in]     offset_y     検出位置に足されるオフセット量Ｙ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_add_offsets(hdm, offset_x, offset_y):
    r"""INT FVALGAPI fnFIE_dm_add_offsets( FHANDLE hdm, INT offset_x, INT offset_y )
    [OSS] データマトリックス 検出位置に加味するオフセット量の設定

    Params:
    - [in,out] hdm          データマトリックスオブジェクトハンドル
    - [in]     offset_x     検出位置に足されるオフセット量Ｘ
    - [in]     offset_y     検出位置に足されるオフセット量Ｙ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_add_offsets(hdm, offset_x, offset_y)

def fnFIE_dm_query_cellones(hdm, id, cell_ones) -> Any:
    r"""INT FVALGAPI fnFIE_dm_query_cellones( FHANDLE hdm, INT id, FMATRIX** cell_ones )
    [OSS] データマトリックス 読み取りに成功したデータマトリックスのセル位置情報の参照

    Params:
    - [in]  hdm         データマトリックスオブジェクトハンドル
    - [in]  id          fnFIE_dm_query_decoded() , fnFIE_dm_query_undecoded() によって得られたインデックス配列の参照値。
    - [out] cell_ones   セルが存在する位置情報( x, y)の列ベクトルの参照。関数エントリー時には  *cell_ones を NULL で初期化してください。
                            なお、位置情報の格納順は、ファインダパタンＬ字の左上部から、タイミングパタンの方向(Ｌを基準にＸ方向)にラスタ走査を行うように格納されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_query_cellones(hdm, id, cell_ones):
    r"""INT FVALGAPI fnFIE_dm_query_cellones( FHANDLE hdm, INT id, FMATRIX** cell_ones )
    [OSS] データマトリックス 読み取りに成功したデータマトリックスのセル位置情報の参照

    Params:
    - [in]  hdm         データマトリックスオブジェクトハンドル
    - [in]  id          fnFIE_dm_query_decoded() , fnFIE_dm_query_undecoded() によって得られたインデックス配列の参照値。
    - [out] cell_ones   セルが存在する位置情報( x, y)の列ベクトルの参照。関数エントリー時には  *cell_ones を NULL で初期化してください。
                            なお、位置情報の格納順は、ファインダパタンＬ字の左上部から、タイミングパタンの方向(Ｌを基準にＸ方向)にラスタ走査を行うように格納されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_query_cellones(hdm, id, cell_ones)

def fnFIE_dm_query_size(hdm, id, num_cells_x, num_cells_y) -> Any:
    r"""INT FVALGAPI fnFIE_dm_query_size( FHANDLE hdm, INT id, INT* num_cells_x, INT* num_cells_y )
    [OSS] データマトリックス シンボルサイズの取得

    Params:
    - [in]  hdm         データマトリックスオブジェクトハンドル
    - [in]  id          fnFIE_dm_query_decoded() , fnFIE_dm_query_undecoded() によって得られたインデックス配列の参照値。
    - [out] size_cells_x 横方向セル数(必要の無い場合にはNULLを指定)
    - [out] size_cells_y 縦方向セル数(必要の無い場合にはNULLを指定)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_query_size(hdm, id, num_cells_x, num_cells_y):
    r"""INT FVALGAPI fnFIE_dm_query_size( FHANDLE hdm, INT id, INT* num_cells_x, INT* num_cells_y )
    [OSS] データマトリックス シンボルサイズの取得

    Params:
    - [in]  hdm         データマトリックスオブジェクトハンドル
    - [in]  id          fnFIE_dm_query_decoded() , fnFIE_dm_query_undecoded() によって得られたインデックス配列の参照値。
    - [out] size_cells_x 横方向セル数(必要の無い場合にはNULLを指定)
    - [out] size_cells_y 縦方向セル数(必要の無い場合にはNULLを指定)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_query_size(hdm, id, num_cells_x, num_cells_y)

def fnFIE_dm_query_cellwidth(hdm, id, cell_width, cell_height) -> Any:
    r"""INT FVALGAPI fnFIE_dm_query_cellwidth( FHANDLE hdm, INT id, DOUBLE* cell_width, DOUBLE* cell_height )
    [OSS] データマトリックス セル幅の取得

    Params:
    - [in]  hdm         データマトリックスオブジェクトハンドル
    - [in]  id          fnFIE_dm_query_decoded() , fnFIE_dm_query_undecoded() によって得られたインデックス配列の参照値。
    - [out] cell_width  Ｘセル幅(画素)
    - [out] cell_height Ｙセル幅(画素)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_query_cellwidth(hdm, id, cell_width, cell_height):
    r"""INT FVALGAPI fnFIE_dm_query_cellwidth( FHANDLE hdm, INT id, DOUBLE* cell_width, DOUBLE* cell_height )
    [OSS] データマトリックス セル幅の取得

    Params:
    - [in]  hdm         データマトリックスオブジェクトハンドル
    - [in]  id          fnFIE_dm_query_decoded() , fnFIE_dm_query_undecoded() によって得られたインデックス配列の参照値。
    - [out] cell_width  Ｘセル幅(画素)
    - [out] cell_height Ｙセル幅(画素)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_query_cellwidth(hdm, id, cell_width, cell_height)

def fnFIE_dm_query_corner(hdm, id, corner) -> Any:
    r"""INT FVALGAPI fnFIE_dm_query_corner( FHANDLE hdm, INT id, FMATRIX** corner )
    [OSS] データマトリックス シンボルのコーナー位置情報の取得

    Params:
    - [in]  hdm       データマトリックスオブジェクト
    - [in]  id          fnFIE_dm_query_decoded() , fnFIE_dm_query_undecoded() によって得られたインデックス配列の参照値。
    - [out] corner    コーナー位置情報( x, y)の列ベクトルの参照。関数エントリー時には  *corner を NULL で初期化してください。
                          なお、位置情報の格納順は、ファインダパタンＬ字の左上部から、そのままＬを描く方向に一周するように格納されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_query_corner(hdm, id, corner):
    r"""INT FVALGAPI fnFIE_dm_query_corner( FHANDLE hdm, INT id, FMATRIX** corner )
    [OSS] データマトリックス シンボルのコーナー位置情報の取得

    Params:
    - [in]  hdm       データマトリックスオブジェクト
    - [in]  id          fnFIE_dm_query_decoded() , fnFIE_dm_query_undecoded() によって得られたインデックス配列の参照値。
    - [out] corner    コーナー位置情報( x, y)の列ベクトルの参照。関数エントリー時には  *corner を NULL で初期化してください。
                          なお、位置情報の格納順は、ファインダパタンＬ字の左上部から、そのままＬを描く方向に一周するように格納されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_query_corner(hdm, id, corner)

def fnFIE_dm_query_center(hdm, id, center_x, center_y) -> Any:
    r"""INT FVALGAPI fnFIE_dm_query_center( FHANDLE hdm, INT id, DOUBLE* center_x, DOUBLE* center_y )
    [OSS] データマトリックス読み取りに成功したデータマトリックスの中心位置を取得

    Params:
    - [in]  hdm         データマトリックスオブジェクトハンドル
    - [in]  id          fnFIE_dm_query_decoded() , fnFIE_dm_query_undecoded() によって得られたインデックス配列の参照値。
    - [out] center_x    データマトリックスの中心 X 座標
    - [out] center_y    データマトリックスの中心 Y 座標

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_query_center(hdm, id, center_x, center_y):
    r"""INT FVALGAPI fnFIE_dm_query_center( FHANDLE hdm, INT id, DOUBLE* center_x, DOUBLE* center_y )
    [OSS] データマトリックス読み取りに成功したデータマトリックスの中心位置を取得

    Params:
    - [in]  hdm         データマトリックスオブジェクトハンドル
    - [in]  id          fnFIE_dm_query_decoded() , fnFIE_dm_query_undecoded() によって得られたインデックス配列の参照値。
    - [out] center_x    データマトリックスの中心 X 座標
    - [out] center_y    データマトリックスの中心 Y 座標

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_query_center(hdm, id, center_x, center_y)

def fnFIE_dm_set_slant_allowance(hdm, slant_allowance) -> Any:
    r"""INT FVALGAPI fnFIE_dm_set_slant_allowance( FHANDLE hdm, INT slant_allowance )
    [OSS] データマトリックス 直交ずれ許容値の設定

    Params:
    - [in,out] hdm               データマトリックスオブジェクトハンドル
    - [in]     slant_allowance   直交からの角度許容値(1≦ slant_allowance≦45, 初期値10，単位：度)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_set_slant_allowance(hdm, slant_allowance):
    r"""INT FVALGAPI fnFIE_dm_set_slant_allowance( FHANDLE hdm, INT slant_allowance )
    [OSS] データマトリックス 直交ずれ許容値の設定

    Params:
    - [in,out] hdm               データマトリックスオブジェクトハンドル
    - [in]     slant_allowance   直交からの角度許容値(1≦ slant_allowance≦45, 初期値10，単位：度)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_set_slant_allowance(hdm, slant_allowance)

def fnFIE_dm_get_slant_allowance(hdm, slant_allowance) -> Any:
    r"""INT FVALGAPI fnFIE_dm_get_slant_allowance( FHANDLE hdm, INT* slant_allowance )
    [OSS] データマトリックス 直交ずれ許容値の取得

    Params:
    - [in]  hdm              データマトリックスオブジェクトハンドル
    - [out] slant_allowance  直交からの角度許容値(1〜45度, 単位：度)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_get_slant_allowance(hdm, slant_allowance):
    r"""INT FVALGAPI fnFIE_dm_get_slant_allowance( FHANDLE hdm, INT* slant_allowance )
    [OSS] データマトリックス 直交ずれ許容値の取得

    Params:
    - [in]  hdm              データマトリックスオブジェクトハンドル
    - [out] slant_allowance  直交からの角度許容値(1〜45度, 単位：度)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_get_slant_allowance(hdm, slant_allowance)

def fnFIE_dm_set_size_minmax(hdm, size_cells_min, size_cells_max) -> Any:
    r"""INT FVALGAPI fnFIE_dm_set_size_minmax( FHANDLE hdm, INT size_cells_min, INT size_cells_max )
    [OSS] データマトリックス 検出するシンボルのシンボルサイズの設定

    Params:
    - [in,out]  hdm              データマトリックスオブジェクトハンドル
    - [in]     size_cells_min    検出最小シンボルサイズ(8 ≦  size_cells_min,  size_cells_min ≦  size_cells_max, 初期値:8, 単位:個)
    - [in]     size_cells_max    検出最大シンボルサイズ( size_cells_max ≦ 144,  size_cells_min ≦  size_cells_max, 初期値:64, 単位:個)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_set_size_minmax(hdm, size_cells_min, size_cells_max):
    r"""INT FVALGAPI fnFIE_dm_set_size_minmax( FHANDLE hdm, INT size_cells_min, INT size_cells_max )
    [OSS] データマトリックス 検出するシンボルのシンボルサイズの設定

    Params:
    - [in,out]  hdm              データマトリックスオブジェクトハンドル
    - [in]     size_cells_min    検出最小シンボルサイズ(8 ≦  size_cells_min,  size_cells_min ≦  size_cells_max, 初期値:8, 単位:個)
    - [in]     size_cells_max    検出最大シンボルサイズ( size_cells_max ≦ 144,  size_cells_min ≦  size_cells_max, 初期値:64, 単位:個)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_set_size_minmax(hdm, size_cells_min, size_cells_max)

def fnFIE_dm_get_size_minmax(hdm, size_cells_min, size_cells_max) -> Any:
    r"""INT FVALGAPI fnFIE_dm_get_size_minmax( FHANDLE hdm, INT* size_cells_min, INT* size_cells_max )
    [OSS] データマトリックス 検出するシンボルサイズの取得

    Params:
    - [in]  hdm              データマトリックスオブジェクトハンドル
    - [out] size_cells_min   検出最小シンボルサイズ
    - [out] size_cells_max   検出最大シンボルサイズ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_get_size_minmax(hdm, size_cells_min, size_cells_max):
    r"""INT FVALGAPI fnFIE_dm_get_size_minmax( FHANDLE hdm, INT* size_cells_min, INT* size_cells_max )
    [OSS] データマトリックス 検出するシンボルサイズの取得

    Params:
    - [in]  hdm              データマトリックスオブジェクトハンドル
    - [out] size_cells_min   検出最小シンボルサイズ
    - [out] size_cells_max   検出最大シンボルサイズ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_get_size_minmax(hdm, size_cells_min, size_cells_max)

def fnFIE_dm_set_cellwidth_minmax(hdm, width_cell_min, width_cell_max) -> Any:
    r"""INT FVALGAPI fnFIE_dm_set_cellwidth_minmax( FHANDLE hdm, DOUBLE width_cell_min, DOUBLE width_cell_max )
    [OSS] データマトリックス 検出するセル幅の設定

    Params:
    - [in,out] hdm           データマトリックスオブジェクトハンドル
    - [in] width_cell_min    検出最小セル幅(3 ≦  width_cell_min,  width_cell_min ≦  width_cell_max, 初期値:4, 単位:画素)
    - [in] width_cell_max    検出最大セル幅( width_cell_max ≦ 48,  width_cell_min ≦  width_cell_max, 初期値15, 単位:画素)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_set_cellwidth_minmax(hdm, width_cell_min, width_cell_max):
    r"""INT FVALGAPI fnFIE_dm_set_cellwidth_minmax( FHANDLE hdm, DOUBLE width_cell_min, DOUBLE width_cell_max )
    [OSS] データマトリックス 検出するセル幅の設定

    Params:
    - [in,out] hdm           データマトリックスオブジェクトハンドル
    - [in] width_cell_min    検出最小セル幅(3 ≦  width_cell_min,  width_cell_min ≦  width_cell_max, 初期値:4, 単位:画素)
    - [in] width_cell_max    検出最大セル幅( width_cell_max ≦ 48,  width_cell_min ≦  width_cell_max, 初期値15, 単位:画素)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_set_cellwidth_minmax(hdm, width_cell_min, width_cell_max)

def fnFIE_dm_get_cellwidth_minmax(hdm, width_cell_min, width_cell_max) -> Any:
    r"""INT FVALGAPI fnFIE_dm_get_cellwidth_minmax( FHANDLE hdm, DOUBLE* width_cell_min, DOUBLE* width_cell_max )
    [OSS] データマトリックス 検出するセル幅の取得

    Params:
    - [in]  hdm              データマトリックスオブジェクトハンドル
    - [out] width_cell_min   検出最小セル幅(単位:画素)
    - [out] width_cell_max   検出最大セル幅(単位:画素)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_get_cellwidth_minmax(hdm, width_cell_min, width_cell_max):
    r"""INT FVALGAPI fnFIE_dm_get_cellwidth_minmax( FHANDLE hdm, DOUBLE* width_cell_min, DOUBLE* width_cell_max )
    [OSS] データマトリックス 検出するセル幅の取得

    Params:
    - [in]  hdm              データマトリックスオブジェクトハンドル
    - [out] width_cell_min   検出最小セル幅(単位:画素)
    - [out] width_cell_max   検出最大セル幅(単位:画素)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_get_cellwidth_minmax(hdm, width_cell_min, width_cell_max)

def fnFIE_dm_set_color(hdm, color) -> Any:
    r"""INT FVALGAPI fnFIE_dm_set_color( FHANDLE hdm, enum f_dm_color_type color )
    [OSS] データマトリックス 検出セル色の設定

    Params:
    - [in,out]  hdm     データマトリックスオブジェクトハンドル
    - [in]      color   シンボルの色(初期値:F_DM_DARK_ON_LIGHT)
                            - F_DM_DARK_ON_LIGHT シンボル色：黒（背景色は白）
                            - F_DM_LIGHT_ON_DARK シンボル色：白（背景色は黒）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_set_color(hdm, color):
    r"""INT FVALGAPI fnFIE_dm_set_color( FHANDLE hdm, enum f_dm_color_type color )
    [OSS] データマトリックス 検出セル色の設定

    Params:
    - [in,out]  hdm     データマトリックスオブジェクトハンドル
    - [in]      color   シンボルの色(初期値:F_DM_DARK_ON_LIGHT)
                            - F_DM_DARK_ON_LIGHT シンボル色：黒（背景色は白）
                            - F_DM_LIGHT_ON_DARK シンボル色：白（背景色は黒）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_set_color(hdm, color)

def fnFIE_dm_get_color(hdm, color) -> Any:
    r"""INT FVALGAPI fnFIE_dm_get_color( FHANDLE hdm, enum f_dm_color_type* color )
    [OSS] データマトリックス 検出セル色の取得

    Params:
    - [in]   hdm       データマトリックスオブジェクトハンドル
    - [out]  color     シンボルの色
                            - F_DM_DARK_ON_LIGHT シンボル色：黒（背景色は白）
                            - F_DM_LIGHT_ON_DARK シンボル色：白（背景色は黒）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_get_color(hdm, color):
    r"""INT FVALGAPI fnFIE_dm_get_color( FHANDLE hdm, enum f_dm_color_type* color )
    [OSS] データマトリックス 検出セル色の取得

    Params:
    - [in]   hdm       データマトリックスオブジェクトハンドル
    - [out]  color     シンボルの色
                            - F_DM_DARK_ON_LIGHT シンボル色：黒（背景色は白）
                            - F_DM_LIGHT_ON_DARK シンボル色：白（背景色は黒）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_get_color(hdm, color)

def fnFIE_dm_set_minvar(hdm, min_var) -> Any:
    r"""INT FVALGAPI fnFIE_dm_set_minvar( FHANDLE hdm, INT min_var )
    [OSS] データマトリックス シンボル検出のための濃度分散下限しきい値の設定

    Params:
    - [in,out] hdm           データマトリックスオブジェクトハンドル
    - [in]     min_var       分散しきい値 (初期値:1000, 0≦ min_var)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_set_minvar(hdm, min_var):
    r"""INT FVALGAPI fnFIE_dm_set_minvar( FHANDLE hdm, INT min_var )
    [OSS] データマトリックス シンボル検出のための濃度分散下限しきい値の設定

    Params:
    - [in,out] hdm           データマトリックスオブジェクトハンドル
    - [in]     min_var       分散しきい値 (初期値:1000, 0≦ min_var)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_set_minvar(hdm, min_var)

def fnFIE_dm_get_minvar(hdm, min_var) -> Any:
    r"""INT FVALGAPI fnFIE_dm_get_minvar( FHANDLE hdm, INT* min_var )
    [OSS] データマトリックス シンボル検出のための濃度分散下限しきい値の取得

    Params:
    - [in]  hdm     データマトリックスオブジェクトハンドル
    - [out] min_var 分散しきい値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_get_minvar(hdm, min_var):
    r"""INT FVALGAPI fnFIE_dm_get_minvar( FHANDLE hdm, INT* min_var )
    [OSS] データマトリックス シンボル検出のための濃度分散下限しきい値の取得

    Params:
    - [in]  hdm     データマトリックスオブジェクトハンドル
    - [out] min_var 分散しきい値

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_get_minvar(hdm, min_var)

def fnFIE_dm_set_symbol_type(hdm, symbol_type) -> Any:
    r"""INT FVALGAPI fnFIE_dm_set_symbol_type( FHANDLE hdm, enum f_dm_symbol_type symbol_type )
    [OSS] データマトリックス 検出シンボルタイプの設定

    Params:
    - [in,out]  hdm          データマトリックスオブジェクトハンドル
    - [in]      symbol_type  シンボルタイプ(初期値:F_DM_SYMBOL_SQUARE)
                                 - F_DM_SYMBOL_SQUARE 正方形：縦横のシンボルサイズ（単位：数）が同じシンボル
                                 - F_DM_SYMBOL_RECTANGLE 長方形：縦横のシンボルサイズ（単位：数）が異なるシンボル
                                 - F_DM_SYMBOL_ALL 両方：正方形または長方形シンボル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_set_symbol_type(hdm, symbol_type):
    r"""INT FVALGAPI fnFIE_dm_set_symbol_type( FHANDLE hdm, enum f_dm_symbol_type symbol_type )
    [OSS] データマトリックス 検出シンボルタイプの設定

    Params:
    - [in,out]  hdm          データマトリックスオブジェクトハンドル
    - [in]      symbol_type  シンボルタイプ(初期値:F_DM_SYMBOL_SQUARE)
                                 - F_DM_SYMBOL_SQUARE 正方形：縦横のシンボルサイズ（単位：数）が同じシンボル
                                 - F_DM_SYMBOL_RECTANGLE 長方形：縦横のシンボルサイズ（単位：数）が異なるシンボル
                                 - F_DM_SYMBOL_ALL 両方：正方形または長方形シンボル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_set_symbol_type(hdm, symbol_type)

def fnFIE_dm_get_symbol_type(hdm, symbol_type) -> Any:
    r"""INT FVALGAPI fnFIE_dm_get_symbol_type( FHANDLE hdm, enum f_dm_symbol_type* symbol_type )
    [OSS] データマトリックス 検出シンボルタイプの取得

    Params:
    - [in]   hdm          データマトリックスオブジェクトハンドル
    - [out]  symbol_type  シンボルタイプ(初期値:F_DM_SYMBOL_SQUARE)
                                 - F_DM_SYMBOL_SQUARE 正方形：縦横のシンボルサイズ（単位：数）が同じシンボル
                                 - F_DM_SYMBOL_RECTANGLE 長方形：縦横のシンボルサイズ（単位：数）が異なるシンボル
                                 - F_DM_SYMBOL_ALL 両方：正方形または長方形シンボル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_get_symbol_type(hdm, symbol_type):
    r"""INT FVALGAPI fnFIE_dm_get_symbol_type( FHANDLE hdm, enum f_dm_symbol_type* symbol_type )
    [OSS] データマトリックス 検出シンボルタイプの取得

    Params:
    - [in]   hdm          データマトリックスオブジェクトハンドル
    - [out]  symbol_type  シンボルタイプ(初期値:F_DM_SYMBOL_SQUARE)
                                 - F_DM_SYMBOL_SQUARE 正方形：縦横のシンボルサイズ（単位：数）が同じシンボル
                                 - F_DM_SYMBOL_RECTANGLE 長方形：縦横のシンボルサイズ（単位：数）が異なるシンボル
                                 - F_DM_SYMBOL_ALL 両方：正方形または長方形シンボル

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT データマトリックスオブジェクトの異常
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_get_symbol_type(hdm, symbol_type)

def fnFIE_dm_set_timeout(hdm, timeout) -> Any:
    r"""INT FVALGAPI fnFIE_dm_set_timeout( FHANDLE hdm, DOUBLE timeout )
    [OSS] タイムアウトの設定

    Params:
    - [in]  hdm     データマトリックスオブジェクトハンドル
    - [in]  timeout タイムアウト時間(ms) ( timeout >= 0.0 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_set_timeout(hdm, timeout):
    r"""INT FVALGAPI fnFIE_dm_set_timeout( FHANDLE hdm, DOUBLE timeout )
    [OSS] タイムアウトの設定

    Params:
    - [in]  hdm     データマトリックスオブジェクトハンドル
    - [in]  timeout タイムアウト時間(ms) ( timeout >= 0.0 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_set_timeout(hdm, timeout)

def fnFIE_dm_get_timeout(hdm, timeout) -> Any:
    r"""INT FVALGAPI fnFIE_dm_get_timeout( FHANDLE hdm, DOUBLE* timeout )
    [OSS] タイムアウトの取得

    Params:
    - [in]  hdm     データマトリックスオブジェクトハンドル
    - [out] timeout タイムアウト時間(ms) ( timeout >= 0.0 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def dm_get_timeout(hdm, timeout):
    r"""INT FVALGAPI fnFIE_dm_get_timeout( FHANDLE hdm, DOUBLE* timeout )
    [OSS] タイムアウトの取得

    Params:
    - [in]  hdm     データマトリックスオブジェクトハンドル
    - [out] timeout タイムアウト時間(ms) ( timeout >= 0.0 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       異常終了(パラメータが不正)
    - F_ERR_INVALID_OBJECT  不正なオブジェクトハンドルが渡されたため、異常終了。
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_dm_get_timeout(hdm, timeout)

def fnFIE_colorchart_calc_image(hsrc, hmask, chart) -> Any:
    r"""INT FVALGAPI fnFIE_colorchart_calc_image( const FHANDLE hsrc, const FHANDLE hmask, F_COLOR_CHART* chart )
    色票の計算（画像指定）

    Params:
    - [in]  hsrc    入力画像（type:uc8,us16,double, ch:3）
    - [in]  hmask   マスクオブジェクト（type:bin, ch:1の画像、またはリージョン）
    - [out] chart   色票

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 処理領域不足のため計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def colorchart_calc_image(hsrc, hmask, chart):
    r"""INT FVALGAPI fnFIE_colorchart_calc_image( const FHANDLE hsrc, const FHANDLE hmask, F_COLOR_CHART* chart )
    色票の計算（画像指定）

    Params:
    - [in]  hsrc    入力画像（type:uc8,us16,double, ch:3）
    - [in]  hmask   マスクオブジェクト（type:bin, ch:1の画像、またはリージョン）
    - [out] chart   色票

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 処理領域不足のため計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_colorchart_calc_image(hsrc, hmask, chart)

def fnFIE_colorchart_set_color(color, chart) -> Any:
    r"""INT FVALGAPI fnFIE_colorchart_set_color( const DOUBLE* color, F_COLOR_CHART* chart )
    色票の計算（色指定）

    Params:
    - [in]  color   色情報
    - [out] chart   色票

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def colorchart_set_color(color, chart):
    r"""INT FVALGAPI fnFIE_colorchart_set_color( const DOUBLE* color, F_COLOR_CHART* chart )
    色票の計算（色指定）

    Params:
    - [in]  color   色情報
    - [out] chart   色票

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_colorchart_set_color(color, chart)

def fnFIE_colorchart_calc_norm(right, target, norm, norm_type, weight) -> Any:
    r"""INT FVALGAPI fnFIE_colorchart_calc_norm( const F_COLOR_CHART* right, const F_COLOR_CHART* target, DOUBLE* norm, enum f_colorcheck_norm_type norm_type, const DOUBLE* weight )
    色票間のノルム計算

    Params:
    - [in]  right       基準色票
    - [in]  target      対象色票
    - [out] norm        ノルム
    - [in]  norm_type   ノルムタイプ
                        - F_CC_EUCLIDEAN（ユークリッドノルム）
                        - F_CC_WEIGHTED_EUCLIDEAN（重み付きユークリッドノルム）
                        - F_CC_MAHALANOBIS（マハラノビスノルム）
                        - F_CC_MANHATTAN（マンハッタンノルム）
                        - F_CC_CHEBYSHEV（チェビシェフノルム）
    - [in]  weight      重み付きユークリッドノルムの重み係数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def colorchart_calc_norm(right, target, norm, norm_type=F_CC_EUCLIDEAN, weight=None):
    r"""INT FVALGAPI fnFIE_colorchart_calc_norm( const F_COLOR_CHART* right, const F_COLOR_CHART* target, DOUBLE* norm, enum f_colorcheck_norm_type norm_type, const DOUBLE* weight )
    色票間のノルム計算

    Params:
    - [in]  right       基準色票
    - [in]  target      対象色票
    - [out] norm        ノルム
    - [in]  norm_type   ノルムタイプ
                        - F_CC_EUCLIDEAN（ユークリッドノルム）
                        - F_CC_WEIGHTED_EUCLIDEAN（重み付きユークリッドノルム）
                        - F_CC_MAHALANOBIS（マハラノビスノルム）
                        - F_CC_MANHATTAN（マンハッタンノルム）
                        - F_CC_CHEBYSHEV（チェビシェフノルム）
    - [in]  weight      重み付きユークリッドノルムの重み係数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_colorchart_calc_norm(right, target, norm, norm_type, weight)

def fnFIE_color_extraction(hsrc, hdst, charts, num_chart, norm_type, weight, tolerance, back_clear) -> Any:
    r"""INT FVALGAPI fnFIE_color_extraction( const FHANDLE hsrc, FHANDLE hdst, const F_COLOR_CHART* charts, INT num_chart, enum f_colorcheck_norm_type norm_type, const DOUBLE* weight, const DOUBLE* tolerance, INT back_clear )
    色抽出

    Params:
    - [in]  hsrc        入力画像（type:uc8,us16,double / ch:3）
    - [out] hdst        出力画像（type:uc8,us16,double / ch:3, type:bin / ch:1）
    - [in]  charts      色票配列
    - [in]  num_chart   色票数
    - [in]  norm_type   ノルムタイプ
                        - F_CC_EUCLIDEAN（ユークリッドノルム）
                        - F_CC_WEIGHTED_EUCLIDEAN（重み付きユークリッドノルム）
                        - F_CC_MAHALANOBIS（マハラノビスノルム）
                        - F_CC_MANHATTAN（マンハッタンノルム）
                        - F_CC_CHEBYSHEV（チェビシェフノルム）
                        - F_CC_VARIANCE（分散基準）
                        - F_CC_TOLERANCE（許容範囲基準）
    - [in]  weight      重み付きユークリッドノルムの重み係数
                             norm_type に F_CC_WEIGHTED_EUCLIDEAN 以外を指定する場合は
                            本パラメータには NULL を指定してください。
    - [in]  tolerance   許容範囲
    - [in]  back_clear  背景処理法
                        - TRUE   領域外になる画素は０クリア
                               - FALSE  領域外になる画素は処理しない

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def color_extraction(hsrc, hdst, charts, num_chart, norm_type=F_CC_EUCLIDEAN, weight=None, tolerance=[10], back_clear=TRUE):
    r"""INT FVALGAPI fnFIE_color_extraction( const FHANDLE hsrc, FHANDLE hdst, const F_COLOR_CHART* charts, INT num_chart, enum f_colorcheck_norm_type norm_type, const DOUBLE* weight, const DOUBLE* tolerance, INT back_clear )
    色抽出

    Params:
    - [in]  hsrc        入力画像（type:uc8,us16,double / ch:3）
    - [out] hdst        出力画像（type:uc8,us16,double / ch:3, type:bin / ch:1）
    - [in]  charts      色票配列
    - [in]  num_chart   色票数
    - [in]  norm_type   ノルムタイプ
                        - F_CC_EUCLIDEAN（ユークリッドノルム）
                        - F_CC_WEIGHTED_EUCLIDEAN（重み付きユークリッドノルム）
                        - F_CC_MAHALANOBIS（マハラノビスノルム）
                        - F_CC_MANHATTAN（マンハッタンノルム）
                        - F_CC_CHEBYSHEV（チェビシェフノルム）
                        - F_CC_VARIANCE（分散基準）
                        - F_CC_TOLERANCE（許容範囲基準）
    - [in]  weight      重み付きユークリッドノルムの重み係数
                             norm_type に F_CC_WEIGHTED_EUCLIDEAN 以外を指定する場合は
                            本パラメータには NULL を指定してください。
    - [in]  tolerance   許容範囲
    - [in]  back_clear  背景処理法
                        - TRUE   領域外になる画素は０クリア
                               - FALSE  領域外になる画素は処理しない

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_color_extraction(hsrc, hdst, charts, num_chart, norm_type, weight, tolerance, back_clear)

def fnFIE_colorcheck_open_table(size) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_colorcheck_open_table( INT size )
    色票テーブルの生成

    Params:
    - [in]  size    テーブルのサイズ（最大色票数）

    Returns:
    - 確保した色票テーブルの先頭アドレスを返します。
            ライセンスエラー、未初期化エラー、またはメモリ不足などで確保に失敗した場合は、NULLを返します。
    """
    raise NotImplementedError

def colorcheck_open_table(size):
    r"""FHANDLE FVALGAPI fnFIE_colorcheck_open_table( INT size )
    色票テーブルの生成

    Params:
    - [in]  size    テーブルのサイズ（最大色票数）

    Returns:
    - 確保した色票テーブルの先頭アドレスを返します。
            ライセンスエラー、未初期化エラー、またはメモリ不足などで確保に失敗した場合は、NULLを返します。
    """

    return _fie.fnFIE_colorcheck_open_table(size)

def fnFIE_colorcheck_close_table(htbl) -> Any:
    r"""void fnFIE_colorcheck_close_table( FHANDLE htbl )
    色票テーブルの解放

    Params:
    - [in]  htbl    色票テーブルのハンドル

    Returns:
    """
    raise NotImplementedError

def colorcheck_close_table(htbl):
    r"""void fnFIE_colorcheck_close_table( FHANDLE htbl )
    色票テーブルの解放

    Params:
    - [in]  htbl    色票テーブルのハンドル

    Returns:
    """

    return _fie.fnFIE_colorcheck_close_table(htbl)

def fnFIE_colorcheck_copy_table(htbl) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_colorcheck_copy_table( FHANDLE htbl )
    色票テーブルのコピー

    Params:
    - [in]  htbl    色票テーブルのハンドル

    Returns:
    - コピーした色票テーブルの先頭アドレスを返します。
            メモリ不足などで確保に失敗した場合は、NULLを返します。
    """
    raise NotImplementedError

def colorcheck_copy_table(htbl):
    r"""FHANDLE FVALGAPI fnFIE_colorcheck_copy_table( FHANDLE htbl )
    色票テーブルのコピー

    Params:
    - [in]  htbl    色票テーブルのハンドル

    Returns:
    - コピーした色票テーブルの先頭アドレスを返します。
            メモリ不足などで確保に失敗した場合は、NULLを返します。
    """

    return _fie.fnFIE_colorcheck_copy_table(htbl)

def fnFIE_colorcheck_set_right_color_chart(htbl, id, chart) -> Any:
    r"""INT FVALGAPI fnFIE_colorcheck_set_right_color_chart( FHANDLE htbl, INT id, const F_COLOR_CHART* chart )
    正解色票の登録

    Params:
    - [in,out]  htbl    色票テーブルのハンドル
    - [in]      id      正解色票に対応したID
    - [in]      chart   正解色票

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CC_INVALID_ID       不正なIDが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def colorcheck_set_right_color_chart(htbl, id, chart):
    r"""INT FVALGAPI fnFIE_colorcheck_set_right_color_chart( FHANDLE htbl, INT id, const F_COLOR_CHART* chart )
    正解色票の登録

    Params:
    - [in,out]  htbl    色票テーブルのハンドル
    - [in]      id      正解色票に対応したID
    - [in]      chart   正解色票

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CC_INVALID_ID       不正なIDが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_colorcheck_set_right_color_chart(htbl, id, chart)

def fnFIE_colorcheck_clear_right_color_chart(htbl) -> Any:
    r"""INT FVALGAPI fnFIE_colorcheck_clear_right_color_chart( FHANDLE htbl )
    すべての色票を削除

    Params:
    - [in,out]  htbl    色票テーブルのハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def colorcheck_clear_right_color_chart(htbl):
    r"""INT FVALGAPI fnFIE_colorcheck_clear_right_color_chart( FHANDLE htbl )
    すべての色票を削除

    Params:
    - [in,out]  htbl    色票テーブルのハンドル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_colorcheck_clear_right_color_chart(htbl)

def fnFIE_colorcheck_erase_right_color_chart(htbl, id) -> Any:
    r"""INT FVALGAPI fnFIE_colorcheck_erase_right_color_chart( FHANDLE htbl, INT id )
    正解色票の削除

    Params:
    - [in,out]  htbl    色票テーブルのハンドル
    - [in]      id      色票のID

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_CC_INVALID_ID       不正なIDが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def colorcheck_erase_right_color_chart(htbl, id):
    r"""INT FVALGAPI fnFIE_colorcheck_erase_right_color_chart( FHANDLE htbl, INT id )
    正解色票の削除

    Params:
    - [in,out]  htbl    色票テーブルのハンドル
    - [in]      id      色票のID

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_CC_INVALID_ID       不正なIDが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_colorcheck_erase_right_color_chart(htbl, id)

def fnFIE_colorcheck_get_table_size(htbl, size) -> Any:
    r"""INT FVALGAPI fnFIE_colorcheck_get_table_size( FHANDLE htbl, INT* size )
    テーブルサイズの取得

    Params:
    - [in]  htbl    色票テーブルのハンドル
    - [out] size    色票の最大保持可能数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def colorcheck_get_table_size(htbl, size):
    r"""INT FVALGAPI fnFIE_colorcheck_get_table_size( FHANDLE htbl, INT* size )
    テーブルサイズの取得

    Params:
    - [in]  htbl    色票テーブルのハンドル
    - [out] size    色票の最大保持可能数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_colorcheck_get_table_size(htbl, size)

def fnFIE_colorcheck_get_num_color_chart(htbl, num) -> Any:
    r"""INT FVALGAPI fnFIE_colorcheck_get_num_color_chart( FHANDLE htbl, INT* num )
    登録済正解色票数の取得

    Params:
    - [in]  htbl    色票テーブルのハンドル
    - [out] num     登録されている色票数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def colorcheck_get_num_color_chart(htbl, num):
    r"""INT FVALGAPI fnFIE_colorcheck_get_num_color_chart( FHANDLE htbl, INT* num )
    登録済正解色票数の取得

    Params:
    - [in]  htbl    色票テーブルのハンドル
    - [out] num     登録されている色票数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_colorcheck_get_num_color_chart(htbl, num)

def fnFIE_colorcheck_get_right_color_chart(htbl, id, chart) -> Any:
    r"""INT FVALGAPI fnFIE_colorcheck_get_right_color_chart( FHANDLE htbl, INT id, F_COLOR_CHART* chart )
    正解色票の取得

    Params:
    - [in]  htbl    ノルムテーブルのハンドル
    - [in]  id      色票のID
    - [out] chart   正解色票

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def colorcheck_get_right_color_chart(htbl, id, chart):
    r"""INT FVALGAPI fnFIE_colorcheck_get_right_color_chart( FHANDLE htbl, INT id, F_COLOR_CHART* chart )
    正解色票の取得

    Params:
    - [in]  htbl    ノルムテーブルのハンドル
    - [in]  id      色票のID
    - [out] chart   正解色票

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_colorcheck_get_right_color_chart(htbl, id, chart)

def fnFIE_colorcheck_execute(htbl, target, norm_type, weight, threshold, right, id, norm) -> Any:
    r"""INT FVALGAPI fnFIE_colorcheck_execute( FHANDLE htbl, const F_COLOR_CHART* target, enum f_colorcheck_norm_type norm_type, const DOUBLE* weight, DOUBLE threshold, F_COLOR_CHART* right, INT* id, DOUBLE* norm )
    色判定の実行

    Params:
    - [in]  htbl        ノルムテーブルのハンドル
    - [in]  target      対象色票
    - [in]  norm_type   ノルムタイプ
                        - F_CC_EUCLIDEAN（ユークリッドノルム）
                        - F_CC_WEIGHTED_EUCLIDEAN（重み付きユークリッドノルム）
                        - F_CC_MAHALANOBIS（マハラノビスノルム）
                        - F_CC_MANHATTAN（マンハッタンノルム）
                        - F_CC_CHEBYSHEV（チェビシェフノルム）
    - [in]  weight      重み付きユークリッドノルムの重み係数
    - [in]  threshold   閾値（ノルム）
    - [out] right       正解色票
    - [out] id          正解色票のID
    - [out] norm        ノルム

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def colorcheck_execute(htbl, target, norm_type=F_CC_EUCLIDEAN, weight=None, threshold=-1, right=None, id=REQUIRED_PLACEHOLDER, norm=None):
    r"""INT FVALGAPI fnFIE_colorcheck_execute( FHANDLE htbl, const F_COLOR_CHART* target, enum f_colorcheck_norm_type norm_type, const DOUBLE* weight, DOUBLE threshold, F_COLOR_CHART* right, INT* id, DOUBLE* norm )
    色判定の実行

    Params:
    - [in]  htbl        ノルムテーブルのハンドル
    - [in]  target      対象色票
    - [in]  norm_type   ノルムタイプ
                        - F_CC_EUCLIDEAN（ユークリッドノルム）
                        - F_CC_WEIGHTED_EUCLIDEAN（重み付きユークリッドノルム）
                        - F_CC_MAHALANOBIS（マハラノビスノルム）
                        - F_CC_MANHATTAN（マンハッタンノルム）
                        - F_CC_CHEBYSHEV（チェビシェフノルム）
    - [in]  weight      重み付きユークリッドノルムの重み係数
    - [in]  threshold   閾値（ノルム）
    - [out] right       正解色票
    - [out] id          正解色票のID
    - [out] norm        ノルム

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if id is REQUIRED_PLACEHOLDER: raise TypeError("argument 'id' is missing")
    return _fie.fnFIE_colorcheck_execute(htbl, target, norm_type, weight, threshold, right, id, norm)

def fnFIE_colorcheck_get_detail_result(htbl, id, chart, norm) -> Any:
    r"""INT FVALGAPI fnFIE_colorcheck_get_detail_result( FHANDLE htbl, INT id, F_COLOR_CHART* chart, DOUBLE* norm )
    色判定の詳細情報を取得

    Params:
    - [in]  htbl    色票テーブルのハンドル
    - [in]  id      色票のID
    - [out] chart   正解色票
    - [out] norm    ノルム

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_OBJECT      不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM           不正なパラメータが渡された
    - F_ERR_CC_INVALID_ID           不正なIDが渡された
        - F_ERR_CC_INVALID_TABLE        不正な色票テーブルが渡された
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def colorcheck_get_detail_result(htbl, id, chart, norm=None):
    r"""INT FVALGAPI fnFIE_colorcheck_get_detail_result( FHANDLE htbl, INT id, F_COLOR_CHART* chart, DOUBLE* norm )
    色判定の詳細情報を取得

    Params:
    - [in]  htbl    色票テーブルのハンドル
    - [in]  id      色票のID
    - [out] chart   正解色票
    - [out] norm    ノルム

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_OBJECT      不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM           不正なパラメータが渡された
    - F_ERR_CC_INVALID_ID           不正なIDが渡された
        - F_ERR_CC_INVALID_TABLE        不正な色票テーブルが渡された
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_colorcheck_get_detail_result(htbl, id, chart, norm)

def fnFIE_fpm_alloc(himage, hmask, offset, matching_mode, method, pfeature_param, perr_code) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_fpm_alloc( FHANDLE himage, FHANDLE hmask, DPNT_T offset, enum f_fpm_mode matching_mode, enum f_fpm_featedge method, const F_FPM_FEATURE* pfeature_param, INT* perr_code )
    FPM オブジェクト生成

    Params:
    - [in]     himage          FPMで使用するための特徴量を取得する対象となる画像オブジェクト(画像タイプ：uc8 のみ対応)
                                   チャネル数は 1 でなければいけません。
    - [in]     hmask           マスターパタン特徴量取得時のマスク指定用画像オブジェクト(画像タイプ：uc8 のみ対応)
                                   チャネル数は 1 でなければいけません。
                                   NULLを指定するとマスクなしのパターンになります。
    - [in]     offset          マッチング回答オフセット値(マスターパタン画像の左上位置からの相対値)
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE 高速モード
    - [in]     method          特徴量抽出手法
                                   - F_FPM_SOBEL_EDGE ソーベルによる特徴量抽出
                                   - F_FPM_CORR_EDGE  相関エッジによる特徴量抽出
                                   - F_FPM_SOBEL_MAX_EDGE 強度上限付ソーベルによる特徴量抽出
                                   - F_FPM_CORR_MAX_EDGE  強度上限付相関エッジによる特徴量抽出
                                   - F_FPM_GROOVE_EDGE  細線エッジによる特徴量抽出
    - [in]     pfeature_param  FPMオブジェクトを生成する際に使用する特徴量計測パラメータ
    - [out]    perr_code       正常終了、またはエラーコードが入力されます。エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_IMAGE    引数画像オブジェクトが異常
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_FPM_NOFEATURE    特徴量が見つかりません。
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPMオブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """
    raise NotImplementedError

def fpm_alloc(himage, hmask, offset, matching_mode, method, pfeature_param, perr_code=None):
    r"""FHANDLE FVALGAPI fnFIE_fpm_alloc( FHANDLE himage, FHANDLE hmask, DPNT_T offset, enum f_fpm_mode matching_mode, enum f_fpm_featedge method, const F_FPM_FEATURE* pfeature_param, INT* perr_code )
    FPM オブジェクト生成

    Params:
    - [in]     himage          FPMで使用するための特徴量を取得する対象となる画像オブジェクト(画像タイプ：uc8 のみ対応)
                                   チャネル数は 1 でなければいけません。
    - [in]     hmask           マスターパタン特徴量取得時のマスク指定用画像オブジェクト(画像タイプ：uc8 のみ対応)
                                   チャネル数は 1 でなければいけません。
                                   NULLを指定するとマスクなしのパターンになります。
    - [in]     offset          マッチング回答オフセット値(マスターパタン画像の左上位置からの相対値)
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE 高速モード
    - [in]     method          特徴量抽出手法
                                   - F_FPM_SOBEL_EDGE ソーベルによる特徴量抽出
                                   - F_FPM_CORR_EDGE  相関エッジによる特徴量抽出
                                   - F_FPM_SOBEL_MAX_EDGE 強度上限付ソーベルによる特徴量抽出
                                   - F_FPM_CORR_MAX_EDGE  強度上限付相関エッジによる特徴量抽出
                                   - F_FPM_GROOVE_EDGE  細線エッジによる特徴量抽出
    - [in]     pfeature_param  FPMオブジェクトを生成する際に使用する特徴量計測パラメータ
    - [out]    perr_code       正常終了、またはエラーコードが入力されます。エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_IMAGE    引数画像オブジェクトが異常
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_FPM_NOFEATURE    特徴量が見つかりません。
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPMオブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """

    return _fie.fnFIE_fpm_alloc(himage, hmask, offset, matching_mode, method, pfeature_param, perr_code)

def fnFIE_fpm_free_object(hfpm) -> Any:
    r"""void fnFIE_fpm_free_object( FHANDLE hfpm )
    FPMオブジェクトの解放

    Params:
    - [in] hfpm        FPMオブジェクト

    Returns:
    """
    raise NotImplementedError

def fpm_free_object(hfpm):
    r"""void fnFIE_fpm_free_object( FHANDLE hfpm )
    FPMオブジェクトの解放

    Params:
    - [in] hfpm        FPMオブジェクト

    Returns:
    """

    return _fie.fnFIE_fpm_free_object(hfpm)

def fnFIE_fpm_copy_object(hfpm) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_fpm_copy_object( FHANDLE hfpm )
    FPMオブジェクトのコピー

    Params:
    - [in] hfpm        コピーを行いたいFPMオブジェクト

    Returns:
    - 正常終了した場合は、生成したFPMオブジェクトのハンドルを返します。
            特徴量不足、パラメータエラー、又はメモリ不足によりFPMオブジェクトが生成できなかったときはNULLを返します。
    """
    raise NotImplementedError

def fpm_copy_object(hfpm):
    r"""FHANDLE FVALGAPI fnFIE_fpm_copy_object( FHANDLE hfpm )
    FPMオブジェクトのコピー

    Params:
    - [in] hfpm        コピーを行いたいFPMオブジェクト

    Returns:
    - 正常終了した場合は、生成したFPMオブジェクトのハンドルを返します。
            特徴量不足、パラメータエラー、又はメモリ不足によりFPMオブジェクトが生成できなかったときはNULLを返します。
    """

    return _fie.fnFIE_fpm_copy_object(hfpm)

def fnFIE_fpm_clear_result(hfpm) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_clear_result( FHANDLE hfpm )
    FPMオブジェクト結果データのクリア

    Params:
    - [in,out]  hfpm           FPMオブジェクト

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_clear_result(hfpm):
    r"""INT FVALGAPI fnFIE_fpm_clear_result( FHANDLE hfpm )
    FPMオブジェクト結果データのクリア

    Params:
    - [in,out]  hfpm           FPMオブジェクト

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_clear_result(hfpm)

def fnFIE_fpm_get_matching_mode(hfpm, pmatching_mode) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_matching_mode( FHANDLE hfpm, enum f_fpm_mode* pmatching_mode )
    FPMオブジェクト生成時のマッチングモードの取得

    Params:
    - [in]  hfpm              FPMオブジェクト
    - [out] pmatching_mode    FPMマッチング実行モード

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_matching_mode(hfpm, pmatching_mode):
    r"""INT FVALGAPI fnFIE_fpm_get_matching_mode( FHANDLE hfpm, enum f_fpm_mode* pmatching_mode )
    FPMオブジェクト生成時のマッチングモードの取得

    Params:
    - [in]  hfpm              FPMオブジェクト
    - [out] pmatching_mode    FPMマッチング実行モード

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_matching_mode(hfpm, pmatching_mode)

def fnFIE_fpm_get_matching_feature_num(hfpm, pmatching_feature_num) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_matching_feature_num( FHANDLE hfpm, INT* pmatching_feature_num )
    サーチ対象画像の特徴量数の取得

    Params:
    - [in]  hfpm                    FPMオブジェクト
    - [out] pmatching_feature_num   FPMオブジェクトにある特徴量の数

    Returns:
    - F_ERR_NONE           正常終了。
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_matching_feature_num(hfpm, pmatching_feature_num):
    r"""INT FVALGAPI fnFIE_fpm_get_matching_feature_num( FHANDLE hfpm, INT* pmatching_feature_num )
    サーチ対象画像の特徴量数の取得

    Params:
    - [in]  hfpm                    FPMオブジェクト
    - [out] pmatching_feature_num   FPMオブジェクトにある特徴量の数

    Returns:
    - F_ERR_NONE           正常終了。
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_matching_feature_num(hfpm, pmatching_feature_num)

def fnFIE_fpm_get_matching_feature_edges(hfpm, pmatching_edges) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_matching_feature_edges( FHANDLE hfpm, F_DEDGE* pmatching_edges )
    マッチングで使用した特徴量を取得（勾配方向付きエッジ型）

    Params:
    - [in]  hfpm             FPMオブジェクト
    - [out] pmatching_edges  勾配付きエッジ情報
                                     予め fnFIE_fpm_get_matching_feature_num() によって特徴量の数を取得し、必要な領域を確保する必要があります。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_matching_feature_edges(hfpm, pmatching_edges):
    r"""INT FVALGAPI fnFIE_fpm_get_matching_feature_edges( FHANDLE hfpm, F_DEDGE* pmatching_edges )
    マッチングで使用した特徴量を取得（勾配方向付きエッジ型）

    Params:
    - [in]  hfpm             FPMオブジェクト
    - [out] pmatching_edges  勾配付きエッジ情報
                                     予め fnFIE_fpm_get_matching_feature_num() によって特徴量の数を取得し、必要な領域を確保する必要があります。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_matching_feature_edges(hfpm, pmatching_edges)

def fnFIE_fpm_get_compressed_feature_edges(hfpm, htarget, is_pattern, edges, edges_num) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_compressed_feature_edges( FHANDLE hfpm, FHANDLE htarget, BOOL is_pattern, F_DEDGE* edges, INT* edges_num )
    マッチングで使用した圧縮特徴量を取得（勾配方向付きエッジ型）

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [in]  htarget      圧縮特徴量取得に使用する特徴量情報が格納されたオブジェクト
                             特徴量オブジェクトが有効です。
                             NULLが指定された場合にはFPMオブジェクトに格納された(最後にマッチングに使用した)特徴量情報を使用します。
    - [in]  is_pattern   取得する圧縮特徴量がマスターパタンのものであるかどうか
    - [out] edges        勾配付き圧縮エッジ情報
                                 予め必要な領域を確保する必要があります。
    - [out] edges_num    取得した圧縮特徴量数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_FPM_NOFEATURE  特徴量がありません
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_compressed_feature_edges(hfpm, htarget, is_pattern, edges, edges_num):
    r"""INT FVALGAPI fnFIE_fpm_get_compressed_feature_edges( FHANDLE hfpm, FHANDLE htarget, BOOL is_pattern, F_DEDGE* edges, INT* edges_num )
    マッチングで使用した圧縮特徴量を取得（勾配方向付きエッジ型）

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [in]  htarget      圧縮特徴量取得に使用する特徴量情報が格納されたオブジェクト
                             特徴量オブジェクトが有効です。
                             NULLが指定された場合にはFPMオブジェクトに格納された(最後にマッチングに使用した)特徴量情報を使用します。
    - [in]  is_pattern   取得する圧縮特徴量がマスターパタンのものであるかどうか
    - [out] edges        勾配付き圧縮エッジ情報
                                 予め必要な領域を確保する必要があります。
    - [out] edges_num    取得した圧縮特徴量数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_FPM_NOFEATURE  特徴量がありません
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_compressed_feature_edges(hfpm, htarget, is_pattern, edges, edges_num)

def fnFIE_fpm_set_pattern_mask(hfpm, hmask) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_set_pattern_mask( FHANDLE hfpm, FHANDLE hmask )
    マスクの設定

    Params:
    - [in,out] hfpm          FPMオブジェクト
    - [in]     hmask         マスク指定用画像オブジェクト(画像タイプ：uc8 のみ対応)
                                 画像オブジェクトのサイズは、FPMオブジェクトで管理されるマスターパタンのサイズと合わせてください。
                                     マスクを指定する場合には1を、マスクを指定しない場合には0を設定してください。それ以外の値が設定されていた場合にはF_ERR_INVALID_PARAMが戻ります。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  対応していない画像が渡された
    - F_ERR_FPM_NOFEATURE  特徴量が見つかりません
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_UNSUPPORTED    未サポートエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_set_pattern_mask(hfpm, hmask):
    r"""INT FVALGAPI fnFIE_fpm_set_pattern_mask( FHANDLE hfpm, FHANDLE hmask )
    マスクの設定

    Params:
    - [in,out] hfpm          FPMオブジェクト
    - [in]     hmask         マスク指定用画像オブジェクト(画像タイプ：uc8 のみ対応)
                                 画像オブジェクトのサイズは、FPMオブジェクトで管理されるマスターパタンのサイズと合わせてください。
                                     マスクを指定する場合には1を、マスクを指定しない場合には0を設定してください。それ以外の値が設定されていた場合にはF_ERR_INVALID_PARAMが戻ります。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  対応していない画像が渡された
    - F_ERR_FPM_NOFEATURE  特徴量が見つかりません
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_UNSUPPORTED    未サポートエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_set_pattern_mask(hfpm, hmask)

def fnFIE_fpm_clear_pattern_mask(hfpm) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_clear_pattern_mask( FHANDLE hfpm )
    マスク情報のクリア

    Params:
    - [in,out] hfpm      FPMオブジェクト

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_UNSUPPORTED    未サポートエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_clear_pattern_mask(hfpm):
    r"""INT FVALGAPI fnFIE_fpm_clear_pattern_mask( FHANDLE hfpm )
    マスク情報のクリア

    Params:
    - [in,out] hfpm      FPMオブジェクト

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_UNSUPPORTED    未サポートエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_clear_pattern_mask(hfpm)

def fnFIE_fpm_set_pattern_offset(hfpm, offset) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_set_pattern_offset( FHANDLE hfpm, DPNT_T offset )
    マッチング回答オフセット値の設定

    Params:
    - [in,out] hfpm      FPMオブジェクト
    - [in]     offset    マッチング回答オフセット値(マスターパタン画像の左上位置からの値)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_set_pattern_offset(hfpm, offset):
    r"""INT FVALGAPI fnFIE_fpm_set_pattern_offset( FHANDLE hfpm, DPNT_T offset )
    マッチング回答オフセット値の設定

    Params:
    - [in,out] hfpm      FPMオブジェクト
    - [in]     offset    マッチング回答オフセット値(マスターパタン画像の左上位置からの値)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_set_pattern_offset(hfpm, offset)

def fnFIE_fpm_set_pattern_offset_gravity(hfpm) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_set_pattern_offset_gravity( FHANDLE hfpm )
    マッチング回答オフセット値の自動設定（特徴量重心）

    Params:
    - [in,out] hfpm      FPMオブジェクト

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_set_pattern_offset_gravity(hfpm):
    r"""INT FVALGAPI fnFIE_fpm_set_pattern_offset_gravity( FHANDLE hfpm )
    マッチング回答オフセット値の自動設定（特徴量重心）

    Params:
    - [in,out] hfpm      FPMオブジェクト

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_set_pattern_offset_gravity(hfpm)

def fnFIE_fpm_get_pattern_mask(hfpm, phmask) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_mask( FHANDLE hfpm, FHANDLE* phmask )
    マスク情報の取得

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [out] phmask       マスターパタンのマスク情報 ( type: uc8 )
                                 画像オブジェクトを生成し、FPMオブジェクトで管理されるマスターパタンのマスク情報の複製を取得します。
                             　*phmask はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  対応していない画像が渡された
    - F_ERR_UNSUPPORTED    未サポートエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_pattern_mask(hfpm, phmask):
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_mask( FHANDLE hfpm, FHANDLE* phmask )
    マスク情報の取得

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [out] phmask       マスターパタンのマスク情報 ( type: uc8 )
                                 画像オブジェクトを生成し、FPMオブジェクトで管理されるマスターパタンのマスク情報の複製を取得します。
                             　*phmask はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  対応していない画像が渡された
    - F_ERR_UNSUPPORTED    未サポートエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_pattern_mask(hfpm, phmask)

def fnFIE_fpm_get_pattern_offset(hfpm, poffset) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_offset( FHANDLE hfpm, DPNT_T* poffset )
    マスターパタンマッチング回答オフセット値の取得

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [out] poffset      FPMオブジェクトが管理しているマッチング回答オフセット値(マスターパタン画像の左上位置からの値)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_pattern_offset(hfpm, poffset):
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_offset( FHANDLE hfpm, DPNT_T* poffset )
    マスターパタンマッチング回答オフセット値の取得

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [out] poffset      FPMオブジェクトが管理しているマッチング回答オフセット値(マスターパタン画像の左上位置からの値)

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_pattern_offset(hfpm, poffset)

def fnFIE_fpm_get_pattern_size(hfpm, ptn_width, ptn_height) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_size( FHANDLE hfpm, INT* ptn_width, INT* ptn_height )
    マスターパタン画像サイズ取得

    Params:
    - [in]  hfpm        FPMオブジェクト
    - [out] ptn_width   マスターパタン画像Ｘサイズ
    - [out] ptn_height  マスターパタン画像Ｙサイズ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_pattern_size(hfpm, ptn_width, ptn_height):
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_size( FHANDLE hfpm, INT* ptn_width, INT* ptn_height )
    マスターパタン画像サイズ取得

    Params:
    - [in]  hfpm        FPMオブジェクト
    - [out] ptn_width   マスターパタン画像Ｘサイズ
    - [out] ptn_height  マスターパタン画像Ｙサイズ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_pattern_size(hfpm, ptn_width, ptn_height)

def fnFIE_fpm_get_pattern_feature_param(hfpm, pmethod, pfeature_param) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_feature_param( FHANDLE hfpm, enum f_fpm_featedge* pmethod, F_FPM_FEATURE* pfeature_param )
    特徴量パラメータ取得

    Params:
    - [in]  hfpm             FPMオブジェクト
    - [out] pmethod          特徴量取得方法
    - [out] pfeature_param   特徴量パラメータ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NODATA         パラメータは存在しません( FPMオブジェクトは fnFIE_fpm_import_alloc() によって生成されました )
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_pattern_feature_param(hfpm, pmethod, pfeature_param):
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_feature_param( FHANDLE hfpm, enum f_fpm_featedge* pmethod, F_FPM_FEATURE* pfeature_param )
    特徴量パラメータ取得

    Params:
    - [in]  hfpm             FPMオブジェクト
    - [out] pmethod          特徴量取得方法
    - [out] pfeature_param   特徴量パラメータ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NODATA         パラメータは存在しません( FPMオブジェクトは fnFIE_fpm_import_alloc() によって生成されました )
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_pattern_feature_param(hfpm, pmethod, pfeature_param)

def fnFIE_fpm_get_pattern_image(hfpm, phimage) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_image( FHANDLE hfpm, FHANDLE* phimage )
    マスターパタン画像の取得

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [out] phimage      マスターパタンの画像 ( type: uc8 )
                                 画像オブジェクトを生成し、FPMオブジェクトで管理されるマスターパタンの複製を取得します。
                             　*phimage はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  対応していない画像が渡された
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NODATA         画像が登録されていません( FPMオブジェクトは fnFIE_fpm_import_alloc() によって生成する際に画像が指定されませんでした )
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_pattern_image(hfpm, phimage):
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_image( FHANDLE hfpm, FHANDLE* phimage )
    マスターパタン画像の取得

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [out] phimage      マスターパタンの画像 ( type: uc8 )
                                 画像オブジェクトを生成し、FPMオブジェクトで管理されるマスターパタンの複製を取得します。
                             　*phimage はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  対応していない画像が渡された
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NODATA         画像が登録されていません( FPMオブジェクトは fnFIE_fpm_import_alloc() によって生成する際に画像が指定されませんでした )
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_pattern_image(hfpm, phimage)

def fnFIE_fpm_get_pattern_feature_num(hfpm, pfeature_num) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_feature_num( FHANDLE hfpm, INT* pfeature_num )
    マスターパタン特徴量数の取得

    Params:
    - [in]  hfpm          FPMオブジェクト
    - [out] pfeature_num  FPMオブジェクトにある特徴量の数

    Returns:
    - F_ERR_NONE           正常終了。
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_pattern_feature_num(hfpm, pfeature_num):
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_feature_num( FHANDLE hfpm, INT* pfeature_num )
    マスターパタン特徴量数の取得

    Params:
    - [in]  hfpm          FPMオブジェクト
    - [out] pfeature_num  FPMオブジェクトにある特徴量の数

    Returns:
    - F_ERR_NONE           正常終了。
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_pattern_feature_num(hfpm, pfeature_num)

def fnFIE_fpm_get_pattern_feature_edges(hfpm, pedges) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_feature_edges( FHANDLE hfpm, F_DEDGE* pedges )
    マスターパタン特徴量を取得（勾配方向付きエッジ型）

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [out] pedges       勾配付きエッジ情報(格納エリアは予め確保する必要があります)
                                 予め fnFIE_fpm_get_pattern_feature_num() によって特徴量の数を取得し、必要な領域を確保する必要があります。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_pattern_feature_edges(hfpm, pedges):
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_feature_edges( FHANDLE hfpm, F_DEDGE* pedges )
    マスターパタン特徴量を取得（勾配方向付きエッジ型）

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [out] pedges       勾配付きエッジ情報(格納エリアは予め確保する必要があります)
                                 予め fnFIE_fpm_get_pattern_feature_num() によって特徴量の数を取得し、必要な領域を確保する必要があります。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_pattern_feature_edges(hfpm, pedges)

def fnFIE_fpm_get_refine_mode(hfpm, refine_mode) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_refine_mode( FHANDLE hfpm, INT* refine_mode )
    高精度ポーズ推定モードの取得

    Params:
    - [in]  hfpm            FPMオブジェクト
    - [out] refine_mode     設定されている高精度ポーズ推定の動作モード
                                - 0：粗サーチの位置姿勢情報を使用し、スコア計算まで行います(初期値)
                                - 1：その候補位置での回答を返しません

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_refine_mode(hfpm, refine_mode):
    r"""INT FVALGAPI fnFIE_fpm_get_refine_mode( FHANDLE hfpm, INT* refine_mode )
    高精度ポーズ推定モードの取得

    Params:
    - [in]  hfpm            FPMオブジェクト
    - [out] refine_mode     設定されている高精度ポーズ推定の動作モード
                                - 0：粗サーチの位置姿勢情報を使用し、スコア計算まで行います(初期値)
                                - 1：その候補位置での回答を返しません

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_refine_mode(hfpm, refine_mode)

def fnFIE_fpm_set_refine_mode(hfpm, refine_mode) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_set_refine_mode( FHANDLE hfpm, INT refine_mode )
    高精度ポーズ推定モードの設定

    Params:
    - [in] hfpm             FPMオブジェクト
    - [in] refine_mode      指定する高精度ポーズ推定の動作モード
                                - 0：粗サーチの位置姿勢情報を使用し、スコア計算まで行います(初期値)
                                - 1：その候補位置での回答を返しません

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_set_refine_mode(hfpm, refine_mode):
    r"""INT FVALGAPI fnFIE_fpm_set_refine_mode( FHANDLE hfpm, INT refine_mode )
    高精度ポーズ推定モードの設定

    Params:
    - [in] hfpm             FPMオブジェクト
    - [in] refine_mode      指定する高精度ポーズ推定の動作モード
                                - 0：粗サーチの位置姿勢情報を使用し、スコア計算まで行います(初期値)
                                - 1：その候補位置での回答を返しません

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_set_refine_mode(hfpm, refine_mode)

def fnFIE_fpm_get_relative_edge(hfpm, no, err_wide, edges, edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_relative_edge( FHANDLE hfpm, INT no, INT err_wide, F_DEDGE* edges, INT* edge_num )
    指定ポーズ下の対応点取得

    Params:
    - [in]  hfpm            FPMオブジェクト(サーチを実行済み)
    - [in]  no              対応するエッジを取得するサーチ回答番号(0〜)
    - [in]  err_wide         誤差範囲　±err_wide (0以上)
    - [out] edges           対応点情報
    - [out] edge_num        取得した対応点数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_relative_edge(hfpm, no, err_wide, edges, edge_num):
    r"""INT FVALGAPI fnFIE_fpm_get_relative_edge( FHANDLE hfpm, INT no, INT err_wide, F_DEDGE* edges, INT* edge_num )
    指定ポーズ下の対応点取得

    Params:
    - [in]  hfpm            FPMオブジェクト(サーチを実行済み)
    - [in]  no              対応するエッジを取得するサーチ回答番号(0〜)
    - [in]  err_wide         誤差範囲　±err_wide (0以上)
    - [out] edges           対応点情報
    - [out] edge_num        取得した対応点数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_relative_edge(hfpm, no, err_wide, edges, edge_num)

def fnFIE_fpm_get_pattern_essential(hfpm, phesse) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_essential( FHANDLE hfpm, FHANDLE* phesse )
    不可欠領域情報の取得

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [out] phesse       マスターパタンの不可欠領域情報
                                 画像オブジェクト( type: uc8 )を生成し、FPMオブジェクトで管理されるマスターパタンの不可欠領域情報の複製を取得します。
                                 不可欠領域として指定された画素には1を、指定されていない画素には0が設定されます。
                             　*phesse はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_UNKNOWN        原因不明なエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_pattern_essential(hfpm, phesse):
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_essential( FHANDLE hfpm, FHANDLE* phesse )
    不可欠領域情報の取得

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [out] phesse       マスターパタンの不可欠領域情報
                                 画像オブジェクト( type: uc8 )を生成し、FPMオブジェクトで管理されるマスターパタンの不可欠領域情報の複製を取得します。
                                 不可欠領域として指定された画素には1を、指定されていない画素には0が設定されます。
                             　*phesse はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_UNKNOWN        原因不明なエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_pattern_essential(hfpm, phesse)

def fnFIE_fpm_set_pattern_essential(hfpm, hesse) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_set_pattern_essential( FHANDLE hfpm, FHANDLE hesse )
    不可欠領域の設定

    Params:
    - [in,out] hfpm          FPMオブジェクト
    - [in]     hesse         不可欠領域指定用画像オブジェクト(画像タイプ：uc8 のみ対応)
                                 画像オブジェクトのサイズは、FPMオブジェクトで管理されるマスターパタンのサイズと合わせてください。
                                     不可欠領域を指定する画素には1を、不可欠領域を指定しない画素には0を設定してください。それ以外の値が設定されていた場合にはF_ERR_INVALID_PARAMが戻ります。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  対応していない画像が渡された
    - F_ERR_FPM_NOFEATURE  特徴量が見つかりません
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_set_pattern_essential(hfpm, hesse):
    r"""INT FVALGAPI fnFIE_fpm_set_pattern_essential( FHANDLE hfpm, FHANDLE hesse )
    不可欠領域の設定

    Params:
    - [in,out] hfpm          FPMオブジェクト
    - [in]     hesse         不可欠領域指定用画像オブジェクト(画像タイプ：uc8 のみ対応)
                                 画像オブジェクトのサイズは、FPMオブジェクトで管理されるマスターパタンのサイズと合わせてください。
                                     不可欠領域を指定する画素には1を、不可欠領域を指定しない画素には0を設定してください。それ以外の値が設定されていた場合にはF_ERR_INVALID_PARAMが戻ります。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  対応していない画像が渡された
    - F_ERR_FPM_NOFEATURE  特徴量が見つかりません
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_set_pattern_essential(hfpm, hesse)

def fnFIE_fpm_set_pattern_edgeless_mask(hfpm, hedgeless) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_set_pattern_edgeless_mask( FHANDLE hfpm, FHANDLE hedgeless )
    エッジ減点領域の設定

    Params:
    - [in,out] hfpm          FPMオブジェクト
    - [in]     hedgeless     エッジ減点領域指定用画像オブジェクト(type：bin, uc8)
                                 画像オブジェクトのサイズは、FPMオブジェクトで管理されるマスターパタンのサイズと合わせてください。
                                     エッジ減点領域を指定する画素には1を、エッジ減点領域を指定しない画素には0を設定してください。
                                 それ以外の値が設定されていた場合には ::F_ERR_INVALID_IMAGE が戻ります。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_set_pattern_edgeless_mask(hfpm, hedgeless):
    r"""INT FVALGAPI fnFIE_fpm_set_pattern_edgeless_mask( FHANDLE hfpm, FHANDLE hedgeless )
    エッジ減点領域の設定

    Params:
    - [in,out] hfpm          FPMオブジェクト
    - [in]     hedgeless     エッジ減点領域指定用画像オブジェクト(type：bin, uc8)
                                 画像オブジェクトのサイズは、FPMオブジェクトで管理されるマスターパタンのサイズと合わせてください。
                                     エッジ減点領域を指定する画素には1を、エッジ減点領域を指定しない画素には0を設定してください。
                                 それ以外の値が設定されていた場合には ::F_ERR_INVALID_IMAGE が戻ります。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_set_pattern_edgeless_mask(hfpm, hedgeless)

def fnFIE_fpm_get_pattern_edgeless_mask(hfpm, phedgeless) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_edgeless_mask( FHANDLE hfpm, FHANDLE* phedgeless )
    エッジ減点領域情報の取得

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [out] phedgeless   マスターパタンのエッジ減点領域情報
                                 画像オブジェクト( type: uc8 )を生成し、FPMオブジェクトで管理されるマスターパタンのエッジ減点領域情報の複製を取得します。
                                 エッジ減点領域として指定された画素には1を、指定されていない画素には0が設定されます。
                             　*phedgeless はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_UNKNOWN        原因不明なエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_pattern_edgeless_mask(hfpm, phedgeless):
    r"""INT FVALGAPI fnFIE_fpm_get_pattern_edgeless_mask( FHANDLE hfpm, FHANDLE* phedgeless )
    エッジ減点領域情報の取得

    Params:
    - [in]  hfpm         FPMオブジェクト
    - [out] phedgeless   マスターパタンのエッジ減点領域情報
                                 画像オブジェクト( type: uc8 )を生成し、FPMオブジェクトで管理されるマスターパタンのエッジ減点領域情報の複製を取得します。
                                 エッジ減点領域として指定された画素には1を、指定されていない画素には0が設定されます。
                             　*phedgeless はNULLで初期化してから引数に渡してください。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_UNKNOWN        原因不明なエラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_pattern_edgeless_mask(hfpm, phedgeless)

def fnFIE_fpm_import_alloc(ptn_edges, num_ptn_edges, ptn_image, offset, matching_mode, perr_code) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_fpm_import_alloc( F_DEDGE* ptn_edges, INT num_ptn_edges, FHANDLE ptn_image, DPNT_T offset, enum f_fpm_mode matching_mode, INT* perr_code )
    点情報から FPM オブジェクト生成

    Params:
    - [in]     ptn_edges       F_DEDGE 型 エッジデータ
    - [in]     num_ptn_edges    ptn_edges に格納されているエッジデータ数(1≦  num_ptn_edges)
    - [in]     himage_ptn       ptn_edges を取得した画像（type:uc8,ch:1, マスターパタン画像がない、または FPMオブジェクトが保持する必要が無ければNULLを指定することも可能です）
    - [in]     offset          マッチング回答オフセット値(マスターパタン画像の左上位置からの相対値)
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE 高速モード
    - [out]    perr_code       正常終了、またはエラーコードが入力されます。エラーコードを受け取る必要の無い場合は、NULLを指定することも可能です。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_IMAGE    画像オブジェクト異常
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPMオブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """
    raise NotImplementedError

def fpm_import_alloc(ptn_edges, num_ptn_edges, ptn_image, offset, matching_mode, perr_code=None):
    r"""FHANDLE FVALGAPI fnFIE_fpm_import_alloc( F_DEDGE* ptn_edges, INT num_ptn_edges, FHANDLE ptn_image, DPNT_T offset, enum f_fpm_mode matching_mode, INT* perr_code )
    点情報から FPM オブジェクト生成

    Params:
    - [in]     ptn_edges       F_DEDGE 型 エッジデータ
    - [in]     num_ptn_edges    ptn_edges に格納されているエッジデータ数(1≦  num_ptn_edges)
    - [in]     himage_ptn       ptn_edges を取得した画像（type:uc8,ch:1, マスターパタン画像がない、または FPMオブジェクトが保持する必要が無ければNULLを指定することも可能です）
    - [in]     offset          マッチング回答オフセット値(マスターパタン画像の左上位置からの相対値)
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE 高速モード
    - [out]    perr_code       正常終了、またはエラーコードが入力されます。エラーコードを受け取る必要の無い場合は、NULLを指定することも可能です。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_IMAGE    画像オブジェクト異常
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPMオブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """

    return _fie.fnFIE_fpm_import_alloc(ptn_edges, num_ptn_edges, ptn_image, offset, matching_mode, perr_code)

def fnFIE_fpm_alloc_shape_ellipse(a, b, bright, matching_mode, perr_code) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_fpm_alloc_shape_ellipse( DOUBLE a, DOUBLE b, BOOL bright, enum f_fpm_mode matching_mode, INT* perr_code )
    形状指定 FPM オブジェクト生成(楕円or円)

    Params:
    - [in]     a               楕円の方程式 パラメータ  a (3.0<= a, 単位:画素)
    - [in]     b               楕円の方程式 パラメータ  b (3.0<= b, 単位:画素)、円を指定する場合には  a と  b の値を等しい値にします。
    - [in]     is_white        楕円パタンの色
                                   - TRUE  指定楕円は白(背景よりも明るい)
                                   - FALSE 指定楕円は黒(背景よりも暗い)
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE 高速モード
    - [out]    perr_code       正常終了、またはエラーコードを格納します。エラーコードを受け取る必要の無い場合は、NULLを指定することも可能です。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_BUFFER_OVERFLOW   バッファ不足エラー
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPMオブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """
    raise NotImplementedError

def fpm_alloc_shape_ellipse(a, b, bright, matching_mode, perr_code=None):
    r"""FHANDLE FVALGAPI fnFIE_fpm_alloc_shape_ellipse( DOUBLE a, DOUBLE b, BOOL bright, enum f_fpm_mode matching_mode, INT* perr_code )
    形状指定 FPM オブジェクト生成(楕円or円)

    Params:
    - [in]     a               楕円の方程式 パラメータ  a (3.0<= a, 単位:画素)
    - [in]     b               楕円の方程式 パラメータ  b (3.0<= b, 単位:画素)、円を指定する場合には  a と  b の値を等しい値にします。
    - [in]     is_white        楕円パタンの色
                                   - TRUE  指定楕円は白(背景よりも明るい)
                                   - FALSE 指定楕円は黒(背景よりも暗い)
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE 高速モード
    - [out]    perr_code       正常終了、またはエラーコードを格納します。エラーコードを受け取る必要の無い場合は、NULLを指定することも可能です。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_BUFFER_OVERFLOW   バッファ不足エラー
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPMオブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """

    return _fie.fnFIE_fpm_alloc_shape_ellipse(a, b, bright, matching_mode, perr_code)

def fnFIE_fpm_alloc_shape_rectangle(width, height, bright, matching_mode, perr_code) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_fpm_alloc_shape_rectangle( DOUBLE width, DOUBLE height, BOOL bright, enum f_fpm_mode matching_mode, INT* perr_code )
    形状指定 FPM オブジェクト生成(矩形)

    Params:
    - [in]     width           矩形のX方向幅(3.0<= width, 単位:画素)
    - [in]     height          矩形のY方向高さ(3.0<= height, 単位:画素)
    - [in]     is_white        矩形パタンの色
                                   - TRUE  指定矩形は白(背景よりも明るい)
                                   - FALSE 指定矩形は黒(背景よりも暗い)
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE 高速モード
    - [out]    perr_code       正常終了、またはエラーコードを格納します。エラーコードを受け取る必要の無い場合は、NULLを指定することも可能です。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_BUFFER_OVERFLOW   バッファ不足エラー
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPMオブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """
    raise NotImplementedError

def fpm_alloc_shape_rectangle(width, height, bright, matching_mode, perr_code=None):
    r"""FHANDLE FVALGAPI fnFIE_fpm_alloc_shape_rectangle( DOUBLE width, DOUBLE height, BOOL bright, enum f_fpm_mode matching_mode, INT* perr_code )
    形状指定 FPM オブジェクト生成(矩形)

    Params:
    - [in]     width           矩形のX方向幅(3.0<= width, 単位:画素)
    - [in]     height          矩形のY方向高さ(3.0<= height, 単位:画素)
    - [in]     is_white        矩形パタンの色
                                   - TRUE  指定矩形は白(背景よりも明るい)
                                   - FALSE 指定矩形は黒(背景よりも暗い)
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE 高速モード
    - [out]    perr_code       正常終了、またはエラーコードを格納します。エラーコードを受け取る必要の無い場合は、NULLを指定することも可能です。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_BUFFER_OVERFLOW   バッファ不足エラー
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPMオブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """

    return _fie.fnFIE_fpm_alloc_shape_rectangle(width, height, bright, matching_mode, perr_code)

def fnFIE_fpm_alloc_shape_cross(a, b, close, bright, matching_mode, perr_code) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_fpm_alloc_shape_cross( DOUBLE a, DOUBLE b, BOOL close, BOOL bright, enum f_fpm_mode matching_mode, INT* perr_code )
    形状指定 FPM オブジェクト生成(十字)

    Params:
    - [in]     a               十字パタンのパラメータ  a (3.0<= a, 単位:画素)
    - [in]     b               十字パタンのパラメータ  b (1.0<= b,  b< a,単位:画素)
    - [in]     is_close        十字パタン 開閉状態
                                   - TRUE  指定十字マークは閉じている
                                   - FALSE 指定十字マークは開いている(パラメータ  b の位置のエッジが無い)
    - [in]     is_white        十字パタンの色
                                   - TRUE  指定矩形は白(背景よりも明るい)
                                   - FALSE 指定矩形は黒(背景よりも暗い)
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE 高速モード
    - [out]    perr_code       正常終了、またはエラーコードを格納します。エラーコードを受け取る必要の無い場合は、NULLを指定することも可能です。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_BUFFER_OVERFLOW  バッファ不足エラー
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPMオブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """
    raise NotImplementedError

def fpm_alloc_shape_cross(a, b, close, bright, matching_mode, perr_code=None):
    r"""FHANDLE FVALGAPI fnFIE_fpm_alloc_shape_cross( DOUBLE a, DOUBLE b, BOOL close, BOOL bright, enum f_fpm_mode matching_mode, INT* perr_code )
    形状指定 FPM オブジェクト生成(十字)

    Params:
    - [in]     a               十字パタンのパラメータ  a (3.0<= a, 単位:画素)
    - [in]     b               十字パタンのパラメータ  b (1.0<= b,  b< a,単位:画素)
    - [in]     is_close        十字パタン 開閉状態
                                   - TRUE  指定十字マークは閉じている
                                   - FALSE 指定十字マークは開いている(パラメータ  b の位置のエッジが無い)
    - [in]     is_white        十字パタンの色
                                   - TRUE  指定矩形は白(背景よりも明るい)
                                   - FALSE 指定矩形は黒(背景よりも暗い)
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE 高速モード
    - [out]    perr_code       正常終了、またはエラーコードを格納します。エラーコードを受け取る必要の無い場合は、NULLを指定することも可能です。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_BUFFER_OVERFLOW  バッファ不足エラー
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPMオブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """

    return _fie.fnFIE_fpm_alloc_shape_cross(a, b, close, bright, matching_mode, perr_code)

def fnFIE_fpm_get_pitch(hfpm, pitch_x, pitch_y) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_pitch( FHANDLE hfpm, INT* pitch_x, INT* pitch_y )
    最小検出間隔の取得

    Params:
    - [in]  hfpm    FPMオブジェクト
    - [out] pitch_x 同一の解であるとみなす範囲で、単位はピクセルです。0の場合パタンの情報から自動決定します。
    - [out] pitch_y 同一の解であるとみなす範囲で、単位はピクセルです。0の場合パタンの情報から自動決定します。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_pitch(hfpm, pitch_x, pitch_y):
    r"""INT FVALGAPI fnFIE_fpm_get_pitch( FHANDLE hfpm, INT* pitch_x, INT* pitch_y )
    最小検出間隔の取得

    Params:
    - [in]  hfpm    FPMオブジェクト
    - [out] pitch_x 同一の解であるとみなす範囲で、単位はピクセルです。0の場合パタンの情報から自動決定します。
    - [out] pitch_y 同一の解であるとみなす範囲で、単位はピクセルです。0の場合パタンの情報から自動決定します。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_pitch(hfpm, pitch_x, pitch_y)

def fnFIE_fpm_set_pitch(hfpm, pitch_x, pitch_y) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_set_pitch( FHANDLE hfpm, INT pitch_x, INT pitch_y )
    最小検出間隔の設定

    Params:
    - [out] hfpm    FPMオブジェクト
    - [in] pitch_x 同一の解であるとみなす範囲で、単位はピクセルです。0の場合パタンの情報から自動決定します。
    - [in] pitch_y 同一の解であるとみなす範囲で、単位はピクセルです。0の場合パタンの情報から自動決定します。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_set_pitch(hfpm, pitch_x, pitch_y):
    r"""INT FVALGAPI fnFIE_fpm_set_pitch( FHANDLE hfpm, INT pitch_x, INT pitch_y )
    最小検出間隔の設定

    Params:
    - [out] hfpm    FPMオブジェクト
    - [in] pitch_x 同一の解であるとみなす範囲で、単位はピクセルです。0の場合パタンの情報から自動決定します。
    - [in] pitch_y 同一の解であるとみなす範囲で、単位はピクセルです。0の場合パタンの情報から自動決定します。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_set_pitch(hfpm, pitch_x, pitch_y)

def fnFIE_fpm_get_refine_pose_boundary_mode(hfpm, boundary_mode) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_get_refine_pose_boundary_mode( FHANDLE hfpm, enum f_fpm_pose_boundary_mode* boundary_mode )
    高精度ポーズ推定における姿勢の範囲境界モードの取得

    Params:
    - [in] hfpm FPMオブジェクト
    - [out] boundary_mode 姿勢の範囲境界モード
                      - F_FPM_POSE_UNBOUNDED 姿勢の範囲制限なし（初期値）
                      - F_FPM_POSE_BOUNDED 姿勢の範囲制限あり
                      - F_FPM_POSE_DELETE_OUT_OF_BOUND 姿勢が範囲外となる回答を削除

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_get_refine_pose_boundary_mode(hfpm, boundary_mode):
    r"""INT FVALGAPI fnFIE_fpm_get_refine_pose_boundary_mode( FHANDLE hfpm, enum f_fpm_pose_boundary_mode* boundary_mode )
    高精度ポーズ推定における姿勢の範囲境界モードの取得

    Params:
    - [in] hfpm FPMオブジェクト
    - [out] boundary_mode 姿勢の範囲境界モード
                      - F_FPM_POSE_UNBOUNDED 姿勢の範囲制限なし（初期値）
                      - F_FPM_POSE_BOUNDED 姿勢の範囲制限あり
                      - F_FPM_POSE_DELETE_OUT_OF_BOUND 姿勢が範囲外となる回答を削除

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_get_refine_pose_boundary_mode(hfpm, boundary_mode)

def fnFIE_fpm_set_refine_pose_boundary_mode(hfpm, boundary_mode) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_set_refine_pose_boundary_mode( FHANDLE hfpm, enum f_fpm_pose_boundary_mode boundary_mode )
    高精度ポーズ推定における姿勢の範囲境界モードの設定

    Params:
    - [in,out] hfpm FPMオブジェクト
    - [in] boundary_mode 姿勢の範囲境界モード
                      - F_FPM_POSE_UNBOUNDED 姿勢の範囲制限なし（初期値）
                      - F_FPM_POSE_BOUNDED 姿勢の範囲制限あり
                      - F_FPM_POSE_DELETE_OUT_OF_BOUND 姿勢が範囲外となる回答を削除

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_set_refine_pose_boundary_mode(hfpm, boundary_mode):
    r"""INT FVALGAPI fnFIE_fpm_set_refine_pose_boundary_mode( FHANDLE hfpm, enum f_fpm_pose_boundary_mode boundary_mode )
    高精度ポーズ推定における姿勢の範囲境界モードの設定

    Params:
    - [in,out] hfpm FPMオブジェクト
    - [in] boundary_mode 姿勢の範囲境界モード
                      - F_FPM_POSE_UNBOUNDED 姿勢の範囲制限なし（初期値）
                      - F_FPM_POSE_BOUNDED 姿勢の範囲制限あり
                      - F_FPM_POSE_DELETE_OUT_OF_BOUND 姿勢が範囲外となる回答を削除

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが入力されました
    - F_ERR_INVALID_PARAM       不正なパラメータが入力されました
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_set_refine_pose_boundary_mode(hfpm, boundary_mode)

def fnFIE_fpm_matching(hfpm, htarget, hmask_match, window, method, pfeature_param, pmatching_param, pareascore_param, pmatching_result, presult_num) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_matching( FHANDLE hfpm, FHANDLE htarget, FHANDLE hmask_match, BOX_T window, enum f_fpm_featedge method, const F_FPM_FEATURE* pfeature_param, const F_FPM_MATCH* pmatching_param, const F_FPM_AREASCORE* pareascore_param, F_SEARCH_RESULT* pmatching_result, INT* presult_num )
    一連のマッチング実行

    Params:
    - [in,out] hfpm             FPMオブジェクト
    - [in,out] htarget          FPMでマッチング対象となる画像オブジェクト、もしくは対象画像から得られた特徴量が格納されたオブジェクトを指定します。
                                    画像オブジェクト、特徴量オブジェクト、FPMオブジェクトが有効です。
                                    画像オブジェクトが指定された場合には、画像タイプ uc8 のみ対応し、チャネル数は 1 でなければいけません。
    - [in]     hmask_match      マッチングエリアへのマスク情報
                                    画像タイプ uc8 のみ対応し、チャネル数は 1 でなければいけません。
                                    NULLが指定された場合はマスクを使用しません
    - [in]     window           マッチングエリア
    - [in]     method           特徴量抽出手法
                                     - F_FPM_SOBEL_EDGE ソーベルによる特徴量抽出
                                     - F_FPM_CORR_EDGE  相関エッジによる特徴量抽出
                                     - F_FPM_SOBEL_MAX_EDGE 強度上限付ソーベルによる特徴量抽出
                                     - F_FPM_CORR_MAX_EDGE  強度上限付相関エッジによる特徴量抽出
                                     - F_FPM_GROOVE_EDGE  細線エッジによる特徴量抽出
    - [in]     pfeature_param   特徴量計測パラメータ構造体へのポインタ
                                    htargetに特徴量オブジェクトを指定した場合は使用しません。
                                    htargetに画像オブジェクトが指定され、NULLが指定された場合はマスターパタン登録時のパラメータを使用します。
    - [in]     pmatching_param  マッチングパラメータ構造体へのポインタ
    - [in]     pareascore_param 領域スコア再計算パラメータへのポインタ（領域スコア再計算を行わない場合にはNULLを指定）
    - [out]    pmatching_result マッチング結果
    - [out]    presult_num      マッチング結果個数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_IMAGE  引数画像オブジェクトが異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_FPM_NOFEATURE  特徴量が見つかりません。
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_matching(hfpm, htarget, hmask_match, window, method, pfeature_param, pmatching_param, pareascore_param, pmatching_result, presult_num):
    r"""INT FVALGAPI fnFIE_fpm_matching( FHANDLE hfpm, FHANDLE htarget, FHANDLE hmask_match, BOX_T window, enum f_fpm_featedge method, const F_FPM_FEATURE* pfeature_param, const F_FPM_MATCH* pmatching_param, const F_FPM_AREASCORE* pareascore_param, F_SEARCH_RESULT* pmatching_result, INT* presult_num )
    一連のマッチング実行

    Params:
    - [in,out] hfpm             FPMオブジェクト
    - [in,out] htarget          FPMでマッチング対象となる画像オブジェクト、もしくは対象画像から得られた特徴量が格納されたオブジェクトを指定します。
                                    画像オブジェクト、特徴量オブジェクト、FPMオブジェクトが有効です。
                                    画像オブジェクトが指定された場合には、画像タイプ uc8 のみ対応し、チャネル数は 1 でなければいけません。
    - [in]     hmask_match      マッチングエリアへのマスク情報
                                    画像タイプ uc8 のみ対応し、チャネル数は 1 でなければいけません。
                                    NULLが指定された場合はマスクを使用しません
    - [in]     window           マッチングエリア
    - [in]     method           特徴量抽出手法
                                     - F_FPM_SOBEL_EDGE ソーベルによる特徴量抽出
                                     - F_FPM_CORR_EDGE  相関エッジによる特徴量抽出
                                     - F_FPM_SOBEL_MAX_EDGE 強度上限付ソーベルによる特徴量抽出
                                     - F_FPM_CORR_MAX_EDGE  強度上限付相関エッジによる特徴量抽出
                                     - F_FPM_GROOVE_EDGE  細線エッジによる特徴量抽出
    - [in]     pfeature_param   特徴量計測パラメータ構造体へのポインタ
                                    htargetに特徴量オブジェクトを指定した場合は使用しません。
                                    htargetに画像オブジェクトが指定され、NULLが指定された場合はマスターパタン登録時のパラメータを使用します。
    - [in]     pmatching_param  マッチングパラメータ構造体へのポインタ
    - [in]     pareascore_param 領域スコア再計算パラメータへのポインタ（領域スコア再計算を行わない場合にはNULLを指定）
    - [out]    pmatching_result マッチング結果
    - [out]    presult_num      マッチング結果個数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_IMAGE  引数画像オブジェクトが異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_FPM_NOFEATURE  特徴量が見つかりません。
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_matching(hfpm, htarget, hmask_match, window, method, pfeature_param, pmatching_param, pareascore_param, pmatching_result, presult_num)

def fnFIE_fpm_matching_image(hfpm, himage, hmask_match, window, method, pfeature_param, pmatching_param, pmatching_result, presult_num) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_matching_image( FHANDLE hfpm, FHANDLE himage, FHANDLE hmask_match, BOX_T window, enum f_fpm_featedge method, const F_FPM_FEATURE* pfeature_param, const F_FPM_MATCH* pmatching_param, F_SEARCH_RESULT* pmatching_result, INT* presult_num )
    FPM画像オブジェクトからのマッチング実行

    Params:
    - [in,out] hfpm              FPMオブジェクト
    - [in]     himage            マッチング対象となる画像オブジェクト(画像タイプ：uc8 のみ対応)
                                     チャネル数は 1 でなければいけません。
    - [in]     hmask_match       マッチングエリアへのマスク情報
                                     画像タイプ uc8 のみ対応し、チャネル数は 1 でなければいけません。
                                     NULLが指定された場合はマスクを使用しません
    - [in]     window            マッチングエリア
    - [in]     method            特徴量抽出手法
                                      - F_FPM_SOBEL_EDGE ソーベルによる特徴量抽出
                                      - F_FPM_CORR_EDGE  相関エッジによる特徴量抽出
                                      - F_FPM_SOBEL_MAX_EDGE 強度上限付ソーベルによる特徴量抽出
                                      - F_FPM_CORR_MAX_EDGE  強度上限付相関エッジによる特徴量抽出
                                      - F_FPM_GROOVE_EDGE  細線エッジによる特徴量抽出
    - [in]     pfeature_param    特徴量計測パラメータ(NULLが指定された場合はマスターパタン登録時のパラメータを使用します)
    - [in]     pmatching_param   マッチングパラメータ
    - [out]    pmatching_result  マッチング結果
    - [out]    presult_num       マッチング結果個数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_IMAGE  引数画像オブジェクトが異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_FPM_NOFEATURE  特徴量が見つかりません。
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_matching_image(hfpm, himage, hmask_match, window, method, pfeature_param, pmatching_param, pmatching_result, presult_num):
    r"""INT FVALGAPI fnFIE_fpm_matching_image( FHANDLE hfpm, FHANDLE himage, FHANDLE hmask_match, BOX_T window, enum f_fpm_featedge method, const F_FPM_FEATURE* pfeature_param, const F_FPM_MATCH* pmatching_param, F_SEARCH_RESULT* pmatching_result, INT* presult_num )
    FPM画像オブジェクトからのマッチング実行

    Params:
    - [in,out] hfpm              FPMオブジェクト
    - [in]     himage            マッチング対象となる画像オブジェクト(画像タイプ：uc8 のみ対応)
                                     チャネル数は 1 でなければいけません。
    - [in]     hmask_match       マッチングエリアへのマスク情報
                                     画像タイプ uc8 のみ対応し、チャネル数は 1 でなければいけません。
                                     NULLが指定された場合はマスクを使用しません
    - [in]     window            マッチングエリア
    - [in]     method            特徴量抽出手法
                                      - F_FPM_SOBEL_EDGE ソーベルによる特徴量抽出
                                      - F_FPM_CORR_EDGE  相関エッジによる特徴量抽出
                                      - F_FPM_SOBEL_MAX_EDGE 強度上限付ソーベルによる特徴量抽出
                                      - F_FPM_CORR_MAX_EDGE  強度上限付相関エッジによる特徴量抽出
                                      - F_FPM_GROOVE_EDGE  細線エッジによる特徴量抽出
    - [in]     pfeature_param    特徴量計測パラメータ(NULLが指定された場合はマスターパタン登録時のパラメータを使用します)
    - [in]     pmatching_param   マッチングパラメータ
    - [out]    pmatching_result  マッチング結果
    - [out]    presult_num       マッチング結果個数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_IMAGE  引数画像オブジェクトが異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_FPM_NOFEATURE  特徴量が見つかりません。
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_matching_image(hfpm, himage, hmask_match, window, method, pfeature_param, pmatching_param, pmatching_result, presult_num)

def fnFIE_fpm_matching_feature(hfpm, hfeature, hmask_match, window, pmatching_param, pmatching_result, presult_num) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_matching_feature( FHANDLE hfpm, FHANDLE hfeature, FHANDLE hmask_match, BOX_T window, const F_FPM_MATCH* pmatching_param, F_SEARCH_RESULT* pmatching_result, INT* presult_num )
    FPM特徴量オブジェクトからのマッチング実行

    Params:
    - [in,out] hfpm             FPMオブジェクト
    - [in]     hfeature         FPM特徴量オブジェクト（マッチング対象画像から得られた）
                                    特徴量オブジェクト取得関数( fnFIE_fpm_feature_alloc(), fnFIE_fpm_feature_window_alloc() )によって生成したオブジェクトを指定します。
    - [in]     hmask_match      マッチングエリアへのマスク情報
                                    画像タイプ uc8 のみ対応し、チャネル数は 1 でなければいけません。
                                    NULLが指定された場合はマスクを使用しません
    - [in]     window           マッチングエリア
    - [in]     pmatching_param  マッチングパラメータ
    - [out]    pmatching_result マッチング結果
    - [out]    presult_num      マッチング結果個数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_FPM_NOFEATURE  特徴量が見つかりません。
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_matching_feature(hfpm, hfeature, hmask_match, window, pmatching_param, pmatching_result, presult_num):
    r"""INT FVALGAPI fnFIE_fpm_matching_feature( FHANDLE hfpm, FHANDLE hfeature, FHANDLE hmask_match, BOX_T window, const F_FPM_MATCH* pmatching_param, F_SEARCH_RESULT* pmatching_result, INT* presult_num )
    FPM特徴量オブジェクトからのマッチング実行

    Params:
    - [in,out] hfpm             FPMオブジェクト
    - [in]     hfeature         FPM特徴量オブジェクト（マッチング対象画像から得られた）
                                    特徴量オブジェクト取得関数( fnFIE_fpm_feature_alloc(), fnFIE_fpm_feature_window_alloc() )によって生成したオブジェクトを指定します。
    - [in]     hmask_match      マッチングエリアへのマスク情報
                                    画像タイプ uc8 のみ対応し、チャネル数は 1 でなければいけません。
                                    NULLが指定された場合はマスクを使用しません
    - [in]     window           マッチングエリア
    - [in]     pmatching_param  マッチングパラメータ
    - [out]    pmatching_result マッチング結果
    - [out]    presult_num      マッチング結果個数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_FPM_NOFEATURE  特徴量が見つかりません。
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_matching_feature(hfpm, hfeature, hmask_match, window, pmatching_param, pmatching_result, presult_num)

def fnFIE_fpm_matching_areascore(hfpm, htarget, pareascore_param, require_result_num, pmatching_result, presult_num) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_matching_areascore( FHANDLE hfpm, FHANDLE htarget, const F_FPM_AREASCORE* pareascore_param, INT require_result_num, F_SEARCH_RESULT* pmatching_result, INT* presult_num )
    領域スコア再計算

    Params:
    - [in]  hfpm               FPMオブジェクト
    - [in]  htarget            領域スコア計算に使用する特徴量情報が格納されたオブジェクト
                                   特徴量オブジェクトが有効です。
                                   NULLが指定された場合にはFPMオブジェクトに格納された(最後にマッチングに使用した)特徴量情報を使用します。
    - [in]  pareascore_param   領域スコア再計算パラメータ
    - [in]  require_result_num 結果取得数
    - [out] pmatching_result   マッチング結果
    - [out] presult_num        マッチング結果個数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_matching_areascore(hfpm, htarget, pareascore_param, require_result_num, pmatching_result, presult_num):
    r"""INT FVALGAPI fnFIE_fpm_matching_areascore( FHANDLE hfpm, FHANDLE htarget, const F_FPM_AREASCORE* pareascore_param, INT require_result_num, F_SEARCH_RESULT* pmatching_result, INT* presult_num )
    領域スコア再計算

    Params:
    - [in]  hfpm               FPMオブジェクト
    - [in]  htarget            領域スコア計算に使用する特徴量情報が格納されたオブジェクト
                                   特徴量オブジェクトが有効です。
                                   NULLが指定された場合にはFPMオブジェクトに格納された(最後にマッチングに使用した)特徴量情報を使用します。
    - [in]  pareascore_param   領域スコア再計算パラメータ
    - [in]  require_result_num 結果取得数
    - [out] pmatching_result   マッチング結果
    - [out] presult_num        マッチング結果個数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_matching_areascore(hfpm, htarget, pareascore_param, require_result_num, pmatching_result, presult_num)

def fnFIE_fpm_matching_essential(hfpm, htarget, err_wide, threshold, require_result_num, pmatching_result, presult_num) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_matching_essential( FHANDLE hfpm, FHANDLE htarget, INT err_wide, INT threshold, INT require_result_num, F_SEARCH_RESULT* pmatching_result, INT* presult_num )
    不可欠領域スコア計算

    Params:
    - [in]  hfpm               FPMオブジェクト
    - [in]  htarget            不可欠領域領域スコア計算に使用する特徴量情報が格納されたオブジェクト
                                   特徴量オブジェクトが有効です。
                                   NULLが指定された場合にはFPMオブジェクトに格納された(最後にマッチングに使用した)特徴量情報を使用します。
    - [in]  err_wide           対応点誤差範囲(0≦err_wide)
    - [in]  threshold          スコアしきい値(0≦threshold≦100)
    - [in]  require_result_num 結果取得数(1≦require_result_num)
    - [out] pmatching_result   マッチング結果
    - [out] presult_num        マッチング結果個数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_FPM_NOFEATURE  特徴量がありません
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_matching_essential(hfpm, htarget, err_wide, threshold, require_result_num, pmatching_result, presult_num):
    r"""INT FVALGAPI fnFIE_fpm_matching_essential( FHANDLE hfpm, FHANDLE htarget, INT err_wide, INT threshold, INT require_result_num, F_SEARCH_RESULT* pmatching_result, INT* presult_num )
    不可欠領域スコア計算

    Params:
    - [in]  hfpm               FPMオブジェクト
    - [in]  htarget            不可欠領域領域スコア計算に使用する特徴量情報が格納されたオブジェクト
                                   特徴量オブジェクトが有効です。
                                   NULLが指定された場合にはFPMオブジェクトに格納された(最後にマッチングに使用した)特徴量情報を使用します。
    - [in]  err_wide           対応点誤差範囲(0≦err_wide)
    - [in]  threshold          スコアしきい値(0≦threshold≦100)
    - [in]  require_result_num 結果取得数(1≦require_result_num)
    - [out] pmatching_result   マッチング結果
    - [out] presult_num        マッチング結果個数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_FPM_NOFEATURE  特徴量がありません
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_matching_essential(hfpm, htarget, err_wide, threshold, require_result_num, pmatching_result, presult_num)

def fnFIE_fpm_matching_recalc_with_edgeless_mask(hfpm, htarget, err_wide, noise_weight, threshold, require_result_num, pmatching_result, presult_num) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_matching_recalc_with_edgeless_mask( FHANDLE hfpm, FHANDLE htarget, INT err_wide, DOUBLE noise_weight, INT threshold, INT require_result_num, F_SEARCH_RESULT* pmatching_result, INT* presult_num )
    特定領域エッジ減点スコア計算

    Params:
    - [in]  hfpm               FPMオブジェクト
    - [in]  htarget            不可欠領域領域スコア計算に使用する特徴量情報が格納されたオブジェクト
                                   特徴量オブジェクトが有効です。
                                   NULLが指定された場合にはFPMオブジェクトに格納された(最後にマッチングに使用した)特徴量情報を使用します。
    - [in]  err_wide           対応点誤差範囲(0≦err_wide)
    - [in]  noise_weight       エッジ減点重み係数(0≦noise_weight)
                                   エッジ減点領域内の1つのエッジに対する減点値の重みを表します。
    - [in]  threshold          スコアしきい値(0≦threshold≦100)
    - [in]  require_result_num 結果取得数(1≦require_result_num)
    - [out] pmatching_result   マッチング結果
    - [out] presult_num        マッチング結果個数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_FPM_NOFEATURE  特徴量がありません
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_matching_recalc_with_edgeless_mask(hfpm, htarget, err_wide, noise_weight, threshold, require_result_num, pmatching_result, presult_num):
    r"""INT FVALGAPI fnFIE_fpm_matching_recalc_with_edgeless_mask( FHANDLE hfpm, FHANDLE htarget, INT err_wide, DOUBLE noise_weight, INT threshold, INT require_result_num, F_SEARCH_RESULT* pmatching_result, INT* presult_num )
    特定領域エッジ減点スコア計算

    Params:
    - [in]  hfpm               FPMオブジェクト
    - [in]  htarget            不可欠領域領域スコア計算に使用する特徴量情報が格納されたオブジェクト
                                   特徴量オブジェクトが有効です。
                                   NULLが指定された場合にはFPMオブジェクトに格納された(最後にマッチングに使用した)特徴量情報を使用します。
    - [in]  err_wide           対応点誤差範囲(0≦err_wide)
    - [in]  noise_weight       エッジ減点重み係数(0≦noise_weight)
                                   エッジ減点領域内の1つのエッジに対する減点値の重みを表します。
    - [in]  threshold          スコアしきい値(0≦threshold≦100)
    - [in]  require_result_num 結果取得数(1≦require_result_num)
    - [out] pmatching_result   マッチング結果
    - [out] presult_num        マッチング結果個数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_FPM_NOFEATURE  特徴量がありません
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_matching_recalc_with_edgeless_mask(hfpm, htarget, err_wide, noise_weight, threshold, require_result_num, pmatching_result, presult_num)

def fnFIE_fpm_feature_alloc(himage, matching_mode, method, pfeature_param, border, perr_code) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_fpm_feature_alloc( FHANDLE himage, enum f_fpm_mode matching_mode, enum f_fpm_featedge method, const F_FPM_FEATURE* pfeature_param, BOOL border, INT* perr_code )
    特徴量を取得

    Params:
    - [in]     himage          特徴量を計測する対象となる画像オブジェクト (画像タイプ：uc8 のみ対応)
                                   チャネル数は 1 でなければいけません。
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                    - F_FPM_NORMAL_MODE 通常モード
                                    - F_FPM_SPEED_MODE  高速モード
    - [in]     method          特徴量抽出手法
                                    - F_FPM_SOBEL_EDGE ソーベルによる特徴量抽出
                                    - F_FPM_CORR_EDGE  相関エッジによる特徴量抽出
                                    - F_FPM_SOBEL_MAX_EDGE  強度上限付ソーベルによる特徴量抽出
                                    - F_FPM_CORR_MAX_EDGE  強度上限付相関エッジによる特徴量抽出
                                    - F_FPM_GROOVE_EDGE  細線エッジによる特徴量抽出
    - [in]     pfeature_param  特徴量計測パラメータ
    - [in]     border          特徴量抽出時のボーダー処理
                                    - TRUE  ボーダー処理を行う
                                    - FALSE ボーダー処理を行わない
    - [out]    perr_code        正常終了、またはエラーコードが入力されます。エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_IMAGE    引数画像オブジェクトが異常
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_FPM_NOFEATURE    特徴量が見つかりません。
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPM特徴量オブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """
    raise NotImplementedError

def fpm_feature_alloc(himage, matching_mode, method, pfeature_param, border=False, perr_code=None):
    r"""FHANDLE FVALGAPI fnFIE_fpm_feature_alloc( FHANDLE himage, enum f_fpm_mode matching_mode, enum f_fpm_featedge method, const F_FPM_FEATURE* pfeature_param, BOOL border, INT* perr_code )
    特徴量を取得

    Params:
    - [in]     himage          特徴量を計測する対象となる画像オブジェクト (画像タイプ：uc8 のみ対応)
                                   チャネル数は 1 でなければいけません。
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                    - F_FPM_NORMAL_MODE 通常モード
                                    - F_FPM_SPEED_MODE  高速モード
    - [in]     method          特徴量抽出手法
                                    - F_FPM_SOBEL_EDGE ソーベルによる特徴量抽出
                                    - F_FPM_CORR_EDGE  相関エッジによる特徴量抽出
                                    - F_FPM_SOBEL_MAX_EDGE  強度上限付ソーベルによる特徴量抽出
                                    - F_FPM_CORR_MAX_EDGE  強度上限付相関エッジによる特徴量抽出
                                    - F_FPM_GROOVE_EDGE  細線エッジによる特徴量抽出
    - [in]     pfeature_param  特徴量計測パラメータ
    - [in]     border          特徴量抽出時のボーダー処理
                                    - TRUE  ボーダー処理を行う
                                    - FALSE ボーダー処理を行わない
    - [out]    perr_code        正常終了、またはエラーコードが入力されます。エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_IMAGE    引数画像オブジェクトが異常
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_FPM_NOFEATURE    特徴量が見つかりません。
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPM特徴量オブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """

    return _fie.fnFIE_fpm_feature_alloc(himage, matching_mode, method, pfeature_param, border, perr_code)

def fnFIE_fpm_feature_window_alloc(himage, window, matching_mode, method, pfeature_param, border, perr_code) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_fpm_feature_window_alloc( FHANDLE himage, BOX_T window, enum f_fpm_mode matching_mode, enum f_fpm_featedge method, const F_FPM_FEATURE* pfeature_param, BOOL border, INT* perr_code )
    ウィンドウを指定して特徴量を取得

    Params:
    - [in]     himage          特徴量を計測する対象となる画像オブジェクト (画像タイプ：uc8 のみ対応)
                                   チャネル数は 1 でなければいけません。
    - [in]     window          特徴量を計測する対象画像エリアです。
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE  高速モード
    - [in]     method          特徴量抽出手法
                                   - F_FPM_SOBEL_EDGE ソーベルによる特徴量抽出
                                   - F_FPM_CORR_EDGE  相関エッジによる特徴量抽出
                                   - F_FPM_SOBEL_MAX_EDGE  強度上限付ソーベルによる特徴量抽出
                                   - F_FPM_CORR_MAX_EDGE  強度上限付相関エッジによる特徴量抽出
                                   - F_FPM_GROOVE_EDGE  細線エッジによる特徴量抽出
    - [in]     pfeature_param  特徴量計測パラメータ
    - [in]     border          特徴量抽出時のボーダー処理
                                   - TRUE  ボーダー処理を行う
                                   - FALSE ボーダー処理を行わない
    - [out]    perr_code        正常終了、またはエラーコードが入力されます。エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_IMAGE    引数画像オブジェクトが異常
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_FPM_NOFEATURE    特徴量が見つかりません。
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPM特徴量オブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """
    raise NotImplementedError

def fpm_feature_window_alloc(himage, window, matching_mode, method, pfeature_param, border=False, perr_code=None):
    r"""FHANDLE FVALGAPI fnFIE_fpm_feature_window_alloc( FHANDLE himage, BOX_T window, enum f_fpm_mode matching_mode, enum f_fpm_featedge method, const F_FPM_FEATURE* pfeature_param, BOOL border, INT* perr_code )
    ウィンドウを指定して特徴量を取得

    Params:
    - [in]     himage          特徴量を計測する対象となる画像オブジェクト (画像タイプ：uc8 のみ対応)
                                   チャネル数は 1 でなければいけません。
    - [in]     window          特徴量を計測する対象画像エリアです。
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE  高速モード
    - [in]     method          特徴量抽出手法
                                   - F_FPM_SOBEL_EDGE ソーベルによる特徴量抽出
                                   - F_FPM_CORR_EDGE  相関エッジによる特徴量抽出
                                   - F_FPM_SOBEL_MAX_EDGE  強度上限付ソーベルによる特徴量抽出
                                   - F_FPM_CORR_MAX_EDGE  強度上限付相関エッジによる特徴量抽出
                                   - F_FPM_GROOVE_EDGE  細線エッジによる特徴量抽出
    - [in]     pfeature_param  特徴量計測パラメータ
    - [in]     border          特徴量抽出時のボーダー処理
                                   - TRUE  ボーダー処理を行う
                                   - FALSE ボーダー処理を行わない
    - [out]    perr_code        正常終了、またはエラーコードが入力されます。エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_IMAGE    引数画像オブジェクトが異常
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_FPM_NOFEATURE    特徴量が見つかりません。
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPM特徴量オブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """

    return _fie.fnFIE_fpm_feature_window_alloc(himage, window, matching_mode, method, pfeature_param, border, perr_code)

def fnFIE_fpm_feature_mask(hfeature, hmask) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_feature_mask( FHANDLE hfeature, FHANDLE hmask )
    特徴量のマスク

    Params:
    - [in,out]  hfeature      FPM特徴量オブジェクト
    - [in]      hmask         マスクパタン指定用画像オブジェクト(画像タイプ：uc8 のみ対応)
                                  マスクを指定する場合には、最下位１ビットをＯＮに指定します。 hmask にNULLを渡すとマスクをとりはずします。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT  引数オブジェクトの種別が異常
    - F_ERR_INVALID_IMAGE   引数画像オブジェクトが異常
    - F_ERR_FPM_NOFEATURE   特徴量がなくなります
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_feature_mask(hfeature, hmask):
    r"""INT FVALGAPI fnFIE_fpm_feature_mask( FHANDLE hfeature, FHANDLE hmask )
    特徴量のマスク

    Params:
    - [in,out]  hfeature      FPM特徴量オブジェクト
    - [in]      hmask         マスクパタン指定用画像オブジェクト(画像タイプ：uc8 のみ対応)
                                  マスクを指定する場合には、最下位１ビットをＯＮに指定します。 hmask にNULLを渡すとマスクをとりはずします。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT  引数オブジェクトの種別が異常
    - F_ERR_INVALID_IMAGE   引数画像オブジェクトが異常
    - F_ERR_FPM_NOFEATURE   特徴量がなくなります
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_feature_mask(hfeature, hmask)

def fnFIE_fpm_feature_get_num(hfeature, pfeature_num) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_feature_get_num( FHANDLE hfeature, INT* pfeature_num )
    特徴量数の取得

    Params:
    - [in]  hfeature        FPM特徴量オブジェクト
    - [out] pfeature_num    ハンドル内に格納されている特徴量数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT  引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM   引数異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_feature_get_num(hfeature, pfeature_num):
    r"""INT FVALGAPI fnFIE_fpm_feature_get_num( FHANDLE hfeature, INT* pfeature_num )
    特徴量数の取得

    Params:
    - [in]  hfeature        FPM特徴量オブジェクト
    - [out] pfeature_num    ハンドル内に格納されている特徴量数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT  引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM   引数異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_feature_get_num(hfeature, pfeature_num)

def fnFIE_fpm_feature_get_edges(hfeature, pedges) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_feature_get_edges( FHANDLE hfeature, F_DEDGE* pedges )
    特徴量の取得（勾配方向付きエッジ）

    Params:
    - [in]  hfeature      FPM特徴量オブジェクト
    - [out] pedges        取得した特徴量データ
                              予め fnFIE_fpm_feature_get_num() によって特徴量の数を取得し、必要な領域を確保する必要があります。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT  引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM   引数異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_feature_get_edges(hfeature, pedges):
    r"""INT FVALGAPI fnFIE_fpm_feature_get_edges( FHANDLE hfeature, F_DEDGE* pedges )
    特徴量の取得（勾配方向付きエッジ）

    Params:
    - [in]  hfeature      FPM特徴量オブジェクト
    - [out] pedges        取得した特徴量データ
                              予め fnFIE_fpm_feature_get_num() によって特徴量の数を取得し、必要な領域を確保する必要があります。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT  引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM   引数異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_feature_get_edges(hfeature, pedges)

def fnFIE_fpm_feature_get_matching_mode(hfeature, pmatching_mode) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_feature_get_matching_mode( FHANDLE hfeature, enum f_fpm_mode* pmatching_mode )
    特徴量取得マッチングモードの取得

    Params:
    - [in]  hfeature         FPM特徴量オブジェクト
    - [out] pmatching_mode   FPMを行う際のマッチングモード
                                  - F_FPM_NORMAL_MODE 通常モード
                                  - F_FPM_SPEED_MODE  高速モード

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_feature_get_matching_mode(hfeature, pmatching_mode):
    r"""INT FVALGAPI fnFIE_fpm_feature_get_matching_mode( FHANDLE hfeature, enum f_fpm_mode* pmatching_mode )
    特徴量取得マッチングモードの取得

    Params:
    - [in]  hfeature         FPM特徴量オブジェクト
    - [out] pmatching_mode   FPMを行う際のマッチングモード
                                  - F_FPM_NORMAL_MODE 通常モード
                                  - F_FPM_SPEED_MODE  高速モード

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_feature_get_matching_mode(hfeature, pmatching_mode)

def fnFIE_fpm_feature_get_method(hfeature, pmethod) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_feature_get_method( FHANDLE hfeature, enum f_fpm_featedge* pmethod )
    特徴量抽出手法の取得

    Params:
    - [in]  hfeature         FPM特徴量オブジェクト
    - [out] pmethod          特徴量抽出手法
                                  - F_FPM_CORR_MODE   相関エッジ
                                  - F_FPM_SOBEL_MODE  ソーベルエッジ
                                  - F_FPM_CORR_MAX_MODE   強度上限付相関エッジ
                                  - F_FPM_SOBEL_MAX_MODE  強度上限付ソーベルエッジ
                                  - F_FPM_GROOVE_EDGE  細線エッジ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NODATA         抽出手法は存在しません( FPMオブジェクトは fnFIE_fpm_feature_import_alloc() によって生成されました )
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_feature_get_method(hfeature, pmethod):
    r"""INT FVALGAPI fnFIE_fpm_feature_get_method( FHANDLE hfeature, enum f_fpm_featedge* pmethod )
    特徴量抽出手法の取得

    Params:
    - [in]  hfeature         FPM特徴量オブジェクト
    - [out] pmethod          特徴量抽出手法
                                  - F_FPM_CORR_MODE   相関エッジ
                                  - F_FPM_SOBEL_MODE  ソーベルエッジ
                                  - F_FPM_CORR_MAX_MODE   強度上限付相関エッジ
                                  - F_FPM_SOBEL_MAX_MODE  強度上限付ソーベルエッジ
                                  - F_FPM_GROOVE_EDGE  細線エッジ

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 引数オブジェクトの種別が異常
    - F_ERR_INVALID_PARAM  引数異常
    - F_ERR_NODATA         抽出手法は存在しません( FPMオブジェクトは fnFIE_fpm_feature_import_alloc() によって生成されました )
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_feature_get_method(hfeature, pmethod)

def fnFIE_fpm_feature_copy_object(hfeature) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_fpm_feature_copy_object( FHANDLE hfeature )
    特徴量オブジェクトのコピー

    Params:
    - [in] hfeature        FPM特徴量オブジェクト

    Returns:
    - 正常終了した場合は、生成したFPM特徴量オブジェクトのハンドルを返します。
            パラメータエラー、又はメモリ不足により生成できなかったときはNULLを返します。
    """
    raise NotImplementedError

def fpm_feature_copy_object(hfeature):
    r"""FHANDLE FVALGAPI fnFIE_fpm_feature_copy_object( FHANDLE hfeature )
    特徴量オブジェクトのコピー

    Params:
    - [in] hfeature        FPM特徴量オブジェクト

    Returns:
    - 正常終了した場合は、生成したFPM特徴量オブジェクトのハンドルを返します。
            パラメータエラー、又はメモリ不足により生成できなかったときはNULLを返します。
    """

    return _fie.fnFIE_fpm_feature_copy_object(hfeature)

def fnFIE_fpm_feature_free_object(hfeature) -> Any:
    r"""void fnFIE_fpm_feature_free_object( FHANDLE hfeature )
    特徴量オブジェクトの解放

    Params:
    - [in] hfeature        FPM特徴量オブジェクト

    Returns:
    """
    raise NotImplementedError

def fpm_feature_free_object(hfeature):
    r"""void fnFIE_fpm_feature_free_object( FHANDLE hfeature )
    特徴量オブジェクトの解放

    Params:
    - [in] hfeature        FPM特徴量オブジェクト

    Returns:
    """

    return _fie.fnFIE_fpm_feature_free_object(hfeature)

def fnFIE_fpm_feature_import_alloc(img_edges, num_img_edges, img_width, img_height, matching_mode, perr_code) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_fpm_feature_import_alloc( F_DEDGE* img_edges, INT num_img_edges, INT img_width, INT img_height, enum f_fpm_mode matching_mode, INT* perr_code )
    点情報から FPM特徴量オブジェクトを生成

    Params:
    - [in]     img_edges       F_DEDGE 型 エッジデータ
    - [in]     num_img_edges    img_edges に格納されているエッジデータ数(1≦  num_img_edges)
    - [in]     img_width        img_edges を取得した画像幅(1≦  img_width)
    - [in]     img_height       img_edges を取得した画像高さ(1≦  img_height)
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE  高速モード
    - [out]    perr_code       正常終了、またはエラーコードが入力されます。エラーコードを受け取る必要の無い場合は、NULLを指定することも可能です。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPM特徴量オブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """
    raise NotImplementedError

def fpm_feature_import_alloc(img_edges, num_img_edges, img_width, img_height, matching_mode, perr_code=None):
    r"""FHANDLE FVALGAPI fnFIE_fpm_feature_import_alloc( F_DEDGE* img_edges, INT num_img_edges, INT img_width, INT img_height, enum f_fpm_mode matching_mode, INT* perr_code )
    点情報から FPM特徴量オブジェクトを生成

    Params:
    - [in]     img_edges       F_DEDGE 型 エッジデータ
    - [in]     num_img_edges    img_edges に格納されているエッジデータ数(1≦  num_img_edges)
    - [in]     img_width        img_edges を取得した画像幅(1≦  img_width)
    - [in]     img_height       img_edges を取得した画像高さ(1≦  img_height)
    - [in]     matching_mode   FPMを行う際のマッチングモード
                                   - F_FPM_NORMAL_MODE 通常モード
                                   - F_FPM_SPEED_MODE  高速モード
    - [out]    perr_code       正常終了、またはエラーコードが入力されます。エラーコードを受け取る必要の無い場合は、NULLを指定することも可能です。
                                   - F_ERR_NONE             正常終了
                                   - F_ERR_INVALID_PARAM    引数異常
                                   - F_ERR_NOMEMORY         メモリ不足
                                   - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー

    Returns:
    - 正常終了した場合は、生成したFPM特徴量オブジェクトのハンドルを返します。
            異常終了により生成できなかったときはNULLを返します。
    """

    return _fie.fnFIE_fpm_feature_import_alloc(img_edges, num_img_edges, img_width, img_height, matching_mode, perr_code)

def fnFIE_fpm_pattern_automask(hsrc, shape, hole, offset, threshold, mask_type, hmask, fpm_markinfo, score) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_pattern_automask( FHANDLE hsrc, enum f_fpm_markshape shape, INT hole, INT offset, INT threshold, INT mask_type, FHANDLE* hmask, F_FPM_MARKINFO* fpm_markinfo, INT* score )
    自動マーク認識＆マスク設定

    Params:
    - [in]      hsrc          対象画像オブジェクト(type:uc8のみ)
                                      チャネル数は 1 でなければいけません。
    - [in]      shape         マーク形状の指定 　 F_FPM_SHAPE_AUTO を実行した場合には形状、中抜きの有無の検出を自動で行いますが、全ての形状に対しての検出処理を行うため処理時間は掛かってしまいます。
                                   - F_FPM_SHAPE_AUTO     自動判別
                                   - F_FPM_SHAPE_CIRC     円
                                   - F_FPM_SHAPE_RECT     長方形
                                   - F_FPM_SHAPE_CROSS    十字
    - [in]      hole          中抜きの有無。shape にF_FPM_SHAPE_AUTOを指定した場合にはこの値は使用せず、中抜きの有無を自動で検出します。
                                   - TRUE  中抜きあり
                                - FALSE 中抜きなし
    - [in]      offset        検出したマークの周辺でマスクをキャンセルする(エッジを残す)際の片幅を指定します(1≦offset≦10)
                                  輪郭が綺麗でないマークの場合にはこの値を大きめにします(推奨値：3，単位:画素)。
    - [in]      threshold     スコアしきい値(範囲:10≦threshold≦99)
                                  この値を超えたスコアを持つパタンの結果を格納します(推奨値：50)。
    - [in]      mask_type     作成するマスク画像オブジェクトの画像タイプを指定します。FPMで使用するマスクを生成する場合には 0 の uc8 を指定してください。
                                   - 0 uc8 の画像生成
                                - 1 bin の画像生成
    - [out]     hmask         マスク画像を格納する画像オブジェクトへのポインタ
                                  hsrcと同じサイズの画像オブジェクト(uc8 or bin)が生成され、マスクをONの箇所には1, マスクをOFFの箇所には0が入ります。
                                  hmask にNULLを指定した場合には結果の格納を行いません。
                                  　*hmask の値は0で初期化しておいてください。
    - [out]     fpm_markinfo  検出したFPMマーク情報を格納する構造体のポインタ
                                  fpm_markinfoにNULLを指定した場合には結果の格納を行いません。
    - [out]     score         正常終了した場合のマークのスコア(100点満点)
                                  NULLを指定した場合には結果の格納を行いません。

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_CALC_IMPOSSIBLE   計算不可能(対応するマークが見つかりませんでした)
    - F_ERR_NOMEMORY          メモリ不足
    - F_ERR_INVALID_PARAM     不正なパラメータが入力されました
    - F_ERR_FPM_NOFEATURE     特徴量計測不可
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_pattern_automask(hsrc, shape=F_FPM_SHAPE_AUTO, hole=False, offset=3, threshold=50, mask_type=0, hmask=None, fpm_markinfo=None, score=None):
    r"""INT FVALGAPI fnFIE_fpm_pattern_automask( FHANDLE hsrc, enum f_fpm_markshape shape, INT hole, INT offset, INT threshold, INT mask_type, FHANDLE* hmask, F_FPM_MARKINFO* fpm_markinfo, INT* score )
    自動マーク認識＆マスク設定

    Params:
    - [in]      hsrc          対象画像オブジェクト(type:uc8のみ)
                                      チャネル数は 1 でなければいけません。
    - [in]      shape         マーク形状の指定 　 F_FPM_SHAPE_AUTO を実行した場合には形状、中抜きの有無の検出を自動で行いますが、全ての形状に対しての検出処理を行うため処理時間は掛かってしまいます。
                                   - F_FPM_SHAPE_AUTO     自動判別
                                   - F_FPM_SHAPE_CIRC     円
                                   - F_FPM_SHAPE_RECT     長方形
                                   - F_FPM_SHAPE_CROSS    十字
    - [in]      hole          中抜きの有無。shape にF_FPM_SHAPE_AUTOを指定した場合にはこの値は使用せず、中抜きの有無を自動で検出します。
                                   - TRUE  中抜きあり
                                - FALSE 中抜きなし
    - [in]      offset        検出したマークの周辺でマスクをキャンセルする(エッジを残す)際の片幅を指定します(1≦offset≦10)
                                  輪郭が綺麗でないマークの場合にはこの値を大きめにします(推奨値：3，単位:画素)。
    - [in]      threshold     スコアしきい値(範囲:10≦threshold≦99)
                                  この値を超えたスコアを持つパタンの結果を格納します(推奨値：50)。
    - [in]      mask_type     作成するマスク画像オブジェクトの画像タイプを指定します。FPMで使用するマスクを生成する場合には 0 の uc8 を指定してください。
                                   - 0 uc8 の画像生成
                                - 1 bin の画像生成
    - [out]     hmask         マスク画像を格納する画像オブジェクトへのポインタ
                                  hsrcと同じサイズの画像オブジェクト(uc8 or bin)が生成され、マスクをONの箇所には1, マスクをOFFの箇所には0が入ります。
                                  hmask にNULLを指定した場合には結果の格納を行いません。
                                  　*hmask の値は0で初期化しておいてください。
    - [out]     fpm_markinfo  検出したFPMマーク情報を格納する構造体のポインタ
                                  fpm_markinfoにNULLを指定した場合には結果の格納を行いません。
    - [out]     score         正常終了した場合のマークのスコア(100点満点)
                                  NULLを指定した場合には結果の格納を行いません。

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_CALC_IMPOSSIBLE   計算不可能(対応するマークが見つかりませんでした)
    - F_ERR_NOMEMORY          メモリ不足
    - F_ERR_INVALID_PARAM     不正なパラメータが入力されました
    - F_ERR_FPM_NOFEATURE     特徴量計測不可
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_pattern_automask(hsrc, shape, hole, offset, threshold, mask_type, hmask, fpm_markinfo, score)

def fnFIE_fpm_pattern_make_image(hsrc, shape, hole, threshold, hdst, fpm_markinfo, score) -> Any:
    r"""INT FVALGAPI fnFIE_fpm_pattern_make_image( FHANDLE hsrc, enum f_fpm_markshape shape, INT hole, INT threshold, FHANDLE* hdst, F_FPM_MARKINFO* fpm_markinfo, INT* score )
    自動マーク認識＆画像生成

    Params:
    - [in]      hsrc          対象画像オブジェクト(type:uc8のみ)
                                      チャネル数は 1 でなければいけません。
    - [in]      shape         マーク形状の指定 　 F_FPM_SHAPE_AUTO を実行した場合には形状、中抜きの有無の検出を自動で行いますが、全ての形状に対しての検出処理を行うため処理時間は掛かってしまいます。
                                   - F_FPM_SHAPE_AUTO     自動判別
                                   - F_FPM_SHAPE_CIRC     円
                                   - F_FPM_SHAPE_RECT     長方形
                                   - F_FPM_SHAPE_CROSS    十字
    - [in]      hole          中抜きの有無。shape にF_FPM_SHAPE_AUTOを指定した場合にはこの値は使用せず、中抜きの有無を自動で検出します。
                                   - TRUE  中抜きあり
                                - FALSE 中抜きなし
    - [in]      threshold     スコアしきい値(範囲:10≦threshold≦99)
                                  この値を超えたスコアを持つパタンの結果を格納します(推奨値：50)。
    - [out]     hdst          パタン画像を格納する画像オブジェクトへのポインタ
                                  hsrcと同じサイズの画像オブジェクト(type:uc8)が生成され、認識した背景、パタンそれぞれの平均濃度値を求めて描画します。
                                  hdst にNULLを指定した場合には結果の格納を行いません。
                                  　*hdst の値は0で初期化しておいてください。
    - [out]     fpm_markinfo  検出したFPMマーク情報を格納する構造体のポインタ
                                  fpm_markinfoにNULLを指定した場合には結果の格納を行いません。
    - [out]     score         正常終了した場合のマークのスコア(100点満点)
                                  NULLを指定した場合には結果の格納を行いません。

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_CALC_IMPOSSIBLE   計算不可能(対応するマークが見つかりませんでした)
    - F_ERR_NOMEMORY          メモリ不足
    - F_ERR_INVALID_PARAM     不正なパラメータが入力されました
    - F_ERR_INVALID_IMAGE     不正な画像オブジェクトが入力されました
    - F_ERR_FPM_NOFEATURE     特徴量計測不可(識別したマークの平均濃度が一致したため、塗りつぶしによる判断が不可能です。)　ただしこの場合でもNULL以外を指定した場合には fpm_markinfo にマーク情報が格納されます。
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fpm_pattern_make_image(hsrc, shape=F_FPM_SHAPE_AUTO, hole=False, threshold=50, hdst=None, fpm_markinfo=None, score=None):
    r"""INT FVALGAPI fnFIE_fpm_pattern_make_image( FHANDLE hsrc, enum f_fpm_markshape shape, INT hole, INT threshold, FHANDLE* hdst, F_FPM_MARKINFO* fpm_markinfo, INT* score )
    自動マーク認識＆画像生成

    Params:
    - [in]      hsrc          対象画像オブジェクト(type:uc8のみ)
                                      チャネル数は 1 でなければいけません。
    - [in]      shape         マーク形状の指定 　 F_FPM_SHAPE_AUTO を実行した場合には形状、中抜きの有無の検出を自動で行いますが、全ての形状に対しての検出処理を行うため処理時間は掛かってしまいます。
                                   - F_FPM_SHAPE_AUTO     自動判別
                                   - F_FPM_SHAPE_CIRC     円
                                   - F_FPM_SHAPE_RECT     長方形
                                   - F_FPM_SHAPE_CROSS    十字
    - [in]      hole          中抜きの有無。shape にF_FPM_SHAPE_AUTOを指定した場合にはこの値は使用せず、中抜きの有無を自動で検出します。
                                   - TRUE  中抜きあり
                                - FALSE 中抜きなし
    - [in]      threshold     スコアしきい値(範囲:10≦threshold≦99)
                                  この値を超えたスコアを持つパタンの結果を格納します(推奨値：50)。
    - [out]     hdst          パタン画像を格納する画像オブジェクトへのポインタ
                                  hsrcと同じサイズの画像オブジェクト(type:uc8)が生成され、認識した背景、パタンそれぞれの平均濃度値を求めて描画します。
                                  hdst にNULLを指定した場合には結果の格納を行いません。
                                  　*hdst の値は0で初期化しておいてください。
    - [out]     fpm_markinfo  検出したFPMマーク情報を格納する構造体のポインタ
                                  fpm_markinfoにNULLを指定した場合には結果の格納を行いません。
    - [out]     score         正常終了した場合のマークのスコア(100点満点)
                                  NULLを指定した場合には結果の格納を行いません。

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_CALC_IMPOSSIBLE   計算不可能(対応するマークが見つかりませんでした)
    - F_ERR_NOMEMORY          メモリ不足
    - F_ERR_INVALID_PARAM     不正なパラメータが入力されました
    - F_ERR_INVALID_IMAGE     不正な画像オブジェクトが入力されました
    - F_ERR_FPM_NOFEATURE     特徴量計測不可(識別したマークの平均濃度が一致したため、塗りつぶしによる判断が不可能です。)　ただしこの場合でもNULL以外を指定した場合には fpm_markinfo にマーク情報が格納されます。
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fpm_pattern_make_image(hsrc, shape, hole, threshold, hdst, fpm_markinfo, score)

def fnFIE_bayer_interpolation_bilinear(hsrc, hdst, cfa_type, gain, offset) -> Any:
    r"""INT FVALGAPI fnFIE_bayer_interpolation_bilinear( const FHANDLE hsrc, FHANDLE hdst, enum f_cfa_type cfa_type, DOUBLE gain[ 3], DOUBLE offset[ 3] )
    Bayer Color Filter Array Interpolation ( Bayer color demosaicking ) bilinear 

    Params:
    - [in]  hsrc    入力画像 Bayer CFA 1ch RAW (type:uc8,s16,us16,double / ch:1)
    - [out] hdst    出力画像 3ch layerd color (type:uc8,s16,us16,double / ch:3)
    - [in]  cfa_type    Bayer color filter arrayの配列タイプ
                             - F_CFA_BGGR
                             - F_CFA_GBRG
                             - F_CFA_RGGB
                             - F_CFA_GRBG
    - [in]  gain 赤、緑、青のゲイン：通常は全て1.0倍を指定する
    - [in]  offset 赤、緑、青のオフセット：通常は全て0.0を指定する

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_PARAM パラメータ異常
                                -  cfa_type が異常
                                - ゲイン、オフセットがNULL
    - F_ERR_INVALID_IMAGE 画像オブジェクト異常
                                - 画像オブジェクトがNULL
                                - 入力画像のチャネルが1ではない
                                - 出力画像のチャネルが3ではない
                                - 入出力の画像サイズが異なる
                                - 入出力の画像タイプが異なる
                                - 画像の縦横幅が2の倍数ではない
    - F_ERR_NOMEMORY      メモリ不足で作業用画像が生成できない
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def bayer_interpolation_bilinear(hsrc, hdst, cfa_type, gain=1.0, offset=0.0):
    r"""INT FVALGAPI fnFIE_bayer_interpolation_bilinear( const FHANDLE hsrc, FHANDLE hdst, enum f_cfa_type cfa_type, DOUBLE gain[ 3], DOUBLE offset[ 3] )
    Bayer Color Filter Array Interpolation ( Bayer color demosaicking ) bilinear 

    Params:
    - [in]  hsrc    入力画像 Bayer CFA 1ch RAW (type:uc8,s16,us16,double / ch:1)
    - [out] hdst    出力画像 3ch layerd color (type:uc8,s16,us16,double / ch:3)
    - [in]  cfa_type    Bayer color filter arrayの配列タイプ
                             - F_CFA_BGGR
                             - F_CFA_GBRG
                             - F_CFA_RGGB
                             - F_CFA_GRBG
    - [in]  gain 赤、緑、青のゲイン：通常は全て1.0倍を指定する
    - [in]  offset 赤、緑、青のオフセット：通常は全て0.0を指定する

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_PARAM パラメータ異常
                                -  cfa_type が異常
                                - ゲイン、オフセットがNULL
    - F_ERR_INVALID_IMAGE 画像オブジェクト異常
                                - 画像オブジェクトがNULL
                                - 入力画像のチャネルが1ではない
                                - 出力画像のチャネルが3ではない
                                - 入出力の画像サイズが異なる
                                - 入出力の画像タイプが異なる
                                - 画像の縦横幅が2の倍数ではない
    - F_ERR_NOMEMORY      メモリ不足で作業用画像が生成できない
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_bayer_interpolation_bilinear(hsrc, hdst, cfa_type, gain, offset)

def fnFIE_bayer_interpolation_cubic(hsrc, hdst, cfa_type, gain, offset) -> Any:
    r"""INT FVALGAPI fnFIE_bayer_interpolation_cubic( const FHANDLE hsrc, FHANDLE hdst, enum f_cfa_type cfa_type, DOUBLE gain[ 3], DOUBLE offset[ 3] )
    Bayer Color Filter Array Interpolation ( Bayer color demosaicking ) cubic 

    Params:
    - [in]  hsrc         入力画像 Bayer CFA 1ch RAW (type:uc8,s16,us16,double / ch:1)
    - [out] hdst         出力画像 3ch layerd color (type:uc8,s16,us16,double / ch:3)
    - [in]  cfa_type     Bayer color filter arrayの配列タイプ
                             - F_CFA_BGGR
                             - F_CFA_GBRG
                             - F_CFA_RGGB
                             - F_CFA_GRBG
    - [in]  gain 赤、緑、青のゲイン：通常は全て1.0倍を指定する
    - [in]  offset 赤、緑、青のオフセット：通常は全て0.0を指定する

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_PARAM パラメータ異常
            -  cfa_type が異常
            - ゲイン、オフセットがNULL
    - F_ERR_INVALID_IMAGE 画像オブジェクト異常
            - 画像オブジェクトがNULL
            - 入力画像のチャネルが1ではない
            - 出力画像のチャネルが3ではない
            - 入出力の画像サイズが異なる
            - 入出力の画像タイプが異なる
            - 画像の縦横幅が2の倍数ではない
    - F_ERR_NOMEMORY     メモリ不足で作業用画像が生成できない
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def bayer_interpolation_cubic(hsrc, hdst, cfa_type, gain=1.0, offset=0.0):
    r"""INT FVALGAPI fnFIE_bayer_interpolation_cubic( const FHANDLE hsrc, FHANDLE hdst, enum f_cfa_type cfa_type, DOUBLE gain[ 3], DOUBLE offset[ 3] )
    Bayer Color Filter Array Interpolation ( Bayer color demosaicking ) cubic 

    Params:
    - [in]  hsrc         入力画像 Bayer CFA 1ch RAW (type:uc8,s16,us16,double / ch:1)
    - [out] hdst         出力画像 3ch layerd color (type:uc8,s16,us16,double / ch:3)
    - [in]  cfa_type     Bayer color filter arrayの配列タイプ
                             - F_CFA_BGGR
                             - F_CFA_GBRG
                             - F_CFA_RGGB
                             - F_CFA_GRBG
    - [in]  gain 赤、緑、青のゲイン：通常は全て1.0倍を指定する
    - [in]  offset 赤、緑、青のオフセット：通常は全て0.0を指定する

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_PARAM パラメータ異常
            -  cfa_type が異常
            - ゲイン、オフセットがNULL
    - F_ERR_INVALID_IMAGE 画像オブジェクト異常
            - 画像オブジェクトがNULL
            - 入力画像のチャネルが1ではない
            - 出力画像のチャネルが3ではない
            - 入出力の画像サイズが異なる
            - 入出力の画像タイプが異なる
            - 画像の縦横幅が2の倍数ではない
    - F_ERR_NOMEMORY     メモリ不足で作業用画像が生成できない
    - F_ERR_NO_LICENCE   ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_bayer_interpolation_cubic(hsrc, hdst, cfa_type, gain, offset)

def fnFIE_bayer_interpolation_easy(hsrc, hdst, cfa_type, gain, offset) -> Any:
    r"""INT FVALGAPI fnFIE_bayer_interpolation_easy( const FHANDLE hsrc, FHANDLE hdst, enum f_cfa_type cfa_type, DOUBLE gain[ 3], DOUBLE offset[ 3] )
    簡易ベイヤー色合成

    Params:
    - [in]  hsrc    入力画像 Bayer CFA 1ch RAW (type:uc8,s16,us16,double / ch:1)
    - [out] hdst    出力画像 3ch layerd color (type:uc8,s16,us16,double / ch:3)
    - [in]  cfa_type    Bayer color filter arrayの配列タイプ
                             - F_CFA_RGGB
                             - F_CFA_GRBG
                             - F_CFA_GBRG
                             - F_CFA_BGGR
    - [in]  gain 赤、緑、青のゲイン：通常は全て1.0
    - [in]  offset 赤、緑、青のオフセット：通常は全て0.0

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_PARAM パラメータ異常
                                -  cfa_type が異常
                                - ゲイン、オフセットがNULL
    - F_ERR_INVALID_IMAGE 画像オブジェクト異常
                                - 画像オブジェクトがNULL
                                - 入力画像のチャネルが1ではない
                                - 出力画像のチャネルが3ではない
                                - 出力画像サイズが入力画像サイズの縦横半分ではない
                                - 入出力の画像サイズが異なる
                                - 入出力の画像タイプが異なる
                                - 画像の縦横幅が2の倍数ではない
    - F_ERR_NOMEMORY      メモリ不足で作業用画像が生成できない
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def bayer_interpolation_easy(hsrc, hdst, cfa_type, gain=1.0, offset=0.0):
    r"""INT FVALGAPI fnFIE_bayer_interpolation_easy( const FHANDLE hsrc, FHANDLE hdst, enum f_cfa_type cfa_type, DOUBLE gain[ 3], DOUBLE offset[ 3] )
    簡易ベイヤー色合成

    Params:
    - [in]  hsrc    入力画像 Bayer CFA 1ch RAW (type:uc8,s16,us16,double / ch:1)
    - [out] hdst    出力画像 3ch layerd color (type:uc8,s16,us16,double / ch:3)
    - [in]  cfa_type    Bayer color filter arrayの配列タイプ
                             - F_CFA_RGGB
                             - F_CFA_GRBG
                             - F_CFA_GBRG
                             - F_CFA_BGGR
    - [in]  gain 赤、緑、青のゲイン：通常は全て1.0
    - [in]  offset 赤、緑、青のオフセット：通常は全て0.0

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_PARAM パラメータ異常
                                -  cfa_type が異常
                                - ゲイン、オフセットがNULL
    - F_ERR_INVALID_IMAGE 画像オブジェクト異常
                                - 画像オブジェクトがNULL
                                - 入力画像のチャネルが1ではない
                                - 出力画像のチャネルが3ではない
                                - 出力画像サイズが入力画像サイズの縦横半分ではない
                                - 入出力の画像サイズが異なる
                                - 入出力の画像タイプが異なる
                                - 画像の縦横幅が2の倍数ではない
    - F_ERR_NOMEMORY      メモリ不足で作業用画像が生成できない
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_bayer_interpolation_easy(hsrc, hdst, cfa_type, gain, offset)

def fnFIE_bayer_interpolation(hsrc, hdst, camera_cfa_type, gain, offset, bayer_method) -> Any:
    r"""INT FVALGAPI fnFIE_bayer_interpolation( const FHANDLE hsrc, FHANDLE hdst, enum f_cfa_type camera_cfa_type, DOUBLE gain[ 3], DOUBLE offset[ 3], enum f_bayer_method bayer_method )
    ベイヤー色合成 各種のベイヤー色合成を引数で手法選択して使用できます。

    Params:
    - [in]  hsrc    入力画像 Bayer CFA 1ch RAW (type:uc8,s16,us16,double / ch:1)
    - [out] hdst    出力画像 3ch layerd color (type:uc8,s16,us16,double / ch:3 )
    - [in] camera_cfa_type カメラのカラーフィルタ配列タイプ
                             - F_CFA_BGGR
                             - F_CFA_RGGB
                             - F_CFA_GRBG
                             - F_CFA_GBRG
    - [in]  gain 赤、緑、青のゲイン：通常は全て1.0
    - [in]  offset 赤、緑、青のオフセット：通常は全て0.0
        - [in]  bayer_method 色合成手法
                       - F_BAYER_EASY     簡易ベイヤー色合成
                       - F_BAYER_BILINEAR 線形補間によるベイヤー色合成
                       - F_BAYER_CUBIC    三次補間によるベイヤー色合成

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_PARAM パラメータ異常
                                 - ゲイン、オフセットがNULL
                                 -  cfa type が異常
                                 - 色合成手法が異常
    - F_ERR_INVALID_IMAGE 画像オブジェクト異常
                                 - 画像オブジェクトがNULL
                                 - 入力画像のチャネルが1ではない
                                 - 出力画像のチャネルが3ではない
                                 - 出力画像サイズが入力画像サイズに対応していない
                                 - 入出力の画像タイプが異なる
    - F_ERR_NOMEMORY      メモリ不足で作業用画像が生成できない
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def bayer_interpolation(hsrc, hdst, camera_cfa_type, gain=1.0, offset=0.0, bayer_method=F_BAYER_BILINEAR):
    r"""INT FVALGAPI fnFIE_bayer_interpolation( const FHANDLE hsrc, FHANDLE hdst, enum f_cfa_type camera_cfa_type, DOUBLE gain[ 3], DOUBLE offset[ 3], enum f_bayer_method bayer_method )
    ベイヤー色合成 各種のベイヤー色合成を引数で手法選択して使用できます。

    Params:
    - [in]  hsrc    入力画像 Bayer CFA 1ch RAW (type:uc8,s16,us16,double / ch:1)
    - [out] hdst    出力画像 3ch layerd color (type:uc8,s16,us16,double / ch:3 )
    - [in] camera_cfa_type カメラのカラーフィルタ配列タイプ
                             - F_CFA_BGGR
                             - F_CFA_RGGB
                             - F_CFA_GRBG
                             - F_CFA_GBRG
    - [in]  gain 赤、緑、青のゲイン：通常は全て1.0
    - [in]  offset 赤、緑、青のオフセット：通常は全て0.0
        - [in]  bayer_method 色合成手法
                       - F_BAYER_EASY     簡易ベイヤー色合成
                       - F_BAYER_BILINEAR 線形補間によるベイヤー色合成
                       - F_BAYER_CUBIC    三次補間によるベイヤー色合成

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_PARAM パラメータ異常
                                 - ゲイン、オフセットがNULL
                                 -  cfa type が異常
                                 - 色合成手法が異常
    - F_ERR_INVALID_IMAGE 画像オブジェクト異常
                                 - 画像オブジェクトがNULL
                                 - 入力画像のチャネルが1ではない
                                 - 出力画像のチャネルが3ではない
                                 - 出力画像サイズが入力画像サイズに対応していない
                                 - 入出力の画像タイプが異なる
    - F_ERR_NOMEMORY      メモリ不足で作業用画像が生成できない
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_bayer_interpolation(hsrc, hdst, camera_cfa_type, gain, offset, bayer_method)

def fnFIE_bayer_simulation(hsrc, hdst, cfa_type) -> Any:
    r"""INT FVALGAPI fnFIE_bayer_simulation( FHANDLE hsrc, FHANDLE hdst, enum f_cfa_type cfa_type )
    カラー画像からbayer CFA画像の模擬生成を行います。

    Params:
    - [in]  hsrc    入力画像 3ch layerd color (type:uc8,us16,s16,double / ch:3)
    - [out] hdst    出力画像 Bayer CFA 1ch RAW画像 (type:uc8,us16,s16,double / ch:1)
    - [in]  cfa_type    Bayer color filter arrayの配列タイプ
                             - F_CFA_RGGB
                             - F_CFA_GRBG
                             - F_CFA_GBRG
                             - F_CFA_BGGR

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_PARAM パラメータ異常
    - F_ERR_INVALID_IMAGE 画像オブジェクト異常
                                - 画像オブジェクトがNULL
                                - 出力画像のチャネルが1ではない
                                - 入力画像のチャネルが3ではない
                                - 入出力の画像サイズが異なる
                                - 入出力の画像タイプが異なる
                                - 画像の縦横幅が2の倍数ではない
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def bayer_simulation(hsrc, hdst, cfa_type):
    r"""INT FVALGAPI fnFIE_bayer_simulation( FHANDLE hsrc, FHANDLE hdst, enum f_cfa_type cfa_type )
    カラー画像からbayer CFA画像の模擬生成を行います。

    Params:
    - [in]  hsrc    入力画像 3ch layerd color (type:uc8,us16,s16,double / ch:3)
    - [out] hdst    出力画像 Bayer CFA 1ch RAW画像 (type:uc8,us16,s16,double / ch:1)
    - [in]  cfa_type    Bayer color filter arrayの配列タイプ
                             - F_CFA_RGGB
                             - F_CFA_GRBG
                             - F_CFA_GBRG
                             - F_CFA_BGGR

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_PARAM パラメータ異常
    - F_ERR_INVALID_IMAGE 画像オブジェクト異常
                                - 画像オブジェクトがNULL
                                - 出力画像のチャネルが1ではない
                                - 入力画像のチャネルが3ではない
                                - 入出力の画像サイズが異なる
                                - 入出力の画像タイプが異なる
                                - 画像の縦横幅が2の倍数ではない
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_bayer_simulation(hsrc, hdst, cfa_type)

def fnFIE_bayer_calc_cfa_type(hsrc, camera_cfa_type, image_cfa_type) -> Any:
    r"""INT FVALGAPI fnFIE_bayer_calc_cfa_type( FHANDLE hsrc, enum f_cfa_type camera_cfa_type, enum f_cfa_type* image_cfa_type )
    Bayer Color Filter Array type estimation

    Params:
    - [in] hsrc 画像オブジェクト Bayer CFA image
    - [in] camera_cfa_type カメラのカラーフィルタ配列タイプ
                     - F_CFA_BGGR
                     - F_CFA_GBRG
                     - F_CFA_RGGB
                     - F_CFA_GRBG
    - [out] image_cfa_type 画像オブジェクトのカラーフィルタ配列タイプ

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE 画像オブジェクト異常
                                - 画像オブジェクトがNULL
                                - 画像オブジェクトの画像タイプが異なる
    - F_ERR_INVALID_PARAM パラメータ異常
                                -  image_cfa_type がNULL
                                - カラーフィルタ配列タイプ異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def bayer_calc_cfa_type(hsrc, camera_cfa_type, image_cfa_type):
    r"""INT FVALGAPI fnFIE_bayer_calc_cfa_type( FHANDLE hsrc, enum f_cfa_type camera_cfa_type, enum f_cfa_type* image_cfa_type )
    Bayer Color Filter Array type estimation

    Params:
    - [in] hsrc 画像オブジェクト Bayer CFA image
    - [in] camera_cfa_type カメラのカラーフィルタ配列タイプ
                     - F_CFA_BGGR
                     - F_CFA_GBRG
                     - F_CFA_RGGB
                     - F_CFA_GRBG
    - [out] image_cfa_type 画像オブジェクトのカラーフィルタ配列タイプ

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE 画像オブジェクト異常
                                - 画像オブジェクトがNULL
                                - 画像オブジェクトの画像タイプが異なる
    - F_ERR_INVALID_PARAM パラメータ異常
                                -  image_cfa_type がNULL
                                - カラーフィルタ配列タイプ異常
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_bayer_calc_cfa_type(hsrc, camera_cfa_type, image_cfa_type)

def fnFIE_correct_color_gap(src, dst, gap) -> Any:
    r"""INT FVALGAPI fnFIE_correct_color_gap( FHANDLE src, FHANDLE dst, INT gap )
    3 line CCD linear sensor image color gap correction

    Params:
    - [in] src 入力画像(type:rgbq ch:1)
    - [out] dst 出力画像(type:rgbq ch:1)(type:uc8 ch:3)
    - [in] gap 色ずれ補正量

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM  パラメータ異常 gapの2倍が画像高さ以上だった
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def correct_color_gap(src, dst, gap):
    r"""INT FVALGAPI fnFIE_correct_color_gap( FHANDLE src, FHANDLE dst, INT gap )
    3 line CCD linear sensor image color gap correction

    Params:
    - [in] src 入力画像(type:rgbq ch:1)
    - [out] dst 出力画像(type:rgbq ch:1)(type:uc8 ch:3)
    - [in] gap 色ずれ補正量

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM  パラメータ異常 gapの2倍が画像高さ以上だった
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_correct_color_gap(src, dst, gap)

def fnFIE_cg_calc_angle_for_line(line, direction, angle) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_angle_for_line( DLINE_T line, enum f_direction direction, DOUBLE* angle )
    直線の角度の算出

    Params:
    - [in]  line        直線
    - [in]  direction   直線の方向
                           - F_DIRECT_RIGHT 角度範囲(単位：ラジアン): [ $-\pi/2$ , $\pi/2$ ]
                           - F_DIRECT_LEFT  角度範囲(単位：ラジアン): [ $\pi/2$ , $\pi$ ] & [ $-\pi/2$ , $-\pi$ ]
                           - F_DIRECT_DOWN  角度範囲(単位：ラジアン): [ 0, $\pi$ ]
    - [out] angle       直線の角度(単位：ラジアン)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_angle_for_line(line, direction, angle):
    r"""INT FVALGAPI fnFIE_cg_calc_angle_for_line( DLINE_T line, enum f_direction direction, DOUBLE* angle )
    直線の角度の算出

    Params:
    - [in]  line        直線
    - [in]  direction   直線の方向
                           - F_DIRECT_RIGHT 角度範囲(単位：ラジアン): [ $-\pi/2$ , $\pi/2$ ]
                           - F_DIRECT_LEFT  角度範囲(単位：ラジアン): [ $\pi/2$ , $\pi$ ] & [ $-\pi/2$ , $-\pi$ ]
                           - F_DIRECT_DOWN  角度範囲(単位：ラジアン): [ 0, $\pi$ ]
    - [out] angle       直線の角度(単位：ラジアン)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_angle_for_line(line, direction, angle)

def fnFIE_cg_calc_distance_point_to_line(pnt, line, dist) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_distance_point_to_line( DPNT_T pnt, DLINE_T line, DOUBLE* dist )
    点から直線までの距離の算出

    Params:
    - [in]  pnt     座標点P1
    - [in]  line    直線L1
    - [out] dist    距離d

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_distance_point_to_line(pnt, line, dist):
    r"""INT FVALGAPI fnFIE_cg_calc_distance_point_to_line( DPNT_T pnt, DLINE_T line, DOUBLE* dist )
    点から直線までの距離の算出

    Params:
    - [in]  pnt     座標点P1
    - [in]  line    直線L1
    - [out] dist    距離d

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_distance_point_to_line(pnt, line, dist)

def fnFIE_cg_calc_vertical_line_point_and_line(pnt, line, line_ans) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_vertical_line_point_and_line( DPNT_T pnt, DLINE_T line, DLINE_T* line_ans )
    任意の点を通り，直線２に垂直な直線１の算出

    Params:
    - [in]  pnt         直線L1が通る点P1
        - [in]  line        求める直線L1に垂直な直線L2
        - [out] line_ans    求められた垂直な直線L1

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_vertical_line_point_and_line(pnt, line, line_ans):
    r"""INT FVALGAPI fnFIE_cg_calc_vertical_line_point_and_line( DPNT_T pnt, DLINE_T line, DLINE_T* line_ans )
    任意の点を通り，直線２に垂直な直線１の算出

    Params:
    - [in]  pnt         直線L1が通る点P1
        - [in]  line        求める直線L1に垂直な直線L2
        - [out] line_ans    求められた垂直な直線L1

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_vertical_line_point_and_line(pnt, line, line_ans)

def fnFIE_cg_calc_line_2pointA(pnt1, pnt2, line) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_line_2pointA( DPNT_T pnt1, DPNT_T pnt2, DLINE_T* line )
    ２点から直線を算出

    Params:
    - [in]  pnt1    直線を生成する座標点P1
    - [in]  pnt2    直線を生成する座標点P2
    - [out] line    直線L12

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_line_2pointA(pnt1, pnt2, line):
    r"""INT FVALGAPI fnFIE_cg_calc_line_2pointA( DPNT_T pnt1, DPNT_T pnt2, DLINE_T* line )
    ２点から直線を算出

    Params:
    - [in]  pnt1    直線を生成する座標点P1
    - [in]  pnt2    直線を生成する座標点P2
    - [out] line    直線L12

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_line_2pointA(pnt1, pnt2, line)

def fnFIE_cg_calc_line_2pointB(pnt1, pnt2, line, angle) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_line_2pointB( DPNT_T pnt1, DPNT_T pnt2, DLINE_T* line, DOUBLE* angle )
    ２点から直線とその角度の算出

    Params:
    - [in]  pnt1    直線を生成する座標点P1
    - [in]  pnt2    直線を生成する座標点P2
    - [out] line    生成された直線L12
    - [out] angle   生成された直線の傾き（単位：ラジアン [$-\pi/2$ 〜 $\pi/2$] ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_line_2pointB(pnt1, pnt2, line, angle):
    r"""INT FVALGAPI fnFIE_cg_calc_line_2pointB( DPNT_T pnt1, DPNT_T pnt2, DLINE_T* line, DOUBLE* angle )
    ２点から直線とその角度の算出

    Params:
    - [in]  pnt1    直線を生成する座標点P1
    - [in]  pnt2    直線を生成する座標点P2
    - [out] line    生成された直線L12
    - [out] angle   生成された直線の傾き（単位：ラジアン [$-\pi/2$ 〜 $\pi/2$] ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_line_2pointB(pnt1, pnt2, line, angle)

def fnFIE_cg_calc_line_npoint(pnts, num, lsm_mode, lsm_param, line, angle) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_line_npoint( const DPNT_T* pnts, INT num, enum f_line_detection_mode lsm_mode, INT lsm_param, DLINE_T* line, DOUBLE* angle )
    点群から直線を算出（直線近似）

    Params:
    - [in]  pnts        直線を生成する座標点群G1。  num 個の点が必要
    - [in]  num         点群に入っている点の数(2〜1000)
    - [in]  lsm_mode    直線生成のモード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線生成のパラメータ
    - [out] line        求められた直線L1
    - [out] angle       求められた直線の傾き（単位：ラジアン [$-\pi/2$ 〜 $\pi/2$] ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_line_npoint(pnts, num, lsm_mode, lsm_param, line, angle):
    r"""INT FVALGAPI fnFIE_cg_calc_line_npoint( const DPNT_T* pnts, INT num, enum f_line_detection_mode lsm_mode, INT lsm_param, DLINE_T* line, DOUBLE* angle )
    点群から直線を算出（直線近似）

    Params:
    - [in]  pnts        直線を生成する座標点群G1。  num 個の点が必要
    - [in]  num         点群に入っている点の数(2〜1000)
    - [in]  lsm_mode    直線生成のモード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線生成のパラメータ
    - [out] line        求められた直線L1
    - [out] angle       求められた直線の傾き（単位：ラジアン [$-\pi/2$ 〜 $\pi/2$] ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_line_npoint(pnts, num, lsm_mode, lsm_param, line, angle)

def fnFIE_cg_calc_center_2pointA(pnt1, pnt2, center) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_center_2pointA( DPNT_T pnt1, DPNT_T pnt2, DPNT_T* center )
    ２点の中点座標の算出

    Params:
    - [in]  pnt1   座標点P1
    - [in]  pnt2   座標点P2
    - [out] center 中点座標Pc

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_center_2pointA(pnt1, pnt2, center):
    r"""INT FVALGAPI fnFIE_cg_calc_center_2pointA( DPNT_T pnt1, DPNT_T pnt2, DPNT_T* center )
    ２点の中点座標の算出

    Params:
    - [in]  pnt1   座標点P1
    - [in]  pnt2   座標点P2
    - [out] center 中点座標Pc

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_center_2pointA(pnt1, pnt2, center)

def fnFIE_cg_calc_center_2pointB(pnt1, pnt2, center, dist) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_center_2pointB( DPNT_T pnt1, DPNT_T pnt2, DPNT_T* center, DOUBLE* dist )
    ２点の中点座標と距離の算出

    Params:
    - [in]  pnt1    座標点P1
    - [in]  pnt2    座標点P2
    - [out] center  ２点の中点座標Pc
    - [out] dist    ２点間の距離d

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_center_2pointB(pnt1, pnt2, center, dist):
    r"""INT FVALGAPI fnFIE_cg_calc_center_2pointB( DPNT_T pnt1, DPNT_T pnt2, DPNT_T* center, DOUBLE* dist )
    ２点の中点座標と距離の算出

    Params:
    - [in]  pnt1    座標点P1
    - [in]  pnt2    座標点P2
    - [out] center  ２点の中点座標Pc
    - [out] dist    ２点間の距離d

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_center_2pointB(pnt1, pnt2, center, dist)

def fnFIE_cg_calc_center_point_and_lineA(pnt1, pnt2, pnt3, center, dist) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_center_point_and_lineA( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T* center, DOUBLE* dist )
    ２点を通る直線と点までの距離と中点座標の算出（３点指定）

    Params:
    - [in]  pnt1    直線を決定する座標点P1
    - [in]  pnt2    直線を決定する座標点P2
    - [in]  pnt3    直線との距離を求める座標点P3
    - [out] center  直線と点３との中点座標Pc
    - [out] dist    直線と点３との距離d

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_center_point_and_lineA(pnt1, pnt2, pnt3, center, dist):
    r"""INT FVALGAPI fnFIE_cg_calc_center_point_and_lineA( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T* center, DOUBLE* dist )
    ２点を通る直線と点までの距離と中点座標の算出（３点指定）

    Params:
    - [in]  pnt1    直線を決定する座標点P1
    - [in]  pnt2    直線を決定する座標点P2
    - [in]  pnt3    直線との距離を求める座標点P3
    - [out] center  直線と点３との中点座標Pc
    - [out] dist    直線と点３との距離d

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_center_point_and_lineA(pnt1, pnt2, pnt3, center, dist)

def fnFIE_cg_calc_center_point_and_lineB(pnts, num, pnt, lsm_mode, lsm_param, center, dist) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_center_point_and_lineB( const DPNT_T* pnts, INT num, DPNT_T pnt, enum f_line_detection_mode lsm_mode, INT lsm_param, DPNT_T* center, DOUBLE* dist )
    点群を通る直線と点までの距離と中点座標の算出（点群と１点指定）

    Params:
    - [in]  pnts        直線を生成する座標点群G1。  num 個の点が必要
    - [in]  num         点群に入っている点の数(2〜1000)
    - [in]  pnt         距離と中点を求めるための座標点
    - [in]  lsm_mode    直線生成のモード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線生成のパラメータ
    - [out] center      直線L1と点P1との中点座標Pc
    - [out] dist        直線L1と点P1との距離d

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_center_point_and_lineB(pnts, num, pnt, lsm_mode, lsm_param, center, dist):
    r"""INT FVALGAPI fnFIE_cg_calc_center_point_and_lineB( const DPNT_T* pnts, INT num, DPNT_T pnt, enum f_line_detection_mode lsm_mode, INT lsm_param, DPNT_T* center, DOUBLE* dist )
    点群を通る直線と点までの距離と中点座標の算出（点群と１点指定）

    Params:
    - [in]  pnts        直線を生成する座標点群G1。  num 個の点が必要
    - [in]  num         点群に入っている点の数(2〜1000)
    - [in]  pnt         距離と中点を求めるための座標点
    - [in]  lsm_mode    直線生成のモード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線生成のパラメータ
    - [out] center      直線L1と点P1との中点座標Pc
    - [out] dist        直線L1と点P1との距離d

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_center_point_and_lineB(pnts, num, pnt, lsm_mode, lsm_param, center, dist)

def fnFIE_cg_calc_center_point_and_lineC(line, pnt, center, dist) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_center_point_and_lineC( DLINE_T line, DPNT_T pnt, DPNT_T* center, DOUBLE* dist )
    直線と点までの距離と中点座標の算出（直線と１点指定）

    Params:
    - [in]  line        直線L1
    - [in]  pnt         座標点P1
    - [out] center      直線L1と点P1の中点座標Pc
    - [out] dist        直線L1と点P1の距離d

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_center_point_and_lineC(line, pnt, center, dist):
    r"""INT FVALGAPI fnFIE_cg_calc_center_point_and_lineC( DLINE_T line, DPNT_T pnt, DPNT_T* center, DOUBLE* dist )
    直線と点までの距離と中点座標の算出（直線と１点指定）

    Params:
    - [in]  line        直線L1
    - [in]  pnt         座標点P1
    - [out] center      直線L1と点P1の中点座標Pc
    - [out] dist        直線L1と点P1の距離d

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_center_point_and_lineC(line, pnt, center, dist)

def fnFIE_cg_calc_crosspoint_2line(line1, line2, cross) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_crosspoint_2line( DLINE_T line1, DLINE_T line2, DPNT_T* cross )
    ２直線の交点の算出

    Params:
    - [in]  line1   交点を求めるための対象となる直線L1
    - [in]  line2   交点を求めるための対象となる直線L2
    - [out] cross   交点座標Pc

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー（２直線が平行で、交点が求まらない）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_crosspoint_2line(line1, line2, cross):
    r"""INT FVALGAPI fnFIE_cg_calc_crosspoint_2line( DLINE_T line1, DLINE_T line2, DPNT_T* cross )
    ２直線の交点の算出

    Params:
    - [in]  line1   交点を求めるための対象となる直線L1
    - [in]  line2   交点を求めるための対象となる直線L2
    - [out] cross   交点座標Pc

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー（２直線が平行で、交点が求まらない）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_crosspoint_2line(line1, line2, cross)

def fnFIE_cg_calc_cross_2lineA(pnt1, pnt2, pnt3, pnt4, cross, angle) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_cross_2lineA( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T pnt4, DPNT_T* cross, DOUBLE* angle )
    ２直線（２点指定×２）の交点座標と交角の角度の算出

    Params:
    - [in]  pnt1        直線L12も求めるための座標点P1
    - [in]  pnt2        直線L12も求めるための座標点P2
    - [in]  pnt3        直線L34も求めるための座標点P3
    - [in]  pnt4        直線L34も求めるための座標点P4
    - [out] cross       ２直線が作る交点座標Pc
    - [out] angle       ２直線のなす角のうち、小さい方の角度（単位：ラジアン [0,$\pi/2$] ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_cross_2lineA(pnt1, pnt2, pnt3, pnt4, cross, angle):
    r"""INT FVALGAPI fnFIE_cg_calc_cross_2lineA( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T pnt4, DPNT_T* cross, DOUBLE* angle )
    ２直線（２点指定×２）の交点座標と交角の角度の算出

    Params:
    - [in]  pnt1        直線L12も求めるための座標点P1
    - [in]  pnt2        直線L12も求めるための座標点P2
    - [in]  pnt3        直線L34も求めるための座標点P3
    - [in]  pnt4        直線L34も求めるための座標点P4
    - [out] cross       ２直線が作る交点座標Pc
    - [out] angle       ２直線のなす角のうち、小さい方の角度（単位：ラジアン [0,$\pi/2$] ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_cross_2lineA(pnt1, pnt2, pnt3, pnt4, cross, angle)

def fnFIE_cg_calc_cross_2lineB(pnts1, num1, pnts2, num2, lsm_mode, lsm_param, cross, angle) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_cross_2lineB( const DPNT_T* pnts1, INT num1, const DPNT_T* pnts2, INT num2, enum f_line_detection_mode lsm_mode, INT lsm_param, DPNT_T* cross, DOUBLE* angle )
    ２直線（２点群指定）の交点座標と交角の角度の算出

    Params:
    - [in]  pnts1       座標点群G1(2〜1000)。  num1 個の点が必要。
    - [in]  num1        点群G1に入っている点の数
    - [in]  pnts2       座標点群G2(2〜1000)。  num2 個の点が必要。
    - [in]  num2        点群G2に入っている点の数
    - [in]  lsm_mode    直線生成のモード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線生成のパラメータ
    - [out] cross       ２直線が作る交点座標P1
    - [out] angle       ２直線のなす角のうち、小さい方の角度（単位：ラジアン [0,$\pi/2$] ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_cross_2lineB(pnts1, num1, pnts2, num2, lsm_mode, lsm_param, cross, angle):
    r"""INT FVALGAPI fnFIE_cg_calc_cross_2lineB( const DPNT_T* pnts1, INT num1, const DPNT_T* pnts2, INT num2, enum f_line_detection_mode lsm_mode, INT lsm_param, DPNT_T* cross, DOUBLE* angle )
    ２直線（２点群指定）の交点座標と交角の角度の算出

    Params:
    - [in]  pnts1       座標点群G1(2〜1000)。  num1 個の点が必要。
    - [in]  num1        点群G1に入っている点の数
    - [in]  pnts2       座標点群G2(2〜1000)。  num2 個の点が必要。
    - [in]  num2        点群G2に入っている点の数
    - [in]  lsm_mode    直線生成のモード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線生成のパラメータ
    - [out] cross       ２直線が作る交点座標P1
    - [out] angle       ２直線のなす角のうち、小さい方の角度（単位：ラジアン [0,$\pi/2$] ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_cross_2lineB(pnts1, num1, pnts2, num2, lsm_mode, lsm_param, cross, angle)

def fnFIE_cg_calc_cross_2lineC(line1, line2, cross, angle) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_cross_2lineC( DLINE_T line1, DLINE_T line2, DPNT_T* cross, DOUBLE* angle )
    ２直線の交点座標と交角の角度の算出

    Params:
    - [in]  line1       直線L1
    - [in]  line2       直線L2
    - [out] cross       ２直線の交点座標Pc
    - [out] angle       ２直線のなす角のうち、小さい方の角度（単位：ラジアン [0, $\pi/2$] ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー（２直線が平行で、交点が求まらない）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_cross_2lineC(line1, line2, cross, angle):
    r"""INT FVALGAPI fnFIE_cg_calc_cross_2lineC( DLINE_T line1, DLINE_T line2, DPNT_T* cross, DOUBLE* angle )
    ２直線の交点座標と交角の角度の算出

    Params:
    - [in]  line1       直線L1
    - [in]  line2       直線L2
    - [out] cross       ２直線の交点座標Pc
    - [out] angle       ２直線のなす角のうち、小さい方の角度（単位：ラジアン [0, $\pi/2$] ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー（２直線が平行で、交点が求まらない）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_cross_2lineC(line1, line2, cross, angle)

def fnFIE_cg_calc_circle_npoints(pnts_set, num_set, set_num, center, radius) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_circle_npoints( DPNT_T** pnts_set, const INT* num_set, INT set_num, DPNT_T* center, DOUBLE* radius )
    複数点群を通る円の中心座標と半径の算出

    Params:
    - [in]  pnts_set    複数の座標点群Gnの配列。 3個以上の要素が必要
    - [in]  num_set     各点群に入っている点の個数の配列。  set_num 個分の要素が必要
    - [in]  set_num     点群数
    - [out] center      円の中心座標Pc
    - [out] radius      円の半径r

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_circle_npoints(pnts_set, num_set, set_num, center, radius):
    r"""INT FVALGAPI fnFIE_cg_calc_circle_npoints( DPNT_T** pnts_set, const INT* num_set, INT set_num, DPNT_T* center, DOUBLE* radius )
    複数点群を通る円の中心座標と半径の算出

    Params:
    - [in]  pnts_set    複数の座標点群Gnの配列。 3個以上の要素が必要
    - [in]  num_set     各点群に入っている点の個数の配列。  set_num 個分の要素が必要
    - [in]  set_num     点群数
    - [out] center      円の中心座標Pc
    - [out] radius      円の半径r

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_circle_npoints(pnts_set, num_set, set_num, center, radius)

def fnFIE_cg_calc_cross_circle_and_lineA(pnts, num, pnt1, pnt2, cross_num, cross1, cross2) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_cross_circle_and_lineA( const DPNT_T* pnts, INT num, DPNT_T pnt1, DPNT_T pnt2, INT* cross_num, DPNT_T* cross1, DPNT_T* cross2 )
    点群を通る円と２点を通る直線の交点

    Params:
    - [in]  pnts        円を生成する座標点群G1。  num 個の点が必要
    - [in]  num         点群の点数(3〜16個)
    - [in]  pnt1        直線を構成する座標点P1
    - [in]  pnt2        直線を構成する座標点P2
    - [out] cross_num   交点数
    - [out] cross1      交点座標Pi1
    - [out] cross2      交点座標Pi2

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_cross_circle_and_lineA(pnts, num, pnt1, pnt2, cross_num, cross1, cross2):
    r"""INT FVALGAPI fnFIE_cg_calc_cross_circle_and_lineA( const DPNT_T* pnts, INT num, DPNT_T pnt1, DPNT_T pnt2, INT* cross_num, DPNT_T* cross1, DPNT_T* cross2 )
    点群を通る円と２点を通る直線の交点

    Params:
    - [in]  pnts        円を生成する座標点群G1。  num 個の点が必要
    - [in]  num         点群の点数(3〜16個)
    - [in]  pnt1        直線を構成する座標点P1
    - [in]  pnt2        直線を構成する座標点P2
    - [out] cross_num   交点数
    - [out] cross1      交点座標Pi1
    - [out] cross2      交点座標Pi2

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_cross_circle_and_lineA(pnts, num, pnt1, pnt2, cross_num, cross1, cross2)

def fnFIE_cg_calc_cross_circle_and_lineB(center, radius, line, cross_num, cross1, cross2) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_cross_circle_and_lineB( DPNT_T center, DOUBLE radius, DLINE_T line, INT* cross_num, DPNT_T* cross1, DPNT_T* cross2 )
    円と直線の交点の算出

    Params:
    - [in]  center      円の中心座標
    - [in]  radius      円の半径
    - [in]  line        直線L1
    - [out] cross_num   交点数
    - [out] cross1      交点座標Pi1
    - [out] cross2      交点座標Pi2

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_cross_circle_and_lineB(center, radius, line, cross_num, cross1, cross2):
    r"""INT FVALGAPI fnFIE_cg_calc_cross_circle_and_lineB( DPNT_T center, DOUBLE radius, DLINE_T line, INT* cross_num, DPNT_T* cross1, DPNT_T* cross2 )
    円と直線の交点の算出

    Params:
    - [in]  center      円の中心座標
    - [in]  radius      円の半径
    - [in]  line        直線L1
    - [out] cross_num   交点数
    - [out] cross1      交点座標Pi1
    - [out] cross2      交点座標Pi2

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_cross_circle_and_lineB(center, radius, line, cross_num, cross1, cross2)

def fnFIE_cg_calc_cross_2circleA(pnts1, num1, pnts2, num2, cross_num, cross1, cross2) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_cross_2circleA( const DPNT_T* pnts1, INT num1, const DPNT_T* pnts2, INT num2, INT* cross_num, DPNT_T* cross1, DPNT_T* cross2 )
    点群１を通る円１と点群２を通る円２の交点の算出

    Params:
    - [in]  pnts1       円１を生成する座標点群G1。  num1 個の点が必要。
    - [in]  num1        点群 pnts1 に入っている点の数(3〜16)
    - [in]  pnts2       円２を生成する座標点群G2。  num2 個の点が必要。
    - [in]  num2        点群  pnts2 に入っている点の数(3〜16)
    - [out] cross_num   交点数
    - [out] cross1      交点座標Pi1
    - [out] cross2      交点座標Pi2

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_cross_2circleA(pnts1, num1, pnts2, num2, cross_num, cross1, cross2):
    r"""INT FVALGAPI fnFIE_cg_calc_cross_2circleA( const DPNT_T* pnts1, INT num1, const DPNT_T* pnts2, INT num2, INT* cross_num, DPNT_T* cross1, DPNT_T* cross2 )
    点群１を通る円１と点群２を通る円２の交点の算出

    Params:
    - [in]  pnts1       円１を生成する座標点群G1。  num1 個の点が必要。
    - [in]  num1        点群 pnts1 に入っている点の数(3〜16)
    - [in]  pnts2       円２を生成する座標点群G2。  num2 個の点が必要。
    - [in]  num2        点群  pnts2 に入っている点の数(3〜16)
    - [out] cross_num   交点数
    - [out] cross1      交点座標Pi1
    - [out] cross2      交点座標Pi2

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_cross_2circleA(pnts1, num1, pnts2, num2, cross_num, cross1, cross2)

def fnFIE_cg_calc_cross_2circleB(center1, radius1, center2, radius2, cross_num, cross1, cross2) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_cross_2circleB( DPNT_T center1, DOUBLE radius1, DPNT_T center2, DOUBLE radius2, INT* cross_num, DPNT_T* cross1, DPNT_T* cross2 )
    ２つの円の交点の算出

    Params:
    - [in]  center1     円１の中心座標
    - [in]  radius1     円１の半径
    - [in]  center2     円２の中心座標
    - [in]  radius2     円２の半径
    - [out] cross_num   交点の個数
    - [out] cross1      交点座標Pi1
    - [out] cross2      交点座標Pi2

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_cross_2circleB(center1, radius1, center2, radius2, cross_num, cross1, cross2):
    r"""INT FVALGAPI fnFIE_cg_calc_cross_2circleB( DPNT_T center1, DOUBLE radius1, DPNT_T center2, DOUBLE radius2, INT* cross_num, DPNT_T* cross1, DPNT_T* cross2 )
    ２つの円の交点の算出

    Params:
    - [in]  center1     円１の中心座標
    - [in]  radius1     円１の半径
    - [in]  center2     円２の中心座標
    - [in]  radius2     円２の半径
    - [out] cross_num   交点の個数
    - [out] cross1      交点座標Pi1
    - [out] cross2      交点座標Pi2

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_cross_2circleB(center1, radius1, center2, radius2, cross_num, cross1, cross2)

def fnFIE_cg_calc_rectangle_5point(pnt1, pnt2, pnt3, pnt4, pnt5, long_len, short_len, center) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_rectangle_5point( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T pnt4, DPNT_T pnt5, DOUBLE* long_len, DOUBLE* short_len, DPNT_T* center )
    ５点を通る辺を持つ四角形の中心座標

    Params:
    - [in]  pnt1        四角形の基準となる辺を作る直線Ｌのための点P1
    - [in]  pnt2        四角形の基準となる辺を作る直線Ｌのための点P2
    - [in]  pnt3        直線Ｌと隣り合う辺を作る点P3
    - [in]  pnt4        直線Ｌと向かい合う辺を作る点P4
    - [in]  pnt5        直線Ｌと隣り合う辺を作る点P5
    - [out] long_len    長方形の長辺の長さ
    - [out] short_len   長方形の短辺の長さ
    - [out] center      長方形の中心座標点

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_rectangle_5point(pnt1, pnt2, pnt3, pnt4, pnt5, long_len, short_len, center):
    r"""INT FVALGAPI fnFIE_cg_calc_rectangle_5point( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T pnt4, DPNT_T pnt5, DOUBLE* long_len, DOUBLE* short_len, DPNT_T* center )
    ５点を通る辺を持つ四角形の中心座標

    Params:
    - [in]  pnt1        四角形の基準となる辺を作る直線Ｌのための点P1
    - [in]  pnt2        四角形の基準となる辺を作る直線Ｌのための点P2
    - [in]  pnt3        直線Ｌと隣り合う辺を作る点P3
    - [in]  pnt4        直線Ｌと向かい合う辺を作る点P4
    - [in]  pnt5        直線Ｌと隣り合う辺を作る点P5
    - [out] long_len    長方形の長辺の長さ
    - [out] short_len   長方形の短辺の長さ
    - [out] center      長方形の中心座標点

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_rectangle_5point(pnt1, pnt2, pnt3, pnt4, pnt5, long_len, short_len, center)

def fnFIE_cg_calc_distance_2point(pnt1, pnt2, dist) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_distance_2point( DPNT_T pnt1, DPNT_T pnt2, DOUBLE* dist )
    ２点間の距離の算出

    Params:
    - [in]  pnt1    座標点P1
    - [in]  pnt2    座標点P2
    - [out] dist    ２点間の距離d

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_distance_2point(pnt1, pnt2, dist):
    r"""INT FVALGAPI fnFIE_cg_calc_distance_2point( DPNT_T pnt1, DPNT_T pnt2, DOUBLE* dist )
    ２点間の距離の算出

    Params:
    - [in]  pnt1    座標点P1
    - [in]  pnt2    座標点P2
    - [out] dist    ２点間の距離d

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_distance_2point(pnt1, pnt2, dist)

def fnFIE_cg_calc_distance_npoint(pnts, num, dist) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_distance_npoint( const DPNT_T* pnts, INT num, DOUBLE* dist )
    Ｎ点間の距離の算出

    Params:
    - [in]  pnts    座標点群G1。  num 個の点が必要です。
    - [in]  num     点群  pnts に入っている点の数N
    - [out] dist    積算距離

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_distance_npoint(pnts, num, dist):
    r"""INT FVALGAPI fnFIE_cg_calc_distance_npoint( const DPNT_T* pnts, INT num, DOUBLE* dist )
    Ｎ点間の距離の算出

    Params:
    - [in]  pnts    座標点群G1。  num 個の点が必要です。
    - [in]  num     点群  pnts に入っている点の数N
    - [out] dist    積算距離

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_distance_npoint(pnts, num, dist)

def fnFIE_cg_calc_centerline_2npoint(pnts1, num1, pnts2, num2, lsm_mode, lsm_param, line) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_centerline_2npoint( const DPNT_T* pnts1, INT num1, const DPNT_T* pnts2, INT num2, enum f_line_detection_mode lsm_mode, INT lsm_param, DLINE_T* line )
    ２直線の中心を通る直線の算出（２点群指定）

    Params:
    - [in]  pnts1       直線L1を生成する座標点群G1。  num1 個の点が必要。
    - [in]  num1        点群  pnts1 に入っている点の数(2〜1000)
    - [in]  pnts2       直線L2を生成する座標点群G2。  num2 個の点が必要。
    - [in]  num2        点群  pnts2 に入っている点の数(2〜1000)
    - [in]  lsm_mode    直線生成のモード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線生成のパラメータ
    - [out] line        ２直線の中心を通る直線

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_centerline_2npoint(pnts1, num1, pnts2, num2, lsm_mode, lsm_param, line):
    r"""INT FVALGAPI fnFIE_cg_calc_centerline_2npoint( const DPNT_T* pnts1, INT num1, const DPNT_T* pnts2, INT num2, enum f_line_detection_mode lsm_mode, INT lsm_param, DLINE_T* line )
    ２直線の中心を通る直線の算出（２点群指定）

    Params:
    - [in]  pnts1       直線L1を生成する座標点群G1。  num1 個の点が必要。
    - [in]  num1        点群  pnts1 に入っている点の数(2〜1000)
    - [in]  pnts2       直線L2を生成する座標点群G2。  num2 個の点が必要。
    - [in]  num2        点群  pnts2 に入っている点の数(2〜1000)
    - [in]  lsm_mode    直線生成のモード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線生成のパラメータ
    - [out] line        ２直線の中心を通る直線

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_centerline_2npoint(pnts1, num1, pnts2, num2, lsm_mode, lsm_param, line)

def fnFIE_cg_calc_centerline_4point(pnt1, pnt2, pnt3, pnt4, line) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_centerline_4point( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T pnt4, DLINE_T* line )
    ２直線の中心を通る直線の算出（４点指定）

    Params:
    - [in]  pnt1    直線L1を作る座標点P1
    - [in]  pnt2    直線L1を作る座標点P2
    - [in]  pnt3    直線L2を作る座標点P3
    - [in]  pnt4    直線L2を作る座標点P4
    - [out] line    ２直線の中心を通る直線

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_centerline_4point(pnt1, pnt2, pnt3, pnt4, line):
    r"""INT FVALGAPI fnFIE_cg_calc_centerline_4point( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T pnt4, DLINE_T* line )
    ２直線の中心を通る直線の算出（４点指定）

    Params:
    - [in]  pnt1    直線L1を作る座標点P1
    - [in]  pnt2    直線L1を作る座標点P2
    - [in]  pnt3    直線L2を作る座標点P3
    - [in]  pnt4    直線L2を作る座標点P4
    - [out] line    ２直線の中心を通る直線

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_centerline_4point(pnt1, pnt2, pnt3, pnt4, line)

def fnFIE_cg_calc_centerline_2line(line1, line2, center_line) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_centerline_2line( DLINE_T line1, DLINE_T line2, DLINE_T* center_line )
    ２直線の中心を通る直線の算出

    Params:
    - [in]  line1       直線L1
    - [in]  line2       直線L2
    - [out] center_line ２直線の中心を通る直線L3

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_centerline_2line(line1, line2, center_line):
    r"""INT FVALGAPI fnFIE_cg_calc_centerline_2line( DLINE_T line1, DLINE_T line2, DLINE_T* center_line )
    ２直線の中心を通る直線の算出

    Params:
    - [in]  line1       直線L1
    - [in]  line2       直線L2
    - [out] center_line ２直線の中心を通る直線L3

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_centerline_2line(line1, line2, center_line)

def fnFIE_cg_calc_cross_4line(line1, line2, line3, line4, cross) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_cross_4line( DLINE_T line1, DLINE_T line2, DLINE_T line3, DLINE_T line4, DPNT_T* cross )
    ２組の２直線の中心を通る直線の交点の検出（４直線指定）

    Params:
    - [in]  line1   直線L1
    - [in]  line2   直線L2
    - [in]  line3   直線L3
    - [in]  line4   直線L4
    - [out] cross   中心線Lc1と中心線Lc2の交点座標Pc1

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_cross_4line(line1, line2, line3, line4, cross):
    r"""INT FVALGAPI fnFIE_cg_calc_cross_4line( DLINE_T line1, DLINE_T line2, DLINE_T line3, DLINE_T line4, DPNT_T* cross )
    ２組の２直線の中心を通る直線の交点の検出（４直線指定）

    Params:
    - [in]  line1   直線L1
    - [in]  line2   直線L2
    - [in]  line3   直線L3
    - [in]  line4   直線L4
    - [out] cross   中心線Lc1と中心線Lc2の交点座標Pc1

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_cross_4line(line1, line2, line3, line4, cross)

def fnFIE_cg_calc_cross_4npoint(pnts1, num1, pnts2, num2, pnts3, num3, pnts4, num4, lsm_mode, lsm_param, cross) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_cross_4npoint( const DPNT_T* pnts1, INT num1, const DPNT_T* pnts2, INT num2, const DPNT_T* pnts3, INT num3, const DPNT_T* pnts4, INT num4, enum f_line_detection_mode lsm_mode, INT lsm_param, DPNT_T* cross )
    ２組の２直線の中心を通る直線の交点の算出（４点群指定）

    Params:
    - [in]  pnts1       直線L1を生成する座標点群G1
    - [in]  num1        点群  pnts1 に入っている点の数(2〜1000)
    - [in]  pnts2       直線L2を生成する座標点群G2
    - [in]  num2        点群  pnts2 に入っている点の数(2〜1000)
    - [in]  pnts3       直線L3を生成する座標点群G3
    - [in]  num3        点群  pnts3 に入っている点の数(2〜1000)
    - [in]  pnts4       直線L4を生成する座標点群G4
    - [in]  num4        点群  pnts4 に入っている点の数(2〜1000)
    - [in]  lsm_mode    直線生成のモード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線生成のパラメータ
    - [out] cross       中心線Lc1と中心線Lc2の交点座標Pc1

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_cross_4npoint(pnts1, num1, pnts2, num2, pnts3, num3, pnts4, num4, lsm_mode, lsm_param, cross):
    r"""INT FVALGAPI fnFIE_cg_calc_cross_4npoint( const DPNT_T* pnts1, INT num1, const DPNT_T* pnts2, INT num2, const DPNT_T* pnts3, INT num3, const DPNT_T* pnts4, INT num4, enum f_line_detection_mode lsm_mode, INT lsm_param, DPNT_T* cross )
    ２組の２直線の中心を通る直線の交点の算出（４点群指定）

    Params:
    - [in]  pnts1       直線L1を生成する座標点群G1
    - [in]  num1        点群  pnts1 に入っている点の数(2〜1000)
    - [in]  pnts2       直線L2を生成する座標点群G2
    - [in]  num2        点群  pnts2 に入っている点の数(2〜1000)
    - [in]  pnts3       直線L3を生成する座標点群G3
    - [in]  num3        点群  pnts3 に入っている点の数(2〜1000)
    - [in]  pnts4       直線L4を生成する座標点群G4
    - [in]  num4        点群  pnts4 に入っている点の数(2〜1000)
    - [in]  lsm_mode    直線生成のモード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線生成のパラメータ
    - [out] cross       中心線Lc1と中心線Lc2の交点座標Pc1

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_cross_4npoint(pnts1, num1, pnts2, num2, pnts3, num3, pnts4, num4, lsm_mode, lsm_param, cross)

def fnFIE_cg_calc_cross_8point(pnt1, pnt2, pnt3, pnt4, pnt5, pnt6, pnt7, pnt8, cross) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_cross_8point( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T pnt4, DPNT_T pnt5, DPNT_T pnt6, DPNT_T pnt7, DPNT_T pnt8, DPNT_T* cross )
    ２組の２直線の中心を通る直線の交点の算出（８点指定）

    Params:
    - [in]  pnt1    直線L1を設定する座標点P1
    - [in]  pnt2    直線L1を設定する座標点P2
    - [in]  pnt3    直線L2を設定する座標点P3
    - [in]  pnt4    直線L2を設定する座標点P4
    - [in]  pnt5    直線L3を設定する座標点P5
    - [in]  pnt6    直線L3を設定する座標点P6
    - [in]  pnt7    直線L4を設定する座標点P7
    - [in]  pnt8    直線L4を設定する座標点P8
    - [out] cross   中心線Lc1とLc2の交点座標Pc1

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_cross_8point(pnt1, pnt2, pnt3, pnt4, pnt5, pnt6, pnt7, pnt8, cross):
    r"""INT FVALGAPI fnFIE_cg_calc_cross_8point( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T pnt4, DPNT_T pnt5, DPNT_T pnt6, DPNT_T pnt7, DPNT_T pnt8, DPNT_T* cross )
    ２組の２直線の中心を通る直線の交点の算出（８点指定）

    Params:
    - [in]  pnt1    直線L1を設定する座標点P1
    - [in]  pnt2    直線L1を設定する座標点P2
    - [in]  pnt3    直線L2を設定する座標点P3
    - [in]  pnt4    直線L2を設定する座標点P4
    - [in]  pnt5    直線L3を設定する座標点P5
    - [in]  pnt6    直線L3を設定する座標点P6
    - [in]  pnt7    直線L4を設定する座標点P7
    - [in]  pnt8    直線L4を設定する座標点P8
    - [out] cross   中心線Lc1とLc2の交点座標Pc1

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_cross_8point(pnt1, pnt2, pnt3, pnt4, pnt5, pnt6, pnt7, pnt8, cross)

def fnFIE_cg_calc_rectangle_4line(lineAB, lineBC, lineCD, lineDA, long1, short1, long2, short2, center) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_rectangle_4line( DLINE_T lineAB, DLINE_T lineBC, DLINE_T lineCD, DLINE_T lineDA, DOUBLE* long1, DOUBLE* short1, DOUBLE* long2, DOUBLE* short2, DPNT_T* center )
    四角形の中心座標の算出（４直線指定）

    Params:
    - [in]  lineAB  辺ＡＢ
    - [in]  lineBC  辺ＢＣ
    - [in]  lineCD  辺ＣＤ
    - [in]  lineDA  辺ＤＡ
    - [out] long1   長辺１の長さ
    - [out] short1  短辺１の長さ
    - [out] long2   長辺２の長さ
    - [out] short2  短辺２の長さ
    - [out] center  中心点座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_rectangle_4line(lineAB, lineBC, lineCD, lineDA, long1, short1, long2, short2, center):
    r"""INT FVALGAPI fnFIE_cg_calc_rectangle_4line( DLINE_T lineAB, DLINE_T lineBC, DLINE_T lineCD, DLINE_T lineDA, DOUBLE* long1, DOUBLE* short1, DOUBLE* long2, DOUBLE* short2, DPNT_T* center )
    四角形の中心座標の算出（４直線指定）

    Params:
    - [in]  lineAB  辺ＡＢ
    - [in]  lineBC  辺ＢＣ
    - [in]  lineCD  辺ＣＤ
    - [in]  lineDA  辺ＤＡ
    - [out] long1   長辺１の長さ
    - [out] short1  短辺１の長さ
    - [out] long2   長辺２の長さ
    - [out] short2  短辺２の長さ
    - [out] center  中心点座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_rectangle_4line(lineAB, lineBC, lineCD, lineDA, long1, short1, long2, short2, center)

def fnFIE_cg_calc_rectangle_4npoint(pntsAB, numAB, pntsBC, numBC, pntsCD, numCD, pntsDA, numDA, lsm_mode, lsm_param, long1, short1, long2, short2, center) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_rectangle_4npoint( const DPNT_T* pntsAB, INT numAB, const DPNT_T* pntsBC, INT numBC, const DPNT_T* pntsCD, INT numCD, const DPNT_T* pntsDA, INT numDA, enum f_line_detection_mode lsm_mode, INT lsm_param, DOUBLE* long1, DOUBLE* short1, DOUBLE* long2, DOUBLE* short2, DPNT_T* center )
    四角形の中心座標の算出（４点群指定）

    Params:
    - [in]  pntsAB      辺ＡＢを作る座標点群。  numAB 個の点が必要
    - [in]  numAB       点群  pntsAB に入っている点の数(2〜1000)
    - [in]  pntsBC      辺ＢＣを作る座標点群。  numBC 個の点が必要
    - [in]  numBC       点群  pntsBC に入っている点の数(2〜1000)
    - [in]  pntsCD      辺ＣＤを作る座標点群。  numCD 個の点が必要
    - [in]  numCD       点群  pntsCD に入っている点の数(2〜1000)
    - [in]  pntsDA      辺ＤＡを作る座標点群。  numDA 個の点が必要
    - [in]  numDA       点群  pntsDA に入っている点の数(2〜1000)
    - [in]  lsm_mode    直線生成のモード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線生成のパラメータ
    - [out] long1       長辺１の長さ
    - [out] short1      短辺１の長さ
    - [out] long2       長辺２の長さ
    - [out] short2      短辺２の長さ
    - [out] center      中心点座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_rectangle_4npoint(pntsAB, numAB, pntsBC, numBC, pntsCD, numCD, pntsDA, numDA, lsm_mode, lsm_param, long1, short1, long2, short2, center):
    r"""INT FVALGAPI fnFIE_cg_calc_rectangle_4npoint( const DPNT_T* pntsAB, INT numAB, const DPNT_T* pntsBC, INT numBC, const DPNT_T* pntsCD, INT numCD, const DPNT_T* pntsDA, INT numDA, enum f_line_detection_mode lsm_mode, INT lsm_param, DOUBLE* long1, DOUBLE* short1, DOUBLE* long2, DOUBLE* short2, DPNT_T* center )
    四角形の中心座標の算出（４点群指定）

    Params:
    - [in]  pntsAB      辺ＡＢを作る座標点群。  numAB 個の点が必要
    - [in]  numAB       点群  pntsAB に入っている点の数(2〜1000)
    - [in]  pntsBC      辺ＢＣを作る座標点群。  numBC 個の点が必要
    - [in]  numBC       点群  pntsBC に入っている点の数(2〜1000)
    - [in]  pntsCD      辺ＣＤを作る座標点群。  numCD 個の点が必要
    - [in]  numCD       点群  pntsCD に入っている点の数(2〜1000)
    - [in]  pntsDA      辺ＤＡを作る座標点群。  numDA 個の点が必要
    - [in]  numDA       点群  pntsDA に入っている点の数(2〜1000)
    - [in]  lsm_mode    直線生成のモード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線生成のパラメータ
    - [out] long1       長辺１の長さ
    - [out] short1      短辺１の長さ
    - [out] long2       長辺２の長さ
    - [out] short2      短辺２の長さ
    - [out] center      中心点座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_rectangle_4npoint(pntsAB, numAB, pntsBC, numBC, pntsCD, numCD, pntsDA, numDA, lsm_mode, lsm_param, long1, short1, long2, short2, center)

def fnFIE_cg_calc_cross_mark(pnt1, pnt2, pnt3, pnt4, pnt5, pnt6, pnt7, pnt8, center) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_cross_mark( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T pnt4, DPNT_T pnt5, DPNT_T pnt6, DPNT_T pnt7, DPNT_T pnt8, DPNT_T* center )
    トンボマークの中心の算出

    Params:
    - [in]  pnt1    座標点P1
    - [in]  pnt2    座標点P2
    - [in]  pnt3    座標点P3
    - [in]  pnt4    座標点P4
    - [in]  pnt5    座標点P5
    - [in]  pnt6    座標点P6
    - [in]  pnt7    座標点P7
    - [in]  pnt8    座標点P8
    - [out] center  中心座標Pc1

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_cross_mark(pnt1, pnt2, pnt3, pnt4, pnt5, pnt6, pnt7, pnt8, center):
    r"""INT FVALGAPI fnFIE_cg_calc_cross_mark( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T pnt4, DPNT_T pnt5, DPNT_T pnt6, DPNT_T pnt7, DPNT_T pnt8, DPNT_T* center )
    トンボマークの中心の算出

    Params:
    - [in]  pnt1    座標点P1
    - [in]  pnt2    座標点P2
    - [in]  pnt3    座標点P3
    - [in]  pnt4    座標点P4
    - [in]  pnt5    座標点P5
    - [in]  pnt6    座標点P6
    - [in]  pnt7    座標点P7
    - [in]  pnt8    座標点P8
    - [out] center  中心座標Pc1

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_cross_mark(pnt1, pnt2, pnt3, pnt4, pnt5, pnt6, pnt7, pnt8, center)

def fnFIE_cg_calc_long_hole_6point(pnt1, pnt2, pnt3, pnt4, pnt5, pnt6, long1, short1, long2, short2, center) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_long_hole_6point( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T pnt4, DPNT_T pnt5, DPNT_T pnt6, DOUBLE* long1, DOUBLE* short1, DOUBLE* long2, DOUBLE* short2, DPNT_T* center )
    長穴の測定（6点指定）

    Params:
    - [in]  pnt1        座標点P1
    - [in]  pnt2        座標点P2
    - [in]  pnt3        座標点P3
    - [in]  pnt4        座標点P4
    - [in]  pnt5        座標点P5
    - [in]  pnt6        座標点P6
    - [out] long1       長穴の作る四角形の長辺1
    - [out] short1      長穴の作る四角形の短辺2
    - [out] long2       長穴の作る四角形の長辺2
    - [out] short2      長穴の作る四角形の短辺2
    - [out] center      長穴の作る四角形の中心座標Pc

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_long_hole_6point(pnt1, pnt2, pnt3, pnt4, pnt5, pnt6, long1, short1, long2, short2, center):
    r"""INT FVALGAPI fnFIE_cg_calc_long_hole_6point( DPNT_T pnt1, DPNT_T pnt2, DPNT_T pnt3, DPNT_T pnt4, DPNT_T pnt5, DPNT_T pnt6, DOUBLE* long1, DOUBLE* short1, DOUBLE* long2, DOUBLE* short2, DPNT_T* center )
    長穴の測定（6点指定）

    Params:
    - [in]  pnt1        座標点P1
    - [in]  pnt2        座標点P2
    - [in]  pnt3        座標点P3
    - [in]  pnt4        座標点P4
    - [in]  pnt5        座標点P5
    - [in]  pnt6        座標点P6
    - [out] long1       長穴の作る四角形の長辺1
    - [out] short1      長穴の作る四角形の短辺2
    - [out] long2       長穴の作る四角形の長辺2
    - [out] short2      長穴の作る四角形の短辺2
    - [out] center      長穴の作る四角形の中心座標Pc

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_long_hole_6point(pnt1, pnt2, pnt3, pnt4, pnt5, pnt6, long1, short1, long2, short2, center)

def fnFIE_cg_calc_tangent_line(pnt, center, radius, line) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_tangent_line( DPNT_T pnt, DPNT_T center, DOUBLE radius, DLINE_T* line )
    円の接線の方程式の算出

    Params:
    - [in]  pnt     円上にある点P1
    - [in]  center  円の中心座標C1
    - [in]  radius  円の半径r
    - [out] line    接線L

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_tangent_line(pnt, center, radius, line):
    r"""INT FVALGAPI fnFIE_cg_calc_tangent_line( DPNT_T pnt, DPNT_T center, DOUBLE radius, DLINE_T* line )
    円の接線の方程式の算出

    Params:
    - [in]  pnt     円上にある点P1
    - [in]  center  円の中心座標C1
    - [in]  radius  円の半径r
    - [out] line    接線L

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_tangent_line(pnt, center, radius, line)

def fnFIE_cg_calc_cross_ellipse_and_line(center, major, minor, theta, line, cross_num, cross1, cross2) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_cross_ellipse_and_line( DPNT_T center, DOUBLE major, DOUBLE minor, DOUBLE theta, DLINE_T line, INT* cross_num, DPNT_T* cross1, DPNT_T* cross2 )
    楕円と直線の交点の算出

    Params:
    - [in]  center      楕円の中心座標
    - [in]  major       楕円の主軸長
    - [in]  minor       楕円の副軸長
    - [in]  theta       楕円の主軸傾き ( 単位：ラジアン )
    - [in]  line        直線L
    - [out] cross_num   交点数
    - [out] cross1      交点座標Pi1
    - [out] cross2      交点座標Pi2

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_cross_ellipse_and_line(center, major, minor, theta, line, cross_num, cross1, cross2):
    r"""INT FVALGAPI fnFIE_cg_calc_cross_ellipse_and_line( DPNT_T center, DOUBLE major, DOUBLE minor, DOUBLE theta, DLINE_T line, INT* cross_num, DPNT_T* cross1, DPNT_T* cross2 )
    楕円と直線の交点の算出

    Params:
    - [in]  center      楕円の中心座標
    - [in]  major       楕円の主軸長
    - [in]  minor       楕円の副軸長
    - [in]  theta       楕円の主軸傾き ( 単位：ラジアン )
    - [in]  line        直線L
    - [out] cross_num   交点数
    - [out] cross1      交点座標Pi1
    - [out] cross2      交点座標Pi2

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_cross_ellipse_and_line(center, major, minor, theta, line, cross_num, cross1, cross2)

def fnFIE_cg_calc_distance_ellipse_to_point(center, major, minor, theta, point, distance, nearest_point, outer) -> Any:
    r"""INT FVALGAPI fnFIE_cg_calc_distance_ellipse_to_point( DPNT_T center, DOUBLE major, DOUBLE minor, DOUBLE theta, DPNT_T point, DOUBLE* distance, DPNT_T* nearest_point, BOOL* outer )
    楕円と点の距離

    Params:
    - [in]  center          楕円Eの中心座標
    - [in]  major           楕円Eの主軸長
    - [in]  minor           楕円Eの副軸長
    - [in]  theta           楕円Eの主軸傾き ( 単位：ラジアン )
    - [in]  point           座標点P1
    - [out] distance        楕円EとP1との最短距離d
    - [out] nearest_point   楕円EとP1との最短距離dを与える、楕円E上の点P2
    - [out] outer           P1が楕円Eの外部か内部かの判定結果( TRUE:楕円外部 / FALSE:楕円上か楕円内)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_calc_distance_ellipse_to_point(center, major, minor, theta, point, distance=None, nearest_point=None, outer=None):
    r"""INT FVALGAPI fnFIE_cg_calc_distance_ellipse_to_point( DPNT_T center, DOUBLE major, DOUBLE minor, DOUBLE theta, DPNT_T point, DOUBLE* distance, DPNT_T* nearest_point, BOOL* outer )
    楕円と点の距離

    Params:
    - [in]  center          楕円Eの中心座標
    - [in]  major           楕円Eの主軸長
    - [in]  minor           楕円Eの副軸長
    - [in]  theta           楕円Eの主軸傾き ( 単位：ラジアン )
    - [in]  point           座標点P1
    - [out] distance        楕円EとP1との最短距離d
    - [out] nearest_point   楕円EとP1との最短距離dを与える、楕円E上の点P2
    - [out] outer           P1が楕円Eの外部か内部かの判定結果( TRUE:楕円外部 / FALSE:楕円上か楕円内)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_calc_distance_ellipse_to_point(center, major, minor, theta, point, distance, nearest_point, outer)

def fnFIE_modelview_alloc_param() -> Any:
    r"""F_MODELVIEW* FVALGAPI fnFIE_modelview_alloc_param( VOID )
    座標系変換行列生成用構造体のメモリ確保と初期化

    Params:


    Returns:
    - 確保された座標系変換行列生成用構造体を返します。
            メモリ不足やライセンスエラー、または未初期化エラーで失敗した場合は、NULLを返します。
    """
    raise NotImplementedError

def modelview_alloc_param():
    r"""F_MODELVIEW* FVALGAPI fnFIE_modelview_alloc_param( VOID )
    座標系変換行列生成用構造体のメモリ確保と初期化

    Params:


    Returns:
    - 確保された座標系変換行列生成用構造体を返します。
            メモリ不足やライセンスエラー、または未初期化エラーで失敗した場合は、NULLを返します。
    """

    return _fie.fnFIE_modelview_alloc_param()

def fnFIE_modelview_free_param(param) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_free_param( F_MODELVIEW* param )
    座標系変換行列生成用構造体のメモリ解放

    Params:
    - [in]  param   解放する座標系変換行列生成用構造体

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    """
    raise NotImplementedError

def modelview_free_param(param):
    r"""INT FVALGAPI fnFIE_modelview_free_param( F_MODELVIEW* param )
    座標系変換行列生成用構造体のメモリ解放

    Params:
    - [in]  param   解放する座標系変換行列生成用構造体

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    """

    return _fie.fnFIE_modelview_free_param(param)

def fnFIE_modelview_reset_param(param) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_reset_param( F_MODELVIEW* param )
    座標系変換行列生成用構造体の初期化

    Params:
    - [in,out]  param 初期化する座標系変換行列生成用構造体

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def modelview_reset_param(param):
    r"""INT FVALGAPI fnFIE_modelview_reset_param( F_MODELVIEW* param )
    座標系変換行列生成用構造体の初期化

    Params:
    - [in,out]  param 初期化する座標系変換行列生成用構造体

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_modelview_reset_param(param)

def fnFIE_modelview_set_param(param, reverse_y, angle, move_x, move_y, scale_x, scale_y) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_set_param( F_MODELVIEW* param, INT reverse_y, DOUBLE angle, DOUBLE move_x, DOUBLE move_y, DOUBLE scale_x, DOUBLE scale_y )
    座標系変換行列の直接指定

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  angle       変換座標系 傾き（単位：ラジアン）
    - [in]  move_x      変換座標系 ｘ移動量：Δx
    - [in]  move_y      変換座標系 ｙ移動量：Δy
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def modelview_set_param(param, reverse_y, angle, move_x, move_y, scale_x, scale_y):
    r"""INT FVALGAPI fnFIE_modelview_set_param( F_MODELVIEW* param, INT reverse_y, DOUBLE angle, DOUBLE move_x, DOUBLE move_y, DOUBLE scale_x, DOUBLE scale_y )
    座標系変換行列の直接指定

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  angle       変換座標系 傾き（単位：ラジアン）
    - [in]  move_x      変換座標系 ｘ移動量：Δx
    - [in]  move_y      変換座標系 ｙ移動量：Δy
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_modelview_set_param(param, reverse_y, angle, move_x, move_y, scale_x, scale_y)

def fnFIE_modelview_3pointA(param, reverse_y, pnt_x1, pnt_x2, pnt_y, scale_x, scale_y) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_3pointA( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_x1, DPNT_T pnt_x2, DPNT_T pnt_y, DOUBLE scale_x, DOUBLE scale_y )
    ３点から座標系変換行列の設定（その１）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_x1      ｘ軸を決定する点１：P1
    - [in]  pnt_x2      ｘ軸を決定する点２：P2
    - [in]  pnt_y       ｙ軸を決定する点：P3
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def modelview_3pointA(param, reverse_y, pnt_x1, pnt_x2, pnt_y, scale_x, scale_y):
    r"""INT FVALGAPI fnFIE_modelview_3pointA( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_x1, DPNT_T pnt_x2, DPNT_T pnt_y, DOUBLE scale_x, DOUBLE scale_y )
    ３点から座標系変換行列の設定（その１）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_x1      ｘ軸を決定する点１：P1
    - [in]  pnt_x2      ｘ軸を決定する点２：P2
    - [in]  pnt_y       ｙ軸を決定する点：P3
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_modelview_3pointA(param, reverse_y, pnt_x1, pnt_x2, pnt_y, scale_x, scale_y)

def fnFIE_modelview_3pointB(param, reverse_y, pnt_x1, pnt_x2, pnt_y, scale_x, scale_y) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_3pointB( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_x1, DPNT_T pnt_x2, DPNT_T pnt_y, DOUBLE scale_x, DOUBLE scale_y )
    ３点から座標系変換行列の設定（その２）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_x1      ｘ軸を決定する点１：P1
    - [in]  pnt_x2      ｘ軸を決定する点２：P2
    - [in]  pnt_y       ｙ軸を決定する点：P3
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def modelview_3pointB(param, reverse_y, pnt_x1, pnt_x2, pnt_y, scale_x, scale_y):
    r"""INT FVALGAPI fnFIE_modelview_3pointB( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_x1, DPNT_T pnt_x2, DPNT_T pnt_y, DOUBLE scale_x, DOUBLE scale_y )
    ３点から座標系変換行列の設定（その２）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_x1      ｘ軸を決定する点１：P1
    - [in]  pnt_x2      ｘ軸を決定する点２：P2
    - [in]  pnt_y       ｙ軸を決定する点：P3
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_modelview_3pointB(param, reverse_y, pnt_x1, pnt_x2, pnt_y, scale_x, scale_y)

def fnFIE_modelview_2pointA(param, reverse_y, pnt_x1, pnt_x2, scale_x, scale_y) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_2pointA( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_x1, DPNT_T pnt_x2, DOUBLE scale_x, DOUBLE scale_y )
    ２点から座標系変換行列の設定（その１）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_x1      ｘ軸を決定する点１：P1
    - [in]  pnt_x2      ｘ軸を決定する点２：P2
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def modelview_2pointA(param, reverse_y, pnt_x1, pnt_x2, scale_x, scale_y):
    r"""INT FVALGAPI fnFIE_modelview_2pointA( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_x1, DPNT_T pnt_x2, DOUBLE scale_x, DOUBLE scale_y )
    ２点から座標系変換行列の設定（その１）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_x1      ｘ軸を決定する点１：P1
    - [in]  pnt_x2      ｘ軸を決定する点２：P2
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_modelview_2pointA(param, reverse_y, pnt_x1, pnt_x2, scale_x, scale_y)

def fnFIE_modelview_2pointB(param, reverse_y, pnt_y1, pnt_y2, scale_x, scale_y) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_2pointB( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_y1, DPNT_T pnt_y2, DOUBLE scale_x, DOUBLE scale_y )
    ２点から座標系変換行列の設定（その２）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_y1      ｙ軸を決定する点１：P1
    - [in]  pnt_y2      ｙ軸を決定する点２：P2
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def modelview_2pointB(param, reverse_y, pnt_y1, pnt_y2, scale_x, scale_y):
    r"""INT FVALGAPI fnFIE_modelview_2pointB( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_y1, DPNT_T pnt_y2, DOUBLE scale_x, DOUBLE scale_y )
    ２点から座標系変換行列の設定（その２）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_y1      ｙ軸を決定する点１：P1
    - [in]  pnt_y2      ｙ軸を決定する点２：P2
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_modelview_2pointB(param, reverse_y, pnt_y1, pnt_y2, scale_x, scale_y)

def fnFIE_modelview_2pointC(param, reverse_y, pnt_x1, pnt_x2, scale_x, scale_y) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_2pointC( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_x1, DPNT_T pnt_x2, DOUBLE scale_x, DOUBLE scale_y )
    ２点から座標系変換行列の設定（その３）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_x1      ｘ軸を決定する点１：P1
    - [in]  pnt_x2      ｘ軸を決定する点２：P2
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def modelview_2pointC(param, reverse_y, pnt_x1, pnt_x2, scale_x, scale_y):
    r"""INT FVALGAPI fnFIE_modelview_2pointC( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_x1, DPNT_T pnt_x2, DOUBLE scale_x, DOUBLE scale_y )
    ２点から座標系変換行列の設定（その３）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_x1      ｘ軸を決定する点１：P1
    - [in]  pnt_x2      ｘ軸を決定する点２：P2
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_modelview_2pointC(param, reverse_y, pnt_x1, pnt_x2, scale_x, scale_y)

def fnFIE_modelview_point_and_lineA(param, reverse_y, pnt_y, line_x, scale_x, scale_y) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_point_and_lineA( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_y, DLINE_T line_x, DOUBLE scale_x, DOUBLE scale_y )
    Ｘ軸直線とＹ軸上の１点による座標系変換行列の設定

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_y       ｙ軸を決定する点：P1
    - [in]  line_x      ｘ軸を表す直線：L1
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def modelview_point_and_lineA(param, reverse_y, pnt_y, line_x, scale_x, scale_y):
    r"""INT FVALGAPI fnFIE_modelview_point_and_lineA( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_y, DLINE_T line_x, DOUBLE scale_x, DOUBLE scale_y )
    Ｘ軸直線とＹ軸上の１点による座標系変換行列の設定

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_y       ｙ軸を決定する点：P1
    - [in]  line_x      ｘ軸を表す直線：L1
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_modelview_point_and_lineA(param, reverse_y, pnt_y, line_x, scale_x, scale_y)

def fnFIE_modelview_point_and_lineB(param, reverse_y, origin, line_x, scale_x, scale_y) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_point_and_lineB( F_MODELVIEW* param, INT reverse_y, DPNT_T origin, DLINE_T line_x, DOUBLE scale_x, DOUBLE scale_y )
    Ｘ軸に平行な直線と原点指定による座標系変換行列の設定

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  origin      原点を決定する点：P1
    - [in]  line_x      ｘ軸に平行な直線：L1
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def modelview_point_and_lineB(param, reverse_y, origin, line_x, scale_x, scale_y):
    r"""INT FVALGAPI fnFIE_modelview_point_and_lineB( F_MODELVIEW* param, INT reverse_y, DPNT_T origin, DLINE_T line_x, DOUBLE scale_x, DOUBLE scale_y )
    Ｘ軸に平行な直線と原点指定による座標系変換行列の設定

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  origin      原点を決定する点：P1
    - [in]  line_x      ｘ軸に平行な直線：L1
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_modelview_point_and_lineB(param, reverse_y, origin, line_x, scale_x, scale_y)

def fnFIE_modelview_npointA(param, reverse_y, pnt_y, pnts_x, pnt_num, scale_x, scale_y, lsm_mode, lsm_param) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_npointA( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_y, const DPNT_T* pnts_x, INT pnt_num, DOUBLE scale_x, DOUBLE scale_y, enum f_line_detection_mode lsm_mode, INT lsm_param )
    点群と１点から座標系変換行列の設定（その１）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_y       ｙ軸を決定する点：P1
    - [in]  pnts_x      ｘ軸を決定する点配列：G1。  pnt_num で指定した個数の点が必要
    - [in]  pnt_num     点群  pnts_xに入っている点の数(2〜1000)
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング
    - [in]  lsm_mode    直線係数決定モード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線係数決定パラメータ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def modelview_npointA(param, reverse_y, pnt_y, pnts_x, pnt_num, scale_x, scale_y, lsm_mode, lsm_param):
    r"""INT FVALGAPI fnFIE_modelview_npointA( F_MODELVIEW* param, INT reverse_y, DPNT_T pnt_y, const DPNT_T* pnts_x, INT pnt_num, DOUBLE scale_x, DOUBLE scale_y, enum f_line_detection_mode lsm_mode, INT lsm_param )
    点群と１点から座標系変換行列の設定（その１）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  pnt_y       ｙ軸を決定する点：P1
    - [in]  pnts_x      ｘ軸を決定する点配列：G1。  pnt_num で指定した個数の点が必要
    - [in]  pnt_num     点群  pnts_xに入っている点の数(2〜1000)
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング
    - [in]  lsm_mode    直線係数決定モード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線係数決定パラメータ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_modelview_npointA(param, reverse_y, pnt_y, pnts_x, pnt_num, scale_x, scale_y, lsm_mode, lsm_param)

def fnFIE_modelview_npointB(param, reverse_y, origin, pnts_x, pnt_num, scale_x, scale_y, lsm_mode, lsm_param) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_npointB( F_MODELVIEW* param, INT reverse_y, DPNT_T origin, const DPNT_T* pnts_x, INT pnt_num, DOUBLE scale_x, DOUBLE scale_y, enum f_line_detection_mode lsm_mode, INT lsm_param )
    点群と１点から座標系変換行列の設定（その２）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  origin      原点を決定する点：P1
    - [in]  pnts_x      ｘ軸を決定する点配列：G1。  pnt_num で指定した個数の点が必要
    - [in]  pnt_num     点群  pnts_x に入っている点の数(2〜1000)
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング
    - [in]  lsm_mode    直線係数決定モード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線係数決定パラメータ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def modelview_npointB(param, reverse_y, origin, pnts_x, pnt_num, scale_x, scale_y, lsm_mode, lsm_param):
    r"""INT FVALGAPI fnFIE_modelview_npointB( F_MODELVIEW* param, INT reverse_y, DPNT_T origin, const DPNT_T* pnts_x, INT pnt_num, DOUBLE scale_x, DOUBLE scale_y, enum f_line_detection_mode lsm_mode, INT lsm_param )
    点群と１点から座標系変換行列の設定（その２）

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  origin      原点を決定する点：P1
    - [in]  pnts_x      ｘ軸を決定する点配列：G1。  pnt_num で指定した個数の点が必要
    - [in]  pnt_num     点群  pnts_x に入っている点の数(2〜1000)
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング
    - [in]  lsm_mode    直線係数決定モード
                        - F_LINE_DETECTION_NORMAL   通常直線検出モード
                        - F_LINE_DETECTION_NUM  回数指定モード
                        - F_LINE_DETECTION_DIST_A   距離指定モード１
                        - F_LINE_DETECTION_DIST_B   距離指定モード２
    - [in]  lsm_param   直線係数決定パラメータ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_modelview_npointB(param, reverse_y, origin, pnts_x, pnt_num, scale_x, scale_y, lsm_mode, lsm_param)

def fnFIE_modelview_parallel(param, reverse_y, origin, scale_x, scale_y) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_parallel( F_MODELVIEW* param, INT reverse_y, DPNT_T origin, DOUBLE scale_x, DOUBLE scale_y )
    座標系変換行列の平行移動

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  origin      原点を決定する点：P1
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def modelview_parallel(param, reverse_y, origin, scale_x, scale_y):
    r"""INT FVALGAPI fnFIE_modelview_parallel( F_MODELVIEW* param, INT reverse_y, DPNT_T origin, DOUBLE scale_x, DOUBLE scale_y )
    座標系変換行列の平行移動

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  origin      原点を決定する点：P1
    - [in]  scale_x     ｘスケーリング
    - [in]  scale_y     ｙスケーリング

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_modelview_parallel(param, reverse_y, origin, scale_x, scale_y)

def fnFIE_modelview_set_points(param, reverse_y, screen_pnts, world_pnts, pnt_num) -> Any:
    r"""INT FVALGAPI fnFIE_modelview_set_points( F_MODELVIEW* param, INT reverse_y, const DPNT_T* screen_pnts, const DPNT_T* world_pnts, INT pnt_num )
    点群の変換係数の算出による、座標系変換行列の生成

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  screen_pnts 変換前座標から見た点群
    - [in]  world_pnts  変換後座標から見た点群
    - [in]  pnt_num     点群に入っている点の数(2〜100)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def modelview_set_points(param, reverse_y, screen_pnts, world_pnts, pnt_num):
    r"""INT FVALGAPI fnFIE_modelview_set_points( F_MODELVIEW* param, INT reverse_y, const DPNT_T* screen_pnts, const DPNT_T* world_pnts, INT pnt_num )
    点群の変換係数の算出による、座標系変換行列の生成

    Params:
    - [out] param       座標変換係数
    - [in]  reverse_y   Ｙ軸方向
                        - TRUE  反転有り(Ｙ軸正方向が上向き)
                        - FALSE 反転無し(Ｙ軸正方向が下向き)
    - [in]  screen_pnts 変換前座標から見た点群
    - [in]  world_pnts  変換後座標から見た点群
    - [in]  pnt_num     点群に入っている点の数(2〜100)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能エラー
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_modelview_set_points(param, reverse_y, screen_pnts, world_pnts, pnt_num)

def fnFIE_xyqn_open() -> Any:
    r"""FHANDLE FVALGAPI fnFIE_xyqn_open( VOID )
    キャリブレーションシステムのオープン

    Params:


    Returns:
    - 正常に終了した場合は、キャリブレーションシステムのハンドルを返します。
            異常終了した場合は NULL を返します。
    """
    raise NotImplementedError

def xyqn_open():
    r"""FHANDLE FVALGAPI fnFIE_xyqn_open( VOID )
    キャリブレーションシステムのオープン

    Params:


    Returns:
    - 正常に終了した場合は、キャリブレーションシステムのハンドルを返します。
            異常終了した場合は NULL を返します。
    """

    return _fie.fnFIE_xyqn_open()

def fnFIE_xyqn_close(hcalib) -> Any:
    r"""void fnFIE_xyqn_close( FHANDLE hcalib )
    キャリブレーションシステムのクローズ

    Params:
    - [in]  hcalib  キャリブレーションシステムのハンドル

    Returns:
    """
    raise NotImplementedError

def xyqn_close(hcalib):
    r"""void fnFIE_xyqn_close( FHANDLE hcalib )
    キャリブレーションシステムのクローズ

    Params:
    - [in]  hcalib  キャリブレーションシステムのハンドル

    Returns:
    """

    return _fie.fnFIE_xyqn_close(hcalib)

def fnFIE_xyqn_copy(hcalib) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_xyqn_copy( FHANDLE hcalib )
    キャリブレーションシステムのコピー

    Params:
    - [in] hcalib   キャリブレーションシステムのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """
    raise NotImplementedError

def xyqn_copy(hcalib):
    r"""FHANDLE FVALGAPI fnFIE_xyqn_copy( FHANDLE hcalib )
    キャリブレーションシステムのコピー

    Params:
    - [in] hcalib   キャリブレーションシステムのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """

    return _fie.fnFIE_xyqn_copy(hcalib)

def fnFIE_xyqn_calc_table(hcalib, delt_x, delt_y, delt_q, channels, pos_tbl) -> Any:
    r"""INT FVALGAPI fnFIE_xyqn_calc_table( FHANDLE hcalib, DOUBLE delt_x, DOUBLE delt_y, DOUBLE delt_q, INT channels, const DPNT_T* pos_tbl )
    キャリブレーションテーブルの計算

    Params:
    - [in,out]  hcalib      キャリブレーションシステムのハンドル
    - [in]      delt_x      平行移動キャリブレーション時のＸ方向シフト量Δｘ(mm):符号付きの数値で指定
    - [in]      delt_y      平行移動キャリブレーション次のＹ方向シフト量Δｙ(mm):符号付きの数値で指定
    - [in]      delt_q      回転量Δθ(rad):符号無しの数値で指定
    - [in]      channels    カメラチャネル数(２以上)
    - [in]      pos_tbl     キャリブレーションデータテーブル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 与えられた座標で計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def xyqn_calc_table(hcalib, delt_x, delt_y, delt_q, channels, pos_tbl):
    r"""INT FVALGAPI fnFIE_xyqn_calc_table( FHANDLE hcalib, DOUBLE delt_x, DOUBLE delt_y, DOUBLE delt_q, INT channels, const DPNT_T* pos_tbl )
    キャリブレーションテーブルの計算

    Params:
    - [in,out]  hcalib      キャリブレーションシステムのハンドル
    - [in]      delt_x      平行移動キャリブレーション時のＸ方向シフト量Δｘ(mm):符号付きの数値で指定
    - [in]      delt_y      平行移動キャリブレーション次のＹ方向シフト量Δｙ(mm):符号付きの数値で指定
    - [in]      delt_q      回転量Δθ(rad):符号無しの数値で指定
    - [in]      channels    カメラチャネル数(２以上)
    - [in]      pos_tbl     キャリブレーションデータテーブル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 与えられた座標で計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_xyqn_calc_table(hcalib, delt_x, delt_y, delt_q, channels, pos_tbl)

def fnFIE_xyqn_get_channels(hcalib, channels) -> Any:
    r"""INT FVALGAPI fnFIE_xyqn_get_channels( FHANDLE hcalib, INT* channels )
    カメラチャネル数の取得

    Params:
    - [in]  hcalib      キャリブレーションシステムのハンドル
    - [out] channels    カメラチャネル数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  channels がNULL
                                - 事前に fnFIE_xyqn_calc_table() または fnFIE_xyqn_load() が実行されていない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def xyqn_get_channels(hcalib, channels):
    r"""INT FVALGAPI fnFIE_xyqn_get_channels( FHANDLE hcalib, INT* channels )
    カメラチャネル数の取得

    Params:
    - [in]  hcalib      キャリブレーションシステムのハンドル
    - [out] channels    カメラチャネル数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  channels がNULL
                                - 事前に fnFIE_xyqn_calc_table() または fnFIE_xyqn_load() が実行されていない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_xyqn_get_channels(hcalib, channels)

def fnFIE_xyqn_get_center(hcalib, ch_center) -> Any:
    r"""INT FVALGAPI fnFIE_xyqn_get_center( FHANDLE hcalib, DPNT_T* ch_center )
    補正計算用回転中心の取得

    Params:
    - [in]  hcalib      キャリブレーションシステムのハンドル
    - [out] ch_center   各チャネルの基準点座標配列
                            fnFIE_xyqn_calc_table() 実行時に指定したチャネル数分の領域が必要です。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  ch_center がNULL
                                - 事前に fnFIE_xyqn_calc_table() または fnFIE_xyqn_load() が実行されていない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def xyqn_get_center(hcalib, ch_center):
    r"""INT FVALGAPI fnFIE_xyqn_get_center( FHANDLE hcalib, DPNT_T* ch_center )
    補正計算用回転中心の取得

    Params:
    - [in]  hcalib      キャリブレーションシステムのハンドル
    - [out] ch_center   各チャネルの基準点座標配列
                            fnFIE_xyqn_calc_table() 実行時に指定したチャネル数分の領域が必要です。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  ch_center がNULL
                                - 事前に fnFIE_xyqn_calc_table() または fnFIE_xyqn_load() が実行されていない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_xyqn_get_center(hcalib, ch_center)

def fnFIE_xyqn_correction(hcalib, pos_tbl) -> Any:
    r"""INT FVALGAPI fnFIE_xyqn_correction( FHANDLE hcalib, const DPNT_T* pos_tbl )
    基準点座標の補正計算

    Params:
    - [in,out]  hcalib  キャリブレーションシステムのハンドル
    - [in]      pos_tbl 補正計算用座標値群を格納したテーブル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pos_tbl がNULL
                                - 事前に fnFIE_xyqn_calc_table() または fnFIE_xyqn_load() が実行されていない
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def xyqn_correction(hcalib, pos_tbl):
    r"""INT FVALGAPI fnFIE_xyqn_correction( FHANDLE hcalib, const DPNT_T* pos_tbl )
    基準点座標の補正計算

    Params:
    - [in,out]  hcalib  キャリブレーションシステムのハンドル
    - [in]      pos_tbl 補正計算用座標値群を格納したテーブル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pos_tbl がNULL
                                - 事前に fnFIE_xyqn_calc_table() または fnFIE_xyqn_load() が実行されていない
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_xyqn_correction(hcalib, pos_tbl)

def fnFIE_xyqn_trans_coord(hcalib, inp, out) -> Any:
    r"""INT FVALGAPI fnFIE_xyqn_trans_coord( FHANDLE hcalib, const DPNT_T* inp, DPNT_T* out )
    カメラ座標からＸＹθテーブル座標へ変換

    Params:
    - [in]  hcalib  キャリブレーションシステムのハンドル
    - [in]  inp     各カメラ座標配列（カメラ座標系）
    - [out] out     各カメラ座標配列（ＸＹθ座標系）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  inp または  out がNULL
                                - 事前に fnFIE_xyqn_calc_table() または fnFIE_xyqn_load() が実行されていない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def xyqn_trans_coord(hcalib, inp, out):
    r"""INT FVALGAPI fnFIE_xyqn_trans_coord( FHANDLE hcalib, const DPNT_T* inp, DPNT_T* out )
    カメラ座標からＸＹθテーブル座標へ変換

    Params:
    - [in]  hcalib  キャリブレーションシステムのハンドル
    - [in]  inp     各カメラ座標配列（カメラ座標系）
    - [out] out     各カメラ座標配列（ＸＹθ座標系）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  inp または  out がNULL
                                - 事前に fnFIE_xyqn_calc_table() または fnFIE_xyqn_load() が実行されていない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_xyqn_trans_coord(hcalib, inp, out)

def fnFIE_xyqn_trans_execute(hcalib, base_on_cam, mark_on_cam, xo, yo, qo, x, y, q) -> Any:
    r"""INT FVALGAPI fnFIE_xyqn_trans_execute( FHANDLE hcalib, const DPNT_T* base_on_cam, const DPNT_T* mark_on_cam, DOUBLE xo, DOUBLE yo, DOUBLE qo, DOUBLE* x, DOUBLE* y, DOUBLE* q )
    位置あわせをする際の位置・姿勢算出

    Params:
    - [in]  hcalib          キャリブレーションシステムのハンドル
    - [in]  base_on_cam     カメラ座標系上のｎチャネル分の基準座標配列
    - [in]  mark_on_cam     カメラ座標系上のｎチャネル分のマーク座標配列
    - [in]  xo              テーブル現在位置Ｘ座標(mm)
    - [in]  yo              テーブル現在位置Ｙ座標(mm)
    - [in]  qo              テーブル現在位置θ座標(rad)
    - [out] x               テーブル移動後Ｘ座標(mm)
    - [out] y               テーブル移動後Ｙ座標(mm)
    - [out] q               テーブル移動後θ座標(rad)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  base_on_cam ,  mark_on_cam ,  x ,  y または  q がNULL
                                - 事前に fnFIE_xyqn_calc_table() または fnFIE_xyqn_load() が実行されていない
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def xyqn_trans_execute(hcalib, base_on_cam, mark_on_cam, xo, yo, qo, x, y, q):
    r"""INT FVALGAPI fnFIE_xyqn_trans_execute( FHANDLE hcalib, const DPNT_T* base_on_cam, const DPNT_T* mark_on_cam, DOUBLE xo, DOUBLE yo, DOUBLE qo, DOUBLE* x, DOUBLE* y, DOUBLE* q )
    位置あわせをする際の位置・姿勢算出

    Params:
    - [in]  hcalib          キャリブレーションシステムのハンドル
    - [in]  base_on_cam     カメラ座標系上のｎチャネル分の基準座標配列
    - [in]  mark_on_cam     カメラ座標系上のｎチャネル分のマーク座標配列
    - [in]  xo              テーブル現在位置Ｘ座標(mm)
    - [in]  yo              テーブル現在位置Ｙ座標(mm)
    - [in]  qo              テーブル現在位置θ座標(rad)
    - [out] x               テーブル移動後Ｘ座標(mm)
    - [out] y               テーブル移動後Ｙ座標(mm)
    - [out] q               テーブル移動後θ座標(rad)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  base_on_cam ,  mark_on_cam ,  x ,  y または  q がNULL
                                - 事前に fnFIE_xyqn_calc_table() または fnFIE_xyqn_load() が実行されていない
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_xyqn_trans_execute(hcalib, base_on_cam, mark_on_cam, xo, yo, qo, x, y, q)

def fnFIE_xyqn_get_status(hcalib, status) -> Any:
    r"""INT FVALGAPI fnFIE_xyqn_get_status( FHANDLE hcalib, INT* status )
    キャリブレーション状態の確認

    Params:
    - [in]  hcalib  キャリブレーションシステムのハンドル
    - [out] status  キャリブレーションデータの状態
                    - TRUE  キャリブレーション済み
                    - FALSE 未キャリブレーション

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def xyqn_get_status(hcalib, status):
    r"""INT FVALGAPI fnFIE_xyqn_get_status( FHANDLE hcalib, INT* status )
    キャリブレーション状態の確認

    Params:
    - [in]  hcalib  キャリブレーションシステムのハンドル
    - [out] status  キャリブレーションデータの状態
                    - TRUE  キャリブレーション済み
                    - FALSE 未キャリブレーション

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_xyqn_get_status(hcalib, status)

def fnFIE_geotrans_calc_rotate_matrix(mat, rad, cx, cy) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_calc_rotate_matrix( FMATRIX* mat, DOUBLE rad, DOUBLE cx, DOUBLE cy )
    回転をする同次変換行列を作成

    Params:
    - [out] mat     同次変換行列
    - [in]  rad     回転角（ラジアン）
    - [in]  cx      回転中心ｘ座標
    - [in]  cy      回転中心ｙ座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_calc_rotate_matrix(mat, rad, cx=0.0, cy=0.0):
    r"""INT FVALGAPI fnFIE_geotrans_calc_rotate_matrix( FMATRIX* mat, DOUBLE rad, DOUBLE cx, DOUBLE cy )
    回転をする同次変換行列を作成

    Params:
    - [out] mat     同次変換行列
    - [in]  rad     回転角（ラジアン）
    - [in]  cx      回転中心ｘ座標
    - [in]  cy      回転中心ｙ座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_calc_rotate_matrix(mat, rad, cx, cy)

def fnFIE_geotrans_calc_shift_matrix(mat, dx, dy) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_calc_shift_matrix( FMATRIX* mat, DOUBLE dx, DOUBLE dy )
    平行移動する同次変換行列を作成

    Params:
    - [out] mat     同次変換行列
    - [in]  dx      ｘ方向移動量
    - [in]  dy      ｙ方向移動量

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_calc_shift_matrix(mat, dx, dy):
    r"""INT FVALGAPI fnFIE_geotrans_calc_shift_matrix( FMATRIX* mat, DOUBLE dx, DOUBLE dy )
    平行移動する同次変換行列を作成

    Params:
    - [out] mat     同次変換行列
    - [in]  dx      ｘ方向移動量
    - [in]  dy      ｙ方向移動量

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_calc_shift_matrix(mat, dx, dy)

def fnFIE_geotrans_calc_scale_matrix(mat, sx, sy) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_calc_scale_matrix( FMATRIX* mat, DOUBLE sx, DOUBLE sy )
    スケール変化する同次変換行列を作成

    Params:
    - [out] mat     同次変換行列
    - [in]  sx      ｘ方向倍率
    - [in]  sy      ｙ方向倍率

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_calc_scale_matrix(mat, sx, sy):
    r"""INT FVALGAPI fnFIE_geotrans_calc_scale_matrix( FMATRIX* mat, DOUBLE sx, DOUBLE sy )
    スケール変化する同次変換行列を作成

    Params:
    - [out] mat     同次変換行列
    - [in]  sx      ｘ方向倍率
    - [in]  sy      ｙ方向倍率

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_calc_scale_matrix(mat, sx, sy)

def fnFIE_geotrans_calc_xshear_matrix(mat, rad) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_calc_xshear_matrix( FMATRIX* mat, DOUBLE rad )
    せん断変形(ｘ方向)する同次変換行列を作成

    Params:
    - [out] mat     同次変換行列
    - [in]  rad     せん断角（ラジアン）

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_calc_xshear_matrix(mat, rad):
    r"""INT FVALGAPI fnFIE_geotrans_calc_xshear_matrix( FMATRIX* mat, DOUBLE rad )
    せん断変形(ｘ方向)する同次変換行列を作成

    Params:
    - [out] mat     同次変換行列
    - [in]  rad     せん断角（ラジアン）

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_calc_xshear_matrix(mat, rad)

def fnFIE_geotrans_calc_yshear_matrix(mat, rad) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_calc_yshear_matrix( FMATRIX* mat, DOUBLE rad )
    せん断変形(ｙ方向)する同次変換行列を作成

    Params:
    - [out] mat     同次変換行列
    - [in]  rad     せん断角（ラジアン）

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_calc_yshear_matrix(mat, rad):
    r"""INT FVALGAPI fnFIE_geotrans_calc_yshear_matrix( FMATRIX* mat, DOUBLE rad )
    せん断変形(ｙ方向)する同次変換行列を作成

    Params:
    - [out] mat     同次変換行列
    - [in]  rad     せん断角（ラジアン）

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_calc_yshear_matrix(mat, rad)

def fnFIE_geotrans_affine_point(src, dst, mat) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_affine_point( DPNT_T src, DPNT_T* dst, const FMATRIX* mat )
    点のアフィン変換

    Params:
    - [in]  src     入力点座標
    - [out] dst     出力点座標
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_affine_point(src, dst, mat):
    r"""INT FVALGAPI fnFIE_geotrans_affine_point( DPNT_T src, DPNT_T* dst, const FMATRIX* mat )
    点のアフィン変換

    Params:
    - [in]  src     入力点座標
    - [out] dst     出力点座標
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_affine_point(src, dst, mat)

def fnFIE_geotrans_affine_npoints(src, dst, num, mat) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_affine_npoints( const DPNT_T* src, DPNT_T* dst, INT num, const FMATRIX* mat )
    点群のアフィン変換

    Params:
    - [in]  src     入力点座標配列
    - [out] dst     出力点座標配列
    - [in]  num     入力点数
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_affine_npoints(src, dst, num, mat):
    r"""INT FVALGAPI fnFIE_geotrans_affine_npoints( const DPNT_T* src, DPNT_T* dst, INT num, const FMATRIX* mat )
    点群のアフィン変換

    Params:
    - [in]  src     入力点座標配列
    - [out] dst     出力点座標配列
    - [in]  num     入力点数
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_affine_npoints(src, dst, num, mat)

def fnFIE_geotrans_affine_line(src, dst, mat) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_affine_line( DLINE_T src, DLINE_T* dst, const FMATRIX* mat )
    直線のアフィン変換

    Params:
    - [in]  src     入力直線
    - [out] dst     出力直線
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_affine_line(src, dst, mat):
    r"""INT FVALGAPI fnFIE_geotrans_affine_line( DLINE_T src, DLINE_T* dst, const FMATRIX* mat )
    直線のアフィン変換

    Params:
    - [in]  src     入力直線
    - [out] dst     出力直線
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_affine_line(src, dst, mat)

def fnFIE_geotrans_affine_lineseg(src, dst, mat) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_affine_lineseg( DSGMT_T src, DSGMT_T* dst, const FMATRIX* mat )
    線分のアフィン変換

    Params:
    - [in]  src     入力線分
    - [out] dst     出力線分
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_affine_lineseg(src, dst, mat):
    r"""INT FVALGAPI fnFIE_geotrans_affine_lineseg( DSGMT_T src, DSGMT_T* dst, const FMATRIX* mat )
    線分のアフィン変換

    Params:
    - [in]  src     入力線分
    - [out] dst     出力線分
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_affine_lineseg(src, dst, mat)

def fnFIE_geotrans_perspective_point(src, dst, mat) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_perspective_point( DPNT_T src, DPNT_T* dst, const FMATRIX* mat )
    点の射影変換

    Params:
    - [in]  src     入力点座標
    - [out] dst     出力点座標
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_perspective_point(src, dst, mat):
    r"""INT FVALGAPI fnFIE_geotrans_perspective_point( DPNT_T src, DPNT_T* dst, const FMATRIX* mat )
    点の射影変換

    Params:
    - [in]  src     入力点座標
    - [out] dst     出力点座標
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_perspective_point(src, dst, mat)

def fnFIE_geotrans_perspective_npoints(src, dst, num, mat) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_perspective_npoints( const DPNT_T* src, DPNT_T* dst, INT num, const FMATRIX* mat )
    点群の射影変換

    Params:
    - [in]  src     入力点座標配列
    - [out] dst     出力点座標配列
    - [in]  num     入力点数
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_perspective_npoints(src, dst, num, mat):
    r"""INT FVALGAPI fnFIE_geotrans_perspective_npoints( const DPNT_T* src, DPNT_T* dst, INT num, const FMATRIX* mat )
    点群の射影変換

    Params:
    - [in]  src     入力点座標配列
    - [out] dst     出力点座標配列
    - [in]  num     入力点数
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_perspective_npoints(src, dst, num, mat)

def fnFIE_geotrans_perspective_line(src, dst, mat) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_perspective_line( DLINE_T src, DLINE_T* dst, const FMATRIX* mat )
    直線の射影変換

    Params:
    - [in]  src     入力点座標
    - [out] dst     出力点座標
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_perspective_line(src, dst, mat):
    r"""INT FVALGAPI fnFIE_geotrans_perspective_line( DLINE_T src, DLINE_T* dst, const FMATRIX* mat )
    直線の射影変換

    Params:
    - [in]  src     入力点座標
    - [out] dst     出力点座標
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_perspective_line(src, dst, mat)

def fnFIE_geotrans_perspective_lineseg(src, dst, mat) -> Any:
    r"""INT FVALGAPI fnFIE_geotrans_perspective_lineseg( DSGMT_T src, DSGMT_T* dst, const FMATRIX* mat )
    線分の射影変換

    Params:
    - [in]  src     入力線分
    - [out] dst     出力線分
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def geotrans_perspective_lineseg(src, dst, mat):
    r"""INT FVALGAPI fnFIE_geotrans_perspective_lineseg( DSGMT_T src, DSGMT_T* dst, const FMATRIX* mat )
    線分の射影変換

    Params:
    - [in]  src     入力線分
    - [out] dst     出力線分
    - [in]  mat     同次変換行列(3x3の正方行列)

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_geotrans_perspective_lineseg(src, dst, mat)

def fnFIE_neuro_create(layer_cond, layer_num) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_neuro_create( const F_NN_COND* layer_cond, INT layer_num )
    ニューラルネットワークの生成

    Params:
    - [in]  layer_cond  各階層毎の生成条件の配列
                             layer_num 分の要素を確保した配列です。
                        - (バイアス素子を除く)素子数(  elem_num )
                        - 応答関数の種類(  func_type )
                                - F_NN_LINEAR_FUNC：線形出力関数
                                - F_NN_SIGMOID_FUNC：シグモイド(ロジスティック)関数
                                - F_NN_TANH_FUNC：双曲線正接関数
                        - 応答関数のパラメータ(  func_param )
    - [in]  layer_num   階層数(  layer_cond の要素数 )

    Returns:
    -   正常に終了した場合は、ニューラルネットワークオブジェクトのハンドルを返します。
                ライセンスエラー、未初期化エラー、メモリ不足や不正なパラメータを与えた場合には、NULLを返します。
    """
    raise NotImplementedError

def neuro_create(layer_cond, layer_num):
    r"""FHANDLE FVALGAPI fnFIE_neuro_create( const F_NN_COND* layer_cond, INT layer_num )
    ニューラルネットワークの生成

    Params:
    - [in]  layer_cond  各階層毎の生成条件の配列
                             layer_num 分の要素を確保した配列です。
                        - (バイアス素子を除く)素子数(  elem_num )
                        - 応答関数の種類(  func_type )
                                - F_NN_LINEAR_FUNC：線形出力関数
                                - F_NN_SIGMOID_FUNC：シグモイド(ロジスティック)関数
                                - F_NN_TANH_FUNC：双曲線正接関数
                        - 応答関数のパラメータ(  func_param )
    - [in]  layer_num   階層数(  layer_cond の要素数 )

    Returns:
    -   正常に終了した場合は、ニューラルネットワークオブジェクトのハンドルを返します。
                ライセンスエラー、未初期化エラー、メモリ不足や不正なパラメータを与えた場合には、NULLを返します。
    """

    return _fie.fnFIE_neuro_create(layer_cond, layer_num)

def fnFIE_neuro_close(hneuro) -> Any:
    r"""void fnFIE_neuro_close( FHANDLE hneuro )
    ニューラルネットワークのクローズ

    Params:
    - [in]  hneuro  ニューラルネットワークオブジェクトのハンドル

    Returns:
    """
    raise NotImplementedError

def neuro_close(hneuro):
    r"""void fnFIE_neuro_close( FHANDLE hneuro )
    ニューラルネットワークのクローズ

    Params:
    - [in]  hneuro  ニューラルネットワークオブジェクトのハンドル

    Returns:
    """

    return _fie.fnFIE_neuro_close(hneuro)

def fnFIE_neuro_copy(hneuro) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_neuro_copy( FHANDLE hneuro )
    ニューラルネットワークのコピー

    Params:
    - [in]  hneuro      コピーするニューラルネットワークオブジェクトのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """
    raise NotImplementedError

def neuro_copy(hneuro):
    r"""FHANDLE FVALGAPI fnFIE_neuro_copy( FHANDLE hneuro )
    ニューラルネットワークのコピー

    Params:
    - [in]  hneuro      コピーするニューラルネットワークオブジェクトのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """

    return _fie.fnFIE_neuro_copy(hneuro)

def fnFIE_neuro_set_coeff(hneuro, epsilon, beta) -> Any:
    r"""INT FVALGAPI fnFIE_neuro_set_coeff( FHANDLE hneuro, DOUBLE epsilon, DOUBLE beta )
    ニューラルネットワークの結合負荷の修正時の各種係数の設定

    Params:
    - [in,out]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [in]      epsilon     結合荷重の修正時の学習係数ε(0.0〜1.0)
    - [in]      beta        結合荷重の修正時の忘却係数β(0.0〜1.0)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def neuro_set_coeff(hneuro, epsilon, beta):
    r"""INT FVALGAPI fnFIE_neuro_set_coeff( FHANDLE hneuro, DOUBLE epsilon, DOUBLE beta )
    ニューラルネットワークの結合負荷の修正時の各種係数の設定

    Params:
    - [in,out]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [in]      epsilon     結合荷重の修正時の学習係数ε(0.0〜1.0)
    - [in]      beta        結合荷重の修正時の忘却係数β(0.0〜1.0)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_neuro_set_coeff(hneuro, epsilon, beta)

def fnFIE_neuro_get_coeff(hneuro, epsilon, beta) -> Any:
    r"""INT FVALGAPI fnFIE_neuro_get_coeff( FHANDLE hneuro, DOUBLE* epsilon, DOUBLE* beta )
    ニューラルネットワークの結合荷重の修正時の各種係数の取得

    Params:
    - [in]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [out] epsilon     結合荷重の修正時の学習係数ε(0.0〜1.0)
    - [out] beta        結合荷重の修正時の忘却係数β(0.0〜1.0)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def neuro_get_coeff(hneuro, epsilon, beta):
    r"""INT FVALGAPI fnFIE_neuro_get_coeff( FHANDLE hneuro, DOUBLE* epsilon, DOUBLE* beta )
    ニューラルネットワークの結合荷重の修正時の各種係数の取得

    Params:
    - [in]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [out] epsilon     結合荷重の修正時の学習係数ε(0.0〜1.0)
    - [out] beta        結合荷重の修正時の忘却係数β(0.0〜1.0)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_neuro_get_coeff(hneuro, epsilon, beta)

def fnFIE_neuro_learning(hneuro, vect_inp, vect_tch, error) -> Any:
    r"""INT FVALGAPI fnFIE_neuro_learning( FHANDLE hneuro, const DOUBLE* vect_inp, const DOUBLE* vect_tch, DOUBLE* error )
    ニューラルネットワークの学習(確率的バックプロパゲーション法)

    Params:
    - [in,out]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [in]      vect_inp    入力ベクトル
    - [in]      vect_tch    教師ベクトル
    - [out]     error       教師ベクトルとの誤差

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def neuro_learning(hneuro, vect_inp, vect_tch, error):
    r"""INT FVALGAPI fnFIE_neuro_learning( FHANDLE hneuro, const DOUBLE* vect_inp, const DOUBLE* vect_tch, DOUBLE* error )
    ニューラルネットワークの学習(確率的バックプロパゲーション法)

    Params:
    - [in,out]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [in]      vect_inp    入力ベクトル
    - [in]      vect_tch    教師ベクトル
    - [out]     error       教師ベクトルとの誤差

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_neuro_learning(hneuro, vect_inp, vect_tch, error)

def fnFIE_neuro_recognition(hneuro, vect_inp, vect_out) -> Any:
    r"""INT FVALGAPI fnFIE_neuro_recognition( FHANDLE hneuro, const DOUBLE* vect_inp, DOUBLE* vect_out )
    ニューラルネットワークでの認識

    Params:
    - [in,out]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [in]      vect_inp    入力ベクトル
    - [out]     vect_out    出力ベクトル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def neuro_recognition(hneuro, vect_inp, vect_out):
    r"""INT FVALGAPI fnFIE_neuro_recognition( FHANDLE hneuro, const DOUBLE* vect_inp, DOUBLE* vect_out )
    ニューラルネットワークでの認識

    Params:
    - [in,out]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [in]      vect_inp    入力ベクトル
    - [out]     vect_out    出力ベクトル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_neuro_recognition(hneuro, vect_inp, vect_out)

def fnFIE_neuro_performance(hneuro, vect_inp, vect_tch, error) -> Any:
    r"""INT FVALGAPI fnFIE_neuro_performance( FHANDLE hneuro, const DOUBLE* vect_inp, const DOUBLE* vect_tch, DOUBLE* error )
    ニューラルネットワークの学習性能の取得

    Params:
    - [in,out]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [in]      vect_inp    入力ベクトル
    - [in]      vect_tch    教師ベクトル
    - [out]     error       教師ベクトルとの誤差

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def neuro_performance(hneuro, vect_inp, vect_tch, error):
    r"""INT FVALGAPI fnFIE_neuro_performance( FHANDLE hneuro, const DOUBLE* vect_inp, const DOUBLE* vect_tch, DOUBLE* error )
    ニューラルネットワークの学習性能の取得

    Params:
    - [in,out]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [in]      vect_inp    入力ベクトル
    - [in]      vect_tch    教師ベクトル
    - [out]     error       教師ベクトルとの誤差

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_neuro_performance(hneuro, vect_inp, vect_tch, error)

def fnFIE_neuro_get_count(hneuro, count) -> Any:
    r"""INT FVALGAPI fnFIE_neuro_get_count( FHANDLE hneuro, INT* count )
    ニューラルネットワークの学習回数の取得

    Params:
    - [in]  hneuro  ニューラルネットワークオブジェクトのハンドル
    - [out] count   学習回数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def neuro_get_count(hneuro, count):
    r"""INT FVALGAPI fnFIE_neuro_get_count( FHANDLE hneuro, INT* count )
    ニューラルネットワークの学習回数の取得

    Params:
    - [in]  hneuro  ニューラルネットワークオブジェクトのハンドル
    - [out] count   学習回数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_neuro_get_count(hneuro, count)

def fnFIE_neuro_get_layer(hneuro, layer_num) -> Any:
    r"""INT FVALGAPI fnFIE_neuro_get_layer( FHANDLE hneuro, INT* layer_num )
    ニューラルネットワークの階層数の取得

    Params:
    - [in]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [out] layer_num   階層数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def neuro_get_layer(hneuro, layer_num):
    r"""INT FVALGAPI fnFIE_neuro_get_layer( FHANDLE hneuro, INT* layer_num )
    ニューラルネットワークの階層数の取得

    Params:
    - [in]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [out] layer_num   階層数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_neuro_get_layer(hneuro, layer_num)

def fnFIE_neuro_get_neuron(hneuro, neuron_num) -> Any:
    r"""INT FVALGAPI fnFIE_neuro_get_neuron( FHANDLE hneuro, INT* neuron_num )
    ニューラルネットワークの各階層のニューロン数の取得

    Params:
    - [in]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [out] neuron_num  各階層のニュ−ロン数を保持する配列
                        - 階層数分の要素数を確保している必要があります

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def neuro_get_neuron(hneuro, neuron_num):
    r"""INT FVALGAPI fnFIE_neuro_get_neuron( FHANDLE hneuro, INT* neuron_num )
    ニューラルネットワークの各階層のニューロン数の取得

    Params:
    - [in]  hneuro      ニューラルネットワークオブジェクトのハンドル
    - [out] neuron_num  各階層のニュ−ロン数を保持する配列
                        - 階層数分の要素数を確保している必要があります

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_neuro_get_neuron(hneuro, neuron_num)

def fnFIE_ga_close(hga) -> Any:
    r"""void fnFIE_ga_close( FHANDLE hga )
    ＧＡのクローズ

    Params:
    - [in]  hga ＧＡのハンドル

    Returns:
    """
    raise NotImplementedError

def ga_close(hga):
    r"""void fnFIE_ga_close( FHANDLE hga )
    ＧＡのクローズ

    Params:
    - [in]  hga ＧＡのハンドル

    Returns:
    """

    return _fie.fnFIE_ga_close(hga)

def fnFIE_ga_copy(hga) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_ga_copy( FHANDLE hga )
    ＧＡのコピー

    Params:
    - [in]  hga コピーするＧＡのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """
    raise NotImplementedError

def ga_copy(hga):
    r"""FHANDLE FVALGAPI fnFIE_ga_copy( FHANDLE hga )
    ＧＡのコピー

    Params:
    - [in]  hga コピーするＧＡのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """

    return _fie.fnFIE_ga_copy(hga)

def fnFIE_ga_execute(hga, pick_num, chrom, fitness, generate) -> Any:
    r"""INT FVALGAPI fnFIE_ga_execute( FHANDLE hga, INT pick_num, VOID* chrom, DOUBLE* fitness, INT* generate )
    ＧＡの実行

    Params:
    - [in]  hga                 ＧＡのハンドル
    - [in]  pick_num            出力する染色体の個数(1以上)
    - [out] chrom               適応度の大きい順に並んだ染色体の配列です。
                                    「一遺伝子あたりのバイト数×一染色体あたりの遺伝子数×  pick_num 」分の領域が必要です。
                                    遺伝子の型により、以下の様に必要なサイズが変わります。
                                - 整数型( F_GA_INT_TYPE_GENE )         sizeof(INT)     × 一染色体あたりの遺伝子数×  pick_num
                                - 浮動小数点型( F_GA_FLOAT_TYPE_GENE )    sizeof(DOUBLE)  × 一染色体あたりの遺伝子数×  pick_num
                                - 順序型( F_GA_ORDER_TYPE_GENE )           sizeof(INT)     × 一染色体あたりの遺伝子数×  pick_num
    - [out] fitness             抽出した各染色体の適用度の配列。
                                     pick_num で指定した個数分の領域が必要です。
    - [out] generate            世代交代を行った回数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー
    """
    raise NotImplementedError

def ga_execute(hga, pick_num, chrom, fitness, generate):
    r"""INT FVALGAPI fnFIE_ga_execute( FHANDLE hga, INT pick_num, VOID* chrom, DOUBLE* fitness, INT* generate )
    ＧＡの実行

    Params:
    - [in]  hga                 ＧＡのハンドル
    - [in]  pick_num            出力する染色体の個数(1以上)
    - [out] chrom               適応度の大きい順に並んだ染色体の配列です。
                                    「一遺伝子あたりのバイト数×一染色体あたりの遺伝子数×  pick_num 」分の領域が必要です。
                                    遺伝子の型により、以下の様に必要なサイズが変わります。
                                - 整数型( F_GA_INT_TYPE_GENE )         sizeof(INT)     × 一染色体あたりの遺伝子数×  pick_num
                                - 浮動小数点型( F_GA_FLOAT_TYPE_GENE )    sizeof(DOUBLE)  × 一染色体あたりの遺伝子数×  pick_num
                                - 順序型( F_GA_ORDER_TYPE_GENE )           sizeof(INT)     × 一染色体あたりの遺伝子数×  pick_num
    - [out] fitness             抽出した各染色体の適用度の配列。
                                     pick_num で指定した個数分の領域が必要です。
    - [out] generate            世代交代を行った回数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー
    """

    return _fie.fnFIE_ga_execute(hga, pick_num, chrom, fitness, generate)

def fnFIE_fuzzy_open(rule_num, antec_cond, antec_num, concl_cond, concl_num) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_fuzzy_open( INT rule_num, const F_FUZZY_SPEC* antec_cond, INT antec_num, const F_FUZZY_SPEC* concl_cond, INT concl_num )
    ファジィ推論テーブルの生成

    Params:
    - [in] rule_num         ファジィルール数( [1,MAX_RULE_N=30] )
    - [in] antec_cond       前提条件の台集合生成条件配列
                                 antec_num で指定した前提個数分の条件を指定します
    - [in] antec_num        １ファジィルールあたりの前提条件の数( [1,MAX_ANTEC_N=5] )
    - [in] concl_cond       結論の台集合生成条件配列
                                 concl_num で指定した結論個数分の条件を指定します
    - [in] concl_num        １ファジィルールあたりの結論の数( [1,MAX_CONCL_N=2] )

    Returns:
    - 正常に終了した場合は、ファジィのハンドルを返します。
            ライセンスエラー、未初期化エラー、メモリ不足、またはパラメータ不正により異常終了した場合には、NULLを返します。
    """
    raise NotImplementedError

def fuzzy_open(rule_num, antec_cond, antec_num, concl_cond, concl_num):
    r"""FHANDLE FVALGAPI fnFIE_fuzzy_open( INT rule_num, const F_FUZZY_SPEC* antec_cond, INT antec_num, const F_FUZZY_SPEC* concl_cond, INT concl_num )
    ファジィ推論テーブルの生成

    Params:
    - [in] rule_num         ファジィルール数( [1,MAX_RULE_N=30] )
    - [in] antec_cond       前提条件の台集合生成条件配列
                                 antec_num で指定した前提個数分の条件を指定します
    - [in] antec_num        １ファジィルールあたりの前提条件の数( [1,MAX_ANTEC_N=5] )
    - [in] concl_cond       結論の台集合生成条件配列
                                 concl_num で指定した結論個数分の条件を指定します
    - [in] concl_num        １ファジィルールあたりの結論の数( [1,MAX_CONCL_N=2] )

    Returns:
    - 正常に終了した場合は、ファジィのハンドルを返します。
            ライセンスエラー、未初期化エラー、メモリ不足、またはパラメータ不正により異常終了した場合には、NULLを返します。
    """

    return _fie.fnFIE_fuzzy_open(rule_num, antec_cond, antec_num, concl_cond, concl_num)

def fnFIE_fuzzy_close(htbl) -> Any:
    r"""void fnFIE_fuzzy_close( FHANDLE htbl )
    ファジィ推論テーブルのクローズ

    Params:
    - [in]  htbl    ファジィ推論テーブルのハンドル

    Returns:
    """
    raise NotImplementedError

def fuzzy_close(htbl):
    r"""void fnFIE_fuzzy_close( FHANDLE htbl )
    ファジィ推論テーブルのクローズ

    Params:
    - [in]  htbl    ファジィ推論テーブルのハンドル

    Returns:
    """

    return _fie.fnFIE_fuzzy_close(htbl)

def fnFIE_fuzzy_copy(htbl) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_fuzzy_copy( FHANDLE htbl )
    ファジィ推論テーブルのコピー

    Params:
    - [in] htbl ファジィ推論テーブルのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """
    raise NotImplementedError

def fuzzy_copy(htbl):
    r"""FHANDLE FVALGAPI fnFIE_fuzzy_copy( FHANDLE htbl )
    ファジィ推論テーブルのコピー

    Params:
    - [in] htbl ファジィ推論テーブルのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """

    return _fie.fnFIE_fuzzy_copy(htbl)

def fnFIE_fuzzy_clear_rule(htbl, rule_no) -> Any:
    r"""INT FVALGAPI fnFIE_fuzzy_clear_rule( FHANDLE htbl, INT rule_no )
    プロダクションルールのクリア（メンバシップ関数のクリア）

    Params:
    - [in] htbl     ファジィ推論テーブルのハンドル
    - [in] rule_no  ファジィルール番号( [0,オープン時に指定したルール数-1] )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fuzzy_clear_rule(htbl, rule_no):
    r"""INT FVALGAPI fnFIE_fuzzy_clear_rule( FHANDLE htbl, INT rule_no )
    プロダクションルールのクリア（メンバシップ関数のクリア）

    Params:
    - [in] htbl     ファジィ推論テーブルのハンドル
    - [in] rule_no  ファジィルール番号( [0,オープン時に指定したルール数-1] )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fuzzy_clear_rule(htbl, rule_no)

def fnFIE_fuzzy_generate_rule(htbl, rule_no, antec_memb, concl_memb) -> Any:
    r"""INT FVALGAPI fnFIE_fuzzy_generate_rule( FHANDLE htbl, INT rule_no, const F_FUZZY_BASE* antec_memb, const F_FUZZY_BASE* concl_memb )
    ファジィルールの作成(メンバシップ関数の生成)

    Params:
    - [in,out]  htbl            ファジィ推論テーブルのハンドル
    - [in]      rule_no         生成したいファジィルールの番号( [0,オープン時に指定したルール数-1] )
    - [in]      antec_memb      前提条件のメンバシップ関数生成用基準値配列
                                    fnFIE_fuzzy_open() 実行時に指定した前提条件数(  antec_num )分の設定値が必要です。
    - [in]      concl_memb      結論のメンバシップ関数生成用パラメータの配列
                                    fnFIE_fuzzy_open() 実行時に指定した結論数(  concl_num )分の設定値が必要です。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fuzzy_generate_rule(htbl, rule_no, antec_memb, concl_memb):
    r"""INT FVALGAPI fnFIE_fuzzy_generate_rule( FHANDLE htbl, INT rule_no, const F_FUZZY_BASE* antec_memb, const F_FUZZY_BASE* concl_memb )
    ファジィルールの作成(メンバシップ関数の生成)

    Params:
    - [in,out]  htbl            ファジィ推論テーブルのハンドル
    - [in]      rule_no         生成したいファジィルールの番号( [0,オープン時に指定したルール数-1] )
    - [in]      antec_memb      前提条件のメンバシップ関数生成用基準値配列
                                    fnFIE_fuzzy_open() 実行時に指定した前提条件数(  antec_num )分の設定値が必要です。
    - [in]      concl_memb      結論のメンバシップ関数生成用パラメータの配列
                                    fnFIE_fuzzy_open() 実行時に指定した結論数(  concl_num )分の設定値が必要です。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fuzzy_generate_rule(htbl, rule_no, antec_memb, concl_memb)

def fnFIE_fuzzy_inference(htbl, inp, out) -> Any:
    r"""INT FVALGAPI fnFIE_fuzzy_inference( FHANDLE htbl, const F_FUZZY_BASE* inp, DOUBLE* out )
    ファジィの実行(ルールと観測情報を使っての推論)

    Params:
    - [in]  htbl    ファジィ推論テーブルのハンドル
    - [in]  inp     観測情報のメンバシップ関数の生成用基準値配列
                        fnFIE_fuzzy_open() 実行時に指定した基準値の数分の設定(配列要素数)が必要です
    - [out] out     ファジィ推論結果配列
                        fnFIE_fuzzy_open() 実行時に指定した結論数(  concl_num )分の配列要素が必要です

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fuzzy_inference(htbl, inp, out):
    r"""INT FVALGAPI fnFIE_fuzzy_inference( FHANDLE htbl, const F_FUZZY_BASE* inp, DOUBLE* out )
    ファジィの実行(ルールと観測情報を使っての推論)

    Params:
    - [in]  htbl    ファジィ推論テーブルのハンドル
    - [in]  inp     観測情報のメンバシップ関数の生成用基準値配列
                        fnFIE_fuzzy_open() 実行時に指定した基準値の数分の設定(配列要素数)が必要です
    - [out] out     ファジィ推論結果配列
                        fnFIE_fuzzy_open() 実行時に指定した結論数(  concl_num )分の配列要素が必要です

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fuzzy_inference(htbl, inp, out)

def fnFIE_histogram_equalization(hsrc, src_bpp, hdst, dst_bpp) -> Any:
    r"""INT FVALGAPI fnFIE_histogram_equalization( const FHANDLE hsrc, UINT src_bpp, FHANDLE hdst, UINT dst_bpp )
    ヒストグラムの平坦化

    Params:
    - [in]  hsrc        入力画像( type : uc8, us16 )
    - [in]  src_bpp     入力画像の色深度（BPP）
                        - 2<=  src_bpp <= 8（type : uc8）
                        - 2<=  src_bpp <= 16（type : us16）
    - [out] hdst        出力画像( type : uc8, us16 )
    - [in]  dst_bpp     出力画像の色深度（BPP）
                        - 2<=  dst_bpp <= 8（type : uc8）
                        - 2<=  dst_bpp <= 16（type : us16）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def histogram_equalization(hsrc, src_bpp, hdst, dst_bpp):
    r"""INT FVALGAPI fnFIE_histogram_equalization( const FHANDLE hsrc, UINT src_bpp, FHANDLE hdst, UINT dst_bpp )
    ヒストグラムの平坦化

    Params:
    - [in]  hsrc        入力画像( type : uc8, us16 )
    - [in]  src_bpp     入力画像の色深度（BPP）
                        - 2<=  src_bpp <= 8（type : uc8）
                        - 2<=  src_bpp <= 16（type : us16）
    - [out] hdst        出力画像( type : uc8, us16 )
    - [in]  dst_bpp     出力画像の色深度（BPP）
                        - 2<=  dst_bpp <= 8（type : uc8）
                        - 2<=  dst_bpp <= 16（type : us16）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_histogram_equalization(hsrc, src_bpp, hdst, dst_bpp)

def fnFIE_histogram_normalization(hsrc, src_bpp, hdst, dst_bpp, min_thr, min_den, max_den) -> Any:
    r"""INT FVALGAPI fnFIE_histogram_normalization( const FHANDLE hsrc, UINT src_bpp, FHANDLE hdst, UINT dst_bpp, INT min_thr, INT min_den, INT max_den )
    ヒストグラムの正規化

    Params:
    - [in]  hsrc        入力画像( type : uc8, us16 )
    - [in]  src_bpp     入力画像の色深度（BPP）
                        - 2<=  src_bpp <= 8（type : uc8）
                        - 2<=  src_bpp <= 16（type : us16）
    - [out] hdst        出力画像( type : uc8, us16 )
    - [in]  dst_bpp     出力画像の色深度（BPP）
                        - 2<=  dst_bpp <= 8（type : uc8）
                        - 2<=  dst_bpp <= 16（type : us16）
    - [in]  min_thr     入力画像の最小ヒストグラム頻度値( 0以上 )
    - [in]  min_den     入力画像の最小濃度値
    - [in]  max_den     入力画像の最大濃度値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def histogram_normalization(hsrc, src_bpp, hdst, dst_bpp, min_thr=0, min_den=0, max_den=255):
    r"""INT FVALGAPI fnFIE_histogram_normalization( const FHANDLE hsrc, UINT src_bpp, FHANDLE hdst, UINT dst_bpp, INT min_thr, INT min_den, INT max_den )
    ヒストグラムの正規化

    Params:
    - [in]  hsrc        入力画像( type : uc8, us16 )
    - [in]  src_bpp     入力画像の色深度（BPP）
                        - 2<=  src_bpp <= 8（type : uc8）
                        - 2<=  src_bpp <= 16（type : us16）
    - [out] hdst        出力画像( type : uc8, us16 )
    - [in]  dst_bpp     出力画像の色深度（BPP）
                        - 2<=  dst_bpp <= 8（type : uc8）
                        - 2<=  dst_bpp <= 16（type : us16）
    - [in]  min_thr     入力画像の最小ヒストグラム頻度値( 0以上 )
    - [in]  min_den     入力画像の最小濃度値
    - [in]  max_den     入力画像の最大濃度値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_histogram_normalization(hsrc, src_bpp, hdst, dst_bpp, min_thr, min_den, max_den)

def fnFIE_texture_first_order_statistics(hsrc, ave, sgm2, skewness, kurtosis) -> Any:
    r"""INT FVALGAPI fnFIE_texture_first_order_statistics( FHANDLE hsrc, DOUBLE* ave, DOUBLE* sgm2, DOUBLE* skewness, DOUBLE* kurtosis )
    濃淡ヒストグラムの算出

    Params:
    - [in]  hsrc        入力画像( type: uc8, us16 / ch : 1 )
    - [out] ave         平均値(μ)
    - [out] sgm2        分散($\sigma^{2}$)
    - [out] skewness    歪度(Skewness)
    - [out] kurtosis    尖度(Kurtosis)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  ave,  sgm2,  skewness,  kurtosis, すべてがNULL
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def texture_first_order_statistics(hsrc, ave=None, sgm2=None, skewness=None, kurtosis=None):
    r"""INT FVALGAPI fnFIE_texture_first_order_statistics( FHANDLE hsrc, DOUBLE* ave, DOUBLE* sgm2, DOUBLE* skewness, DOUBLE* kurtosis )
    濃淡ヒストグラムの算出

    Params:
    - [in]  hsrc        入力画像( type: uc8, us16 / ch : 1 )
    - [out] ave         平均値(μ)
    - [out] sgm2        分散($\sigma^{2}$)
    - [out] skewness    歪度(Skewness)
    - [out] kurtosis    尖度(Kurtosis)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  ave,  sgm2,  skewness,  kurtosis, すべてがNULL
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_texture_first_order_statistics(hsrc, ave, sgm2, skewness, kurtosis)

def fnFIE_texture_coocurrence_matrix(hsrc, dx, dy, gray_level, mat) -> Any:
    r"""INT FVALGAPI fnFIE_texture_coocurrence_matrix( FHANDLE hsrc, INT dx, INT dy, INT gray_level, FMATRIX* mat )
    同時生起行列の算出

    Params:
    - [in]  hsrc        入力画像( type : uc8, us16 / ch : 1 )
                        - 幅、および高さは２以上
    - [in]  dx          水平方向パラメータ
    - [in]  dy          垂直方向パラメータ
    - [in]  gray_level  入力画像の階調数（１以上）
    - [out] mat         同時生起行列
                        -  mat->row ==  mat->col ==  gray_level
                        - 1 <  mat->row < 16384 かつ 1 <  mat->col < 16384

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
                            - |  dx | >= width または、 |  dy | >= height
                            -  gray_level が１未満
                            - 不正な  mat
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def texture_coocurrence_matrix(hsrc, dx, dy, gray_level, mat):
    r"""INT FVALGAPI fnFIE_texture_coocurrence_matrix( FHANDLE hsrc, INT dx, INT dy, INT gray_level, FMATRIX* mat )
    同時生起行列の算出

    Params:
    - [in]  hsrc        入力画像( type : uc8, us16 / ch : 1 )
                        - 幅、および高さは２以上
    - [in]  dx          水平方向パラメータ
    - [in]  dy          垂直方向パラメータ
    - [in]  gray_level  入力画像の階調数（１以上）
    - [out] mat         同時生起行列
                        -  mat->row ==  mat->col ==  gray_level
                        - 1 <  mat->row < 16384 かつ 1 <  mat->col < 16384

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
                            - |  dx | >= width または、 |  dy | >= height
                            -  gray_level が１未満
                            - 不正な  mat
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_texture_coocurrence_matrix(hsrc, dx, dy, gray_level, mat)

def fnFIE_texture_calc_gcm_entropy(mat, entropy) -> Any:
    r"""INT FVALGAPI fnFIE_texture_calc_gcm_entropy( const FMATRIX* mat, DOUBLE* entropy )
    同時生起行列を用いたエントロピーの算出

    Params:
    - [in]  mat         同時生起行列
                        -  mat->row ==  mat->col
                        - 0 <  mat->row < 16384 かつ 0 <  mat->col < 16384
                        -  mat->row を入力画像の階調数とする
    - [out] entropy     エントロピー

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def texture_calc_gcm_entropy(mat, entropy):
    r"""INT FVALGAPI fnFIE_texture_calc_gcm_entropy( const FMATRIX* mat, DOUBLE* entropy )
    同時生起行列を用いたエントロピーの算出

    Params:
    - [in]  mat         同時生起行列
                        -  mat->row ==  mat->col
                        - 0 <  mat->row < 16384 かつ 0 <  mat->col < 16384
                        -  mat->row を入力画像の階調数とする
    - [out] entropy     エントロピー

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_texture_calc_gcm_entropy(mat, entropy)

def fnFIE_texture_calc_gcm_energy(mat, energy) -> Any:
    r"""INT FVALGAPI fnFIE_texture_calc_gcm_energy( const FMATRIX* mat, DOUBLE* energy )
    同時生起行列を用いたエネルギーの算出

    Params:
    - [in]  mat         同時生起行列
                        -  mat->row ==  mat->col
                        - 0 <  mat->row < 16384 かつ 0 <  mat->col < 16384
                        -  mat->row を入力画像の階調数とする
    - [out] energy      エネルギー

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def texture_calc_gcm_energy(mat, energy):
    r"""INT FVALGAPI fnFIE_texture_calc_gcm_energy( const FMATRIX* mat, DOUBLE* energy )
    同時生起行列を用いたエネルギーの算出

    Params:
    - [in]  mat         同時生起行列
                        -  mat->row ==  mat->col
                        - 0 <  mat->row < 16384 かつ 0 <  mat->col < 16384
                        -  mat->row を入力画像の階調数とする
    - [out] energy      エネルギー

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_texture_calc_gcm_energy(mat, energy)

def fnFIE_texture_calc_gcm_inertia(mat, inertia) -> Any:
    r"""INT FVALGAPI fnFIE_texture_calc_gcm_inertia( const FMATRIX* mat, DOUBLE* inertia )
    同時生起行列を用いた慣性の算出

    Params:
    - [in]  mat         同時生起行列
                        -  mat->row ==  mat->col
                        - 0 <  mat->row < 16384 かつ 0 <  mat->col < 16384
                        -  mat->row を入力画像の階調数とする
    - [out] inertia     慣性

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def texture_calc_gcm_inertia(mat, inertia):
    r"""INT FVALGAPI fnFIE_texture_calc_gcm_inertia( const FMATRIX* mat, DOUBLE* inertia )
    同時生起行列を用いた慣性の算出

    Params:
    - [in]  mat         同時生起行列
                        -  mat->row ==  mat->col
                        - 0 <  mat->row < 16384 かつ 0 <  mat->col < 16384
                        -  mat->row を入力画像の階調数とする
    - [out] inertia     慣性

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_texture_calc_gcm_inertia(mat, inertia)

def fnFIE_texture_calc_gcm_local_homogeneity(mat, lh) -> Any:
    r"""INT FVALGAPI fnFIE_texture_calc_gcm_local_homogeneity( const FMATRIX* mat, DOUBLE* lh )
    同時生起行列を用いた局所一様性の算出

    Params:
    - [in]  mat     同時生起行列
                    -  mat->row ==  mat->col
                    - 0 <  mat->row < 16384 かつ 0 <  mat->col < 16384
                    -  mat->row を入力画像の階調数とする
    - [out] lh      局所一様性

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def texture_calc_gcm_local_homogeneity(mat, lh):
    r"""INT FVALGAPI fnFIE_texture_calc_gcm_local_homogeneity( const FMATRIX* mat, DOUBLE* lh )
    同時生起行列を用いた局所一様性の算出

    Params:
    - [in]  mat     同時生起行列
                    -  mat->row ==  mat->col
                    - 0 <  mat->row < 16384 かつ 0 <  mat->col < 16384
                    -  mat->row を入力画像の階調数とする
    - [out] lh      局所一様性

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_texture_calc_gcm_local_homogeneity(mat, lh)

def fnFIE_bfilter(hsrc, hdst, color, xdot, ydot, direct) -> Any:
    r"""INT FVALGAPI fnFIE_bfilter( FHANDLE hsrc, FHANDLE hdst, INT color, INT xdot, INT ydot, enum f_direction direct )
    ２値画像ノイズ除去フィルタ

    Params:
    - [in]  hsrc    入力画像( type : bin / ch : 1 )
    - [out] hdst    出力画像( type : bin / ch : 1 )
    - [in]  color   対象色
                    - 0 黒
                    - 1 白
                    - 2 白黒両方
    - [in]  xdot    水平除去画素数（１以上）
    - [in]  ydot    垂直除去画素数（１以上）
    - [in]  direct  方向
                    - F_DIRECT_VERT_HORIZ（垂直→水平）
                    - F_DIRECT_HORIZ_VERT（水平→垂直）
                    - F_DIRECT_VERT（垂直）
                    - F_DIRECT_HORIZ（水平）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def bfilter(hsrc, hdst, color=2, xdot=1, ydot=1, direct=F_DIRECT_VERT_HORIZ):
    r"""INT FVALGAPI fnFIE_bfilter( FHANDLE hsrc, FHANDLE hdst, INT color, INT xdot, INT ydot, enum f_direction direct )
    ２値画像ノイズ除去フィルタ

    Params:
    - [in]  hsrc    入力画像( type : bin / ch : 1 )
    - [out] hdst    出力画像( type : bin / ch : 1 )
    - [in]  color   対象色
                    - 0 黒
                    - 1 白
                    - 2 白黒両方
    - [in]  xdot    水平除去画素数（１以上）
    - [in]  ydot    垂直除去画素数（１以上）
    - [in]  direct  方向
                    - F_DIRECT_VERT_HORIZ（垂直→水平）
                    - F_DIRECT_HORIZ_VERT（水平→垂直）
                    - F_DIRECT_VERT（垂直）
                    - F_DIRECT_HORIZ（水平）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_bfilter(hsrc, hdst, color, xdot, ydot, direct)

def fnFIE_prewitt(hsrc, hdst, calc_mode, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_prewitt( FHANDLE hsrc, FHANDLE hdst, enum f_filter_mode calc_mode, INT border_mode, DOUBLE border_value )
    prewitt フィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル( type: uc8, s16, us16, double )
    - [out] hdst         出力先画像ハンドル( type: uc8, s16, us16, double )
    - [in]  calc_mode    prewittの計算モード。下記のいずれかを指定。
                            - F_FILTER_X_MODE    Ｘ方向微分
                            - F_FILTER_Y_MODE    Ｙ方向微分
                            - F_FILTER_XY_MODE   ＸＹ方向微分（絶対値和）
                            - F_FILTER_SQRT_MODE ＸＹ方向微分（ユークリッド距離）
    - [in]  border_mode  ボーダーコピーモード。下記のいずれかを指定。
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode が F_BORDER_VALUE の場合のみ使用されます。
                             その他のボーダーモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def prewitt(hsrc, hdst, calc_mode=F_FILTER_SQRT_MODE, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_prewitt( FHANDLE hsrc, FHANDLE hdst, enum f_filter_mode calc_mode, INT border_mode, DOUBLE border_value )
    prewitt フィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル( type: uc8, s16, us16, double )
    - [out] hdst         出力先画像ハンドル( type: uc8, s16, us16, double )
    - [in]  calc_mode    prewittの計算モード。下記のいずれかを指定。
                            - F_FILTER_X_MODE    Ｘ方向微分
                            - F_FILTER_Y_MODE    Ｙ方向微分
                            - F_FILTER_XY_MODE   ＸＹ方向微分（絶対値和）
                            - F_FILTER_SQRT_MODE ＸＹ方向微分（ユークリッド距離）
    - [in]  border_mode  ボーダーコピーモード。下記のいずれかを指定。
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode が F_BORDER_VALUE の場合のみ使用されます。
                             その他のボーダーモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_prewitt(hsrc, hdst, calc_mode, border_mode, border_value)

def fnFIE_sharp(hsrc, hdst, border_mode, border_value) -> Any:
    r"""INT FVALGAPI fnFIE_sharp( FHANDLE hsrc, FHANDLE hdst, INT border_mode, DOUBLE border_value )
    鮮鋭化フィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル( type: uc8, s16, us16, double )
    - [out] hdst         出力先画像ハンドル( type: uc8, s16, us16, double )
    - [in]  border_mode  ボーダーコピーモード。下記のいずれかを指定。
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode が F_BORDER_VALUE の場合のみ使用されます。
                             その他のコピーモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def sharp(hsrc, hdst, border_mode=F_BORDER_CONTINUOUS, border_value=0):
    r"""INT FVALGAPI fnFIE_sharp( FHANDLE hsrc, FHANDLE hdst, INT border_mode, DOUBLE border_value )
    鮮鋭化フィルタ

    Params:
    - [in]  hsrc         入力画像ハンドル( type: uc8, s16, us16, double )
    - [out] hdst         出力先画像ハンドル( type: uc8, s16, us16, double )
    - [in]  border_mode  ボーダーコピーモード。下記のいずれかを指定。
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  border_value ボーダー濃度値。
                              border_mode が F_BORDER_VALUE の場合のみ使用されます。
                             その他のコピーモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_sharp(hsrc, hdst, border_mode, border_value)

def fnFIE_any_cross(hsrc, hdst, neib, bias, color, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_any_cross( FHANDLE hsrc, FHANDLE hdst, INT neib, DOUBLE bias, DOUBLE color, INT border_mode, DOUBLE value )
    任意値クロスフィルタ

    Params:
    - [in]  hsrc            入力画像(type:uc8,s16,us16,double / ch:1)
    - [out] hdst            出力画像(type:bin,uc8 / ch:1)
    - [in]  neib            ４近傍/８近傍の指定。 4:４近傍  8:８近傍
    - [in]  bias            バイアス(０とみなす値)
    - [in]  color           エッジの際に入れる値
                                 hdst の画素タイプが F_IMG_BIN の場合は無視されます
    - [in]  border_mode     ボーダーモード。下記のいずれかを指定
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  value           ボーダー濃度値
                                 border_mode が F_BORDER_VALUEの場合のみ使用されます。
                                その他のボーダーモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def any_cross(hsrc, hdst, neib=4, bias=0, color=255, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_any_cross( FHANDLE hsrc, FHANDLE hdst, INT neib, DOUBLE bias, DOUBLE color, INT border_mode, DOUBLE value )
    任意値クロスフィルタ

    Params:
    - [in]  hsrc            入力画像(type:uc8,s16,us16,double / ch:1)
    - [out] hdst            出力画像(type:bin,uc8 / ch:1)
    - [in]  neib            ４近傍/８近傍の指定。 4:４近傍  8:８近傍
    - [in]  bias            バイアス(０とみなす値)
    - [in]  color           エッジの際に入れる値
                                 hdst の画素タイプが F_IMG_BIN の場合は無視されます
    - [in]  border_mode     ボーダーモード。下記のいずれかを指定
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  value           ボーダー濃度値
                                 border_mode が F_BORDER_VALUEの場合のみ使用されます。
                                その他のボーダーモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_any_cross(hsrc, hdst, neib, bias, color, border_mode, value)

def fnFIE_zero_cross(hsrc, hdst, neib, color, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_zero_cross( FHANDLE hsrc, FHANDLE hdst, INT neib, DOUBLE color, INT border_mode, DOUBLE value )
    ゼロクロスフィルタ

    Params:
    - [in]  hsrc            入力画像(type:s16,double / ch:1)
    - [out] hdst            出力画像(type:bin,uc8 / ch:1)
    - [in]  neib            ４近傍/８近傍の指定。 4:４近傍  8:８近傍
    - [in]  color           エッジの際に入れる値
                                 hdst の画素タイプが F_IMG_BIN の場合は無視されます
    - [in]  border_mode     ボーダーモード。下記のいずれかを指定
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  value           ボーダー濃度値
                                 border_mode が F_BORDER_VALUE の場合のみ使用されます。
                                その他のボーダーモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def zero_cross(hsrc, hdst, neib=4, color=255, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_zero_cross( FHANDLE hsrc, FHANDLE hdst, INT neib, DOUBLE color, INT border_mode, DOUBLE value )
    ゼロクロスフィルタ

    Params:
    - [in]  hsrc            入力画像(type:s16,double / ch:1)
    - [out] hdst            出力画像(type:bin,uc8 / ch:1)
    - [in]  neib            ４近傍/８近傍の指定。 4:４近傍  8:８近傍
    - [in]  color           エッジの際に入れる値
                                 hdst の画素タイプが F_IMG_BIN の場合は無視されます
    - [in]  border_mode     ボーダーモード。下記のいずれかを指定
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  value           ボーダー濃度値
                                 border_mode が F_BORDER_VALUE の場合のみ使用されます。
                                その他のボーダーモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_zero_cross(hsrc, hdst, neib, color, border_mode, value)

def fnFIE_any_cross_threshold(hsrc, hdst, neib, bias, color, threshold, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_any_cross_threshold( FHANDLE hsrc, FHANDLE hdst, INT neib, DOUBLE bias, DOUBLE color, DOUBLE threshold, INT border_mode, DOUBLE value )
    閾値あり任意値クロスフィルタ

    Params:
    - [in]  hsrc            入力画像(type:uc8,s16,us16,double / ch:1)
    - [out] hdst            出力画像(type:bin,uc8 / ch:1)
    - [in]  neib            ４近傍/８近傍の指定。 4:４近傍  8:８近傍
    - [in]  bias            バイアス(０とみなす値)
    - [in]  color           エッジの際に入れる値
                                 hdst の画素タイプが F_IMG_BIN の場合は無視されます
    - [in]  threshold       変化量のための閾値(０以上)
                                変化量が閾値以上の場合にエッジとみなします
    - [in]  border_mode     ボーダーモード。下記のいずれかを指定
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  value           ボーダー濃度値
                                 border_mode が F_BORDER_VALUEの場合のみ使用されます。
                                その他のボーダーモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def any_cross_threshold(hsrc, hdst, neib=4, bias=0, color=255, threshold=0, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_any_cross_threshold( FHANDLE hsrc, FHANDLE hdst, INT neib, DOUBLE bias, DOUBLE color, DOUBLE threshold, INT border_mode, DOUBLE value )
    閾値あり任意値クロスフィルタ

    Params:
    - [in]  hsrc            入力画像(type:uc8,s16,us16,double / ch:1)
    - [out] hdst            出力画像(type:bin,uc8 / ch:1)
    - [in]  neib            ４近傍/８近傍の指定。 4:４近傍  8:８近傍
    - [in]  bias            バイアス(０とみなす値)
    - [in]  color           エッジの際に入れる値
                                 hdst の画素タイプが F_IMG_BIN の場合は無視されます
    - [in]  threshold       変化量のための閾値(０以上)
                                変化量が閾値以上の場合にエッジとみなします
    - [in]  border_mode     ボーダーモード。下記のいずれかを指定
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  value           ボーダー濃度値
                                 border_mode が F_BORDER_VALUEの場合のみ使用されます。
                                その他のボーダーモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_any_cross_threshold(hsrc, hdst, neib, bias, color, threshold, border_mode, value)

def fnFIE_zero_cross_threshold(hsrc, hdst, neib, color, threshold, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_zero_cross_threshold( FHANDLE hsrc, FHANDLE hdst, INT neib, DOUBLE color, DOUBLE threshold, INT border_mode, DOUBLE value )
    閾値ありゼロクロスフィルタ

    Params:
    - [in]  hsrc            入力画像(type:s16,double / ch:1)
    - [out] hdst            出力画像(type:bin,uc8 / ch:1)
    - [in]  neib            ４近傍/８近傍の指定。 4:４近傍  8:８近傍
    - [in]  color           エッジの際に入れる値
                                 hdst の画素タイプが F_IMG_BIN の場合は無視されます
    - [in]  threshold       変化量のための閾値(０以上)
                                変化量が閾値以上の場合にエッジとみなします
    - [in]  border_mode     ボーダーモード。下記のいずれかを指定
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  value           ボーダー濃度値
                                 border_mode が F_BORDER_VALUE の場合のみ使用されます。
                                その他のボーダーモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def zero_cross_threshold(hsrc, hdst, neib=4, color=255, threshold=0, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_zero_cross_threshold( FHANDLE hsrc, FHANDLE hdst, INT neib, DOUBLE color, DOUBLE threshold, INT border_mode, DOUBLE value )
    閾値ありゼロクロスフィルタ

    Params:
    - [in]  hsrc            入力画像(type:s16,double / ch:1)
    - [out] hdst            出力画像(type:bin,uc8 / ch:1)
    - [in]  neib            ４近傍/８近傍の指定。 4:４近傍  8:８近傍
    - [in]  color           エッジの際に入れる値
                                 hdst の画素タイプが F_IMG_BIN の場合は無視されます
    - [in]  threshold       変化量のための閾値(０以上)
                                変化量が閾値以上の場合にエッジとみなします
    - [in]  border_mode     ボーダーモード。下記のいずれかを指定
                            - F_BORDER_NONE        ボーダー部分は処理しない
                            - F_BORDER_ZERO        ０埋めモード
                            - F_BORDER_VALUE       一定値モード
                            - F_BORDER_CONTINUOUS  端延長モード
                            - F_BORDER_REPEAT      繰り返しモード
                            - F_BORDER_MIRROR1     反転モード１
                            - F_BORDER_MIRROR2     反転モード２
    - [in]  value           ボーダー濃度値
                                 border_mode が F_BORDER_VALUE の場合のみ使用されます。
                                その他のボーダーモードの場合は、この値は無視されます。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_zero_cross_threshold(hsrc, hdst, neib, color, threshold, border_mode, value)

def fnFIE_hough_lines_open(stq, edq, sx, sy, ex, ey, exerr) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_hough_lines_open( INT stq, INT edq, INT sx, INT sy, INT ex, INT ey, INT* exerr )
    直線検出ハフライブラリのオープン

    Params:
    - [in]  stq     検出する直線の法線方向の角度の範囲の始値(-360〜360, 単位：度)
    - [in]  edq     検出する直線の法線方向の角度の範囲の終値(0〜360, 単位：度)
    - [in]  sx      投票するエッジが存在する領域の左上Ｘ座標
    - [in]  sy      投票するエッジが存在する領域の左上Ｙ座標
    - [in]  ex      投票するエッジが存在する領域の右下Ｘ座標
    - [in]  ey      投票するエッジが存在する領域の右下Ｙ座標
    - [out] exerr   エラーコード。エラーコードを受け取る必要の無い場合は、NULLを指定します。

    Returns:
    - 正常にオープンできた場合は、直線ハフ構造体のハンドルを返します。
            パラメータエラーもしくはメモリ不足の場合は、NULLを返します。
    - *exerr==F_ERR_NONE                正常終了
    - *exerr==F_ERR_NOMEMORY            メモリ不足エラー
    - *exerr==F_ERR_INVALID_PARAM       パラメータエラー
    - *exerr==F_ERR_UNINIT_LIB      未初期化( fnFIE_setup() を実行していない )
    - *exerr==F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def hough_lines_open(stq=0, edq=359, sx=0, sy=0, ex=REQUIRED_PLACEHOLDER, ey=REQUIRED_PLACEHOLDER, exerr=None):
    r"""FHANDLE FVALGAPI fnFIE_hough_lines_open( INT stq, INT edq, INT sx, INT sy, INT ex, INT ey, INT* exerr )
    直線検出ハフライブラリのオープン

    Params:
    - [in]  stq     検出する直線の法線方向の角度の範囲の始値(-360〜360, 単位：度)
    - [in]  edq     検出する直線の法線方向の角度の範囲の終値(0〜360, 単位：度)
    - [in]  sx      投票するエッジが存在する領域の左上Ｘ座標
    - [in]  sy      投票するエッジが存在する領域の左上Ｙ座標
    - [in]  ex      投票するエッジが存在する領域の右下Ｘ座標
    - [in]  ey      投票するエッジが存在する領域の右下Ｙ座標
    - [out] exerr   エラーコード。エラーコードを受け取る必要の無い場合は、NULLを指定します。

    Returns:
    - 正常にオープンできた場合は、直線ハフ構造体のハンドルを返します。
            パラメータエラーもしくはメモリ不足の場合は、NULLを返します。
    - *exerr==F_ERR_NONE                正常終了
    - *exerr==F_ERR_NOMEMORY            メモリ不足エラー
    - *exerr==F_ERR_INVALID_PARAM       パラメータエラー
    - *exerr==F_ERR_UNINIT_LIB      未初期化( fnFIE_setup() を実行していない )
    - *exerr==F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if ex is REQUIRED_PLACEHOLDER: raise TypeError("argument 'ex' is missing")
    if ey is REQUIRED_PLACEHOLDER: raise TypeError("argument 'ey' is missing")
    return _fie.fnFIE_hough_lines_open(stq, edq, sx, sy, ex, ey, exerr)

def fnFIE_hough_lines_close(hHough) -> Any:
    r"""void fnFIE_hough_lines_close( FHANDLE hHough )
    直線検出ハフライブラリのクローズ

    Params:
    - [in]  hHough  クローズするハフ構造体のハンドル

    Returns:
    """
    raise NotImplementedError

def hough_lines_close(hHough):
    r"""void fnFIE_hough_lines_close( FHANDLE hHough )
    直線検出ハフライブラリのクローズ

    Params:
    - [in]  hHough  クローズするハフ構造体のハンドル

    Returns:
    """

    return _fie.fnFIE_hough_lines_close(hHough)

def fnFIE_hough_lines_copy(hHough) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_hough_lines_copy( FHANDLE hHough )
    ハフオブジェクトのコピー

    Params:
    - [in]  hHough  コピーする数値テーブルのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """
    raise NotImplementedError

def hough_lines_copy(hHough):
    r"""FHANDLE FVALGAPI fnFIE_hough_lines_copy( FHANDLE hHough )
    ハフオブジェクトのコピー

    Params:
    - [in]  hHough  コピーする数値テーブルのハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """

    return _fie.fnFIE_hough_lines_copy(hHough)

def fnFIE_hough_lines_init_space(hHough) -> Any:
    r"""INT FVALGAPI fnFIE_hough_lines_init_space( FHANDLE hHough )
    ハフ投票空間の初期化

    Params:
    - [in]  hHough  オープン済みハフ構造体のハンドル

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT  不正なハフオブジェクトが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def hough_lines_init_space(hHough):
    r"""INT FVALGAPI fnFIE_hough_lines_init_space( FHANDLE hHough )
    ハフ投票空間の初期化

    Params:
    - [in]  hHough  オープン済みハフ構造体のハンドル

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_OBJECT  不正なハフオブジェクトが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_hough_lines_init_space(hHough)

def fnFIE_hough_lines_voting(hHough, edges, edge_num, vot_width, voting_num) -> Any:
    r"""INT FVALGAPI fnFIE_hough_lines_voting( FHANDLE hHough, const F_EDGE* edges, INT edge_num, INT vot_width, INT* voting_num )
    ハフ空間への投票（整数型エッジ点群）

    Params:
    - [in]  hHough      直線検出ハフ構造体のハンドル。 fnFIE_hough_lines_open() で取得。
    - [in]  edges       投票する勾配付きエッジ点群（エッジ勾配強度は必要なし）
    - [in]  edge_num    エッジ点(  edges )の数
    - [in]  vot_width   投票θ片幅(0〜179, 単位：度)
    - [out] voting_num  投票されたエッジ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハフオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def hough_lines_voting(hHough, edges, edge_num, vot_width=10, voting_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_hough_lines_voting( FHANDLE hHough, const F_EDGE* edges, INT edge_num, INT vot_width, INT* voting_num )
    ハフ空間への投票（整数型エッジ点群）

    Params:
    - [in]  hHough      直線検出ハフ構造体のハンドル。 fnFIE_hough_lines_open() で取得。
    - [in]  edges       投票する勾配付きエッジ点群（エッジ勾配強度は必要なし）
    - [in]  edge_num    エッジ点(  edges )の数
    - [in]  vot_width   投票θ片幅(0〜179, 単位：度)
    - [out] voting_num  投票されたエッジ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハフオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if voting_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'voting_num' is missing")
    return _fie.fnFIE_hough_lines_voting(hHough, edges, edge_num, vot_width, voting_num)

def fnFIE_hough_lines_voting_d(hHough, edges, edge_num, vot_width, voting_num) -> Any:
    r"""INT FVALGAPI fnFIE_hough_lines_voting_d( FHANDLE hHough, const F_DEDGE* edges, INT edge_num, INT vot_width, INT* voting_num )
    ハフ空間への投票（実数型エッジ点群）

    Params:
    - [in]  hHough      直線検出ハフ構造体のハンドル。 fnFIE_hough_lines_open() で取得。
    - [in]  edges       投票する勾配付きエッジ点群（エッジ勾配強度は必要なし）
    - [in]  edge_num    エッジ点(  edges )の数
    - [in]  vot_width   投票θ片幅(0〜179, 単位：度)
    - [out] voting_num  投票されたエッジ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハフオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def hough_lines_voting_d(hHough, edges, edge_num, vot_width=10, voting_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_hough_lines_voting_d( FHANDLE hHough, const F_DEDGE* edges, INT edge_num, INT vot_width, INT* voting_num )
    ハフ空間への投票（実数型エッジ点群）

    Params:
    - [in]  hHough      直線検出ハフ構造体のハンドル。 fnFIE_hough_lines_open() で取得。
    - [in]  edges       投票する勾配付きエッジ点群（エッジ勾配強度は必要なし）
    - [in]  edge_num    エッジ点(  edges )の数
    - [in]  vot_width   投票θ片幅(0〜179, 単位：度)
    - [out] voting_num  投票されたエッジ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハフオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if voting_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'voting_num' is missing")
    return _fie.fnFIE_hough_lines_voting_d(hHough, edges, edge_num, vot_width, voting_num)

def fnFIE_hough_lines_detection(hHough, request_line_num, rgn_r, rgn_q, ans_lines, line_num) -> Any:
    r"""INT FVALGAPI fnFIE_hough_lines_detection( const FHANDLE hHough, INT request_line_num, INT rgn_r, INT rgn_q, F_LH_LINE* ans_lines, INT* line_num )
    ハフ直線検出

    Params:
    - [in,out]  hHough              ハフ構造体のハンドル
    - [in]      request_line_num    検出要求数(1以上)
    - [in]      rgn_r               ρ方向極大値決定サイズ(0以上, 単位：ピクセル)
    - [in]      rgn_q               θ方向極大値決定サイズ(0〜179, 単位：度)
    - [out]     ans_lines           検出結果直線(  request_line_num 個以上のメモリが必要)
    - [out]     line_num            検出された直線の数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハフオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def hough_lines_detection(hHough, request_line_num, rgn_r=10, rgn_q=10, ans_lines=REQUIRED_PLACEHOLDER, line_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_hough_lines_detection( const FHANDLE hHough, INT request_line_num, INT rgn_r, INT rgn_q, F_LH_LINE* ans_lines, INT* line_num )
    ハフ直線検出

    Params:
    - [in,out]  hHough              ハフ構造体のハンドル
    - [in]      request_line_num    検出要求数(1以上)
    - [in]      rgn_r               ρ方向極大値決定サイズ(0以上, 単位：ピクセル)
    - [in]      rgn_q               θ方向極大値決定サイズ(0〜179, 単位：度)
    - [out]     ans_lines           検出結果直線(  request_line_num 個以上のメモリが必要)
    - [out]     line_num            検出された直線の数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なハフオブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if ans_lines is REQUIRED_PLACEHOLDER: raise TypeError("argument 'ans_lines' is missing")
    if line_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'line_num' is missing")
    return _fie.fnFIE_hough_lines_detection(hHough, request_line_num, rgn_r, rgn_q, ans_lines, line_num)

def fnFIE_hough_lines_refine_line(line, edges, edge_num, err_r, err_q, pnt_num) -> Any:
    r"""INT FVALGAPI fnFIE_hough_lines_refine_line( F_LH_LINE* line, const F_EDGE* edges, INT edge_num, INT err_r, INT err_q, INT* pnt_num )
    直線係数を最小自乗法で求め直す（整数型エッジ点群）

    Params:
    - [in,out]  line        直線係数
    - [in]      edges       エッジ点群（エッジ勾配方向、強度共に必要なし）
    - [in]      edge_num    エッジ点(  edges )の数
    - [in]      err_r       ρ方向許容誤差(0以上, 単位：ピクセル)
    - [in]      err_q       θ方向許容誤差(0以上, 単位：度)
    - [out]     pnt_num     直線の上にあるエッジ点の数

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_PARAM           不正なパラメータが渡された
    - F_ERR_NOMEMORY                メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE     直線の係数が不定となるようなデータが与えられたための異常終了
    - F_ERR_CALC_OVERFLOW           計算の途中でオーバーフローが起こったための異常終了
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def hough_lines_refine_line(line, edges, edge_num, err_r=5, err_q=5, pnt_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_hough_lines_refine_line( F_LH_LINE* line, const F_EDGE* edges, INT edge_num, INT err_r, INT err_q, INT* pnt_num )
    直線係数を最小自乗法で求め直す（整数型エッジ点群）

    Params:
    - [in,out]  line        直線係数
    - [in]      edges       エッジ点群（エッジ勾配方向、強度共に必要なし）
    - [in]      edge_num    エッジ点(  edges )の数
    - [in]      err_r       ρ方向許容誤差(0以上, 単位：ピクセル)
    - [in]      err_q       θ方向許容誤差(0以上, 単位：度)
    - [out]     pnt_num     直線の上にあるエッジ点の数

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_PARAM           不正なパラメータが渡された
    - F_ERR_NOMEMORY                メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE     直線の係数が不定となるようなデータが与えられたための異常終了
    - F_ERR_CALC_OVERFLOW           計算の途中でオーバーフローが起こったための異常終了
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """
    if pnt_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'pnt_num' is missing")
    return _fie.fnFIE_hough_lines_refine_line(line, edges, edge_num, err_r, err_q, pnt_num)

def fnFIE_hough_lines_refine_line_d(line, edges, edge_num, err_r, err_q, pnt_num) -> Any:
    r"""INT FVALGAPI fnFIE_hough_lines_refine_line_d( F_LH_LINE* line, const F_DEDGE* edges, INT edge_num, DOUBLE err_r, DOUBLE err_q, INT* pnt_num )
    直線係数を最小自乗法で求め直す（実数型エッジ点群）

    Params:
    - [in,out]  line        直線係数
    - [in]      edges       エッジ点群（エッジ勾配方向、強度共に必要なし）
    - [in]      edge_num    エッジ点(  edges )の数
    - [in]      err_r       ρ方向許容誤差(0以上, 単位：ピクセル)
    - [in]      err_q       θ方向許容誤差(0以上, 単位：度)
    - [out]     pnt_num     直線の上にあるエッジ点の数

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_PARAM           不正なパラメータが渡された
    - F_ERR_NOMEMORY                メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE     直線の係数が不定となるようなデータが与えられたための異常終了
    - F_ERR_CALC_OVERFLOW           計算の途中でオーバーフローが起こったための異常終了
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def hough_lines_refine_line_d(line, edges, edge_num, err_r=5, err_q=5, pnt_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_hough_lines_refine_line_d( F_LH_LINE* line, const F_DEDGE* edges, INT edge_num, DOUBLE err_r, DOUBLE err_q, INT* pnt_num )
    直線係数を最小自乗法で求め直す（実数型エッジ点群）

    Params:
    - [in,out]  line        直線係数
    - [in]      edges       エッジ点群（エッジ勾配方向、強度共に必要なし）
    - [in]      edge_num    エッジ点(  edges )の数
    - [in]      err_r       ρ方向許容誤差(0以上, 単位：ピクセル)
    - [in]      err_q       θ方向許容誤差(0以上, 単位：度)
    - [out]     pnt_num     直線の上にあるエッジ点の数

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_PARAM           不正なパラメータが渡された
    - F_ERR_NOMEMORY                メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE     直線の係数が不定となるようなデータが与えられたための異常終了
    - F_ERR_CALC_OVERFLOW           計算の途中でオーバーフローが起こったための異常終了
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """
    if pnt_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'pnt_num' is missing")
    return _fie.fnFIE_hough_lines_refine_line_d(line, edges, edge_num, err_r, err_q, pnt_num)

def fnFIE_hough_lines_get_support_edges(line, edges, edge_num, err_r, err_q, support_edges, neib_num, sort_type) -> Any:
    r"""INT FVALGAPI fnFIE_hough_lines_get_support_edges( const F_LH_LINE* line, const F_EDGE* edges, INT edge_num, INT err_r, INT err_q, F_EDGE** support_edges, INT* neib_num, INT* sort_type )
    直線に近いエッジ点群の取得（整数型エッジ点群）

    Params:
    - [in]  line            直線の方程式
    - [in]  edges           エッジ点群（エッジ勾配方向、強度共に必要なし）
    - [in]  edge_num        エッジ点の数
    - [in]  err_r           ρ方向許容誤差(0以上, 単位：ピクセル)
    - [in]  err_q           θ方向許容誤差(0以上, 単位：度)
    - [out] support_edges   直線の近くのエッジ点群
    - [out] neib_num        回答した「直線近くのエッジ点」の数
    - [out] sort_type        support_edges のソートタイプ
                               - 0：ｘ座標でソート
                               - 1：ｙ座標でソート

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_PARAM           不正なパラメータが渡された
    - F_ERR_NOMEMORY                メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE     計算不能エラー(エッジ点が見つからなかった)
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def hough_lines_get_support_edges(line, edges, edge_num, err_r=5, err_q=5, support_edges=REQUIRED_PLACEHOLDER, neib_num=REQUIRED_PLACEHOLDER, sort_type=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_hough_lines_get_support_edges( const F_LH_LINE* line, const F_EDGE* edges, INT edge_num, INT err_r, INT err_q, F_EDGE** support_edges, INT* neib_num, INT* sort_type )
    直線に近いエッジ点群の取得（整数型エッジ点群）

    Params:
    - [in]  line            直線の方程式
    - [in]  edges           エッジ点群（エッジ勾配方向、強度共に必要なし）
    - [in]  edge_num        エッジ点の数
    - [in]  err_r           ρ方向許容誤差(0以上, 単位：ピクセル)
    - [in]  err_q           θ方向許容誤差(0以上, 単位：度)
    - [out] support_edges   直線の近くのエッジ点群
    - [out] neib_num        回答した「直線近くのエッジ点」の数
    - [out] sort_type        support_edges のソートタイプ
                               - 0：ｘ座標でソート
                               - 1：ｙ座標でソート

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_PARAM           不正なパラメータが渡された
    - F_ERR_NOMEMORY                メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE     計算不能エラー(エッジ点が見つからなかった)
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """
    if support_edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'support_edges' is missing")
    if neib_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'neib_num' is missing")
    if sort_type is REQUIRED_PLACEHOLDER: raise TypeError("argument 'sort_type' is missing")
    return _fie.fnFIE_hough_lines_get_support_edges(line, edges, edge_num, err_r, err_q, support_edges, neib_num, sort_type)

def fnFIE_hough_lines_get_support_edges_d(line, edges, edge_num, err_r, err_q, support_edges, neib_num, sort_type) -> Any:
    r"""INT FVALGAPI fnFIE_hough_lines_get_support_edges_d( const F_LH_LINE* line, const F_DEDGE* edges, INT edge_num, DOUBLE err_r, DOUBLE err_q, F_DEDGE** support_edges, INT* neib_num, INT* sort_type )
    直線に近いエッジ点群の取得（実数型エッジ点群）

    Params:
    - [in]  line            直線の方程式
    - [in]  edges           エッジ点群（エッジ勾配方向、強度共に必要なし）
    - [in]  edge_num        エッジ点の数
    - [in]  err_r           ρ方向許容誤差(0以上, 単位：ピクセル)
    - [in]  err_q           θ方向許容誤差(0以上, 単位：度)
    - [out] support_edges   直線の近くのエッジ点群
    - [out] neib_num        回答した「直線近くのエッジ点」の数
    - [out] sort_type        support_edges のソートタイプ
                               - 0：ｘ座標でソート
                               - 1：ｙ座標でソート

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_PARAM           不正なパラメータが渡された
    - F_ERR_NOMEMORY                メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE     計算不能エラー(エッジ点が見つからなかった)
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def hough_lines_get_support_edges_d(line, edges, edge_num, err_r=5, err_q=5, support_edges=REQUIRED_PLACEHOLDER, neib_num=REQUIRED_PLACEHOLDER, sort_type=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_hough_lines_get_support_edges_d( const F_LH_LINE* line, const F_DEDGE* edges, INT edge_num, DOUBLE err_r, DOUBLE err_q, F_DEDGE** support_edges, INT* neib_num, INT* sort_type )
    直線に近いエッジ点群の取得（実数型エッジ点群）

    Params:
    - [in]  line            直線の方程式
    - [in]  edges           エッジ点群（エッジ勾配方向、強度共に必要なし）
    - [in]  edge_num        エッジ点の数
    - [in]  err_r           ρ方向許容誤差(0以上, 単位：ピクセル)
    - [in]  err_q           θ方向許容誤差(0以上, 単位：度)
    - [out] support_edges   直線の近くのエッジ点群
    - [out] neib_num        回答した「直線近くのエッジ点」の数
    - [out] sort_type        support_edges のソートタイプ
                               - 0：ｘ座標でソート
                               - 1：ｙ座標でソート

    Returns:
    - F_ERR_NONE                    正常終了
    - F_ERR_INVALID_PARAM           不正なパラメータが渡された
    - F_ERR_NOMEMORY                メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE     計算不能エラー(エッジ点が見つからなかった)
    - F_ERR_NO_LICENCE          ライセンスエラー、または未初期化エラー
    """
    if support_edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'support_edges' is missing")
    if neib_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'neib_num' is missing")
    if sort_type is REQUIRED_PLACEHOLDER: raise TypeError("argument 'sort_type' is missing")
    return _fie.fnFIE_hough_lines_get_support_edges_d(line, edges, edge_num, err_r, err_q, support_edges, neib_num, sort_type)

def fnFIE_hough_lines_get_space(hHough, stq, edq, str, edr) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_hough_lines_get_space( FHANDLE hHough, INT* stq, INT* edq, INT* str, INT* edr )
    ハフ投票空間の取得

    Params:
    - [in]  hHough  ハフ構造体のハンドル
    - [out] stq     ハフ投票空間のθ方向の始点
    - [out] edq     ハフ投票空間のθ方向の終点
    - [out] str     ハフ投票空間のｒ方向の始点
    - [out] edr     ハフ投票空間のｒ方向の終点

    Returns:
    - 正常にオープンできた場合は、画像オブジェクト(type:us16, channel:1)のハンドルを返します。
            ライセンスエラー、未初期化エラー、パラメータエラーもしくはメモリ不足の場合は、NULLを返します。
    """
    raise NotImplementedError

def hough_lines_get_space(hHough, stq=None, edq=None, str=None, edr=None):
    r"""FHANDLE FVALGAPI fnFIE_hough_lines_get_space( FHANDLE hHough, INT* stq, INT* edq, INT* str, INT* edr )
    ハフ投票空間の取得

    Params:
    - [in]  hHough  ハフ構造体のハンドル
    - [out] stq     ハフ投票空間のθ方向の始点
    - [out] edq     ハフ投票空間のθ方向の終点
    - [out] str     ハフ投票空間のｒ方向の始点
    - [out] edr     ハフ投票空間のｒ方向の終点

    Returns:
    - 正常にオープンできた場合は、画像オブジェクト(type:us16, channel:1)のハンドルを返します。
            ライセンスエラー、未初期化エラー、パラメータエラーもしくはメモリ不足の場合は、NULLを返します。
    """

    return _fie.fnFIE_hough_lines_get_space(hHough, stq, edq, str, edr)

def fnFIE_edge_sobel(hsrc, hmag, params, feat_mode, border_mode, offset, edges, edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_edge_sobel( FHANDLE hsrc, FHANDLE hmag, const F_EDGE_SOBEL_PARAMS* params, UINT feat_mode, INT border_mode, PNT_T offset, F_EDGE** edges, INT* edge_num )
    ソーベルフィルタを利用したエッジ検出

    Params:
    - [in]  hsrc            入力画像(type:uc8 / ch:1)
    - [out] hmag            エッジ強度画像(type:us16 / ch:1)
    - [in]  params          エッジ検出のための各種パラメータ
    - [in]  feat_mode       勾配方向、強度付きエッジ点構造体に保持するデータを指定するモード
    - [in]  border_mode     ボーダーモード
                            - F_BORDER_NONE             ボーダー処理無し
                            - F_BORDER_CONTINUOUS       端延長モード
    - [in]  offset          オフセット量
    - [out] edges           取得したエッジ
    - [out] edge_num        取得したエッジ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge_sobel(hsrc, hmag, params, feat_mode=F_EDGE_FEAT_DIRECT, border_mode=F_BORDER_NONE, offset=(0, 0), edges=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_edge_sobel( FHANDLE hsrc, FHANDLE hmag, const F_EDGE_SOBEL_PARAMS* params, UINT feat_mode, INT border_mode, PNT_T offset, F_EDGE** edges, INT* edge_num )
    ソーベルフィルタを利用したエッジ検出

    Params:
    - [in]  hsrc            入力画像(type:uc8 / ch:1)
    - [out] hmag            エッジ強度画像(type:us16 / ch:1)
    - [in]  params          エッジ検出のための各種パラメータ
    - [in]  feat_mode       勾配方向、強度付きエッジ点構造体に保持するデータを指定するモード
    - [in]  border_mode     ボーダーモード
                            - F_BORDER_NONE             ボーダー処理無し
                            - F_BORDER_CONTINUOUS       端延長モード
    - [in]  offset          オフセット量
    - [out] edges           取得したエッジ
    - [out] edge_num        取得したエッジ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_edge_sobel(hsrc, hmag, params, feat_mode, border_mode, offset, edges, edge_num)

def fnFIE_edge_sobel_subpix(hsrc, hmag, params, feat_mode, border_mode, offset, edges, edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_edge_sobel_subpix( FHANDLE hsrc, FHANDLE hmag, const F_EDGE_SOBEL_PARAMS* params, UINT feat_mode, INT border_mode, DPNT_T offset, F_DEDGE** edges, INT* edge_num )
    ソーベルフィルタを利用したエッジ検出(サブピクセル精度)

    Params:
    - [in]  hsrc            入力画像(type:uc8 / ch:1)
    - [out] hmag            エッジ強度画像(type:us16 / ch:1)
    - [in]  params          エッジ検出のための各種パラメータ
    - [in]  feat_mode       勾配方向、強度付きエッジ点構造体に保持するデータを指定するモード
    - [in]  border_mode     ボーダーモード
                            - F_BORDER_NONE             ボーダー処理無し
                            - F_BORDER_CONTINUOUS       端延長モード
    - [in]  offset          オフセット量
    - [out] edges           取得したエッジ
    - [out] edge_num        取得したエッジ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge_sobel_subpix(hsrc, hmag, params, feat_mode=F_EDGE_FEAT_DIRECT, border_mode=F_BORDER_NONE, offset=(0, 0), edges=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_edge_sobel_subpix( FHANDLE hsrc, FHANDLE hmag, const F_EDGE_SOBEL_PARAMS* params, UINT feat_mode, INT border_mode, DPNT_T offset, F_DEDGE** edges, INT* edge_num )
    ソーベルフィルタを利用したエッジ検出(サブピクセル精度)

    Params:
    - [in]  hsrc            入力画像(type:uc8 / ch:1)
    - [out] hmag            エッジ強度画像(type:us16 / ch:1)
    - [in]  params          エッジ検出のための各種パラメータ
    - [in]  feat_mode       勾配方向、強度付きエッジ点構造体に保持するデータを指定するモード
    - [in]  border_mode     ボーダーモード
                            - F_BORDER_NONE             ボーダー処理無し
                            - F_BORDER_CONTINUOUS       端延長モード
    - [in]  offset          オフセット量
    - [out] edges           取得したエッジ
    - [out] edge_num        取得したエッジ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_edge_sobel_subpix(hsrc, hmag, params, feat_mode, border_mode, offset, edges, edge_num)

def fnFIE_edge_corr(hsrc, hmag, params, feat_mode, border_mode, offset, edges, edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_edge_corr( FHANDLE hsrc, FHANDLE hmag, const F_EDGE_CORR_PARAMS* params, UINT feat_mode, INT border_mode, PNT_T offset, F_EDGE** edges, INT* edge_num )
    相関エッジフィルタを利用したエッジ検出

    Params:
    - [in]  hsrc            入力画像(type:uc8, s16, us16, double / ch:1)
    - [out] hmag            エッジ強度画像(type:us16 / ch:1)
    - [in]  params          エッジ検出のための各種パラメータ
    - [in]  feat_mode       勾配方向、強度付きエッジ点構造体に保持するデータを指定するモード
    - [in]  border_mode     ボーダーモード
                            - F_BORDER_NONE             ボーダー処理無し
                            - F_BORDER_CONTINUOUS       端延長モード
    - [in]  offset          オフセット量
    - [out] edges           取得したエッジ
    - [out] edge_num        取得したエッジ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge_corr(hsrc, hmag, params, feat_mode=F_EDGE_FEAT_DIRECT, border_mode=F_BORDER_NONE, offset=(0, 0), edges=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_edge_corr( FHANDLE hsrc, FHANDLE hmag, const F_EDGE_CORR_PARAMS* params, UINT feat_mode, INT border_mode, PNT_T offset, F_EDGE** edges, INT* edge_num )
    相関エッジフィルタを利用したエッジ検出

    Params:
    - [in]  hsrc            入力画像(type:uc8, s16, us16, double / ch:1)
    - [out] hmag            エッジ強度画像(type:us16 / ch:1)
    - [in]  params          エッジ検出のための各種パラメータ
    - [in]  feat_mode       勾配方向、強度付きエッジ点構造体に保持するデータを指定するモード
    - [in]  border_mode     ボーダーモード
                            - F_BORDER_NONE             ボーダー処理無し
                            - F_BORDER_CONTINUOUS       端延長モード
    - [in]  offset          オフセット量
    - [out] edges           取得したエッジ
    - [out] edge_num        取得したエッジ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_edge_corr(hsrc, hmag, params, feat_mode, border_mode, offset, edges, edge_num)

def fnFIE_edge_corr_subpix(hsrc, hmag, params, feat_mode, border_mode, offset, edges, edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_edge_corr_subpix( FHANDLE hsrc, FHANDLE hmag, const F_EDGE_CORR_PARAMS* params, UINT feat_mode, INT border_mode, DPNT_T offset, F_DEDGE** edges, INT* edge_num )
    相関エッジフィルタを利用したエッジ検出（サブピクセル精度）

    Params:
    - [in]  hsrc            入力画像(type:uc8, s16, us16, double / ch:1)
    - [out] hmag            エッジ強度画像(type:us16 / ch:1)
    - [in]  params          エッジ検出のための各種パラメータ
    - [in]  feat_mode       勾配方向、強度付きエッジ点構造体に保持するデータを指定するモード
    - [in]  border_mode     ボーダーモード
                            - F_BORDER_NONE             ボーダー処理無し
                            - F_BORDER_CONTINUOUS       端延長モード
    - [in]  offset          オフセット量
    - [out] edges           取得したエッジ
    - [out] edge_num        取得したエッジ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge_corr_subpix(hsrc, hmag, params, feat_mode=F_EDGE_FEAT_DIRECT, border_mode=F_BORDER_NONE, offset=(0, 0), edges=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_edge_corr_subpix( FHANDLE hsrc, FHANDLE hmag, const F_EDGE_CORR_PARAMS* params, UINT feat_mode, INT border_mode, DPNT_T offset, F_DEDGE** edges, INT* edge_num )
    相関エッジフィルタを利用したエッジ検出（サブピクセル精度）

    Params:
    - [in]  hsrc            入力画像(type:uc8, s16, us16, double / ch:1)
    - [out] hmag            エッジ強度画像(type:us16 / ch:1)
    - [in]  params          エッジ検出のための各種パラメータ
    - [in]  feat_mode       勾配方向、強度付きエッジ点構造体に保持するデータを指定するモード
    - [in]  border_mode     ボーダーモード
                            - F_BORDER_NONE             ボーダー処理無し
                            - F_BORDER_CONTINUOUS       端延長モード
    - [in]  offset          オフセット量
    - [out] edges           取得したエッジ
    - [out] edge_num        取得したエッジ数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_edge_corr_subpix(hsrc, hmag, params, feat_mode, border_mode, offset, edges, edge_num)

def fnFIE_nms_dir(hmagx, hmagy, hthin, thresh) -> Any:
    r"""INT FVALGAPI fnFIE_nms_dir( FHANDLE hmagx, FHANDLE hmagy, FHANDLE hthin, DOUBLE thresh )
    非極大値の抑制（エッジ勾配方向を利用）

    Params:
    - [in]  hmagx   X方向のエッジ強度画像(type:s16, double)
    - [in]  hmagy   Y方向のエッジ強度画像(type:s16, double)
    - [out] hthin   細線化画像(type:uc8)
    - [in]  thresh  非常に小さい勾配を取り除くための閾値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE 不正な画像が渡された
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
                            -  thresh が０未満
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def nms_dir(hmagx, hmagy, hthin, thresh=0):
    r"""INT FVALGAPI fnFIE_nms_dir( FHANDLE hmagx, FHANDLE hmagy, FHANDLE hthin, DOUBLE thresh )
    非極大値の抑制（エッジ勾配方向を利用）

    Params:
    - [in]  hmagx   X方向のエッジ強度画像(type:s16, double)
    - [in]  hmagy   Y方向のエッジ強度画像(type:s16, double)
    - [out] hthin   細線化画像(type:uc8)
    - [in]  thresh  非常に小さい勾配を取り除くための閾値

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE 不正な画像が渡された
    - F_ERR_INVALID_PARAM   不正なパラメータが渡された
                            -  thresh が０未満
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_nms_dir(hmagx, hmagy, hthin, thresh)

def fnFIE_img_get_points_bin(hsrc, color, max_pnt_num, pnts, pnt_num) -> Any:
    r"""INT FVALGAPI fnFIE_img_get_points_bin( const FHANDLE hsrc, INT color, INT max_pnt_num, PNT_T* pnts, INT* pnt_num )
    ２値画像からの点データ取得

    Params:
    - [in]  hsrc            入力画像( type:bin / ch:1 )
    - [in]  color           対象エリア色
                            - 0：黒
                            - 1：白
    - [in]  max_pnt_num     点データの最大数
    - [out] pnts            点データ格納バッファ( sizeof(PNT_T) * max_pnt_num byte 必要 )
    - [out] pnt_num         取得された点数(0以上)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pnts または  pnt_num がNULL
                                -  max_pnt_num が０以下
                                -  color が０または１ではない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_get_points_bin(hsrc, color, max_pnt_num, pnts, pnt_num):
    r"""INT FVALGAPI fnFIE_img_get_points_bin( const FHANDLE hsrc, INT color, INT max_pnt_num, PNT_T* pnts, INT* pnt_num )
    ２値画像からの点データ取得

    Params:
    - [in]  hsrc            入力画像( type:bin / ch:1 )
    - [in]  color           対象エリア色
                            - 0：黒
                            - 1：白
    - [in]  max_pnt_num     点データの最大数
    - [out] pnts            点データ格納バッファ( sizeof(PNT_T) * max_pnt_num byte 必要 )
    - [out] pnt_num         取得された点数(0以上)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pnts または  pnt_num がNULL
                                -  max_pnt_num が０以下
                                -  color が０または１ではない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_get_points_bin(hsrc, color, max_pnt_num, pnts, pnt_num)

def fnFIE_img_get_points_gray(hsrc, tlow, thigh, max_pnt_num, pnts, pnt_num) -> Any:
    r"""INT FVALGAPI fnFIE_img_get_points_gray( const FHANDLE hsrc, DOUBLE tlow, DOUBLE thigh, INT max_pnt_num, PNT_T* pnts, INT* pnt_num )
    濃淡画像からの点データ列取得

    Params:
    - [in]  hsrc            入力画像( type:uc8,s16,us16,double / ch:1 )
    - [in]  tlow            ２値化閾値の下限
    - [in]  thigh           ２値化閾値の上限
    - [in]  max_pnt_num     点データの最大数
    - [out] pnts            点データ格納バッファ( sizeof(PNT_T) * max_pnt_num byte 必要 )
    - [out] pnt_num         取得された点数(0以上)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pnts または  pnt_num がNULL
                                -  max_pnt_num が０以下
                                -  tlow >  thigh
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_get_points_gray(hsrc, tlow, thigh, max_pnt_num, pnts, pnt_num):
    r"""INT FVALGAPI fnFIE_img_get_points_gray( const FHANDLE hsrc, DOUBLE tlow, DOUBLE thigh, INT max_pnt_num, PNT_T* pnts, INT* pnt_num )
    濃淡画像からの点データ列取得

    Params:
    - [in]  hsrc            入力画像( type:uc8,s16,us16,double / ch:1 )
    - [in]  tlow            ２値化閾値の下限
    - [in]  thigh           ２値化閾値の上限
    - [in]  max_pnt_num     点データの最大数
    - [out] pnts            点データ格納バッファ( sizeof(PNT_T) * max_pnt_num byte 必要 )
    - [out] pnt_num         取得された点数(0以上)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像オブジェクトが渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pnts または  pnt_num がNULL
                                -  max_pnt_num が０以下
                                -  tlow >  thigh
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_get_points_gray(hsrc, tlow, thigh, max_pnt_num, pnts, pnt_num)

def fnFIE_edge_binary_boundary(hsrc, smooth_size, offset, edges, edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_edge_binary_boundary( FHANDLE hsrc, INT smooth_size, DPNT_T offset, F_DEDGE** edges, INT* edge_num )
    領域の境界点列を利用したエッジ検出

    Params:
    - [in]     hsrc         入力FIEオブジェクト
                                - リージョン
                                - ２値画像ハンドル( type : bin, ch : 1 )
    - [in]     smooth_size  移動平均フィルタサイズ
    - [in]     offset       オフセット量
    - [out]    edges        取得したエッジ
    - [in,out] edge_num     取得したエッジ数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_OBJECT 不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge_binary_boundary(hsrc, smooth_size=3, offset=(0.0, 0.0), edges=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_edge_binary_boundary( FHANDLE hsrc, INT smooth_size, DPNT_T offset, F_DEDGE** edges, INT* edge_num )
    領域の境界点列を利用したエッジ検出

    Params:
    - [in]     hsrc         入力FIEオブジェクト
                                - リージョン
                                - ２値画像ハンドル( type : bin, ch : 1 )
    - [in]     smooth_size  移動平均フィルタサイズ
    - [in]     offset       オフセット量
    - [out]    edges        取得したエッジ
    - [in,out] edge_num     取得したエッジ数

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_NOMEMORY       メモリ不足
    - F_ERR_INVALID_IMAGE  不正な画像が渡された
    - F_ERR_INVALID_OBJECT 不正なオブジェクトが渡された
    - F_ERR_INVALID_PARAM  パラメータ不正
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_edge_binary_boundary(hsrc, smooth_size, offset, edges, edge_num)

def fnFIE_edge_connecting(pedge, edge_num, weight, threshold1, threshold2, area_size, area_overlap, min_clust_elem, mode, ppedge_clust, pclust_num) -> Any:
    r"""INT FVALGAPI fnFIE_edge_connecting( const F_DEDGE* pedge, INT edge_num, DOUBLE weight, DOUBLE threshold1, DOUBLE threshold2, INT area_size, INT area_overlap, INT min_clust_elem, INT mode, F_EDGE_CLUST** ppedge_clust, INT* pclust_num )
    [非推奨]エッジ点の連結

    Params:
    - [in]  pedges          エッジ点の配列（座標、勾配方向(rad)）
    - [in]  edge_num        エッジ点の個数（ 2 <=  edge_num ）
    - [in]  weight          エッジ勾配方向の重み  weight エッジ勾配方向のなす角の重み）（ 0 <=  weight <= 1 ）
    - [in]  threshold1      評価しきい値１：連結用（ 0 <  threshold1 ）
    - [in]  threshold2      評価しきい値２：再連結用（  threshold1 <  threshold2 ）
    - [in]  area_size       正方連結用局所領域のサイズ（画素： 3 <=  area_size <= 20 ）
    - [in]  area_overlap    連結用局所領域の重なり（画素：  area_overlap <=  area_size / 2 ）
    - [in]  min_clust_elem  クラスタに属するエッジ点の個数の最小値（ 2 <=  min_clust_elem ）
    - [in]  mode            再連結処理（０：無効、０以外：有効）
    - [out] *ppedge_clust   抽出した曲線の情報（クラスタ）の配列（初期値は NULL を指定）
    - [out] pclust_num      抽出した曲線の個数（初期値は０を指定）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge_connecting(pedge, edge_num, weight, threshold1, threshold2, area_size, area_overlap, min_clust_elem, mode, ppedge_clust, pclust_num):
    r"""INT FVALGAPI fnFIE_edge_connecting( const F_DEDGE* pedge, INT edge_num, DOUBLE weight, DOUBLE threshold1, DOUBLE threshold2, INT area_size, INT area_overlap, INT min_clust_elem, INT mode, F_EDGE_CLUST** ppedge_clust, INT* pclust_num )
    [非推奨]エッジ点の連結

    Params:
    - [in]  pedges          エッジ点の配列（座標、勾配方向(rad)）
    - [in]  edge_num        エッジ点の個数（ 2 <=  edge_num ）
    - [in]  weight          エッジ勾配方向の重み  weight エッジ勾配方向のなす角の重み）（ 0 <=  weight <= 1 ）
    - [in]  threshold1      評価しきい値１：連結用（ 0 <  threshold1 ）
    - [in]  threshold2      評価しきい値２：再連結用（  threshold1 <  threshold2 ）
    - [in]  area_size       正方連結用局所領域のサイズ（画素： 3 <=  area_size <= 20 ）
    - [in]  area_overlap    連結用局所領域の重なり（画素：  area_overlap <=  area_size / 2 ）
    - [in]  min_clust_elem  クラスタに属するエッジ点の個数の最小値（ 2 <=  min_clust_elem ）
    - [in]  mode            再連結処理（０：無効、０以外：有効）
    - [out] *ppedge_clust   抽出した曲線の情報（クラスタ）の配列（初期値は NULL を指定）
    - [out] pclust_num      抽出した曲線の個数（初期値は０を指定）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_edge_connecting(pedge, edge_num, weight, threshold1, threshold2, area_size, area_overlap, min_clust_elem, mode, ppedge_clust, pclust_num)

def fnFIE_free_edge_clust(pedge_clust, clust_num) -> Any:
    r"""INT FVALGAPI fnFIE_free_edge_clust( F_EDGE_CLUST* pedge_clust, INT clust_num )
    エッジ点クラスタ配列の解放

    Params:
    - [in] pedge_clust      エッジ点クラスタ配列
    - [in] clust_num        エッジ点クラスタ配列 要素数 （  clust_num >= 0 ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータ以上
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def free_edge_clust(pedge_clust, clust_num):
    r"""INT FVALGAPI fnFIE_free_edge_clust( F_EDGE_CLUST* pedge_clust, INT clust_num )
    エッジ点クラスタ配列の解放

    Params:
    - [in] pedge_clust      エッジ点クラスタ配列
    - [in] clust_num        エッジ点クラスタ配列 要素数 （  clust_num >= 0 ）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータ以上
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_free_edge_clust(pedge_clust, clust_num)

def fnFIE_edge_connecting2(pedges, edge_num, angle_range, distance_range, min_clust_elem, max_clust_elem, ppedge_clust, pclust_num) -> Any:
    r"""INT FVALGAPI fnFIE_edge_connecting2( const F_DEDGE* pedges, INT edge_num, DOUBLE angle_range, INT distance_range, INT min_clust_elem, INT max_clust_elem, F_EDGE_CLUST** ppedge_clust, INT* pclust_num )
    エッジ点の連結

    Params:
    - [in]  pedges           エッジ点の配列
    - [in]  edge_num         エッジ点の個数 ( 2 ≦  edge_num )
    - [in]  angle_range      探索角度範囲 ( 単位: radian , 0 <  angle_range ≦ $\pi$ )
    - [in]  distance_range   探索距離範囲 ( 単位: pixel , 0 <  distance_range )
    - [in]  min_clust_elem   クラスタに属するエッジ点個数の最小値 ( 2 ≦  min_clust_elem )
    - [in]  max_clust_elem   クラスタに属するエッジ点個数の最大値 (  min_clust_elem ≦  max_clust_elem ,ただし  max_clust_elem < 0 とした場合は無制限 )
    - [out] ppedge_clust     抽出した曲線の情報 ( クラスタ ) の配列 ( 初期値は NULL を指定 )
    - [out] pclust_num       抽出した曲線の個数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge_connecting2(pedges, edge_num, angle_range=_math.pi * 0.5, distance_range=5, min_clust_elem=5, max_clust_elem=-1, ppedge_clust=REQUIRED_PLACEHOLDER, pclust_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_edge_connecting2( const F_DEDGE* pedges, INT edge_num, DOUBLE angle_range, INT distance_range, INT min_clust_elem, INT max_clust_elem, F_EDGE_CLUST** ppedge_clust, INT* pclust_num )
    エッジ点の連結

    Params:
    - [in]  pedges           エッジ点の配列
    - [in]  edge_num         エッジ点の個数 ( 2 ≦  edge_num )
    - [in]  angle_range      探索角度範囲 ( 単位: radian , 0 <  angle_range ≦ $\pi$ )
    - [in]  distance_range   探索距離範囲 ( 単位: pixel , 0 <  distance_range )
    - [in]  min_clust_elem   クラスタに属するエッジ点個数の最小値 ( 2 ≦  min_clust_elem )
    - [in]  max_clust_elem   クラスタに属するエッジ点個数の最大値 (  min_clust_elem ≦  max_clust_elem ,ただし  max_clust_elem < 0 とした場合は無制限 )
    - [out] ppedge_clust     抽出した曲線の情報 ( クラスタ ) の配列 ( 初期値は NULL を指定 )
    - [out] pclust_num       抽出した曲線の個数

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_PARAM   パラメータ異常
    - F_ERR_NOMEMORY        メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if ppedge_clust is REQUIRED_PLACEHOLDER: raise TypeError("argument 'ppedge_clust' is missing")
    if pclust_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'pclust_num' is missing")
    return _fie.fnFIE_edge_connecting2(pedges, edge_num, angle_range, distance_range, min_clust_elem, max_clust_elem, ppedge_clust, pclust_num)

def fnFIE_refilter_edge_by_mask(src_edges, src_edge_num, hmask, mask_mode, dst_edges, dst_edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_refilter_edge_by_mask( const F_DEDGE* src_edges, INT src_edge_num, FHANDLE hmask, INT mask_mode, F_DEDGE** dst_edges, INT* dst_edge_num )
    マスクによる エッジ点群のフィルタリング

    Params:
    - [in]  src_edges     入力エッジ点 配列
    - [in]  src_edge_num  入力エッジ点の個数 ( 1 <=  src_edge_num )
    - [in]  hmask         マスク
                              - リージョンオブジェクト
                              - 画像オブジェクト ( type:bin / ch:1 )
    - [in]  mask_mode     マスクモード
                              - 0 : リージョンに含まれるエッジ点を省く.
                              - 1 : リージョンに含まれるエッジ点を残す.
    - [out] dst_edges     出力エッジ点 配列 ( 初期値は NULL を指定 )
    - [out] dst_edge_num  出力エッジ点の個数

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_PARAM    不正なパラメータが渡された
    - F_ERR_INVALID_OBJECT   不正なマスクが渡された
    - F_ERR_INVALID_IMAGE    マスクとして渡された画像オブジェクトが不正である
    - F_ERR_NOMEMORY         メモリ不足エラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def refilter_edge_by_mask(src_edges, src_edge_num, hmask, mask_mode, dst_edges, dst_edge_num):
    r"""INT FVALGAPI fnFIE_refilter_edge_by_mask( const F_DEDGE* src_edges, INT src_edge_num, FHANDLE hmask, INT mask_mode, F_DEDGE** dst_edges, INT* dst_edge_num )
    マスクによる エッジ点群のフィルタリング

    Params:
    - [in]  src_edges     入力エッジ点 配列
    - [in]  src_edge_num  入力エッジ点の個数 ( 1 <=  src_edge_num )
    - [in]  hmask         マスク
                              - リージョンオブジェクト
                              - 画像オブジェクト ( type:bin / ch:1 )
    - [in]  mask_mode     マスクモード
                              - 0 : リージョンに含まれるエッジ点を省く.
                              - 1 : リージョンに含まれるエッジ点を残す.
    - [out] dst_edges     出力エッジ点 配列 ( 初期値は NULL を指定 )
    - [out] dst_edge_num  出力エッジ点の個数

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_PARAM    不正なパラメータが渡された
    - F_ERR_INVALID_OBJECT   不正なマスクが渡された
    - F_ERR_INVALID_IMAGE    マスクとして渡された画像オブジェクトが不正である
    - F_ERR_NOMEMORY         メモリ不足エラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_refilter_edge_by_mask(src_edges, src_edge_num, hmask, mask_mode, dst_edges, dst_edge_num)

def fnFIE_refilter_edge_by_clust(src_edges, src_edge_num, edge_clust, edge_clust_num, clust_idx, clust_idx_num, dst_edges, dst_edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_refilter_edge_by_clust( const F_DEDGE* src_edges, INT src_edge_num, const F_EDGE_CLUST* edge_clust, INT edge_clust_num, const INT* clust_idx, INT clust_idx_num, F_DEDGE** dst_edges, INT* dst_edge_num )
    クラスタ情報による エッジ点群のフィルタリング

    Params:
    - [in]  src_edges        入力エッジ点 配列
    - [in]  src_edge_num     入力エッジ点の個数 ( 1 <=  src_edge_num )
    - [in]  edge_clust       エッジ点クラスタ配列
    - [in]  edge_clust_num   エッジ点クラスタ配列 要素数
    - [in]  clust_idx        処理対象エッジ点クラスタのインデックス配列
                                 (  clust_idx = NULL とした場合は全 クラスタ を処理対象とする )
    - [in]  clust_idx_num    処理対象エッジ点クラスタのインデックス配列 要素数
    - [out] dst_edges        出力エッジ点 配列 ( 初期値は NULL を指定 )
    - [out] dst_edge_num     出力エッジ点の個数

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_PARAM    不正なパラメータが渡された
    - F_ERR_NOMEMORY         メモリ不足エラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def refilter_edge_by_clust(src_edges, src_edge_num, edge_clust, edge_clust_num, clust_idx, clust_idx_num, dst_edges, dst_edge_num):
    r"""INT FVALGAPI fnFIE_refilter_edge_by_clust( const F_DEDGE* src_edges, INT src_edge_num, const F_EDGE_CLUST* edge_clust, INT edge_clust_num, const INT* clust_idx, INT clust_idx_num, F_DEDGE** dst_edges, INT* dst_edge_num )
    クラスタ情報による エッジ点群のフィルタリング

    Params:
    - [in]  src_edges        入力エッジ点 配列
    - [in]  src_edge_num     入力エッジ点の個数 ( 1 <=  src_edge_num )
    - [in]  edge_clust       エッジ点クラスタ配列
    - [in]  edge_clust_num   エッジ点クラスタ配列 要素数
    - [in]  clust_idx        処理対象エッジ点クラスタのインデックス配列
                                 (  clust_idx = NULL とした場合は全 クラスタ を処理対象とする )
    - [in]  clust_idx_num    処理対象エッジ点クラスタのインデックス配列 要素数
    - [out] dst_edges        出力エッジ点 配列 ( 初期値は NULL を指定 )
    - [out] dst_edge_num     出力エッジ点の個数

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_PARAM    不正なパラメータが渡された
    - F_ERR_NOMEMORY         メモリ不足エラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_refilter_edge_by_clust(src_edges, src_edge_num, edge_clust, edge_clust_num, clust_idx, clust_idx_num, dst_edges, dst_edge_num)

def fnFIE_cg_near_points_count(pnts, num, radius, ans_num_tbl) -> Any:
    r"""INT FVALGAPI fnFIE_cg_near_points_count( const PNT_T* pnts, INT num, INT radius, INT* ans_num_tbl )
    近傍にある点の数のカウント

    Params:
    - [in]  pnts            入力点群
    - [in]  num             入力点数(  pnts の要素数)
    - [in]  radius          近傍とみなす半径
    - [out] ans_num_tbl     全近傍点計数回答表(  num だけ外部で、メモリ領域を確保している )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_near_points_count(pnts, num, radius, ans_num_tbl):
    r"""INT FVALGAPI fnFIE_cg_near_points_count( const PNT_T* pnts, INT num, INT radius, INT* ans_num_tbl )
    近傍にある点の数のカウント

    Params:
    - [in]  pnts            入力点群
    - [in]  num             入力点数(  pnts の要素数)
    - [in]  radius          近傍とみなす半径
    - [out] ans_num_tbl     全近傍点計数回答表(  num だけ外部で、メモリ領域を確保している )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_near_points_count(pnts, num, radius, ans_num_tbl)

def fnFIE_cg_2segments_cross_status(sgmt1, sgmt2, op_flag, seg_status) -> Any:
    r"""INT FVALGAPI fnFIE_cg_2segments_cross_status( SGMT_T sgmt1, SGMT_T sgmt2, INT op_flag, enum f_cg_seg_status* seg_status )
    ２線分の交差状況(整数型)

    Params:
    - [in]  sgmt1           線分１
    - [in]  sgmt2           線分２
    - [in]  op_flag         ２線分の開・閉フラグ
                            - 0 ：２線分は開線分
                            - 1 ：２線分は閉線分
    - [out] seg_status      ２線分の交差状況
                            - F_CG_SGMT_CROSS       ：（内点同士で）交わる。
                            - F_CG_SGMT_OVERLAP ：２線分が部分的に重なる。ただし、２線分は一致しない
                            - F_CG_SGMT_COINCIDE    ：２線分が完全に一致する。
                            - F_CG_SGMT_TOUCH       ：(閉線分の場合のみ) 端点が他方の内点で接する。
                            - F_CG_SGMT_JOINT       ：(閉線分の場合のみ) 端点どうしで接する。ただし、２線分は一致しない。
                            - F_CG_SGMT_NOT_CROSS   ：それ以外（共通点はまったくない）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_2segments_cross_status(sgmt1, sgmt2, op_flag, seg_status):
    r"""INT FVALGAPI fnFIE_cg_2segments_cross_status( SGMT_T sgmt1, SGMT_T sgmt2, INT op_flag, enum f_cg_seg_status* seg_status )
    ２線分の交差状況(整数型)

    Params:
    - [in]  sgmt1           線分１
    - [in]  sgmt2           線分２
    - [in]  op_flag         ２線分の開・閉フラグ
                            - 0 ：２線分は開線分
                            - 1 ：２線分は閉線分
    - [out] seg_status      ２線分の交差状況
                            - F_CG_SGMT_CROSS       ：（内点同士で）交わる。
                            - F_CG_SGMT_OVERLAP ：２線分が部分的に重なる。ただし、２線分は一致しない
                            - F_CG_SGMT_COINCIDE    ：２線分が完全に一致する。
                            - F_CG_SGMT_TOUCH       ：(閉線分の場合のみ) 端点が他方の内点で接する。
                            - F_CG_SGMT_JOINT       ：(閉線分の場合のみ) 端点どうしで接する。ただし、２線分は一致しない。
                            - F_CG_SGMT_NOT_CROSS   ：それ以外（共通点はまったくない）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_2segments_cross_status(sgmt1, sgmt2, op_flag, seg_status)

def fnFIE_cg_2segments_cross_status_d(sgmt1, sgmt2, op_flag, seg_status) -> Any:
    r"""INT FVALGAPI fnFIE_cg_2segments_cross_status_d( DSGMT_T sgmt1, DSGMT_T sgmt2, INT op_flag, enum f_cg_seg_status* seg_status )
    ２線分の交差状況(浮動小数点型)

    Params:
    - [in]  sgmt1           線分１
    - [in]  sgmt2           線分２
    - [in]  op_flag         ２線分の開・閉フラグ
                            - 0 ：２線分は開線分
                            - 1 ：２線分は閉線分
    - [out] seg_status      ２線分の交差状況
                            - F_CG_SGMT_CROSS       ：（内点同士で）交わる。
                            - F_CG_SGMT_OVERLAP ：２線分が部分的に重なる。ただし、２線分は一致しない
                            - F_CG_SGMT_COINCIDE    ：２線分が完全に一致する。
                            - F_CG_SGMT_TOUCH       ：(閉線分の場合のみ) 端点が他方の内点で接する。
                            - F_CG_SGMT_JOINT       ：(閉線分の場合のみ) 端点どうしで接する。ただし、２線分は一致しない。
                            - F_CG_SGMT_NOT_CROSS   ：それ以外（共通点はまったくない）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_2segments_cross_status_d(sgmt1, sgmt2, op_flag, seg_status):
    r"""INT FVALGAPI fnFIE_cg_2segments_cross_status_d( DSGMT_T sgmt1, DSGMT_T sgmt2, INT op_flag, enum f_cg_seg_status* seg_status )
    ２線分の交差状況(浮動小数点型)

    Params:
    - [in]  sgmt1           線分１
    - [in]  sgmt2           線分２
    - [in]  op_flag         ２線分の開・閉フラグ
                            - 0 ：２線分は開線分
                            - 1 ：２線分は閉線分
    - [out] seg_status      ２線分の交差状況
                            - F_CG_SGMT_CROSS       ：（内点同士で）交わる。
                            - F_CG_SGMT_OVERLAP ：２線分が部分的に重なる。ただし、２線分は一致しない
                            - F_CG_SGMT_COINCIDE    ：２線分が完全に一致する。
                            - F_CG_SGMT_TOUCH       ：(閉線分の場合のみ) 端点が他方の内点で接する。
                            - F_CG_SGMT_JOINT       ：(閉線分の場合のみ) 端点どうしで接する。ただし、２線分は一致しない。
                            - F_CG_SGMT_NOT_CROSS   ：それ以外（共通点はまったくない）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_2segments_cross_status_d(sgmt1, sgmt2, op_flag, seg_status)

def fnFIE_cg_ordering_data_sort(pnts, pnt_num, ord_pnts, ord_pnt_num, org_to_ord, ord_to_org) -> Any:
    r"""INT FVALGAPI fnFIE_cg_ordering_data_sort( const PNT_T* pnts, INT pnt_num, PNT_T** ord_pnts, INT* ord_pnt_num, INT** org_to_ord, INT** ord_to_org )
    点データの辞書式順序ソートの実行

    Params:
    - [in]  pnts            入力元データ
    - [in]  pnt_num         入力元データの点の数(  pnts の要素数 )
    - [out] ord_pnts        ソートデータ配列
                            - 確保されている要素数：  pnt_num
                            - 有効な要素数：  ord_pnt_num
    - [out] ord_pnt_num     ソートデータの点の数(  ord_pnts の有効な要素数 )
    - [out] org_to_ord      元データ番号からソートデータ番号への変換表
                            - 確保されている要素数：  pnt_num
                            - 有効な要素数：  pnt_num
    - [out] ord_to_org      ソートデータ番号から元データ番号への変換表
                            - 確保されている要素数：  pnt_num
                            - 有効な要素数：  ord_pnt_num

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_ordering_data_sort(pnts, pnt_num, ord_pnts, ord_pnt_num, org_to_ord, ord_to_org):
    r"""INT FVALGAPI fnFIE_cg_ordering_data_sort( const PNT_T* pnts, INT pnt_num, PNT_T** ord_pnts, INT* ord_pnt_num, INT** org_to_ord, INT** ord_to_org )
    点データの辞書式順序ソートの実行

    Params:
    - [in]  pnts            入力元データ
    - [in]  pnt_num         入力元データの点の数(  pnts の要素数 )
    - [out] ord_pnts        ソートデータ配列
                            - 確保されている要素数：  pnt_num
                            - 有効な要素数：  ord_pnt_num
    - [out] ord_pnt_num     ソートデータの点の数(  ord_pnts の有効な要素数 )
    - [out] org_to_ord      元データ番号からソートデータ番号への変換表
                            - 確保されている要素数：  pnt_num
                            - 有効な要素数：  pnt_num
    - [out] ord_to_org      ソートデータ番号から元データ番号への変換表
                            - 確保されている要素数：  pnt_num
                            - 有効な要素数：  ord_pnt_num

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_ordering_data_sort(pnts, pnt_num, ord_pnts, ord_pnt_num, org_to_ord, ord_to_org)

def fnFIE_cg_enclosing_circle_calc(pnts, num, center, radius2) -> Any:
    r"""INT FVALGAPI fnFIE_cg_enclosing_circle_calc( const PNT_T* pnts, INT num, PNT_T* center, INT* radius2 )
    最小外接円の計算

    Params:
    - [in]  pnts        点群
    - [in]  num         点の数(  pnts の要素数)
    - [out] center      外接円中心
    - [out] radius2     外接円半径の２乗

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_enclosing_circle_calc(pnts, num, center, radius2):
    r"""INT FVALGAPI fnFIE_cg_enclosing_circle_calc( const PNT_T* pnts, INT num, PNT_T* center, INT* radius2 )
    最小外接円の計算

    Params:
    - [in]  pnts        点群
    - [in]  num         点の数(  pnts の要素数)
    - [out] center      外接円中心
    - [out] radius2     外接円半径の２乗

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_enclosing_circle_calc(pnts, num, center, radius2)

def fnFIE_cg_enclosing_circle_calc_d(pnts, num, center, radius2) -> Any:
    r"""INT FVALGAPI fnFIE_cg_enclosing_circle_calc_d( const DPNT_T* pnts, INT num, DPNT_T* center, DOUBLE* radius2 )
    最小外接円(最小包含円)の計算(浮動小数点型)

    Params:
    - [in]  pnts        点群
    - [in]  num         点の数(  pnts の要素数)
    - [out] center      包含円中心
    - [out] radius2     包含円半径の２乗

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_enclosing_circle_calc_d(pnts, num, center, radius2):
    r"""INT FVALGAPI fnFIE_cg_enclosing_circle_calc_d( const DPNT_T* pnts, INT num, DPNT_T* center, DOUBLE* radius2 )
    最小外接円(最小包含円)の計算(浮動小数点型)

    Params:
    - [in]  pnts        点群
    - [in]  num         点の数(  pnts の要素数)
    - [out] center      包含円中心
    - [out] radius2     包含円半径の２乗

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_enclosing_circle_calc_d(pnts, num, center, radius2)

def fnFIE_cg_empty_circle_calc(pnts, num, center, radius2) -> Any:
    r"""INT FVALGAPI fnFIE_cg_empty_circle_calc( const PNT_T* pnts, INT num, PNT_T* center, INT* radius2 )
    最大空円(最大内接円)の計算

    Params:
    - [in]  pnts        点群
    - [in]  num         点の数(  pnts の要素数)
    - [out] center      外接円中心
    - [out] radius2     外接円半径の２乗

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 点群によって生成された凸包の頂点が３点未満
                                - ヌルポインタが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能
                                - 凸包の内部に中心を持つ円が無い
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_empty_circle_calc(pnts, num, center, radius2):
    r"""INT FVALGAPI fnFIE_cg_empty_circle_calc( const PNT_T* pnts, INT num, PNT_T* center, INT* radius2 )
    最大空円(最大内接円)の計算

    Params:
    - [in]  pnts        点群
    - [in]  num         点の数(  pnts の要素数)
    - [out] center      外接円中心
    - [out] radius2     外接円半径の２乗

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 点群によって生成された凸包の頂点が３点未満
                                - ヌルポインタが渡された
    - F_ERR_CALC_IMPOSSIBLE 計算不能
                                - 凸包の内部に中心を持つ円が無い
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_empty_circle_calc(pnts, num, center, radius2)

def fnFIE_cg_convex_polygon_check(vrtx, num, convex_type) -> Any:
    r"""INT FVALGAPI fnFIE_cg_convex_polygon_check( const PNT_T* vrtx, INT num, INT* convex_type )
    多角形の凸性のチェック(整数型)

    Params:
    - [in]  vrtx            多角形の頂点
    - [in]  num             頂点数(  vrtx の要素数)
    - [out] convex_type     多角形の凸形状
                            - 0 多角形は凸ではない
                            - 1 多角形は凸である

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 頂点数が３未満
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_convex_polygon_check(vrtx, num, convex_type):
    r"""INT FVALGAPI fnFIE_cg_convex_polygon_check( const PNT_T* vrtx, INT num, INT* convex_type )
    多角形の凸性のチェック(整数型)

    Params:
    - [in]  vrtx            多角形の頂点
    - [in]  num             頂点数(  vrtx の要素数)
    - [out] convex_type     多角形の凸形状
                            - 0 多角形は凸ではない
                            - 1 多角形は凸である

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 頂点数が３未満
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_convex_polygon_check(vrtx, num, convex_type)

def fnFIE_cg_convex_polygon_check_d(vrtx, num, convex_type) -> Any:
    r"""INT FVALGAPI fnFIE_cg_convex_polygon_check_d( const DPNT_T* vrtx, INT num, INT* convex_type )
    多角形の凸性のチェック(浮動小数点型)

    Params:
    - [in]  vrtx            多角形の頂点
    - [in]  num             頂点数(  vrtx の要素数)
    - [out] convex_type     多角形の凸形状
                            - 0 多角形は凸ではない
                            - 1 多角形は凸である

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 頂点数が３未満
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_convex_polygon_check_d(vrtx, num, convex_type):
    r"""INT FVALGAPI fnFIE_cg_convex_polygon_check_d( const DPNT_T* vrtx, INT num, INT* convex_type )
    多角形の凸性のチェック(浮動小数点型)

    Params:
    - [in]  vrtx            多角形の頂点
    - [in]  num             頂点数(  vrtx の要素数)
    - [out] convex_type     多角形の凸形状
                            - 0 多角形は凸ではない
                            - 1 多角形は凸である

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 頂点数が３未満
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_convex_polygon_check_d(vrtx, num, convex_type)

def fnFIE_cg_simple_polygon_check(vrtx, num, simple_type) -> Any:
    r"""INT FVALGAPI fnFIE_cg_simple_polygon_check( const PNT_T* vrtx, INT num, INT* simple_type )
    多角形の単純性のチェック(整数型)

    Params:
    - [in]  vrtx            多角形の頂点
    - [in]  num             頂点数(  vrtx の要素数)
    - [out] simple_type     多角形の凸形状
                            - 0 多角形は単純ではない
                            - 1 多角形は単純である

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 頂点数が３未満
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_simple_polygon_check(vrtx, num, simple_type):
    r"""INT FVALGAPI fnFIE_cg_simple_polygon_check( const PNT_T* vrtx, INT num, INT* simple_type )
    多角形の単純性のチェック(整数型)

    Params:
    - [in]  vrtx            多角形の頂点
    - [in]  num             頂点数(  vrtx の要素数)
    - [out] simple_type     多角形の凸形状
                            - 0 多角形は単純ではない
                            - 1 多角形は単純である

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 頂点数が３未満
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_simple_polygon_check(vrtx, num, simple_type)

def fnFIE_cg_simple_polygon_check_d(vrtx, num, simple_type) -> Any:
    r"""INT FVALGAPI fnFIE_cg_simple_polygon_check_d( const DPNT_T* vrtx, INT num, INT* simple_type )
    多角形の単純性のチェック(浮動小数点型)

    Params:
    - [in]  vrtx            多角形の頂点
    - [in]  num             頂点数(  vrtx の要素数)
    - [out] simple_type     多角形の凸形状
                            - 0 多角形は単純ではない
                            - 1 多角形は単純である

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 頂点数が３未満
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_simple_polygon_check_d(vrtx, num, simple_type):
    r"""INT FVALGAPI fnFIE_cg_simple_polygon_check_d( const DPNT_T* vrtx, INT num, INT* simple_type )
    多角形の単純性のチェック(浮動小数点型)

    Params:
    - [in]  vrtx            多角形の頂点
    - [in]  num             頂点数(  vrtx の要素数)
    - [out] simple_type     多角形の凸形状
                            - 0 多角形は単純ではない
                            - 1 多角形は単純である

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 頂点数が３未満
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_simple_polygon_check_d(vrtx, num, simple_type)

def fnFIE_cg_polygon_area_calc(vrtx, num, area2) -> Any:
    r"""INT FVALGAPI fnFIE_cg_polygon_area_calc( const PNT_T* vrtx, INT num, INT* area2 )
    単純多角形の符号付面積(整数型)

    Params:
    - [in]  vrtx    多角形の頂点
    - [in]  num     頂点数(  vrtx の要素数)
    - [out] area2   単純多角形の符号付き面積の２倍値を返す

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 頂点列が単純多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_polygon_area_calc(vrtx, num, area2):
    r"""INT FVALGAPI fnFIE_cg_polygon_area_calc( const PNT_T* vrtx, INT num, INT* area2 )
    単純多角形の符号付面積(整数型)

    Params:
    - [in]  vrtx    多角形の頂点
    - [in]  num     頂点数(  vrtx の要素数)
    - [out] area2   単純多角形の符号付き面積の２倍値を返す

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 頂点列が単純多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_polygon_area_calc(vrtx, num, area2)

def fnFIE_cg_polygon_area_calc_d(vrtx, num, area) -> Any:
    r"""INT FVALGAPI fnFIE_cg_polygon_area_calc_d( const DPNT_T* vrtx, INT num, DOUBLE* area )
    単純多角形の符号付面積(浮動小数点型)

    Params:
    - [in]  vrtx    多角形の頂点
    - [in]  num     頂点数(  vrtx の要素数)
    - [out] area    単純多角形の符号付き面積を返す

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 頂点列が単純多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_polygon_area_calc_d(vrtx, num, area):
    r"""INT FVALGAPI fnFIE_cg_polygon_area_calc_d( const DPNT_T* vrtx, INT num, DOUBLE* area )
    単純多角形の符号付面積(浮動小数点型)

    Params:
    - [in]  vrtx    多角形の頂点
    - [in]  num     頂点数(  vrtx の要素数)
    - [out] area    単純多角形の符号付き面積を返す

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 頂点列が単純多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_polygon_area_calc_d(vrtx, num, area)

def fnFIE_cg_convex_polygon_diameter(vrtx, num, ans_pnt1, ans_pnt2, diameter) -> Any:
    r"""INT FVALGAPI fnFIE_cg_convex_polygon_diameter( const PNT_T* vrtx, INT num, INT* ans_pnt1, INT* ans_pnt2, INT* diameter )
    凸多角形に関する最遠点対問題(整数型)

    Params:
    - [in]  vrtx        凸多角形の頂点列
    - [in]  num         頂点数
    - [out] ans_pnt1    回答点の番号１(  vrtx の配列番号)
    - [out] ans_pnt2    回答点の番号２(  vrtx の配列番号)
    - [out] diameter    最も離れている２点の距離(集合の直径)の２乗

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータを渡した
    - F_ERR_CALC_IMPOSSIBLE 頂点列が凸多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_convex_polygon_diameter(vrtx, num, ans_pnt1, ans_pnt2, diameter):
    r"""INT FVALGAPI fnFIE_cg_convex_polygon_diameter( const PNT_T* vrtx, INT num, INT* ans_pnt1, INT* ans_pnt2, INT* diameter )
    凸多角形に関する最遠点対問題(整数型)

    Params:
    - [in]  vrtx        凸多角形の頂点列
    - [in]  num         頂点数
    - [out] ans_pnt1    回答点の番号１(  vrtx の配列番号)
    - [out] ans_pnt2    回答点の番号２(  vrtx の配列番号)
    - [out] diameter    最も離れている２点の距離(集合の直径)の２乗

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータを渡した
    - F_ERR_CALC_IMPOSSIBLE 頂点列が凸多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_convex_polygon_diameter(vrtx, num, ans_pnt1, ans_pnt2, diameter)

def fnFIE_cg_convex_polygon_diameter_d(vrtx, num, ans_pnt1, ans_pnt2, diameter) -> Any:
    r"""INT FVALGAPI fnFIE_cg_convex_polygon_diameter_d( const DPNT_T* vrtx, INT num, INT* ans_pnt1, INT* ans_pnt2, DOUBLE* diameter )
    凸多角形に関する最遠点対問題(浮動小数点型)

    Params:
    - [in]  vrtx        凸多角形の頂点列
    - [in]  num         頂点数
    - [out] ans_pnt1    回答点の番号１(  vrtx の配列番号)
    - [out] ans_pnt2    回答点の番号２(  vrtx の配列番号)
    - [out] diameter    最も離れている２点の距離(集合の直径)の２乗

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータを渡した
    - F_ERR_CALC_IMPOSSIBLE 頂点列が凸多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_convex_polygon_diameter_d(vrtx, num, ans_pnt1, ans_pnt2, diameter):
    r"""INT FVALGAPI fnFIE_cg_convex_polygon_diameter_d( const DPNT_T* vrtx, INT num, INT* ans_pnt1, INT* ans_pnt2, DOUBLE* diameter )
    凸多角形に関する最遠点対問題(浮動小数点型)

    Params:
    - [in]  vrtx        凸多角形の頂点列
    - [in]  num         頂点数
    - [out] ans_pnt1    回答点の番号１(  vrtx の配列番号)
    - [out] ans_pnt2    回答点の番号２(  vrtx の配列番号)
    - [out] diameter    最も離れている２点の距離(集合の直径)の２乗

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータを渡した
    - F_ERR_CALC_IMPOSSIBLE 頂点列が凸多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_convex_polygon_diameter_d(vrtx, num, ans_pnt1, ans_pnt2, diameter)

def fnFIE_cg_pos_point_to_convex_polygon(pnt, vrtx, num, pos) -> Any:
    r"""INT FVALGAPI fnFIE_cg_pos_point_to_convex_polygon( PNT_T pnt, const PNT_T* vrtx, INT num, enum f_cg_pnt_pos* pos )
    点の凸多角形に対する位置判定

    Params:
    - [in]      pnt     位置判定したい点
    - [in]      vrtx    凸多角形の頂点列
    - [in]      num     多角形の頂点数(  vetx の要素数)
    - [out]     pos     凸多角形に対する点の位置
                        - F_CG_INNER_PNT     点が多角形の内部にある(境界上は含まない)
                        - F_CG_OUTER_PNT     点が多角形の外部にある(境界上は含まない)
                        - F_CG_BOUNDARY_PNT  点が多角形の辺(境界)上にある

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された(頂点数が３未満)
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 頂点列が凸多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_pos_point_to_convex_polygon(pnt, vrtx, num, pos):
    r"""INT FVALGAPI fnFIE_cg_pos_point_to_convex_polygon( PNT_T pnt, const PNT_T* vrtx, INT num, enum f_cg_pnt_pos* pos )
    点の凸多角形に対する位置判定

    Params:
    - [in]      pnt     位置判定したい点
    - [in]      vrtx    凸多角形の頂点列
    - [in]      num     多角形の頂点数(  vetx の要素数)
    - [out]     pos     凸多角形に対する点の位置
                        - F_CG_INNER_PNT     点が多角形の内部にある(境界上は含まない)
                        - F_CG_OUTER_PNT     点が多角形の外部にある(境界上は含まない)
                        - F_CG_BOUNDARY_PNT  点が多角形の辺(境界)上にある

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された(頂点数が３未満)
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 頂点列が凸多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_pos_point_to_convex_polygon(pnt, vrtx, num, pos)

def fnFIE_cg_pos_point_to_simple_polygon(pnt, vrtx, num, pos) -> Any:
    r"""INT FVALGAPI fnFIE_cg_pos_point_to_simple_polygon( PNT_T pnt, const PNT_T* vrtx, INT num, enum f_cg_pnt_pos* pos )
    点の単純多角形に対する位置判定

    Params:
    - [in]      pnt     位置判定したい点
    - [in]      vrtx    単純多角形の頂点列
    - [in]      num     多角形の頂点数(  vetx の要素数)
    - [out]     pos     凸多角形に対する点の位置
                        - F_CG_INNER_PNT     点が多角形の内部にある(境界上は含まない)
                        - F_CG_OUTER_PNT     点が多角形の外部にある(境界上は含まない)
                        - F_CG_BOUNDARY_PNT  点が多角形の辺(境界)上にある

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された(頂点数が３未満)
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不能
                                - 頂点列が単純多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_pos_point_to_simple_polygon(pnt, vrtx, num, pos):
    r"""INT FVALGAPI fnFIE_cg_pos_point_to_simple_polygon( PNT_T pnt, const PNT_T* vrtx, INT num, enum f_cg_pnt_pos* pos )
    点の単純多角形に対する位置判定

    Params:
    - [in]      pnt     位置判定したい点
    - [in]      vrtx    単純多角形の頂点列
    - [in]      num     多角形の頂点数(  vetx の要素数)
    - [out]     pos     凸多角形に対する点の位置
                        - F_CG_INNER_PNT     点が多角形の内部にある(境界上は含まない)
                        - F_CG_OUTER_PNT     点が多角形の外部にある(境界上は含まない)
                        - F_CG_BOUNDARY_PNT  点が多角形の辺(境界)上にある

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された(頂点数が３未満)
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不能
                                - 頂点列が単純多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_pos_point_to_simple_polygon(pnt, vrtx, num, pos)

def fnFIE_cg_points_in_convex_polygon(vrtx, vrtx_num, pnts, pnt_num, bndry_flag, ans_pnt_no, ans_pnt_num) -> Any:
    r"""INT FVALGAPI fnFIE_cg_points_in_convex_polygon( const PNT_T* vrtx, INT vrtx_num, const PNT_T* pnts, INT pnt_num, INT bndry_flag, INT** ans_pnt_no, INT* ans_pnt_num )
    凸多角形内部点列挙の実行

    Params:
    - [in]  vrtx        凸多角形の頂点列
    - [in]  vrtx_num    多角形の頂点数(  vrtx の要素数)
    - [in]  pnts        内部点を判定する点集合
                                このデータは順序データで有る必要はなく、また重複点が合ってもかまわない
    - [in]  pnt_num     点集合の点の数(  pnts の要素数)
    - [in]  bndry_flag  境界フラグ
                           - ON   境界上の点を内部の点として回答に含める
                           - OFF  境界上の点は外部の点として、回答に含めない
    - [out] ans_pnt_no  内部にある点の番号列の先頭ポインタ。
                            ここでの番号とは、配列 pnts での要素番号を指す
    - [out] ans_pnt_num 内部点の数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不能
                                - 頂点列が凸多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_points_in_convex_polygon(vrtx, vrtx_num, pnts, pnt_num, bndry_flag, ans_pnt_no, ans_pnt_num):
    r"""INT FVALGAPI fnFIE_cg_points_in_convex_polygon( const PNT_T* vrtx, INT vrtx_num, const PNT_T* pnts, INT pnt_num, INT bndry_flag, INT** ans_pnt_no, INT* ans_pnt_num )
    凸多角形内部点列挙の実行

    Params:
    - [in]  vrtx        凸多角形の頂点列
    - [in]  vrtx_num    多角形の頂点数(  vrtx の要素数)
    - [in]  pnts        内部点を判定する点集合
                                このデータは順序データで有る必要はなく、また重複点が合ってもかまわない
    - [in]  pnt_num     点集合の点の数(  pnts の要素数)
    - [in]  bndry_flag  境界フラグ
                           - ON   境界上の点を内部の点として回答に含める
                           - OFF  境界上の点は外部の点として、回答に含めない
    - [out] ans_pnt_no  内部にある点の番号列の先頭ポインタ。
                            ここでの番号とは、配列 pnts での要素番号を指す
    - [out] ans_pnt_num 内部点の数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不能
                                - 頂点列が凸多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_points_in_convex_polygon(vrtx, vrtx_num, pnts, pnt_num, bndry_flag, ans_pnt_no, ans_pnt_num)

def fnFIE_cg_points_in_simple_polygon(vrtx, vrtx_num, pnts, pnt_num, bndry_flag, ans_pnt_no, ans_pnt_num) -> Any:
    r"""INT FVALGAPI fnFIE_cg_points_in_simple_polygon( const PNT_T* vrtx, INT vrtx_num, const PNT_T* pnts, INT pnt_num, INT bndry_flag, INT** ans_pnt_no, INT* ans_pnt_num )
    単純多角形内部点列挙の実行

    Params:
    - [in]  vrtx        凸多角形の頂点列
    - [in]  vrtx_num    多角形の頂点数(  vrtx の要素数)
    - [in]  pnts        内部点を判定する点集合
                                このデータは順序データで有る必要はなく、また重複点が合ってもかまわない
    - [in]  pnt_num     点集合の点の数(  pnts の要素数)
    - [in]  bndry_flag  境界フラグ
                           - ON 境界上の点も内部点と見なす
                           - OFF 境界上の点は内部点とは見なさない
    - [out] ans_pnt_no  内部にある点の番号列の先頭ポインタ。
                            ここでの番号とは、配列 pnts での要素番号を指す
    - [out] ans_pnt_num 内部点の数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 頂点列が単純多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_points_in_simple_polygon(vrtx, vrtx_num, pnts, pnt_num, bndry_flag, ans_pnt_no, ans_pnt_num):
    r"""INT FVALGAPI fnFIE_cg_points_in_simple_polygon( const PNT_T* vrtx, INT vrtx_num, const PNT_T* pnts, INT pnt_num, INT bndry_flag, INT** ans_pnt_no, INT* ans_pnt_num )
    単純多角形内部点列挙の実行

    Params:
    - [in]  vrtx        凸多角形の頂点列
    - [in]  vrtx_num    多角形の頂点数(  vrtx の要素数)
    - [in]  pnts        内部点を判定する点集合
                                このデータは順序データで有る必要はなく、また重複点が合ってもかまわない
    - [in]  pnt_num     点集合の点の数(  pnts の要素数)
    - [in]  bndry_flag  境界フラグ
                           - ON 境界上の点も内部点と見なす
                           - OFF 境界上の点は内部点とは見なさない
    - [out] ans_pnt_no  内部にある点の番号列の先頭ポインタ。
                            ここでの番号とは、配列 pnts での要素番号を指す
    - [out] ans_pnt_num 内部点の数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 頂点列が単純多角形ではないため、計算不能（頂点数が３以上の場合）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_points_in_simple_polygon(vrtx, vrtx_num, pnts, pnt_num, bndry_flag, ans_pnt_no, ans_pnt_num)

def fnFIE_cg_voronoi_open(pnts, num, sx, sy, ex, ey) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_cg_voronoi_open( const PNT_T* pnts, INT num, INT sx, INT sy, INT ex, INT ey )
    ２次元ボロノイ図のオープン

    Params:
    - [in]  pnts    入力母点群
    - [in]  num     入力母点数(  pnts の要素数)
    - [in]  sx      ボロノイ図有効領域左上Ｘ座標
    - [in]  sy      ボロノイ図有効領域左上Ｙ座標
    - [in]  ex      ボロノイ図有効領域右下Ｘ座標
    - [in]  ey      ボロノイ図有効領域右下Ｙ座標

    Returns:
    - 正常に終了した場合は、デスクリプタを返します。
                メモリ確保に失敗や不正なパラメータが与えられた場合、
                ライセンスエラー、または未初期化エラーが発生した場合など、異常終了した場合はNULLを返します。
    """
    raise NotImplementedError

def cg_voronoi_open(pnts, num, sx, sy, ex, ey):
    r"""FHANDLE FVALGAPI fnFIE_cg_voronoi_open( const PNT_T* pnts, INT num, INT sx, INT sy, INT ex, INT ey )
    ２次元ボロノイ図のオープン

    Params:
    - [in]  pnts    入力母点群
    - [in]  num     入力母点数(  pnts の要素数)
    - [in]  sx      ボロノイ図有効領域左上Ｘ座標
    - [in]  sy      ボロノイ図有効領域左上Ｙ座標
    - [in]  ex      ボロノイ図有効領域右下Ｘ座標
    - [in]  ey      ボロノイ図有効領域右下Ｙ座標

    Returns:
    - 正常に終了した場合は、デスクリプタを返します。
                メモリ確保に失敗や不正なパラメータが与えられた場合、
                ライセンスエラー、または未初期化エラーが発生した場合など、異常終了した場合はNULLを返します。
    """

    return _fie.fnFIE_cg_voronoi_open(pnts, num, sx, sy, ex, ey)

def fnFIE_cg_voronoi_close(hvrni) -> Any:
    r"""void fnFIE_cg_voronoi_close( FHANDLE hvrni )
    ２次元ボロノイ図のクローズ

    Params:
    - [in]  hvrni   ２次元ボロノイ図のハンドル

    Returns:
    """
    raise NotImplementedError

def cg_voronoi_close(hvrni):
    r"""void fnFIE_cg_voronoi_close( FHANDLE hvrni )
    ２次元ボロノイ図のクローズ

    Params:
    - [in]  hvrni   ２次元ボロノイ図のハンドル

    Returns:
    """

    return _fie.fnFIE_cg_voronoi_close(hvrni)

def fnFIE_cg_voronoi_copy(hvrni) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_cg_voronoi_copy( FHANDLE hvrni )
    ２次元ボロノイ図のコピー

    Params:
    - [in]  hvrni   コピーする２次元ボロノイ図のハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """
    raise NotImplementedError

def cg_voronoi_copy(hvrni):
    r"""FHANDLE FVALGAPI fnFIE_cg_voronoi_copy( FHANDLE hvrni )
    ２次元ボロノイ図のコピー

    Params:
    - [in]  hvrni   コピーする２次元ボロノイ図のハンドル

    Returns:
    - 正常終了にはコピーされたハンドルが返ります。
            異常終了時には NULL を返します。
    """

    return _fie.fnFIE_cg_voronoi_copy(hvrni)

def fnFIE_cg_voronoi_nearest_gnrt(hvrni, pnt, near_gnrt_no) -> Any:
    r"""INT FVALGAPI fnFIE_cg_voronoi_nearest_gnrt( FHANDLE hvrni, PNT_T pnt, INT* near_gnrt_no )
    最も近い入力点（母点）の探索

    Params:
    - [in]  hvrni           ２次元ボロノイ図のハンドル
    - [in]  pnt             調査点
    - [out] near_gnrt_no    最近母点の番号

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
                                - オブジェクトがボロノイ図ではない
                                - オープンが完了していないか
                                - ボロノイ図が作成されていないか
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 調査点がボロノイ図の有効範囲に入っていない
                                -  near_gnrt_no にヌルポインタが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_voronoi_nearest_gnrt(hvrni, pnt, near_gnrt_no):
    r"""INT FVALGAPI fnFIE_cg_voronoi_nearest_gnrt( FHANDLE hvrni, PNT_T pnt, INT* near_gnrt_no )
    最も近い入力点（母点）の探索

    Params:
    - [in]  hvrni           ２次元ボロノイ図のハンドル
    - [in]  pnt             調査点
    - [out] near_gnrt_no    最近母点の番号

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
                                - オブジェクトがボロノイ図ではない
                                - オープンが完了していないか
                                - ボロノイ図が作成されていないか
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 調査点がボロノイ図の有効範囲に入っていない
                                -  near_gnrt_no にヌルポインタが渡された
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_voronoi_nearest_gnrt(hvrni, pnt, near_gnrt_no)

def fnFIE_cg_voronoi_get_gnrt_info(hvrni, gnrt_no, info) -> Any:
    r"""INT FVALGAPI fnFIE_cg_voronoi_get_gnrt_info( FHANDLE hvrni, INT gnrt_no, F_CG_VG_INFO** info )
    ２次元ボロノイ図の各母点に関する情報の取得

    Params:
    - [in]  hvrni       ２次元ボロノイ図のハンドル
    - [in]  gnrt_no     調査母点番号
    - [out] info        母点情報構造体

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
                                - オブジェクトがボロノイ図ではない
                                - オープンが完了していないか
                                - ボロノイ図が作成されていないか
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 調査点がボロノイ図の有効範囲に入っていない
                                -  info にヌルポインタが渡された
                                -  *info がNULLで初期化されていない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_voronoi_get_gnrt_info(hvrni, gnrt_no, info):
    r"""INT FVALGAPI fnFIE_cg_voronoi_get_gnrt_info( FHANDLE hvrni, INT gnrt_no, F_CG_VG_INFO** info )
    ２次元ボロノイ図の各母点に関する情報の取得

    Params:
    - [in]  hvrni       ２次元ボロノイ図のハンドル
    - [in]  gnrt_no     調査母点番号
    - [out] info        母点情報構造体

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  不正なオブジェクトが渡された
                                - オブジェクトがボロノイ図ではない
                                - オープンが完了していないか
                                - ボロノイ図が作成されていないか
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                - 調査点がボロノイ図の有効範囲に入っていない
                                -  info にヌルポインタが渡された
                                -  *info がNULLで初期化されていない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_voronoi_get_gnrt_info(hvrni, gnrt_no, info)

def fnFIE_edge1d_projection_line(hsrc, line, prj_width, pprj, prj_len, valid_reg) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_projection_line( FHANDLE hsrc, DSGMT_T line, INT prj_width, DOUBLE* pprj, INT prj_len, F_ARRAY_INDEX* valid_reg )
    計測ライン(線分)上の濃度投影の作成

    Params:
    - [in]  hsrc        入力画像（type:uc8,s16,us16,double / ch:1）
    - [in]  line        計測ライン(線分)
                        -  st   始点
                        -  ed   終点
    - [in]  prj_width   濃度投影片幅(0以上、単位：画素)
    - [out] pprj        濃度プロファイル配列
    - [in]  prj_len     濃度プロファイル配列の長さ
                        -  prj_len >= fnFIE_edge1d_calc_projection_line_length()
    - [out] valid_reg   濃度プロファイルの有効領域
                        - index 要素番号：濃度プロファイル配列の原点からのオフセット量
                        - size  長さ  ：有効領域の長さ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pprj または  valid_reg が NULL
                                -  prj_width < 0
                                -  prj_len < fnFIE_edge1d_calc_projection_line_length()
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_projection_line(hsrc, line, prj_width, pprj, prj_len, valid_reg):
    r"""INT FVALGAPI fnFIE_edge1d_projection_line( FHANDLE hsrc, DSGMT_T line, INT prj_width, DOUBLE* pprj, INT prj_len, F_ARRAY_INDEX* valid_reg )
    計測ライン(線分)上の濃度投影の作成

    Params:
    - [in]  hsrc        入力画像（type:uc8,s16,us16,double / ch:1）
    - [in]  line        計測ライン(線分)
                        -  st   始点
                        -  ed   終点
    - [in]  prj_width   濃度投影片幅(0以上、単位：画素)
    - [out] pprj        濃度プロファイル配列
    - [in]  prj_len     濃度プロファイル配列の長さ
                        -  prj_len >= fnFIE_edge1d_calc_projection_line_length()
    - [out] valid_reg   濃度プロファイルの有効領域
                        - index 要素番号：濃度プロファイル配列の原点からのオフセット量
                        - size  長さ  ：有効領域の長さ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pprj または  valid_reg が NULL
                                -  prj_width < 0
                                -  prj_len < fnFIE_edge1d_calc_projection_line_length()
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_edge1d_projection_line(hsrc, line, prj_width, pprj, prj_len, valid_reg)

def fnFIE_edge1d_projection_arc(hsrc, arc, prj_width, pprj, prj_len, valid_reg, vreg_len, prj_num) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_projection_arc( FHANDLE hsrc, F_ARC arc, INT prj_width, DOUBLE* pprj, INT prj_len, F_ARRAY_INDEX* valid_reg, INT vreg_len, INT* prj_num )
    計測ライン(円弧)上の濃度投影による濃度プロファイルの作成

    Params:
    - [in]  hsrc        入力画像（type:uc8,s16,us16,double / ch:1）
    - [in]  arc         計測ライン(円弧)
                        -  x            中心ｘ座標
                        -  y            中心ｙ座標
                        -  radius       半径：0 <  radius
                        -  start_angle  開始角：[0, $2\pi$]
                        -  sweep_angle  円弧の角度
                                - 時計回り      正
                                - 反時計回り 負
    - [in]  prj_width   濃度投影片幅(0以上、単位：画素)
    - [out] pprj        濃度プロファイル配列
    - [in]  prj_len     濃度プロファイル配列の長さ
                        -  prj_len >= fnFIE_edge1d_calc_projection_arc_length()
    - [out] valid_reg   濃度プロファイルの有効領域配列
                        - index 要素番号：濃度プロファイル配列の原点からのオフセット量
                        - size  長さ  ：有効領域の長さ
    - [in]  vreg_len    濃度プロファイルの有効領域配列の長さ
                        -  ( ( INT )( fnFIE_edge1d_calc_projection_arc_length() / 2 ) + 1 ) 以上
    - [out] prj_num     濃度プロファイル配列の有効領域個数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pprj,   valid_reg または  prj_num が NULL
                                -  prj_width < 0
                                -  arc が不正な値
                                -  prj_len < fnFIE_edge1d_calc_projection_line_length()
                                -  vreg_len < ( ( INT )( fnFIE_edge1d_calc_projection_arc_length() / 2 ) + 1 )
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_projection_arc(hsrc, arc, prj_width, pprj, prj_len, valid_reg, vreg_len, prj_num):
    r"""INT FVALGAPI fnFIE_edge1d_projection_arc( FHANDLE hsrc, F_ARC arc, INT prj_width, DOUBLE* pprj, INT prj_len, F_ARRAY_INDEX* valid_reg, INT vreg_len, INT* prj_num )
    計測ライン(円弧)上の濃度投影による濃度プロファイルの作成

    Params:
    - [in]  hsrc        入力画像（type:uc8,s16,us16,double / ch:1）
    - [in]  arc         計測ライン(円弧)
                        -  x            中心ｘ座標
                        -  y            中心ｙ座標
                        -  radius       半径：0 <  radius
                        -  start_angle  開始角：[0, $2\pi$]
                        -  sweep_angle  円弧の角度
                                - 時計回り      正
                                - 反時計回り 負
    - [in]  prj_width   濃度投影片幅(0以上、単位：画素)
    - [out] pprj        濃度プロファイル配列
    - [in]  prj_len     濃度プロファイル配列の長さ
                        -  prj_len >= fnFIE_edge1d_calc_projection_arc_length()
    - [out] valid_reg   濃度プロファイルの有効領域配列
                        - index 要素番号：濃度プロファイル配列の原点からのオフセット量
                        - size  長さ  ：有効領域の長さ
    - [in]  vreg_len    濃度プロファイルの有効領域配列の長さ
                        -  ( ( INT )( fnFIE_edge1d_calc_projection_arc_length() / 2 ) + 1 ) 以上
    - [out] prj_num     濃度プロファイル配列の有効領域個数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pprj,   valid_reg または  prj_num が NULL
                                -  prj_width < 0
                                -  arc が不正な値
                                -  prj_len < fnFIE_edge1d_calc_projection_line_length()
                                -  vreg_len < ( ( INT )( fnFIE_edge1d_calc_projection_arc_length() / 2 ) + 1 )
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_edge1d_projection_arc(hsrc, arc, prj_width, pprj, prj_len, valid_reg, vreg_len, prj_num)

def fnFIE_edge1d_calc_projection_line_length(line, length) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_calc_projection_line_length( DSGMT_T line, INT* length )
    計測ライン(線分)の長さを計算

    Params:
    - [in]  line    計測ライン(線分)
                    -  st   始点
                    -  ed   終点
    - [out] length  濃度プロファイルの長さ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  length が NULL
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_calc_projection_line_length(line, length):
    r"""INT FVALGAPI fnFIE_edge1d_calc_projection_line_length( DSGMT_T line, INT* length )
    計測ライン(線分)の長さを計算

    Params:
    - [in]  line    計測ライン(線分)
                    -  st   始点
                    -  ed   終点
    - [out] length  濃度プロファイルの長さ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  length が NULL
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_edge1d_calc_projection_line_length(line, length)

def fnFIE_edge1d_calc_projection_arc_length(arc, length) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_calc_projection_arc_length( F_ARC arc, INT* length )
    計測ライン(円弧)の長さを計算

    Params:
    - [in]  arc     計測ライン(円弧)
                    -  x            中心ｘ座標
                    -  y            中心ｙ座標
                    -  radius       半径：0 <  radius
                    -  start_angle  開始角：[0, $2\pi$]
                    -  sweep_angle  円弧の角度
                            - 時計回り      正
                            - 反時計回り 負
    - [out] length  濃度プロファイルの長さ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  length が NULL
                                -  arc が不正な値
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_calc_projection_arc_length(arc, length):
    r"""INT FVALGAPI fnFIE_edge1d_calc_projection_arc_length( F_ARC arc, INT* length )
    計測ライン(円弧)の長さを計算

    Params:
    - [in]  arc     計測ライン(円弧)
                    -  x            中心ｘ座標
                    -  y            中心ｙ座標
                    -  radius       半径：0 <  radius
                    -  start_angle  開始角：[0, $2\pi$]
                    -  sweep_angle  円弧の角度
                            - 時計回り      正
                            - 反時計回り 負
    - [out] length  濃度プロファイルの長さ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  length が NULL
                                -  arc が不正な値
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_edge1d_calc_projection_arc_length(arc, length)

def fnFIE_edge1d_detect_edges_DoG(pprj, prj_len, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_len, edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_detect_edges_DoG( const DOUBLE* pprj, INT prj_len, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE* edges, INT edge_len, INT* edge_num )
    DoGフィルタによるエッジ検出

    Params:
    - [in]      pprj            濃度プロファイル配列
    - [in]      prj_len         濃度プロファイル配列の長さ
                                -  prj_len >= 9
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列
                                - x ｘ座標
                                - y ｙ座標（必ず0となる）
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in]      edge_len        エッジ点配列の長さ
                                -   edge_len >=  prj_len
    - [out]     edge_num        検出されたエッジ点個数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pprj ,  edges または  edge_num が NULL
                                -  direct_mode ,  diff_type,  diff_thr または sort_mode が不正な値
                                -  prj_len >  edge_len
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_detect_edges_DoG(pprj, prj_len, direct_mode=F_DTC_BOTH, diff_type=F_RELATIVE_THR, diff_thr=75, sort_mode=F_MAG_SORT, edges=REQUIRED_PLACEHOLDER, edge_len=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_edge1d_detect_edges_DoG( const DOUBLE* pprj, INT prj_len, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE* edges, INT edge_len, INT* edge_num )
    DoGフィルタによるエッジ検出

    Params:
    - [in]      pprj            濃度プロファイル配列
    - [in]      prj_len         濃度プロファイル配列の長さ
                                -  prj_len >= 9
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列
                                - x ｘ座標
                                - y ｙ座標（必ず0となる）
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in]      edge_len        エッジ点配列の長さ
                                -   edge_len >=  prj_len
    - [out]     edge_num        検出されたエッジ点個数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pprj ,  edges または  edge_num が NULL
                                -  direct_mode ,  diff_type,  diff_thr または sort_mode が不正な値
                                -  prj_len >  edge_len
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_len is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_len' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_edge1d_detect_edges_DoG(pprj, prj_len, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_len, edge_num)

def fnFIE_edge1d_detect_edges_corr(pprj, prj_len, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_len, edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_detect_edges_corr( const DOUBLE* pprj, INT prj_len, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE* edges, INT edge_len, INT* edge_num )
    相関エッジフィルタによるエッジ検出

    Params:
    - [in]      pprj            濃度プロファイル配列
    - [in]      prj_len         濃度プロファイル配列の長さ
                                -  prj_len >= 9
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列
                                - x ｘ座標
                                - y ｙ座標（必ず0となる）
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in]      edge_len        エッジ点配列の長さ
                                -  edge_len >=  prj_len
    - [out]     edge_num        検出されたエッジ点個数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pprj ,  edges または  edge_num が NULL
                                -  direct_mode ,  diff_type,  diff_thr または sort_mode が不正な値
                                -  prj_len >  edge_len
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_detect_edges_corr(pprj, prj_len, direct_mode=F_DTC_BOTH, diff_type=F_RELATIVE_THR, diff_thr=75, sort_mode=F_MAG_SORT, edges=REQUIRED_PLACEHOLDER, edge_len=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_edge1d_detect_edges_corr( const DOUBLE* pprj, INT prj_len, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE* edges, INT edge_len, INT* edge_num )
    相関エッジフィルタによるエッジ検出

    Params:
    - [in]      pprj            濃度プロファイル配列
    - [in]      prj_len         濃度プロファイル配列の長さ
                                -  prj_len >= 9
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列
                                - x ｘ座標
                                - y ｙ座標（必ず0となる）
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in]      edge_len        エッジ点配列の長さ
                                -  edge_len >=  prj_len
    - [out]     edge_num        検出されたエッジ点個数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pprj ,  edges または  edge_num が NULL
                                -  direct_mode ,  diff_type,  diff_thr または sort_mode が不正な値
                                -  prj_len >  edge_len
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_len is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_len' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_edge1d_detect_edges_corr(pprj, prj_len, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_len, edge_num)

def fnFIE_edge1d_detect_edges_diff(pprj, prj_len, diff_filter, arnd, interval, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_len, edge_num, diff, diff_len) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_detect_edges_diff( const DOUBLE* pprj, INT prj_len, F_EDGE1D_DIFF_FILTER diff_filter, INT arnd, INT interval, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE* edges, INT edge_len, INT* edge_num, INT* diff, INT diff_len )
    １次微分によるエッジ検出

    Params:
    - [in]      pprj            濃度プロファイル配列
    - [in]      prj_len         濃度プロファイル配列の長さ
                                -  prj_lne >=
                                        (  arnd +  diff_filter.minus_foot +  diff_filter.minus_len +  diff_filter.plus_len +  diff_filter.plus_foot +  arnd )
    - [in]      diff_filter     微分フィルタの指定
                                - minus_foot    負側のfoot長さ（1以上）
                                - minus_len 負側のlen長さ（0以上）
                                - plus_foot 正側のfoot長さ（1以上）
                                - plus_len  正側のlen長さ（0以上）
    - [in]      arnd            サブピクセル計算に使用する周辺情報の片幅（0以上）
                                    検出した濃度微分データのピーク位置（または、または最初にしきい値を超えた位置）に対して、
                                    ここで指定した画素分の両端の濃度微分データを使用してサブピクセル精度の計算をする
    - [in]      interval        エッジ取得間隔（0以上）
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列のポインタ
                                - x ｘ座標
                                - y ｙ座標（必ず0となる）
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in]      edge_len        エッジ点配列の長さ
                                -  edge_len >=  prj_len
    - [out]     edge_num        検出されたエッジ点個数
    - [out]     diff            １次微分データ（必要ない場合はNULL）
    - [in]      diff_len        １次微分データの長さ
                                -  diff_len >=  prj_len

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pprj ,  edges または  edge_num が NULL
                                -  diff_filter ,  arnd または  interval が不正な値
                                -  direct_mode ,  diff_type,  diff_thr または sort_mode が不正な値
                                -  prj_len >  edge_len
                                -  diff または  diff_len が不正な値
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_detect_edges_diff(pprj, prj_len, diff_filter=(1, 0, 1, 0), arnd=2, interval=0, direct_mode=F_DTC_BOTH, diff_type=F_RELATIVE_THR, diff_thr=75, sort_mode=F_MAG_SORT, edges=REQUIRED_PLACEHOLDER, edge_len=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER, diff=None, diff_len=-1):
    r"""INT FVALGAPI fnFIE_edge1d_detect_edges_diff( const DOUBLE* pprj, INT prj_len, F_EDGE1D_DIFF_FILTER diff_filter, INT arnd, INT interval, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE* edges, INT edge_len, INT* edge_num, INT* diff, INT diff_len )
    １次微分によるエッジ検出

    Params:
    - [in]      pprj            濃度プロファイル配列
    - [in]      prj_len         濃度プロファイル配列の長さ
                                -  prj_lne >=
                                        (  arnd +  diff_filter.minus_foot +  diff_filter.minus_len +  diff_filter.plus_len +  diff_filter.plus_foot +  arnd )
    - [in]      diff_filter     微分フィルタの指定
                                - minus_foot    負側のfoot長さ（1以上）
                                - minus_len 負側のlen長さ（0以上）
                                - plus_foot 正側のfoot長さ（1以上）
                                - plus_len  正側のlen長さ（0以上）
    - [in]      arnd            サブピクセル計算に使用する周辺情報の片幅（0以上）
                                    検出した濃度微分データのピーク位置（または、または最初にしきい値を超えた位置）に対して、
                                    ここで指定した画素分の両端の濃度微分データを使用してサブピクセル精度の計算をする
    - [in]      interval        エッジ取得間隔（0以上）
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列のポインタ
                                - x ｘ座標
                                - y ｙ座標（必ず0となる）
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in]      edge_len        エッジ点配列の長さ
                                -  edge_len >=  prj_len
    - [out]     edge_num        検出されたエッジ点個数
    - [out]     diff            １次微分データ（必要ない場合はNULL）
    - [in]      diff_len        １次微分データの長さ
                                -  diff_len >=  prj_len

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  pprj ,  edges または  edge_num が NULL
                                -  diff_filter ,  arnd または  interval が不正な値
                                -  direct_mode ,  diff_type,  diff_thr または sort_mode が不正な値
                                -  prj_len >  edge_len
                                -  diff または  diff_len が不正な値
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_len is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_len' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_edge1d_detect_edges_diff(pprj, prj_len, diff_filter, arnd, interval, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_len, edge_num, diff, diff_len)

def fnFIE_edge1d_trans_coord_line(edges, edge_num, line, offset) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_trans_coord_line( F_DEDGE* edges, INT edge_num, DSGMT_T line, INT offset )
    計測ライン(線分)上への座標変換

    Params:
    - [in,out]  edges       検出されたエッジ点保存配列のポインタ
                            - x ｘ座標
                            - y ｙ座標
                            - q 勾配方向
                                    - 暗→明のエッジ   1
                                    - 明→暗のエッジ   -1
                            - mag   強度（0以上）
    - [in]      edge_num    検出されたエッジ点個数（0以上）
    - [in]      line        計測ライン(線分)
                            -  st   始点
                            -  ed   終点
    - [in]      offset      濃度プロファイル配列の要素番号の始点からのオフセット量（0以上）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  edges が NULL
                                -  edge_num または  offset が負
                                - fnFIE_edge1d_projection_line() <= 1
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_trans_coord_line(edges, edge_num, line, offset=0):
    r"""INT FVALGAPI fnFIE_edge1d_trans_coord_line( F_DEDGE* edges, INT edge_num, DSGMT_T line, INT offset )
    計測ライン(線分)上への座標変換

    Params:
    - [in,out]  edges       検出されたエッジ点保存配列のポインタ
                            - x ｘ座標
                            - y ｙ座標
                            - q 勾配方向
                                    - 暗→明のエッジ   1
                                    - 明→暗のエッジ   -1
                            - mag   強度（0以上）
    - [in]      edge_num    検出されたエッジ点個数（0以上）
    - [in]      line        計測ライン(線分)
                            -  st   始点
                            -  ed   終点
    - [in]      offset      濃度プロファイル配列の要素番号の始点からのオフセット量（0以上）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  edges が NULL
                                -  edge_num または  offset が負
                                - fnFIE_edge1d_projection_line() <= 1
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_edge1d_trans_coord_line(edges, edge_num, line, offset)

def fnFIE_edge1d_trans_coord_arc(edges, edge_num, arc, offset) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_trans_coord_arc( F_DEDGE* edges, INT edge_num, F_ARC arc, INT offset )
    計測ライン(円弧)上への座標変換	

    Params:
    - [in,out]  edges       検出されたエッジ点保存配列のポインタ
                            - x ｘ座標
                            - y ｙ座標
                            - q 勾配方向
                                    - 暗→明のエッジ   1
                                    - 明→暗のエッジ   -1
                            - mag   強度（0以上）
    - [in]      edge_num    検出されたエッジ点個数（0以上）
    - [in]      arc         計測ライン(円弧)
                            -  x            中心ｘ座標
                            -  y            中心ｙ座標
                            -  radius       半径：0 <  radius
                            -  start_angle  開始角：[0, $2\pi$]
                            -  sweep_angle  円弧の角度
                                    - 時計回り      正
                                    - 反時計回り 負
    - [in]      offset      濃度プロファイル配列の要素番号の始点からのオフセット量（0以上）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  edges が NULL
                                -  edge_num または  offset が負
                                -  arc が不正な値
                                - fnFIE_edge1d_projection_arc() <= 1
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_trans_coord_arc(edges, edge_num, arc, offset=0):
    r"""INT FVALGAPI fnFIE_edge1d_trans_coord_arc( F_DEDGE* edges, INT edge_num, F_ARC arc, INT offset )
    計測ライン(円弧)上への座標変換	

    Params:
    - [in,out]  edges       検出されたエッジ点保存配列のポインタ
                            - x ｘ座標
                            - y ｙ座標
                            - q 勾配方向
                                    - 暗→明のエッジ   1
                                    - 明→暗のエッジ   -1
                            - mag   強度（0以上）
    - [in]      edge_num    検出されたエッジ点個数（0以上）
    - [in]      arc         計測ライン(円弧)
                            -  x            中心ｘ座標
                            -  y            中心ｙ座標
                            -  radius       半径：0 <  radius
                            -  start_angle  開始角：[0, $2\pi$]
                            -  sweep_angle  円弧の角度
                                    - 時計回り      正
                                    - 反時計回り 負
    - [in]      offset      濃度プロファイル配列の要素番号の始点からのオフセット量（0以上）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された
                                -  edges が NULL
                                -  edge_num または  offset が負
                                -  arc が不正な値
                                - fnFIE_edge1d_projection_arc() <= 1
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_edge1d_trans_coord_arc(edges, edge_num, arc, offset)

def fnFIE_edge1d_line(hsrc, line, prj_width, filter_mode, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_line( FHANDLE hsrc, DSGMT_T line, INT prj_width, enum f_edge1d_filter filter_mode, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE** edges, INT* edge_num )
    計測ライン(線分)上からの複数エッジ点の検出

    Params:
    - [in]      hsrc            入力画像（type:uc8,s16,us16,double / ch:1）
    - [in]      line            計測ライン
                                    　 fnFIE_edge1d_calc_projection_line_length() で求められる計測ラインの長さが9以上でなければなりません
                                -  st   始点
                                -  ed   終点
    - [in]      prj_width       検出片幅（0以上、単位：画素）
                                - 0を指定した場合は、計測ライン上のみ有意となる
    - [in]      filter_mode     エッジ抽出フィルタの指定
                                - F_EDGE1D_DOG  （微分方式）DoGフィルタ
                                - F_EDGE1D_CORR （テンプレートマッチング方式）相関エッジフィルタ
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合
                                        - 画素タイプが F_IMG_UC8 の場合                      ：[0,255]
                                        - 画素タイプが F_IMG_S16 または F_IMG_US16 の場合   ：[0,65535]
                                        - 画素タイプが F_IMG_DOUBLE の場合                   ：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列のポインタ
                                - x ｘ座標
                                - y ｙ座標
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in, out] edge_num        検出されたエッジ点個数
                                    入力の場合は、以下の通りに指定する必要があります
                                -  edges のメモリを内部確保：指定なし
                                -  edges のメモリを外部確保：確保したメモリ数を入力
                                     -  edge_num >= fnFIE_edge1d_calc_projection_line_length()

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された（計測ラインの長さ不足等）
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_line(hsrc, line, prj_width=3, filter_mode=F_EDGE1D_DOG, direct_mode=F_DTC_BOTH, diff_type=F_RELATIVE_THR, diff_thr=75, sort_mode=F_MAG_SORT, edges=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_edge1d_line( FHANDLE hsrc, DSGMT_T line, INT prj_width, enum f_edge1d_filter filter_mode, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE** edges, INT* edge_num )
    計測ライン(線分)上からの複数エッジ点の検出

    Params:
    - [in]      hsrc            入力画像（type:uc8,s16,us16,double / ch:1）
    - [in]      line            計測ライン
                                    　 fnFIE_edge1d_calc_projection_line_length() で求められる計測ラインの長さが9以上でなければなりません
                                -  st   始点
                                -  ed   終点
    - [in]      prj_width       検出片幅（0以上、単位：画素）
                                - 0を指定した場合は、計測ライン上のみ有意となる
    - [in]      filter_mode     エッジ抽出フィルタの指定
                                - F_EDGE1D_DOG  （微分方式）DoGフィルタ
                                - F_EDGE1D_CORR （テンプレートマッチング方式）相関エッジフィルタ
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合
                                        - 画素タイプが F_IMG_UC8 の場合                      ：[0,255]
                                        - 画素タイプが F_IMG_S16 または F_IMG_US16 の場合   ：[0,65535]
                                        - 画素タイプが F_IMG_DOUBLE の場合                   ：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列のポインタ
                                - x ｘ座標
                                - y ｙ座標
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in, out] edge_num        検出されたエッジ点個数
                                    入力の場合は、以下の通りに指定する必要があります
                                -  edges のメモリを内部確保：指定なし
                                -  edges のメモリを外部確保：確保したメモリ数を入力
                                     -  edge_num >= fnFIE_edge1d_calc_projection_line_length()

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された（計測ラインの長さ不足等）
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_edge1d_line(hsrc, line, prj_width, filter_mode, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_num)

def fnFIE_edge1d_line2(hsrc, line, prj_width, diff_filter, arnd, interval, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_num, diff, diff_len) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_line2( FHANDLE hsrc, DSGMT_T line, INT prj_width, F_EDGE1D_DIFF_FILTER diff_filter, INT arnd, INT interval, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE** edges, INT* edge_num, INT** diff, INT* diff_len )
    計測ライン(線分)上からの複数エッジ点の検出

    Params:
    - [in]      hsrc            入力画像（type:uc8,s16,us16,double / ch:1）
    - [in]      line            計測ライン
                                    　 fnFIE_edge1d_calc_projection_line_length() で求められる計測ラインの長さが  arnd * 2 +  diff_filter 以上でなければなりません
                                -  st   始点
                                -  ed   終点
    - [in]      prj_width       検出片幅（0以上、単位：画素）
                                - 0を指定した場合は、計測ライン上のみ有意となる
    - [in]      diff_filter     微分フィルタの指定
                                - minus_foot    負側のfoot長さ（1以上）
                                - minus_len 負側のlen長さ（0以上）
                                - plus_foot 正側のfoot長さ（1以上）
                                - plus_len  正側のlen長さ（0以上）
    - [in]      arnd            サブピクセル計算に使用する周辺情報の片幅（0以上）
                                    検出した濃度微分データのピーク位置（または、または最初にしきい値を超えた位置）に対して、
                                    ここで指定した画素分の両端の濃度微分データを使用してサブピクセル精度の計算をする
    - [in]      interval        エッジ取得間隔（0以上、単位：画素）
                                    エッジ計測に利用された１次微分データ上で、エッジ方向が等しい2つのエッジ間の距離は少なくとも  interval 以上となる。
                                    エッジ方向が異なる場合は影響しない。
                                -  interval が０であれば、連続した座標で同じ方向のエッジが取得されることがある。
                                -  interval が n≧1 であれば、連続した座標で同じ方向のエッジが取得されることはなく、隣り合うエッジ間の距離は少なくとも n となる。
                                - いずれの場合においても、方向が異なるエッジは連続した座標で取得されることがある。
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合
                                        - 画素タイプが F_IMG_UC8 の場合                      ：[0,255]
                                        - 画素タイプが F_IMG_S16 または F_IMG_US16 の場合   ：[0,65535]
                                        - 画素タイプが F_IMG_DOUBLE の場合                   ：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列のポインタ
                                - x ｘ座標
                                - y ｙ座標
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in,out]  edge_num        検出されたエッジ点個数
                                    入力の場合は、以下の通りに指定する必要があります
                                -  edges のメモリを内部確保：指定なし
                                -  edges のメモリを外部確保：確保したメモリ数を入力
                                        -  edge_num >= fnFIE_edge1d_calc_projection_line_length()
    - [out]     diff            １次微分データ保存用配列のポインタ
    - [in,out]  diff_len        １次微分データ保存用配列の長さ
                                    入力の場合は、以下の通りに指定する必要があります
                                -  diff のメモリを内部確保：指定なし
                                -  diff のメモリを外部確保：確保したメモリ数を入力
                                        -  diff_len >= fnFIE_edge1d_calc_projection_line_length()

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された（計測ラインの長さが不足等）
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_line2(hsrc, line, prj_width=3, diff_filter=(1, 0, 1, 0), arnd=2, interval=0, direct_mode=F_DTC_BOTH, diff_type=F_RELATIVE_THR, diff_thr=75, sort_mode=F_MAG_SORT, edges=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER, diff=None, diff_len=-1):
    r"""INT FVALGAPI fnFIE_edge1d_line2( FHANDLE hsrc, DSGMT_T line, INT prj_width, F_EDGE1D_DIFF_FILTER diff_filter, INT arnd, INT interval, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE** edges, INT* edge_num, INT** diff, INT* diff_len )
    計測ライン(線分)上からの複数エッジ点の検出

    Params:
    - [in]      hsrc            入力画像（type:uc8,s16,us16,double / ch:1）
    - [in]      line            計測ライン
                                    　 fnFIE_edge1d_calc_projection_line_length() で求められる計測ラインの長さが  arnd * 2 +  diff_filter 以上でなければなりません
                                -  st   始点
                                -  ed   終点
    - [in]      prj_width       検出片幅（0以上、単位：画素）
                                - 0を指定した場合は、計測ライン上のみ有意となる
    - [in]      diff_filter     微分フィルタの指定
                                - minus_foot    負側のfoot長さ（1以上）
                                - minus_len 負側のlen長さ（0以上）
                                - plus_foot 正側のfoot長さ（1以上）
                                - plus_len  正側のlen長さ（0以上）
    - [in]      arnd            サブピクセル計算に使用する周辺情報の片幅（0以上）
                                    検出した濃度微分データのピーク位置（または、または最初にしきい値を超えた位置）に対して、
                                    ここで指定した画素分の両端の濃度微分データを使用してサブピクセル精度の計算をする
    - [in]      interval        エッジ取得間隔（0以上、単位：画素）
                                    エッジ計測に利用された１次微分データ上で、エッジ方向が等しい2つのエッジ間の距離は少なくとも  interval 以上となる。
                                    エッジ方向が異なる場合は影響しない。
                                -  interval が０であれば、連続した座標で同じ方向のエッジが取得されることがある。
                                -  interval が n≧1 であれば、連続した座標で同じ方向のエッジが取得されることはなく、隣り合うエッジ間の距離は少なくとも n となる。
                                - いずれの場合においても、方向が異なるエッジは連続した座標で取得されることがある。
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合
                                        - 画素タイプが F_IMG_UC8 の場合                      ：[0,255]
                                        - 画素タイプが F_IMG_S16 または F_IMG_US16 の場合   ：[0,65535]
                                        - 画素タイプが F_IMG_DOUBLE の場合                   ：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列のポインタ
                                - x ｘ座標
                                - y ｙ座標
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in,out]  edge_num        検出されたエッジ点個数
                                    入力の場合は、以下の通りに指定する必要があります
                                -  edges のメモリを内部確保：指定なし
                                -  edges のメモリを外部確保：確保したメモリ数を入力
                                        -  edge_num >= fnFIE_edge1d_calc_projection_line_length()
    - [out]     diff            １次微分データ保存用配列のポインタ
    - [in,out]  diff_len        １次微分データ保存用配列の長さ
                                    入力の場合は、以下の通りに指定する必要があります
                                -  diff のメモリを内部確保：指定なし
                                -  diff のメモリを外部確保：確保したメモリ数を入力
                                        -  diff_len >= fnFIE_edge1d_calc_projection_line_length()

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された（計測ラインの長さが不足等）
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_edge1d_line2(hsrc, line, prj_width, diff_filter, arnd, interval, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_num, diff, diff_len)

def fnFIE_edge1d_arc(hsrc, arc, prj_width, filter_mode, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_arc( FHANDLE hsrc, F_ARC arc, INT prj_width, enum f_edge1d_filter filter_mode, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE** edges, INT* edge_num )
    計測ライン(円弧)上からの複数エッジ点の検出

    Params:
    - [in]      hsrc            入力画像（type:uc8,s16,us16,double / ch:1）
    - [in]      arc             計測ライン（円弧）
                                    　 構造体 F_ARC にて指定します
                                    fnFIE_edge1d_calc_projection_arc_length() で求められる計測ラインの長さが9以上でなければなりません
                                -  x            中心ｘ座標
                                -  y            中心ｙ座標
                                -  radius       半径：0 <  radius
                                -  start_angle  開始角：[0, $2\pi$]
                                -  sweep_angle  円弧の角度 (単位：radian)
                                        - 時計回り      正
                                        - 反時計回り 負
    - [in]      prj_width       検出片幅（0以上、単位：画素）
                                - 0を指定した場合は、計測ライン上のみ有意となる
    - [in]      filter_mode     エッジ抽出フィルタの指定
                                - F_EDGE1D_DOG  （微分方式）DoGフィルタ
                                - F_EDGE1D_CORR （テンプレートマッチング方式）相関エッジフィルタ
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合
                                        - 画素タイプが F_IMG_UC8 の場合                      ：[0,255]
                                        - 画素タイプが F_IMG_S16 または F_IMG_US16 の場合   ：[0,65535]
                                        - 画素タイプが F_IMG_DOUBLE の場合                   ：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列のポインタ
                                - x ｘ座標
                                - y ｙ座標
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in, out] edge_num        検出されたエッジ点個数
                                    入力の場合は、以下の通りに指定する必要があります
                                -  edges のメモリを内部確保：指定なし
                                -  edges のメモリを外部確保：確保したメモリ数を入力
                                        -  edge_num >= fnFIE_edge1d_calc_projection_arc_length()

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された（計測ラインの長さ不足等）
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_arc(hsrc, arc, prj_width=3, filter_mode=F_EDGE1D_DOG, direct_mode=F_DTC_BOTH, diff_type=F_RELATIVE_THR, diff_thr=75, sort_mode=F_MAG_SORT, edges=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_edge1d_arc( FHANDLE hsrc, F_ARC arc, INT prj_width, enum f_edge1d_filter filter_mode, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE** edges, INT* edge_num )
    計測ライン(円弧)上からの複数エッジ点の検出

    Params:
    - [in]      hsrc            入力画像（type:uc8,s16,us16,double / ch:1）
    - [in]      arc             計測ライン（円弧）
                                    　 構造体 F_ARC にて指定します
                                    fnFIE_edge1d_calc_projection_arc_length() で求められる計測ラインの長さが9以上でなければなりません
                                -  x            中心ｘ座標
                                -  y            中心ｙ座標
                                -  radius       半径：0 <  radius
                                -  start_angle  開始角：[0, $2\pi$]
                                -  sweep_angle  円弧の角度 (単位：radian)
                                        - 時計回り      正
                                        - 反時計回り 負
    - [in]      prj_width       検出片幅（0以上、単位：画素）
                                - 0を指定した場合は、計測ライン上のみ有意となる
    - [in]      filter_mode     エッジ抽出フィルタの指定
                                - F_EDGE1D_DOG  （微分方式）DoGフィルタ
                                - F_EDGE1D_CORR （テンプレートマッチング方式）相関エッジフィルタ
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合
                                        - 画素タイプが F_IMG_UC8 の場合                      ：[0,255]
                                        - 画素タイプが F_IMG_S16 または F_IMG_US16 の場合   ：[0,65535]
                                        - 画素タイプが F_IMG_DOUBLE の場合                   ：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列のポインタ
                                - x ｘ座標
                                - y ｙ座標
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in, out] edge_num        検出されたエッジ点個数
                                    入力の場合は、以下の通りに指定する必要があります
                                -  edges のメモリを内部確保：指定なし
                                -  edges のメモリを外部確保：確保したメモリ数を入力
                                        -  edge_num >= fnFIE_edge1d_calc_projection_arc_length()

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された（計測ラインの長さ不足等）
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_edge1d_arc(hsrc, arc, prj_width, filter_mode, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_num)

def fnFIE_edge1d_arc2(hsrc, arc, prj_width, diff_filter, arnd, interval, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_num, diff, diff_len) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_arc2( FHANDLE hsrc, F_ARC arc, INT prj_width, F_EDGE1D_DIFF_FILTER diff_filter, INT arnd, INT interval, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE** edges, INT* edge_num, INT** diff, INT* diff_len )
    計測ライン(円弧)上からの複数エッジ点の検出

    Params:
    - [in]      hsrc            入力画像（type:uc8,s16,us16,double / ch:1）
    - [in]      arc             計測ライン（円弧）
                                    　 構造体 F_ARC にて指定します
                                    fnFIE_edge1d_calc_projection_arc_length() で求められる計測ラインの長さが  arnd * 2 + diff_filter 以上でなければなりません
                                -  x            中心ｘ座標
                                -  y            中心ｙ座標
                                -  radius       半径：0 <  radius
                                -  start_angle  開始角：[0, $2\pi$]
                                -  sweep_angle  円弧の角度 (単位：radian)
                                        - 時計回り      正
                                        - 反時計回り 負
    - [in]      prj_width       検出片幅（0以上、単位：画素）
                                - 0を指定した場合は、計測ライン上のみ有意となる
    - [in]      diff_filter     微分フィルタの指定
                                - minus_foot    負側のfoot長さ（1以上）
                                - minus_len 負側のlen長さ（0以上）
                                - plus_foot 正側のfoot長さ（1以上）
                                - plus_len  正側のlen長さ（0以上）
    - [in]      arnd            サブピクセル計算に使用する周辺情報の片幅（0以上）
                                    検出した濃度微分データのピーク位置（または、または最初にしきい値を超えた位置）に対して、
                                    ここで指定した画素分の両端の濃度微分データを使用してサブピクセル精度の計算をする
    - [in]      interval        エッジ取得間隔（0以上、単位：画素）
                                    エッジ計測に利用された１次微分データ上で、エッジ方向が等しい2つのエッジ間の距離は少なくとも  interval 以上となる。
                                    エッジ方向が異なる場合は影響しない。
                                -  interval が０であれば、連続した座標で同じ方向のエッジが取得されることがある。
                                -  interval が n≧1 であれば、連続した座標で同じ方向のエッジが取得されることはなく、隣り合うエッジ間の距離は少なくとも n となる。
                                - いずれの場合においても、方向が異なるエッジは連続した座標で取得されることがある。
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合
                                        - 画素タイプが F_IMG_UC8 の場合                      ：[0,255]
                                        - 画素タイプが F_IMG_S16 または F_IMG_US16 の場合   ：[0,65535]
                                        - 画素タイプが F_IMG_DOUBLE の場合                   ：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列のポインタ
                                - x ｘ座標
                                - y ｙ座標
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in, out] edge_num        検出されたエッジ点個数
                                    入力の場合は、以下の通りに指定する必要があります
                                -  edges のメモリを内部確保：指定なし
                                -  edges のメモリを外部確保：確保したメモリ数を入力
                                        -  edge_num >= fnFIE_edge1d_calc_projection_arc_length()
    - [out]     diff            １次微分データ保存用配列のポインタ
    - [in,out]  diff_len        １次微分データ保存用配列の長さ
                                    入力の場合は、以下の通りに指定する必要があります
                                -  diff のメモリを内部確保：指定なし
                                -  diff のメモリを外部確保：確保したメモリ数を入力
                                        -  diff_len >= fnFIE_edge1d_calc_projection_arc_length()

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された（計測ラインの長さ不足等）
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_arc2(hsrc, arc, prj_width=3, diff_filter=(1, 0, 1, 0), arnd=2, interval=0, direct_mode=F_DTC_BOTH, diff_type=F_RELATIVE_THR, diff_thr=75, sort_mode=F_MAG_SORT, edges=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER, diff=None, diff_len=-1):
    r"""INT FVALGAPI fnFIE_edge1d_arc2( FHANDLE hsrc, F_ARC arc, INT prj_width, F_EDGE1D_DIFF_FILTER diff_filter, INT arnd, INT interval, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode sort_mode, F_DEDGE** edges, INT* edge_num, INT** diff, INT* diff_len )
    計測ライン(円弧)上からの複数エッジ点の検出

    Params:
    - [in]      hsrc            入力画像（type:uc8,s16,us16,double / ch:1）
    - [in]      arc             計測ライン（円弧）
                                    　 構造体 F_ARC にて指定します
                                    fnFIE_edge1d_calc_projection_arc_length() で求められる計測ラインの長さが  arnd * 2 + diff_filter 以上でなければなりません
                                -  x            中心ｘ座標
                                -  y            中心ｙ座標
                                -  radius       半径：0 <  radius
                                -  start_angle  開始角：[0, $2\pi$]
                                -  sweep_angle  円弧の角度 (単位：radian)
                                        - 時計回り      正
                                        - 反時計回り 負
    - [in]      prj_width       検出片幅（0以上、単位：画素）
                                - 0を指定した場合は、計測ライン上のみ有意となる
    - [in]      diff_filter     微分フィルタの指定
                                - minus_foot    負側のfoot長さ（1以上）
                                - minus_len 負側のlen長さ（0以上）
                                - plus_foot 正側のfoot長さ（1以上）
                                - plus_len  正側のlen長さ（0以上）
    - [in]      arnd            サブピクセル計算に使用する周辺情報の片幅（0以上）
                                    検出した濃度微分データのピーク位置（または、または最初にしきい値を超えた位置）に対して、
                                    ここで指定した画素分の両端の濃度微分データを使用してサブピクセル精度の計算をする
    - [in]      interval        エッジ取得間隔（0以上、単位：画素）
                                    エッジ計測に利用された１次微分データ上で、エッジ方向が等しい2つのエッジ間の距離は少なくとも  interval 以上となる。
                                    エッジ方向が異なる場合は影響しない。
                                -  interval が０であれば、連続した座標で同じ方向のエッジが取得されることがある。
                                -  interval が n≧1 であれば、連続した座標で同じ方向のエッジが取得されることはなく、隣り合うエッジ間の距離は少なくとも n となる。
                                - いずれの場合においても、方向が異なるエッジは連続した座標で取得されることがある。
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合
                                        - 画素タイプが F_IMG_UC8 の場合                      ：[0,255]
                                        - 画素タイプが F_IMG_S16 または F_IMG_US16 の場合   ：[0,65535]
                                        - 画素タイプが F_IMG_DOUBLE の場合                   ：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      sort_mode       検出されたエッジの保存順を指定
                                - F_MAG_SORT    強度順
                                - F_POS_SORT    始点からの位置順
    - [out]     edges           検出されたエッジ点保存配列のポインタ
                                - x ｘ座標
                                - y ｙ座標
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in, out] edge_num        検出されたエッジ点個数
                                    入力の場合は、以下の通りに指定する必要があります
                                -  edges のメモリを内部確保：指定なし
                                -  edges のメモリを外部確保：確保したメモリ数を入力
                                        -  edge_num >= fnFIE_edge1d_calc_projection_arc_length()
    - [out]     diff            １次微分データ保存用配列のポインタ
    - [in,out]  diff_len        １次微分データ保存用配列の長さ
                                    入力の場合は、以下の通りに指定する必要があります
                                -  diff のメモリを内部確保：指定なし
                                -  diff のメモリを外部確保：確保したメモリ数を入力
                                        -  diff_len >= fnFIE_edge1d_calc_projection_arc_length()

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された（計測ラインの長さ不足等）
    - F_ERR_NODATA          濃度プロファイルに有効領域が存在しない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_edge1d_arc2(hsrc, arc, prj_width, diff_filter, arnd, interval, direct_mode, diff_type, diff_thr, sort_mode, edges, edge_num, diff, diff_len)

def fnFIE_edge1d_radial(hsrc, center, start_radius, range_radius, start_angle, range_angle, line_num, prj_mode, prj_width, filter_mode, direct_mode, diff_type, diff_thr, detect_mode, edges, edge_num) -> Any:
    r"""INT FVALGAPI fnFIE_edge1d_radial( FHANDLE hsrc, DPNT_T center, INT start_radius, INT range_radius, DOUBLE start_angle, DOUBLE range_angle, INT line_num, enum f_edge1d_projection_mode prj_mode, INT prj_width, enum f_edge1d_filter filter_mode, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode detect_mode, F_DEDGE** edges, INT* edge_num )
    放射状(収束or発散)方向エッジ検出

    Params:
    - [in]      hsrc            入力画像（type:uc8,us16,double / ch:1）
    - [in]      center          計測円の中心座標
    - [in]      start_radius    検出ラインの開始半径（0以上）
    - [in]      range_radius    検出ラインの処理範囲半径
    - [in]      start_angle     開始角度(radian)
    - [in]      range_angle     処理範囲角度(radian)
    - [in]      line_num        検出ライン本数(1以上)
    - [in]      prj_mode        濃度投影方法の指定
                                - F_PROJECTION_BOX 矩形型濃度投影
                                - F_PROJECTION_FAN 扇型濃度投影
    - [in]      prj_width       濃度投影片幅（0以上、単位：画素）
                                - 0を指定した場合は、計測ライン上のみ有意となる
    - [in]      filter_mode     エッジ抽出フィルタの指定
                                - F_EDGE1D_DOG  （微分方式）DoGフィルタ
                                - F_EDGE1D_CORR （テンプレートマッチング方式）相関エッジフィルタ
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合
                                        - 画素タイプが F_IMG_UC8 の場合          ：[0,255]
                                        - 画素タイプが F_IMG_US16 の場合         ：[0,65535]
                                        - 画素タイプが F_IMG_DOUBLE の場合       ：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      detect_mode     各計測ラインで検出されたエッジ点の出力方法を指定
                                - F_MAG_SORT    エッジ強度が最大となる点
                                - F_POS_SORT    開始半径に一番近い点
    - [out]     edges           検出されたエッジ点保存配列のポインタ
                                    開始角度から順に格納されます
                                - x ｘ座標
                                - y ｙ座標
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in, out] edge_num        検出されたエッジ点個数
                                    入力の場合は、以下の通りに指定する必要があります
                                -  edges のメモリを内部確保：指定なし
                                -  edges のメモリを外部確保：確保したメモリ数を入力
                                     -  edge_num >= 計測ライン本数（line_num）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された（計測ラインの長さが不足等）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def edge1d_radial(hsrc, center, start_radius, range_radius, start_angle, range_angle, line_num, prj_mode=F_PROJECTION_FAN, prj_width=3, filter_mode=F_EDGE1D_DOG, direct_mode=F_DTC_BOTH, diff_type=F_RELATIVE_THR, diff_thr=75, detect_mode=F_MAG_SORT, edges=REQUIRED_PLACEHOLDER, edge_num=REQUIRED_PLACEHOLDER):
    r"""INT FVALGAPI fnFIE_edge1d_radial( FHANDLE hsrc, DPNT_T center, INT start_radius, INT range_radius, DOUBLE start_angle, DOUBLE range_angle, INT line_num, enum f_edge1d_projection_mode prj_mode, INT prj_width, enum f_edge1d_filter filter_mode, enum f_edge1d_edge_direction direct_mode, enum f_diff_type diff_type, DOUBLE diff_thr, enum f_edge1d_sort_mode detect_mode, F_DEDGE** edges, INT* edge_num )
    放射状(収束or発散)方向エッジ検出

    Params:
    - [in]      hsrc            入力画像（type:uc8,us16,double / ch:1）
    - [in]      center          計測円の中心座標
    - [in]      start_radius    検出ラインの開始半径（0以上）
    - [in]      range_radius    検出ラインの処理範囲半径
    - [in]      start_angle     開始角度(radian)
    - [in]      range_angle     処理範囲角度(radian)
    - [in]      line_num        検出ライン本数(1以上)
    - [in]      prj_mode        濃度投影方法の指定
                                - F_PROJECTION_BOX 矩形型濃度投影
                                - F_PROJECTION_FAN 扇型濃度投影
    - [in]      prj_width       濃度投影片幅（0以上、単位：画素）
                                - 0を指定した場合は、計測ライン上のみ有意となる
    - [in]      filter_mode     エッジ抽出フィルタの指定
                                - F_EDGE1D_DOG  （微分方式）DoGフィルタ
                                - F_EDGE1D_CORR （テンプレートマッチング方式）相関エッジフィルタ
    - [in]      direct_mode     検出するエッジ方向の指定
                                - F_DRK_TO_BRI  暗→明のエッジ
                                - F_BRI_TO_DRK  明→暗のエッジ
                                - F_DTC_BOTH        両極性
    - [in]      diff_type       濃度差しきい値の種別
                                - F_ABSOLUTE_THR    絶対濃度差
                                - F_RELATIVE_THR    相対濃度差
    - [in]      diff_thr        エッジの最小濃度差しきい値
                                - F_ABSOLUTE_THR を指定した場合
                                        - 画素タイプが F_IMG_UC8 の場合          ：[0,255]
                                        - 画素タイプが F_IMG_US16 の場合         ：[0,65535]
                                        - 画素タイプが F_IMG_DOUBLE の場合       ：[0, 2147483647]
                                        - 内部で、 fnFIE_d4i5() にて四捨五入される
                                - F_RELATIVE_THR を指定した場合：[0,100](％)
                                        - 生成された濃度プロファイル内の最大値と最小値の差に対する割合
                                        - 求められたしきい値は、 fnFIE_d4i5() にて四捨五入される
    - [in]      detect_mode     各計測ラインで検出されたエッジ点の出力方法を指定
                                - F_MAG_SORT    エッジ強度が最大となる点
                                - F_POS_SORT    開始半径に一番近い点
    - [out]     edges           検出されたエッジ点保存配列のポインタ
                                    開始角度から順に格納されます
                                - x ｘ座標
                                - y ｙ座標
                                - q 勾配方向
                                        - 暗→明のエッジ   1
                                        - 明→暗のエッジ   -1
                                - mag   強度（0以上）
    - [in, out] edge_num        検出されたエッジ点個数
                                    入力の場合は、以下の通りに指定する必要があります
                                -  edges のメモリを内部確保：指定なし
                                -  edges のメモリを外部確保：確保したメモリ数を入力
                                     -  edge_num >= 計測ライン本数（line_num）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_IMAGE       不正な画像が渡された
    - F_ERR_INVALID_PARAM       不正なパラメータが渡された（計測ラインの長さが不足等）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    if edges is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edges' is missing")
    if edge_num is REQUIRED_PLACEHOLDER: raise TypeError("argument 'edge_num' is missing")
    return _fie.fnFIE_edge1d_radial(hsrc, center, start_radius, range_radius, start_angle, range_angle, line_num, prj_mode, prj_width, filter_mode, direct_mode, diff_type, diff_thr, detect_mode, edges, edge_num)

def fnFIE_cg_vectorize2d_cone(src, num_src, dst, index, num_dst, radius) -> Any:
    r"""INT FVALGAPI fnFIE_cg_vectorize2d_cone( const PNT_T* src, UINT num_src, PNT_T* dst, UINT* index, UINT* num_dst, DOUBLE radius )
    コーン交差法による点列の折れ線化

    Params:
    - [in]  src         入力座標点列
    - [in]  num_src     入力座標点列のサイズ。 3点以上を与えてください。
    - [out] dst         出力座標点列。  num_src 以上の大きさを持つ配列を与えてください。
                            不要な場合はNULLを与えてください。
    - [out] index       出力座標のインデックス配列。折れ線を  src での先頭からのオフセットで表現します。
                             num_src 以上の大きさを持つ配列を与えてください。不要な場合はNULLを与えてください。
    - [out] num_dst     出力座標点列のサイズ
    - [in] radius       誤差円の半径。 ゼロより大きい値を与えてください。
                            入力点列の座標が整数のため、0.5以下では間引きの効果はほとんど無くなります。
                            大きくすると元の点列と出力する折れ線の乖離が大きくなります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_vectorize2d_cone(src, num_src, dst, index, num_dst, radius=1.0):
    r"""INT FVALGAPI fnFIE_cg_vectorize2d_cone( const PNT_T* src, UINT num_src, PNT_T* dst, UINT* index, UINT* num_dst, DOUBLE radius )
    コーン交差法による点列の折れ線化

    Params:
    - [in]  src         入力座標点列
    - [in]  num_src     入力座標点列のサイズ。 3点以上を与えてください。
    - [out] dst         出力座標点列。  num_src 以上の大きさを持つ配列を与えてください。
                            不要な場合はNULLを与えてください。
    - [out] index       出力座標のインデックス配列。折れ線を  src での先頭からのオフセットで表現します。
                             num_src 以上の大きさを持つ配列を与えてください。不要な場合はNULLを与えてください。
    - [out] num_dst     出力座標点列のサイズ
    - [in] radius       誤差円の半径。 ゼロより大きい値を与えてください。
                            入力点列の座標が整数のため、0.5以下では間引きの効果はほとんど無くなります。
                            大きくすると元の点列と出力する折れ線の乖離が大きくなります。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_vectorize2d_cone(src, num_src, dst, index, num_dst, radius)

def fnFIE_cg_vectorize2d_dp(src, num_src, dst, index, num_dst, threshold) -> Any:
    r"""INT FVALGAPI fnFIE_cg_vectorize2d_dp( const PNT_T* src, UINT num_src, PNT_T* dst, UINT* index, UINT* num_dst, DOUBLE threshold )
    DP法による点列の折れ線化

    Params:
    - [in]  src         入力座標点列
    - [in]  num_src     入力座標点列のサイズ。3点以上を与えてください。
    - [out] dst         出力座標点列。
                             num_src 以上の大きさを持つ配列を与えてください。不要な場合はNULLを与えてください。
    - [out] index       出力座標点列のインデックス配列。出力座標点列を  src の先頭からのオフセットで表現したものです。
                             num_src 以上の大きさを持つ配列を与えてください。不要な場合はNULLを与えてください。
    - [out] num_dst     出力座標点列のサイズ
    - [in]  threshold   折れ線閾値。ゼロより大きい値を与えてください。
                            折れ線と点列を比較したとき点列が折れ線の方向から垂直に何ピクセル外れていたら折るかを指定します。
                            出力する点列は元の点列から  threshold より大きく外れません。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def cg_vectorize2d_dp(src, num_src, dst, index, num_dst, threshold=1.0):
    r"""INT FVALGAPI fnFIE_cg_vectorize2d_dp( const PNT_T* src, UINT num_src, PNT_T* dst, UINT* index, UINT* num_dst, DOUBLE threshold )
    DP法による点列の折れ線化

    Params:
    - [in]  src         入力座標点列
    - [in]  num_src     入力座標点列のサイズ。3点以上を与えてください。
    - [out] dst         出力座標点列。
                             num_src 以上の大きさを持つ配列を与えてください。不要な場合はNULLを与えてください。
    - [out] index       出力座標点列のインデックス配列。出力座標点列を  src の先頭からのオフセットで表現したものです。
                             num_src 以上の大きさを持つ配列を与えてください。不要な場合はNULLを与えてください。
    - [out] num_dst     出力座標点列のサイズ
    - [in]  threshold   折れ線閾値。ゼロより大きい値を与えてください。
                            折れ線と点列を比較したとき点列が折れ線の方向から垂直に何ピクセル外れていたら折るかを指定します。
                            出力する点列は元の点列から  threshold より大きく外れません。

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_cg_vectorize2d_dp(src, num_src, dst, index, num_dst, threshold)

def fnFIE_pfit_coord(iPntNum, taOldPnt, taNewPnt, dSigmaCoef, iCalcMode, dpXc, dpYc, dpQc, dpSc) -> Any:
    r"""INT FVALGAPI fnFIE_pfit_coord( INT iPntNum, DPNT_T taOldPnt[], DPNT_T taNewPnt[], DOUBLE dSigmaCoef, enum f_pfit_calc_mode iCalcMode, DOUBLE* dpXc, DOUBLE* dpYc, DOUBLE* dpQc, DOUBLE* dpSc )
    点群マッチングによる座標系パラメータ(原点座標，傾きおよびスケール)の算出

    Params:
    - [in]  iPntNum     データ(座標)点の数（２点以上）
    - [in]  taOldPnt[]  旧座標系上の座標値群（合わされる方）
    - [in]  taNewPnt[]  新座標系上の座標値群（合わせる方）
    - [in]  dSigmaCoef  ロバスト推定用重みしきい値の係数
    - [in]  iCalcMode   処理選択
                        - F_PFIT_LSQ                最小二乗法：スケール推定なし
                        - F_PFIT_LSQ_SCALE      最小二乗法：スケール推定あり
                        - F_PFIT_RBST               ロバスト推定：スケール推定なし
                        - F_PFIT_RBST_SCALE     ロバスト推定：スケール推定あり
                        - F_PFIT_MINMAX         ミニマックス近似：スケール推定なし
                        - F_PFIT_MINMAX_SCALE       ミニマックス近似：スケール推定あり
    - [out] *dpXc       旧座標系から見た新座標系の原点ｘ座標
    - [out] *dpYc       旧座標系から見た新座標系の原点ｙ座標
    - [out] *dpTheta    旧座標系から見た新座標系の傾き（rad：[-π，π]）
    - [out] *dpScale    旧座標系から見た新座標系のスケール(相似比)（処理選択で‘スケール推定なし’を選択した場合は、1.0 が返ります。）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE ロバスト推定失敗（重みしきい値が小さくなりすぎた）または ミニマックス近似失敗（反復回数オーバー）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def pfit_coord(iPntNum, taOldPnt, taNewPnt, dSigmaCoef, iCalcMode, dpXc, dpYc, dpQc, dpSc):
    r"""INT FVALGAPI fnFIE_pfit_coord( INT iPntNum, DPNT_T taOldPnt[], DPNT_T taNewPnt[], DOUBLE dSigmaCoef, enum f_pfit_calc_mode iCalcMode, DOUBLE* dpXc, DOUBLE* dpYc, DOUBLE* dpQc, DOUBLE* dpSc )
    点群マッチングによる座標系パラメータ(原点座標，傾きおよびスケール)の算出

    Params:
    - [in]  iPntNum     データ(座標)点の数（２点以上）
    - [in]  taOldPnt[]  旧座標系上の座標値群（合わされる方）
    - [in]  taNewPnt[]  新座標系上の座標値群（合わせる方）
    - [in]  dSigmaCoef  ロバスト推定用重みしきい値の係数
    - [in]  iCalcMode   処理選択
                        - F_PFIT_LSQ                最小二乗法：スケール推定なし
                        - F_PFIT_LSQ_SCALE      最小二乗法：スケール推定あり
                        - F_PFIT_RBST               ロバスト推定：スケール推定なし
                        - F_PFIT_RBST_SCALE     ロバスト推定：スケール推定あり
                        - F_PFIT_MINMAX         ミニマックス近似：スケール推定なし
                        - F_PFIT_MINMAX_SCALE       ミニマックス近似：スケール推定あり
    - [out] *dpXc       旧座標系から見た新座標系の原点ｘ座標
    - [out] *dpYc       旧座標系から見た新座標系の原点ｙ座標
    - [out] *dpTheta    旧座標系から見た新座標系の傾き（rad：[-π，π]）
    - [out] *dpScale    旧座標系から見た新座標系のスケール(相似比)（処理選択で‘スケール推定なし’を選択した場合は、1.0 が返ります。）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE ロバスト推定失敗（重みしきい値が小さくなりすぎた）または ミニマックス近似失敗（反復回数オーバー）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_pfit_coord(iPntNum, taOldPnt, taNewPnt, dSigmaCoef, iCalcMode, dpXc, dpYc, dpQc, dpSc)

def fnFIE_pfit_points(iPntNum, taWork, taMaster, dSigmaCoef, iCalcMode, taConv, daErr) -> Any:
    r"""INT FVALGAPI fnFIE_pfit_points( INT iPntNum, DPNT_T taWork[], DPNT_T taMaster[], DOUBLE dSigmaCoef, enum f_pfit_calc_mode iCalcMode, DPNT_T taConv[], DOUBLE daErr[] )
    点群マッチング後の座標値および誤差の算出

    Params:
    - [in]  iPntNum     データ(座標)点の数（２点以上）
    - [in]  taWork[]    ワーク点群座標データ（合わされる方）
    - [in]  taMaster[]  マスタ点群座標データ（合わせる方）
    - [in]  dSigmaCoef  ロバスト推定用重みしきい値の係数
    - [in]  iCalcMode   処理選択
                        - F_PFIT_LSQ                最小二乗法：スケール推定なし
                        - F_PFIT_LSQ_SCALE      最小二乗法：スケール推定あり
                        - F_PFIT_RBST               ロバスト推定：スケール推定なし
                        - F_PFIT_RBST_SCALE     ロバスト推定：スケール推定あり
                        - F_PFIT_MINMAX         ミニマックス近似：スケール推定なし
                        - F_PFIT_MINMAX_SCALE       ミニマックス近似：スケール推定あり
    - [out] taConv[]    マッチング後のマスタ点群の座標（taMaster[] と同じでもよい）
    - [out] daErr[]     マッチング後の対応する２点間の距離（誤差）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE ロバスト推定失敗（重みしきい値が小さくなりすぎた）または ミニマックス近似失敗（反復回数オーバー）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def pfit_points(iPntNum, taWork, taMaster, dSigmaCoef, iCalcMode, taConv, daErr):
    r"""INT FVALGAPI fnFIE_pfit_points( INT iPntNum, DPNT_T taWork[], DPNT_T taMaster[], DOUBLE dSigmaCoef, enum f_pfit_calc_mode iCalcMode, DPNT_T taConv[], DOUBLE daErr[] )
    点群マッチング後の座標値および誤差の算出

    Params:
    - [in]  iPntNum     データ(座標)点の数（２点以上）
    - [in]  taWork[]    ワーク点群座標データ（合わされる方）
    - [in]  taMaster[]  マスタ点群座標データ（合わせる方）
    - [in]  dSigmaCoef  ロバスト推定用重みしきい値の係数
    - [in]  iCalcMode   処理選択
                        - F_PFIT_LSQ                最小二乗法：スケール推定なし
                        - F_PFIT_LSQ_SCALE      最小二乗法：スケール推定あり
                        - F_PFIT_RBST               ロバスト推定：スケール推定なし
                        - F_PFIT_RBST_SCALE     ロバスト推定：スケール推定あり
                        - F_PFIT_MINMAX         ミニマックス近似：スケール推定なし
                        - F_PFIT_MINMAX_SCALE       ミニマックス近似：スケール推定あり
    - [out] taConv[]    マッチング後のマスタ点群の座標（taMaster[] と同じでもよい）
    - [out] daErr[]     マッチング後の対応する２点間の距離（誤差）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE ロバスト推定失敗（重みしきい値が小さくなりすぎた）または ミニマックス近似失敗（反復回数オーバー）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_pfit_points(iPntNum, taWork, taMaster, dSigmaCoef, iCalcMode, taConv, daErr)

def fnFIE_pfit_param(iPntNum, taWork, taMaster, dSigmaCoef, iCalcMode, dpXcOrg, dpYcOrg, dpXc, dpYc, dpTheta, dpScale) -> Any:
    r"""INT FVALGAPI fnFIE_pfit_param( INT iPntNum, DPNT_T taWork[], DPNT_T taMaster[], DOUBLE dSigmaCoef, enum f_pfit_calc_mode iCalcMode, DOUBLE* dpXcOrg, DOUBLE* dpYcOrg, DOUBLE* dpXc, DOUBLE* dpYc, DOUBLE* dpTheta, DOUBLE* dpScale )
    点群マッチングの変換パラメータ(重心，回転角およびスケール)算出

    Params:
    - [in]  iPntNum     データ(座標)点の数（２点以上）
    - [in]  taWork[]    ワーク点群座標データ（合わされる方）
    - [in]  taMaster[]  マスタ点群座標データ（合わせる方）
    - [in]  dSigmaCoef  ロバスト推定用重みしきい値の係数
    - [in]  iCalcMode   処理選択
                        - F_PFIT_LSQ                最小二乗法：スケール推定なし
                        - F_PFIT_LSQ_SCALE      最小二乗法：スケール推定あり
                        - F_PFIT_RBST               ロバスト推定：スケール推定なし
                        - F_PFIT_RBST_SCALE     ロバスト推定：スケール推定あり
                        - F_PFIT_MINMAX         ミニマックス近似：スケール推定なし
                        - F_PFIT_MINMAX_SCALE       ミニマックス近似：スケール推定あり
    - [out] *dpXcOrg    元の（マッチング前の）マスタ点群の重心ｘ座標
    - [out] *dpYcOrg    元の（マッチング前の）マスタ点群の重心ｙ座標
    - [out] *dpXc       マッチング後のマスタ点群の重心ｘ座標
    - [out] *dpYc       マッチング後のマスタ点群の重心ｙ座標
    - [out] *dpTheta    マスタ点群の重心周りの回転角（rad：[-π，π]）
    - [out] *dpScale    マスタ点群のスケール（相似比）（処理選択で‘スケール推定なし’を選択した場合は、1.0 が返ります。）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE ロバスト推定失敗（重みしきい値が小さくなりすぎた）または ミニマックス近似失敗（反復回数オーバー）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def pfit_param(iPntNum, taWork, taMaster, dSigmaCoef, iCalcMode, dpXcOrg, dpYcOrg, dpXc, dpYc, dpTheta, dpScale):
    r"""INT FVALGAPI fnFIE_pfit_param( INT iPntNum, DPNT_T taWork[], DPNT_T taMaster[], DOUBLE dSigmaCoef, enum f_pfit_calc_mode iCalcMode, DOUBLE* dpXcOrg, DOUBLE* dpYcOrg, DOUBLE* dpXc, DOUBLE* dpYc, DOUBLE* dpTheta, DOUBLE* dpScale )
    点群マッチングの変換パラメータ(重心，回転角およびスケール)算出

    Params:
    - [in]  iPntNum     データ(座標)点の数（２点以上）
    - [in]  taWork[]    ワーク点群座標データ（合わされる方）
    - [in]  taMaster[]  マスタ点群座標データ（合わせる方）
    - [in]  dSigmaCoef  ロバスト推定用重みしきい値の係数
    - [in]  iCalcMode   処理選択
                        - F_PFIT_LSQ                最小二乗法：スケール推定なし
                        - F_PFIT_LSQ_SCALE      最小二乗法：スケール推定あり
                        - F_PFIT_RBST               ロバスト推定：スケール推定なし
                        - F_PFIT_RBST_SCALE     ロバスト推定：スケール推定あり
                        - F_PFIT_MINMAX         ミニマックス近似：スケール推定なし
                        - F_PFIT_MINMAX_SCALE       ミニマックス近似：スケール推定あり
    - [out] *dpXcOrg    元の（マッチング前の）マスタ点群の重心ｘ座標
    - [out] *dpYcOrg    元の（マッチング前の）マスタ点群の重心ｙ座標
    - [out] *dpXc       マッチング後のマスタ点群の重心ｘ座標
    - [out] *dpYc       マッチング後のマスタ点群の重心ｙ座標
    - [out] *dpTheta    マスタ点群の重心周りの回転角（rad：[-π，π]）
    - [out] *dpScale    マスタ点群のスケール（相似比）（処理選択で‘スケール推定なし’を選択した場合は、1.0 が返ります。）

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ確保失敗
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE ロバスト推定失敗（重みしきい値が小さくなりすぎた）または ミニマックス近似失敗（反復回数オーバー）
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_pfit_param(iPntNum, taWork, taMaster, dSigmaCoef, iCalcMode, dpXcOrg, dpYcOrg, dpXc, dpYc, dpTheta, dpScale)

def fnFIE_fit_line(pnts, pnt_num, fitting_mode, param, line) -> Any:
    r"""INT FVALGAPI fnFIE_fit_line( const DPNT_T* pnts, INT pnt_num, enum f_fit_mode fitting_mode, DOUBLE sigma, DLINE_T* line )
    [OSS] 点群からの直線近似

    Params:
    - [in]  pnts            入力点群
    - [in]  pnt_num         入力点群の個数（  pnt_num >= 2 ）
    - [in]  fitting_mode    近似モード
                            - F_FIT_LSM         最小二乗法
                            - F_FIT_LSM_FAST        最小二乗法（旧ライブラリ仕様）
                            - F_FIT_MESTIMATOR  ロバスト推定法（Ｍ推定法）
                            - F_FIT_RANSAC      ロバスト推定法（ランザック法）
                            - F_FIT_LMEDS           ロバスト推定法（最小メディアン法）
                            - F_FIT_MESTIMATOR2 ロバスト推定法（Ｍ推定法）…標準偏差を自動決定
                            - F_FIT_LMEDS2      ロバスト推定法（最小メディアン法）…自動決定される標準偏差の係数を設定可能
    - [in]  param           最適化パラメータ（ロバスト推定法で利用）
    - [out] line            直線の係数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが入力された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不可
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fit_line(pnts, pnt_num, fitting_mode, param, line):
    r"""INT FVALGAPI fnFIE_fit_line( const DPNT_T* pnts, INT pnt_num, enum f_fit_mode fitting_mode, DOUBLE sigma, DLINE_T* line )
    [OSS] 点群からの直線近似

    Params:
    - [in]  pnts            入力点群
    - [in]  pnt_num         入力点群の個数（  pnt_num >= 2 ）
    - [in]  fitting_mode    近似モード
                            - F_FIT_LSM         最小二乗法
                            - F_FIT_LSM_FAST        最小二乗法（旧ライブラリ仕様）
                            - F_FIT_MESTIMATOR  ロバスト推定法（Ｍ推定法）
                            - F_FIT_RANSAC      ロバスト推定法（ランザック法）
                            - F_FIT_LMEDS           ロバスト推定法（最小メディアン法）
                            - F_FIT_MESTIMATOR2 ロバスト推定法（Ｍ推定法）…標準偏差を自動決定
                            - F_FIT_LMEDS2      ロバスト推定法（最小メディアン法）…自動決定される標準偏差の係数を設定可能
    - [in]  param           最適化パラメータ（ロバスト推定法で利用）
    - [out] line            直線の係数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが入力された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不可
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fit_line(pnts, pnt_num, fitting_mode, param, line)

def fnFIE_fit_circle(pnts, pnt_num, fitting_mode, param, center, radius) -> Any:
    r"""INT FVALGAPI fnFIE_fit_circle( const DPNT_T* pnts, INT pnt_num, enum f_fit_mode fitting_mode, DOUBLE sigma, DPNT_T* center, DOUBLE* radius )
    [OSS] 点群からの円近似

    Params:
    - [in]  pnts            入力点群
    - [in]  pnt_num         入力点群の個数（  pnt_num >= 3 ）
    - [in]  fitting_mode    近似モード
                            - F_FIT_LSM         最小二乗法
                            - F_FIT_LSM_FAST        最小二乗法（旧ライブラリ仕様）
                            - F_FIT_MESTIMATOR  ロバスト推定法（Ｍ推定法）
                            - F_FIT_RANSAC      ロバスト推定法（ランザック法）
                            - F_FIT_LMEDS           ロバスト推定法（最小メディアン法）
                            - F_FIT_MESTIMATOR2 ロバスト推定法（Ｍ推定法）…標準偏差を自動決定
                            - F_FIT_LMEDS2      ロバスト推定法（最小メディアン法）…自動決定される標準偏差の係数を設定可能
    - [in]  param           最適化パラメータ（ロバスト推定法で利用）
    - [out] center          円の中心座標
    - [out] radius          円の半径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが入力された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不可
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fit_circle(pnts, pnt_num, fitting_mode, param, center, radius):
    r"""INT FVALGAPI fnFIE_fit_circle( const DPNT_T* pnts, INT pnt_num, enum f_fit_mode fitting_mode, DOUBLE sigma, DPNT_T* center, DOUBLE* radius )
    [OSS] 点群からの円近似

    Params:
    - [in]  pnts            入力点群
    - [in]  pnt_num         入力点群の個数（  pnt_num >= 3 ）
    - [in]  fitting_mode    近似モード
                            - F_FIT_LSM         最小二乗法
                            - F_FIT_LSM_FAST        最小二乗法（旧ライブラリ仕様）
                            - F_FIT_MESTIMATOR  ロバスト推定法（Ｍ推定法）
                            - F_FIT_RANSAC      ロバスト推定法（ランザック法）
                            - F_FIT_LMEDS           ロバスト推定法（最小メディアン法）
                            - F_FIT_MESTIMATOR2 ロバスト推定法（Ｍ推定法）…標準偏差を自動決定
                            - F_FIT_LMEDS2      ロバスト推定法（最小メディアン法）…自動決定される標準偏差の係数を設定可能
    - [in]  param           最適化パラメータ（ロバスト推定法で利用）
    - [out] center          円の中心座標
    - [out] radius          円の半径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが入力された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不可
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fit_circle(pnts, pnt_num, fitting_mode, param, center, radius)

def fnFIE_fit_circle2(pnts, pnt_num, fitting_mode, param, center, radius) -> Any:
    r"""INT FVALGAPI fnFIE_fit_circle2( const DPNT_T* pnts, INT pnt_num, enum f_fit_mode fitting_mode, DOUBLE param, DPNT_T* center, DOUBLE* radius )
    [OSS] 点群からの円近似

    Params:
    - [in]  pnts            入力点群
    - [in]  pnt_num         入力点群の個数（  pnt_num >= 3 ）
    - [in]  fitting_mode    近似モード
                            - F_FIT_LSM         最小二乗法
                            - F_FIT_MESTIMATOR  ロバスト推定法（Ｍ推定法）
                            - F_FIT_RANSAC      ロバスト推定法（ランザック法）
                            - F_FIT_LMEDS           ロバスト推定法（最小メディアン法）
                            - F_FIT_MESTIMATOR2 ロバスト推定法（Ｍ推定法）…標準偏差を自動決定
                            - F_FIT_LMEDS2      ロバスト推定法（最小メディアン法）…自動決定される標準偏差の係数を設定可能
    - [in]  param           最適化パラメータ（ロバスト推定法で利用）
    - [out] center          円の中心座標
    - [out] radius          円の半径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが入力された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不可
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fit_circle2(pnts, pnt_num, fitting_mode, param, center, radius):
    r"""INT FVALGAPI fnFIE_fit_circle2( const DPNT_T* pnts, INT pnt_num, enum f_fit_mode fitting_mode, DOUBLE param, DPNT_T* center, DOUBLE* radius )
    [OSS] 点群からの円近似

    Params:
    - [in]  pnts            入力点群
    - [in]  pnt_num         入力点群の個数（  pnt_num >= 3 ）
    - [in]  fitting_mode    近似モード
                            - F_FIT_LSM         最小二乗法
                            - F_FIT_MESTIMATOR  ロバスト推定法（Ｍ推定法）
                            - F_FIT_RANSAC      ロバスト推定法（ランザック法）
                            - F_FIT_LMEDS           ロバスト推定法（最小メディアン法）
                            - F_FIT_MESTIMATOR2 ロバスト推定法（Ｍ推定法）…標準偏差を自動決定
                            - F_FIT_LMEDS2      ロバスト推定法（最小メディアン法）…自動決定される標準偏差の係数を設定可能
    - [in]  param           最適化パラメータ（ロバスト推定法で利用）
    - [out] center          円の中心座標
    - [out] radius          円の半径

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが入力された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不可
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fit_circle2(pnts, pnt_num, fitting_mode, param, center, radius)

def fnFIE_fit_ellipse(pnts, pnt_num, fitting_mode, param, center, major, minor, theta) -> Any:
    r"""INT FVALGAPI fnFIE_fit_ellipse( const DPNT_T* pnts, INT pnt_num, enum f_fit_mode fitting_mode, DOUBLE sigma, DPNT_T* center, DOUBLE* major, DOUBLE* minor, DOUBLE* theta )
    [OSS] 点群からの楕円近似

    Params:
    - [in]  pnts            入力点群
    - [in]  pnt_num         入力点群の個数（  pnt_num >= 5 ）
    - [in]  fitting_mode    近似モード
                            - F_FIT_LSM         最小二乗法
                            - F_FIT_MESTIMATOR  ロバスト推定法（Ｍ推定法）
                            - F_FIT_RANSAC      ロバスト推定法（ランザック法）
                            - F_FIT_LMEDS           ロバスト推定法（最小メディアン法）
                            - F_FIT_MESTIMATOR2 ロバスト推定法（Ｍ推定法）…標準偏差を自動決定
                            - F_FIT_LMEDS2      ロバスト推定法（最小メディアン法）…自動決定される標準偏差の係数を設定可能
    - [in]  param           最適化パラメータ（ロバスト推定法で利用）
    - [out] center          楕円の中心点
    - [out] major           楕円の主軸半径
    - [out] minor           楕円の副軸半径
    - [out] theta           楕円の主軸角度( -PI / 2 ≦  theta ≦ +PI / 2 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが入力された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不可
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fit_ellipse(pnts, pnt_num, fitting_mode, param, center, major, minor, theta):
    r"""INT FVALGAPI fnFIE_fit_ellipse( const DPNT_T* pnts, INT pnt_num, enum f_fit_mode fitting_mode, DOUBLE sigma, DPNT_T* center, DOUBLE* major, DOUBLE* minor, DOUBLE* theta )
    [OSS] 点群からの楕円近似

    Params:
    - [in]  pnts            入力点群
    - [in]  pnt_num         入力点群の個数（  pnt_num >= 5 ）
    - [in]  fitting_mode    近似モード
                            - F_FIT_LSM         最小二乗法
                            - F_FIT_MESTIMATOR  ロバスト推定法（Ｍ推定法）
                            - F_FIT_RANSAC      ロバスト推定法（ランザック法）
                            - F_FIT_LMEDS           ロバスト推定法（最小メディアン法）
                            - F_FIT_MESTIMATOR2 ロバスト推定法（Ｍ推定法）…標準偏差を自動決定
                            - F_FIT_LMEDS2      ロバスト推定法（最小メディアン法）…自動決定される標準偏差の係数を設定可能
    - [in]  param           最適化パラメータ（ロバスト推定法で利用）
    - [out] center          楕円の中心点
    - [out] major           楕円の主軸半径
    - [out] minor           楕円の副軸半径
    - [out] theta           楕円の主軸角度( -PI / 2 ≦  theta ≦ +PI / 2 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが入力された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不可
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fit_ellipse(pnts, pnt_num, fitting_mode, param, center, major, minor, theta)

def fnFIE_fit_ellipse_b2ac(points, num, cx, cy, major, minor, theta) -> Any:
    r"""INT FVALGAPI fnFIE_fit_ellipse_b2ac( const DPNT_T* points, INT num, DOUBLE* cx, DOUBLE* cy, DOUBLE* major, DOUBLE* minor, DOUBLE* theta )
    [OSS] 点列からの楕円の最小二乗近似

    Params:
    - [in]  points  入力点群配列
    - [in]  num     入力点数 (  points の要素数, 5以上)
    - [out] cx      楕円の中心Ｘ座標
    - [out] cy      楕円の中心Ｙ座標
    - [out] major   楕円の主軸半径
    - [out] minor   楕円の副軸半径
    - [out] theta   楕円の主軸角度( -PI / 2 ≦ theta ≦ +PI / 2 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fit_ellipse_b2ac(points, num, cx, cy, major, minor, theta):
    r"""INT FVALGAPI fnFIE_fit_ellipse_b2ac( const DPNT_T* points, INT num, DOUBLE* cx, DOUBLE* cy, DOUBLE* major, DOUBLE* minor, DOUBLE* theta )
    [OSS] 点列からの楕円の最小二乗近似

    Params:
    - [in]  points  入力点群配列
    - [in]  num     入力点数 (  points の要素数, 5以上)
    - [out] cx      楕円の中心Ｘ座標
    - [out] cy      楕円の中心Ｙ座標
    - [out] major   楕円の主軸半径
    - [out] minor   楕円の副軸半径
    - [out] theta   楕円の主軸角度( -PI / 2 ≦ theta ≦ +PI / 2 )

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_INVALID_PARAM       パラメータ不正
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fit_ellipse_b2ac(points, num, cx, cy, major, minor, theta)

def fnFIE_fit_polynomial(pnts, pnt_num, degree, fitting_mode, param, coefficient) -> Any:
    r"""INT FVALGAPI fnFIE_fit_polynomial( const DPNT_T* pnts, UINT pnt_num, UINT degree, enum f_fit_mode fitting_mode, DOUBLE param, DOUBLE* coefficient )
    [OSS] 点群からのn次多項式近似

    Params:
    - [in]  pnts            入力点群
    - [in]  pnt_num         入力点群の個数（ degree  + 1 <=  pnt_num）
    - [in]  degree          近似したい多項式の次数（ 1 <=  degree <= 7 ）
    - [in]  fitting_mode    近似モード
                            - F_FIT_LSM         最小二乗法
                            - F_FIT_MESTIMATOR  ロバスト推定法（Ｍ推定法）
                            - F_FIT_RANSAC      ロバスト推定法（ランザック法）
                            - F_FIT_MESTIMATOR2 ロバスト推定法（Ｍ推定法）…標準偏差を自動決定
    - [in]  param           最適化パラメータ（ロバスト推定法で利用）
    - [out] coefficient     多項式の係数を昇べき順で保持する　要素数は入力 degree + 1 に等しい

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが入力された
    - F_ERR_CALC_IMPOSSIBLE 計算不可
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_OVERFLOW     オーバーフロー発生により計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fit_polynomial(pnts, pnt_num, degree, fitting_mode, param, coefficient):
    r"""INT FVALGAPI fnFIE_fit_polynomial( const DPNT_T* pnts, UINT pnt_num, UINT degree, enum f_fit_mode fitting_mode, DOUBLE param, DOUBLE* coefficient )
    [OSS] 点群からのn次多項式近似

    Params:
    - [in]  pnts            入力点群
    - [in]  pnt_num         入力点群の個数（ degree  + 1 <=  pnt_num）
    - [in]  degree          近似したい多項式の次数（ 1 <=  degree <= 7 ）
    - [in]  fitting_mode    近似モード
                            - F_FIT_LSM         最小二乗法
                            - F_FIT_MESTIMATOR  ロバスト推定法（Ｍ推定法）
                            - F_FIT_RANSAC      ロバスト推定法（ランザック法）
                            - F_FIT_MESTIMATOR2 ロバスト推定法（Ｍ推定法）…標準偏差を自動決定
    - [in]  param           最適化パラメータ（ロバスト推定法で利用）
    - [out] coefficient     多項式の係数を昇べき順で保持する　要素数は入力 degree + 1 に等しい

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが入力された
    - F_ERR_CALC_IMPOSSIBLE 計算不可
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_OVERFLOW     オーバーフロー発生により計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fit_polynomial(pnts, pnt_num, degree, fitting_mode, param, coefficient)

def fnFIE_fit_centroid(pnts, pnt_num, fitting_mode, param, center) -> Any:
    r"""INT FVALGAPI fnFIE_fit_centroid( const DPNT_T* pnts, INT pnt_num, enum f_fit_mode fitting_mode, DOUBLE param, DPNT_T* center )
    [OSS] 点群からの重心座標推定

    Params:
    - [in]  pnts            入力点群
    - [in]  pnt_num         入力点群の個数（  pnt_num >= 1 ）
    - [in]  fitting_mode    近似モード
                            - F_FIT_LSM         最小二乗法
                            - F_FIT_MESTIMATOR  ロバスト推定法（Ｍ推定法）
                            - F_FIT_MESTIMATOR2 ロバスト推定法（Ｍ推定法）…自動決定される標準偏差の係数を設定可能
    - [in]  param           最適化パラメータ（ロバスト推定法で利用）
    - [out] center          点群の重心座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが入力された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不可
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def fit_centroid(pnts, pnt_num, fitting_mode, param, center):
    r"""INT FVALGAPI fnFIE_fit_centroid( const DPNT_T* pnts, INT pnt_num, enum f_fit_mode fitting_mode, DOUBLE param, DPNT_T* center )
    [OSS] 点群からの重心座標推定

    Params:
    - [in]  pnts            入力点群
    - [in]  pnt_num         入力点群の個数（  pnt_num >= 1 ）
    - [in]  fitting_mode    近似モード
                            - F_FIT_LSM         最小二乗法
                            - F_FIT_MESTIMATOR  ロバスト推定法（Ｍ推定法）
                            - F_FIT_MESTIMATOR2 ロバスト推定法（Ｍ推定法）…自動決定される標準偏差の係数を設定可能
    - [in]  param           最適化パラメータ（ロバスト推定法で利用）
    - [out] center          点群の重心座標

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       不正なパラメータが入力された
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_CALC_IMPOSSIBLE 計算不可
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_fit_centroid(pnts, pnt_num, fitting_mode, param, center)

def fnFIE_make_pseudo_colormap(pallet, size, type, reserve) -> Any:
    r"""INT FVALGAPI fnFIE_make_pseudo_colormap( RGBQUAD* pallet, INT size, enum f_colormap_type type, UCHAR reserve )
    疑似カラー表示用マップ生成

    Params:
    - [out] palette   色テーブル
    - [in]  size     テーブルサイズ( 1 <=  size )
    - [in]  type     カラーマップタイプ。下記の何れかを指定。
                         - F_COLORMAP_GRAY            濃淡カラーマップ
                         - F_COLORMAP_RED             赤色カラーマップ
                         - F_COLORMAP_GREEN           緑色カラーマップ
                         - F_COLORMAP_BLUE            青色カラーマップ
                         - F_COLORMAP_RAINBOW_CYCLIC  虹色サイクリックカラーマップ
                         - F_COLORMAP_RAINBOW7        虹色７色カラーマップ
                         - F_COLORMAP_RAINBOW4        虹色４色カラーマップ
                         - F_COLORMAP_RAINBOW         虹色カラーマップ
                         - F_COLORMAP_LAND            地形図カラーマップ
                         - F_COLORMAP_HOTCOLD         赤青カラーマップ
                         - F_COLORMAP_LEAF            葉色カラーマップ
                         - F_COLORMAP_KAKI            柿色カラーマップ
                         - F_COLORMAP_OCEAN           海色カラーマップ
    - [in]  reserve  RGBQUAD構造体の rgbReserved に設定する値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメーターエラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def make_pseudo_colormap(pallet, size, type, reserve=0):
    r"""INT FVALGAPI fnFIE_make_pseudo_colormap( RGBQUAD* pallet, INT size, enum f_colormap_type type, UCHAR reserve )
    疑似カラー表示用マップ生成

    Params:
    - [out] palette   色テーブル
    - [in]  size     テーブルサイズ( 1 <=  size )
    - [in]  type     カラーマップタイプ。下記の何れかを指定。
                         - F_COLORMAP_GRAY            濃淡カラーマップ
                         - F_COLORMAP_RED             赤色カラーマップ
                         - F_COLORMAP_GREEN           緑色カラーマップ
                         - F_COLORMAP_BLUE            青色カラーマップ
                         - F_COLORMAP_RAINBOW_CYCLIC  虹色サイクリックカラーマップ
                         - F_COLORMAP_RAINBOW7        虹色７色カラーマップ
                         - F_COLORMAP_RAINBOW4        虹色４色カラーマップ
                         - F_COLORMAP_RAINBOW         虹色カラーマップ
                         - F_COLORMAP_LAND            地形図カラーマップ
                         - F_COLORMAP_HOTCOLD         赤青カラーマップ
                         - F_COLORMAP_LEAF            葉色カラーマップ
                         - F_COLORMAP_KAKI            柿色カラーマップ
                         - F_COLORMAP_OCEAN           海色カラーマップ
    - [in]  reserve  RGBQUAD構造体の rgbReserved に設定する値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメーターエラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_make_pseudo_colormap(pallet, size, type, reserve)

def fnFIE_make_pseudo_colormap_dbl(r, g, b, size, scale, type) -> Any:
    r"""INT FVALGAPI fnFIE_make_pseudo_colormap_dbl( DOUBLE* r, DOUBLE* g, DOUBLE* b, INT size, DOUBLE scale, enum f_colormap_type type )
    疑似カラー表示用マップ生成(double版)

    Params:
    - [out] r      赤色テーブル（配列）
    - [out] g      緑色テーブル（配列）
    - [out] b      青色テーブル（配列）
    - [in]  size   テーブルサイズ( 1 <=  size )
    - [in]  scale  色スケール
    - [in]  type   カラーマップタイプ。下記の何れかを指定。
                       - F_COLORMAP_GRAY            濃淡カラーマップ
                       - F_COLORMAP_RED             赤色カラーマップ
                       - F_COLORMAP_GREEN           緑色カラーマップ
                       - F_COLORMAP_BLUE            青色カラーマップ
                       - F_COLORMAP_RAINBOW_CYCLIC  虹色サイクリックカラーマップ
                       - F_COLORMAP_RAINBOW7        虹色７色カラーマップ
                       - F_COLORMAP_RAINBOW4        虹色４色カラーマップ
                       - F_COLORMAP_RAINBOW         虹色カラーマップ
                       - F_COLORMAP_LAND            地形図カラーマップ
                       - F_COLORMAP_HOTCOLD         赤青カラーマップ
                       - F_COLORMAP_LEAF            葉色カラーマップ
                       - F_COLORMAP_KAKI            柿色カラーマップ
                       - F_COLORMAP_OCEAN           海色カラーマップ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメーターエラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def make_pseudo_colormap_dbl(r, g, b, size, scale, type):
    r"""INT FVALGAPI fnFIE_make_pseudo_colormap_dbl( DOUBLE* r, DOUBLE* g, DOUBLE* b, INT size, DOUBLE scale, enum f_colormap_type type )
    疑似カラー表示用マップ生成(double版)

    Params:
    - [out] r      赤色テーブル（配列）
    - [out] g      緑色テーブル（配列）
    - [out] b      青色テーブル（配列）
    - [in]  size   テーブルサイズ( 1 <=  size )
    - [in]  scale  色スケール
    - [in]  type   カラーマップタイプ。下記の何れかを指定。
                       - F_COLORMAP_GRAY            濃淡カラーマップ
                       - F_COLORMAP_RED             赤色カラーマップ
                       - F_COLORMAP_GREEN           緑色カラーマップ
                       - F_COLORMAP_BLUE            青色カラーマップ
                       - F_COLORMAP_RAINBOW_CYCLIC  虹色サイクリックカラーマップ
                       - F_COLORMAP_RAINBOW7        虹色７色カラーマップ
                       - F_COLORMAP_RAINBOW4        虹色４色カラーマップ
                       - F_COLORMAP_RAINBOW         虹色カラーマップ
                       - F_COLORMAP_LAND            地形図カラーマップ
                       - F_COLORMAP_HOTCOLD         赤青カラーマップ
                       - F_COLORMAP_LEAF            葉色カラーマップ
                       - F_COLORMAP_KAKI            柿色カラーマップ
                       - F_COLORMAP_OCEAN           海色カラーマップ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_INVALID_PARAM       パラメーターエラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_make_pseudo_colormap_dbl(r, g, b, size, scale, type)

def fnFIE_img_get_subdens(himg, x, y, mode, dens) -> Any:
    r"""INT FVALGAPI fnFIE_img_get_subdens( FHANDLE himg, DOUBLE x, DOUBLE y, enum f_sampling_mode mode, DOUBLE* dens )
    指定座標の濃度値取得(補間付き)

    Params:
    - [in]  himg    濃度を取得する画像( type: bin, uc8, s16, us16, i32, ui32, rgbq, rgbtri, double, float )
    - [in]  x       対象画素のＸ座標
    - [in]  y       対象画素のＹ座標
    - [in]  mode    補間モード
                        - F_SAMPLING_NN        最近傍法
                        - F_SAMPLING_BILINEAR  共一次線形補間法（bin画像は指定不可）
                        - F_SAMPLING_CUBIC     ３次畳み込み法（bin画像は指定不可）
    - [out] dens    濃度値配列
                         himg のチャネル数分のサイズが必用
                        RGBQUAD, RGBTRIPLE型の場合は３以上のサイズが必要

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE    himg に指定された画像が不正
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_get_subdens(himg, x, y, mode, dens):
    r"""INT FVALGAPI fnFIE_img_get_subdens( FHANDLE himg, DOUBLE x, DOUBLE y, enum f_sampling_mode mode, DOUBLE* dens )
    指定座標の濃度値取得(補間付き)

    Params:
    - [in]  himg    濃度を取得する画像( type: bin, uc8, s16, us16, i32, ui32, rgbq, rgbtri, double, float )
    - [in]  x       対象画素のＸ座標
    - [in]  y       対象画素のＹ座標
    - [in]  mode    補間モード
                        - F_SAMPLING_NN        最近傍法
                        - F_SAMPLING_BILINEAR  共一次線形補間法（bin画像は指定不可）
                        - F_SAMPLING_CUBIC     ３次畳み込み法（bin画像は指定不可）
    - [out] dens    濃度値配列
                         himg のチャネル数分のサイズが必用
                        RGBQUAD, RGBTRIPLE型の場合は３以上のサイズが必要

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE    himg に指定された画像が不正
    - F_ERR_INVALID_PARAM   パラメータエラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_get_subdens(himg, x, y, mode, dens)

def fnFIE_img_get_dens(himg, ch, x, y, dens) -> Any:
    r"""INT FVALGAPI fnFIE_img_get_dens( FHANDLE himg, INT ch, INT x, INT y, DOUBLE* dens )
    指定座標の濃度値取得

    Params:
    - [in]  himg    濃度を取得する画像( type: bin, uc8, s16, us16, i32, ui32, double, float, rgbq, rgbtri)
    - [in]  ch      対象チャネル( rgbq, rgbtriの場合、色に対応した数 [0 or 1 or 2])
    - [in]  x       対象画素のＸ座標
    - [in]  y       対象画素のＹ座標
    - [out] dens    濃度値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_IMAGE     himg に指定された画像が不正
    - F_ERR_INVALID_PARAM    パラメータエラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_get_dens(himg, ch, x, y, dens):
    r"""INT FVALGAPI fnFIE_img_get_dens( FHANDLE himg, INT ch, INT x, INT y, DOUBLE* dens )
    指定座標の濃度値取得

    Params:
    - [in]  himg    濃度を取得する画像( type: bin, uc8, s16, us16, i32, ui32, double, float, rgbq, rgbtri)
    - [in]  ch      対象チャネル( rgbq, rgbtriの場合、色に対応した数 [0 or 1 or 2])
    - [in]  x       対象画素のＸ座標
    - [in]  y       対象画素のＹ座標
    - [out] dens    濃度値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_IMAGE     himg に指定された画像が不正
    - F_ERR_INVALID_PARAM    パラメータエラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_get_dens(himg, ch, x, y, dens)

def fnFIE_img_set_dens(himg, ch, x, y, dens) -> Any:
    r"""INT FVALGAPI fnFIE_img_set_dens( FHANDLE himg, INT ch, INT x, INT y, DOUBLE dens )
    指定座標の濃度値設定

    Params:
    - [in,out]  himg    濃度を設定する画像( type: bin, uc8, s16, us16, i32, ui32, double, float, rgbq, rgbtri)
    - [in]      ch      対象チャネル( rgbq, rgbtriの場合、色に対応した数 [0 or 1 or 2])
    - [in]      x       対象画素のＸ座標
    - [in]      y       対象画素のＹ座標
    - [in]      dens    設定する濃度値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_IMAGE     himg に指定された画像が不正
    - F_ERR_INVALID_PARAM    パラメータエラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_set_dens(himg, ch, x, y, dens):
    r"""INT FVALGAPI fnFIE_img_set_dens( FHANDLE himg, INT ch, INT x, INT y, DOUBLE dens )
    指定座標の濃度値設定

    Params:
    - [in,out]  himg    濃度を設定する画像( type: bin, uc8, s16, us16, i32, ui32, double, float, rgbq, rgbtri)
    - [in]      ch      対象チャネル( rgbq, rgbtriの場合、色に対応した数 [0 or 1 or 2])
    - [in]      x       対象画素のＸ座標
    - [in]      y       対象画素のＹ座標
    - [in]      dens    設定する濃度値

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_IMAGE     himg に指定された画像が不正
    - F_ERR_INVALID_PARAM    パラメータエラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_set_dens(himg, ch, x, y, dens)

def fnFIE_img_get_dens_channels(himg, x, y, dens) -> Any:
    r"""INT FVALGAPI fnFIE_img_get_dens_channels( FHANDLE himg, INT x, INT y, DOUBLE* dens )
    指定座標の濃度値取得(全チャネル一括)

    Params:
    - [in]  himg    濃度を取得する画像( type: bin, uc8, s16, us16, i32, ui32, double, float, rgbq, rgbtri)
    - [in]  x       対象画素のＸ座標
    - [in]  y       対象画素のＹ座標
    - [out] dens    濃度値配列
                         himg のチャネル数分のサイズが必要
                        RGBQUAD, RGBTRIPLE型の場合は３以上のサイズが必要

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_IMAGE     himg に指定された画像が不正
    - F_ERR_INVALID_PARAM    パラメータエラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_get_dens_channels(himg, x, y, dens):
    r"""INT FVALGAPI fnFIE_img_get_dens_channels( FHANDLE himg, INT x, INT y, DOUBLE* dens )
    指定座標の濃度値取得(全チャネル一括)

    Params:
    - [in]  himg    濃度を取得する画像( type: bin, uc8, s16, us16, i32, ui32, double, float, rgbq, rgbtri)
    - [in]  x       対象画素のＸ座標
    - [in]  y       対象画素のＹ座標
    - [out] dens    濃度値配列
                         himg のチャネル数分のサイズが必要
                        RGBQUAD, RGBTRIPLE型の場合は３以上のサイズが必要

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_IMAGE     himg に指定された画像が不正
    - F_ERR_INVALID_PARAM    パラメータエラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_get_dens_channels(himg, x, y, dens)

def fnFIE_img_set_dens_channels(himg, x, y, dens) -> Any:
    r"""INT FVALGAPI fnFIE_img_set_dens_channels( FHANDLE himg, INT x, INT y, DOUBLE* dens )
    指定座標の濃度値設定(全チャネル一括)

    Params:
    - [in,out]  himg    濃度を設定する画像( type: bin, uc8, s16, us16, i32, ui32, double, float, rgbq, rgbtri)
    - [in]  x           対象画素のＸ座標
    - [in]  y           対象画素のＹ座標
    - [in] dens         濃度値配列
                             himg のチャネル数分のサイズが必要
                            RGBQUAD, RGBTRIPLE型の場合は３以上のサイズが必要

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_IMAGE     himg に指定された画像が不正
    - F_ERR_INVALID_PARAM    パラメータエラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_set_dens_channels(himg, x, y, dens):
    r"""INT FVALGAPI fnFIE_img_set_dens_channels( FHANDLE himg, INT x, INT y, DOUBLE* dens )
    指定座標の濃度値設定(全チャネル一括)

    Params:
    - [in,out]  himg    濃度を設定する画像( type: bin, uc8, s16, us16, i32, ui32, double, float, rgbq, rgbtri)
    - [in]  x           対象画素のＸ座標
    - [in]  y           対象画素のＹ座標
    - [in] dens         濃度値配列
                             himg のチャネル数分のサイズが必要
                            RGBQUAD, RGBTRIPLE型の場合は３以上のサイズが必要

    Returns:
    - F_ERR_NONE             正常終了
    - F_ERR_INVALID_IMAGE     himg に指定された画像が不正
    - F_ERR_INVALID_PARAM    パラメータエラー
    - F_ERR_NO_LICENCE       ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_set_dens_channels(himg, x, y, dens)

def fnFIE_img_calc_average(himg, average) -> Any:
    r"""INT FVALGAPI fnFIE_img_calc_average( FHANDLE himg, DOUBLE* average )
    画像濃度値の平均計算

    Params:
    - [in] himg             入力画像 ( type: uc8, s16, us16, double )
    - [out] average         濃度値の平均の配列
                                 himg のチャネル数分の配列長が必要です。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正 ( averageがNULL )
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_calc_average(himg, average):
    r"""INT FVALGAPI fnFIE_img_calc_average( FHANDLE himg, DOUBLE* average )
    画像濃度値の平均計算

    Params:
    - [in] himg             入力画像 ( type: uc8, s16, us16, double )
    - [out] average         濃度値の平均の配列
                                 himg のチャネル数分の配列長が必要です。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正 ( averageがNULL )
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_calc_average(himg, average)

def fnFIE_img_calc_variance(himg, variance) -> Any:
    r"""INT FVALGAPI fnFIE_img_calc_variance( FHANDLE himg, DOUBLE* variance )
    画像濃度値の分散計算

    Params:
    - [in] himg             入力画像 ( type: uc8, s16, us16, double )
    - [out] variance        濃度値の分散の配列
                                 himg のチャネル数分の配列長が必要です。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正 ( varianceがNULL )
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_calc_variance(himg, variance):
    r"""INT FVALGAPI fnFIE_img_calc_variance( FHANDLE himg, DOUBLE* variance )
    画像濃度値の分散計算

    Params:
    - [in] himg             入力画像 ( type: uc8, s16, us16, double )
    - [out] variance        濃度値の分散の配列
                                 himg のチャネル数分の配列長が必要です。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正 ( varianceがNULL )
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_calc_variance(himg, variance)

def fnFIE_averageMxN(hsrc, hdst, size_m, size_n, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_averageMxN( FHANDLE hsrc, FHANDLE hdst, INT size_m, INT size_n, INT border_mode, DOUBLE value )
    平均化フィルタ(M×N)

    Params:
    - [in] hsrc             入力画像 ( type: uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [out] hdst            出力画像 ( type: uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [in] size_m           フィルタの幅( 水平方向  1以上画像幅以下の奇数)
    - [in] size_n           フィルタの高さ( 垂直方向 1以上画像高さ以下の奇数)
    - [in] border_mode      ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] value            ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def averageMxN(hsrc, hdst, size_m=11, size_n=11, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_averageMxN( FHANDLE hsrc, FHANDLE hdst, INT size_m, INT size_n, INT border_mode, DOUBLE value )
    平均化フィルタ(M×N)

    Params:
    - [in] hsrc             入力画像 ( type: uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [out] hdst            出力画像 ( type: uc8, s16, us16, i32, ui32, float, double, rgbq, rgbtri )
    - [in] size_m           フィルタの幅( 水平方向  1以上画像幅以下の奇数)
    - [in] size_n           フィルタの高さ( 垂直方向 1以上画像高さ以下の奇数)
    - [in] border_mode      ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] value            ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_averageMxN(hsrc, hdst, size_m, size_n, border_mode, value)

def fnFIE_varianceMxN(hsrc, hdst, size_m, size_n, border_mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_varianceMxN( FHANDLE hsrc, FHANDLE hdst, INT size_m, INT size_n, INT border_mode, DOUBLE value )
    分散フィルタ(M×N)

    Params:
    - [in] hsrc             入力画像 ( type: uc8, s16, us16, double )
    - [out] hdst            出力画像 ( type: double)
    - [in] size_m           フィルタの幅( 水平方向  1以上画像幅以下の奇数)
    - [in] size_n           フィルタの高さ( 垂直方向 1以上画像高さ以下の奇数)
    - [in] border_mode      ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] value            ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def varianceMxN(hsrc, hdst, size_m=11, size_n=11, border_mode=F_BORDER_CONTINUOUS, value=0):
    r"""INT FVALGAPI fnFIE_varianceMxN( FHANDLE hsrc, FHANDLE hdst, INT size_m, INT size_n, INT border_mode, DOUBLE value )
    分散フィルタ(M×N)

    Params:
    - [in] hsrc             入力画像 ( type: uc8, s16, us16, double )
    - [out] hdst            出力画像 ( type: double)
    - [in] size_m           フィルタの幅( 水平方向  1以上画像幅以下の奇数)
    - [in] size_n           フィルタの高さ( 垂直方向 1以上画像高さ以下の奇数)
    - [in] border_mode      ボーダー処理モード。下記のいずれかを指定。
                                - F_BORDER_NONE         ボーダー拡張しない
                                - F_BORDER_ZERO         0埋めモード
                                - F_BORDER_VALUE        一定値モード
                                - F_BORDER_CONTINUOUS   端延長モード
                                - F_BORDER_REPEAT       繰り返しモード
                                - F_BORDER_MIRROR1      反転モード1
                                - F_BORDER_MIRROR2      反転モード2
    - [in] value            ボーダー濃度値。
                                 border_mode がF_BORDER_VALUEの場合のみ使用されます。
                                その他のモードの場合は，この値は無視されます。

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY        メモリ不足エラー
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_varianceMxN(hsrc, hdst, size_m, size_n, border_mode, value)

def fnFIE_img_calc_similarity(himg1, himg2, hmask, mode, value) -> Any:
    r"""INT FVALGAPI fnFIE_img_calc_similarity( FHANDLE himg1, FHANDLE himg2, FHANDLE hmask, INT mode, DOUBLE* value )
    画像間類似度計算

    Params:
    - [in] himg1    入力画像 ( type: uc8, s16, us16, double )
    - [in] himg2    入力画像 ( type: uc8, s16, us16, double )
    - [in] hmask    リージョンまたはマスク画像( type: bin, uc8 )
                        リージョンの場合、リージョンと重なる画素を計算に使用します。
                        マスク画像の場合、マスク画像がゼロでない画素を計算に使用します。
                        マスクせず入力画像全体を処理したい場合はNULLを渡します。
    - [in] mode     類似度計算モード
        - 0 : 差分絶対値総和 SAD ( Sum of Abusolute Difference )
        - 1 : 差分二乗和 SSD ( Sum of Squared Difference )
        - 2 : 正規化相互相関 ZNCC ( Zero-means Normalized Cross Correlation )
    - [out] value   計算結果

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_OBJECT  maskにリージョンでも画像でもないオブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY    メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能 正規化相互相関において分散が0の画像が入力されたりマスクで計算すべき領域が消えたりしたなど
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def img_calc_similarity(himg1, himg2, hmask, mode, value):
    r"""INT FVALGAPI fnFIE_img_calc_similarity( FHANDLE himg1, FHANDLE himg2, FHANDLE hmask, INT mode, DOUBLE* value )
    画像間類似度計算

    Params:
    - [in] himg1    入力画像 ( type: uc8, s16, us16, double )
    - [in] himg2    入力画像 ( type: uc8, s16, us16, double )
    - [in] hmask    リージョンまたはマスク画像( type: bin, uc8 )
                        リージョンの場合、リージョンと重なる画素を計算に使用します。
                        マスク画像の場合、マスク画像がゼロでない画素を計算に使用します。
                        マスクせず入力画像全体を処理したい場合はNULLを渡します。
    - [in] mode     類似度計算モード
        - 0 : 差分絶対値総和 SAD ( Sum of Abusolute Difference )
        - 1 : 差分二乗和 SSD ( Sum of Squared Difference )
        - 2 : 正規化相互相関 ZNCC ( Zero-means Normalized Cross Correlation )
    - [out] value   計算結果

    Returns:
    - F_ERR_NONE            正常終了
    - F_ERR_INVALID_IMAGE   不正な画像が渡された
    - F_ERR_INVALID_OBJECT  maskにリージョンでも画像でもないオブジェクトが渡された
    - F_ERR_INVALID_PARAM   パラメータ不正
    - F_ERR_NOMEMORY    メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE 計算不能 正規化相互相関において分散が0の画像が入力されたりマスクで計算すべき領域が消えたりしたなど
    - F_ERR_NO_LICENCE  ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_img_calc_similarity(himg1, himg2, hmask, mode, value)

def fnFIE_ml_sample_alloc(vec_dimension) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_ml_sample_alloc( INT vec_dimension )
    教師データオブジェクトの生成

    Params:
    - [in]  vec_dimension   特徴ベクトルの次元(0 <  vec_dimension )

    Returns:
    - 正常終了 作成された教師データオブジェクトのハンドル
    - NULL   異常終了(パラメータ不正、メモリ不足など)
    """
    raise NotImplementedError

def ml_sample_alloc(vec_dimension):
    r"""FHANDLE FVALGAPI fnFIE_ml_sample_alloc( INT vec_dimension )
    教師データオブジェクトの生成

    Params:
    - [in]  vec_dimension   特徴ベクトルの次元(0 <  vec_dimension )

    Returns:
    - 正常終了 作成された教師データオブジェクトのハンドル
    - NULL   異常終了(パラメータ不正、メモリ不足など)
    """

    return _fie.fnFIE_ml_sample_alloc(vec_dimension)

def fnFIE_ml_sample_get_params(hMl_sample, vec_dimension, sample_num) -> Any:
    r"""INT FVALGAPI fnFIE_ml_sample_get_params( FHANDLE hMl_sample, INT* vec_dimension, INT* sample_num )
    教師データオブジェクトのパラメータ取得

    Params:
    - [in]  hMl_sample      情報を取得する教師データオブジェクトのハンドル
    - [out] vec_dimension   特徴ベクトルの次元数
    - [out] sample_num      設定されている教師データの数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_sample_get_params(hMl_sample, vec_dimension=None, sample_num=None):
    r"""INT FVALGAPI fnFIE_ml_sample_get_params( FHANDLE hMl_sample, INT* vec_dimension, INT* sample_num )
    教師データオブジェクトのパラメータ取得

    Params:
    - [in]  hMl_sample      情報を取得する教師データオブジェクトのハンドル
    - [out] vec_dimension   特徴ベクトルの次元数
    - [out] sample_num      設定されている教師データの数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_sample_get_params(hMl_sample, vec_dimension, sample_num)

def fnFIE_ml_sample_add_data(hMl_sample, data, response) -> Any:
    r"""INT FVALGAPI fnFIE_ml_sample_add_data( FHANDLE hMl_sample, DOUBLE* data, INT response )
    教師データの追加

    Params:
    - [in]  hMl_sample          教師データを追加する教師データオブジェクトのハンドル
    - [in] *sample_data         追加する教師データの特徴ベクトル
    - [in]  response            追加する教師データのラベル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足による領域確保エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_sample_add_data(hMl_sample, data, response):
    r"""INT FVALGAPI fnFIE_ml_sample_add_data( FHANDLE hMl_sample, DOUBLE* data, INT response )
    教師データの追加

    Params:
    - [in]  hMl_sample          教師データを追加する教師データオブジェクトのハンドル
    - [in] *sample_data         追加する教師データの特徴ベクトル
    - [in]  response            追加する教師データのラベル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足による領域確保エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_sample_add_data(hMl_sample, data, response)

def fnFIE_ml_do_train_svm(hMl_sample, svm_type, margin, stop_rate, kernel_type, gamma, coeff_0, degree, preprocess, train_time_sec, error_code) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_ml_do_train_svm( FHANDLE hMl_sample, INT svm_type, DOUBLE margin, DOUBLE stop_rate, INT kernel_type, DOUBLE gamma, DOUBLE coeff_0, UINT degree, INT preprocess, INT train_time_sec, INT* error_code )
    サポートベクターマシンによる機械学習

    Params:
    - [in]  hMl_sample      学習に用いる教師データ教師データオブジェクトのハンドル
    - [in]  svm_type        サポートベクターマシンのタイプ
    - [in]  margin          ソフトマージンにおける許容パラメータ
    - [in]  stop_rate       学習を終了する収束条件
    - [in]  kernel_type     使用するカーネル関数の種類
    - [in]  gamma           カーネル関数パラメータ $ \gamma $
    - [in]  coeff_0         カーネル関数パラメータ 定数項 $c$
    - [in]  degree          カーネル関数パラメータ 次数 $d$
    - [in]  preprocess      学習の前処理指定パラメータ
    - [in]  train_time_sec  学習時間の上限値(単位：秒) 指定しない場合は0
    - [out] error_code      エラー発生時のエラーコード エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                 - F_ERR_NONE               正常終了
                                 - F_ERR_INVALID_PARAM      入力されたパラメータが不正
                                 - F_ERR_INVALID_OBJECT     入力された教師データオブジェクトが不正
                                 - F_ERR_TIMEOUT            指定された学習時間内で学習が終了しなかった
                                 - F_ERR_NOMEMORY           メモリ不足による領域確保エラー
                                 - F_ERR_CALC_IMPOSSIBLE    計算不能エラー
                                 - F_ERR_NO_LICENCE         ライセンスエラー、または未初期化エラー

    Returns:
    - 確保された機械学習オブジェクトのハンドル エラーにより学習に失敗した場合はNULLを返します
    """
    raise NotImplementedError

def ml_do_train_svm(hMl_sample, svm_type=F_ML_SVM_TYPE_C_SVM, margin=1.0, stop_rate=0.001, kernel_type=F_ML_SVM_KERNEL_LINEAR, gamma=1.0, coeff_0=1.0, degree=3, preprocess=F_ML_PRE_SCALE_VECTOR, train_time_sec=0, error_code=None):
    r"""FHANDLE FVALGAPI fnFIE_ml_do_train_svm( FHANDLE hMl_sample, INT svm_type, DOUBLE margin, DOUBLE stop_rate, INT kernel_type, DOUBLE gamma, DOUBLE coeff_0, UINT degree, INT preprocess, INT train_time_sec, INT* error_code )
    サポートベクターマシンによる機械学習

    Params:
    - [in]  hMl_sample      学習に用いる教師データ教師データオブジェクトのハンドル
    - [in]  svm_type        サポートベクターマシンのタイプ
    - [in]  margin          ソフトマージンにおける許容パラメータ
    - [in]  stop_rate       学習を終了する収束条件
    - [in]  kernel_type     使用するカーネル関数の種類
    - [in]  gamma           カーネル関数パラメータ $ \gamma $
    - [in]  coeff_0         カーネル関数パラメータ 定数項 $c$
    - [in]  degree          カーネル関数パラメータ 次数 $d$
    - [in]  preprocess      学習の前処理指定パラメータ
    - [in]  train_time_sec  学習時間の上限値(単位：秒) 指定しない場合は0
    - [out] error_code      エラー発生時のエラーコード エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                 - F_ERR_NONE               正常終了
                                 - F_ERR_INVALID_PARAM      入力されたパラメータが不正
                                 - F_ERR_INVALID_OBJECT     入力された教師データオブジェクトが不正
                                 - F_ERR_TIMEOUT            指定された学習時間内で学習が終了しなかった
                                 - F_ERR_NOMEMORY           メモリ不足による領域確保エラー
                                 - F_ERR_CALC_IMPOSSIBLE    計算不能エラー
                                 - F_ERR_NO_LICENCE         ライセンスエラー、または未初期化エラー

    Returns:
    - 確保された機械学習オブジェクトのハンドル エラーにより学習に失敗した場合はNULLを返します
    """

    return _fie.fnFIE_ml_do_train_svm(hMl_sample, svm_type, margin, stop_rate, kernel_type, gamma, coeff_0, degree, preprocess, train_time_sec, error_code)

def fnFIE_ml_get_svm_param(hMl, svm_type, margin, stop_rate, kernel_type, gamma, coeff_0, degree, preprocess) -> Any:
    r"""INT FVALGAPI fnFIE_ml_get_svm_param( FHANDLE hMl, INT* svm_type, DOUBLE* margin, DOUBLE* stop_rate, INT* kernel_type, DOUBLE* gamma, DOUBLE* coeff_0, UINT* degree, INT* preprocess )
    サポートベクターマシンのパラメータを取得する

    Params:
    - [in]  hMl_sample      情報を取得するサポートベクターマシンオブジェクト
    - [out] svm_type        サポートベクターマシンのタイプ
    - [out] margin          ソフトマージンにおける許容パラメータ
    - [out] stop_rate       学習を終了する収束条件
    - [out] kernel_type     使用するカーネル関数の種類
    - [out] gamma           カーネル関数パラメータ $ \gamma $
    - [out] coeff_0         カーネル関数パラメータ 定数項 $c$
    - [out] degree          カーネル関数パラメータ 次数 $d$
    - [out] preprocess      学習の前処理指定パラメータ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_get_svm_param(hMl, svm_type=None, margin=None, stop_rate=None, kernel_type=None, gamma=None, coeff_0=None, degree=None, preprocess=None):
    r"""INT FVALGAPI fnFIE_ml_get_svm_param( FHANDLE hMl, INT* svm_type, DOUBLE* margin, DOUBLE* stop_rate, INT* kernel_type, DOUBLE* gamma, DOUBLE* coeff_0, UINT* degree, INT* preprocess )
    サポートベクターマシンのパラメータを取得する

    Params:
    - [in]  hMl_sample      情報を取得するサポートベクターマシンオブジェクト
    - [out] svm_type        サポートベクターマシンのタイプ
    - [out] margin          ソフトマージンにおける許容パラメータ
    - [out] stop_rate       学習を終了する収束条件
    - [out] kernel_type     使用するカーネル関数の種類
    - [out] gamma           カーネル関数パラメータ $ \gamma $
    - [out] coeff_0         カーネル関数パラメータ 定数項 $c$
    - [out] degree          カーネル関数パラメータ 次数 $d$
    - [out] preprocess      学習の前処理指定パラメータ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_get_svm_param(hMl, svm_type, margin, stop_rate, kernel_type, gamma, coeff_0, degree, preprocess)

def fnFIE_ml_predict(hMl, feature_vec, response) -> Any:
    r"""INT FVALGAPI fnFIE_ml_predict( FHANDLE hMl, DOUBLE* feature_vec, INT* response )
    機械学習に基づいた、入力データの判別

    Params:
    - [in]  hMl             判別に用いる機械学習オブジェクト
    - [in]  feature_vec     判別の対象とするベクトル
    - [out] response        判別結果

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された機械学習オブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足のため計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_predict(hMl, feature_vec, response):
    r"""INT FVALGAPI fnFIE_ml_predict( FHANDLE hMl, DOUBLE* feature_vec, INT* response )
    機械学習に基づいた、入力データの判別

    Params:
    - [in]  hMl             判別に用いる機械学習オブジェクト
    - [in]  feature_vec     判別の対象とするベクトル
    - [out] response        判別結果

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された機械学習オブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足のため計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_predict(hMl, feature_vec, response)

def fnFIE_ml_get_common_param(hMl, ml_type, vec_dimension) -> Any:
    r"""INT FVALGAPI fnFIE_ml_get_common_param( FHANDLE hMl, INT* ml_type, INT* vec_dimension )
    機械学習の共通パラメータ取得

    Params:
    - [in]  hMl             情報を取得する機械学習オブジェクト
    - [out] ml_type         機械学習のタイプ
    - [out] vec_dimension   学習で用いた教師データの特徴ベクトルの次元数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_get_common_param(hMl, ml_type=None, vec_dimension=None):
    r"""INT FVALGAPI fnFIE_ml_get_common_param( FHANDLE hMl, INT* ml_type, INT* vec_dimension )
    機械学習の共通パラメータ取得

    Params:
    - [in]  hMl             情報を取得する機械学習オブジェクト
    - [out] ml_type         機械学習のタイプ
    - [out] vec_dimension   学習で用いた教師データの特徴ベクトルの次元数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_get_common_param(hMl, ml_type, vec_dimension)

def fnFIE_ml_get_train_data(hMl, train_data, data_size) -> Any:
    r"""INT FVALGAPI fnFIE_ml_get_train_data( FHANDLE hMl, UCHAR** train_data, INT* data_size )
    機械学習の学習結果の出力

    Params:
    - [in]  hMl_sample      機械学習オブジェクト
    - [out] train_data      バイナリデータの先頭ポインタ
    - [out] data_size       バイナリデータのデータサイズ(Byte単位)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力されたオブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_get_train_data(hMl, train_data, data_size):
    r"""INT FVALGAPI fnFIE_ml_get_train_data( FHANDLE hMl, UCHAR** train_data, INT* data_size )
    機械学習の学習結果の出力

    Params:
    - [in]  hMl_sample      機械学習オブジェクト
    - [out] train_data      バイナリデータの先頭ポインタ
    - [out] data_size       バイナリデータのデータサイズ(Byte単位)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力されたオブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_get_train_data(hMl, train_data, data_size)

def fnFIE_ml_restore_train_data(restore_data) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_ml_restore_train_data( UCHAR* restore_data )
    機械学習オブジェクトの復元

    Params:
    - [in] restore_data 復元するバイナリデータの先頭ポインタ

    Returns:
    - 復元した機械学習オブジェクトのハンドル  失敗した場合や不正なパラメータの場合はNULLが返却されます
    """
    raise NotImplementedError

def ml_restore_train_data(restore_data):
    r"""FHANDLE FVALGAPI fnFIE_ml_restore_train_data( UCHAR* restore_data )
    機械学習オブジェクトの復元

    Params:
    - [in] restore_data 復元するバイナリデータの先頭ポインタ

    Returns:
    - 復元した機械学習オブジェクトのハンドル  失敗した場合や不正なパラメータの場合はNULLが返却されます
    """

    return _fie.fnFIE_ml_restore_train_data(restore_data)

def fnFIE_ml_sample_alloc_color() -> Any:
    r"""FHANDLE FVALGAPI fnFIE_ml_sample_alloc_color( VOID )
    画素のカラー分類用 教師オブジェクトの生成

    Params:


    Returns:
    - 正常終了 作成された教師データオブジェクトのハンドル
    - NULL   異常終了(メモリ不足など)
    """
    raise NotImplementedError

def ml_sample_alloc_color():
    r"""FHANDLE FVALGAPI fnFIE_ml_sample_alloc_color( VOID )
    画素のカラー分類用 教師オブジェクトの生成

    Params:


    Returns:
    - 正常終了 作成された教師データオブジェクトのハンドル
    - NULL   異常終了(メモリ不足など)
    """

    return _fie.fnFIE_ml_sample_alloc_color()

def fnFIE_ml_sample_add_color_image(hMl_color, hImage, response) -> Any:
    r"""INT FVALGAPI fnFIE_ml_sample_add_color_image( FHANDLE hMl_color, FHANDLE hImage, INT response )
    カラー分類用教師データの追加(画像オブジェクトでの指定)

    Params:
    - [in]  hMl_color   教師データを追加する教師データオブジェクトのハンドル
    - [in]  hImage      教師データとして追加する画像オブジェクト(type:uc8, us16, dbl / ch:3 )
    - [in]  response    教師データのラベル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたラベルが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_INVALID_IMAGE     入力された画像オブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足による領域確保エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_sample_add_color_image(hMl_color, hImage, response):
    r"""INT FVALGAPI fnFIE_ml_sample_add_color_image( FHANDLE hMl_color, FHANDLE hImage, INT response )
    カラー分類用教師データの追加(画像オブジェクトでの指定)

    Params:
    - [in]  hMl_color   教師データを追加する教師データオブジェクトのハンドル
    - [in]  hImage      教師データとして追加する画像オブジェクト(type:uc8, us16, dbl / ch:3 )
    - [in]  response    教師データのラベル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたラベルが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_INVALID_IMAGE     入力された画像オブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足による領域確保エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_sample_add_color_image(hMl_color, hImage, response)

def fnFIE_ml_sample_add_color_area(hMl_color, hImage, hMask, response) -> Any:
    r"""INT FVALGAPI fnFIE_ml_sample_add_color_area( FHANDLE hMl_color, FHANDLE hImage, FHANDLE hMask, INT response )
    カラー分類用教師データの追加(マスクによる領域指定)

    Params:
    - [in]  hMl_color   教師データを追加する教師データオブジェクトのハンドル
    - [in]  hImage      対象の画像オブジェクト(type:uc8, us16, dbl / ch:3)
    - [in]  hMask       教師データとする領域を指定するマスクのハンドルオブジェクト
                        - リージョン
                        - ２値画像( type : bin / ch : 1)
    - [in]  response    教師データのラベル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたラベルが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクト, または不正なマスクが渡された
    - F_ERR_INVALID_IMAGE     入力された画像オブジェクト, またはマスクとして渡された画像オブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足による領域確保エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_sample_add_color_area(hMl_color, hImage, hMask, response):
    r"""INT FVALGAPI fnFIE_ml_sample_add_color_area( FHANDLE hMl_color, FHANDLE hImage, FHANDLE hMask, INT response )
    カラー分類用教師データの追加(マスクによる領域指定)

    Params:
    - [in]  hMl_color   教師データを追加する教師データオブジェクトのハンドル
    - [in]  hImage      対象の画像オブジェクト(type:uc8, us16, dbl / ch:3)
    - [in]  hMask       教師データとする領域を指定するマスクのハンドルオブジェクト
                        - リージョン
                        - ２値画像( type : bin / ch : 1)
    - [in]  response    教師データのラベル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたラベルが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクト, または不正なマスクが渡された
    - F_ERR_INVALID_IMAGE     入力された画像オブジェクト, またはマスクとして渡された画像オブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足による領域確保エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_sample_add_color_area(hMl_color, hImage, hMask, response)

def fnFIE_ml_sample_add_color_point(hMl_color, hImage, point, response) -> Any:
    r"""INT FVALGAPI fnFIE_ml_sample_add_color_point( FHANDLE hMl_color, FHANDLE hImage, PNT_T point, INT response )
    カラー分類用教師データの追加(座標指定)

    Params:
    - [in]  hMl_color   教師データを追加する教師データオブジェクトのハンドル
    - [in]  hImage      対象の画像オブジェクト(type:uc8, us16, dbl / ch:3)
    - [in]  point       教師データとする画素の座標
    - [in]  response    教師データのラベル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたラベルが不正 または 指定した座標が不正(画像範囲外など)
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_INVALID_IMAGE     入力された画像オブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足による領域確保エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_sample_add_color_point(hMl_color, hImage, point, response):
    r"""INT FVALGAPI fnFIE_ml_sample_add_color_point( FHANDLE hMl_color, FHANDLE hImage, PNT_T point, INT response )
    カラー分類用教師データの追加(座標指定)

    Params:
    - [in]  hMl_color   教師データを追加する教師データオブジェクトのハンドル
    - [in]  hImage      対象の画像オブジェクト(type:uc8, us16, dbl / ch:3)
    - [in]  point       教師データとする画素の座標
    - [in]  response    教師データのラベル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたラベルが不正 または 指定した座標が不正(画像範囲外など)
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_INVALID_IMAGE     入力された画像オブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足による領域確保エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_sample_add_color_point(hMl_color, hImage, point, response)

def fnFIE_ml_predict_color_image(hMl, hSrc, hDst) -> Any:
    r"""INT FVALGAPI fnFIE_ml_predict_color_image( FHANDLE hMl, FHANDLE hSrc, FHANDLE hDst )
    入力画像のカラー画素値による分類

    Params:
    - [in]  hMl　　　  分類に使用する学習オブジェクト
    - [in]  hSrc        分類対象の画像オブジェクト(type:uc8, us16, dbl / ch:3)
    - [out] hDst        出力画像(type:i32 / ch:1)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された機械学習オブジェクトが不正
    - F_ERR_INVALID_IMAGE     入力された画像オブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足で領域確保に失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_predict_color_image(hMl, hSrc, hDst):
    r"""INT FVALGAPI fnFIE_ml_predict_color_image( FHANDLE hMl, FHANDLE hSrc, FHANDLE hDst )
    入力画像のカラー画素値による分類

    Params:
    - [in]  hMl　　　  分類に使用する学習オブジェクト
    - [in]  hSrc        分類対象の画像オブジェクト(type:uc8, us16, dbl / ch:3)
    - [out] hDst        出力画像(type:i32 / ch:1)

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された機械学習オブジェクトが不正
    - F_ERR_INVALID_IMAGE     入力された画像オブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足で領域確保に失敗
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_predict_color_image(hMl, hSrc, hDst)

def fnFIE_ml_predict_color_point(hMl, hImage, point, response) -> Any:
    r"""INT FVALGAPI fnFIE_ml_predict_color_point( FHANDLE hMl, FHANDLE hImage, PNT_T point, INT* response )
    入力画像の指定座標の画素の分類

    Params:
    - [in]  hMl　　　  分類に使用する学習オブジェクト
    - [in]  hImage      分類対象の画像オブジェクト(type:uc8, us16, dbl / ch:3)
    - [in]  point       分類する画素の座標
    - [out] response    判別結果

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正(指定座標が画像の範囲外など)
    - F_ERR_INVALID_OBJECT  入力された機械学習オブジェクトが不正
    - F_ERR_INVALID_IMAGE     入力された画像オブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_predict_color_point(hMl, hImage, point, response):
    r"""INT FVALGAPI fnFIE_ml_predict_color_point( FHANDLE hMl, FHANDLE hImage, PNT_T point, INT* response )
    入力画像の指定座標の画素の分類

    Params:
    - [in]  hMl　　　  分類に使用する学習オブジェクト
    - [in]  hImage      分類対象の画像オブジェクト(type:uc8, us16, dbl / ch:3)
    - [in]  point       分類する画素の座標
    - [out] response    判別結果

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正(指定座標が画像の範囲外など)
    - F_ERR_INVALID_OBJECT  入力された機械学習オブジェクトが不正
    - F_ERR_INVALID_IMAGE     入力された画像オブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_predict_color_point(hMl, hImage, point, response)

def fnFIE_ml_predict_color_value(hMl, val_ch0, val_ch1, val_ch2, response) -> Any:
    r"""INT FVALGAPI fnFIE_ml_predict_color_value( FHANDLE hMl, DOUBLE val_ch0, DOUBLE val_ch1, DOUBLE val_ch2, INT* response )
    入力された画素値の分類

    Params:
    - [in]  hMl　　　  分類に使用する学習オブジェクト
    - [in]  val_ch0     分類対象の画素値(チャネル0)
    - [in]  val_ch1     分類対象の画素値(チャネル1)
    - [in]  val_ch2     分類対象の画素値(チャネル2)
    - [out] response    判別結果

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された機械学習オブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_predict_color_value(hMl, val_ch0, val_ch1, val_ch2, response):
    r"""INT FVALGAPI fnFIE_ml_predict_color_value( FHANDLE hMl, DOUBLE val_ch0, DOUBLE val_ch1, DOUBLE val_ch2, INT* response )
    入力された画素値の分類

    Params:
    - [in]  hMl　　　  分類に使用する学習オブジェクト
    - [in]  val_ch0     分類対象の画素値(チャネル0)
    - [in]  val_ch1     分類対象の画素値(チャネル1)
    - [in]  val_ch2     分類対象の画素値(チャネル2)
    - [out] response    判別結果

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された機械学習オブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_predict_color_value(hMl, val_ch0, val_ch1, val_ch2, response)

def fnFIE_ml_sample_alloc_region_shape() -> Any:
    r"""FHANDLE FVALGAPI fnFIE_ml_sample_alloc_region_shape( VOID )
    リージョンの形状識別用 教師オブジェクトの生成

    Params:


    Returns:
    - 正常終了 作成された教師データオブジェクトのハンドル
    - NULL   異常終了(メモリ不足など)
    """
    raise NotImplementedError

def ml_sample_alloc_region_shape():
    r"""FHANDLE FVALGAPI fnFIE_ml_sample_alloc_region_shape( VOID )
    リージョンの形状識別用 教師オブジェクトの生成

    Params:


    Returns:
    - 正常終了 作成された教師データオブジェクトのハンドル
    - NULL   異常終了(メモリ不足など)
    """

    return _fie.fnFIE_ml_sample_alloc_region_shape()

def fnFIE_ml_sample_add_region(hMl_Region, hRegion, response) -> Any:
    r"""INT FVALGAPI fnFIE_ml_sample_add_region( FHANDLE hMl_Region, FHANDLE hRegion, INT response )
    リージョン分類用 教師データの追加

    Params:
    - [in]  hMl_Region  教師データを追加する教師データオブジェクトのハンドル
    - [in]  hRegion     教師データとしてリージョンオブジェクトのハンドル
    - [in]  response    教師データのラベル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたラベルが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクト または リージョンオブジェクトが不正
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足による領域確保エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_sample_add_region(hMl_Region, hRegion, response):
    r"""INT FVALGAPI fnFIE_ml_sample_add_region( FHANDLE hMl_Region, FHANDLE hRegion, INT response )
    リージョン分類用 教師データの追加

    Params:
    - [in]  hMl_Region  教師データを追加する教師データオブジェクトのハンドル
    - [in]  hRegion     教師データとしてリージョンオブジェクトのハンドル
    - [in]  response    教師データのラベル

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたラベルが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクト または リージョンオブジェクトが不正
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NOMEMORY            メモリ不足による領域確保エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_sample_add_region(hMl_Region, hRegion, response)

def fnFIE_ml_predict_region_shape(hMl, hRegion, response) -> Any:
    r"""INT FVALGAPI fnFIE_ml_predict_region_shape( FHANDLE hMl, FHANDLE hRegion, INT* response )
    入力されたリージョンの識別

    Params:
    - [in]  hMl　　　  識別に使用する学習オブジェクト
    - [in]  hImage      識別対象のリージョンオブジェクト
    - [out] response    判別結果

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された機械学習オブジェクト または リージョンオブジェクトが不正
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_predict_region_shape(hMl, hRegion, response):
    r"""INT FVALGAPI fnFIE_ml_predict_region_shape( FHANDLE hMl, FHANDLE hRegion, INT* response )
    入力されたリージョンの識別

    Params:
    - [in]  hMl　　　  識別に使用する学習オブジェクト
    - [in]  hImage      識別対象のリージョンオブジェクト
    - [out] response    判別結果

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された機械学習オブジェクト または リージョンオブジェクトが不正
    - F_ERR_CALC_IMPOSSIBLE 計算不能
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_predict_region_shape(hMl, hRegion, response)

def fnFIE_ml_do_train_dtree(hMl_sample, max_depth, min_node_sample, k_fold, pruning_type, var_type, preprocess, train_time_sec, error_code) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_ml_do_train_dtree( FHANDLE hMl_sample, INT max_depth, INT min_node_sample, INT k_fold, INT pruning_type, INT var_type, INT preprocess, INT train_time_sec, INT* error_code )
    [OSS] 決定木による機械学習

    Params:
    - [in]  hMl_sample      学習に用いる教師データ教師データオブジェクトのハンドル
    - [in]  max_depth       決定木の最大の深さ(0 <=  max_depth  0で深さ無制限)
    - [in]  min_node_sample ノードに割り振られる最小サンプル数 (1 <=  min_node_sample )
    - [in]  k_fold          枝刈りの交差検証数 (2 <=  k_fold  枝刈りを行わない場合は未使用)
    - [in]  pruning_type    枝刈りのタイプ
    - [in]  var_type        教師データの特徴ベクトルの属性
    - [in]  preprocess      学習の前処理指定パラメータ
    - [in]  train_time_sec  学習時間の上限値(単位：秒) 指定しない場合は0
    - [out] error_code      エラー発生時のエラーコード エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                 - F_ERR_NONE               正常終了
                                 - F_ERR_INVALID_PARAM      入力されたパラメータが不正
                                 - F_ERR_INVALID_OBJECT     入力された教師データオブジェクトが不正
                                 - F_ERR_TIMEOUT            指定された学習時間内で学習が終了しなかった
                                 - F_ERR_NOMEMORY           メモリ不足による領域確保エラー
                                 - F_ERR_CALC_IMPOSSIBLE    計算不能エラー
                                 - F_ERR_NO_LICENCE         ライセンスエラー、または未初期化エラー

    Returns:
    - 確保された機械学習オブジェクトのハンドル エラーにより学習に失敗した場合はNULLを返します
    """
    raise NotImplementedError

def ml_do_train_dtree(hMl_sample, max_depth=20, min_node_sample=1, k_fold=10, pruning_type=F_ML_DTREE_NO_PRUNING, var_type=F_ML_SAMPLE_NUMERICAL, preprocess=F_ML_PRE_SCALE_VECTOR, train_time_sec=0, error_code=None):
    r"""FHANDLE FVALGAPI fnFIE_ml_do_train_dtree( FHANDLE hMl_sample, INT max_depth, INT min_node_sample, INT k_fold, INT pruning_type, INT var_type, INT preprocess, INT train_time_sec, INT* error_code )
    [OSS] 決定木による機械学習

    Params:
    - [in]  hMl_sample      学習に用いる教師データ教師データオブジェクトのハンドル
    - [in]  max_depth       決定木の最大の深さ(0 <=  max_depth  0で深さ無制限)
    - [in]  min_node_sample ノードに割り振られる最小サンプル数 (1 <=  min_node_sample )
    - [in]  k_fold          枝刈りの交差検証数 (2 <=  k_fold  枝刈りを行わない場合は未使用)
    - [in]  pruning_type    枝刈りのタイプ
    - [in]  var_type        教師データの特徴ベクトルの属性
    - [in]  preprocess      学習の前処理指定パラメータ
    - [in]  train_time_sec  学習時間の上限値(単位：秒) 指定しない場合は0
    - [out] error_code      エラー発生時のエラーコード エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                 - F_ERR_NONE               正常終了
                                 - F_ERR_INVALID_PARAM      入力されたパラメータが不正
                                 - F_ERR_INVALID_OBJECT     入力された教師データオブジェクトが不正
                                 - F_ERR_TIMEOUT            指定された学習時間内で学習が終了しなかった
                                 - F_ERR_NOMEMORY           メモリ不足による領域確保エラー
                                 - F_ERR_CALC_IMPOSSIBLE    計算不能エラー
                                 - F_ERR_NO_LICENCE         ライセンスエラー、または未初期化エラー

    Returns:
    - 確保された機械学習オブジェクトのハンドル エラーにより学習に失敗した場合はNULLを返します
    """

    return _fie.fnFIE_ml_do_train_dtree(hMl_sample, max_depth, min_node_sample, k_fold, pruning_type, var_type, preprocess, train_time_sec, error_code)

def fnFIE_ml_get_dtree_train_param(hMl, max_depth, min_node_sample, k_fold, pruning_type, var_type, preprocess) -> Any:
    r"""INT FVALGAPI fnFIE_ml_get_dtree_train_param( FHANDLE hMl, INT* max_depth, INT* min_node_sample, INT* k_fold, INT* pruning_type, INT* var_type, INT* preprocess )
    決定木の学習時パラメータを取得する

    Params:
    - [in]  hMl                 情報を取得する決定木オブジェクト
    - [out] max_depth           学習時に指定した決定木の深さの上限
    - [out] min_node_sample     学習時に指定した決定木の最小サンプル数
    - [out] k_fold              学習時に指定したk-交差検定の値
    - [out] pruning_type        学習時に指定した枝刈りのタイプ
    - [out] var_type            学習時に指定した特徴ベクトルのタイプ
    - [out] preprocess          学習時に指定した前処理指定パラメータ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_get_dtree_train_param(hMl, max_depth=None, min_node_sample=None, k_fold=None, pruning_type=None, var_type=None, preprocess=None):
    r"""INT FVALGAPI fnFIE_ml_get_dtree_train_param( FHANDLE hMl, INT* max_depth, INT* min_node_sample, INT* k_fold, INT* pruning_type, INT* var_type, INT* preprocess )
    決定木の学習時パラメータを取得する

    Params:
    - [in]  hMl                 情報を取得する決定木オブジェクト
    - [out] max_depth           学習時に指定した決定木の深さの上限
    - [out] min_node_sample     学習時に指定した決定木の最小サンプル数
    - [out] k_fold              学習時に指定したk-交差検定の値
    - [out] pruning_type        学習時に指定した枝刈りのタイプ
    - [out] var_type            学習時に指定した特徴ベクトルのタイプ
    - [out] preprocess          学習時に指定した前処理指定パラメータ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_get_dtree_train_param(hMl, max_depth, min_node_sample, k_fold, pruning_type, var_type, preprocess)

def fnFIE_ml_dtree_get_height(hDtree, tree_height) -> Any:
    r"""INT FVALGAPI fnFIE_ml_dtree_get_height( FHANDLE hDtree, INT* tree_height )
    決定木の高さを取得する

    Params:
    - [in]  hDtree              情報を取得する決定木オブジェクト
    - [out] tree_height         決定木の高さ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_dtree_get_height(hDtree, tree_height):
    r"""INT FVALGAPI fnFIE_ml_dtree_get_height( FHANDLE hDtree, INT* tree_height )
    決定木の高さを取得する

    Params:
    - [in]  hDtree              情報を取得する決定木オブジェクト
    - [out] tree_height         決定木の高さ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_dtree_get_height(hDtree, tree_height)

def fnFIE_ml_dtree_get_node_num(hDtree, node_num) -> Any:
    r"""INT FVALGAPI fnFIE_ml_dtree_get_node_num( FHANDLE hDtree, INT* node_num )
    決定木のノード数の取得

    Params:
    - [in]  hDtree              情報を取得する決定木オブジェクト
    - [out] node_num            決定木を構成するノードの数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_dtree_get_node_num(hDtree, node_num):
    r"""INT FVALGAPI fnFIE_ml_dtree_get_node_num( FHANDLE hDtree, INT* node_num )
    決定木のノード数の取得

    Params:
    - [in]  hDtree              情報を取得する決定木オブジェクト
    - [out] node_num            決定木を構成するノードの数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_dtree_get_node_num(hDtree, node_num)

def fnFIE_ml_dtree_get_child(hDtree, node_no, left_child_no, right_child_no) -> Any:
    r"""INT FVALGAPI fnFIE_ml_dtree_get_child( FHANDLE hDtree, INT node_no, INT* left_child_no, INT* right_child_no )
    指定されたノードの子ノードの番号を取得する

    Params:
    - [in]  hDtree              決定木オブジェクト
    - [in]  node_no             対象ノードの番号
    - [out] left_child_no       対象ノードの左分岐子ノードの番号
    - [out] right_child_no      対象ノードの右分岐子ノードの番号

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_dtree_get_child(hDtree, node_no, left_child_no=None, right_child_no=None):
    r"""INT FVALGAPI fnFIE_ml_dtree_get_child( FHANDLE hDtree, INT node_no, INT* left_child_no, INT* right_child_no )
    指定されたノードの子ノードの番号を取得する

    Params:
    - [in]  hDtree              決定木オブジェクト
    - [in]  node_no             対象ノードの番号
    - [out] left_child_no       対象ノードの左分岐子ノードの番号
    - [out] right_child_no      対象ノードの右分岐子ノードの番号

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_dtree_get_child(hDtree, node_no, left_child_no, right_child_no)

def fnFIE_ml_dtree_get_parent(hDtree, node_no, parent_no) -> Any:
    r"""INT FVALGAPI fnFIE_ml_dtree_get_parent( FHANDLE hDtree, INT node_no, INT* parent_no )
    指定されたノードの親ノードの番号を取得する

    Params:
    - [in]  hDtree              決定木オブジェクト
    - [in]  node_no             対象ノードの番号
    - [out] parent_no           対象ノードの親ノードの番号

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_dtree_get_parent(hDtree, node_no, parent_no):
    r"""INT FVALGAPI fnFIE_ml_dtree_get_parent( FHANDLE hDtree, INT node_no, INT* parent_no )
    指定されたノードの親ノードの番号を取得する

    Params:
    - [in]  hDtree              決定木オブジェクト
    - [in]  node_no             対象ノードの番号
    - [out] parent_no           対象ノードの親ノードの番号

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_dtree_get_parent(hDtree, node_no, parent_no)

def fnFIE_ml_dtree_get_node_info(hDtree, node_no, node_type, node_depth) -> Any:
    r"""INT FVALGAPI fnFIE_ml_dtree_get_node_info( FHANDLE hDtree, INT node_no, INT* node_type, INT* node_depth )
    指定されたノードの情報を取得する

    Params:
    - [in]  hDtree              決定木オブジェクト
    - [in]  node_no             対象ノードの番号
    - [out] node_type           対象ノードのタイプ
                                - F_ML_DTREE_NODE_ROOT      ルートノード
                                - F_ML_DTREE_NODE_INTERNAL  内節ノード
                                - F_ML_DTREE_NODE_LEAF      葉ノード
    - [out] node_depth          対象ノードの深さ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_dtree_get_node_info(hDtree, node_no, node_type=None, node_depth=None):
    r"""INT FVALGAPI fnFIE_ml_dtree_get_node_info( FHANDLE hDtree, INT node_no, INT* node_type, INT* node_depth )
    指定されたノードの情報を取得する

    Params:
    - [in]  hDtree              決定木オブジェクト
    - [in]  node_no             対象ノードの番号
    - [out] node_type           対象ノードのタイプ
                                - F_ML_DTREE_NODE_ROOT      ルートノード
                                - F_ML_DTREE_NODE_INTERNAL  内節ノード
                                - F_ML_DTREE_NODE_LEAF      葉ノード
    - [out] node_depth          対象ノードの深さ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_dtree_get_node_info(hDtree, node_no, node_type, node_depth)

def fnFIE_ml_dtree_get_decided_val(hDtree, node_no, decided_val) -> Any:
    r"""INT FVALGAPI fnFIE_ml_dtree_get_decided_val( FHANDLE hDtree, INT node_no, INT* decided_val )
    指定されたノードにおける出力値を取得する

    Params:
    - [in]  hDtree              決定木オブジェクト
    - [in]  node_no             対象ノードの番号
    - [out] decided_val         ノードの出力値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NODATA          指定されたノードが出力値を持たない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_dtree_get_decided_val(hDtree, node_no, decided_val):
    r"""INT FVALGAPI fnFIE_ml_dtree_get_decided_val( FHANDLE hDtree, INT node_no, INT* decided_val )
    指定されたノードにおける出力値を取得する

    Params:
    - [in]  hDtree              決定木オブジェクト
    - [in]  node_no             対象ノードの番号
    - [out] decided_val         ノードの出力値

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NODATA          指定されたノードが出力値を持たない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_dtree_get_decided_val(hDtree, node_no, decided_val)

def fnFIE_ml_dtree_get_criteria(hDtree, node_no, vec_index, criteria, criteria_num) -> Any:
    r"""INT FVALGAPI fnFIE_ml_dtree_get_criteria( FHANDLE hDtree, INT node_no, INT* vec_index, DOUBLE** criteria, INT* criteria_num )
    指定されたノードにおける分岐基準を取得する

    Params:
    - [in]  hDtree              決定木オブジェクト
    - [in]  node_no             対象ノードの番号
    - [out] vec_index           対象ノードで使用する分岐判断のベクトルの次元の値
    - [out] criteria            対象ノードの分岐基準の値を保持した配列
    - [out] criteria_num        criteriaの配列サイズ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NODATA          指定されたノードが分岐基準をもたない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_dtree_get_criteria(hDtree, node_no, vec_index=None, criteria=None, criteria_num=None):
    r"""INT FVALGAPI fnFIE_ml_dtree_get_criteria( FHANDLE hDtree, INT node_no, INT* vec_index, DOUBLE** criteria, INT* criteria_num )
    指定されたノードにおける分岐基準を取得する

    Params:
    - [in]  hDtree              決定木オブジェクト
    - [in]  node_no             対象ノードの番号
    - [out] vec_index           対象ノードで使用する分岐判断のベクトルの次元の値
    - [out] criteria            対象ノードの分岐基準の値を保持した配列
    - [out] criteria_num        criteriaの配列サイズ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された学習オブジェクトが不正
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_NODATA          指定されたノードが分岐基準をもたない
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_dtree_get_criteria(hDtree, node_no, vec_index, criteria, criteria_num)

def fnFIE_ml_do_train_boost(hMl_sample, var_type, boost_type, predictor_num, stop_error_rate, preprocess, train_time_sec, error_code) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_ml_do_train_boost( FHANDLE hMl_sample, INT var_type, INT boost_type, INT predictor_num, DOUBLE stop_error_rate, INT preprocess, INT train_time_sec, INT* error_code )
    Boostingによる機械学習

    Params:
    - [in]  hMl_sample      学習に用いる教師データ教師データオブジェクトのハンドル
    - [in]  var_type        教師データの特徴ベクトルの属性
    - [in]  boost_type      AdaBoostのタイプ
    - [in]  predictor_num   作成する弱識別器の上限値 (1 <=  predictor_num)
    - [in]  stop_error_rate 学習を終了する教師データに対する誤識別率
                                (0.0 <=  stop_error_rate <= 1.0 または F_ML_BOOST_STOPRATE_INVALID )
    - [in]  preprocess      学習の前処理指定パラメータ
    - [in]  train_time_sec  学習時間の上限値(単位：秒) 指定しない場合は0
    - [out] error_code      エラー発生時のエラーコード エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                 - F_ERR_NONE               正常終了
                                 - F_ERR_INVALID_PARAM      入力されたパラメータが不正
                                 - F_ERR_INVALID_OBJECT     入力された教師データオブジェクトが不正
                                 - F_ERR_TIMEOUT            指定された学習時間内で学習が終了しなかった
                                 - F_ERR_NOMEMORY           メモリ不足による領域確保エラー
                                 - F_ERR_CALC_IMPOSSIBLE    計算不能エラー
                                 - F_ERR_NO_LICENCE         ライセンスエラー、または未初期化エラー

    Returns:
    - 確保された機械学習オブジェクトのハンドル エラーにより学習に失敗した場合はNULLを返します
    """
    raise NotImplementedError

def ml_do_train_boost(hMl_sample, var_type=F_ML_SAMPLE_NUMERICAL, boost_type=F_BOOST_TYPE_REAL, predictor_num=100, stop_error_rate=0.001, preprocess=F_ML_PRE_SCALE_VECTOR, train_time_sec=0, error_code=None):
    r"""FHANDLE FVALGAPI fnFIE_ml_do_train_boost( FHANDLE hMl_sample, INT var_type, INT boost_type, INT predictor_num, DOUBLE stop_error_rate, INT preprocess, INT train_time_sec, INT* error_code )
    Boostingによる機械学習

    Params:
    - [in]  hMl_sample      学習に用いる教師データ教師データオブジェクトのハンドル
    - [in]  var_type        教師データの特徴ベクトルの属性
    - [in]  boost_type      AdaBoostのタイプ
    - [in]  predictor_num   作成する弱識別器の上限値 (1 <=  predictor_num)
    - [in]  stop_error_rate 学習を終了する教師データに対する誤識別率
                                (0.0 <=  stop_error_rate <= 1.0 または F_ML_BOOST_STOPRATE_INVALID )
    - [in]  preprocess      学習の前処理指定パラメータ
    - [in]  train_time_sec  学習時間の上限値(単位：秒) 指定しない場合は0
    - [out] error_code      エラー発生時のエラーコード エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                 - F_ERR_NONE               正常終了
                                 - F_ERR_INVALID_PARAM      入力されたパラメータが不正
                                 - F_ERR_INVALID_OBJECT     入力された教師データオブジェクトが不正
                                 - F_ERR_TIMEOUT            指定された学習時間内で学習が終了しなかった
                                 - F_ERR_NOMEMORY           メモリ不足による領域確保エラー
                                 - F_ERR_CALC_IMPOSSIBLE    計算不能エラー
                                 - F_ERR_NO_LICENCE         ライセンスエラー、または未初期化エラー

    Returns:
    - 確保された機械学習オブジェクトのハンドル エラーにより学習に失敗した場合はNULLを返します
    """

    return _fie.fnFIE_ml_do_train_boost(hMl_sample, var_type, boost_type, predictor_num, stop_error_rate, preprocess, train_time_sec, error_code)

def fnFIE_ml_get_boost_param(hMl, var_type, boost_type, predictor_num, stop_error_rate, preprocess, create_predictor_num, train_error_rate) -> Any:
    r"""INT FVALGAPI fnFIE_ml_get_boost_param( FHANDLE hMl, INT* var_type, INT* boost_type, INT* predictor_num, DOUBLE* stop_error_rate, INT* preprocess, INT* create_predictor_num, DOUBLE* train_error_rate )
    Boostingによる学習パラメータを取得する

    Params:
    - [in]  hMl                     情報を取得するBoostingオブジェクト
    - [out] var_type                学習時に指定した特徴ベクトルのタイプ
    - [out] boost_type              学習時に指定したBoostingのタイプ
    - [out] predictor_num           学習時に指定した弱識別器の上限数
    - [out] stop_error_rate         学習時に指定した停止条件となる誤識別率
    - [out] preprocess              学習時に指定した前処理指定パラメータ
    - [out] create_predictor_num    学習した結果生成された弱識別器の数
    - [out] train_error_rate        学習した強識別器の教師データに対する誤識別率

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_get_boost_param(hMl, var_type=None, boost_type=None, predictor_num=None, stop_error_rate=None, preprocess=None, create_predictor_num=None, train_error_rate=None):
    r"""INT FVALGAPI fnFIE_ml_get_boost_param( FHANDLE hMl, INT* var_type, INT* boost_type, INT* predictor_num, DOUBLE* stop_error_rate, INT* preprocess, INT* create_predictor_num, DOUBLE* train_error_rate )
    Boostingによる学習パラメータを取得する

    Params:
    - [in]  hMl                     情報を取得するBoostingオブジェクト
    - [out] var_type                学習時に指定した特徴ベクトルのタイプ
    - [out] boost_type              学習時に指定したBoostingのタイプ
    - [out] predictor_num           学習時に指定した弱識別器の上限数
    - [out] stop_error_rate         学習時に指定した停止条件となる誤識別率
    - [out] preprocess              学習時に指定した前処理指定パラメータ
    - [out] create_predictor_num    学習した結果生成された弱識別器の数
    - [out] train_error_rate        学習した強識別器の教師データに対する誤識別率

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_get_boost_param(hMl, var_type, boost_type, predictor_num, stop_error_rate, preprocess, create_predictor_num, train_error_rate)

def fnFIE_ml_do_train_naivebayes(hMl_sample, likelihood_type, prior_type, alpha, preprocess, train_time_sec, error_code) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_ml_do_train_naivebayes( FHANDLE hMl_sample, enum f_ml_nb_type likelihood_type, enum f_ml_nb_prior_type prior_type, DOUBLE alpha, INT preprocess, INT train_time_sec, INT* error_code )
    ナイーブベイズ分類器による機械学習

    Params:
    - [in]  hMl_sample      学習に用いる教師データ教師データオブジェクトのハンドル
    - [in]  likelihood_type     尤度のタイプ
    - [in]  prior_type      事前分布のタイプ
    - [in]  alpha   スケーリング係数α (0 <=  alpha)
    - [in]  preprocess      学習の前処理指定パラメータ
    - [in]  train_time_sec  学習時間の上限値(単位：秒) 指定しない場合は0
    - [out] error_code      エラー発生時のエラーコード エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                 - F_ERR_NONE               正常終了
                                 - F_ERR_INVALID_PARAM      入力されたパラメータが不正
                                 - F_ERR_INVALID_OBJECT     入力された教師データオブジェクトが不正
                                 - F_ERR_TIMEOUT            指定された学習時間内で学習が終了しなかった
                                 - F_ERR_NOMEMORY           メモリ不足による領域確保エラー
                                 - F_ERR_CALC_IMPOSSIBLE    計算不能エラー
                                 - F_ERR_NO_LICENCE         ライセンスエラー、または未初期化エラー

    Returns:
    - 確保された機械学習オブジェクトのハンドル エラーにより学習に失敗した場合はNULLを返します
    """
    raise NotImplementedError

def ml_do_train_naivebayes(hMl_sample, likelihood_type=F_ML_NB_GAUSSIAN, prior_type=F_ML_NB_PRIOR_UNIFORM, alpha=1.0, preprocess=F_ML_PRE_SCALE_VECTOR, train_time_sec=0, error_code=None):
    r"""FHANDLE FVALGAPI fnFIE_ml_do_train_naivebayes( FHANDLE hMl_sample, enum f_ml_nb_type likelihood_type, enum f_ml_nb_prior_type prior_type, DOUBLE alpha, INT preprocess, INT train_time_sec, INT* error_code )
    ナイーブベイズ分類器による機械学習

    Params:
    - [in]  hMl_sample      学習に用いる教師データ教師データオブジェクトのハンドル
    - [in]  likelihood_type     尤度のタイプ
    - [in]  prior_type      事前分布のタイプ
    - [in]  alpha   スケーリング係数α (0 <=  alpha)
    - [in]  preprocess      学習の前処理指定パラメータ
    - [in]  train_time_sec  学習時間の上限値(単位：秒) 指定しない場合は0
    - [out] error_code      エラー発生時のエラーコード エラーコードを受け取る必要の無い場合は、NULLを指定します。
                                 - F_ERR_NONE               正常終了
                                 - F_ERR_INVALID_PARAM      入力されたパラメータが不正
                                 - F_ERR_INVALID_OBJECT     入力された教師データオブジェクトが不正
                                 - F_ERR_TIMEOUT            指定された学習時間内で学習が終了しなかった
                                 - F_ERR_NOMEMORY           メモリ不足による領域確保エラー
                                 - F_ERR_CALC_IMPOSSIBLE    計算不能エラー
                                 - F_ERR_NO_LICENCE         ライセンスエラー、または未初期化エラー

    Returns:
    - 確保された機械学習オブジェクトのハンドル エラーにより学習に失敗した場合はNULLを返します
    """

    return _fie.fnFIE_ml_do_train_naivebayes(hMl_sample, likelihood_type, prior_type, alpha, preprocess, train_time_sec, error_code)

def fnFIE_ml_get_naivebayes_param(hMl, likelihood_type, prior_type, alpha, preprocess) -> Any:
    r"""INT FVALGAPI fnFIE_ml_get_naivebayes_param( FHANDLE hMl, enum f_ml_nb_type* likelihood_type, enum f_ml_nb_prior_type* prior_type, DOUBLE* alpha, INT* preprocess )
    ナイーブベイズ分類器による学習パラメータを取得する

    Params:
    - [in]  hMl                 情報を取得するナイーブベイズ分類器オブジェクト
    - [out] likelihood_type     尤度のタイプ
    - [out] prior_type          事前分布のタイプ
    - [out] alpha               スケーリング係数α
    - [out] preprocess          学習時に指定した前処理指定パラメータ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_get_naivebayes_param(hMl, likelihood_type=None, prior_type=None, alpha=None, preprocess=None):
    r"""INT FVALGAPI fnFIE_ml_get_naivebayes_param( FHANDLE hMl, enum f_ml_nb_type* likelihood_type, enum f_ml_nb_prior_type* prior_type, DOUBLE* alpha, INT* preprocess )
    ナイーブベイズ分類器による学習パラメータを取得する

    Params:
    - [in]  hMl                 情報を取得するナイーブベイズ分類器オブジェクト
    - [out] likelihood_type     尤度のタイプ
    - [out] prior_type          事前分布のタイプ
    - [out] alpha               スケーリング係数α
    - [out] preprocess          学習時に指定した前処理指定パラメータ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_get_naivebayes_param(hMl, likelihood_type, prior_type, alpha, preprocess)

def fnFIE_ml_naivebayes_predict_probability(hMl, feature_vec, responses) -> Any:
    r"""INT FVALGAPI fnFIE_ml_naivebayes_predict_probability( FHANDLE hMl, DOUBLE* feature_vec, DOUBLE* responses )
    ナイーブベイズ分類器による、出力クラスの生起確率の予測

    Params:
    - [in]  hMl     ナイーブベイズ分類器オブジェクト
    - [in]  feature_vec     確率計算の対象とするベクトル
    - [out] responses       クラスごとの生起確率

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足のため計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_naivebayes_predict_probability(hMl, feature_vec, responses):
    r"""INT FVALGAPI fnFIE_ml_naivebayes_predict_probability( FHANDLE hMl, DOUBLE* feature_vec, DOUBLE* responses )
    ナイーブベイズ分類器による、出力クラスの生起確率の予測

    Params:
    - [in]  hMl     ナイーブベイズ分類器オブジェクト
    - [in]  feature_vec     確率計算の対象とするベクトル
    - [out] responses       クラスごとの生起確率

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足のため計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_naivebayes_predict_probability(hMl, feature_vec, responses)

def fnFIE_ml_naivebayes_get_class_labels(hMl, labels, num_labels) -> Any:
    r"""INT FVALGAPI fnFIE_ml_naivebayes_get_class_labels( FHANDLE hMl, INT** labels, INT* num_labels )
    ナイーブベイズ分類器の学習で使用されたクラスラベルの一覧を取得する

    Params:
    - [in]  hMl         ナイーブベイズ分類器オブジェクト
    - [out] labels      クラスラベルの一覧
    - [out] num_labels  学習で使用されたクラス数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足のため計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_naivebayes_get_class_labels(hMl, labels=None, num_labels=None):
    r"""INT FVALGAPI fnFIE_ml_naivebayes_get_class_labels( FHANDLE hMl, INT** labels, INT* num_labels )
    ナイーブベイズ分類器の学習で使用されたクラスラベルの一覧を取得する

    Params:
    - [in]  hMl         ナイーブベイズ分類器オブジェクト
    - [out] labels      クラスラベルの一覧
    - [out] num_labels  学習で使用されたクラス数

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足のため計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_naivebayes_get_class_labels(hMl, labels, num_labels)

def fnFIE_ml_naivebayes_get_class_prior(hMl, prior) -> Any:
    r"""INT FVALGAPI fnFIE_ml_naivebayes_get_class_prior( FHANDLE hMl, DOUBLE* prior )
    ナイーブベイズ分類器による、出力クラスの事前確率の取得

    Params:
    - [in]  hMl     ナイーブベイズ分類器オブジェクト
    - [out] prior       クラスごとの事前確率

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_naivebayes_get_class_prior(hMl, prior):
    r"""INT FVALGAPI fnFIE_ml_naivebayes_get_class_prior( FHANDLE hMl, DOUBLE* prior )
    ナイーブベイズ分類器による、出力クラスの事前確率の取得

    Params:
    - [in]  hMl     ナイーブベイズ分類器オブジェクト
    - [out] prior       クラスごとの事前確率

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_naivebayes_get_class_prior(hMl, prior)

def fnFIE_ml_naivebayes_get_likelihood_params(hMl, label, feature_idx, params, num_params) -> Any:
    r"""INT FVALGAPI fnFIE_ml_naivebayes_get_likelihood_params( FHANDLE hMl, INT label, INT feature_idx, DOUBLE** params, INT* num_params )
    ナイーブベイズ分類器で学習された尤度モデルのパラメータを取得する

    Params:
    - [in]  hMl     ナイーブベイズ分類器オブジェクト
    - [in]  label           対象となるクラスラベル
    - [in]  feature_idx         対象となる特徴要素の番号
    - [out] params  対象となる尤度パラメータを保持した配列
    - [out] num_params   params の配列サイズ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足のため計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ml_naivebayes_get_likelihood_params(hMl, label, feature_idx, params, num_params):
    r"""INT FVALGAPI fnFIE_ml_naivebayes_get_likelihood_params( FHANDLE hMl, INT label, INT feature_idx, DOUBLE** params, INT* num_params )
    ナイーブベイズ分類器で学習された尤度モデルのパラメータを取得する

    Params:
    - [in]  hMl     ナイーブベイズ分類器オブジェクト
    - [in]  label           対象となるクラスラベル
    - [in]  feature_idx         対象となる特徴要素の番号
    - [out] params  対象となる尤度パラメータを保持した配列
    - [out] num_params   params の配列サイズ

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       入力されたパラメータが不正
    - F_ERR_INVALID_OBJECT  入力された教師データオブジェクトが不正
    - F_ERR_NOMEMORY            メモリ不足のため計算不能エラー
    - F_ERR_NO_LICENCE      ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ml_naivebayes_get_likelihood_params(hMl, label, feature_idx, params, num_params)

def fnFIE_find_peaks(src_val, src_num, neighbor, nms_length, rel_length, val_thresh, rel_thresh, max_abs_diff, sort_mode, peaks_val, peaks_pos, peaks_num) -> Any:
    r"""INT FVALGAPI fnFIE_find_peaks( DOUBLE* src_val, INT src_num, INT neighbor, INT nms_length, INT rel_length, DOUBLE val_thresh, DOUBLE rel_thresh, DOUBLE max_abs_diff, INT sort_mode, DOUBLE* peaks_val, DOUBLE* peaks_pos, INT* peaks_num )
    [OSS] ピーク探索

    Params:
    - [in]      src_val             入力配列
    - [in]      src_num             入力配列の要素数 ( 1 ≦ src_num )
    - [in]      neighbor            近傍範囲 ( 0 ≦ neighbor )
                                        極大のデータ点から 前後それぞれ  neighbor 個までの範囲を近傍とし、補間に利用します。
                                        0が指定された場合、補間なしとなります。
    - [in]      nms_length          非極大抑制のフィルタ片幅 ( 0 ≦ nms_length )
                                        極大のデータ点の前後 nms_length の範囲に複数のピークが出現したとき、
                                        そのうちの最もピーク値の大きいものを採用し、他は無視します。
                                        同値の場合は、先に出現したピークが優先されます。
                                         nms_length = 0 のときには、制限なしとなります。
    - [in]      rel_length          相対的ピーク高の計算片幅  ( 0 ≦ rel_length )
                                        極大のデータ点の前後  rel_length の範囲内で相対的ピーク高を計算します。
                                         rel_length = 0 のときには、入力配列全体が計算範囲となります。
    - [in]      val_thresh          ピーク値の閾値
                                        入力値が  val_thresh 未満のピークは出力されません。
                                         val_thresh ≦ ( 入力値の最低値 ) の場合、制限なしとなります。
    - [in]      rel_thresh          相対的ピーク高の閾値 ( 0 ≦ rel_thresh )
                                        相対的ピーク高が  rel_thresh 未満のピークは出力されません。
                                         rel_thresh = 0 の場合、制限なしとなります。
    - [in]      max_abs_diff        差分絶対値の上限 ( 0 ≦ max_abs_diff )
                                        極大のデータ点と前後の隣接しているデータ点との差がどちらも  max_abs_diff より大きいときには、ごましおノイズ等によって出現したピークとみなして無視します。
                                         max_abs_diff の値が小さいほど、ノイズを抑制しやすくピークが出現しにくい傾向があり、
                                         max_abs_diff の値が大きいほど、ノイズを抑制しにくくピークが出現しやすい傾向があります。
                                        入力値の最大値と最小値の差の1/4程度を推奨します。
                                        特に制限しない場合は、0 を指定してください。
    - [in]      sort_mode            peaks_val と  peaks_pos のソートモード
                                        <ul>
                                            <li> 0 : 位置基準昇順
                                            <li> 1 : 位置基準降順
                                            <li> 2 : ピーク値基準昇順
                                            <li> 3 : ピーク値基準降順
                                        </ul>
    - [out]     peaks_val           取得ピーク値保存用のバッファ
                                         sort_mode で指定された順にピーク値を格納します。
                                         peaks_num 個以上の配列を確保したうえで、その配列を渡してください。
    - [out]     peaks_pos           取得ピーク位置保存用のバッファ
                                         sort_mode で指定された順にピーク位置を格納します。
                                        つまり、peaks_val[idx] と peaks_pos[idx] は対応しています。
                                         peaks_num 個以上の配列を確保したうえで、その配列を渡してください。
    - [in,out]  peaks_num           ピークの個数
                                        入力のときには、ピークを最大で何個出力するか ( 1以上 ) を指定します。
                                        出力のときには、以下の数値となります。
                                        <ul>
                                            <li> 検出されたピークの個数が  peaks_num 以内の場合 : 検出されたピークの個数
                                            <li> 検出されたピークの個数が  peaks_num を超えた場合 : 入力時の  peaks_num
                                            <ul>
                                                <li> このとき、ソートモードに従い、順に  peaks_num 個のピークを出力します。
                                            </ul>
                                            </li>
                                        </ul>

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー または未初期化エラー
    """
    raise NotImplementedError

def find_peaks(src_val, src_num, neighbor, nms_length, rel_length, val_thresh, rel_thresh, max_abs_diff, sort_mode, peaks_val, peaks_pos, peaks_num):
    r"""INT FVALGAPI fnFIE_find_peaks( DOUBLE* src_val, INT src_num, INT neighbor, INT nms_length, INT rel_length, DOUBLE val_thresh, DOUBLE rel_thresh, DOUBLE max_abs_diff, INT sort_mode, DOUBLE* peaks_val, DOUBLE* peaks_pos, INT* peaks_num )
    [OSS] ピーク探索

    Params:
    - [in]      src_val             入力配列
    - [in]      src_num             入力配列の要素数 ( 1 ≦ src_num )
    - [in]      neighbor            近傍範囲 ( 0 ≦ neighbor )
                                        極大のデータ点から 前後それぞれ  neighbor 個までの範囲を近傍とし、補間に利用します。
                                        0が指定された場合、補間なしとなります。
    - [in]      nms_length          非極大抑制のフィルタ片幅 ( 0 ≦ nms_length )
                                        極大のデータ点の前後 nms_length の範囲に複数のピークが出現したとき、
                                        そのうちの最もピーク値の大きいものを採用し、他は無視します。
                                        同値の場合は、先に出現したピークが優先されます。
                                         nms_length = 0 のときには、制限なしとなります。
    - [in]      rel_length          相対的ピーク高の計算片幅  ( 0 ≦ rel_length )
                                        極大のデータ点の前後  rel_length の範囲内で相対的ピーク高を計算します。
                                         rel_length = 0 のときには、入力配列全体が計算範囲となります。
    - [in]      val_thresh          ピーク値の閾値
                                        入力値が  val_thresh 未満のピークは出力されません。
                                         val_thresh ≦ ( 入力値の最低値 ) の場合、制限なしとなります。
    - [in]      rel_thresh          相対的ピーク高の閾値 ( 0 ≦ rel_thresh )
                                        相対的ピーク高が  rel_thresh 未満のピークは出力されません。
                                         rel_thresh = 0 の場合、制限なしとなります。
    - [in]      max_abs_diff        差分絶対値の上限 ( 0 ≦ max_abs_diff )
                                        極大のデータ点と前後の隣接しているデータ点との差がどちらも  max_abs_diff より大きいときには、ごましおノイズ等によって出現したピークとみなして無視します。
                                         max_abs_diff の値が小さいほど、ノイズを抑制しやすくピークが出現しにくい傾向があり、
                                         max_abs_diff の値が大きいほど、ノイズを抑制しにくくピークが出現しやすい傾向があります。
                                        入力値の最大値と最小値の差の1/4程度を推奨します。
                                        特に制限しない場合は、0 を指定してください。
    - [in]      sort_mode            peaks_val と  peaks_pos のソートモード
                                        <ul>
                                            <li> 0 : 位置基準昇順
                                            <li> 1 : 位置基準降順
                                            <li> 2 : ピーク値基準昇順
                                            <li> 3 : ピーク値基準降順
                                        </ul>
    - [out]     peaks_val           取得ピーク値保存用のバッファ
                                         sort_mode で指定された順にピーク値を格納します。
                                         peaks_num 個以上の配列を確保したうえで、その配列を渡してください。
    - [out]     peaks_pos           取得ピーク位置保存用のバッファ
                                         sort_mode で指定された順にピーク位置を格納します。
                                        つまり、peaks_val[idx] と peaks_pos[idx] は対応しています。
                                         peaks_num 個以上の配列を確保したうえで、その配列を渡してください。
    - [in,out]  peaks_num           ピークの個数
                                        入力のときには、ピークを最大で何個出力するか ( 1以上 ) を指定します。
                                        出力のときには、以下の数値となります。
                                        <ul>
                                            <li> 検出されたピークの個数が  peaks_num 以内の場合 : 検出されたピークの個数
                                            <li> 検出されたピークの個数が  peaks_num を超えた場合 : 入力時の  peaks_num
                                            <ul>
                                                <li> このとき、ソートモードに従い、順に  peaks_num 個のピークを出力します。
                                            </ul>
                                            </li>
                                        </ul>

    Returns:
    - F_ERR_NONE                正常終了
    - F_ERR_INVALID_PARAM       パラメータ異常
    - F_ERR_NOMEMORY            メモリ不足エラー
    - F_ERR_NO_LICENCE      ライセンスエラー または未初期化エラー
    """

    return _fie.fnFIE_find_peaks(src_val, src_num, neighbor, nms_length, rel_length, val_thresh, rel_thresh, max_abs_diff, sort_mode, peaks_val, peaks_pos, peaks_num)

def fnFIE_calib_open(model, num_model, status) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_calib_open( DPNT_T* model, INT num_model, INT* status )
    """
    raise NotImplementedError

def calib_open(model, num_model, status):
    r"""FHANDLE FVALGAPI fnFIE_calib_open( DPNT_T* model, INT num_model, INT* status )
    """

    return _fie.fnFIE_calib_open(model, num_model, status)

def fnFIE_calib_close(hcalib) -> Any:
    r"""void fnFIE_calib_close( FHANDLE hcalib )
    """
    raise NotImplementedError

def calib_close(hcalib):
    r"""void fnFIE_calib_close( FHANDLE hcalib )
    """

    return _fie.fnFIE_calib_close(hcalib)

def fnFIE_calib_copy(hcalib) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_calib_copy( FHANDLE hcalib )
    """
    raise NotImplementedError

def calib_copy(hcalib):
    r"""FHANDLE FVALGAPI fnFIE_calib_copy( FHANDLE hcalib )
    """

    return _fie.fnFIE_calib_copy(hcalib)

def fnFIE_calib_add_data(hcalib, points, num_points) -> Any:
    r"""INT FVALGAPI fnFIE_calib_add_data( FHANDLE hcalib, DPNT_T* points, INT num_points )
    """
    raise NotImplementedError

def calib_add_data(hcalib, points, num_points):
    r"""INT FVALGAPI fnFIE_calib_add_data( FHANDLE hcalib, DPNT_T* points, INT num_points )
    """

    return _fie.fnFIE_calib_add_data(hcalib, points, num_points)

def fnFIE_calib_open2(type, n, unit, offset, status) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_calib_open2( INT type, INT n, DOUBLE unit, DPNT_T offset, INT* status )
    """
    raise NotImplementedError

def calib_open2(type, n, unit, offset, status):
    r"""FHANDLE FVALGAPI fnFIE_calib_open2( INT type, INT n, DOUBLE unit, DPNT_T offset, INT* status )
    """

    return _fie.fnFIE_calib_open2(type, n, unit, offset, status)

def fnFIE_calib_detect(hcalib, image, points, num_points) -> Any:
    r"""INT FVALGAPI fnFIE_calib_detect( FHANDLE hcalib, FHANDLE image, DPNT_T** points, INT* num_points )
    """
    raise NotImplementedError

def calib_detect(hcalib, image, points, num_points):
    r"""INT FVALGAPI fnFIE_calib_detect( FHANDLE hcalib, FHANDLE image, DPNT_T** points, INT* num_points )
    """

    return _fie.fnFIE_calib_detect(hcalib, image, points, num_points)

def fnFIE_calib_detect_debug(hcalib, image, points, num_points, image_bin_debug, img_debug_draw, scale_debug_draw) -> Any:
    r"""INT FVALGAPI fnFIE_calib_detect_debug( FHANDLE hcalib, FHANDLE image, DPNT_T** points, INT* num_points, FHANDLE image_bin_debug, FHANDLE img_debug_draw, DOUBLE scale_debug_draw )
    """
    raise NotImplementedError

def calib_detect_debug(hcalib, image, points, num_points, image_bin_debug, img_debug_draw, scale_debug_draw):
    r"""INT FVALGAPI fnFIE_calib_detect_debug( FHANDLE hcalib, FHANDLE image, DPNT_T** points, INT* num_points, FHANDLE image_bin_debug, FHANDLE img_debug_draw, DOUBLE scale_debug_draw )
    """

    return _fie.fnFIE_calib_detect_debug(hcalib, image, points, num_points, image_bin_debug, img_debug_draw, scale_debug_draw)

def fnFIE_calib_add_data2(hcalib, image) -> Any:
    r"""INT FVALGAPI fnFIE_calib_add_data2( FHANDLE hcalib, FHANDLE image )
    """
    raise NotImplementedError

def calib_add_data2(hcalib, image):
    r"""INT FVALGAPI fnFIE_calib_add_data2( FHANDLE hcalib, FHANDLE image )
    """

    return _fie.fnFIE_calib_add_data2(hcalib, image)

def fnFIE_calib_calc_intrinsic_parameters(hcalib, pcamera) -> Any:
    r"""INT FVALGAPI fnFIE_calib_calc_intrinsic_parameters( FHANDLE hcalib, F_CAMERA_PARAM* pcamera )
    """
    raise NotImplementedError

def calib_calc_intrinsic_parameters(hcalib, pcamera):
    r"""INT FVALGAPI fnFIE_calib_calc_intrinsic_parameters( FHANDLE hcalib, F_CAMERA_PARAM* pcamera )
    """

    return _fie.fnFIE_calib_calc_intrinsic_parameters(hcalib, pcamera)

def fnFIE_calib_calc_extrinsic_parameters(camera, model_points, marker_points, num_points, rotation, translation, homography) -> Any:
    r"""INT FVALGAPI fnFIE_calib_calc_extrinsic_parameters( F_CAMERA_PARAM camera, DPNT_T* model_points, DPNT_T* marker_points, INT num_points, FMATRIX* rotation, FVECTOR* translation, FMATRIX* homography )
    """
    raise NotImplementedError

def calib_calc_extrinsic_parameters(camera, model_points, marker_points, num_points, rotation, translation, homography):
    r"""INT FVALGAPI fnFIE_calib_calc_extrinsic_parameters( F_CAMERA_PARAM camera, DPNT_T* model_points, DPNT_T* marker_points, INT num_points, FMATRIX* rotation, FVECTOR* translation, FMATRIX* homography )
    """

    return _fie.fnFIE_calib_calc_extrinsic_parameters(camera, model_points, marker_points, num_points, rotation, translation, homography)

def fnFIE_calib_calc_homography_matrix(camera, rotation, translation, homography) -> Any:
    r"""INT FVALGAPI fnFIE_calib_calc_homography_matrix( F_CAMERA_PARAM camera, FMATRIX* rotation, FVECTOR* translation, FMATRIX* homography )
    """
    raise NotImplementedError

def calib_calc_homography_matrix(camera, rotation, translation, homography):
    r"""INT FVALGAPI fnFIE_calib_calc_homography_matrix( F_CAMERA_PARAM camera, FMATRIX* rotation, FVECTOR* translation, FMATRIX* homography )
    """

    return _fie.fnFIE_calib_calc_homography_matrix(camera, rotation, translation, homography)

def fnFIE_calib_calc_1shot(hcalib, view_num, pcamera, homohraphy) -> Any:
    r"""INT FVALGAPI fnFIE_calib_calc_1shot( FHANDLE hcalib, INT view_num, F_CAMERA_PARAM* pcamera, FMATRIX* homohraphy )
    """
    raise NotImplementedError

def calib_calc_1shot(hcalib, view_num, pcamera, homohraphy):
    r"""INT FVALGAPI fnFIE_calib_calc_1shot( FHANDLE hcalib, INT view_num, F_CAMERA_PARAM* pcamera, FMATRIX* homohraphy )
    """

    return _fie.fnFIE_calib_calc_1shot(hcalib, view_num, pcamera, homohraphy)

def fnFIE_calib_calc_error(hcalib, camera, min_error, max_error, average_error) -> Any:
    r"""INT FVALGAPI fnFIE_calib_calc_error( FHANDLE hcalib, F_CAMERA_PARAM camera, DOUBLE* min_error, DOUBLE* max_error, DOUBLE* average_error )
    """
    raise NotImplementedError

def calib_calc_error(hcalib, camera, min_error, max_error, average_error):
    r"""INT FVALGAPI fnFIE_calib_calc_error( FHANDLE hcalib, F_CAMERA_PARAM camera, DOUBLE* min_error, DOUBLE* max_error, DOUBLE* average_error )
    """

    return _fie.fnFIE_calib_calc_error(hcalib, camera, min_error, max_error, average_error)

def fnFIE_calib_calc_error2(hcalib, camera, view_num, diff, num_points) -> Any:
    r"""INT FVALGAPI fnFIE_calib_calc_error2( FHANDLE hcalib, F_CAMERA_PARAM camera, INT view_num, DPNT_T* diff, INT num_points )
    """
    raise NotImplementedError

def calib_calc_error2(hcalib, camera, view_num, diff, num_points):
    r"""INT FVALGAPI fnFIE_calib_calc_error2( FHANDLE hcalib, F_CAMERA_PARAM camera, INT view_num, DPNT_T* diff, INT num_points )
    """

    return _fie.fnFIE_calib_calc_error2(hcalib, camera, view_num, diff, num_points)

def fnFIE_calib_calc_error3(hcalib, camera, points, diff, num_points) -> Any:
    r"""INT FVALGAPI fnFIE_calib_calc_error3( FHANDLE hcalib, F_CAMERA_PARAM camera, DPNT_T* points, DPNT_T* diff, INT num_points )
    """
    raise NotImplementedError

def calib_calc_error3(hcalib, camera, points, diff, num_points):
    r"""INT FVALGAPI fnFIE_calib_calc_error3( FHANDLE hcalib, F_CAMERA_PARAM camera, DPNT_T* points, DPNT_T* diff, INT num_points )
    """

    return _fie.fnFIE_calib_calc_error3(hcalib, camera, points, diff, num_points)

def fnFIE_calib_get_model_points(hcalib, model, num_model) -> Any:
    r"""INT FVALGAPI fnFIE_calib_get_model_points( FHANDLE hcalib, DPNT_T** model, INT* num_model )
    """
    raise NotImplementedError

def calib_get_model_points(hcalib, model, num_model):
    r"""INT FVALGAPI fnFIE_calib_get_model_points( FHANDLE hcalib, DPNT_T** model, INT* num_model )
    """

    return _fie.fnFIE_calib_get_model_points(hcalib, model, num_model)

def fnFIE_calib_get_marker_points(hcalib, view_num, points, num_points) -> Any:
    r"""INT FVALGAPI fnFIE_calib_get_marker_points( FHANDLE hcalib, INT view_num, DPNT_T** points, INT* num_points )
    """
    raise NotImplementedError

def calib_get_marker_points(hcalib, view_num, points, num_points):
    r"""INT FVALGAPI fnFIE_calib_get_marker_points( FHANDLE hcalib, INT view_num, DPNT_T** points, INT* num_points )
    """

    return _fie.fnFIE_calib_get_marker_points(hcalib, view_num, points, num_points)

def fnFIE_calib_get_num_view(hcalib, num_view) -> Any:
    r"""INT FVALGAPI fnFIE_calib_get_num_view( FHANDLE hcalib, INT* num_view )
    """
    raise NotImplementedError

def calib_get_num_view(hcalib, num_view):
    r"""INT FVALGAPI fnFIE_calib_get_num_view( FHANDLE hcalib, INT* num_view )
    """

    return _fie.fnFIE_calib_get_num_view(hcalib, num_view)

def fnFIE_calib_get_num_model(hcalib, num_model) -> Any:
    r"""INT FVALGAPI fnFIE_calib_get_num_model( FHANDLE hcalib, INT* num_model )
    """
    raise NotImplementedError

def calib_get_num_model(hcalib, num_model):
    r"""INT FVALGAPI fnFIE_calib_get_num_model( FHANDLE hcalib, INT* num_model )
    """

    return _fie.fnFIE_calib_get_num_model(hcalib, num_model)

def fnFIE_calib_undistort_points(camera, src_points, dst_points, num_points) -> Any:
    r"""INT FVALGAPI fnFIE_calib_undistort_points( F_CAMERA_PARAM camera, DPNT_T* src_points, DPNT_T* dst_points, INT num_points )
    """
    raise NotImplementedError

def calib_undistort_points(camera, src_points, dst_points, num_points):
    r"""INT FVALGAPI fnFIE_calib_undistort_points( F_CAMERA_PARAM camera, DPNT_T* src_points, DPNT_T* dst_points, INT num_points )
    """

    return _fie.fnFIE_calib_undistort_points(camera, src_points, dst_points, num_points)

def fnFIE_calib_undistort_image_map(camera, map) -> Any:
    r"""INT FVALGAPI fnFIE_calib_undistort_image_map( F_CAMERA_PARAM camera, FHANDLE map )
    """
    raise NotImplementedError

def calib_undistort_image_map(camera, map):
    r"""INT FVALGAPI fnFIE_calib_undistort_image_map( F_CAMERA_PARAM camera, FHANDLE map )
    """

    return _fie.fnFIE_calib_undistort_image_map(camera, map)

def fnFIE_calib_undistort_image_map_scale(camera, offset, scale, map) -> Any:
    r"""INT FVALGAPI fnFIE_calib_undistort_image_map_scale( F_CAMERA_PARAM camera, DPNT_T offset, DOUBLE scale, FHANDLE map )
    """
    raise NotImplementedError

def calib_undistort_image_map_scale(camera, offset, scale, map):
    r"""INT FVALGAPI fnFIE_calib_undistort_image_map_scale( F_CAMERA_PARAM camera, DPNT_T offset, DOUBLE scale, FHANDLE map )
    """

    return _fie.fnFIE_calib_undistort_image_map_scale(camera, offset, scale, map)

def fnFIE_calib_distort_points(camera, src_points, dst_points, num_points) -> Any:
    r"""INT FVALGAPI fnFIE_calib_distort_points( F_CAMERA_PARAM camera, DPNT_T* src_points, DPNT_T* dst_points, INT num_points )
    """
    raise NotImplementedError

def calib_distort_points(camera, src_points, dst_points, num_points):
    r"""INT FVALGAPI fnFIE_calib_distort_points( F_CAMERA_PARAM camera, DPNT_T* src_points, DPNT_T* dst_points, INT num_points )
    """

    return _fie.fnFIE_calib_distort_points(camera, src_points, dst_points, num_points)

def fnFIE_calib_distort_image_map(camera, map) -> Any:
    r"""INT FVALGAPI fnFIE_calib_distort_image_map( F_CAMERA_PARAM camera, FHANDLE map )
    """
    raise NotImplementedError

def calib_distort_image_map(camera, map):
    r"""INT FVALGAPI fnFIE_calib_distort_image_map( F_CAMERA_PARAM camera, FHANDLE map )
    """

    return _fie.fnFIE_calib_distort_image_map(camera, map)

def fnFIE_calib_undistort_fit_scale(camera, src_width, src_height, mode, fit_scale, fit_offset, fit_width, fit_height) -> Any:
    r"""INT FVALGAPI fnFIE_calib_undistort_fit_scale( F_CAMERA_PARAM camera, INT src_width, INT src_height, INT mode, DOUBLE* fit_scale, DPNT_T* fit_offset, INT* fit_width, INT* fit_height )
    """
    raise NotImplementedError

def calib_undistort_fit_scale(camera, src_width, src_height, mode, fit_scale, fit_offset, fit_width, fit_height):
    r"""INT FVALGAPI fnFIE_calib_undistort_fit_scale( F_CAMERA_PARAM camera, INT src_width, INT src_height, INT mode, DOUBLE* fit_scale, DPNT_T* fit_offset, INT* fit_width, INT* fit_height )
    """

    return _fie.fnFIE_calib_undistort_fit_scale(camera, src_width, src_height, mode, fit_scale, fit_offset, fit_width, fit_height)

def fnFIE_calib_undistort_fit_rect(camera, src_width, src_height, mode, scale, fit_offset, fit_width, fit_height) -> Any:
    r"""INT FVALGAPI fnFIE_calib_undistort_fit_rect( F_CAMERA_PARAM camera, INT src_width, INT src_height, INT mode, DOUBLE scale, DPNT_T* fit_offset, INT* fit_width, INT* fit_height )
    """
    raise NotImplementedError

def calib_undistort_fit_rect(camera, src_width, src_height, mode, scale, fit_offset, fit_width, fit_height):
    r"""INT FVALGAPI fnFIE_calib_undistort_fit_rect( F_CAMERA_PARAM camera, INT src_width, INT src_height, INT mode, DOUBLE scale, DPNT_T* fit_offset, INT* fit_width, INT* fit_height )
    """

    return _fie.fnFIE_calib_undistort_fit_rect(camera, src_width, src_height, mode, scale, fit_offset, fit_width, fit_height)

def fnFIE_calib_rectify_ud_image_map(camera, homography, origin_x, origin_y, ppm, map) -> Any:
    r"""INT FVALGAPI fnFIE_calib_rectify_ud_image_map( F_CAMERA_PARAM camera, FMATRIX* homography, DOUBLE origin_x, DOUBLE origin_y, DOUBLE ppm, FHANDLE map )
    """
    raise NotImplementedError

def calib_rectify_ud_image_map(camera, homography, origin_x, origin_y, ppm, map):
    r"""INT FVALGAPI fnFIE_calib_rectify_ud_image_map( F_CAMERA_PARAM camera, FMATRIX* homography, DOUBLE origin_x, DOUBLE origin_y, DOUBLE ppm, FHANDLE map )
    """

    return _fie.fnFIE_calib_rectify_ud_image_map(camera, homography, origin_x, origin_y, ppm, map)

def fnFIE_calib_rectify_matrix(homography, origin_x, origin_y, ppm, rectify) -> Any:
    r"""INT FVALGAPI fnFIE_calib_rectify_matrix( FMATRIX* homography, DOUBLE origin_x, DOUBLE origin_y, DOUBLE ppm, FMATRIX* rectify )
    """
    raise NotImplementedError

def calib_rectify_matrix(homography, origin_x, origin_y, ppm, rectify):
    r"""INT FVALGAPI fnFIE_calib_rectify_matrix( FMATRIX* homography, DOUBLE origin_x, DOUBLE origin_y, DOUBLE ppm, FMATRIX* rectify )
    """

    return _fie.fnFIE_calib_rectify_matrix(homography, origin_x, origin_y, ppm, rectify)

def fnFIE_calib_rectify_matrix_inv(homography, origin_x, origin_y, ppm, rect_inv) -> Any:
    r"""INT FVALGAPI fnFIE_calib_rectify_matrix_inv( FMATRIX* homography, DOUBLE origin_x, DOUBLE origin_y, DOUBLE ppm, FMATRIX* rect_inv )
    """
    raise NotImplementedError

def calib_rectify_matrix_inv(homography, origin_x, origin_y, ppm, rect_inv):
    r"""INT FVALGAPI fnFIE_calib_rectify_matrix_inv( FMATRIX* homography, DOUBLE origin_x, DOUBLE origin_y, DOUBLE ppm, FMATRIX* rect_inv )
    """

    return _fie.fnFIE_calib_rectify_matrix_inv(homography, origin_x, origin_y, ppm, rect_inv)

def fnFIE_aligned_corner_extraction(fim, roi_horz, roi_vert, delta_angle, filter_size, line_horz_out, line_vert_out, pnt_out) -> Any:
    r"""INT FVALGAPI fnFIE_aligned_corner_extraction( const FHANDLE fim, BOX_T roi_horz, BOX_T roi_vert, DOUBLE delta_angle, INT filter_size, DLINE_T* line_horz_out, DLINE_T* line_vert_out, DPNT_T* pnt_out )
    指定された画像領域から縦・横線を検出し交点を抽出します

    Params:
    - [in]      fim             入力画像( 1 channel, UC8 )
    - [in]      roi_horz        横線を検出する画像領域
    - [in]      roi_vert        縦線を検出する画像領域
    - [in]      delta_angle     横線と縦線の間の角度（単位：ラジアン）。
                                    縦線の角度＝横線の角度＋ delta_angle
    - [in]      filter_size     エッジ抽出フィルターのサイズ。３以上の奇数でなければなりません。
    - [out]     line_horz_out   抽出された横線
                                    不要な場合は NULL を指定可能です。
    - [out]     line_vert_out   抽出された縦線
                                    不要な場合は NULL を指定可能です。
    - [out]     pnt_out         抽出された交点
                                    不要な場合は NULL を指定可能です。

    Returns:
    - F_ERR_NONE                 正常終了
    - F_ERR_NOMEMORY             メモリ不足エラー
    - F_ERR_INVALID_PARAM        パラメータ不正エラー
    - F_ERR_INVALID_IMAGE        画像オブジェクトエラー
    - F_ERR_CALC_IMPOSSIBLE      計算不能エラー
    - F_ERR_NO_LICENCE           ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def aligned_corner_extraction(fim, roi_horz, roi_vert, delta_angle, filter_size=11, line_horz_out=None, line_vert_out=None, pnt_out=None):
    r"""INT FVALGAPI fnFIE_aligned_corner_extraction( const FHANDLE fim, BOX_T roi_horz, BOX_T roi_vert, DOUBLE delta_angle, INT filter_size, DLINE_T* line_horz_out, DLINE_T* line_vert_out, DPNT_T* pnt_out )
    指定された画像領域から縦・横線を検出し交点を抽出します

    Params:
    - [in]      fim             入力画像( 1 channel, UC8 )
    - [in]      roi_horz        横線を検出する画像領域
    - [in]      roi_vert        縦線を検出する画像領域
    - [in]      delta_angle     横線と縦線の間の角度（単位：ラジアン）。
                                    縦線の角度＝横線の角度＋ delta_angle
    - [in]      filter_size     エッジ抽出フィルターのサイズ。３以上の奇数でなければなりません。
    - [out]     line_horz_out   抽出された横線
                                    不要な場合は NULL を指定可能です。
    - [out]     line_vert_out   抽出された縦線
                                    不要な場合は NULL を指定可能です。
    - [out]     pnt_out         抽出された交点
                                    不要な場合は NULL を指定可能です。

    Returns:
    - F_ERR_NONE                 正常終了
    - F_ERR_NOMEMORY             メモリ不足エラー
    - F_ERR_INVALID_PARAM        パラメータ不正エラー
    - F_ERR_INVALID_IMAGE        画像オブジェクトエラー
    - F_ERR_CALC_IMPOSSIBLE      計算不能エラー
    - F_ERR_NO_LICENCE           ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_aligned_corner_extraction(fim, roi_horz, roi_vert, delta_angle, filter_size, line_horz_out, line_vert_out, pnt_out)

def fnFIE_ps_curvature(hsrc, hdst, normal_thresh, curvature_type) -> Any:
    r"""INT FVALGAPI fnFIE_ps_curvature( FHANDLE hsrc, FHANDLE hdst, DOUBLE normal_thresh, INT curvature_type )
    曲率画像生成

    Params:
    - [in]      hsrc        入力画像 ( type: double / ch: 3 )
    - [out]     hdst        出力画像(曲率画像) ( type: double / ch: 1 )
    - [in]      normal_thresh       法線のZ成分が小さい場合の閾値
    - [in]      curvature_type      曲率の種類。下記のいずれかを指定。
                                - F_CURVATURE_GAUSSIAN          ガウス曲率
                                - F_CURVATURE_MEAN          平均曲率

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ps_curvature(hsrc, hdst, normal_thresh=0.1, curvature_type=F_CURVATURE_MEAN):
    r"""INT FVALGAPI fnFIE_ps_curvature( FHANDLE hsrc, FHANDLE hdst, DOUBLE normal_thresh, INT curvature_type )
    曲率画像生成

    Params:
    - [in]      hsrc        入力画像 ( type: double / ch: 3 )
    - [out]     hdst        出力画像(曲率画像) ( type: double / ch: 1 )
    - [in]      normal_thresh       法線のZ成分が小さい場合の閾値
    - [in]      curvature_type      曲率の種類。下記のいずれかを指定。
                                - F_CURVATURE_GAUSSIAN          ガウス曲率
                                - F_CURVATURE_MEAN          平均曲率

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ps_curvature(hsrc, hdst, normal_thresh, curvature_type)

def fnFIE_ps_frankot_chellappa(hsrc, hdst, normal_thresh) -> Any:
    r"""INT FVALGAPI fnFIE_ps_frankot_chellappa( FHANDLE hsrc, FHANDLE hdst, DOUBLE normal_thresh )
    Frankot-Chellappa法による高さ画像生成

    Params:
    - [in]      hsrc        入力法線画像 ( type: double / ch: 3 )
    - [out]     hdst        出力高さ画像 ( type: double / ch: 1 )
    - [in]      normal_thresh       法線のZ成分が小さい場合の閾値

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_INVALID_IMAGE     不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM     パラメータ異常
    - F_ERR_NOMEMORY          メモリ不足エラー
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ps_frankot_chellappa(hsrc, hdst, normal_thresh=0.1):
    r"""INT FVALGAPI fnFIE_ps_frankot_chellappa( FHANDLE hsrc, FHANDLE hdst, DOUBLE normal_thresh )
    Frankot-Chellappa法による高さ画像生成

    Params:
    - [in]      hsrc        入力法線画像 ( type: double / ch: 3 )
    - [out]     hdst        出力高さ画像 ( type: double / ch: 1 )
    - [in]      normal_thresh       法線のZ成分が小さい場合の閾値

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_INVALID_IMAGE     不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM     パラメータ異常
    - F_ERR_NOMEMORY          メモリ不足エラー
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ps_frankot_chellappa(hsrc, hdst, normal_thresh)

def fnFIE_ps_horn_brooks(hsrc, hdst, normal_thresh, niter) -> Any:
    r"""INT FVALGAPI fnFIE_ps_horn_brooks( FHANDLE hsrc, FHANDLE hdst, DOUBLE normal_thresh, INT niter )
    Horn-Brooks法による高さ画像生成

    Params:
    - [in]      hsrc        入力法線画像 ( type: double / ch: 3 )
    - [out]     hdst        出力高さ画像 ( type: double / ch: 1 )
    - [in]      normal_thresh       法線のZ成分が小さい場合の閾値
    - [in]      niter           イテレーション数

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_INVALID_IMAGE     不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM     パラメータ異常
    - F_ERR_NOMEMORY          メモリ不足エラー
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ps_horn_brooks(hsrc, hdst, normal_thresh=0.1, niter=100):
    r"""INT FVALGAPI fnFIE_ps_horn_brooks( FHANDLE hsrc, FHANDLE hdst, DOUBLE normal_thresh, INT niter )
    Horn-Brooks法による高さ画像生成

    Params:
    - [in]      hsrc        入力法線画像 ( type: double / ch: 3 )
    - [out]     hdst        出力高さ画像 ( type: double / ch: 1 )
    - [in]      normal_thresh       法線のZ成分が小さい場合の閾値
    - [in]      niter           イテレーション数

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_INVALID_IMAGE     不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM     パラメータ異常
    - F_ERR_NOMEMORY          メモリ不足エラー
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ps_horn_brooks(hsrc, hdst, normal_thresh, niter)

def fnFIE_ps_woodham_calc_light_from_pos(source, target, slant, tilt, n) -> Any:
    r"""INT FVALGAPI fnFIE_ps_woodham_calc_light_from_pos( DPNT3_T* source, DPNT3_T* target, DOUBLE* slant, DOUBLE* tilt, INT n )
    照度差ステレオ光源ベクトルの情報補助関数（空間座標）

    Params:
    - [in]      source      光源の始点の座標
    - [in]      target      光源の終点の座標
    - [out]     slant       出力光源ベクトルの情報であるslantの配列
    - [out]     tilt        出力光源ベクトルの情報であるtiltの配列
    - [in]      n       光源の数（1以上の整数）

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_INVALID_PARAM     パラメータ異常
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ps_woodham_calc_light_from_pos(source, target, slant, tilt, n):
    r"""INT FVALGAPI fnFIE_ps_woodham_calc_light_from_pos( DPNT3_T* source, DPNT3_T* target, DOUBLE* slant, DOUBLE* tilt, INT n )
    照度差ステレオ光源ベクトルの情報補助関数（空間座標）

    Params:
    - [in]      source      光源の始点の座標
    - [in]      target      光源の終点の座標
    - [out]     slant       出力光源ベクトルの情報であるslantの配列
    - [out]     tilt        出力光源ベクトルの情報であるtiltの配列
    - [in]      n       光源の数（1以上の整数）

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_INVALID_PARAM     パラメータ異常
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ps_woodham_calc_light_from_pos(source, target, slant, tilt, n)

def fnFIE_ps_woodham_calc_light_ring(height, radius, initial_angle, light_order, slant, tilt, n) -> Any:
    r"""INT FVALGAPI fnFIE_ps_woodham_calc_light_ring( DOUBLE height, DOUBLE radius, DOUBLE initial_angle, INT light_order, DOUBLE* slant, DOUBLE* tilt, INT n )
    照度差ステレオ光源ベクトルの情報補助関数（リング照明）

    Params:
    - [in]      height      光源の高さ（0＜height）
    - [in]      radius      光源の半径（0＜radius）
    - [in]      initial_angle       光源の初期角度（0≦initial_angle＜360）
    - [in]      light_order     光源の点灯順序
    - [out]     slant       出力光源ベクトルの情報であるslantの配列
    - [out]     tilt        出力光源ベクトルの情報であるtiltの配列
    - [in]      n       光源の個数（1以上の整数）

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_INVALID_PARAM     パラメータ異常
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ps_woodham_calc_light_ring(height, radius, initial_angle, light_order, slant, tilt, n):
    r"""INT FVALGAPI fnFIE_ps_woodham_calc_light_ring( DOUBLE height, DOUBLE radius, DOUBLE initial_angle, INT light_order, DOUBLE* slant, DOUBLE* tilt, INT n )
    照度差ステレオ光源ベクトルの情報補助関数（リング照明）

    Params:
    - [in]      height      光源の高さ（0＜height）
    - [in]      radius      光源の半径（0＜radius）
    - [in]      initial_angle       光源の初期角度（0≦initial_angle＜360）
    - [in]      light_order     光源の点灯順序
    - [out]     slant       出力光源ベクトルの情報であるslantの配列
    - [out]     tilt        出力光源ベクトルの情報であるtiltの配列
    - [in]      n       光源の個数（1以上の整数）

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_INVALID_PARAM     パラメータ異常
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ps_woodham_calc_light_ring(height, radius, initial_angle, light_order, slant, tilt, n)

def fnFIE_ps_woodham(hsrc, slant, tilt, hdst_normal, hdst_albedo) -> Any:
    r"""INT FVALGAPI fnFIE_ps_woodham( FHANDLE hsrc, DOUBLE* slant, DOUBLE* tilt, FHANDLE hdst_normal, FHANDLE hdst_albedo )
    [OSS] Woodhamによる法線画像生成

    Params:
    - [in]      hsrc        入力画像 ( type: uc8, us16, double )
    - [in]      slant       光源ベクトルの情報であるslantの配列
    - [in]      tilt        光源ベクトルの情報であるtiltの配列
    - [out]     hdst_normal     出力法線画像 ( type: double, / ch: 3 )
    - [out]     hdst_albedo     出力アルベド画像 ( type: double, / ch: 1 )

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_INVALID_IMAGE     不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM     パラメータ異常
    - F_ERR_NOMEMORY          メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE   計算不能エラー
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def ps_woodham(hsrc, slant, tilt, hdst_normal, hdst_albedo=None):
    r"""INT FVALGAPI fnFIE_ps_woodham( FHANDLE hsrc, DOUBLE* slant, DOUBLE* tilt, FHANDLE hdst_normal, FHANDLE hdst_albedo )
    [OSS] Woodhamによる法線画像生成

    Params:
    - [in]      hsrc        入力画像 ( type: uc8, us16, double )
    - [in]      slant       光源ベクトルの情報であるslantの配列
    - [in]      tilt        光源ベクトルの情報であるtiltの配列
    - [out]     hdst_normal     出力法線画像 ( type: double, / ch: 3 )
    - [out]     hdst_albedo     出力アルベド画像 ( type: double, / ch: 1 )

    Returns:
    - F_ERR_NONE              正常終了
    - F_ERR_INVALID_IMAGE     不正な画像ハンドルが渡された。
    - F_ERR_INVALID_PARAM     パラメータ異常
    - F_ERR_NOMEMORY          メモリ不足エラー
    - F_ERR_CALC_IMPOSSIBLE   計算不能エラー
    - F_ERR_NO_LICENCE        ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_ps_woodham(hsrc, slant, tilt, hdst_normal, hdst_albedo)

def fnFIE_imgstack_alloc(add_img_mode, check_img_format) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_imgstack_alloc( INT add_img_mode, BOOL check_img_format )
    画像スタックオブジェクトの作成

    Params:
    -  [in] add_img_mode 画像格納モード
        -  F_IMGSTACK_CHILD_MODE チャイルド画像モード
        -  F_IMGSTACK_ROOT_MODE ルート画像モード
    -  [in] check_img_format 画像型、チャネル数、縦横サイズ統一オプション
        -  TRUE を指定した場合、画像スタックオブジェクトに2枚目以降の画像を追加した際に、1枚目の画像と画像型、チャネル数、及びサイズが等しいかをチェックし、異なる場合にエラーを返します。
        -  FALSE を指定した場合、上記のチェックを行いません。

    Returns:
    - 作成した画像スタックオブジェクト。
    パラメータエラー、ライセンスエラー、またはメモリ確保エラーで失敗した場合はNULLを返します。
    """
    raise NotImplementedError

def imgstack_alloc(add_img_mode, check_img_format):
    r"""FHANDLE FVALGAPI fnFIE_imgstack_alloc( INT add_img_mode, BOOL check_img_format )
    画像スタックオブジェクトの作成

    Params:
    -  [in] add_img_mode 画像格納モード
        -  F_IMGSTACK_CHILD_MODE チャイルド画像モード
        -  F_IMGSTACK_ROOT_MODE ルート画像モード
    -  [in] check_img_format 画像型、チャネル数、縦横サイズ統一オプション
        -  TRUE を指定した場合、画像スタックオブジェクトに2枚目以降の画像を追加した際に、1枚目の画像と画像型、チャネル数、及びサイズが等しいかをチェックし、異なる場合にエラーを返します。
        -  FALSE を指定した場合、上記のチェックを行いません。

    Returns:
    - 作成した画像スタックオブジェクト。
    パラメータエラー、ライセンスエラー、またはメモリ確保エラーで失敗した場合はNULLを返します。
    """

    return _fie.fnFIE_imgstack_alloc(add_img_mode, check_img_format)

def fnFIE_imgstack_getat(hstack, index, errorcode) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_imgstack_getat( FHANDLE hstack, INT index, INT* errorcode )
    画像の取得

    Params:
    -  [in] hstack  画像スタックオブジェクト
    -  [in] index 画像の番号。0以上で、 fnFIE_imgstack_getnum() で得た数値より小さくなければなりません。
    -  [out] errorcode エラーコード。必要がなければNULLを渡してください。
        - F_ERR_NO_LICENCE ライセンス異常
        - F_ERR_INVALID_OBJECT オブジェクト異常
        - F_ERR_INVALID_PARAM パラメータ異常
        - F_ERR_NOMEMORY メモリ不足
        - F_ERR_NONE 正常終了

    Returns:
    - 画像オブジェクト。失敗した場合はNULLを返します。
    """
    raise NotImplementedError

def imgstack_getat(hstack, index, errorcode):
    r"""FHANDLE FVALGAPI fnFIE_imgstack_getat( FHANDLE hstack, INT index, INT* errorcode )
    画像の取得

    Params:
    -  [in] hstack  画像スタックオブジェクト
    -  [in] index 画像の番号。0以上で、 fnFIE_imgstack_getnum() で得た数値より小さくなければなりません。
    -  [out] errorcode エラーコード。必要がなければNULLを渡してください。
        - F_ERR_NO_LICENCE ライセンス異常
        - F_ERR_INVALID_OBJECT オブジェクト異常
        - F_ERR_INVALID_PARAM パラメータ異常
        - F_ERR_NOMEMORY メモリ不足
        - F_ERR_NONE 正常終了

    Returns:
    - 画像オブジェクト。失敗した場合はNULLを返します。
    """

    return _fie.fnFIE_imgstack_getat(hstack, index, errorcode)

def fnFIE_imgstack_getnum(hstack) -> Any:
    r"""INT FVALGAPI fnFIE_imgstack_getnum( FHANDLE hstack )
    画像の数を取得

    Params:
    -  [in] hstack 画像スタックオブジェクト

    Returns:
    - 格納されている画像の数。パラメータエラー、またはライセンスエラーの場合に -1 を返します。
    """
    raise NotImplementedError

def imgstack_getnum(hstack):
    r"""INT FVALGAPI fnFIE_imgstack_getnum( FHANDLE hstack )
    画像の数を取得

    Params:
    -  [in] hstack 画像スタックオブジェクト

    Returns:
    - 格納されている画像の数。パラメータエラー、またはライセンスエラーの場合に -1 を返します。
    """

    return _fie.fnFIE_imgstack_getnum(hstack)

def fnFIE_imgstack_clear(hstack) -> Any:
    r"""INT FVALGAPI fnFIE_imgstack_clear( FHANDLE hstack )
    画像スタック内の画像を全て取り除く

    Params:
    -  [in,out] hstack 画像スタックオブジェクト

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_OBJECT  hstack が画像スタックオブジェクトではない
    - F_ERR_NO_LICENCE ライセンスエラー
    """
    raise NotImplementedError

def imgstack_clear(hstack):
    r"""INT FVALGAPI fnFIE_imgstack_clear( FHANDLE hstack )
    画像スタック内の画像を全て取り除く

    Params:
    -  [in,out] hstack 画像スタックオブジェクト

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_OBJECT  hstack が画像スタックオブジェクトではない
    - F_ERR_NO_LICENCE ライセンスエラー
    """

    return _fie.fnFIE_imgstack_clear(hstack)

def fnFIE_imgstack_push_back(hstack, himage) -> Any:
    r"""INT FVALGAPI fnFIE_imgstack_push_back( FHANDLE hstack, FHANDLE himage )
    画像スタック末尾に画像を追加する

    Params:
    -  [in,out] hstack 画像スタックオブジェクト
    -  [in] himage 追加する画像

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_OBJECT  hstack が画像スタックオブジェクトではない
    - F_ERR_INVALID_IMAGE  himage が画像オブジェクトではない
            または画像型、チャネル数、縦横サイズ統一オプションが TRUE のとき、追加された画像と1枚目の画像の画像型、チャネル数、縦横サイズが異なる
    - F_ERR_NOMEMORY メモリ確保エラー
    - F_ERR_NO_LICENCE ライセンスエラー
    """
    raise NotImplementedError

def imgstack_push_back(hstack, himage):
    r"""INT FVALGAPI fnFIE_imgstack_push_back( FHANDLE hstack, FHANDLE himage )
    画像スタック末尾に画像を追加する

    Params:
    -  [in,out] hstack 画像スタックオブジェクト
    -  [in] himage 追加する画像

    Returns:
    - F_ERR_NONE 正常終了
    - F_ERR_INVALID_OBJECT  hstack が画像スタックオブジェクトではない
    - F_ERR_INVALID_IMAGE  himage が画像オブジェクトではない
            または画像型、チャネル数、縦横サイズ統一オプションが TRUE のとき、追加された画像と1枚目の画像の画像型、チャネル数、縦横サイズが異なる
    - F_ERR_NOMEMORY メモリ確保エラー
    - F_ERR_NO_LICENCE ライセンスエラー
    """

    return _fie.fnFIE_imgstack_push_back(hstack, himage)

def fnFIE_imgstack_pop_back(hstack, errorcode) -> Any:
    r"""FHANDLE FVALGAPI fnFIE_imgstack_pop_back( FHANDLE hstack, INT* errorcode )
    画像スタック末尾の画像取り出し

    Params:
    -  [in,out] hstack 画像スタックオブジェクト
    -  [out] errcode エラーコード。必要なければNULLを渡してください
        - F_ERR_NONE 正常終了
        - F_ERR_INVALID_OBJECT  hstack が画像スタックオブジェクトではない
        - F_ERR_NODATA  hstack に画像がひとつもない
        - F_ERR_NO_LICENCE ライセンスエラー

    Returns:
    - 取り出した画像オブジェクト。失敗した場合はNULLを返します。
    """
    raise NotImplementedError

def imgstack_pop_back(hstack, errorcode):
    r"""FHANDLE FVALGAPI fnFIE_imgstack_pop_back( FHANDLE hstack, INT* errorcode )
    画像スタック末尾の画像取り出し

    Params:
    -  [in,out] hstack 画像スタックオブジェクト
    -  [out] errcode エラーコード。必要なければNULLを渡してください
        - F_ERR_NONE 正常終了
        - F_ERR_INVALID_OBJECT  hstack が画像スタックオブジェクトではない
        - F_ERR_NODATA  hstack に画像がひとつもない
        - F_ERR_NO_LICENCE ライセンスエラー

    Returns:
    - 取り出した画像オブジェクト。失敗した場合はNULLを返します。
    """

    return _fie.fnFIE_imgstack_pop_back(hstack, errorcode)

def fnFIE_imgstack_insert(hstack, index, himage) -> Any:
    r"""INT FVALGAPI fnFIE_imgstack_insert( FHANDLE hstack, INT index, FHANDLE himage )
    特定の位置に画像を追加

    Params:
    -  [in] hstack 画像スタックオブジェクト
    -  [in] index 追加位置の番号
    -  [in] himage 追加する画像オブジェクト

    Returns:
    - F_ERR_NONE　正常終了
    - F_ERR_INVALID_OBJECT  hstack が画像スタックオブジェクトではない
    - F_ERR_INVALID_PARAM  index が有効な値ではない
    - F_ERR_INVALID_IMAGE  himage が画像オブジェクトではない
        または画像型、チャネル数、縦横サイズ統一オプションが TRUE のとき、追加された画像と1枚目の画像の画像型、チャネル数、縦横サイズが異なる
    - F_ERR_NOMEMORY メモリ不足エラー
    - F_ERR_NO_LICENCE ライセンスエラー
    """
    raise NotImplementedError

def imgstack_insert(hstack, index, himage):
    r"""INT FVALGAPI fnFIE_imgstack_insert( FHANDLE hstack, INT index, FHANDLE himage )
    特定の位置に画像を追加

    Params:
    -  [in] hstack 画像スタックオブジェクト
    -  [in] index 追加位置の番号
    -  [in] himage 追加する画像オブジェクト

    Returns:
    - F_ERR_NONE　正常終了
    - F_ERR_INVALID_OBJECT  hstack が画像スタックオブジェクトではない
    - F_ERR_INVALID_PARAM  index が有効な値ではない
    - F_ERR_INVALID_IMAGE  himage が画像オブジェクトではない
        または画像型、チャネル数、縦横サイズ統一オプションが TRUE のとき、追加された画像と1枚目の画像の画像型、チャネル数、縦横サイズが異なる
    - F_ERR_NOMEMORY メモリ不足エラー
    - F_ERR_NO_LICENCE ライセンスエラー
    """

    return _fie.fnFIE_imgstack_insert(hstack, index, himage)

def fnFIE_imgstack_erase(hstack, index) -> Any:
    r"""INT FVALGAPI fnFIE_imgstack_erase( FHANDLE hstack, INT index )
    特定の位置の画像を削除

    Params:
    -  [in] hstack 画像スタックオブジェクト
    -  [in] index 削除位置の番号

    Returns:
    - F_ERR_NONE　正常終了
    - F_ERR_INVALID_OBJECT  hstack が画像スタックオブジェクトではない
    - F_ERR_INVALID_PARAM  index が有効な値ではない、画像スタックに画像がひとつも格納されていない
    - F_ERR_NO_LICENCE ライセンスエラー
    """
    raise NotImplementedError

def imgstack_erase(hstack, index):
    r"""INT FVALGAPI fnFIE_imgstack_erase( FHANDLE hstack, INT index )
    特定の位置の画像を削除

    Params:
    -  [in] hstack 画像スタックオブジェクト
    -  [in] index 削除位置の番号

    Returns:
    - F_ERR_NONE　正常終了
    - F_ERR_INVALID_OBJECT  hstack が画像スタックオブジェクトではない
    - F_ERR_INVALID_PARAM  index が有効な値ではない、画像スタックに画像がひとつも格納されていない
    - F_ERR_NO_LICENCE ライセンスエラー
    """

    return _fie.fnFIE_imgstack_erase(hstack, index)

def fnFIE_imgstack_check(hstack, href) -> Any:
    r"""INT FVALGAPI fnFIE_imgstack_check( FHANDLE hstack, FHANDLE href )
    画像スタック内の画像の形式を確認する

    Params:
    -  [in] hstack チェック対象の画像スタックオブジェクト
    -  [in] href チェックの基準とする画像オブジェクトまたは画像スタックオブジェクト

    Returns:
    - F_ERR_NONE
        -  href に画像オブジェクトを渡した場合、 hstack 内の全ての画像が  href の画像型、チャネル数、縦横サイズについて等しい
        -  href に画像スタックオブジェクトを渡した場合、  hstack 内の画像数が  href 内の画像数と等しく、
        かつ  hstack 内の  href と対応する位置の画像が画像型、チャネル数、縦横サイズについて等しい
        -  href にNULLを渡した場合
            -  hstack 内の全ての画像が  hstack の先頭の画像と画像型、チャネル数、縦横サイズについて等しい
            -  hstack 内の画像枚数が1枚以下
    - F_ERR_INVALID_OBJECT
        - hstack が画像スタックオブジェクトではない
        - href が以下のいずれにも該当しない
            - 画像オブジェクト
            - 画像スタックオブジェクト
            - NULL
    - F_ERR_INVALID_IMAGE
        - 画像を比較し、画像型、チャネル数、縦横サイズのいずれかが等しくない
        -  href に画像スタックオブジェクトを渡した場合、  hstack 内の画像数と href 内の画像数が等しくない
    - F_ERR_NO_LICENCE ライセンスエラー
    """
    raise NotImplementedError

def imgstack_check(hstack, href):
    r"""INT FVALGAPI fnFIE_imgstack_check( FHANDLE hstack, FHANDLE href )
    画像スタック内の画像の形式を確認する

    Params:
    -  [in] hstack チェック対象の画像スタックオブジェクト
    -  [in] href チェックの基準とする画像オブジェクトまたは画像スタックオブジェクト

    Returns:
    - F_ERR_NONE
        -  href に画像オブジェクトを渡した場合、 hstack 内の全ての画像が  href の画像型、チャネル数、縦横サイズについて等しい
        -  href に画像スタックオブジェクトを渡した場合、  hstack 内の画像数が  href 内の画像数と等しく、
        かつ  hstack 内の  href と対応する位置の画像が画像型、チャネル数、縦横サイズについて等しい
        -  href にNULLを渡した場合
            -  hstack 内の全ての画像が  hstack の先頭の画像と画像型、チャネル数、縦横サイズについて等しい
            -  hstack 内の画像枚数が1枚以下
    - F_ERR_INVALID_OBJECT
        - hstack が画像スタックオブジェクトではない
        - href が以下のいずれにも該当しない
            - 画像オブジェクト
            - 画像スタックオブジェクト
            - NULL
    - F_ERR_INVALID_IMAGE
        - 画像を比較し、画像型、チャネル数、縦横サイズのいずれかが等しくない
        -  href に画像スタックオブジェクトを渡した場合、  hstack 内の画像数と href 内の画像数が等しくない
    - F_ERR_NO_LICENCE ライセンスエラー
    """

    return _fie.fnFIE_imgstack_check(hstack, href)

def fnFIE_allinfocus(hstack, hdst_allinfocus, hdst_index, mode, param1, param2) -> Any:
    r"""INT FVALGAPI fnFIE_allinfocus( FHANDLE hstack, FHANDLE hdst_allinfocus, FHANDLE hdst_index, INT mode, DOUBLE param1, DOUBLE param2 )
    全焦点画像生成

    Params:
    - [in]      hstack      入力画像スタック ( type: double, uc8 )
    - [out]     hdst_allinfocus     出力画像(全焦点画像) ( type: double, uc8 )
    - [out]     hdst_index      出力画像(インデックス画像) ( type: double, uc8 / ch: 1 )
    - [in]      mode        全焦点画像を得る手法。下記のいずれかを指定。
                                - F_ALLINFOCUS_LOG  LoGフィルタを利用した手法
                                - F_ALLINFOCUS_DOA  DoAフィルタを利用した手法
    - [in]      param1      パラメータ（ mode によって意味が異なります ）
    - [in]      param2      パラメータ（ mode によって意味が異なります ）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 不正なオブジェクトが渡された
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """
    raise NotImplementedError

def allinfocus(hstack, hdst_allinfocus, hdst_index, mode, param1, param2):
    r"""INT FVALGAPI fnFIE_allinfocus( FHANDLE hstack, FHANDLE hdst_allinfocus, FHANDLE hdst_index, INT mode, DOUBLE param1, DOUBLE param2 )
    全焦点画像生成

    Params:
    - [in]      hstack      入力画像スタック ( type: double, uc8 )
    - [out]     hdst_allinfocus     出力画像(全焦点画像) ( type: double, uc8 )
    - [out]     hdst_index      出力画像(インデックス画像) ( type: double, uc8 / ch: 1 )
    - [in]      mode        全焦点画像を得る手法。下記のいずれかを指定。
                                - F_ALLINFOCUS_LOG  LoGフィルタを利用した手法
                                - F_ALLINFOCUS_DOA  DoAフィルタを利用した手法
    - [in]      param1      パラメータ（ mode によって意味が異なります ）
    - [in]      param2      パラメータ（ mode によって意味が異なります ）

    Returns:
    - F_ERR_NONE           正常終了
    - F_ERR_INVALID_OBJECT 不正なオブジェクトが渡された
    - F_ERR_INVALID_IMAGE  不正な画像ハンドルが渡された
    - F_ERR_INVALID_PARAM  パラメータ異常
    - F_ERR_NOMEMORY       メモリ不足エラー
    - F_ERR_NO_LICENCE     ライセンスエラー、または未初期化エラー
    """

    return _fie.fnFIE_allinfocus(hstack, hdst_allinfocus, hdst_index, mode, param1, param2)

def fnFIE_d4i5(dIn) -> Any:
    r"""static INLINE INT fnFIE_d4i5( DOUBLE dIn ) { if( dIn >= 0.0 ) return(( INT )( dIn + 0.5 ) ); else return(( INT )( dIn - 0.5 ) ); }
    """
    raise NotImplementedError

def d4i5(dIn):
    r"""static INLINE INT fnFIE_d4i5( DOUBLE dIn ) { if( dIn >= 0.0 ) return(( INT )( dIn + 0.5 ) ); else return(( INT )( dIn - 0.5 ) ); }
    """

    return _fie.fnFIE_d4i5(dIn)

def fnOAL_malloc(tMemSize) -> Any:
    r"""void * fnOAL_malloc( size_t tMemSize )
    """
    raise NotImplementedError


def fnOAL_calloc(num, size) -> Any:
    r"""void * fnOAL_calloc( size_t num, size_t size )
    """
    raise NotImplementedError


def fnOAL_realloc(vpOldPtr, tNewMemSize) -> Any:
    r"""void * fnOAL_realloc( void * vpOldPtr, size_t tNewMemSize )
    """
    raise NotImplementedError


def fnOAL_free(vpPtr) -> Any:
    r"""void fnOAL_free( void * vpPtr )
    """
    raise NotImplementedError


def fnOAL_aligned_malloc(sz, align) -> Any:
    r"""void * fnOAL_aligned_malloc( size_t sz, INT align )
    """
    raise NotImplementedError


def fnOAL_aligned_free(pt) -> Any:
    r"""void fnOAL_aligned_free( void * pt )
    """
    raise NotImplementedError


