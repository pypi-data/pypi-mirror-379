{% macro BlueprintTemplate(bp_name, subnet_name, cluster_name, vm_image, vpc_name) -%}
# THIS FILE IS AUTOMATICALLY GENERATED.
"""
Sample NCM Self-Service DSL for {{bp_name}} blueprint

The top-level folder contains the following files:
HelloBlueprint/
├── .local
│   └── keys
│       ├── ssh_key
│       └── ssh_key_pub
├── blueprint.py
└── scripts
    ├── pkg_install_task.sh
    └── pkg_uninstall_task.sh

On launch, this blueprint does the following:
  1. Creates AHV VM (2 vCPUs, 4G Mem, 1 core)
  2. Creates placeholder (VM_DISK_IMAGE) to supply VM Disk Image
  3. Injects SSH public key in the VM using cloud init.
  4. Creates NCM Self-Service credential using the SSH private key to run tasks on the VM.

Order of execution for every deployment during blueprint launch:
  1. Substrate.__pre_create__() (Only http and escript tasks are allowed here)
  2. Substrate.__create__() (Generated from provider_spec)
  3. Package.__install__() (Scripts to install application go here)
  4. Service.__create__() (Scripts to configure and create the service go here)
  5. Service.__start__() (Scripts to start the service go here)

Useful commands (execute from top-level directory):
  1. calm compile bp --file {{bp_name}}Blueprint/blueprint.py
  2. calm create bp --file {{bp_name}}Blueprint/blueprint.py --name <blueprint_name>
  3. calm get bps --name <blueprint_name>
  4. calm describe bp <blueprint_name>
  5. calm launch bp <blueprint_name> --app_name <app_name> -i
  6. calm get apps --name <app_name>
  7. calm describe app <app_name>
  8. calm delete app <app_name>
  9. calm delete bp <blueprint_name>

Remark: 
1. Provided SSH Creds in this blueprint works only with VM Disk Images supporting cloud init guest customization. 
2. For all other VM Disk Images, supply valid creds for blueprint to work properly.

"""

import os

from calm.dsl.builtins import CalmVariable as Variable
from calm.dsl.builtins import CalmTask as Task
from calm.dsl.builtins import action, basic_cred
from calm.dsl.builtins import read_local_file
from calm.dsl.builtins import AhvVmResources, ahv_vm
from calm.dsl.builtins import AhvVmDisk, AhvVmNic, AhvVmGC
from calm.dsl.builtins import VmProfile, VmBlueprint
from calm.dsl.builtins import Metadata
from calm.dsl.builtins import Ref


# SSH Credentials
USERNAME = "admin"
PRIVATE_KEY = read_local_file(os.path.join("keys", "ssh_key"))
PUBLIC_KEY = read_local_file(os.path.join("keys", "ssh_key_pub"))
CredObject = basic_cred(
    USERNAME, PRIVATE_KEY, name="admin", type="KEY", default=True,
)

VM_DISK_IMAGE = "" # Add VM Disk Image name here


class {{bp_name}}VmResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(VM_DISK_IMAGE, bootable=True),
    ]
    {% if vpc_name != "" %}nics = [AhvVmNic.NormalNic.ingress(subnet="{{subnet_name}}", vpc="{{vpc_name}}")]
    {% else %}nics = [AhvVmNic.NormalNic.ingress(subnet="{{subnet_name}}", cluster="{{cluster_name}}")]
    {% endif %}

    guest_customization = AhvVmGC.CloudInit(
        config={
            "users": [
                {
                    "name": USERNAME,
                    "ssh-authorized-keys": [PUBLIC_KEY],
                    "sudo": ["ALL=(ALL) NOPASSWD:ALL"],
                }
            ]
        }
    )


class {{bp_name}}Profile(VmProfile):

    # Profile Variables
    var1 = Variable.Simple("sample_val1", runtime=True)
    var2 = Variable.Simple("sample_val2", runtime=True)

    # Vm Spec for Substrate
    provider_spec = ahv_vm(resources={{bp_name}}VmResources, name="{{bp_name}}Vm", cluster=Ref.Cluster(name="{{cluster_name}}"))

    # Package Actions
    @action
    def __install__():

        # Package install variable
        sample_pkg_var = Variable.Simple("Sample package installation")

        # Step 1
        Task.Exec.ssh(
            name="Task1", filename=os.path.join("scripts", "pkg_install_task.sh")
        )
    
    @action
    def __uninstall__():

        # Step 1
        Task.Exec.ssh(
            name="Task1", filename=os.path.join("scripts", "pkg_uninstall_task.sh")
        )
    
    # Substrate Actions
    @action
    def __pre_create__():

        # Step 1
        Task.Exec.escript(
            name="Task1", script="print('Pre Create task runs before VM is created')"
        )
    
    # Profile Actions
    @action
    def custom_profile_action_1():
        """Sample description for a profile action"""

        # Note: Runbook Tasks, Deployment tasks are not allowed
        Task.Exec.ssh(
            name="Task1",
            script='echo "Profile level action using @@{var1}@@ and @@{var2}@@"',
        )


class {{bp_name}}(VmBlueprint):

    # Credentials for blueprint
    credentials = [CredObject]

    profiles = [{{bp_name}}Profile]


class {{bp_name}}Metadata(Metadata):

    categories = {"TemplateType": "Vm"}

{%- endmacro %}

{{BlueprintTemplate(bp_name, subnet_name, cluster_name, vm_image, vpc_name)}}
