# Generated by Django 3.2.20 on 2024-08-29 03:24

import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
from django.conf import settings
from django.contrib.auth.management import create_permissions
from django.db import migrations, models

import transcribe.models

INITIAL_TAG_DATA = [
    {
        'id': 1,
        'name': 'Heading',
        'description': 'a heading or chapter title',
        'open_tag': '<head>',
        'close_tag': '</head>',
    },  # noqa
    {
        'id': 2,
        'name': 'Quote',
        'description': 'quoted text',
        'open_tag': '<q>',
        'close_tag': '</q>',
    },  # noqa
    {
        'id': 3,
        'name': 'Person',
        'description': 'the name of a person (e.g. John Doe)',
        'open_tag': '<name type="person">',
        'close_tag': '</name>',
    },  # noqa
    {
        'id': 4,
        'name': 'Place',
        'description': 'the name of a place (e.g. New York City)',
        'open_tag': '<name type="place">',
        'close_tag': '</name>',
    },  # noqa
    {
        'id': 5,
        'name': 'Date',
        'description': 'Mark a text string as a date. (Include a normalize...',
        'open_tag': '<date when="YYYY-MM-DD">',
        'close_tag': '</date>',
    },  # noqa
    {
        'id': 6,
        'name': 'Add',
        'description': 'an addition or insertion',
        'open_tag': '<add>',
        'close_tag': '</add>',
    },  # noqa
    {
        'id': 7,
        'name': 'Del',
        'description': 'as strikeout or deletion',
        'open_tag': '<del rend="overstrike">',
        'close_tag': '</del>',
    },  # noqa
    {
        'id': 8,
        'name': 'Note',
        'description': 'a note in the margin, or elsewhere',
        'open_tag': '<note place="margin">',
        'close_tag': '</note>',
    },  # noqa
    {
        'id': 9,
        'name': 'Unclear',
        'description': 'mark something as unclear/illegible',
        'open_tag': '<unclear reason="illegible">',
        'close_tag': '</unclear>',
    },  # noqa
    {
        'id': 10,
        'name': 'Page #',
        'description': 'mark a new page break along with the printed page ...',
        'open_tag': '<pb n="',
        'close_tag': '"/>',
    },  # noqa
    {
        'id': 11,
        'name': 'Underline',
        'description': 'underlined text',
        'open_tag': '<hi rend="underline">',
        'close_tag': '</hi>',
    },  # noqa
    {
        'id': 12,
        'name': 'Bold',
        'description': 'bold text',
        'open_tag': '<hi rend="bold">',
        'close_tag': '</hi>',
    },  # noqa
    {
        'id': 13,
        'name': 'Italic',
        'description': 'italicized text',
        'open_tag': '<hi rend="italic">',
        'close_tag': '</hi>',
    },  # noqa
    {
        'id': 14,
        'name': 'Superscript',
        'description': 'superscript text',
        'open_tag': '<hi rend="sup">',
        'close_tag': '</hi>',
    },  # noqa
    {
        'id': 15,
        'name': 'Subscript',
        'description': 'subscript text',
        'open_tag': '<hi rend="sub">',
        'close_tag': '</hi>',
    },  # noqa
]


def initial_tag_data(apps, schema_editor):
    Tag = apps.get_model('transcribe', 'Tag')
    Tag.objects.all().delete()
    for data in INITIAL_TAG_DATA:
        Tag.objects.get_or_create(**data)


def add_reviewer_group(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Group.objects.get_or_create(name='Reviewer')


def add_admin_group(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    admin_group, _ = Group.objects.get_or_create(name='Admin')

    # Make sure permissions have been created
    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, verbosity=0)
        app_config.models_module = None

    permission_codenames = [
        'add_project',
        'change_project',
        'delete_project',
        'add_task',
        'change_task',
        'delete_task',
        'add_usertask',
        'change_usertask',
        'delete_usertask',
        'add_tag',
        'change_tag',
        'delete_tag',
        'add_transcribeuser',
        'change_transcribeuser',
    ]

    permissions = []
    for codename in permission_codenames:
        try:
            permission = Permission.objects.get(codename=codename)
            permissions.append(permission)
        except Permission.DoesNotExist:
            # Optionally log the missing permission
            print(f"Warning: Permission with codename '{codename}' not found.")

    admin_group.permissions.set(permissions)


def create_transcribe_users(apps, schema_editor):
    User = apps.get_model(settings.AUTH_USER_MODEL)
    TranscribeUser = apps.get_model('transcribe', 'TranscribeUser')

    for user in User.objects.all():
        TranscribeUser.objects.get_or_create(user=user)


class Migration(migrations.Migration):

    replaces = [
        ('transcribe', '0001_initial'),
        ('transcribe', '0002_initial_data'),
        ('transcribe', '0003_transcribeuser'),
        ('transcribe', '0004_auto_20150716_1639'),
        ('transcribe', '0005_auto_20150717_0829'),
        ('transcribe', '0006_project_archived'),
        ('transcribe', '0007_reviewer_group_addition'),
        ('transcribe', '0008_auto_20150925_1522'),
        ('transcribe', '0009_auto_20150929_1314'),
        ('transcribe', '0010_userprojectpreferences'),
        ('transcribe', '0011_project_finding_aid_url'),
        ('transcribe', '0012_auto_20160107_1410'),
        ('transcribe', '0013_userpreferences'),
        ('transcribe', '0014_auto_20160203_1544'),
        ('transcribe', '0015_auto_20160309_1342'),
        ('transcribe', '0016_auto_20160817_1343'),
        ('transcribe', '0017_auto_20191115_1123'),
        ('transcribe', '0018_point_fks_to_user'),
        ('transcribe', '0019_create_transcribeuser'),
        ('transcribe', '0020_populate_transcribe_users'),
        ('transcribe', '0021_point_fks_to_transcribe_user'),
    ]

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Project',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'created',
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name='created',
                    ),
                ),
                (
                    'modified',
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name='modified',
                    ),
                ),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField()),
                ('guidelines', models.TextField(blank=True)),
                ('priority', models.IntegerField(default=0)),
                ('transcribers_per_task', models.IntegerField(default=2)),
                (
                    'media_type',
                    models.CharField(
                        choices=[
                            ('audio', 'audio'),
                            ('text', 'text'),
                            ('video', 'video'),
                        ],
                        default='text',
                        max_length=6,
                    ),
                ),
                ('archived', models.BooleanField(default=False)),
                (
                    'finding_aid_url',
                    models.CharField(blank=True, max_length=2083),
                ),
                (
                    'allow_global_transcriptions',
                    models.BooleanField(default=False),
                ),
            ],
            options={
                'ordering': ['-priority', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('open_tag', models.TextField()),
                ('close_tag', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'created',
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name='created',
                    ),
                ),
                (
                    'modified',
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name='modified',
                    ),
                ),
                (
                    'file',
                    models.FileField(
                        upload_to=transcribe.models.task_file_name
                    ),
                ),
                ('transcription', models.TextField(blank=True)),
                (
                    'finished_transcription',
                    models.BooleanField(
                        blank=True, db_index=True, default=False
                    ),
                ),
                (
                    'finished_review',
                    models.BooleanField(
                        blank=True, db_index=True, default=False
                    ),
                ),
                (
                    'project',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='tasks',
                        to='transcribe.project',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TranscribeUser',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'user',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='transcribe_user',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'verbose_name': 'Transcribe user',
                'verbose_name_plural': 'Transcribe users',
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='UserTask',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'created',
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name='created',
                    ),
                ),
                (
                    'modified',
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name='modified',
                    ),
                ),
                (
                    'task_type',
                    models.CharField(
                        choices=[
                            ('transcription', 'transcription'),
                            ('review', 'review'),
                        ],
                        db_index=True,
                        default='transcription',
                        max_length=13,
                    ),
                ),
                ('transcription', models.TextField(blank=True, default='')),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('in progress', 'in progress'),
                            ('skipped', 'skipped'),
                            ('finished', 'finished'),
                        ],
                        db_index=True,
                        default='in progress',
                        max_length=11,
                    ),
                ),
                (
                    'task',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='usertasks',
                        to='transcribe.task',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='tasks',
                        to='transcribe.transcribeuser',
                    ),
                ),
            ],
            options={
                'ordering': ['-modified', 'user'],
            },
        ),
        migrations.CreateModel(
            name='UserProjectPreferences',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'transcription_width',
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    'transcription_height',
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    'transcription_stacked',
                    models.BooleanField(blank=True, default=True),
                ),
                (
                    'project',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='userprojects',
                        to='transcribe.project',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='projects',
                        to='transcribe.transcribeuser',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'uses_serif_transcription_font',
                    models.BooleanField(default=True),
                ),
                (
                    'user',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='preferences',
                        to='transcribe.transcribeuser',
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='reviewers',
            field=models.ManyToManyField(
                blank=True,
                related_name='review_projects',
                to='transcribe.TranscribeUser',
            ),
        ),
        migrations.AddField(
            model_name='project',
            name='transcribers',
            field=models.ManyToManyField(
                blank=True,
                related_name='transcription_projects',
                to='transcribe.TranscribeUser',
            ),
        ),
        migrations.RunPython(
            code=initial_tag_data,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=add_reviewer_group,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=add_admin_group,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=create_transcribe_users,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
    ]
