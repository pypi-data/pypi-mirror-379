# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKClassifiersPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkScalarImageKmeansImageFilterPython
else:
    import _itkScalarImageKmeansImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkScalarImageKmeansImageFilterID2ISS2_New():
    return itkScalarImageKmeansImageFilterID2ISS2.New()

class itkScalarImageKmeansImageFilterID2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterID2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterID2ISS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterID2ISS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterID2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID2ISS2

        Create a new object of the class itkScalarImageKmeansImageFilterID2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID2ISS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_swigregister(itkScalarImageKmeansImageFilterID2ISS2)

def itkScalarImageKmeansImageFilterID2IUC2_New():
    return itkScalarImageKmeansImageFilterID2IUC2.New()

class itkScalarImageKmeansImageFilterID2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterID2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterID2IUC2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterID2IUC2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterID2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID2IUC2

        Create a new object of the class itkScalarImageKmeansImageFilterID2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID2IUC2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_swigregister(itkScalarImageKmeansImageFilterID2IUC2)

def itkScalarImageKmeansImageFilterID2IUS2_New():
    return itkScalarImageKmeansImageFilterID2IUS2.New()

class itkScalarImageKmeansImageFilterID2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterID2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterID2IUS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterID2IUS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterID2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID2IUS2

        Create a new object of the class itkScalarImageKmeansImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID2IUS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_swigregister(itkScalarImageKmeansImageFilterID2IUS2)

def itkScalarImageKmeansImageFilterID3ISS3_New():
    return itkScalarImageKmeansImageFilterID3ISS3.New()

class itkScalarImageKmeansImageFilterID3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterID3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterID3ISS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterID3ISS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterID3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID3ISS3

        Create a new object of the class itkScalarImageKmeansImageFilterID3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID3ISS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_swigregister(itkScalarImageKmeansImageFilterID3ISS3)

def itkScalarImageKmeansImageFilterID3IUC3_New():
    return itkScalarImageKmeansImageFilterID3IUC3.New()

class itkScalarImageKmeansImageFilterID3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterID3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterID3IUC3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterID3IUC3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterID3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID3IUC3

        Create a new object of the class itkScalarImageKmeansImageFilterID3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID3IUC3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_swigregister(itkScalarImageKmeansImageFilterID3IUC3)

def itkScalarImageKmeansImageFilterID3IUS3_New():
    return itkScalarImageKmeansImageFilterID3IUS3.New()

class itkScalarImageKmeansImageFilterID3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterID3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterID3IUS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterID3IUS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterID3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID3IUS3

        Create a new object of the class itkScalarImageKmeansImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID3IUS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_swigregister(itkScalarImageKmeansImageFilterID3IUS3)

def itkScalarImageKmeansImageFilterID4ISS4_New():
    return itkScalarImageKmeansImageFilterID4ISS4.New()

class itkScalarImageKmeansImageFilterID4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterID4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterID4ISS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterID4ISS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterID4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID4ISS4

        Create a new object of the class itkScalarImageKmeansImageFilterID4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID4ISS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_swigregister(itkScalarImageKmeansImageFilterID4ISS4)

def itkScalarImageKmeansImageFilterID4IUC4_New():
    return itkScalarImageKmeansImageFilterID4IUC4.New()

class itkScalarImageKmeansImageFilterID4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterID4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterID4IUC4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterID4IUC4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterID4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID4IUC4

        Create a new object of the class itkScalarImageKmeansImageFilterID4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID4IUC4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_swigregister(itkScalarImageKmeansImageFilterID4IUC4)

def itkScalarImageKmeansImageFilterID4IUS4_New():
    return itkScalarImageKmeansImageFilterID4IUS4.New()

class itkScalarImageKmeansImageFilterID4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterID4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterID4IUS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterID4IUS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterID4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID4IUS4

        Create a new object of the class itkScalarImageKmeansImageFilterID4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID4IUS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_swigregister(itkScalarImageKmeansImageFilterID4IUS4)

def itkScalarImageKmeansImageFilterIF2ISS2_New():
    return itkScalarImageKmeansImageFilterIF2ISS2.New()

class itkScalarImageKmeansImageFilterIF2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIF2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIF2ISS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIF2ISS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIF2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF2ISS2

        Create a new object of the class itkScalarImageKmeansImageFilterIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF2ISS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_swigregister(itkScalarImageKmeansImageFilterIF2ISS2)

def itkScalarImageKmeansImageFilterIF2IUC2_New():
    return itkScalarImageKmeansImageFilterIF2IUC2.New()

class itkScalarImageKmeansImageFilterIF2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIF2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIF2IUC2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIF2IUC2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIF2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF2IUC2

        Create a new object of the class itkScalarImageKmeansImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF2IUC2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_swigregister(itkScalarImageKmeansImageFilterIF2IUC2)

def itkScalarImageKmeansImageFilterIF2IUS2_New():
    return itkScalarImageKmeansImageFilterIF2IUS2.New()

class itkScalarImageKmeansImageFilterIF2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIF2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIF2IUS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIF2IUS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIF2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF2IUS2

        Create a new object of the class itkScalarImageKmeansImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF2IUS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_swigregister(itkScalarImageKmeansImageFilterIF2IUS2)

def itkScalarImageKmeansImageFilterIF3ISS3_New():
    return itkScalarImageKmeansImageFilterIF3ISS3.New()

class itkScalarImageKmeansImageFilterIF3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIF3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIF3ISS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIF3ISS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIF3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF3ISS3

        Create a new object of the class itkScalarImageKmeansImageFilterIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF3ISS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_swigregister(itkScalarImageKmeansImageFilterIF3ISS3)

def itkScalarImageKmeansImageFilterIF3IUC3_New():
    return itkScalarImageKmeansImageFilterIF3IUC3.New()

class itkScalarImageKmeansImageFilterIF3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIF3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIF3IUC3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIF3IUC3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIF3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF3IUC3

        Create a new object of the class itkScalarImageKmeansImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF3IUC3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_swigregister(itkScalarImageKmeansImageFilterIF3IUC3)

def itkScalarImageKmeansImageFilterIF3IUS3_New():
    return itkScalarImageKmeansImageFilterIF3IUS3.New()

class itkScalarImageKmeansImageFilterIF3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIF3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIF3IUS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIF3IUS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIF3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF3IUS3

        Create a new object of the class itkScalarImageKmeansImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF3IUS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_swigregister(itkScalarImageKmeansImageFilterIF3IUS3)

def itkScalarImageKmeansImageFilterIF4ISS4_New():
    return itkScalarImageKmeansImageFilterIF4ISS4.New()

class itkScalarImageKmeansImageFilterIF4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIF4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIF4ISS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIF4ISS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIF4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF4ISS4

        Create a new object of the class itkScalarImageKmeansImageFilterIF4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF4ISS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_swigregister(itkScalarImageKmeansImageFilterIF4ISS4)

def itkScalarImageKmeansImageFilterIF4IUC4_New():
    return itkScalarImageKmeansImageFilterIF4IUC4.New()

class itkScalarImageKmeansImageFilterIF4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIF4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIF4IUC4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIF4IUC4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIF4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF4IUC4

        Create a new object of the class itkScalarImageKmeansImageFilterIF4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF4IUC4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_swigregister(itkScalarImageKmeansImageFilterIF4IUC4)

def itkScalarImageKmeansImageFilterIF4IUS4_New():
    return itkScalarImageKmeansImageFilterIF4IUS4.New()

class itkScalarImageKmeansImageFilterIF4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIF4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIF4IUS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIF4IUS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIF4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF4IUS4

        Create a new object of the class itkScalarImageKmeansImageFilterIF4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF4IUS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_swigregister(itkScalarImageKmeansImageFilterIF4IUS4)

def itkScalarImageKmeansImageFilterISS2ISS2_New():
    return itkScalarImageKmeansImageFilterISS2ISS2.New()

class itkScalarImageKmeansImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterISS2ISS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterISS2ISS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS2ISS2

        Create a new object of the class itkScalarImageKmeansImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS2ISS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_swigregister(itkScalarImageKmeansImageFilterISS2ISS2)

def itkScalarImageKmeansImageFilterISS2IUC2_New():
    return itkScalarImageKmeansImageFilterISS2IUC2.New()

class itkScalarImageKmeansImageFilterISS2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterISS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterISS2IUC2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterISS2IUC2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterISS2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS2IUC2

        Create a new object of the class itkScalarImageKmeansImageFilterISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS2IUC2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_swigregister(itkScalarImageKmeansImageFilterISS2IUC2)

def itkScalarImageKmeansImageFilterISS2IUS2_New():
    return itkScalarImageKmeansImageFilterISS2IUS2.New()

class itkScalarImageKmeansImageFilterISS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterISS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterISS2IUS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterISS2IUS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterISS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS2IUS2

        Create a new object of the class itkScalarImageKmeansImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS2IUS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_swigregister(itkScalarImageKmeansImageFilterISS2IUS2)

def itkScalarImageKmeansImageFilterISS3ISS3_New():
    return itkScalarImageKmeansImageFilterISS3ISS3.New()

class itkScalarImageKmeansImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterISS3ISS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterISS3ISS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS3ISS3

        Create a new object of the class itkScalarImageKmeansImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS3ISS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_swigregister(itkScalarImageKmeansImageFilterISS3ISS3)

def itkScalarImageKmeansImageFilterISS3IUC3_New():
    return itkScalarImageKmeansImageFilterISS3IUC3.New()

class itkScalarImageKmeansImageFilterISS3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterISS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterISS3IUC3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterISS3IUC3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterISS3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS3IUC3

        Create a new object of the class itkScalarImageKmeansImageFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS3IUC3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_swigregister(itkScalarImageKmeansImageFilterISS3IUC3)

def itkScalarImageKmeansImageFilterISS3IUS3_New():
    return itkScalarImageKmeansImageFilterISS3IUS3.New()

class itkScalarImageKmeansImageFilterISS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterISS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterISS3IUS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterISS3IUS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterISS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS3IUS3

        Create a new object of the class itkScalarImageKmeansImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS3IUS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_swigregister(itkScalarImageKmeansImageFilterISS3IUS3)

def itkScalarImageKmeansImageFilterISS4ISS4_New():
    return itkScalarImageKmeansImageFilterISS4ISS4.New()

class itkScalarImageKmeansImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterISS4ISS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterISS4ISS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS4ISS4

        Create a new object of the class itkScalarImageKmeansImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS4ISS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_swigregister(itkScalarImageKmeansImageFilterISS4ISS4)

def itkScalarImageKmeansImageFilterISS4IUC4_New():
    return itkScalarImageKmeansImageFilterISS4IUC4.New()

class itkScalarImageKmeansImageFilterISS4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterISS4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterISS4IUC4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterISS4IUC4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterISS4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS4IUC4

        Create a new object of the class itkScalarImageKmeansImageFilterISS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS4IUC4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_swigregister(itkScalarImageKmeansImageFilterISS4IUC4)

def itkScalarImageKmeansImageFilterISS4IUS4_New():
    return itkScalarImageKmeansImageFilterISS4IUS4.New()

class itkScalarImageKmeansImageFilterISS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterISS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterISS4IUS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterISS4IUS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterISS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS4IUS4

        Create a new object of the class itkScalarImageKmeansImageFilterISS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS4IUS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_swigregister(itkScalarImageKmeansImageFilterISS4IUS4)

def itkScalarImageKmeansImageFilterIUC2ISS2_New():
    return itkScalarImageKmeansImageFilterIUC2ISS2.New()

class itkScalarImageKmeansImageFilterIUC2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUC2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUC2ISS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUC2ISS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUC2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC2ISS2

        Create a new object of the class itkScalarImageKmeansImageFilterIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC2ISS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_swigregister(itkScalarImageKmeansImageFilterIUC2ISS2)

def itkScalarImageKmeansImageFilterIUC2IUC2_New():
    return itkScalarImageKmeansImageFilterIUC2IUC2.New()

class itkScalarImageKmeansImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUC2IUC2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUC2IUC2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC2IUC2

        Create a new object of the class itkScalarImageKmeansImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC2IUC2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_swigregister(itkScalarImageKmeansImageFilterIUC2IUC2)

def itkScalarImageKmeansImageFilterIUC2IUS2_New():
    return itkScalarImageKmeansImageFilterIUC2IUS2.New()

class itkScalarImageKmeansImageFilterIUC2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUC2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUC2IUS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUC2IUS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUC2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC2IUS2

        Create a new object of the class itkScalarImageKmeansImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC2IUS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_swigregister(itkScalarImageKmeansImageFilterIUC2IUS2)

def itkScalarImageKmeansImageFilterIUC3ISS3_New():
    return itkScalarImageKmeansImageFilterIUC3ISS3.New()

class itkScalarImageKmeansImageFilterIUC3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUC3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUC3ISS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUC3ISS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUC3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC3ISS3

        Create a new object of the class itkScalarImageKmeansImageFilterIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC3ISS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_swigregister(itkScalarImageKmeansImageFilterIUC3ISS3)

def itkScalarImageKmeansImageFilterIUC3IUC3_New():
    return itkScalarImageKmeansImageFilterIUC3IUC3.New()

class itkScalarImageKmeansImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUC3IUC3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUC3IUC3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC3IUC3

        Create a new object of the class itkScalarImageKmeansImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC3IUC3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_swigregister(itkScalarImageKmeansImageFilterIUC3IUC3)

def itkScalarImageKmeansImageFilterIUC3IUS3_New():
    return itkScalarImageKmeansImageFilterIUC3IUS3.New()

class itkScalarImageKmeansImageFilterIUC3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUC3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUC3IUS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUC3IUS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUC3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC3IUS3

        Create a new object of the class itkScalarImageKmeansImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC3IUS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_swigregister(itkScalarImageKmeansImageFilterIUC3IUS3)

def itkScalarImageKmeansImageFilterIUC4ISS4_New():
    return itkScalarImageKmeansImageFilterIUC4ISS4.New()

class itkScalarImageKmeansImageFilterIUC4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUC4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUC4ISS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUC4ISS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUC4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC4ISS4

        Create a new object of the class itkScalarImageKmeansImageFilterIUC4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC4ISS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_swigregister(itkScalarImageKmeansImageFilterIUC4ISS4)

def itkScalarImageKmeansImageFilterIUC4IUC4_New():
    return itkScalarImageKmeansImageFilterIUC4IUC4.New()

class itkScalarImageKmeansImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUC4IUC4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUC4IUC4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC4IUC4

        Create a new object of the class itkScalarImageKmeansImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC4IUC4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_swigregister(itkScalarImageKmeansImageFilterIUC4IUC4)

def itkScalarImageKmeansImageFilterIUC4IUS4_New():
    return itkScalarImageKmeansImageFilterIUC4IUS4.New()

class itkScalarImageKmeansImageFilterIUC4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUC4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUC4IUS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUC4IUS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUC4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC4IUS4

        Create a new object of the class itkScalarImageKmeansImageFilterIUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC4IUS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_swigregister(itkScalarImageKmeansImageFilterIUC4IUS4)

def itkScalarImageKmeansImageFilterIUS2ISS2_New():
    return itkScalarImageKmeansImageFilterIUS2ISS2.New()

class itkScalarImageKmeansImageFilterIUS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUS2ISS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUS2ISS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS2ISS2

        Create a new object of the class itkScalarImageKmeansImageFilterIUS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS2ISS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_swigregister(itkScalarImageKmeansImageFilterIUS2ISS2)

def itkScalarImageKmeansImageFilterIUS2IUC2_New():
    return itkScalarImageKmeansImageFilterIUS2IUC2.New()

class itkScalarImageKmeansImageFilterIUS2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUS2IUC2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUS2IUC2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUS2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS2IUC2

        Create a new object of the class itkScalarImageKmeansImageFilterIUS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS2IUC2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_swigregister(itkScalarImageKmeansImageFilterIUS2IUC2)

def itkScalarImageKmeansImageFilterIUS2IUS2_New():
    return itkScalarImageKmeansImageFilterIUS2IUS2.New()

class itkScalarImageKmeansImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUS2IUS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUS2IUS2_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion2"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS2IUS2

        Create a new object of the class itkScalarImageKmeansImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS2IUS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_swigregister(itkScalarImageKmeansImageFilterIUS2IUS2)

def itkScalarImageKmeansImageFilterIUS3ISS3_New():
    return itkScalarImageKmeansImageFilterIUS3ISS3.New()

class itkScalarImageKmeansImageFilterIUS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUS3ISS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUS3ISS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS3ISS3

        Create a new object of the class itkScalarImageKmeansImageFilterIUS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS3ISS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_swigregister(itkScalarImageKmeansImageFilterIUS3ISS3)

def itkScalarImageKmeansImageFilterIUS3IUC3_New():
    return itkScalarImageKmeansImageFilterIUS3IUC3.New()

class itkScalarImageKmeansImageFilterIUS3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUS3IUC3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUS3IUC3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUS3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS3IUC3

        Create a new object of the class itkScalarImageKmeansImageFilterIUS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS3IUC3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_swigregister(itkScalarImageKmeansImageFilterIUS3IUC3)

def itkScalarImageKmeansImageFilterIUS3IUS3_New():
    return itkScalarImageKmeansImageFilterIUS3IUS3.New()

class itkScalarImageKmeansImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUS3IUS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUS3IUS3_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion3"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS3IUS3

        Create a new object of the class itkScalarImageKmeansImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS3IUS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_swigregister(itkScalarImageKmeansImageFilterIUS3IUS3)

def itkScalarImageKmeansImageFilterIUS4ISS4_New():
    return itkScalarImageKmeansImageFilterIUS4ISS4.New()

class itkScalarImageKmeansImageFilterIUS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUS4ISS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUS4ISS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS4ISS4

        Create a new object of the class itkScalarImageKmeansImageFilterIUS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS4ISS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_swigregister(itkScalarImageKmeansImageFilterIUS4ISS4)

def itkScalarImageKmeansImageFilterIUS4IUC4_New():
    return itkScalarImageKmeansImageFilterIUS4IUC4.New()

class itkScalarImageKmeansImageFilterIUS4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUS4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUS4IUC4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUS4IUC4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUS4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS4IUC4

        Create a new object of the class itkScalarImageKmeansImageFilterIUS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS4IUC4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_swigregister(itkScalarImageKmeansImageFilterIUS4IUC4)

def itkScalarImageKmeansImageFilterIUS4IUS4_New():
    return itkScalarImageKmeansImageFilterIUS4IUS4.New()

class itkScalarImageKmeansImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkScalarImageKmeansImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageKmeansImageFilterIUS4IUS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageKmeansImageFilterIUS4IUS4_Pointer"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_Clone(self)

    def AddClassWithInitialMean(self, mean):
        r"""
        AddClassWithInitialMean(self, mean)

        Parameters
        ----------
        mean: double

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_AddClassWithInitialMean(self, mean)

    def GetFinalMeans(self):
        r"""GetFinalMeans(self) -> itkArrayD"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_GetFinalMeans(self)

    def SetUseNonContiguousLabels(self, _arg):
        r"""
        SetUseNonContiguousLabels(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_SetUseNonContiguousLabels(self, _arg)

    def GetUseNonContiguousLabels(self):
        r"""GetUseNonContiguousLabels(self) -> bool const &"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_GetUseNonContiguousLabels(self)

    def UseNonContiguousLabelsOn(self):
        r"""UseNonContiguousLabelsOn(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_UseNonContiguousLabelsOn(self)

    def UseNonContiguousLabelsOff(self):
        r"""UseNonContiguousLabelsOff(self)"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_UseNonContiguousLabelsOff(self)

    def SetImageRegion(self, region):
        r"""
        SetImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_SetImageRegion(self, region)

    def GetImageRegion(self):
        r"""GetImageRegion(self) -> itkImageRegion4"""
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_GetImageRegion(self)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageKmeansImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS4IUS4

        Create a new object of the class itkScalarImageKmeansImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS4IUS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_swigregister(itkScalarImageKmeansImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def scalar_image_kmeans_image_filter(*args: itkt.ImageLike,  use_non_contiguous_labels: bool=..., image_region: itkt.ImageRegion=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ScalarImageKmeansImageFilter"""
    import itk

    kwarg_typehints = { 'use_non_contiguous_labels':use_non_contiguous_labels,'image_region':image_region }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ScalarImageKmeansImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def scalar_image_kmeans_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKClassifiers.ScalarImageKmeansImageFilter
    scalar_image_kmeans_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    scalar_image_kmeans_image_filter.__doc__ = filter_object.__doc__



