# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKWatershedsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkWatershedImageFilterPython
else:
    import _itkWatershedImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkWatershedImageFilterID2_New():
    return itkWatershedImageFilterID2.New()

class itkWatershedImageFilterID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IULL2):
    r"""Proxy of C++ itkWatershedImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterID2_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterID2_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID2_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID2_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageD2 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID2_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID2_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID2_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID2_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID2_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL2"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID2_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< double > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID2_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterID2_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterID2_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterID2_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterID2_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterID2

        Create a new object of the class itkWatershedImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterID2 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterID2_swigregister(itkWatershedImageFilterID2)

def itkWatershedImageFilterID3_New():
    return itkWatershedImageFilterID3.New()

class itkWatershedImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IULL3):
    r"""Proxy of C++ itkWatershedImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterID3_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterID3_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID3_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID3_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageD3 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID3_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID3_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID3_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID3_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID3_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL3"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID3_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< double > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID3_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterID3_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterID3_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterID3_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterID3_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterID3

        Create a new object of the class itkWatershedImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterID3 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterID3_swigregister(itkWatershedImageFilterID3)

def itkWatershedImageFilterID4_New():
    return itkWatershedImageFilterID4.New()

class itkWatershedImageFilterID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4IULL4):
    r"""Proxy of C++ itkWatershedImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterID4_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterID4_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID4_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID4_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageD4 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID4_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID4_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID4_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID4_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID4_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL4"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID4_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< double > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID4_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterID4_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterID4_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterID4_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterID4_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterID4

        Create a new object of the class itkWatershedImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterID4 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterID4_swigregister(itkWatershedImageFilterID4)

def itkWatershedImageFilterIF2_New():
    return itkWatershedImageFilterIF2.New()

class itkWatershedImageFilterIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IULL2):
    r"""Proxy of C++ itkWatershedImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterIF2_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterIF2_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageF2 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL2"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< float > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterIF2

        Create a new object of the class itkWatershedImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterIF2 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterIF2_swigregister(itkWatershedImageFilterIF2)

def itkWatershedImageFilterIF3_New():
    return itkWatershedImageFilterIF3.New()

class itkWatershedImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IULL3):
    r"""Proxy of C++ itkWatershedImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterIF3_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterIF3_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageF3 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL3"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< float > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterIF3

        Create a new object of the class itkWatershedImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterIF3 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterIF3_swigregister(itkWatershedImageFilterIF3)

def itkWatershedImageFilterIF4_New():
    return itkWatershedImageFilterIF4.New()

class itkWatershedImageFilterIF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IULL4):
    r"""Proxy of C++ itkWatershedImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterIF4_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterIF4_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageF4 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL4"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< float > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterIF4

        Create a new object of the class itkWatershedImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterIF4 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterIF4_swigregister(itkWatershedImageFilterIF4)

def itkWatershedImageFilterISS2_New():
    return itkWatershedImageFilterISS2.New()

class itkWatershedImageFilterISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IULL2):
    r"""Proxy of C++ itkWatershedImageFilterISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterISS2_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterISS2_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageSS2 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL2"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< short > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterISS2

        Create a new object of the class itkWatershedImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterISS2 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterISS2_swigregister(itkWatershedImageFilterISS2)

def itkWatershedImageFilterISS3_New():
    return itkWatershedImageFilterISS3.New()

class itkWatershedImageFilterISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IULL3):
    r"""Proxy of C++ itkWatershedImageFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterISS3_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterISS3_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageSS3 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL3"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< short > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterISS3

        Create a new object of the class itkWatershedImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterISS3 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterISS3_swigregister(itkWatershedImageFilterISS3)

def itkWatershedImageFilterISS4_New():
    return itkWatershedImageFilterISS4.New()

class itkWatershedImageFilterISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4IULL4):
    r"""Proxy of C++ itkWatershedImageFilterISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterISS4_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterISS4_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageSS4 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL4"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< short > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterISS4

        Create a new object of the class itkWatershedImageFilterISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterISS4 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterISS4_swigregister(itkWatershedImageFilterISS4)

def itkWatershedImageFilterIUC2_New():
    return itkWatershedImageFilterIUC2.New()

class itkWatershedImageFilterIUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IULL2):
    r"""Proxy of C++ itkWatershedImageFilterIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterIUC2_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterIUC2_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageUC2 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL2"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< unsigned char > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterIUC2

        Create a new object of the class itkWatershedImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterIUC2 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterIUC2_swigregister(itkWatershedImageFilterIUC2)

def itkWatershedImageFilterIUC3_New():
    return itkWatershedImageFilterIUC3.New()

class itkWatershedImageFilterIUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IULL3):
    r"""Proxy of C++ itkWatershedImageFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterIUC3_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterIUC3_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageUC3 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL3"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< unsigned char > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterIUC3

        Create a new object of the class itkWatershedImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterIUC3 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterIUC3_swigregister(itkWatershedImageFilterIUC3)

def itkWatershedImageFilterIUC4_New():
    return itkWatershedImageFilterIUC4.New()

class itkWatershedImageFilterIUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IULL4):
    r"""Proxy of C++ itkWatershedImageFilterIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterIUC4_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterIUC4_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageUC4 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL4"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< unsigned char > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterIUC4

        Create a new object of the class itkWatershedImageFilterIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterIUC4 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterIUC4_swigregister(itkWatershedImageFilterIUC4)

def itkWatershedImageFilterIUS2_New():
    return itkWatershedImageFilterIUS2.New()

class itkWatershedImageFilterIUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IULL2):
    r"""Proxy of C++ itkWatershedImageFilterIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterIUS2_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterIUS2_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageUS2 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL2"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< unsigned short > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterIUS2

        Create a new object of the class itkWatershedImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterIUS2 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterIUS2_swigregister(itkWatershedImageFilterIUS2)

def itkWatershedImageFilterIUS3_New():
    return itkWatershedImageFilterIUS3.New()

class itkWatershedImageFilterIUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IULL3):
    r"""Proxy of C++ itkWatershedImageFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterIUS3_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterIUS3_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageUS3 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL3"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< unsigned short > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterIUS3

        Create a new object of the class itkWatershedImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterIUS3 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterIUS3_swigregister(itkWatershedImageFilterIUS3)

def itkWatershedImageFilterIUS4_New():
    return itkWatershedImageFilterIUS4.New()

class itkWatershedImageFilterIUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IULL4):
    r"""Proxy of C++ itkWatershedImageFilterIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWatershedImageFilterIUS4_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWatershedImageFilterIUS4_Pointer"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_GenerateData(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, i, image)

        Parameters
        ----------
        i: unsigned int
        image: itkImageUS4 const *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_SetInput(self, *args)

    def SetThreshold(self, arg0):
        r"""
        SetThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_SetThreshold(self, arg0)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_GetThreshold(self)

    def SetLevel(self, arg0):
        r"""
        SetLevel(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_SetLevel(self, arg0)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_GetLevel(self)

    def GetBasicSegmentation(self):
        r"""GetBasicSegmentation(self) -> itkImageULL4"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_GetBasicSegmentation(self)

    def GetSegmentTree(self):
        r"""GetSegmentTree(self) -> itk::watershed::SegmentTree< unsigned short > *"""
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_GetSegmentTree(self)
    InputEqualityComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_InputEqualityComparableCheck
    
    InputAdditiveOperatorsCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_InputAdditiveOperatorsCheck
    
    DoubleInputMultiplyOperatorCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_DoubleInputMultiplyOperatorCheck
    
    InputLessThanComparableCheck = _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkWatershedImageFilterPython.delete_itkWatershedImageFilterIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWatershedImageFilterIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWatershedImageFilterIUS4

        Create a new object of the class itkWatershedImageFilterIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWatershedImageFilterIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWatershedImageFilterIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWatershedImageFilterIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWatershedImageFilterIUS4 in _itkWatershedImageFilterPython:
_itkWatershedImageFilterPython.itkWatershedImageFilterIUS4_swigregister(itkWatershedImageFilterIUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def watershed_image_filter(*args: itkt.ImageLike,  threshold: float=..., level: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for WatershedImageFilter"""
    import itk

    kwarg_typehints = { 'threshold':threshold,'level':level }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.WatershedImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def watershed_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKWatersheds.WatershedImageFilter
    watershed_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    watershed_image_filter.__doc__ = filter_object.__doc__



