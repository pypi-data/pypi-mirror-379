<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="554" onload="init(evt)" viewBox="0 0 1200 554" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="554" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record --native --rate 10 -o profile.svg --pid 1180191</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="543.00"> </text><svg id="frames" x="10" width="1180" total_samples="7464"><g><title>__futex_abstimed_wait_common (libc.so.6) (130 samples, 1.74%)</title><rect x="0.0000%" y="276" width="1.7417%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="130"/><text x="0.2500%" y="286.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (152 samples, 2.04%)</title><rect x="0.0000%" y="260" width="2.0364%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="152"/><text x="0.2500%" y="270.50">p..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (22 samples, 0.29%)</title><rect x="1.7417%" y="276" width="0.2947%" height="15" fill="rgb(221,193,54)" fg:x="130" fg:w="22"/><text x="1.9917%" y="286.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (22 samples, 0.29%)</title><rect x="1.7417%" y="292" width="0.2947%" height="15" fill="rgb(248,212,6)" fg:x="130" fg:w="22"/><text x="1.9917%" y="302.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (401 samples, 5.37%)</title><rect x="2.1034%" y="404" width="5.3725%" height="15" fill="rgb(208,68,35)" fg:x="157" fg:w="401"/><text x="2.3534%" y="414.50">__futex..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (418 samples, 5.60%)</title><rect x="2.1034%" y="388" width="5.6002%" height="15" fill="rgb(232,128,0)" fg:x="157" fg:w="418"/><text x="2.3534%" y="398.50">pthread..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (17 samples, 0.23%)</title><rect x="7.4759%" y="404" width="0.2278%" height="15" fill="rgb(207,160,47)" fg:x="558" fg:w="17"/><text x="7.7259%" y="414.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (17 samples, 0.23%)</title><rect x="7.4759%" y="420" width="0.2278%" height="15" fill="rgb(228,23,34)" fg:x="558" fg:w="17"/><text x="7.7259%" y="430.50"></text></g><g><title>CallState_end (confluent_kafka/cimpl.cpython-311-x86_64-linux-gnu.so) (421 samples, 5.64%)</title><rect x="2.1034%" y="372" width="5.6404%" height="15" fill="rgb(218,30,26)" fg:x="157" fg:w="421"/><text x="2.3534%" y="382.50">CallSta..</text></g><g><title>rd_kafka_consume0 (librdkafka-9ddca43a.so.1) (2,047 samples, 27.42%)</title><rect x="7.7840%" y="372" width="27.4250%" height="15" fill="rgb(220,122,19)" fg:x="581" fg:w="2047"/><text x="8.0340%" y="382.50">rd_kafka_consume0 (librdkafka-9ddca43a.so.1)</text></g><g><title>rd_kafka_q_pop_serve.localalias (librdkafka-9ddca43a.so.1) (2,047 samples, 27.42%)</title><rect x="7.7840%" y="388" width="27.4250%" height="15" fill="rgb(250,228,42)" fg:x="581" fg:w="2047"/><text x="8.0340%" y="398.50">rd_kafka_q_pop_serve.localalias (librdkafka-..</text></g><g><title>cnd_timedwait_abs (librdkafka-9ddca43a.so.1) (2,047 samples, 27.42%)</title><rect x="7.7840%" y="404" width="27.4250%" height="15" fill="rgb(240,193,28)" fg:x="581" fg:w="2047"/><text x="8.0340%" y="414.50">cnd_timedwait_abs (librdkafka-9ddca43a.so.1)</text></g><g><title>cnd_timedwait_ms (librdkafka-9ddca43a.so.1) (2,047 samples, 27.42%)</title><rect x="7.7840%" y="420" width="27.4250%" height="15" fill="rgb(216,20,37)" fg:x="581" fg:w="2047"/><text x="8.0340%" y="430.50">cnd_timedwait_ms (librdkafka-9ddca43a.so.1)</text></g><g><title>cnd_timedwait@GLIBC_2.28 (libc.so.6) (2,047 samples, 27.42%)</title><rect x="7.7840%" y="436" width="27.4250%" height="15" fill="rgb(206,188,39)" fg:x="581" fg:w="2047"/><text x="8.0340%" y="446.50">cnd_timedwait@GLIBC_2.28 (libc.so.6)</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (2,047 samples, 27.42%)</title><rect x="7.7840%" y="452" width="27.4250%" height="15" fill="rgb(217,207,13)" fg:x="581" fg:w="2047"/><text x="8.0340%" y="462.50">pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (2,047 samples, 27.42%)</title><rect x="7.7840%" y="468" width="27.4250%" height="15" fill="rgb(231,73,38)" fg:x="581" fg:w="2047"/><text x="8.0340%" y="478.50">__futex_abstimed_wait_common (libc.so.6)</text></g><g><title>read (arrakis_backend_kafka/backend.py:362) (2,474 samples, 33.15%)</title><rect x="2.0900%" y="340" width="33.1458%" height="15" fill="rgb(225,20,46)" fg:x="156" fg:w="2474"/><text x="2.3400%" y="350.50">read (arrakis_backend_kafka/backend.py:362)</text></g><g><title>Consumer_poll (confluent_kafka/cimpl.cpython-311-x86_64-linux-gnu.so) (2,474 samples, 33.15%)</title><rect x="2.0900%" y="356" width="33.1458%" height="15" fill="rgb(210,31,41)" fg:x="156" fg:w="2474"/><text x="2.3400%" y="366.50">Consumer_poll (confluent_kafka/cimpl.cpython-311-x86_6..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (65 samples, 0.87%)</title><rect x="35.2492%" y="404" width="0.8708%" height="15" fill="rgb(221,200,47)" fg:x="2631" fg:w="65"/><text x="35.4992%" y="414.50"></text></g><g><title>__exit__ (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (69 samples, 0.92%)</title><rect x="35.2492%" y="356" width="0.9244%" height="15" fill="rgb(226,26,5)" fg:x="2631" fg:w="69"/><text x="35.4992%" y="366.50"></text></g><g><title>close (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (69 samples, 0.92%)</title><rect x="35.2492%" y="372" width="0.9244%" height="15" fill="rgb(249,33,26)" fg:x="2631" fg:w="69"/><text x="35.4992%" y="382.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (69 samples, 0.92%)</title><rect x="35.2492%" y="388" width="0.9244%" height="15" fill="rgb(235,183,28)" fg:x="2631" fg:w="69"/><text x="35.4992%" y="398.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (407 samples, 5.45%)</title><rect x="36.2406%" y="388" width="5.4528%" height="15" fill="rgb(221,5,38)" fg:x="2705" fg:w="407"/><text x="36.4906%" y="398.50">__futex..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (16 samples, 0.21%)</title><rect x="41.6935%" y="388" width="0.2144%" height="15" fill="rgb(247,18,42)" fg:x="3112" fg:w="16"/><text x="41.9435%" y="398.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (16 samples, 0.21%)</title><rect x="41.6935%" y="404" width="0.2144%" height="15" fill="rgb(241,131,45)" fg:x="3112" fg:w="16"/><text x="41.9435%" y="414.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (424 samples, 5.68%)</title><rect x="36.2406%" y="372" width="5.6806%" height="15" fill="rgb(249,31,29)" fg:x="2705" fg:w="424"/><text x="36.4906%" y="382.50">pthread..</text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_RecordBatchReader (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (432 samples, 5.79%)</title><rect x="36.1736%" y="356" width="5.7878%" height="15" fill="rgb(225,111,53)" fg:x="2700" fg:w="432"/><text x="36.4236%" y="366.50">__pyx_t..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (569 samples, 7.62%)</title><rect x="42.1088%" y="420" width="7.6233%" height="15" fill="rgb(238,160,17)" fg:x="3143" fg:w="569"/><text x="42.3588%" y="430.50">__futex_ab..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (31 samples, 0.42%)</title><rect x="49.7320%" y="420" width="0.4153%" height="15" fill="rgb(214,148,48)" fg:x="3712" fg:w="31"/><text x="49.9820%" y="430.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (31 samples, 0.42%)</title><rect x="49.7320%" y="436" width="0.4153%" height="15" fill="rgb(232,36,49)" fg:x="3712" fg:w="31"/><text x="49.9820%" y="446.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (601 samples, 8.05%)</title><rect x="42.1088%" y="404" width="8.0520%" height="15" fill="rgb(209,103,24)" fg:x="3143" fg:w="601"/><text x="42.3588%" y="414.50">pthread_con..</text></g><g><title>read (arrakis_backend_kafka/backend.py:367) (1,115 samples, 14.94%)</title><rect x="35.2358%" y="340" width="14.9384%" height="15" fill="rgb(229,88,8)" fg:x="2630" fg:w="1115"/><text x="35.4858%" y="350.50">read (arrakis_backend_k..</text></g><g><title>open_stream (pyarrow/ipc.py:190) (613 samples, 8.21%)</title><rect x="41.9614%" y="356" width="8.2128%" height="15" fill="rgb(213,181,19)" fg:x="3132" fg:w="613"/><text x="42.2114%" y="366.50">open_stream..</text></g><g><title>__init__ (pyarrow/ipc.py:52) (613 samples, 8.21%)</title><rect x="41.9614%" y="372" width="8.2128%" height="15" fill="rgb(254,191,54)" fg:x="3132" fg:w="613"/><text x="42.2114%" y="382.50">__init__ (p..</text></g><g><title>_open (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (613 samples, 8.21%)</title><rect x="41.9614%" y="388" width="8.2128%" height="15" fill="rgb(241,83,37)" fg:x="3132" fg:w="613"/><text x="42.2114%" y="398.50">_open (pyar..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (891 samples, 11.94%)</title><rect x="50.3215%" y="404" width="11.9373%" height="15" fill="rgb(233,36,39)" fg:x="3756" fg:w="891"/><text x="50.5715%" y="414.50">__futex_abstimed_w..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (46 samples, 0.62%)</title><rect x="62.2588%" y="404" width="0.6163%" height="15" fill="rgb(226,3,54)" fg:x="4647" fg:w="46"/><text x="62.5088%" y="414.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (46 samples, 0.62%)</title><rect x="62.2588%" y="420" width="0.6163%" height="15" fill="rgb(245,192,40)" fg:x="4647" fg:w="46"/><text x="62.5088%" y="430.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (938 samples, 12.57%)</title><rect x="50.3215%" y="388" width="12.5670%" height="15" fill="rgb(238,167,29)" fg:x="3756" fg:w="938"/><text x="50.5715%" y="398.50">pthread_cond_timedw..</text></g><g><title>read (arrakis_backend_kafka/backend.py:372) (952 samples, 12.75%)</title><rect x="50.1742%" y="340" width="12.7546%" height="15" fill="rgb(232,182,51)" fg:x="3745" fg:w="952"/><text x="50.4242%" y="350.50">read (arrakis_backe..</text></g><g><title>read_all_batches (arrakis_backend_kafka/backend.py:441) (952 samples, 12.75%)</title><rect x="50.1742%" y="356" width="12.7546%" height="15" fill="rgb(231,60,39)" fg:x="3745" fg:w="952"/><text x="50.4242%" y="366.50">read_all_batches (a..</text></g><g><title>read_next_batch (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (952 samples, 12.75%)</title><rect x="50.1742%" y="372" width="12.7546%" height="15" fill="rgb(208,69,12)" fg:x="3745" fg:w="952"/><text x="50.4242%" y="382.50">read_next_batch (py..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (1,017 samples, 13.63%)</title><rect x="63.1699%" y="420" width="13.6254%" height="15" fill="rgb(235,93,37)" fg:x="4715" fg:w="1017"/><text x="63.4199%" y="430.50">__futex_abstimed_wait..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (55 samples, 0.74%)</title><rect x="76.7953%" y="420" width="0.7369%" height="15" fill="rgb(213,116,39)" fg:x="5732" fg:w="55"/><text x="77.0453%" y="430.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (55 samples, 0.74%)</title><rect x="76.7953%" y="436" width="0.7369%" height="15" fill="rgb(222,207,29)" fg:x="5732" fg:w="55"/><text x="77.0453%" y="446.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (1,075 samples, 14.40%)</title><rect x="63.1699%" y="404" width="14.4025%" height="15" fill="rgb(206,96,30)" fg:x="4715" fg:w="1075"/><text x="63.4199%" y="414.50">pthread_cond_timedwait..</text></g><g><title>_smart_filter_batch (arrakis_backend_kafka/backend.py:287) (1,090 samples, 14.60%)</title><rect x="63.0091%" y="356" width="14.6034%" height="15" fill="rgb(218,138,4)" fg:x="4703" fg:w="1090"/><text x="63.2591%" y="366.50">_smart_filter_batch (a..</text></g><g><title>wrapper (pyarrow/compute.py:252) (1,089 samples, 14.59%)</title><rect x="63.0225%" y="372" width="14.5900%" height="15" fill="rgb(250,191,14)" fg:x="4704" fg:w="1089"/><text x="63.2725%" y="382.50">wrapper (pyarrow/compu..</text></g><g><title>call (pyarrow/_compute.cpython-311-x86_64-linux-gnu.so) (1,089 samples, 14.59%)</title><rect x="63.0225%" y="388" width="14.5900%" height="15" fill="rgb(239,60,40)" fg:x="4704" fg:w="1089"/><text x="63.2725%" y="398.50">call (pyarrow/_compute..</text></g><g><title>read (arrakis_backend_kafka/backend.py:375) (1,094 samples, 14.66%)</title><rect x="62.9823%" y="340" width="14.6570%" height="15" fill="rgb(206,27,48)" fg:x="4701" fg:w="1094"/><text x="63.2323%" y="350.50">read (arrakis_backend_..</text></g><g><title>pull (arrakis/mux.py:164) (8 samples, 0.11%)</title><rect x="77.6661%" y="356" width="0.1072%" height="15" fill="rgb(225,35,8)" fg:x="5797" fg:w="8"/><text x="77.9161%" y="366.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:379) (10 samples, 0.13%)</title><rect x="77.6527%" y="340" width="0.1340%" height="15" fill="rgb(250,213,24)" fg:x="5796" fg:w="10"/><text x="77.9027%" y="350.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (79 samples, 1.06%)</title><rect x="77.8671%" y="484" width="1.0584%" height="15" fill="rgb(247,123,22)" fg:x="5812" fg:w="79"/><text x="78.1171%" y="494.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeWriter (pyarrow/libarrow_python.so.2000) (90 samples, 1.21%)</title><rect x="77.8403%" y="436" width="1.2058%" height="15" fill="rgb(231,138,38)" fg:x="5810" fg:w="90"/><text x="78.0903%" y="446.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::PandasWriter (pyarrow/libarrow_python.so.2000) (90 samples, 1.21%)</title><rect x="77.8403%" y="452" width="1.2058%" height="15" fill="rgb(231,145,46)" fg:x="5810" fg:w="90"/><text x="78.0903%" y="462.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (88 samples, 1.18%)</title><rect x="77.8671%" y="468" width="1.1790%" height="15" fill="rgb(251,118,11)" fg:x="5812" fg:w="88"/><text x="78.1171%" y="478.50"></text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (9 samples, 0.12%)</title><rect x="78.9255%" y="484" width="0.1206%" height="15" fill="rgb(217,147,25)" fg:x="5891" fg:w="9"/><text x="79.1755%" y="494.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (9 samples, 0.12%)</title><rect x="78.9255%" y="500" width="0.1206%" height="15" fill="rgb(247,81,37)" fg:x="5891" fg:w="9"/><text x="79.1755%" y="510.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (201 samples, 2.69%)</title><rect x="79.0461%" y="484" width="2.6929%" height="15" fill="rgb(209,12,38)" fg:x="5900" fg:w="201"/><text x="79.2961%" y="494.50">__..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (222 samples, 2.97%)</title><rect x="79.0461%" y="468" width="2.9743%" height="15" fill="rgb(227,1,9)" fg:x="5900" fg:w="222"/><text x="79.2961%" y="478.50">pth..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (21 samples, 0.28%)</title><rect x="81.7390%" y="484" width="0.2814%" height="15" fill="rgb(248,47,43)" fg:x="6101" fg:w="21"/><text x="81.9890%" y="494.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (21 samples, 0.28%)</title><rect x="81.7390%" y="500" width="0.2814%" height="15" fill="rgb(221,10,30)" fg:x="6101" fg:w="21"/><text x="81.9890%" y="510.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::GetSeriesResult (pyarrow/libarrow_python.so.2000) (224 samples, 3.00%)</title><rect x="79.0461%" y="436" width="3.0011%" height="15" fill="rgb(210,229,1)" fg:x="5900" fg:w="224"/><text x="79.2961%" y="446.50">arr..</text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::MakeBlock1D (pyarrow/libarrow_python.so.2000) (224 samples, 3.00%)</title><rect x="79.0461%" y="452" width="3.0011%" height="15" fill="rgb(222,148,37)" fg:x="5900" fg:w="224"/><text x="79.2961%" y="462.50">arr..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (97 samples, 1.30%)</title><rect x="82.0606%" y="484" width="1.2996%" height="15" fill="rgb(234,67,33)" fg:x="6125" fg:w="97"/><text x="82.3106%" y="494.50"></text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (10 samples, 0.13%)</title><rect x="83.3601%" y="484" width="0.1340%" height="15" fill="rgb(247,98,35)" fg:x="6222" fg:w="10"/><text x="83.6101%" y="494.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (10 samples, 0.13%)</title><rect x="83.3601%" y="500" width="0.1340%" height="15" fill="rgb(247,138,52)" fg:x="6222" fg:w="10"/><text x="83.6101%" y="510.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (109 samples, 1.46%)</title><rect x="82.0606%" y="468" width="1.4603%" height="15" fill="rgb(213,79,30)" fg:x="6125" fg:w="109"/><text x="82.3106%" y="478.50"></text></g><g><title>arrow::py::ConvertArrayToPandas (pyarrow/libarrow_python.so.2000) (425 samples, 5.69%)</title><rect x="77.8403%" y="404" width="5.6940%" height="15" fill="rgb(246,177,23)" fg:x="5810" fg:w="425"/><text x="78.0903%" y="414.50">arrow::..</text></g><g><title>arrow::py::ConvertChunkedArrayToPandas (pyarrow/libarrow_python.so.2000) (425 samples, 5.69%)</title><rect x="77.8403%" y="420" width="5.6940%" height="15" fill="rgb(230,62,27)" fg:x="5810" fg:w="425"/><text x="78.0903%" y="430.50">arrow::..</text></g><g><title>arrow::py::(anonymous namespace)::TypedPandasWriter&lt;7&gt;::TransferSingle (pyarrow/libarrow_python.so.2000) (111 samples, 1.49%)</title><rect x="82.0472%" y="436" width="1.4871%" height="15" fill="rgb(216,154,8)" fg:x="6124" fg:w="111"/><text x="82.2972%" y="446.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeNumPyView (pyarrow/libarrow_python.so.2000) (111 samples, 1.49%)</title><rect x="82.0472%" y="452" width="1.4871%" height="15" fill="rgb(244,35,45)" fg:x="6124" fg:w="111"/><text x="82.2972%" y="462.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (285 samples, 3.82%)</title><rect x="83.5745%" y="420" width="3.8183%" height="15" fill="rgb(251,115,12)" fg:x="6238" fg:w="285"/><text x="83.8245%" y="430.50">__fu..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (20 samples, 0.27%)</title><rect x="87.3928%" y="420" width="0.2680%" height="15" fill="rgb(240,54,50)" fg:x="6523" fg:w="20"/><text x="87.6428%" y="430.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (20 samples, 0.27%)</title><rect x="87.3928%" y="436" width="0.2680%" height="15" fill="rgb(233,84,52)" fg:x="6523" fg:w="20"/><text x="87.6428%" y="446.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (307 samples, 4.11%)</title><rect x="83.5745%" y="404" width="4.1131%" height="15" fill="rgb(207,117,47)" fg:x="6238" fg:w="307"/><text x="83.8245%" y="414.50">pthr..</text></g><g><title>from_row_batch (arrakis/block.py:403) (740 samples, 9.91%)</title><rect x="77.8001%" y="372" width="9.9143%" height="15" fill="rgb(249,43,39)" fg:x="5807" fg:w="740"/><text x="78.0501%" y="382.50">from_row_batch..</text></g><g><title>to_numpy (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (738 samples, 9.89%)</title><rect x="77.8269%" y="388" width="9.8875%" height="15" fill="rgb(209,38,44)" fg:x="5809" fg:w="738"/><text x="78.0769%" y="398.50">to_numpy (pyar..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (48 samples, 0.64%)</title><rect x="87.9287%" y="500" width="0.6431%" height="15" fill="rgb(236,212,23)" fg:x="6563" fg:w="48"/><text x="88.1787%" y="510.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeWriter (pyarrow/libarrow_python.so.2000) (55 samples, 0.74%)</title><rect x="87.8617%" y="452" width="0.7369%" height="15" fill="rgb(242,79,21)" fg:x="6558" fg:w="55"/><text x="88.1117%" y="462.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::PandasWriter (pyarrow/libarrow_python.so.2000) (55 samples, 0.74%)</title><rect x="87.8617%" y="468" width="0.7369%" height="15" fill="rgb(211,96,35)" fg:x="6558" fg:w="55"/><text x="88.1117%" y="478.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (50 samples, 0.67%)</title><rect x="87.9287%" y="484" width="0.6699%" height="15" fill="rgb(253,215,40)" fg:x="6563" fg:w="50"/><text x="88.1787%" y="494.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (160 samples, 2.14%)</title><rect x="88.6388%" y="500" width="2.1436%" height="15" fill="rgb(211,81,21)" fg:x="6616" fg:w="160"/><text x="88.8888%" y="510.50">_..</text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::GetSeriesResult (pyarrow/libarrow_python.so.2000) (174 samples, 2.33%)</title><rect x="88.5986%" y="452" width="2.3312%" height="15" fill="rgb(208,190,38)" fg:x="6613" fg:w="174"/><text x="88.8486%" y="462.50">a..</text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::MakeBlock1D (pyarrow/libarrow_python.so.2000) (174 samples, 2.33%)</title><rect x="88.5986%" y="468" width="2.3312%" height="15" fill="rgb(235,213,38)" fg:x="6613" fg:w="174"/><text x="88.8486%" y="478.50">a..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (171 samples, 2.29%)</title><rect x="88.6388%" y="484" width="2.2910%" height="15" fill="rgb(237,122,38)" fg:x="6616" fg:w="171"/><text x="88.8888%" y="494.50">p..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (11 samples, 0.15%)</title><rect x="90.7824%" y="500" width="0.1474%" height="15" fill="rgb(244,218,35)" fg:x="6776" fg:w="11"/><text x="91.0324%" y="510.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (11 samples, 0.15%)</title><rect x="90.7824%" y="516" width="0.1474%" height="15" fill="rgb(240,68,47)" fg:x="6776" fg:w="11"/><text x="91.0324%" y="526.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (10 samples, 0.13%)</title><rect x="90.9298%" y="500" width="0.1340%" height="15" fill="rgb(210,16,53)" fg:x="6787" fg:w="10"/><text x="91.1798%" y="510.50"></text></g><g><title>arrow::py::(anonymous namespace)::TypedPandasWriter&lt;11&gt;::TransferSingle (pyarrow/libarrow_python.so.2000) (11 samples, 0.15%)</title><rect x="90.9298%" y="452" width="0.1474%" height="15" fill="rgb(235,124,12)" fg:x="6787" fg:w="11"/><text x="91.1798%" y="462.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeNumPyView (pyarrow/libarrow_python.so.2000) (11 samples, 0.15%)</title><rect x="90.9298%" y="468" width="0.1474%" height="15" fill="rgb(224,169,11)" fg:x="6787" fg:w="11"/><text x="91.1798%" y="478.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (11 samples, 0.15%)</title><rect x="90.9298%" y="484" width="0.1474%" height="15" fill="rgb(250,166,2)" fg:x="6787" fg:w="11"/><text x="91.1798%" y="494.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (28 samples, 0.38%)</title><rect x="91.0906%" y="500" width="0.3751%" height="15" fill="rgb(242,216,29)" fg:x="6799" fg:w="28"/><text x="91.3406%" y="510.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (30 samples, 0.40%)</title><rect x="91.0906%" y="484" width="0.4019%" height="15" fill="rgb(230,116,27)" fg:x="6799" fg:w="30"/><text x="91.3406%" y="494.50"></text></g><g><title>arrow::py::(anonymous namespace)::TypedPandasWriter&lt;12&gt;::TransferSingle (pyarrow/libarrow_python.so.2000) (32 samples, 0.43%)</title><rect x="91.0772%" y="452" width="0.4287%" height="15" fill="rgb(228,99,48)" fg:x="6798" fg:w="32"/><text x="91.3272%" y="462.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeNumPyView (pyarrow/libarrow_python.so.2000) (32 samples, 0.43%)</title><rect x="91.0772%" y="468" width="0.4287%" height="15" fill="rgb(253,11,6)" fg:x="6798" fg:w="32"/><text x="91.3272%" y="478.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (35 samples, 0.47%)</title><rect x="91.5327%" y="500" width="0.4689%" height="15" fill="rgb(247,143,39)" fg:x="6832" fg:w="35"/><text x="91.7827%" y="510.50"></text></g><g><title>arrow::py::ConvertArrayToPandas (pyarrow/libarrow_python.so.2000) (312 samples, 4.18%)</title><rect x="87.8617%" y="420" width="4.1801%" height="15" fill="rgb(236,97,10)" fg:x="6558" fg:w="312"/><text x="88.1117%" y="430.50">arrow..</text></g><g><title>arrow::py::ConvertChunkedArrayToPandas (pyarrow/libarrow_python.so.2000) (312 samples, 4.18%)</title><rect x="87.8617%" y="436" width="4.1801%" height="15" fill="rgb(233,208,19)" fg:x="6558" fg:w="312"/><text x="88.1117%" y="446.50">arrow..</text></g><g><title>arrow::py::(anonymous namespace)::TypedPandasWriter&lt;6&gt;::TransferSingle (pyarrow/libarrow_python.so.2000) (40 samples, 0.54%)</title><rect x="91.5059%" y="452" width="0.5359%" height="15" fill="rgb(216,164,2)" fg:x="6830" fg:w="40"/><text x="91.7559%" y="462.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeNumPyView (pyarrow/libarrow_python.so.2000) (40 samples, 0.54%)</title><rect x="91.5059%" y="468" width="0.5359%" height="15" fill="rgb(220,129,5)" fg:x="6830" fg:w="40"/><text x="91.7559%" y="478.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (38 samples, 0.51%)</title><rect x="91.5327%" y="484" width="0.5091%" height="15" fill="rgb(242,17,10)" fg:x="6832" fg:w="38"/><text x="91.7827%" y="494.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (286 samples, 3.83%)</title><rect x="92.0552%" y="436" width="3.8317%" height="15" fill="rgb(242,107,0)" fg:x="6871" fg:w="286"/><text x="92.3052%" y="446.50">__fu..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (315 samples, 4.22%)</title><rect x="92.0552%" y="420" width="4.2203%" height="15" fill="rgb(251,28,31)" fg:x="6871" fg:w="315"/><text x="92.3052%" y="430.50">pthre..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (29 samples, 0.39%)</title><rect x="95.8869%" y="436" width="0.3885%" height="15" fill="rgb(233,223,10)" fg:x="7157" fg:w="29"/><text x="96.1369%" y="446.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (29 samples, 0.39%)</title><rect x="95.8869%" y="452" width="0.3885%" height="15" fill="rgb(215,21,27)" fg:x="7157" fg:w="29"/><text x="96.1369%" y="462.50"></text></g><g><title>from_row_batch (arrakis/block.py:409) (633 samples, 8.48%)</title><rect x="87.8215%" y="372" width="8.4807%" height="15" fill="rgb(232,23,21)" fg:x="6555" fg:w="633"/><text x="88.0715%" y="382.50">from_row_bat..</text></g><g><title>_arrow_to_numpy_array (arrakis/block.py:511) (630 samples, 8.44%)</title><rect x="87.8617%" y="388" width="8.4405%" height="15" fill="rgb(244,5,23)" fg:x="6558" fg:w="630"/><text x="88.1117%" y="398.50">_arrow_to_nu..</text></g><g><title>to_numpy (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (630 samples, 8.44%)</title><rect x="87.8617%" y="404" width="8.4405%" height="15" fill="rgb(226,81,46)" fg:x="6558" fg:w="630"/><text x="88.1117%" y="414.50">to_numpy (py..</text></g><g><title>&lt;listcomp&gt; (arrakis_backend_kafka/backend.py:382) (1,382 samples, 18.52%)</title><rect x="77.8001%" y="356" width="18.5155%" height="15" fill="rgb(247,70,30)" fg:x="5807" fg:w="1382"/><text x="78.0501%" y="366.50">&lt;listcomp&gt; (arrakis_backend_k..</text></g><g><title>read (arrakis_backend_kafka/backend.py:381) (1,385 samples, 18.56%)</title><rect x="77.7867%" y="340" width="18.5557%" height="15" fill="rgb(212,68,19)" fg:x="5806" fg:w="1385"/><text x="78.0367%" y="350.50">read (arrakis_backend_kafka/b..</text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:588) (7,037 samples, 94.28%)</title><rect x="2.0766%" y="308" width="94.2792%" height="15" fill="rgb(240,187,13)" fg:x="155" fg:w="7037"/><text x="2.3266%" y="318.50">_convert_blocks_to_batches (arrakis_server/server.py:588)</text></g><g><title>stream (arrakis_backend_kafka/backend.py:178) (7,036 samples, 94.27%)</title><rect x="2.0900%" y="324" width="94.2658%" height="15" fill="rgb(223,113,26)" fg:x="156" fg:w="7036"/><text x="2.3400%" y="334.50">stream (arrakis_backend_kafka/backend.py:178)</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (65 samples, 0.87%)</title><rect x="96.5300%" y="388" width="0.8708%" height="15" fill="rgb(206,192,2)" fg:x="7205" fg:w="65"/><text x="96.7800%" y="398.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (71 samples, 0.95%)</title><rect x="96.5300%" y="372" width="0.9512%" height="15" fill="rgb(241,108,4)" fg:x="7205" fg:w="71"/><text x="96.7800%" y="382.50"></text></g><g><title>arrow::py::ConvertPySequence (pyarrow/libarrow_python.so.2000) (81 samples, 1.09%)</title><rect x="96.4094%" y="356" width="1.0852%" height="15" fill="rgb(247,173,49)" fg:x="7196" fg:w="81"/><text x="96.6594%" y="366.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (80 samples, 1.07%)</title><rect x="97.5884%" y="372" width="1.0718%" height="15" fill="rgb(224,114,35)" fg:x="7284" fg:w="80"/><text x="97.8384%" y="382.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (94 samples, 1.26%)</title><rect x="97.5884%" y="356" width="1.2594%" height="15" fill="rgb(245,159,27)" fg:x="7284" fg:w="94"/><text x="97.8384%" y="366.50"></text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (14 samples, 0.19%)</title><rect x="98.6602%" y="372" width="0.1876%" height="15" fill="rgb(245,172,44)" fg:x="7364" fg:w="14"/><text x="98.9102%" y="382.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (14 samples, 0.19%)</title><rect x="98.6602%" y="388" width="0.1876%" height="15" fill="rgb(236,23,11)" fg:x="7364" fg:w="14"/><text x="98.9102%" y="398.50"></text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:601) (185 samples, 2.48%)</title><rect x="96.3826%" y="308" width="2.4786%" height="15" fill="rgb(205,117,38)" fg:x="7194" fg:w="185"/><text x="96.6326%" y="318.50">_c..</text></g><g><title>array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (185 samples, 2.48%)</title><rect x="96.3826%" y="324" width="2.4786%" height="15" fill="rgb(237,72,25)" fg:x="7194" fg:w="185"/><text x="96.6326%" y="334.50">ar..</text></g><g><title>lib__sequence_to_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (184 samples, 2.47%)</title><rect x="96.3960%" y="340" width="2.4652%" height="15" fill="rgb(244,70,9)" fg:x="7195" fg:w="184"/><text x="96.6460%" y="350.50">li..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (25 samples, 0.33%)</title><rect x="98.8612%" y="372" width="0.3349%" height="15" fill="rgb(217,125,39)" fg:x="7379" fg:w="25"/><text x="99.1112%" y="382.50"></text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:603) (30 samples, 0.40%)</title><rect x="98.8612%" y="308" width="0.4019%" height="15" fill="rgb(235,36,10)" fg:x="7379" fg:w="30"/><text x="99.1112%" y="318.50"></text></g><g><title>from_arrays (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (30 samples, 0.40%)</title><rect x="98.8612%" y="324" width="0.4019%" height="15" fill="rgb(251,123,47)" fg:x="7379" fg:w="30"/><text x="99.1112%" y="334.50"></text></g><g><title>validate (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (30 samples, 0.40%)</title><rect x="98.8612%" y="340" width="0.4019%" height="15" fill="rgb(221,13,13)" fg:x="7379" fg:w="30"/><text x="99.1112%" y="350.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (30 samples, 0.40%)</title><rect x="98.8612%" y="356" width="0.4019%" height="15" fill="rgb(238,131,9)" fg:x="7379" fg:w="30"/><text x="99.1112%" y="366.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (9 samples, 0.12%)</title><rect x="99.2899%" y="388" width="0.1206%" height="15" fill="rgb(211,50,8)" fg:x="7411" fg:w="9"/><text x="99.5399%" y="398.50"></text></g><g><title>arrow::py::ConvertPySequence (pyarrow/libarrow_python.so.2000) (11 samples, 0.15%)</title><rect x="99.2765%" y="356" width="0.1474%" height="15" fill="rgb(245,182,24)" fg:x="7410" fg:w="11"/><text x="99.5265%" y="366.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (10 samples, 0.13%)</title><rect x="99.2899%" y="372" width="0.1340%" height="15" fill="rgb(242,14,37)" fg:x="7411" fg:w="10"/><text x="99.5399%" y="382.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (34 samples, 0.46%)</title><rect x="99.4373%" y="372" width="0.4555%" height="15" fill="rgb(246,228,12)" fg:x="7422" fg:w="34"/><text x="99.6873%" y="382.50"></text></g><g><title>all (7,464 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="7464"/><text x="0.2500%" y="62.50"></text></g><g><title>clone3 (libc.so.6) (7,464 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="7464"/><text x="0.2500%" y="78.50">clone3 (libc.so.6)</text></g><g><title>start_thread (libc.so.6) (7,464 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="7464"/><text x="0.2500%" y="94.50">start_thread (libc.so.6)</text></g><g><title>grpc_core::(anonymous namespace)::ThreadInternalsPosix::ThreadInternalsPosix(char const*, void (*)(void*), void*, bool*, grpc_core::Thread::Options const&amp;)::{lambda(void*)#1}::_FUN (pyarrow/libarrow_flight.so.2000) (7,464 samples, 100.00%)</title><rect x="0.0000%" y="100" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="7464"/><text x="0.2500%" y="110.50">grpc_core::(anonymous namespace)::ThreadInternalsPosix::ThreadInternalsPosix(char const*, void (*)(void*), void*, bool*, grpc_core::Thread::Options const&amp;)::{lambda(vo..</text></g><g><title>grpc::ThreadManager::WorkerThread::Run (pyarrow/libarrow_flight.so.2000) (7,464 samples, 100.00%)</title><rect x="0.0000%" y="116" width="100.0000%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="7464"/><text x="0.2500%" y="126.50">grpc::ThreadManager::WorkerThread::Run (pyarrow/libarrow_flight.so.2000)</text></g><g><title>grpc::ThreadManager::MainWorkLoop (pyarrow/libarrow_flight.so.2000) (7,464 samples, 100.00%)</title><rect x="0.0000%" y="132" width="100.0000%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="7464"/><text x="0.2500%" y="142.50">grpc::ThreadManager::MainWorkLoop (pyarrow/libarrow_flight.so.2000)</text></g><g><title>grpc::Server::SyncRequest::ContinueRunAfterInterception (pyarrow/libarrow_flight.so.2000) (7,464 samples, 100.00%)</title><rect x="0.0000%" y="148" width="100.0000%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="7464"/><text x="0.2500%" y="158.50">grpc::Server::SyncRequest::ContinueRunAfterInterception (pyarrow/libarrow_flight.so.2000)</text></g><g><title>grpc::internal::ServerStreamingHandler&lt;arrow::flight::protocol::FlightService::Service, arrow::flight::protocol::Ticket, arrow::flight::protocol::FlightData&gt;::RunHandler (pyarrow/libarrow_flight.so.2000) (7,464 samples, 100.00%)</title><rect x="0.0000%" y="164" width="100.0000%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="7464"/><text x="0.2500%" y="174.50">grpc::internal::ServerStreamingHandler&lt;arrow::flight::protocol::FlightService::Service, arrow::flight::protocol::Ticket, arrow::flight::protocol::FlightData&gt;::RunHandl..</text></g><g><title>std::_Function_handler&lt;grpc::Status(arrow::flight::protocol::FlightService::Service*, grpc::ServerContext*, arrow::flight::protocol::Ticket const*, grpc::ServerWriter&lt;arrow::flight::protocol::FlightData&gt;*), arrow::flight::protocol::FlightService::Service()::Service::{lambda(arrow::flight::protocol::FlightService::Service*, grpc::ServerContext*, arrow::flight::protocol::Ticket const*, grpc::ServerWriter&lt;arrow::flight::protocol::FlightData&gt;*)#6}&gt;::_M_invoke (pyarrow/libarrow_flight.so.2000) (7,464 samples, 100.00%)</title><rect x="0.0000%" y="180" width="100.0000%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="7464"/><text x="0.2500%" y="190.50">std::_Function_handler&lt;grpc::Status(arrow::flight::protocol::FlightService::Service*, grpc::ServerContext*, arrow::flight::protocol::Ticket const*, grpc::ServerWriter&lt;..</text></g><g><title>arrow::flight::transport::grpc::(anonymous namespace)::GrpcServiceHandler::DoGet (pyarrow/libarrow_flight.so.2000) (7,464 samples, 100.00%)</title><rect x="0.0000%" y="196" width="100.0000%" height="15" fill="rgb(205,98,50)" fg:x="0" fg:w="7464"/><text x="0.2500%" y="206.50">arrow::flight::transport::grpc::(anonymous namespace)::GrpcServiceHandler::DoGet (pyarrow/libarrow_flight.so.2000)</text></g><g><title>arrow::flight::internal::ServerTransport::DoGet (pyarrow/libarrow_flight.so.2000) (7,464 samples, 100.00%)</title><rect x="0.0000%" y="212" width="100.0000%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="7464"/><text x="0.2500%" y="222.50">arrow::flight::internal::ServerTransport::DoGet (pyarrow/libarrow_flight.so.2000)</text></g><g><title>arrow::py::flight::PyFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000) (7,464 samples, 100.00%)</title><rect x="0.0000%" y="228" width="100.0000%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="7464"/><text x="0.2500%" y="238.50">arrow::py::flight::PyFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000)</text></g><g><title>arrow::py::flight::PyGeneratorFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000) (7,464 samples, 100.00%)</title><rect x="0.0000%" y="244" width="100.0000%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="7464"/><text x="0.2500%" y="254.50">arrow::py::flight::PyGeneratorFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000)</text></g><g><title>std::_Function_handler&lt;arrow::Status(_object*, arrow::flight::FlightPayload*), arrow::Status (*)(void*, arrow::flight::FlightPayload*)&gt;::_M_invoke (pyarrow/_flight.cpython-311-x86_64-linux-gnu.so) (7,309 samples, 97.92%)</title><rect x="2.0766%" y="260" width="97.9234%" height="15" fill="rgb(235,201,11)" fg:x="155" fg:w="7309"/><text x="2.3266%" y="270.50">std::_Function_handler&lt;arrow::Status(_object*, arrow::flight::FlightPayload*), arrow::Status (*)(void*, arrow::flight::FlightPayload*)&gt;::_M_invoke (pyarrow/_flight..</text></g><g><title>_flight__data_stream_next (pyarrow/_flight.cpython-311-x86_64-linux-gnu.so) (7,309 samples, 97.92%)</title><rect x="2.0766%" y="276" width="97.9234%" height="15" fill="rgb(207,46,11)" fg:x="155" fg:w="7309"/><text x="2.3266%" y="286.50">_flight__data_stream_next (pyarrow/_flight.cpython-311-x86_64-linux-gnu.so)</text></g><g><title>_generate_stream (arrakis_server/server.py:620) (7,309 samples, 97.92%)</title><rect x="2.0766%" y="292" width="97.9234%" height="15" fill="rgb(241,35,35)" fg:x="155" fg:w="7309"/><text x="2.3266%" y="302.50">_generate_stream (arrakis_server/server.py:620)</text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:605) (55 samples, 0.74%)</title><rect x="99.2631%" y="308" width="0.7369%" height="15" fill="rgb(243,32,47)" fg:x="7409" fg:w="55"/><text x="99.5131%" y="318.50"></text></g><g><title>array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (55 samples, 0.74%)</title><rect x="99.2631%" y="324" width="0.7369%" height="15" fill="rgb(247,202,23)" fg:x="7409" fg:w="55"/><text x="99.5131%" y="334.50"></text></g><g><title>lib__sequence_to_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (55 samples, 0.74%)</title><rect x="99.2631%" y="340" width="0.7369%" height="15" fill="rgb(219,102,11)" fg:x="7409" fg:w="55"/><text x="99.5131%" y="350.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (42 samples, 0.56%)</title><rect x="99.4373%" y="356" width="0.5627%" height="15" fill="rgb(243,110,44)" fg:x="7422" fg:w="42"/><text x="99.6873%" y="366.50"></text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (8 samples, 0.11%)</title><rect x="99.8928%" y="372" width="0.1072%" height="15" fill="rgb(222,74,54)" fg:x="7456" fg:w="8"/><text x="100.1428%" y="382.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (8 samples, 0.11%)</title><rect x="99.8928%" y="388" width="0.1072%" height="15" fill="rgb(216,99,12)" fg:x="7456" fg:w="8"/><text x="100.1428%" y="398.50"></text></g></svg></svg>