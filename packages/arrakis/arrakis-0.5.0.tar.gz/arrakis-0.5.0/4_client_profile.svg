<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="698" onload="init(evt)" viewBox="0 0 1200 698" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="698" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record --native -o profile.svg --pid 1105126</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="687.00"> </text><svg id="frames" x="10" width="1180" total_samples="96017"><g><title>__futex_abstimed_wait_common (libc.so.6) (651 samples, 0.68%)</title><rect x="0.0104%" y="276" width="0.6780%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="651"/><text x="0.2604%" y="286.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (663 samples, 0.69%)</title><rect x="0.0104%" y="260" width="0.6905%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="663"/><text x="0.2604%" y="270.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (451 samples, 0.47%)</title><rect x="0.7447%" y="404" width="0.4697%" height="15" fill="rgb(221,193,54)" fg:x="715" fg:w="451"/><text x="0.9947%" y="414.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (463 samples, 0.48%)</title><rect x="0.7447%" y="388" width="0.4822%" height="15" fill="rgb(248,212,6)" fg:x="715" fg:w="463"/><text x="0.9947%" y="398.50"></text></g><g><title>CallState_end (confluent_kafka/cimpl.cpython-311-x86_64-linux-gnu.so) (465 samples, 0.48%)</title><rect x="0.7447%" y="372" width="0.4843%" height="15" fill="rgb(208,68,35)" fg:x="715" fg:w="465"/><text x="0.9947%" y="382.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:312) (532 samples, 0.55%)</title><rect x="0.7332%" y="340" width="0.5541%" height="15" fill="rgb(232,128,0)" fg:x="704" fg:w="532"/><text x="0.9832%" y="350.50"></text></g><g><title>Consumer_poll (confluent_kafka/cimpl.cpython-311-x86_64-linux-gnu.so) (529 samples, 0.55%)</title><rect x="0.7363%" y="356" width="0.5509%" height="15" fill="rgb(207,160,47)" fg:x="707" fg:w="529"/><text x="0.9863%" y="366.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (251 samples, 0.26%)</title><rect x="1.3820%" y="484" width="0.2614%" height="15" fill="rgb(228,23,34)" fg:x="1327" fg:w="251"/><text x="1.6320%" y="494.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (256 samples, 0.27%)</title><rect x="1.3820%" y="468" width="0.2666%" height="15" fill="rgb(218,30,26)" fg:x="1327" fg:w="256"/><text x="1.6320%" y="478.50"></text></g><g><title>arrow::io::BufferReader::~BufferReader (pyarrow/libarrow.so.2000) (263 samples, 0.27%)</title><rect x="1.3758%" y="404" width="0.2739%" height="15" fill="rgb(220,122,19)" fg:x="1321" fg:w="263"/><text x="1.6258%" y="414.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (pyarrow/libarrow.so.2000) (262 samples, 0.27%)</title><rect x="1.3768%" y="420" width="0.2729%" height="15" fill="rgb(250,228,42)" fg:x="1322" fg:w="262"/><text x="1.6268%" y="430.50"></text></g><g><title>std::_Sp_counted_ptr&lt;arrow::py::PyBuffer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (pyarrow/libarrow_python.so.2000) (262 samples, 0.27%)</title><rect x="1.3768%" y="436" width="0.2729%" height="15" fill="rgb(240,193,28)" fg:x="1322" fg:w="262"/><text x="1.6268%" y="446.50"></text></g><g><title>arrow::py::PyBuffer::~PyBuffer (pyarrow/libarrow_python.so.2000) (262 samples, 0.27%)</title><rect x="1.3768%" y="452" width="0.2729%" height="15" fill="rgb(216,20,37)" fg:x="1322" fg:w="262"/><text x="1.6268%" y="462.50"></text></g><g><title>arrow::ipc::RecordBatchStreamReaderImpl::~RecordBatchStreamReaderImpl (pyarrow/libarrow.so.2000) (264 samples, 0.27%)</title><rect x="1.3758%" y="372" width="0.2750%" height="15" fill="rgb(206,188,39)" fg:x="1321" fg:w="264"/><text x="1.6258%" y="382.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold (pyarrow/libarrow.so.2000) (264 samples, 0.27%)</title><rect x="1.3758%" y="388" width="0.2750%" height="15" fill="rgb(217,207,13)" fg:x="1321" fg:w="264"/><text x="1.6258%" y="398.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (282 samples, 0.29%)</title><rect x="1.6560%" y="388" width="0.2937%" height="15" fill="rgb(231,73,38)" fg:x="1590" fg:w="282"/><text x="1.9060%" y="398.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (294 samples, 0.31%)</title><rect x="1.6560%" y="372" width="0.3062%" height="15" fill="rgb(225,20,46)" fg:x="1590" fg:w="294"/><text x="1.9060%" y="382.50"></text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_RecordBatchReader (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (569 samples, 0.59%)</title><rect x="1.3727%" y="356" width="0.5926%" height="15" fill="rgb(210,31,41)" fg:x="1318" fg:w="569"/><text x="1.6227%" y="366.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (982 samples, 1.02%)</title><rect x="2.0278%" y="420" width="1.0227%" height="15" fill="rgb(221,200,47)" fg:x="1947" fg:w="982"/><text x="2.2778%" y="430.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (1,003 samples, 1.04%)</title><rect x="2.0278%" y="404" width="1.0446%" height="15" fill="rgb(226,26,5)" fg:x="1947" fg:w="1003"/><text x="2.2778%" y="414.50"></text></g><g><title>__init__ (pyarrow/ipc.py:52) (1,059 samples, 1.10%)</title><rect x="1.9757%" y="372" width="1.1029%" height="15" fill="rgb(249,33,26)" fg:x="1897" fg:w="1059"/><text x="2.2257%" y="382.50"></text></g><g><title>_open (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (1,058 samples, 1.10%)</title><rect x="1.9767%" y="388" width="1.1019%" height="15" fill="rgb(235,183,28)" fg:x="1898" fg:w="1058"/><text x="2.2267%" y="398.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:317) (1,720 samples, 1.79%)</title><rect x="1.2904%" y="340" width="1.7913%" height="15" fill="rgb(221,5,38)" fg:x="1239" fg:w="1720"/><text x="1.5404%" y="350.50">r..</text></g><g><title>open_stream (pyarrow/ipc.py:190) (1,067 samples, 1.11%)</title><rect x="1.9705%" y="356" width="1.1113%" height="15" fill="rgb(247,18,42)" fg:x="1892" fg:w="1067"/><text x="2.2205%" y="366.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (1,005 samples, 1.05%)</title><rect x="3.1297%" y="404" width="1.0467%" height="15" fill="rgb(241,131,45)" fg:x="3005" fg:w="1005"/><text x="3.3797%" y="414.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (1,033 samples, 1.08%)</title><rect x="3.1297%" y="388" width="1.0759%" height="15" fill="rgb(249,31,29)" fg:x="3005" fg:w="1033"/><text x="3.3797%" y="398.50"></text></g><g><title>read_all_batches (arrakis_backend_kafka/backend.py:392) (1,073 samples, 1.12%)</title><rect x="3.0911%" y="356" width="1.1175%" height="15" fill="rgb(225,111,53)" fg:x="2968" fg:w="1073"/><text x="3.3411%" y="366.50"></text></g><g><title>read_next_batch (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (1,071 samples, 1.12%)</title><rect x="3.0932%" y="372" width="1.1154%" height="15" fill="rgb(238,160,17)" fg:x="2970" fg:w="1071"/><text x="3.3432%" y="382.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:318) (1,083 samples, 1.13%)</title><rect x="3.0817%" y="340" width="1.1279%" height="15" fill="rgb(214,148,48)" fg:x="2959" fg:w="1083"/><text x="3.3317%" y="350.50"></text></g><g><title>arrow::py::ConvertArrayToPandas (pyarrow/libarrow_python.so.2000) (238 samples, 0.25%)</title><rect x="4.2274%" y="372" width="0.2479%" height="15" fill="rgb(232,36,49)" fg:x="4059" fg:w="238"/><text x="4.4774%" y="382.50"></text></g><g><title>arrow::py::ConvertChunkedArrayToPandas (pyarrow/libarrow_python.so.2000) (235 samples, 0.24%)</title><rect x="4.2305%" y="388" width="0.2447%" height="15" fill="rgb(209,103,24)" fg:x="4062" fg:w="235"/><text x="4.4805%" y="398.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (135 samples, 0.14%)</title><rect x="4.4794%" y="388" width="0.1406%" height="15" fill="rgb(229,88,8)" fg:x="4301" fg:w="135"/><text x="4.7294%" y="398.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (139 samples, 0.14%)</title><rect x="4.4794%" y="372" width="0.1448%" height="15" fill="rgb(213,181,19)" fg:x="4301" fg:w="139"/><text x="4.7294%" y="382.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:320) (399 samples, 0.42%)</title><rect x="4.2097%" y="340" width="0.4156%" height="15" fill="rgb(254,191,54)" fg:x="4042" fg:w="399"/><text x="4.4597%" y="350.50"></text></g><g><title>to_numpy (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (384 samples, 0.40%)</title><rect x="4.2253%" y="356" width="0.3999%" height="15" fill="rgb(241,83,37)" fg:x="4057" fg:w="384"/><text x="4.4753%" y="366.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (252 samples, 0.26%)</title><rect x="4.6606%" y="420" width="0.2625%" height="15" fill="rgb(233,36,39)" fg:x="4475" fg:w="252"/><text x="4.9106%" y="430.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (262 samples, 0.27%)</title><rect x="4.6606%" y="404" width="0.2729%" height="15" fill="rgb(226,3,54)" fg:x="4475" fg:w="262"/><text x="4.9106%" y="414.50"></text></g><g><title>_filter_table (pyarrow/acero.py:369) (275 samples, 0.29%)</title><rect x="4.6481%" y="372" width="0.2864%" height="15" fill="rgb(245,192,40)" fg:x="4463" fg:w="275"/><text x="4.8981%" y="382.50"></text></g><g><title>from_batches (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (275 samples, 0.29%)</title><rect x="4.6481%" y="388" width="0.2864%" height="15" fill="rgb(238,167,29)" fg:x="4463" fg:w="275"/><text x="4.8981%" y="398.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (465 samples, 0.48%)</title><rect x="4.9700%" y="484" width="0.4843%" height="15" fill="rgb(232,182,51)" fg:x="4772" fg:w="465"/><text x="5.2200%" y="494.50"></text></g><g><title>arrow::FutureImpl::Wait (pyarrow/libarrow.so.2000) (474 samples, 0.49%)</title><rect x="4.9668%" y="436" width="0.4937%" height="15" fill="rgb(231,60,39)" fg:x="4769" fg:w="474"/><text x="5.2168%" y="446.50"></text></g><g><title>std::condition_variable::wait (libstdc++.so.6.0.29) (472 samples, 0.49%)</title><rect x="4.9689%" y="452" width="0.4916%" height="15" fill="rgb(208,69,12)" fg:x="4771" fg:w="472"/><text x="5.2189%" y="462.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (libc.so.6) (472 samples, 0.49%)</title><rect x="4.9689%" y="468" width="0.4916%" height="15" fill="rgb(235,93,37)" fg:x="4771" fg:w="472"/><text x="5.2189%" y="478.50"></text></g><g><title>arrow::acero::(anonymous namespace)::DeclarationToTableImpl (pyarrow/libarrow_acero.so.2000) (145 samples, 0.15%)</title><rect x="5.4605%" y="452" width="0.1510%" height="15" fill="rgb(213,116,39)" fg:x="5243" fg:w="145"/><text x="5.7105%" y="462.50"></text></g><g><title>arrow::internal::FnOnce&lt;arrow::Future&lt;std::shared_ptr&lt;arrow::Table&gt; &gt;(arrow::internal::Executor*)&gt;::FnImpl&lt;arrow::acero::DeclarationToTable(arrow::acero::Declaration, bool, arrow::MemoryPool*, arrow::compute::FunctionRegistry*)::{lambda(arrow::internal::Executor*)#1}&gt;::invoke (pyarrow/libarrow_acero.so.2000) (147 samples, 0.15%)</title><rect x="5.4605%" y="436" width="0.1531%" height="15" fill="rgb(222,207,29)" fg:x="5243" fg:w="147"/><text x="5.7105%" y="446.50"></text></g><g><title>arrow::acero::DeclarationToTable (pyarrow/libarrow_acero.so.2000) (626 samples, 0.65%)</title><rect x="4.9627%" y="404" width="0.6520%" height="15" fill="rgb(206,96,30)" fg:x="4765" fg:w="626"/><text x="5.2127%" y="414.50"></text></g><g><title>arrow::internal::RunSynchronously&lt;arrow::Future&lt;std::shared_ptr&lt;arrow::Table&gt; &gt;, std::shared_ptr&lt;arrow::Table&gt; &gt; (pyarrow/libarrow_dataset.so.2000) (622 samples, 0.65%)</title><rect x="4.9668%" y="420" width="0.6478%" height="15" fill="rgb(218,138,4)" fg:x="4769" fg:w="622"/><text x="5.2168%" y="430.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (1,816 samples, 1.89%)</title><rect x="5.6209%" y="420" width="1.8913%" height="15" fill="rgb(250,191,14)" fg:x="5397" fg:w="1816"/><text x="5.8709%" y="430.50">_..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (1,844 samples, 1.92%)</title><rect x="5.6209%" y="404" width="1.9205%" height="15" fill="rgb(239,60,40)" fg:x="5397" fg:w="1844"/><text x="5.8709%" y="414.50">p..</text></g><g><title>_filter_table (pyarrow/acero.py:376) (2,494 samples, 2.60%)</title><rect x="4.9585%" y="372" width="2.5975%" height="15" fill="rgb(206,27,48)" fg:x="4761" fg:w="2494"/><text x="5.2085%" y="382.50">_f..</text></g><g><title>to_table (pyarrow/_acero.cpython-311-x86_64-linux-gnu.so) (2,494 samples, 2.60%)</title><rect x="4.9585%" y="388" width="2.5975%" height="15" fill="rgb(225,35,8)" fg:x="4761" fg:w="2494"/><text x="5.2085%" y="398.50">to..</text></g><g><title>combine_chunks (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (121 samples, 0.13%)</title><rect x="7.5601%" y="388" width="0.1260%" height="15" fill="rgb(250,213,24)" fg:x="7259" fg:w="121"/><text x="7.8101%" y="398.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (216 samples, 0.22%)</title><rect x="7.6893%" y="420" width="0.2250%" height="15" fill="rgb(247,123,22)" fg:x="7383" fg:w="216"/><text x="7.9393%" y="430.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (223 samples, 0.23%)</title><rect x="7.6893%" y="404" width="0.2323%" height="15" fill="rgb(231,138,38)" fg:x="7383" fg:w="223"/><text x="7.9393%" y="414.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:321) (3,166 samples, 3.30%)</title><rect x="4.6252%" y="340" width="3.2973%" height="15" fill="rgb(231,145,46)" fg:x="4441" fg:w="3166"/><text x="4.8752%" y="350.50">rea..</text></g><g><title>filter (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (3,152 samples, 3.28%)</title><rect x="4.6398%" y="356" width="3.2828%" height="15" fill="rgb(251,118,11)" fg:x="4455" fg:w="3152"/><text x="4.8898%" y="366.50">fil..</text></g><g><title>_filter_table (pyarrow/acero.py:378) (352 samples, 0.37%)</title><rect x="7.5560%" y="372" width="0.3666%" height="15" fill="rgb(217,147,25)" fg:x="7255" fg:w="352"/><text x="7.8060%" y="382.50"></text></g><g><title>to_batches (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (227 samples, 0.24%)</title><rect x="7.6861%" y="388" width="0.2364%" height="15" fill="rgb(247,81,37)" fg:x="7380" fg:w="227"/><text x="7.9361%" y="398.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:324) (134 samples, 0.14%)</title><rect x="7.9528%" y="340" width="0.1396%" height="15" fill="rgb(209,12,38)" fg:x="7636" fg:w="134"/><text x="8.2028%" y="350.50"></text></g><g><title>array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (133 samples, 0.14%)</title><rect x="7.9538%" y="356" width="0.1385%" height="15" fill="rgb(227,1,9)" fg:x="7637" fg:w="133"/><text x="8.2038%" y="366.50"></text></g><g><title>lib__sequence_to_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (123 samples, 0.13%)</title><rect x="7.9642%" y="372" width="0.1281%" height="15" fill="rgb(248,47,43)" fg:x="7647" fg:w="123"/><text x="8.2142%" y="382.50"></text></g><g><title>PyThread_acquire_lock_timed (libpython3.11.so.1.0) (164 samples, 0.17%)</title><rect x="8.1756%" y="468" width="0.1708%" height="15" fill="rgb(221,10,30)" fg:x="7850" fg:w="164"/><text x="8.4256%" y="478.50"></text></g><g><title>__new_sem_wait_slow64.constprop.0 (libc.so.6) (164 samples, 0.17%)</title><rect x="8.1756%" y="484" width="0.1708%" height="15" fill="rgb(210,229,1)" fg:x="7850" fg:w="164"/><text x="8.4256%" y="494.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (164 samples, 0.17%)</title><rect x="8.1756%" y="500" width="0.1708%" height="15" fill="rgb(222,148,37)" fg:x="7850" fg:w="164"/><text x="8.4256%" y="510.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (195 samples, 0.20%)</title><rect x="8.3464%" y="484" width="0.2031%" height="15" fill="rgb(234,67,33)" fg:x="8014" fg:w="195"/><text x="8.5964%" y="494.50"></text></g><g><title>handle (logging/__init__.py:976) (363 samples, 0.38%)</title><rect x="8.1746%" y="436" width="0.3781%" height="15" fill="rgb(247,98,35)" fg:x="7849" fg:w="363"/><text x="8.4246%" y="446.50"></text></g><g><title>acquire (logging/__init__.py:927) (362 samples, 0.38%)</title><rect x="8.1756%" y="452" width="0.3770%" height="15" fill="rgb(247,138,52)" fg:x="7850" fg:w="362"/><text x="8.4256%" y="462.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (198 samples, 0.21%)</title><rect x="8.3464%" y="468" width="0.2062%" height="15" fill="rgb(213,79,30)" fg:x="8014" fg:w="198"/><text x="8.5964%" y="478.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (329 samples, 0.34%)</title><rect x="8.5787%" y="484" width="0.3426%" height="15" fill="rgb(246,177,23)" fg:x="8237" fg:w="329"/><text x="8.8287%" y="494.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (337 samples, 0.35%)</title><rect x="8.5787%" y="468" width="0.3510%" height="15" fill="rgb(230,62,27)" fg:x="8237" fg:w="337"/><text x="8.8287%" y="478.50"></text></g><g><title>emit (logging/__init__.py:1113) (359 samples, 0.37%)</title><rect x="8.5683%" y="452" width="0.3739%" height="15" fill="rgb(216,154,8)" fg:x="8227" fg:w="359"/><text x="8.8183%" y="462.50"></text></g><g><title>callHandlers (logging/__init__.py:1706) (738 samples, 0.77%)</title><rect x="8.1746%" y="420" width="0.7686%" height="15" fill="rgb(244,35,45)" fg:x="7849" fg:w="738"/><text x="8.4246%" y="430.50"></text></g><g><title>handle (logging/__init__.py:978) (375 samples, 0.39%)</title><rect x="8.5527%" y="436" width="0.3906%" height="15" fill="rgb(251,115,12)" fg:x="8212" fg:w="375"/><text x="8.8027%" y="446.50"></text></g><g><title>push (arrakis/mux.py:138) (765 samples, 0.80%)</title><rect x="8.1475%" y="356" width="0.7967%" height="15" fill="rgb(240,54,50)" fg:x="7823" fg:w="765"/><text x="8.3975%" y="366.50"></text></g><g><title>warning (logging/__init__.py:1501) (765 samples, 0.80%)</title><rect x="8.1475%" y="372" width="0.7967%" height="15" fill="rgb(233,84,52)" fg:x="7823" fg:w="765"/><text x="8.3975%" y="382.50"></text></g><g><title>_log (logging/__init__.py:1634) (744 samples, 0.77%)</title><rect x="8.1694%" y="388" width="0.7749%" height="15" fill="rgb(207,117,47)" fg:x="7844" fg:w="744"/><text x="8.4194%" y="398.50"></text></g><g><title>handle (logging/__init__.py:1644) (744 samples, 0.77%)</title><rect x="8.1694%" y="404" width="0.7749%" height="15" fill="rgb(249,43,39)" fg:x="7844" fg:w="744"/><text x="8.4194%" y="414.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:327) (821 samples, 0.86%)</title><rect x="8.0923%" y="340" width="0.8551%" height="15" fill="rgb(209,38,44)" fg:x="7770" fg:w="821"/><text x="8.3423%" y="350.50"></text></g><g><title>handle (logging/__init__.py:976) (180 samples, 0.19%)</title><rect x="8.9755%" y="436" width="0.1875%" height="15" fill="rgb(236,212,23)" fg:x="8618" fg:w="180"/><text x="9.2255%" y="446.50"></text></g><g><title>acquire (logging/__init__.py:927) (180 samples, 0.19%)</title><rect x="8.9755%" y="452" width="0.1875%" height="15" fill="rgb(242,79,21)" fg:x="8618" fg:w="180"/><text x="9.2255%" y="462.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (154 samples, 0.16%)</title><rect x="9.1734%" y="484" width="0.1604%" height="15" fill="rgb(211,96,35)" fg:x="8808" fg:w="154"/><text x="9.4234%" y="494.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (159 samples, 0.17%)</title><rect x="9.1734%" y="468" width="0.1656%" height="15" fill="rgb(253,215,40)" fg:x="8808" fg:w="159"/><text x="9.4234%" y="478.50"></text></g><g><title>handle (logging/__init__.py:978) (173 samples, 0.18%)</title><rect x="9.1630%" y="436" width="0.1802%" height="15" fill="rgb(211,81,21)" fg:x="8798" fg:w="173"/><text x="9.4130%" y="446.50"></text></g><g><title>emit (logging/__init__.py:1113) (166 samples, 0.17%)</title><rect x="9.1703%" y="452" width="0.1729%" height="15" fill="rgb(208,190,38)" fg:x="8805" fg:w="166"/><text x="9.4203%" y="462.50"></text></g><g><title>pull (arrakis/mux.py:166) (367 samples, 0.38%)</title><rect x="8.9620%" y="356" width="0.3822%" height="15" fill="rgb(235,213,38)" fg:x="8605" fg:w="367"/><text x="9.2120%" y="366.50"></text></g><g><title>debug (logging/__init__.py:1477) (367 samples, 0.38%)</title><rect x="8.9620%" y="372" width="0.3822%" height="15" fill="rgb(237,122,38)" fg:x="8605" fg:w="367"/><text x="9.2120%" y="382.50"></text></g><g><title>_log (logging/__init__.py:1634) (356 samples, 0.37%)</title><rect x="8.9734%" y="388" width="0.3708%" height="15" fill="rgb(244,218,35)" fg:x="8616" fg:w="356"/><text x="9.2234%" y="398.50"></text></g><g><title>handle (logging/__init__.py:1644) (356 samples, 0.37%)</title><rect x="8.9734%" y="404" width="0.3708%" height="15" fill="rgb(240,68,47)" fg:x="8616" fg:w="356"/><text x="9.2234%" y="414.50"></text></g><g><title>callHandlers (logging/__init__.py:1706) (354 samples, 0.37%)</title><rect x="8.9755%" y="420" width="0.3687%" height="15" fill="rgb(210,16,53)" fg:x="8618" fg:w="354"/><text x="9.2255%" y="430.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:330) (386 samples, 0.40%)</title><rect x="8.9474%" y="340" width="0.4020%" height="15" fill="rgb(235,124,12)" fg:x="8591" fg:w="386"/><text x="9.1974%" y="350.50"></text></g><g><title>from_row_batch (arrakis/block.py:403) (118 samples, 0.12%)</title><rect x="9.3567%" y="372" width="0.1229%" height="15" fill="rgb(224,169,11)" fg:x="8984" fg:w="118"/><text x="9.6067%" y="382.50"></text></g><g><title>to_numpy (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (114 samples, 0.12%)</title><rect x="9.3608%" y="388" width="0.1187%" height="15" fill="rgb(250,166,2)" fg:x="8988" fg:w="114"/><text x="9.6108%" y="398.50"></text></g><g><title>arrow::py::ConvertArrayToPandas (pyarrow/libarrow_python.so.2000) (240 samples, 0.25%)</title><rect x="9.5035%" y="420" width="0.2500%" height="15" fill="rgb(242,216,29)" fg:x="9125" fg:w="240"/><text x="9.7535%" y="430.50"></text></g><g><title>arrow::py::ConvertChunkedArrayToPandas (pyarrow/libarrow_python.so.2000) (239 samples, 0.25%)</title><rect x="9.5046%" y="436" width="0.2489%" height="15" fill="rgb(230,116,27)" fg:x="9126" fg:w="239"/><text x="9.7546%" y="446.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (104 samples, 0.11%)</title><rect x="9.7556%" y="436" width="0.1083%" height="15" fill="rgb(228,99,48)" fg:x="9367" fg:w="104"/><text x="10.0056%" y="446.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (108 samples, 0.11%)</title><rect x="9.7556%" y="420" width="0.1125%" height="15" fill="rgb(253,11,6)" fg:x="9367" fg:w="108"/><text x="10.0056%" y="430.50"></text></g><g><title>_arrow_to_numpy_array (arrakis/block.py:512) (353 samples, 0.37%)</title><rect x="9.5014%" y="388" width="0.3676%" height="15" fill="rgb(247,143,39)" fg:x="9123" fg:w="353"/><text x="9.7514%" y="398.50"></text></g><g><title>to_numpy (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (353 samples, 0.37%)</title><rect x="9.5014%" y="404" width="0.3676%" height="15" fill="rgb(236,97,10)" fg:x="9123" fg:w="353"/><text x="9.7514%" y="414.50"></text></g><g><title>Array__assert_cpu (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (184 samples, 0.19%)</title><rect x="12.0947%" y="532" width="0.1916%" height="15" fill="rgb(233,208,19)" fg:x="11613" fg:w="184"/><text x="12.3447%" y="542.50"></text></g><g><title>arrow::ArrayData::device_type (pyarrow/libarrow.so.2000) (158 samples, 0.16%)</title><rect x="12.1218%" y="548" width="0.1646%" height="15" fill="rgb(216,164,2)" fg:x="11639" fg:w="158"/><text x="12.3718%" y="558.50"></text></g><g><title>Array__assert_cpu (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (171 samples, 0.18%)</title><rect x="12.6707%" y="548" width="0.1781%" height="15" fill="rgb(220,129,5)" fg:x="12166" fg:w="171"/><text x="12.9207%" y="558.50"></text></g><g><title>Scalar_init (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (127 samples, 0.13%)</title><rect x="14.5099%" y="564" width="0.1323%" height="15" fill="rgb(242,17,10)" fg:x="13932" fg:w="127"/><text x="14.7599%" y="574.50"></text></g><g><title>__pyx_tp_new_7pyarrow_3lib_DoubleScalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (236 samples, 0.25%)</title><rect x="14.7557%" y="564" width="0.2458%" height="15" fill="rgb(242,107,0)" fg:x="14168" fg:w="236"/><text x="15.0057%" y="574.50"></text></g><g><title>__pyx_tp_new_7pyarrow_3lib_FloatScalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (164 samples, 0.17%)</title><rect x="15.0015%" y="564" width="0.1708%" height="15" fill="rgb(251,28,31)" fg:x="14404" fg:w="164"/><text x="15.2515%" y="574.50"></text></g><g><title>lib_get_scalar_class_from_type (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (344 samples, 0.36%)</title><rect x="15.1723%" y="564" width="0.3583%" height="15" fill="rgb(233,223,10)" fg:x="14568" fg:w="344"/><text x="15.4223%" y="574.50"></text></g><g><title>__Pyx_PyDict_GetItem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (259 samples, 0.27%)</title><rect x="15.2608%" y="580" width="0.2697%" height="15" fill="rgb(215,21,27)" fg:x="14653" fg:w="259"/><text x="15.5108%" y="590.50"></text></g><g><title>Scalar_wrap (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (2,628 samples, 2.74%)</title><rect x="12.8488%" y="548" width="2.7370%" height="15" fill="rgb(232,23,21)" fg:x="12337" fg:w="2628"/><text x="13.0988%" y="558.50">Sc..</text></g><g><title>std::__shared_ptr&lt;arrow::DoubleScalar, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, double, std::shared_ptr&lt;arrow::DataType&gt; &gt; (pyarrow/libarrow_substrait.so.2000) (281 samples, 0.29%)</title><rect x="16.4513%" y="628" width="0.2927%" height="15" fill="rgb(244,5,23)" fg:x="15796" fg:w="281"/><text x="16.7013%" y="638.50"></text></g><g><title>operator new (libstdc++.so.6.0.29) (188 samples, 0.20%)</title><rect x="16.5481%" y="644" width="0.1958%" height="15" fill="rgb(226,81,46)" fg:x="15889" fg:w="188"/><text x="16.7981%" y="654.50"></text></g><g><title>malloc (libc.so.6) (141 samples, 0.15%)</title><rect x="16.5971%" y="660" width="0.1468%" height="15" fill="rgb(247,70,30)" fg:x="15936" fg:w="141"/><text x="16.8471%" y="670.50"></text></g><g><title>arrow::MakeScalar&lt;double&gt; (pyarrow/libarrow.so.2000) (561 samples, 0.58%)</title><rect x="16.2534%" y="596" width="0.5843%" height="15" fill="rgb(212,68,19)" fg:x="15606" fg:w="561"/><text x="16.5034%" y="606.50"></text></g><g><title>arrow::VisitTypeInline&lt;arrow::MakeScalarImpl&lt;double&amp;&amp;&gt;, &gt; (pyarrow/libarrow.so.2000) (459 samples, 0.48%)</title><rect x="16.3596%" y="612" width="0.4780%" height="15" fill="rgb(240,187,13)" fg:x="15708" fg:w="459"/><text x="16.6096%" y="622.50"></text></g><g><title>arrow::MakeScalar&lt;float&gt; (pyarrow/libarrow.so.2000) (432 samples, 0.45%)</title><rect x="16.8376%" y="596" width="0.4499%" height="15" fill="rgb(223,113,26)" fg:x="16167" fg:w="432"/><text x="17.0876%" y="606.50"></text></g><g><title>arrow::VisitTypeInline&lt;arrow::MakeScalarImpl&lt;float&amp;&amp;&gt;, &gt; (pyarrow/libarrow.so.2000) (337 samples, 0.35%)</title><rect x="16.9366%" y="612" width="0.3510%" height="15" fill="rgb(206,192,2)" fg:x="16262" fg:w="337"/><text x="17.1866%" y="622.50"></text></g><g><title>std::__shared_ptr&lt;arrow::FloatScalar, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, float, std::shared_ptr&lt;arrow::DataType&gt; &gt; (pyarrow/libarrow_substrait.so.2000) (172 samples, 0.18%)</title><rect x="17.1084%" y="628" width="0.1791%" height="15" fill="rgb(241,108,4)" fg:x="16427" fg:w="172"/><text x="17.3584%" y="638.50"></text></g><g><title>operator new (libstdc++.so.6.0.29) (106 samples, 0.11%)</title><rect x="17.1772%" y="644" width="0.1104%" height="15" fill="rgb(247,173,49)" fg:x="16493" fg:w="106"/><text x="17.4272%" y="654.50"></text></g><g><title>malloc (libc.so.6) (97 samples, 0.10%)</title><rect x="17.1865%" y="660" width="0.1010%" height="15" fill="rgb(224,114,35)" fg:x="16502" fg:w="97"/><text x="17.4365%" y="670.50"></text></g><g><title>arrow::Result&lt;std::shared_ptr&lt;arrow::Scalar&gt; &gt;::Value&lt;std::shared_ptr&lt;arrow::Scalar&gt;, void&gt; &amp;&amp; (pyarrow/libarrow.so.2000) (167 samples, 0.17%)</title><rect x="17.3188%" y="596" width="0.1739%" height="15" fill="rgb(245,159,27)" fg:x="16629" fg:w="167"/><text x="17.5688%" y="606.50"></text></g><g><title>Array_getitem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (5,096 samples, 5.31%)</title><rect x="12.2864%" y="532" width="5.3074%" height="15" fill="rgb(245,172,44)" fg:x="11797" fg:w="5096"/><text x="12.5364%" y="542.50">Array_..</text></g><g><title>arrow::Array::GetScalar (pyarrow/libarrow.so.2000) (1,928 samples, 2.01%)</title><rect x="15.5858%" y="548" width="2.0080%" height="15" fill="rgb(236,23,11)" fg:x="14965" fg:w="1928"/><text x="15.8358%" y="558.50">a..</text></g><g><title>arrow::internal::ScalarFromArraySlotImpl::Finish &amp;&amp; (pyarrow/libarrow.so.2000) (1,867 samples, 1.94%)</title><rect x="15.6493%" y="564" width="1.9444%" height="15" fill="rgb(205,117,38)" fg:x="15026" fg:w="1867"/><text x="15.8993%" y="574.50">a..</text></g><g><title>arrow::VisitArrayInline&lt;arrow::internal::ScalarFromArraySlotImpl, &gt; (pyarrow/libarrow.so.2000) (1,559 samples, 1.62%)</title><rect x="15.9701%" y="580" width="1.6237%" height="15" fill="rgb(237,72,25)" fg:x="15334" fg:w="1559"/><text x="16.2201%" y="590.50"></text></g><g><title>__Pyx_GetItemInt_Fast (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (6,053 samples, 6.30%)</title><rect x="11.3334%" y="500" width="6.3041%" height="15" fill="rgb(244,70,9)" fg:x="10882" fg:w="6053"/><text x="11.5834%" y="510.50">__Pyx_Ge..</text></g><g><title>__getitem__ (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (5,423 samples, 5.65%)</title><rect x="11.9895%" y="516" width="5.6480%" height="15" fill="rgb(217,125,39)" fg:x="11512" fg:w="5423"/><text x="12.2395%" y="526.50">__getit..</text></g><g><title>__Pyx_PyDict_GetItem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (169 samples, 0.18%)</title><rect x="24.2155%" y="596" width="0.1760%" height="15" fill="rgb(235,36,10)" fg:x="23251" fg:w="169"/><text x="24.4655%" y="606.50"></text></g><g><title>__memmove_avx_unaligned_erms (libc.so.6) (181 samples, 0.19%)</title><rect x="24.3915%" y="596" width="0.1885%" height="15" fill="rgb(251,123,47)" fg:x="23420" fg:w="181"/><text x="24.6415%" y="606.50"></text></g><g><title>DataType_init (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (4,446 samples, 4.63%)</title><rect x="19.9881%" y="580" width="4.6304%" height="15" fill="rgb(221,13,13)" fg:x="19192" fg:w="4446"/><text x="20.2381%" y="590.50">DataT..</text></g><g><title>Array_init (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (5,124 samples, 5.34%)</title><rect x="19.6371%" y="548" width="5.3366%" height="15" fill="rgb(238,131,9)" fg:x="18855" fg:w="5124"/><text x="19.8871%" y="558.50">Array_i..</text></g><g><title>pyarrow_wrap_data_type (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (4,936 samples, 5.14%)</title><rect x="19.8329%" y="564" width="5.1408%" height="15" fill="rgb(211,50,8)" fg:x="19043" fg:w="4936"/><text x="20.0829%" y="574.50">pyarro..</text></g><g><title>__pyx_tp_new_7pyarrow_3lib_DataType (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (341 samples, 0.36%)</title><rect x="24.6186%" y="580" width="0.3551%" height="15" fill="rgb(245,182,24)" fg:x="23638" fg:w="341"/><text x="24.8686%" y="590.50"></text></g><g><title>__Pyx_PyDict_GetItem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (246 samples, 0.26%)</title><rect x="24.9737%" y="548" width="0.2562%" height="15" fill="rgb(242,14,37)" fg:x="23979" fg:w="246"/><text x="25.2237%" y="558.50"></text></g><g><title>__pyx_tp_new_7pyarrow_3lib_DoubleArray (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (263 samples, 0.27%)</title><rect x="25.3632%" y="548" width="0.2739%" height="15" fill="rgb(246,228,12)" fg:x="24353" fg:w="263"/><text x="25.6132%" y="558.50"></text></g><g><title>__pyx_getprop_7pyarrow_3lib_10ListScalar_values (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (7,121 samples, 7.42%)</title><rect x="18.4405%" y="516" width="7.4164%" height="15" fill="rgb(213,55,15)" fg:x="17706" fg:w="7121"/><text x="18.6905%" y="526.50">__pyx_getp..</text></g><g><title>pyarrow_wrap_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (7,113 samples, 7.41%)</title><rect x="18.4488%" y="532" width="7.4081%" height="15" fill="rgb(209,9,3)" fg:x="17714" fg:w="7113"/><text x="18.6988%" y="542.50">pyarrow_wr..</text></g><g><title>__pyx_tp_new_7pyarrow_3lib_FloatArray (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (211 samples, 0.22%)</title><rect x="25.6371%" y="548" width="0.2198%" height="15" fill="rgb(230,59,30)" fg:x="24616" fg:w="211"/><text x="25.8871%" y="558.50"></text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_DataType (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (145 samples, 0.15%)</title><rect x="26.2693%" y="532" width="0.1510%" height="15" fill="rgb(209,121,21)" fg:x="25223" fg:w="145"/><text x="26.5193%" y="542.50"></text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_Array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (580 samples, 0.60%)</title><rect x="25.8569%" y="516" width="0.6041%" height="15" fill="rgb(220,109,13)" fg:x="24827" fg:w="580"/><text x="26.1069%" y="526.50"></text></g><g><title>__len__ (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (8,496 samples, 8.85%)</title><rect x="17.6375%" y="500" width="8.8484%" height="15" fill="rgb(232,18,1)" fg:x="16935" fg:w="8496"/><text x="17.8875%" y="510.50">__len__ (pya..</text></g><g><title>__Pyx_PyDict_GetItem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (260 samples, 0.27%)</title><rect x="33.4149%" y="580" width="0.2708%" height="15" fill="rgb(215,41,42)" fg:x="32084" fg:w="260"/><text x="33.6649%" y="590.50"></text></g><g><title>__memmove_avx_unaligned_erms (libc.so.6) (182 samples, 0.19%)</title><rect x="33.6857%" y="580" width="0.1895%" height="15" fill="rgb(224,123,36)" fg:x="32344" fg:w="182"/><text x="33.9357%" y="590.50"></text></g><g><title>DataType_init (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (5,521 samples, 5.75%)</title><rect x="28.2054%" y="564" width="5.7500%" height="15" fill="rgb(240,125,3)" fg:x="27082" fg:w="5521"/><text x="28.4554%" y="574.50">DataTyp..</text></g><g><title>Array_init (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (6,365 samples, 6.63%)</title><rect x="27.7888%" y="532" width="6.6290%" height="15" fill="rgb(205,98,50)" fg:x="26682" fg:w="6365"/><text x="28.0388%" y="542.50">Array_ini..</text></g><g><title>pyarrow_wrap_data_type (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (6,131 samples, 6.39%)</title><rect x="28.0325%" y="548" width="6.3853%" height="15" fill="rgb(205,185,37)" fg:x="26916" fg:w="6131"/><text x="28.2825%" y="558.50">pyarrow_..</text></g><g><title>__pyx_tp_new_7pyarrow_3lib_DataType (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (444 samples, 0.46%)</title><rect x="33.9554%" y="564" width="0.4624%" height="15" fill="rgb(238,207,15)" fg:x="32603" fg:w="444"/><text x="34.2054%" y="574.50"></text></g><g><title>__Pyx_PyDict_GetItem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (307 samples, 0.32%)</title><rect x="34.4179%" y="532" width="0.3197%" height="15" fill="rgb(213,199,42)" fg:x="33047" fg:w="307"/><text x="34.6679%" y="542.50"></text></g><g><title>__pyx_tp_new_7pyarrow_3lib_DoubleArray (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (244 samples, 0.25%)</title><rect x="34.8303%" y="532" width="0.2541%" height="15" fill="rgb(235,201,11)" fg:x="33443" fg:w="244"/><text x="35.0803%" y="542.50"></text></g><g><title>__pyx_getprop_7pyarrow_3lib_10ListScalar_values (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (8,446 samples, 8.80%)</title><rect x="26.4859%" y="500" width="8.7964%" height="15" fill="rgb(207,46,11)" fg:x="25431" fg:w="8446"/><text x="26.7359%" y="510.50">__pyx_getpro..</text></g><g><title>pyarrow_wrap_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (8,427 samples, 8.78%)</title><rect x="26.5057%" y="516" width="8.7766%" height="15" fill="rgb(241,35,35)" fg:x="25450" fg:w="8427"/><text x="26.7557%" y="526.50">pyarrow_wrap..</text></g><g><title>__pyx_tp_new_7pyarrow_3lib_FloatArray (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (190 samples, 0.20%)</title><rect x="35.0844%" y="532" width="0.1979%" height="15" fill="rgb(243,32,47)" fg:x="33687" fg:w="190"/><text x="35.3344%" y="542.50"></text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_DataType (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (159 samples, 0.17%)</title><rect x="35.6728%" y="516" width="0.1656%" height="15" fill="rgb(247,202,23)" fg:x="34252" fg:w="159"/><text x="35.9228%" y="526.50"></text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_Array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (552 samples, 0.57%)</title><rect x="35.2823%" y="500" width="0.5749%" height="15" fill="rgb(219,102,11)" fg:x="33877" fg:w="552"/><text x="35.5323%" y="510.50"></text></g><g><title>__pyx_sq_item_7pyarrow_3lib_StructType (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (24,733 samples, 25.76%)</title><rect x="10.1461%" y="468" width="25.7590%" height="15" fill="rgb(243,110,44)" fg:x="9742" fg:w="24733"/><text x="10.3961%" y="478.50">__pyx_sq_item_7pyarrow_3lib_StructType (p..</text></g><g><title>__getitem__ (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (24,424 samples, 25.44%)</title><rect x="10.4679%" y="484" width="25.4372%" height="15" fill="rgb(222,74,54)" fg:x="10051" fg:w="24424"/><text x="10.7179%" y="494.50">__getitem__ (pyarrow/lib.cpython-311-x86_..</text></g><g><title>arrow::ArrayBuilder::UnsafeAppendToBitmap (pyarrow/libarrow_python.so.2000) (147 samples, 0.15%)</title><rect x="36.3498%" y="516" width="0.1531%" height="15" fill="rgb(216,99,12)" fg:x="34902" fg:w="147"/><text x="36.5998%" y="526.50"></text></g><g><title>arrow::VisitTypeInline&lt;arrow::(anonymous namespace)::AppendScalarImpl&lt;arrow::Scalar const*&gt;, &gt; (pyarrow/libarrow.so.2000) (336 samples, 0.35%)</title><rect x="36.2446%" y="500" width="0.3499%" height="15" fill="rgb(226,22,26)" fg:x="34801" fg:w="336"/><text x="36.4946%" y="510.50"></text></g><g><title>arrow::ArrayBuilder::AppendScalar (pyarrow/libarrow.so.2000) (507 samples, 0.53%)</title><rect x="36.1467%" y="484" width="0.5280%" height="15" fill="rgb(217,163,10)" fg:x="34707" fg:w="507"/><text x="36.3967%" y="494.50"></text></g><g><title>arrow::py::unwrap_scalar (pyarrow/libarrow_python.so.2000) (261 samples, 0.27%)</title><rect x="36.7883%" y="484" width="0.2718%" height="15" fill="rgb(213,25,53)" fg:x="35323" fg:w="261"/><text x="37.0383%" y="494.50"></text></g><g><title>pyarrow_unwrap_scalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (239 samples, 0.25%)</title><rect x="36.8112%" y="500" width="0.2489%" height="15" fill="rgb(252,105,26)" fg:x="35345" fg:w="239"/><text x="37.0612%" y="510.50"></text></g><g><title>arrow::py::(anonymous namespace)::PyPrimitiveConverter&lt;arrow::DoubleType, void&gt;::Append (pyarrow/libarrow_python.so.2000) (1,069 samples, 1.11%)</title><rect x="35.9968%" y="468" width="1.1133%" height="15" fill="rgb(220,39,43)" fg:x="34563" fg:w="1069"/><text x="36.2468%" y="478.50"></text></g><g><title>arrow::VisitTypeInline&lt;arrow::(anonymous namespace)::AppendScalarImpl&lt;arrow::Scalar const*&gt;, &gt; (pyarrow/libarrow.so.2000) (244 samples, 0.25%)</title><rect x="37.3038%" y="500" width="0.2541%" height="15" fill="rgb(229,68,48)" fg:x="35818" fg:w="244"/><text x="37.5538%" y="510.50"></text></g><g><title>arrow::ArrayBuilder::AppendScalar (pyarrow/libarrow.so.2000) (405 samples, 0.42%)</title><rect x="37.2153%" y="484" width="0.4218%" height="15" fill="rgb(252,8,32)" fg:x="35733" fg:w="405"/><text x="37.4653%" y="494.50"></text></g><g><title>arrow::py::unwrap_scalar (pyarrow/libarrow_python.so.2000) (207 samples, 0.22%)</title><rect x="37.7329%" y="484" width="0.2156%" height="15" fill="rgb(223,20,43)" fg:x="36230" fg:w="207"/><text x="37.9829%" y="494.50"></text></g><g><title>pyarrow_unwrap_scalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (186 samples, 0.19%)</title><rect x="37.7548%" y="500" width="0.1937%" height="15" fill="rgb(229,81,49)" fg:x="36251" fg:w="186"/><text x="38.0048%" y="510.50"></text></g><g><title>arrow::py::(anonymous namespace)::PyPrimitiveConverter&lt;arrow::FloatType, void&gt;::Append (pyarrow/libarrow_python.so.2000) (854 samples, 0.89%)</title><rect x="37.1101%" y="468" width="0.8894%" height="15" fill="rgb(236,28,36)" fg:x="35632" fg:w="854"/><text x="37.3601%" y="478.50"></text></g><g><title>free (libc.so.6) (269 samples, 0.28%)</title><rect x="38.5390%" y="500" width="0.2802%" height="15" fill="rgb(249,185,26)" fg:x="37004" fg:w="269"/><text x="38.7890%" y="510.50"></text></g><g><title>_int_free (libc.so.6) (149 samples, 0.16%)</title><rect x="38.6640%" y="516" width="0.1552%" height="15" fill="rgb(249,174,33)" fg:x="37124" fg:w="149"/><text x="38.9140%" y="526.50"></text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_Scalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (781 samples, 0.81%)</title><rect x="38.4109%" y="484" width="0.8134%" height="15" fill="rgb(233,201,37)" fg:x="36881" fg:w="781"/><text x="38.6609%" y="494.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (348 samples, 0.36%)</title><rect x="38.8619%" y="500" width="0.3624%" height="15" fill="rgb(221,78,26)" fg:x="37314" fg:w="348"/><text x="39.1119%" y="510.50"></text></g><g><title>arrow::py::(anonymous namespace)::PyConverter::Extend (pyarrow/libarrow_python.so.2000) (28,195 samples, 29.36%)</title><rect x="9.9107%" y="436" width="29.3646%" height="15" fill="rgb(250,127,30)" fg:x="9516" fg:w="28195"/><text x="10.1607%" y="446.50">arrow::py::(anonymous namespace)::PyConverter::..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::py::internal::VisitSequence&lt;arrow::py::(anonymous namespace)::PyConverter::Extend(_object*, long, long)::{lambda(_object*, bool*)#1}&gt;(_object*, long, arrow::py::(anonymous namespace)::PyConverter::Extend(_object*, long, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (pyarrow/libarrow_python.so.2000) (28,170 samples, 29.34%)</title><rect x="9.9368%" y="452" width="29.3386%" height="15" fill="rgb(230,49,44)" fg:x="9541" fg:w="28170"/><text x="10.1868%" y="462.50">arrow::py::internal::VisitSequenceGeneric&lt;arrow..</text></g><g><title>arrow::py::OwnedRef::~OwnedRef (pyarrow/libarrow_python.so.2000) (1,144 samples, 1.19%)</title><rect x="38.0839%" y="468" width="1.1915%" height="15" fill="rgb(229,67,23)" fg:x="36567" fg:w="1144"/><text x="38.3339%" y="478.50"></text></g><g><title>Array__assert_cpu (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (229 samples, 0.24%)</title><rect x="41.7249%" y="532" width="0.2385%" height="15" fill="rgb(249,83,47)" fg:x="40063" fg:w="229"/><text x="41.9749%" y="542.50"></text></g><g><title>arrow::ArrayData::device_type (pyarrow/libarrow.so.2000) (181 samples, 0.19%)</title><rect x="41.7749%" y="548" width="0.1885%" height="15" fill="rgb(215,43,3)" fg:x="40111" fg:w="181"/><text x="42.0249%" y="558.50"></text></g><g><title>Array__assert_cpu (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (178 samples, 0.19%)</title><rect x="42.3394%" y="548" width="0.1854%" height="15" fill="rgb(238,154,13)" fg:x="40653" fg:w="178"/><text x="42.5894%" y="558.50"></text></g><g><title>Scalar_init (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (138 samples, 0.14%)</title><rect x="44.4380%" y="564" width="0.1437%" height="15" fill="rgb(219,56,2)" fg:x="42668" fg:w="138"/><text x="44.6880%" y="574.50"></text></g><g><title>__pyx_tp_new_7pyarrow_3lib_DoubleScalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (248 samples, 0.26%)</title><rect x="44.7254%" y="564" width="0.2583%" height="15" fill="rgb(233,0,4)" fg:x="42944" fg:w="248"/><text x="44.9754%" y="574.50"></text></g><g><title>__pyx_tp_new_7pyarrow_3lib_FloatScalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (200 samples, 0.21%)</title><rect x="44.9837%" y="564" width="0.2083%" height="15" fill="rgb(235,30,7)" fg:x="43192" fg:w="200"/><text x="45.2337%" y="574.50"></text></g><g><title>lib_get_scalar_class_from_type (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (405 samples, 0.42%)</title><rect x="45.1920%" y="564" width="0.4218%" height="15" fill="rgb(250,79,13)" fg:x="43392" fg:w="405"/><text x="45.4420%" y="574.50"></text></g><g><title>__Pyx_PyDict_GetItem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (323 samples, 0.34%)</title><rect x="45.2774%" y="580" width="0.3364%" height="15" fill="rgb(211,146,34)" fg:x="43474" fg:w="323"/><text x="45.5274%" y="590.50"></text></g><g><title>Scalar_wrap (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (3,047 samples, 3.17%)</title><rect x="42.5248%" y="548" width="3.1734%" height="15" fill="rgb(228,22,38)" fg:x="40831" fg:w="3047"/><text x="42.7748%" y="558.50">Sca..</text></g><g><title>std::__shared_ptr&lt;arrow::DoubleScalar, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, double, std::shared_ptr&lt;arrow::DataType&gt; &gt; (pyarrow/libarrow_substrait.so.2000) (341 samples, 0.36%)</title><rect x="46.7240%" y="628" width="0.3551%" height="15" fill="rgb(235,168,5)" fg:x="44863" fg:w="341"/><text x="46.9740%" y="638.50"></text></g><g><title>operator new (libstdc++.so.6.0.29) (211 samples, 0.22%)</title><rect x="46.8594%" y="644" width="0.2198%" height="15" fill="rgb(221,155,16)" fg:x="44993" fg:w="211"/><text x="47.1094%" y="654.50"></text></g><g><title>malloc (libc.so.6) (189 samples, 0.20%)</title><rect x="46.8823%" y="660" width="0.1968%" height="15" fill="rgb(215,215,53)" fg:x="45015" fg:w="189"/><text x="47.1323%" y="670.50"></text></g><g><title>arrow::MakeScalar&lt;double&gt; (pyarrow/libarrow.so.2000) (645 samples, 0.67%)</title><rect x="46.4855%" y="596" width="0.6718%" height="15" fill="rgb(223,4,10)" fg:x="44634" fg:w="645"/><text x="46.7355%" y="606.50"></text></g><g><title>arrow::VisitTypeInline&lt;arrow::MakeScalarImpl&lt;double&amp;&amp;&gt;, &gt; (pyarrow/libarrow.so.2000) (525 samples, 0.55%)</title><rect x="46.6105%" y="612" width="0.5468%" height="15" fill="rgb(234,103,6)" fg:x="44754" fg:w="525"/><text x="46.8605%" y="622.50"></text></g><g><title>arrow::MakeScalar&lt;float&gt; (pyarrow/libarrow.so.2000) (499 samples, 0.52%)</title><rect x="47.1573%" y="596" width="0.5197%" height="15" fill="rgb(227,97,0)" fg:x="45279" fg:w="499"/><text x="47.4073%" y="606.50"></text></g><g><title>arrow::VisitTypeInline&lt;arrow::MakeScalarImpl&lt;float&amp;&amp;&gt;, &gt; (pyarrow/libarrow.so.2000) (400 samples, 0.42%)</title><rect x="47.2604%" y="612" width="0.4166%" height="15" fill="rgb(234,150,53)" fg:x="45378" fg:w="400"/><text x="47.5104%" y="622.50"></text></g><g><title>std::__shared_ptr&lt;arrow::FloatScalar, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, float, std::shared_ptr&lt;arrow::DataType&gt; &gt; (pyarrow/libarrow_substrait.so.2000) (226 samples, 0.24%)</title><rect x="47.4416%" y="628" width="0.2354%" height="15" fill="rgb(228,201,54)" fg:x="45552" fg:w="226"/><text x="47.6916%" y="638.50"></text></g><g><title>operator new (libstdc++.so.6.0.29) (142 samples, 0.15%)</title><rect x="47.5291%" y="644" width="0.1479%" height="15" fill="rgb(222,22,37)" fg:x="45636" fg:w="142"/><text x="47.7791%" y="654.50"></text></g><g><title>malloc (libc.so.6) (135 samples, 0.14%)</title><rect x="47.5364%" y="660" width="0.1406%" height="15" fill="rgb(237,53,32)" fg:x="45643" fg:w="135"/><text x="47.7864%" y="670.50"></text></g><g><title>arrow::Result&lt;std::shared_ptr&lt;arrow::Scalar&gt; &gt;::Value&lt;std::shared_ptr&lt;arrow::Scalar&gt;, void&gt; &amp;&amp; (pyarrow/libarrow.so.2000) (154 samples, 0.16%)</title><rect x="47.7030%" y="596" width="0.1604%" height="15" fill="rgb(233,25,53)" fg:x="45803" fg:w="154"/><text x="47.9530%" y="606.50"></text></g><g><title>Array_getitem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (5,761 samples, 6.00%)</title><rect x="41.9634%" y="532" width="6.0000%" height="15" fill="rgb(210,40,34)" fg:x="40292" fg:w="5761"/><text x="42.2134%" y="542.50">Array_ge..</text></g><g><title>arrow::Array::GetScalar (pyarrow/libarrow.so.2000) (2,175 samples, 2.27%)</title><rect x="45.6982%" y="548" width="2.2652%" height="15" fill="rgb(241,220,44)" fg:x="43878" fg:w="2175"/><text x="45.9482%" y="558.50">a..</text></g><g><title>arrow::internal::ScalarFromArraySlotImpl::Finish &amp;&amp; (pyarrow/libarrow.so.2000) (2,092 samples, 2.18%)</title><rect x="45.7846%" y="564" width="2.1788%" height="15" fill="rgb(235,28,35)" fg:x="43961" fg:w="2092"/><text x="46.0346%" y="574.50">a..</text></g><g><title>arrow::VisitArrayInline&lt;arrow::internal::ScalarFromArraySlotImpl, &gt; (pyarrow/libarrow.so.2000) (1,729 samples, 1.80%)</title><rect x="46.1627%" y="580" width="1.8007%" height="15" fill="rgb(210,56,17)" fg:x="44324" fg:w="1729"/><text x="46.4127%" y="590.50">a..</text></g><g><title>__Pyx_GetItemInt_Fast (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (6,859 samples, 7.14%)</title><rect x="40.8709%" y="500" width="7.1435%" height="15" fill="rgb(224,130,29)" fg:x="39243" fg:w="6859"/><text x="41.1209%" y="510.50">__Pyx_GetI..</text></g><g><title>__getitem__ (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (6,153 samples, 6.41%)</title><rect x="41.6062%" y="516" width="6.4082%" height="15" fill="rgb(235,212,8)" fg:x="39949" fg:w="6153"/><text x="41.8562%" y="526.50">__getite..</text></g><g><title>__Pyx_PyDict_GetItem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (186 samples, 0.19%)</title><rect x="55.2683%" y="596" width="0.1937%" height="15" fill="rgb(223,33,50)" fg:x="53067" fg:w="186"/><text x="55.5183%" y="606.50"></text></g><g><title>__memmove_avx_unaligned_erms (libc.so.6) (201 samples, 0.21%)</title><rect x="55.4621%" y="596" width="0.2093%" height="15" fill="rgb(219,149,13)" fg:x="53253" fg:w="201"/><text x="55.7121%" y="606.50"></text></g><g><title>DataType_init (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (4,982 samples, 5.19%)</title><rect x="50.5442%" y="580" width="5.1887%" height="15" fill="rgb(250,156,29)" fg:x="48531" fg:w="4982"/><text x="50.7942%" y="590.50">DataTy..</text></g><g><title>Array_init (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (5,724 samples, 5.96%)</title><rect x="50.1901%" y="548" width="5.9614%" height="15" fill="rgb(216,193,19)" fg:x="48191" fg:w="5724"/><text x="50.4401%" y="558.50">Array_in..</text></g><g><title>pyarrow_wrap_data_type (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (5,526 samples, 5.76%)</title><rect x="50.3963%" y="564" width="5.7552%" height="15" fill="rgb(216,135,14)" fg:x="48389" fg:w="5526"/><text x="50.6463%" y="574.50">pyarrow..</text></g><g><title>__pyx_tp_new_7pyarrow_3lib_DataType (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (402 samples, 0.42%)</title><rect x="55.7328%" y="580" width="0.4187%" height="15" fill="rgb(241,47,5)" fg:x="53513" fg:w="402"/><text x="55.9828%" y="590.50"></text></g><g><title>__Pyx_PyDict_GetItem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (272 samples, 0.28%)</title><rect x="56.1515%" y="548" width="0.2833%" height="15" fill="rgb(233,42,35)" fg:x="53915" fg:w="272"/><text x="56.4015%" y="558.50"></text></g><g><title>__pyx_tp_new_7pyarrow_3lib_DoubleArray (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (269 samples, 0.28%)</title><rect x="56.5546%" y="548" width="0.2802%" height="15" fill="rgb(231,13,6)" fg:x="54302" fg:w="269"/><text x="56.8046%" y="558.50"></text></g><g><title>__pyx_getprop_7pyarrow_3lib_10ListScalar_values (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (7,896 samples, 8.22%)</title><rect x="48.8289%" y="516" width="8.2235%" height="15" fill="rgb(207,181,40)" fg:x="46884" fg:w="7896"/><text x="49.0789%" y="526.50">__pyx_getpr..</text></g><g><title>pyarrow_wrap_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (7,884 samples, 8.21%)</title><rect x="48.8414%" y="532" width="8.2110%" height="15" fill="rgb(254,173,49)" fg:x="46896" fg:w="7884"/><text x="49.0914%" y="542.50">pyarrow_wra..</text></g><g><title>__pyx_tp_new_7pyarrow_3lib_FloatArray (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (209 samples, 0.22%)</title><rect x="56.8347%" y="548" width="0.2177%" height="15" fill="rgb(221,1,38)" fg:x="54571" fg:w="209"/><text x="57.0847%" y="558.50"></text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_DataType (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (183 samples, 0.19%)</title><rect x="57.4638%" y="532" width="0.1906%" height="15" fill="rgb(206,124,46)" fg:x="55175" fg:w="183"/><text x="57.7138%" y="542.50"></text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_Array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (613 samples, 0.64%)</title><rect x="57.0524%" y="516" width="0.6384%" height="15" fill="rgb(249,21,11)" fg:x="54780" fg:w="613"/><text x="57.3024%" y="526.50"></text></g><g><title>__len__ (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (9,330 samples, 9.72%)</title><rect x="48.0144%" y="500" width="9.7170%" height="15" fill="rgb(222,201,40)" fg:x="46102" fg:w="9330"/><text x="48.2644%" y="510.50">__len__ (pyarr..</text></g><g><title>__Pyx_PyDict_GetItem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (296 samples, 0.31%)</title><rect x="65.1926%" y="580" width="0.3083%" height="15" fill="rgb(235,61,29)" fg:x="62596" fg:w="296"/><text x="65.4426%" y="590.50"></text></g><g><title>__memmove_avx_unaligned_erms (libc.so.6) (233 samples, 0.24%)</title><rect x="65.5009%" y="580" width="0.2427%" height="15" fill="rgb(219,207,3)" fg:x="62892" fg:w="233"/><text x="65.7509%" y="590.50"></text></g><g><title>DataType_init (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (5,978 samples, 6.23%)</title><rect x="59.5905%" y="564" width="6.2260%" height="15" fill="rgb(222,56,46)" fg:x="57217" fg:w="5978"/><text x="59.8405%" y="574.50">DataType..</text></g><g><title>Array_init (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (6,834 samples, 7.12%)</title><rect x="59.1645%" y="532" width="7.1175%" height="15" fill="rgb(239,76,54)" fg:x="56808" fg:w="6834"/><text x="59.4145%" y="542.50">Array_init..</text></g><g><title>pyarrow_wrap_data_type (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (6,608 samples, 6.88%)</title><rect x="59.3999%" y="548" width="6.8821%" height="15" fill="rgb(231,124,27)" fg:x="57034" fg:w="6608"/><text x="59.6499%" y="558.50">pyarrow_w..</text></g><g><title>__pyx_tp_new_7pyarrow_3lib_DataType (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (447 samples, 0.47%)</title><rect x="65.8165%" y="564" width="0.4655%" height="15" fill="rgb(249,195,6)" fg:x="63195" fg:w="447"/><text x="66.0665%" y="574.50"></text></g><g><title>__Pyx_PyDict_GetItem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (313 samples, 0.33%)</title><rect x="66.2820%" y="532" width="0.3260%" height="15" fill="rgb(237,174,47)" fg:x="63642" fg:w="313"/><text x="66.5320%" y="542.50"></text></g><g><title>__pyx_tp_new_7pyarrow_3lib_DoubleArray (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (251 samples, 0.26%)</title><rect x="66.7548%" y="532" width="0.2614%" height="15" fill="rgb(206,201,31)" fg:x="64096" fg:w="251"/><text x="67.0048%" y="542.50"></text></g><g><title>__pyx_getprop_7pyarrow_3lib_10ListScalar_values (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (9,114 samples, 9.49%)</title><rect x="57.7314%" y="500" width="9.4921%" height="15" fill="rgb(231,57,52)" fg:x="55432" fg:w="9114"/><text x="57.9814%" y="510.50">__pyx_getprop_..</text></g><g><title>pyarrow_wrap_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (9,093 samples, 9.47%)</title><rect x="57.7533%" y="516" width="9.4702%" height="15" fill="rgb(248,177,22)" fg:x="55453" fg:w="9093"/><text x="58.0033%" y="526.50">pyarrow_wrap_a..</text></g><g><title>__pyx_tp_new_7pyarrow_3lib_FloatArray (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (199 samples, 0.21%)</title><rect x="67.0163%" y="532" width="0.2073%" height="15" fill="rgb(215,211,37)" fg:x="64347" fg:w="199"/><text x="67.2663%" y="542.50"></text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_DataType (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (167 samples, 0.17%)</title><rect x="67.6807%" y="516" width="0.1739%" height="15" fill="rgb(241,128,51)" fg:x="64985" fg:w="167"/><text x="67.9307%" y="526.50"></text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_Array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (625 samples, 0.65%)</title><rect x="67.2235%" y="500" width="0.6509%" height="15" fill="rgb(227,165,31)" fg:x="64546" fg:w="625"/><text x="67.4735%" y="510.50"></text></g><g><title>__pyx_sq_item_7pyarrow_3lib_StructType (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (27,187 samples, 28.31%)</title><rect x="39.6065%" y="468" width="28.3148%" height="15" fill="rgb(228,167,24)" fg:x="38029" fg:w="27187"/><text x="39.8565%" y="478.50">__pyx_sq_item_7pyarrow_3lib_StructType (pyarr..</text></g><g><title>__getitem__ (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (26,901 samples, 28.02%)</title><rect x="39.9044%" y="484" width="28.0169%" height="15" fill="rgb(228,143,12)" fg:x="38315" fg:w="26901"/><text x="40.1544%" y="494.50">__getitem__ (pyarrow/lib.cpython-311-x86_64-l..</text></g><g><title>free (libc.so.6) (301 samples, 0.31%)</title><rect x="68.0484%" y="484" width="0.3135%" height="15" fill="rgb(249,149,8)" fg:x="65338" fg:w="301"/><text x="68.2984%" y="494.50"></text></g><g><title>_int_free (libc.so.6) (139 samples, 0.14%)</title><rect x="68.2171%" y="500" width="0.1448%" height="15" fill="rgb(243,35,44)" fg:x="65500" fg:w="139"/><text x="68.4671%" y="510.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (363 samples, 0.38%)</title><rect x="68.3952%" y="484" width="0.3781%" height="15" fill="rgb(246,89,9)" fg:x="65671" fg:w="363"/><text x="68.6452%" y="494.50"></text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_Scalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (825 samples, 0.86%)</title><rect x="67.9213%" y="468" width="0.8592%" height="15" fill="rgb(233,213,13)" fg:x="65216" fg:w="825"/><text x="68.1713%" y="478.50"></text></g><g><title>arrow::py::is_scalar (pyarrow/libarrow_python.so.2000) (122 samples, 0.13%)</title><rect x="69.8845%" y="484" width="0.1271%" height="15" fill="rgb(233,141,41)" fg:x="67101" fg:w="122"/><text x="70.1345%" y="494.50"></text></g><g><title>lib_pyarrow_is_scalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (106 samples, 0.11%)</title><rect x="69.9012%" y="500" width="0.1104%" height="15" fill="rgb(239,167,4)" fg:x="67117" fg:w="106"/><text x="70.1512%" y="510.50"></text></g><g><title>arrow::py::InferArrowType (pyarrow/libarrow_python.so.2000) (30,092 samples, 31.34%)</title><rect x="39.2764%" y="436" width="31.3403%" height="15" fill="rgb(209,217,16)" fg:x="37712" fg:w="30092"/><text x="39.5264%" y="446.50">arrow::py::InferArrowType (pyarrow/libarrow_python...</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::py::internal::VisitSequence&lt;arrow::py::TypeInferrer::VisitSequence(_object*, _object*)::{lambda(_object*, bool*)#1}&gt;(_object*, long, arrow::py::TypeInferrer::VisitSequence(_object*, _object*)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (pyarrow/libarrow_python.so.2000) (30,086 samples, 31.33%)</title><rect x="39.2826%" y="452" width="31.3340%" height="15" fill="rgb(219,88,35)" fg:x="37718" fg:w="30086"/><text x="39.5326%" y="462.50">arrow::py::internal::VisitSequenceGeneric&lt;arrow::py..</text></g><g><title>arrow::py::TypeInferrer::Visit (pyarrow/libarrow_python.so.2000) (1,714 samples, 1.79%)</title><rect x="68.8316%" y="468" width="1.7851%" height="15" fill="rgb(220,193,23)" fg:x="66090" fg:w="1714"/><text x="69.0816%" y="478.50">a..</text></g><g><title>arrow::py::unwrap_scalar (pyarrow/libarrow_python.so.2000) (581 samples, 0.61%)</title><rect x="70.0116%" y="484" width="0.6051%" height="15" fill="rgb(230,90,52)" fg:x="67223" fg:w="581"/><text x="70.2616%" y="494.50"></text></g><g><title>pyarrow_unwrap_scalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (497 samples, 0.52%)</title><rect x="70.0990%" y="500" width="0.5176%" height="15" fill="rgb(252,106,19)" fg:x="67307" fg:w="497"/><text x="70.3490%" y="510.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (128 samples, 0.13%)</title><rect x="70.6354%" y="452" width="0.1333%" height="15" fill="rgb(206,74,20)" fg:x="67822" fg:w="128"/><text x="70.8854%" y="462.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (libc.so.6) (141 samples, 0.15%)</title><rect x="70.6354%" y="436" width="0.1468%" height="15" fill="rgb(230,138,44)" fg:x="67822" fg:w="141"/><text x="70.8854%" y="446.50"></text></g><g><title>arrow::py::ConvertPySequence (pyarrow/libarrow_python.so.2000) (58,478 samples, 60.90%)</title><rect x="9.8795%" y="420" width="60.9038%" height="15" fill="rgb(235,182,43)" fg:x="9486" fg:w="58478"/><text x="10.1295%" y="430.50">arrow::py::ConvertPySequence (pyarrow/libarrow_python.so.2000)</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (697 samples, 0.73%)</title><rect x="70.7916%" y="436" width="0.7259%" height="15" fill="rgb(242,16,51)" fg:x="67972" fg:w="697"/><text x="71.0416%" y="446.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (710 samples, 0.74%)</title><rect x="70.7916%" y="420" width="0.7395%" height="15" fill="rgb(248,9,4)" fg:x="67972" fg:w="710"/><text x="71.0416%" y="430.50"></text></g><g><title>from_row_batch (arrakis/block.py:409) (59,576 samples, 62.05%)</title><rect x="9.4962%" y="372" width="62.0473%" height="15" fill="rgb(210,31,22)" fg:x="9118" fg:w="59576"/><text x="9.7462%" y="382.50">from_row_batch (arrakis/block.py:409)</text></g><g><title>array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (59,218 samples, 61.67%)</title><rect x="9.8691%" y="388" width="61.6745%" height="15" fill="rgb(239,54,39)" fg:x="9476" fg:w="59218"/><text x="10.1191%" y="398.50">array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so)</text></g><g><title>lib__sequence_to_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (59,213 samples, 61.67%)</title><rect x="9.8743%" y="404" width="61.6693%" height="15" fill="rgb(230,99,41)" fg:x="9481" fg:w="59213"/><text x="10.1243%" y="414.50">lib__sequence_to_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so)</text></g><g><title>&lt;listcomp&gt; (arrakis_backend_kafka/backend.py:333) (59,722 samples, 62.20%)</title><rect x="9.3567%" y="356" width="62.1994%" height="15" fill="rgb(253,106,12)" fg:x="8984" fg:w="59722"/><text x="9.6067%" y="366.50">&lt;listcomp&gt; (arrakis_backend_kafka/backend.py:333)</text></g><g><title>read (arrakis_backend_kafka/backend.py:332) (59,733 samples, 62.21%)</title><rect x="9.3494%" y="340" width="62.2109%" height="15" fill="rgb(213,46,41)" fg:x="8977" fg:w="59733"/><text x="9.5994%" y="350.50">read (arrakis_backend_kafka/backend.py:332)</text></g><g><title>create_gaps (arrakis/block.py:270) (108 samples, 0.11%)</title><rect x="71.5686%" y="356" width="0.1125%" height="15" fill="rgb(215,133,35)" fg:x="68718" fg:w="108"/><text x="71.8186%" y="366.50"></text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:588) (68,132 samples, 70.96%)</title><rect x="0.7249%" y="308" width="70.9583%" height="15" fill="rgb(213,28,5)" fg:x="696" fg:w="68132"/><text x="0.9749%" y="318.50">_convert_blocks_to_batches (arrakis_server/server.py:588)</text></g><g><title>stream (arrakis_backend_kafka/backend.py:177) (68,124 samples, 70.95%)</title><rect x="0.7332%" y="324" width="70.9499%" height="15" fill="rgb(215,77,49)" fg:x="704" fg:w="68124"/><text x="0.9832%" y="334.50">stream (arrakis_backend_kafka/backend.py:177)</text></g><g><title>read (arrakis_backend_kafka/backend.py:343) (113 samples, 0.12%)</title><rect x="71.5655%" y="340" width="0.1177%" height="15" fill="rgb(248,100,22)" fg:x="68715" fg:w="113"/><text x="71.8155%" y="350.50"></text></g><g><title>__pyx_sq_item_7pyarrow_3lib_Array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (227 samples, 0.24%)</title><rect x="72.4611%" y="452" width="0.2364%" height="15" fill="rgb(208,67,9)" fg:x="69575" fg:w="227"/><text x="72.7111%" y="462.50"></text></g><g><title>Array__assert_cpu (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (697 samples, 0.73%)</title><rect x="73.8005%" y="484" width="0.7259%" height="15" fill="rgb(219,133,21)" fg:x="70861" fg:w="697"/><text x="74.0505%" y="494.50"></text></g><g><title>arrow::ArrayData::device_type (pyarrow/libarrow.so.2000) (512 samples, 0.53%)</title><rect x="73.9931%" y="500" width="0.5332%" height="15" fill="rgb(246,46,29)" fg:x="71046" fg:w="512"/><text x="74.2431%" y="510.50"></text></g><g><title>Array__assert_cpu (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (317 samples, 0.33%)</title><rect x="75.3981%" y="500" width="0.3301%" height="15" fill="rgb(246,185,52)" fg:x="72395" fg:w="317"/><text x="75.6481%" y="510.50"></text></g><g><title>arrow::ArrayData::device_type (pyarrow/libarrow.so.2000) (178 samples, 0.19%)</title><rect x="75.5429%" y="516" width="0.1854%" height="15" fill="rgb(252,136,11)" fg:x="72534" fg:w="178"/><text x="75.7929%" y="526.50"></text></g><g><title>Scalar_init (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (296 samples, 0.31%)</title><rect x="80.6222%" y="516" width="0.3083%" height="15" fill="rgb(219,138,53)" fg:x="77411" fg:w="296"/><text x="80.8722%" y="526.50"></text></g><g><title>__Pyx_PyObject_FastCallDict (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (191 samples, 0.20%)</title><rect x="80.9305%" y="516" width="0.1989%" height="15" fill="rgb(211,51,23)" fg:x="77707" fg:w="191"/><text x="81.1805%" y="526.50"></text></g><g><title>__Pyx_TypeTest (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (148 samples, 0.15%)</title><rect x="81.1294%" y="516" width="0.1541%" height="15" fill="rgb(247,221,28)" fg:x="77898" fg:w="148"/><text x="81.3794%" y="526.50"></text></g><g><title>__pyx_tp_new_7pyarrow_3lib_DoubleScalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (451 samples, 0.47%)</title><rect x="81.2835%" y="516" width="0.4697%" height="15" fill="rgb(251,222,45)" fg:x="78046" fg:w="451"/><text x="81.5335%" y="526.50"></text></g><g><title>__pyx_tp_new_7pyarrow_3lib_FloatScalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (198 samples, 0.21%)</title><rect x="81.7532%" y="516" width="0.2062%" height="15" fill="rgb(217,162,53)" fg:x="78497" fg:w="198"/><text x="82.0032%" y="526.50"></text></g><g><title>lib_get_scalar_class_from_type (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (806 samples, 0.84%)</title><rect x="81.9594%" y="516" width="0.8394%" height="15" fill="rgb(229,93,14)" fg:x="78695" fg:w="806"/><text x="82.2094%" y="526.50"></text></g><g><title>__Pyx_PyDict_GetItem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (597 samples, 0.62%)</title><rect x="82.1771%" y="532" width="0.6218%" height="15" fill="rgb(209,67,49)" fg:x="78904" fg:w="597"/><text x="82.4271%" y="542.50"></text></g><g><title>Scalar_wrap (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (6,968 samples, 7.26%)</title><rect x="75.7283%" y="500" width="7.2570%" height="15" fill="rgb(213,87,29)" fg:x="72712" fg:w="6968"/><text x="75.9783%" y="510.50">Scalar_wra..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (179 samples, 0.19%)</title><rect x="82.7989%" y="516" width="0.1864%" height="15" fill="rgb(205,151,52)" fg:x="79501" fg:w="179"/><text x="83.0489%" y="526.50"></text></g><g><title>arrow::Array::IsValid (pyarrow/libarrow_python.so.2000) (126 samples, 0.13%)</title><rect x="83.6466%" y="532" width="0.1312%" height="15" fill="rgb(253,215,39)" fg:x="80315" fg:w="126"/><text x="83.8966%" y="542.50"></text></g><g><title>operator new (libstdc++.so.6.0.29) (163 samples, 0.17%)</title><rect x="84.4715%" y="564" width="0.1698%" height="15" fill="rgb(221,220,41)" fg:x="81107" fg:w="163"/><text x="84.7215%" y="574.50"></text></g><g><title>malloc (libc.so.6) (128 samples, 0.13%)</title><rect x="84.5080%" y="580" width="0.1333%" height="15" fill="rgb(218,133,21)" fg:x="81142" fg:w="128"/><text x="84.7580%" y="590.50"></text></g><g><title>arrow::MakeNullScalar (pyarrow/libarrow.so.2000) (1,181 samples, 1.23%)</title><rect x="83.7779%" y="532" width="1.2300%" height="15" fill="rgb(221,193,43)" fg:x="80441" fg:w="1181"/><text x="84.0279%" y="542.50"></text></g><g><title>arrow::VisitTypeInline&lt;arrow::(anonymous namespace)::MakeNullImpl, &gt; (pyarrow/libarrow.so.2000) (916 samples, 0.95%)</title><rect x="84.0539%" y="548" width="0.9540%" height="15" fill="rgb(240,128,52)" fg:x="80706" fg:w="916"/><text x="84.3039%" y="558.50"></text></g><g><title>std::__weak_ptr&lt;arrow::Scalar, (__gnu_cxx::_Lock_policy)2&gt;::_M_assign (pyarrow/libarrow_python.so.2000) (166 samples, 0.17%)</title><rect x="84.8350%" y="564" width="0.1729%" height="15" fill="rgb(253,114,12)" fg:x="81456" fg:w="166"/><text x="85.0850%" y="574.50"></text></g><g><title>std::__shared_ptr&lt;arrow::DoubleScalar, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, double, std::shared_ptr&lt;arrow::DataType&gt; &gt; (pyarrow/libarrow_substrait.so.2000) (124 samples, 0.13%)</title><rect x="85.4088%" y="580" width="0.1291%" height="15" fill="rgb(215,223,47)" fg:x="82007" fg:w="124"/><text x="85.6588%" y="590.50"></text></g><g><title>arrow::MakeScalar&lt;double&gt; (pyarrow/libarrow.so.2000) (342 samples, 0.36%)</title><rect x="85.2714%" y="548" width="0.3562%" height="15" fill="rgb(248,225,23)" fg:x="81875" fg:w="342"/><text x="85.5214%" y="558.50"></text></g><g><title>arrow::VisitTypeInline&lt;arrow::MakeScalarImpl&lt;double&amp;&amp;&gt;, &gt; (pyarrow/libarrow.so.2000) (261 samples, 0.27%)</title><rect x="85.3557%" y="564" width="0.2718%" height="15" fill="rgb(250,108,0)" fg:x="81956" fg:w="261"/><text x="85.6057%" y="574.50"></text></g><g><title>arrow::MakeScalar&lt;float&gt; (pyarrow/libarrow.so.2000) (303 samples, 0.32%)</title><rect x="85.6275%" y="548" width="0.3156%" height="15" fill="rgb(228,208,7)" fg:x="82217" fg:w="303"/><text x="85.8775%" y="558.50"></text></g><g><title>arrow::VisitTypeInline&lt;arrow::MakeScalarImpl&lt;float&amp;&amp;&gt;, &gt; (pyarrow/libarrow.so.2000) (229 samples, 0.24%)</title><rect x="85.7046%" y="564" width="0.2385%" height="15" fill="rgb(244,45,10)" fg:x="82291" fg:w="229"/><text x="85.9546%" y="574.50"></text></g><g><title>std::__shared_ptr&lt;arrow::FloatScalar, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, float, std::shared_ptr&lt;arrow::DataType&gt; &gt; (pyarrow/libarrow_substrait.so.2000) (129 samples, 0.13%)</title><rect x="85.8088%" y="580" width="0.1344%" height="15" fill="rgb(207,125,25)" fg:x="82391" fg:w="129"/><text x="86.0588%" y="590.50"></text></g><g><title>arrow::Result&lt;std::shared_ptr&lt;arrow::Scalar&gt; &gt;::Value&lt;std::shared_ptr&lt;arrow::Scalar&gt;, void&gt; &amp;&amp; (pyarrow/libarrow.so.2000) (134 samples, 0.14%)</title><rect x="85.9639%" y="548" width="0.1396%" height="15" fill="rgb(210,195,18)" fg:x="82540" fg:w="134"/><text x="86.2139%" y="558.50"></text></g><g><title>arrow::VisitArrayInline&lt;arrow::internal::ScalarFromArraySlotImpl, &gt; (pyarrow/libarrow.so.2000) (1,129 samples, 1.18%)</title><rect x="85.0172%" y="532" width="1.1758%" height="15" fill="rgb(249,80,12)" fg:x="81631" fg:w="1129"/><text x="85.2672%" y="542.50"></text></g><g><title>Array_getitem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (11,247 samples, 11.71%)</title><rect x="74.5264%" y="484" width="11.7136%" height="15" fill="rgb(221,65,9)" fg:x="71558" fg:w="11247"/><text x="74.7764%" y="494.50">Array_getitem (py..</text></g><g><title>arrow::Array::GetScalar (pyarrow/libarrow.so.2000) (3,125 samples, 3.25%)</title><rect x="82.9853%" y="500" width="3.2546%" height="15" fill="rgb(235,49,36)" fg:x="79680" fg:w="3125"/><text x="83.2353%" y="510.50">arr..</text></g><g><title>arrow::internal::ScalarFromArraySlotImpl::Finish &amp;&amp; (pyarrow/libarrow.so.2000) (3,048 samples, 3.17%)</title><rect x="83.0655%" y="516" width="3.1744%" height="15" fill="rgb(225,32,20)" fg:x="79757" fg:w="3048"/><text x="83.3155%" y="526.50">arr..</text></g><g><title>__pyx_sq_item_7pyarrow_3lib_StructType (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (13,123 samples, 13.67%)</title><rect x="72.6975%" y="452" width="13.6674%" height="15" fill="rgb(215,141,46)" fg:x="69802" fg:w="13123"/><text x="72.9475%" y="462.50">__pyx_sq_item_7pyarro..</text></g><g><title>__getitem__ (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (12,377 samples, 12.89%)</title><rect x="73.4745%" y="468" width="12.8904%" height="15" fill="rgb(250,160,47)" fg:x="70548" fg:w="12377"/><text x="73.7245%" y="478.50">__getitem__ (pyarro..</text></g><g><title>arrow::Status::~Status (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (247 samples, 0.26%)</title><rect x="86.3649%" y="452" width="0.2572%" height="15" fill="rgb(216,222,40)" fg:x="82925" fg:w="247"/><text x="86.6149%" y="462.50"></text></g><g><title>arrow::ArrayBuilder::UnsafeAppendToBitmap (pyarrow/libarrow_python.so.2000) (404 samples, 0.42%)</title><rect x="87.6803%" y="500" width="0.4208%" height="15" fill="rgb(234,217,39)" fg:x="84188" fg:w="404"/><text x="87.9303%" y="510.50"></text></g><g><title>arrow::BufferBuilder::UnsafeAppend (pyarrow/libarrow_python.so.2000) (189 samples, 0.20%)</title><rect x="88.1011%" y="500" width="0.1968%" height="15" fill="rgb(207,178,40)" fg:x="84592" fg:w="189"/><text x="88.3511%" y="510.50"></text></g><g><title>__memmove_avx_unaligned_erms (libc.so.6) (144 samples, 0.15%)</title><rect x="88.1479%" y="516" width="0.1500%" height="15" fill="rgb(221,136,13)" fg:x="84637" fg:w="144"/><text x="88.3979%" y="526.50"></text></g><g><title>arrow::VisitTypeInline&lt;arrow::(anonymous namespace)::AppendScalarImpl&lt;arrow::Scalar const*&gt;, &gt; (pyarrow/libarrow.so.2000) (1,024 samples, 1.07%)</title><rect x="87.3543%" y="484" width="1.0665%" height="15" fill="rgb(249,199,10)" fg:x="83875" fg:w="1024"/><text x="87.6043%" y="494.50"></text></g><g><title>arrow::Status::~Status (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (118 samples, 0.12%)</title><rect x="88.2979%" y="500" width="0.1229%" height="15" fill="rgb(249,222,13)" fg:x="84781" fg:w="118"/><text x="88.5479%" y="510.50"></text></g><g><title>arrow::ArrayBuilder::AppendScalar (pyarrow/libarrow.so.2000) (1,514 samples, 1.58%)</title><rect x="87.1450%" y="468" width="1.5768%" height="15" fill="rgb(244,185,38)" fg:x="83674" fg:w="1514"/><text x="87.3950%" y="478.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (pyarrow/libarrow.so.2000) (289 samples, 0.30%)</title><rect x="88.4208%" y="484" width="0.3010%" height="15" fill="rgb(236,202,9)" fg:x="84899" fg:w="289"/><text x="88.6708%" y="494.50"></text></g><g><title>arrow::Result&lt;std::shared_ptr&lt;arrow::Scalar&gt; &gt;::Destroy (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (212 samples, 0.22%)</title><rect x="88.7218%" y="468" width="0.2208%" height="15" fill="rgb(250,229,37)" fg:x="85188" fg:w="212"/><text x="88.9718%" y="478.50"></text></g><g><title>arrow::Status::~Status (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (151 samples, 0.16%)</title><rect x="88.9426%" y="468" width="0.1573%" height="15" fill="rgb(206,174,23)" fg:x="85400" fg:w="151"/><text x="89.1926%" y="478.50"></text></g><g><title>arrow::py::unwrap_scalar (pyarrow/libarrow_python.so.2000) (735 samples, 0.77%)</title><rect x="89.1717%" y="468" width="0.7655%" height="15" fill="rgb(211,33,43)" fg:x="85620" fg:w="735"/><text x="89.4217%" y="478.50"></text></g><g><title>pyarrow_unwrap_scalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (679 samples, 0.71%)</title><rect x="89.2300%" y="484" width="0.7072%" height="15" fill="rgb(245,58,50)" fg:x="85676" fg:w="679"/><text x="89.4800%" y="494.50"></text></g><g><title>arrow::py::(anonymous namespace)::PyPrimitiveConverter&lt;arrow::DoubleType, void&gt;::Append (pyarrow/libarrow_python.so.2000) (3,272 samples, 3.41%)</title><rect x="86.6222%" y="452" width="3.4077%" height="15" fill="rgb(244,68,36)" fg:x="83172" fg:w="3272"/><text x="86.8722%" y="462.50">arr..</text></g><g><title>arrow::ArrayBuilder::UnsafeAppendToBitmap (pyarrow/libarrow_python.so.2000) (124 samples, 0.13%)</title><rect x="90.5246%" y="500" width="0.1291%" height="15" fill="rgb(232,229,15)" fg:x="86919" fg:w="124"/><text x="90.7746%" y="510.50"></text></g><g><title>arrow::VisitTypeInline&lt;arrow::(anonymous namespace)::AppendScalarImpl&lt;arrow::Scalar const*&gt;, &gt; (pyarrow/libarrow.so.2000) (415 samples, 0.43%)</title><rect x="90.3705%" y="484" width="0.4322%" height="15" fill="rgb(254,30,23)" fg:x="86771" fg:w="415"/><text x="90.6205%" y="494.50"></text></g><g><title>arrow::ArrayBuilder::AppendScalar (pyarrow/libarrow.so.2000) (670 samples, 0.70%)</title><rect x="90.2684%" y="468" width="0.6978%" height="15" fill="rgb(235,160,14)" fg:x="86673" fg:w="670"/><text x="90.5184%" y="478.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (pyarrow/libarrow.so.2000) (157 samples, 0.16%)</title><rect x="90.8027%" y="484" width="0.1635%" height="15" fill="rgb(212,155,44)" fg:x="87186" fg:w="157"/><text x="91.0527%" y="494.50"></text></g><g><title>arrow::py::unwrap_scalar (pyarrow/libarrow_python.so.2000) (379 samples, 0.39%)</title><rect x="91.1630%" y="468" width="0.3947%" height="15" fill="rgb(226,2,50)" fg:x="87532" fg:w="379"/><text x="91.4130%" y="478.50"></text></g><g><title>pyarrow_unwrap_scalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (338 samples, 0.35%)</title><rect x="91.2057%" y="484" width="0.3520%" height="15" fill="rgb(234,177,6)" fg:x="87573" fg:w="338"/><text x="91.4557%" y="494.50"></text></g><g><title>arrow::py::(anonymous namespace)::PyPrimitiveConverter&lt;arrow::FloatType, void&gt;::Append (pyarrow/libarrow_python.so.2000) (1,518 samples, 1.58%)</title><rect x="90.0299%" y="452" width="1.5810%" height="15" fill="rgb(217,24,9)" fg:x="86444" fg:w="1518"/><text x="90.2799%" y="462.50"></text></g><g><title>arrow::py::CheckPyError (pyarrow/libarrow_python.so.2000) (165 samples, 0.17%)</title><rect x="91.6109%" y="452" width="0.1718%" height="15" fill="rgb(220,13,46)" fg:x="87962" fg:w="165"/><text x="91.8609%" y="462.50"></text></g><g><title>free (libc.so.6) (676 samples, 0.70%)</title><rect x="92.7982%" y="484" width="0.7040%" height="15" fill="rgb(239,221,27)" fg:x="89102" fg:w="676"/><text x="93.0482%" y="494.50"></text></g><g><title>_int_free (libc.so.6) (435 samples, 0.45%)</title><rect x="93.0491%" y="500" width="0.4530%" height="15" fill="rgb(222,198,25)" fg:x="89343" fg:w="435"/><text x="93.2991%" y="510.50"></text></g><g><title>arrow::DoubleScalar::~DoubleScalar (pyarrow/libarrow_python.so.2000) (187 samples, 0.19%)</title><rect x="93.8001%" y="500" width="0.1948%" height="15" fill="rgb(211,99,13)" fg:x="90064" fg:w="187"/><text x="94.0501%" y="510.50"></text></g><g><title>arrow::FloatScalar::~FloatScalar (pyarrow/libarrow_python.so.2000) (113 samples, 0.12%)</title><rect x="93.9948%" y="500" width="0.1177%" height="15" fill="rgb(232,111,31)" fg:x="90251" fg:w="113"/><text x="94.2448%" y="510.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;arrow::DoubleScalar, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (pyarrow/libarrow_python.so.2000) (161 samples, 0.17%)</title><rect x="94.1125%" y="500" width="0.1677%" height="15" fill="rgb(245,82,37)" fg:x="90364" fg:w="161"/><text x="94.3625%" y="510.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (761 samples, 0.79%)</title><rect x="93.5563%" y="484" width="0.7926%" height="15" fill="rgb(227,149,46)" fg:x="89830" fg:w="761"/><text x="93.8063%" y="494.50"></text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_Scalar (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (1,861 samples, 1.94%)</title><rect x="92.4222%" y="468" width="1.9382%" height="15" fill="rgb(218,36,50)" fg:x="88741" fg:w="1861"/><text x="92.6722%" y="478.50">_..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::py::internal::VisitSequence&lt;arrow::py::(anonymous namespace)::PyConverter::Extend(_object*, long, long)::{lambda(_object*, bool*)#1}&gt;(_object*, long, arrow::py::(anonymous namespace)::PyConverter::Extend(_object*, long, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (pyarrow/libarrow_python.so.2000) (21,798 samples, 22.70%)</title><rect x="71.8248%" y="372" width="22.7022%" height="15" fill="rgb(226,80,48)" fg:x="68964" fg:w="21798"/><text x="72.0748%" y="382.50">arrow::py::internal::VisitSequenceGe..</text></g><g><title>arrow::py::(anonymous namespace)::PyListConverter&lt;arrow::ListType&gt;::Append (pyarrow/libarrow_python.so.2000) (21,797 samples, 22.70%)</title><rect x="71.8258%" y="388" width="22.7012%" height="15" fill="rgb(238,224,15)" fg:x="68965" fg:w="21797"/><text x="72.0758%" y="398.50">arrow::py::(anonymous namespace)::Py..</text></g><g><title>arrow::py::(anonymous namespace)::PyListConverter&lt;arrow::ListType&gt;::AppendSequence (pyarrow/libarrow_python.so.2000) (21,797 samples, 22.70%)</title><rect x="71.8258%" y="404" width="22.7012%" height="15" fill="rgb(241,136,10)" fg:x="68965" fg:w="21797"/><text x="72.0758%" y="414.50">arrow::py::(anonymous namespace)::Py..</text></g><g><title>arrow::py::(anonymous namespace)::PyConverter::Extend (pyarrow/libarrow_python.so.2000) (21,795 samples, 22.70%)</title><rect x="71.8279%" y="420" width="22.6991%" height="15" fill="rgb(208,32,45)" fg:x="68967" fg:w="21795"/><text x="72.0779%" y="430.50">arrow::py::(anonymous namespace)::Py..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::py::internal::VisitSequence&lt;arrow::py::(anonymous namespace)::PyConverter::Extend(_object*, long, long)::{lambda(_object*, bool*)#1}&gt;(_object*, long, arrow::py::(anonymous namespace)::PyConverter::Extend(_object*, long, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (pyarrow/libarrow_python.so.2000) (21,789 samples, 22.69%)</title><rect x="71.8342%" y="436" width="22.6929%" height="15" fill="rgb(207,135,9)" fg:x="68973" fg:w="21789"/><text x="72.0842%" y="446.50">arrow::py::internal::VisitSequenceGe..</text></g><g><title>arrow::py::OwnedRef::~OwnedRef (pyarrow/libarrow_python.so.2000) (2,635 samples, 2.74%)</title><rect x="91.7827%" y="452" width="2.7443%" height="15" fill="rgb(206,86,44)" fg:x="88127" fg:w="2635"/><text x="92.0327%" y="462.50">ar..</text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib__Weakrefable (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (160 samples, 0.17%)</title><rect x="94.3604%" y="468" width="0.1666%" height="15" fill="rgb(245,177,15)" fg:x="90602" fg:w="160"/><text x="94.6104%" y="478.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (353 samples, 0.37%)</title><rect x="94.5728%" y="388" width="0.3676%" height="15" fill="rgb(206,64,50)" fg:x="90806" fg:w="353"/><text x="94.8228%" y="398.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (libc.so.6) (379 samples, 0.39%)</title><rect x="94.5728%" y="372" width="0.3947%" height="15" fill="rgb(234,36,40)" fg:x="90806" fg:w="379"/><text x="94.8228%" y="382.50"></text></g><g><title>arrow::py::ConvertPySequence (pyarrow/libarrow_python.so.2000) (22,321 samples, 23.25%)</title><rect x="71.7238%" y="356" width="23.2469%" height="15" fill="rgb(213,64,8)" fg:x="68867" fg:w="22321"/><text x="71.9738%" y="366.50">arrow::py::ConvertPySequence (pyarrow..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (2,667 samples, 2.78%)</title><rect x="94.9946%" y="372" width="2.7776%" height="15" fill="rgb(210,75,36)" fg:x="91211" fg:w="2667"/><text x="95.2446%" y="382.50">__..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (2,744 samples, 2.86%)</title><rect x="94.9936%" y="356" width="2.8578%" height="15" fill="rgb(229,88,21)" fg:x="91210" fg:w="2744"/><text x="95.2436%" y="366.50">pt..</text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:592) (25,164 samples, 26.21%)</title><rect x="71.6873%" y="308" width="26.2079%" height="15" fill="rgb(252,204,47)" fg:x="68832" fg:w="25164"/><text x="71.9373%" y="318.50">_convert_blocks_to_batches (arrakis_server..</text></g><g><title>array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (25,151 samples, 26.19%)</title><rect x="71.7008%" y="324" width="26.1943%" height="15" fill="rgb(208,77,27)" fg:x="68845" fg:w="25151"/><text x="71.9508%" y="334.50">array (pyarrow/lib.cpython-311-x86_64-linu..</text></g><g><title>lib__sequence_to_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (25,143 samples, 26.19%)</title><rect x="71.7092%" y="340" width="26.1860%" height="15" fill="rgb(221,76,26)" fg:x="68853" fg:w="25143"/><text x="71.9592%" y="350.50">lib__sequence_to_array (pyarrow/lib.cpytho..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (698 samples, 0.73%)</title><rect x="97.9972%" y="484" width="0.7270%" height="15" fill="rgb(225,139,18)" fg:x="94094" fg:w="698"/><text x="98.2472%" y="494.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (717 samples, 0.75%)</title><rect x="97.9972%" y="468" width="0.7467%" height="15" fill="rgb(230,137,11)" fg:x="94094" fg:w="717"/><text x="98.2472%" y="478.50"></text></g><g><title>arrow::py::NumPyConverter::ConvertData&lt;arrow::DoubleType&gt; (pyarrow/libarrow_python.so.2000) (726 samples, 0.76%)</title><rect x="97.9910%" y="420" width="0.7561%" height="15" fill="rgb(212,28,1)" fg:x="94088" fg:w="726"/><text x="98.2410%" y="430.50"></text></g><g><title>arrow::py::NumPyConverter::PrepareInputData&lt;arrow::DoubleType&gt; (pyarrow/libarrow_python.so.2000) (726 samples, 0.76%)</title><rect x="97.9910%" y="436" width="0.7561%" height="15" fill="rgb(248,164,17)" fg:x="94088" fg:w="726"/><text x="98.2410%" y="446.50"></text></g><g><title>arrow::py::NumPyBuffer::NumPyBuffer (pyarrow/libarrow_python.so.2000) (726 samples, 0.76%)</title><rect x="97.9910%" y="452" width="0.7561%" height="15" fill="rgb(222,171,42)" fg:x="94088" fg:w="726"/><text x="98.2410%" y="462.50"></text></g><g><title>arrow::py::NumPyConverter::VisitNative&lt;arrow::DoubleType&gt; (pyarrow/libarrow_python.so.2000) (753 samples, 0.78%)</title><rect x="97.9702%" y="404" width="0.7842%" height="15" fill="rgb(243,84,45)" fg:x="94068" fg:w="753"/><text x="98.2202%" y="414.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (287 samples, 0.30%)</title><rect x="98.7690%" y="484" width="0.2989%" height="15" fill="rgb(252,49,23)" fg:x="94835" fg:w="287"/><text x="99.0190%" y="494.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (293 samples, 0.31%)</title><rect x="98.7690%" y="468" width="0.3052%" height="15" fill="rgb(215,19,7)" fg:x="94835" fg:w="293"/><text x="99.0190%" y="478.50"></text></g><g><title>arrow::py::NumPyConverter::PrepareInputData&lt;arrow::FloatType&gt; (pyarrow/libarrow_python.so.2000) (297 samples, 0.31%)</title><rect x="98.7669%" y="436" width="0.3093%" height="15" fill="rgb(238,81,41)" fg:x="94833" fg:w="297"/><text x="99.0169%" y="446.50"></text></g><g><title>arrow::py::NumPyBuffer::NumPyBuffer (pyarrow/libarrow_python.so.2000) (297 samples, 0.31%)</title><rect x="98.7669%" y="452" width="0.3093%" height="15" fill="rgb(210,199,37)" fg:x="94833" fg:w="297"/><text x="99.0169%" y="462.50"></text></g><g><title>arrow::py::NumPyConverter::ConvertData&lt;arrow::FloatType&gt; (pyarrow/libarrow_python.so.2000) (299 samples, 0.31%)</title><rect x="98.7658%" y="420" width="0.3114%" height="15" fill="rgb(244,192,49)" fg:x="94832" fg:w="299"/><text x="99.0158%" y="430.50"></text></g><g><title>arrow::py::NumPyConverter::Convert (pyarrow/libarrow_python.so.2000) (1,071 samples, 1.12%)</title><rect x="97.9670%" y="372" width="1.1154%" height="15" fill="rgb(226,211,11)" fg:x="94065" fg:w="1071"/><text x="98.2170%" y="382.50"></text></g><g><title>arrow::VisitTypeInline&lt;arrow::py::NumPyConverter, &gt; (pyarrow/libarrow_python.so.2000) (1,071 samples, 1.12%)</title><rect x="97.9670%" y="388" width="1.1154%" height="15" fill="rgb(236,162,54)" fg:x="94065" fg:w="1071"/><text x="98.2170%" y="398.50"></text></g><g><title>arrow::py::NumPyConverter::VisitNative&lt;arrow::FloatType&gt; (pyarrow/libarrow_python.so.2000) (315 samples, 0.33%)</title><rect x="98.7544%" y="404" width="0.3281%" height="15" fill="rgb(220,229,9)" fg:x="94821" fg:w="315"/><text x="99.0044%" y="414.50"></text></g><g><title>arrow::py::NdarrayToArrow (pyarrow/libarrow_python.so.2000) (1,077 samples, 1.12%)</title><rect x="97.9618%" y="356" width="1.1217%" height="15" fill="rgb(250,87,22)" fg:x="94060" fg:w="1077"/><text x="98.2118%" y="366.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (464 samples, 0.48%)</title><rect x="99.1043%" y="372" width="0.4832%" height="15" fill="rgb(239,43,17)" fg:x="95157" fg:w="464"/><text x="99.3543%" y="382.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (479 samples, 0.50%)</title><rect x="99.1043%" y="356" width="0.4989%" height="15" fill="rgb(231,177,25)" fg:x="95157" fg:w="479"/><text x="99.3543%" y="366.50"></text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (1,587 samples, 1.65%)</title><rect x="97.9577%" y="340" width="1.6528%" height="15" fill="rgb(219,179,1)" fg:x="94056" fg:w="1587"/><text x="98.2077%" y="350.50"></text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:593) (1,653 samples, 1.72%)</title><rect x="97.8952%" y="308" width="1.7216%" height="15" fill="rgb(238,219,53)" fg:x="93996" fg:w="1653"/><text x="98.1452%" y="318.50"></text></g><g><title>array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (1,648 samples, 1.72%)</title><rect x="97.9004%" y="324" width="1.7164%" height="15" fill="rgb(232,167,36)" fg:x="94001" fg:w="1648"/><text x="98.1504%" y="334.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (185 samples, 0.19%)</title><rect x="99.6855%" y="372" width="0.1927%" height="15" fill="rgb(244,19,51)" fg:x="95715" fg:w="185"/><text x="99.9355%" y="382.50"></text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:597) (229 samples, 0.24%)</title><rect x="99.6438%" y="308" width="0.2385%" height="15" fill="rgb(224,6,22)" fg:x="95675" fg:w="229"/><text x="99.8938%" y="318.50"></text></g><g><title>from_arrays (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (227 samples, 0.24%)</title><rect x="99.6459%" y="324" width="0.2364%" height="15" fill="rgb(224,145,5)" fg:x="95677" fg:w="227"/><text x="99.8959%" y="334.50"></text></g><g><title>validate (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (198 samples, 0.21%)</title><rect x="99.6761%" y="340" width="0.2062%" height="15" fill="rgb(234,130,49)" fg:x="95706" fg:w="198"/><text x="99.9261%" y="350.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (189 samples, 0.20%)</title><rect x="99.6855%" y="356" width="0.1968%" height="15" fill="rgb(254,6,2)" fg:x="95715" fg:w="189"/><text x="99.9355%" y="366.50"></text></g><g><title>_generate_stream (arrakis_server/server.py:614) (95,314 samples, 99.27%)</title><rect x="0.7072%" y="292" width="99.2678%" height="15" fill="rgb(208,96,46)" fg:x="679" fg:w="95314"/><text x="0.9572%" y="302.50">_generate_stream (arrakis_server/server.py:614)</text></g><g><title>all (96,017 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="96017"/><text x="0.2500%" y="62.50"></text></g><g><title>clone3 (libc.so.6) (96,010 samples, 99.99%)</title><rect x="0.0073%" y="68" width="99.9927%" height="15" fill="rgb(233,210,1)" fg:x="7" fg:w="96010"/><text x="0.2573%" y="78.50">clone3 (libc.so.6)</text></g><g><title>start_thread (libc.so.6) (96,010 samples, 99.99%)</title><rect x="0.0073%" y="84" width="99.9927%" height="15" fill="rgb(244,137,37)" fg:x="7" fg:w="96010"/><text x="0.2573%" y="94.50">start_thread (libc.so.6)</text></g><g><title>grpc_core::(anonymous namespace)::ThreadInternalsPosix::ThreadInternalsPosix(char const*, void (*)(void*), void*, bool*, grpc_core::Thread::Options const&amp;)::{lambda(void*)#1}::_FUN (pyarrow/libarrow_flight.so.2000) (96,010 samples, 99.99%)</title><rect x="0.0073%" y="100" width="99.9927%" height="15" fill="rgb(240,136,2)" fg:x="7" fg:w="96010"/><text x="0.2573%" y="110.50">grpc_core::(anonymous namespace)::ThreadInternalsPosix::ThreadInternalsPosix(char const*, void (*)(void*), void*, bool*, grpc_core::Thread::Options const&amp;)::{lambda(vo..</text></g><g><title>grpc::ThreadManager::WorkerThread::Run (pyarrow/libarrow_flight.so.2000) (96,010 samples, 99.99%)</title><rect x="0.0073%" y="116" width="99.9927%" height="15" fill="rgb(239,18,37)" fg:x="7" fg:w="96010"/><text x="0.2573%" y="126.50">grpc::ThreadManager::WorkerThread::Run (pyarrow/libarrow_flight.so.2000)</text></g><g><title>grpc::ThreadManager::MainWorkLoop (pyarrow/libarrow_flight.so.2000) (96,010 samples, 99.99%)</title><rect x="0.0073%" y="132" width="99.9927%" height="15" fill="rgb(218,185,22)" fg:x="7" fg:w="96010"/><text x="0.2573%" y="142.50">grpc::ThreadManager::MainWorkLoop (pyarrow/libarrow_flight.so.2000)</text></g><g><title>grpc::Server::SyncRequest::ContinueRunAfterInterception (pyarrow/libarrow_flight.so.2000) (96,010 samples, 99.99%)</title><rect x="0.0073%" y="148" width="99.9927%" height="15" fill="rgb(225,218,4)" fg:x="7" fg:w="96010"/><text x="0.2573%" y="158.50">grpc::Server::SyncRequest::ContinueRunAfterInterception (pyarrow/libarrow_flight.so.2000)</text></g><g><title>grpc::internal::ServerStreamingHandler&lt;arrow::flight::protocol::FlightService::Service, arrow::flight::protocol::Ticket, arrow::flight::protocol::FlightData&gt;::RunHandler (pyarrow/libarrow_flight.so.2000) (96,010 samples, 99.99%)</title><rect x="0.0073%" y="164" width="99.9927%" height="15" fill="rgb(230,182,32)" fg:x="7" fg:w="96010"/><text x="0.2573%" y="174.50">grpc::internal::ServerStreamingHandler&lt;arrow::flight::protocol::FlightService::Service, arrow::flight::protocol::Ticket, arrow::flight::protocol::FlightData&gt;::RunHandl..</text></g><g><title>std::_Function_handler&lt;grpc::Status(arrow::flight::protocol::FlightService::Service*, grpc::ServerContext*, arrow::flight::protocol::Ticket const*, grpc::ServerWriter&lt;arrow::flight::protocol::FlightData&gt;*), arrow::flight::protocol::FlightService::Service()::Service::{lambda(arrow::flight::protocol::FlightService::Service*, grpc::ServerContext*, arrow::flight::protocol::Ticket const*, grpc::ServerWriter&lt;arrow::flight::protocol::FlightData&gt;*)#6}&gt;::_M_invoke (pyarrow/libarrow_flight.so.2000) (96,010 samples, 99.99%)</title><rect x="0.0073%" y="180" width="99.9927%" height="15" fill="rgb(242,56,43)" fg:x="7" fg:w="96010"/><text x="0.2573%" y="190.50">std::_Function_handler&lt;grpc::Status(arrow::flight::protocol::FlightService::Service*, grpc::ServerContext*, arrow::flight::protocol::Ticket const*, grpc::ServerWriter&lt;..</text></g><g><title>arrow::flight::transport::grpc::(anonymous namespace)::GrpcServiceHandler::DoGet (pyarrow/libarrow_flight.so.2000) (96,010 samples, 99.99%)</title><rect x="0.0073%" y="196" width="99.9927%" height="15" fill="rgb(233,99,24)" fg:x="7" fg:w="96010"/><text x="0.2573%" y="206.50">arrow::flight::transport::grpc::(anonymous namespace)::GrpcServiceHandler::DoGet (pyarrow/libarrow_flight.so.2000)</text></g><g><title>arrow::flight::internal::ServerTransport::DoGet (pyarrow/libarrow_flight.so.2000) (96,010 samples, 99.99%)</title><rect x="0.0073%" y="212" width="99.9927%" height="15" fill="rgb(234,209,42)" fg:x="7" fg:w="96010"/><text x="0.2573%" y="222.50">arrow::flight::internal::ServerTransport::DoGet (pyarrow/libarrow_flight.so.2000)</text></g><g><title>arrow::py::flight::PyFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000) (96,010 samples, 99.99%)</title><rect x="0.0073%" y="228" width="99.9927%" height="15" fill="rgb(227,7,12)" fg:x="7" fg:w="96010"/><text x="0.2573%" y="238.50">arrow::py::flight::PyFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000)</text></g><g><title>arrow::py::flight::PyGeneratorFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000) (96,010 samples, 99.99%)</title><rect x="0.0073%" y="244" width="99.9927%" height="15" fill="rgb(245,203,43)" fg:x="7" fg:w="96010"/><text x="0.2573%" y="254.50">arrow::py::flight::PyGeneratorFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000)</text></g><g><title>std::_Function_handler&lt;arrow::Status(_object*, arrow::flight::FlightPayload*), arrow::Status (*)(void*, arrow::flight::FlightPayload*)&gt;::_M_invoke (pyarrow/_flight.cpython-311-x86_64-linux-gnu.so) (95,339 samples, 99.29%)</title><rect x="0.7061%" y="260" width="99.2939%" height="15" fill="rgb(238,205,33)" fg:x="678" fg:w="95339"/><text x="0.9561%" y="270.50">std::_Function_handler&lt;arrow::Status(_object*, arrow::flight::FlightPayload*), arrow::Status (*)(void*, arrow::flight::FlightPayload*)&gt;::_M_invoke (pyarrow/_flight.cp..</text></g><g><title>_flight__data_stream_next (pyarrow/_flight.cpython-311-x86_64-linux-gnu.so) (95,339 samples, 99.29%)</title><rect x="0.7061%" y="276" width="99.2939%" height="15" fill="rgb(231,56,7)" fg:x="678" fg:w="95339"/><text x="0.9561%" y="286.50">_flight__data_stream_next (pyarrow/_flight.cpython-311-x86_64-linux-gnu.so)</text></g></svg></svg>