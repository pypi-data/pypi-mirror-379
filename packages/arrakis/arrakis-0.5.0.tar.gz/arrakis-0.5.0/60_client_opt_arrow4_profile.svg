<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="634" onload="init(evt)" viewBox="0 0 1200 634" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="634" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record --native --rate 20 -o profile.svg --pid 1173666</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="623.00"> </text><svg id="frames" x="10" width="1180" total_samples="16093"><g><title>__futex_abstimed_wait_common (libc.so.6) (408 samples, 2.54%)</title><rect x="0.0062%" y="276" width="2.5353%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="408"/><text x="0.2562%" y="286.50">__..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (33 samples, 0.21%)</title><rect x="2.5415%" y="276" width="0.2051%" height="15" fill="rgb(217,0,24)" fg:x="409" fg:w="33"/><text x="2.7915%" y="286.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (33 samples, 0.21%)</title><rect x="2.5415%" y="292" width="0.2051%" height="15" fill="rgb(221,193,54)" fg:x="409" fg:w="33"/><text x="2.7915%" y="302.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (442 samples, 2.75%)</title><rect x="0.0062%" y="260" width="2.7465%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="442"/><text x="0.2562%" y="270.50">pt..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (434 samples, 2.70%)</title><rect x="2.8087%" y="404" width="2.6968%" height="15" fill="rgb(208,68,35)" fg:x="452" fg:w="434"/><text x="3.0587%" y="414.50">__..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (460 samples, 2.86%)</title><rect x="2.8087%" y="388" width="2.8584%" height="15" fill="rgb(232,128,0)" fg:x="452" fg:w="460"/><text x="3.0587%" y="398.50">pt..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (26 samples, 0.16%)</title><rect x="5.5055%" y="404" width="0.1616%" height="15" fill="rgb(207,160,47)" fg:x="886" fg:w="26"/><text x="5.7555%" y="414.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (26 samples, 0.16%)</title><rect x="5.5055%" y="420" width="0.1616%" height="15" fill="rgb(228,23,34)" fg:x="886" fg:w="26"/><text x="5.7555%" y="430.50"></text></g><g><title>CallState_end (confluent_kafka/cimpl.cpython-311-x86_64-linux-gnu.so) (472 samples, 2.93%)</title><rect x="2.8087%" y="372" width="2.9330%" height="15" fill="rgb(218,30,26)" fg:x="452" fg:w="472"/><text x="3.0587%" y="382.50">Ca..</text></g><g><title>read (arrakis_backend_kafka/backend.py:339) (6,682 samples, 41.52%)</title><rect x="2.7962%" y="340" width="41.5212%" height="15" fill="rgb(220,122,19)" fg:x="450" fg:w="6682"/><text x="3.0462%" y="350.50">read (arrakis_backend_kafka/backend.py:339)</text></g><g><title>Consumer_poll (confluent_kafka/cimpl.cpython-311-x86_64-linux-gnu.so) (6,682 samples, 41.52%)</title><rect x="2.7962%" y="356" width="41.5212%" height="15" fill="rgb(250,228,42)" fg:x="450" fg:w="6682"/><text x="3.0462%" y="366.50">Consumer_poll (confluent_kafka/cimpl.cpython-311-x86_64-linux-gnu.so)</text></g><g><title>rd_kafka_consume0 (librdkafka-9ddca43a.so.1) (6,203 samples, 38.54%)</title><rect x="5.7727%" y="372" width="38.5447%" height="15" fill="rgb(240,193,28)" fg:x="929" fg:w="6203"/><text x="6.0227%" y="382.50">rd_kafka_consume0 (librdkafka-9ddca43a.so.1)</text></g><g><title>rd_kafka_q_pop_serve.localalias (librdkafka-9ddca43a.so.1) (6,201 samples, 38.53%)</title><rect x="5.7851%" y="388" width="38.5323%" height="15" fill="rgb(216,20,37)" fg:x="931" fg:w="6201"/><text x="6.0351%" y="398.50">rd_kafka_q_pop_serve.localalias (librdkafka-9ddca43a.so.1)</text></g><g><title>cnd_timedwait_abs (librdkafka-9ddca43a.so.1) (6,200 samples, 38.53%)</title><rect x="5.7913%" y="404" width="38.5261%" height="15" fill="rgb(206,188,39)" fg:x="932" fg:w="6200"/><text x="6.0413%" y="414.50">cnd_timedwait_abs (librdkafka-9ddca43a.so.1)</text></g><g><title>cnd_timedwait_ms (librdkafka-9ddca43a.so.1) (6,200 samples, 38.53%)</title><rect x="5.7913%" y="420" width="38.5261%" height="15" fill="rgb(217,207,13)" fg:x="932" fg:w="6200"/><text x="6.0413%" y="430.50">cnd_timedwait_ms (librdkafka-9ddca43a.so.1)</text></g><g><title>cnd_timedwait@GLIBC_2.28 (libc.so.6) (6,200 samples, 38.53%)</title><rect x="5.7913%" y="436" width="38.5261%" height="15" fill="rgb(231,73,38)" fg:x="932" fg:w="6200"/><text x="6.0413%" y="446.50">cnd_timedwait@GLIBC_2.28 (libc.so.6)</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (6,200 samples, 38.53%)</title><rect x="5.7913%" y="452" width="38.5261%" height="15" fill="rgb(225,20,46)" fg:x="932" fg:w="6200"/><text x="6.0413%" y="462.50">pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6)</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (6,200 samples, 38.53%)</title><rect x="5.7913%" y="468" width="38.5261%" height="15" fill="rgb(210,31,41)" fg:x="932" fg:w="6200"/><text x="6.0413%" y="478.50">__futex_abstimed_wait_common (libc.so.6)</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (147 samples, 0.91%)</title><rect x="44.3423%" y="404" width="0.9134%" height="15" fill="rgb(221,200,47)" fg:x="7136" fg:w="147"/><text x="44.5923%" y="414.50"></text></g><g><title>__exit__ (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (157 samples, 0.98%)</title><rect x="44.3298%" y="356" width="0.9756%" height="15" fill="rgb(226,26,5)" fg:x="7134" fg:w="157"/><text x="44.5798%" y="366.50"></text></g><g><title>close (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (157 samples, 0.98%)</title><rect x="44.3298%" y="372" width="0.9756%" height="15" fill="rgb(249,33,26)" fg:x="7134" fg:w="157"/><text x="44.5798%" y="382.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (155 samples, 0.96%)</title><rect x="44.3423%" y="388" width="0.9632%" height="15" fill="rgb(235,183,28)" fg:x="7136" fg:w="155"/><text x="44.5923%" y="398.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (396 samples, 2.46%)</title><rect x="45.3178%" y="484" width="2.4607%" height="15" fill="rgb(221,5,38)" fg:x="7293" fg:w="396"/><text x="45.5678%" y="494.50">__..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (417 samples, 2.59%)</title><rect x="45.3178%" y="468" width="2.5912%" height="15" fill="rgb(247,18,42)" fg:x="7293" fg:w="417"/><text x="45.5678%" y="478.50">pt..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (21 samples, 0.13%)</title><rect x="47.7785%" y="484" width="0.1305%" height="15" fill="rgb(241,131,45)" fg:x="7689" fg:w="21"/><text x="48.0285%" y="494.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (21 samples, 0.13%)</title><rect x="47.7785%" y="500" width="0.1305%" height="15" fill="rgb(249,31,29)" fg:x="7689" fg:w="21"/><text x="48.0285%" y="510.50"></text></g><g><title>arrow::ipc::RecordBatchStreamReaderImpl::~RecordBatchStreamReaderImpl (pyarrow/libarrow.so.2000) (421 samples, 2.62%)</title><rect x="45.3116%" y="372" width="2.6160%" height="15" fill="rgb(225,111,53)" fg:x="7292" fg:w="421"/><text x="45.5616%" y="382.50">ar..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold (pyarrow/libarrow.so.2000) (421 samples, 2.62%)</title><rect x="45.3116%" y="388" width="2.6160%" height="15" fill="rgb(238,160,17)" fg:x="7292" fg:w="421"/><text x="45.5616%" y="398.50">st..</text></g><g><title>arrow::io::BufferReader::~BufferReader (pyarrow/libarrow.so.2000) (421 samples, 2.62%)</title><rect x="45.3116%" y="404" width="2.6160%" height="15" fill="rgb(214,148,48)" fg:x="7292" fg:w="421"/><text x="45.5616%" y="414.50">ar..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (pyarrow/libarrow.so.2000) (421 samples, 2.62%)</title><rect x="45.3116%" y="420" width="2.6160%" height="15" fill="rgb(232,36,49)" fg:x="7292" fg:w="421"/><text x="45.5616%" y="430.50">st..</text></g><g><title>std::_Sp_counted_ptr&lt;arrow::py::PyBuffer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (pyarrow/libarrow_python.so.2000) (421 samples, 2.62%)</title><rect x="45.3116%" y="436" width="2.6160%" height="15" fill="rgb(209,103,24)" fg:x="7292" fg:w="421"/><text x="45.5616%" y="446.50">st..</text></g><g><title>arrow::py::PyBuffer::~PyBuffer (pyarrow/libarrow_python.so.2000) (421 samples, 2.62%)</title><rect x="45.3116%" y="452" width="2.6160%" height="15" fill="rgb(229,88,8)" fg:x="7292" fg:w="421"/><text x="45.5616%" y="462.50">ar..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (559 samples, 3.47%)</title><rect x="47.9277%" y="388" width="3.4736%" height="15" fill="rgb(213,181,19)" fg:x="7713" fg:w="559"/><text x="48.1777%" y="398.50">__f..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (585 samples, 3.64%)</title><rect x="47.9277%" y="372" width="3.6351%" height="15" fill="rgb(254,191,54)" fg:x="7713" fg:w="585"/><text x="48.1777%" y="382.50">pthr..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (26 samples, 0.16%)</title><rect x="51.4012%" y="388" width="0.1616%" height="15" fill="rgb(241,83,37)" fg:x="8272" fg:w="26"/><text x="51.6512%" y="398.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (26 samples, 0.16%)</title><rect x="51.4012%" y="404" width="0.1616%" height="15" fill="rgb(233,36,39)" fg:x="8272" fg:w="26"/><text x="51.6512%" y="414.50"></text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_RecordBatchReader (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (1,010 samples, 6.28%)</title><rect x="45.3054%" y="356" width="6.2760%" height="15" fill="rgb(226,3,54)" fg:x="7291" fg:w="1010"/><text x="45.5554%" y="366.50">__pyx_tp..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (581 samples, 3.61%)</title><rect x="51.6622%" y="420" width="3.6103%" height="15" fill="rgb(245,192,40)" fg:x="8314" fg:w="581"/><text x="51.9122%" y="430.50">__fu..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (613 samples, 3.81%)</title><rect x="51.6622%" y="404" width="3.8091%" height="15" fill="rgb(238,167,29)" fg:x="8314" fg:w="613"/><text x="51.9122%" y="414.50">pthr..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (32 samples, 0.20%)</title><rect x="55.2725%" y="420" width="0.1988%" height="15" fill="rgb(232,182,51)" fg:x="8895" fg:w="32"/><text x="55.5225%" y="430.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (32 samples, 0.20%)</title><rect x="55.2725%" y="436" width="0.1988%" height="15" fill="rgb(231,60,39)" fg:x="8895" fg:w="32"/><text x="55.5225%" y="446.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:344) (1,797 samples, 11.17%)</title><rect x="44.3174%" y="340" width="11.1663%" height="15" fill="rgb(208,69,12)" fg:x="7132" fg:w="1797"/><text x="44.5674%" y="350.50">read (arrakis_ba..</text></g><g><title>open_stream (pyarrow/ipc.py:190) (628 samples, 3.90%)</title><rect x="51.5814%" y="356" width="3.9023%" height="15" fill="rgb(235,93,37)" fg:x="8301" fg:w="628"/><text x="51.8314%" y="366.50">open..</text></g><g><title>__init__ (pyarrow/ipc.py:52) (627 samples, 3.90%)</title><rect x="51.5876%" y="372" width="3.8961%" height="15" fill="rgb(213,116,39)" fg:x="8302" fg:w="627"/><text x="51.8376%" y="382.50">__in..</text></g><g><title>_open (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (627 samples, 3.90%)</title><rect x="51.5876%" y="388" width="3.8961%" height="15" fill="rgb(222,207,29)" fg:x="8302" fg:w="627"/><text x="51.8376%" y="398.50">_ope..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (1,300 samples, 8.08%)</title><rect x="55.6080%" y="404" width="8.0780%" height="15" fill="rgb(206,96,30)" fg:x="8949" fg:w="1300"/><text x="55.8580%" y="414.50">__futex_abs..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (59 samples, 0.37%)</title><rect x="63.6861%" y="404" width="0.3666%" height="15" fill="rgb(218,138,4)" fg:x="10249" fg:w="59"/><text x="63.9361%" y="414.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (59 samples, 0.37%)</title><rect x="63.6861%" y="420" width="0.3666%" height="15" fill="rgb(250,191,14)" fg:x="10249" fg:w="59"/><text x="63.9361%" y="430.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (1,362 samples, 8.46%)</title><rect x="55.6080%" y="388" width="8.4633%" height="15" fill="rgb(239,60,40)" fg:x="8949" fg:w="1362"/><text x="55.8580%" y="398.50">pthread_cond..</text></g><g><title>read (arrakis_backend_kafka/backend.py:349) (1,386 samples, 8.61%)</title><rect x="55.4900%" y="340" width="8.6124%" height="15" fill="rgb(206,27,48)" fg:x="8930" fg:w="1386"/><text x="55.7400%" y="350.50">read (arraki..</text></g><g><title>read_all_batches (arrakis_backend_kafka/backend.py:422) (1,385 samples, 8.61%)</title><rect x="55.4962%" y="356" width="8.6062%" height="15" fill="rgb(225,35,8)" fg:x="8931" fg:w="1385"/><text x="55.7462%" y="366.50">read_all_bat..</text></g><g><title>read_next_batch (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (1,384 samples, 8.60%)</title><rect x="55.5024%" y="372" width="8.6000%" height="15" fill="rgb(250,213,24)" fg:x="8932" fg:w="1384"/><text x="55.7524%" y="382.50">read_next_ba..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (1,520 samples, 9.45%)</title><rect x="64.2888%" y="404" width="9.4451%" height="15" fill="rgb(247,123,22)" fg:x="10346" fg:w="1520"/><text x="64.5388%" y="414.50">__futex_abstim..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (71 samples, 0.44%)</title><rect x="73.7339%" y="404" width="0.4412%" height="15" fill="rgb(231,138,38)" fg:x="11866" fg:w="71"/><text x="73.9839%" y="414.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (71 samples, 0.44%)</title><rect x="73.7339%" y="420" width="0.4412%" height="15" fill="rgb(231,145,46)" fg:x="11866" fg:w="71"/><text x="73.9839%" y="430.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (1,592 samples, 9.89%)</title><rect x="64.2888%" y="388" width="9.8925%" height="15" fill="rgb(251,118,11)" fg:x="10346" fg:w="1592"/><text x="64.5388%" y="398.50">pthread_cond_t..</text></g><g><title>read (arrakis_backend_kafka/backend.py:352) (1,627 samples, 10.11%)</title><rect x="64.1397%" y="340" width="10.1100%" height="15" fill="rgb(217,147,25)" fg:x="10322" fg:w="1627"/><text x="64.3897%" y="350.50">read (arrakis_b..</text></g><g><title>wrapper (pyarrow/compute.py:269) (1,624 samples, 10.09%)</title><rect x="64.1583%" y="356" width="10.0913%" height="15" fill="rgb(247,81,37)" fg:x="10325" fg:w="1624"/><text x="64.4083%" y="366.50">wrapper (pyarro..</text></g><g><title>call (pyarrow/_compute.cpython-311-x86_64-linux-gnu.so) (1,624 samples, 10.09%)</title><rect x="64.1583%" y="372" width="10.0913%" height="15" fill="rgb(209,12,38)" fg:x="10325" fg:w="1624"/><text x="64.4083%" y="382.50">call (pyarrow/_..</text></g><g><title>arrow::compute::internal::ListTakeExec (pyarrow/libarrow.so.2000) (37 samples, 0.23%)</title><rect x="74.3926%" y="580" width="0.2299%" height="15" fill="rgb(227,1,9)" fg:x="11972" fg:w="37"/><text x="74.6426%" y="590.50"></text></g><g><title>arrow::compute::internal::(anonymous namespace)::TakeExec&lt;arrow::compute::internal::(anonymous namespace)::ListSelectionImpl&lt;arrow::ListType&gt; &gt; (pyarrow/libarrow.so.2000) (37 samples, 0.23%)</title><rect x="74.3926%" y="596" width="0.2299%" height="15" fill="rgb(248,47,43)" fg:x="11972" fg:w="37"/><text x="74.6426%" y="606.50"></text></g><g><title>arrow::compute::detail::(anonymous namespace)::VectorExecutor::Exec (pyarrow/libarrow.so.2000) (39 samples, 0.24%)</title><rect x="74.3864%" y="564" width="0.2423%" height="15" fill="rgb(221,10,30)" fg:x="11971" fg:w="39"/><text x="74.6364%" y="574.50"></text></g><g><title>arrow::compute::detail::(anonymous namespace)::VectorExecutor::Execute (pyarrow/libarrow.so.2000) (42 samples, 0.26%)</title><rect x="74.3740%" y="548" width="0.2610%" height="15" fill="rgb(210,229,1)" fg:x="11969" fg:w="42"/><text x="74.6240%" y="558.50"></text></g><g><title>arrow::compute::CallFunction (pyarrow/libarrow.so.2000) (48 samples, 0.30%)</title><rect x="74.3429%" y="436" width="0.2983%" height="15" fill="rgb(222,148,37)" fg:x="11964" fg:w="48"/><text x="74.5929%" y="446.50"></text></g><g><title>arrow::compute::MetaFunction::Execute (pyarrow/libarrow.so.2000) (47 samples, 0.29%)</title><rect x="74.3491%" y="452" width="0.2921%" height="15" fill="rgb(234,67,33)" fg:x="11965" fg:w="47"/><text x="74.5991%" y="462.50"></text></g><g><title>arrow::compute::internal::(anonymous namespace)::TakeMetaFunction::ExecuteImpl (pyarrow/libarrow.so.2000) (47 samples, 0.29%)</title><rect x="74.3491%" y="468" width="0.2921%" height="15" fill="rgb(247,98,35)" fg:x="11965" fg:w="47"/><text x="74.5991%" y="478.50"></text></g><g><title>arrow::compute::internal::(anonymous namespace)::TakeMetaFunction::TakeAAA (pyarrow/libarrow.so.2000) (47 samples, 0.29%)</title><rect x="74.3491%" y="484" width="0.2921%" height="15" fill="rgb(247,138,52)" fg:x="11965" fg:w="47"/><text x="74.5991%" y="494.50"></text></g><g><title>arrow::compute::Function::Execute (pyarrow/libarrow.so.2000) (47 samples, 0.29%)</title><rect x="74.3491%" y="500" width="0.2921%" height="15" fill="rgb(213,79,30)" fg:x="11965" fg:w="47"/><text x="74.5991%" y="510.50"></text></g><g><title>arrow::compute::(anonymous namespace)::ExecuteInternal (pyarrow/libarrow.so.2000) (47 samples, 0.29%)</title><rect x="74.3491%" y="516" width="0.2921%" height="15" fill="rgb(246,177,23)" fg:x="11965" fg:w="47"/><text x="74.5991%" y="526.50"></text></g><g><title>arrow::compute::detail::FunctionExecutorImpl::Execute (pyarrow/libarrow.so.2000) (44 samples, 0.27%)</title><rect x="74.3677%" y="532" width="0.2734%" height="15" fill="rgb(230,62,27)" fg:x="11968" fg:w="44"/><text x="74.6177%" y="542.50"></text></g><g><title>arrow::compute::Take (pyarrow/libarrow.so.2000) (50 samples, 0.31%)</title><rect x="74.3429%" y="420" width="0.3107%" height="15" fill="rgb(216,154,8)" fg:x="11964" fg:w="50"/><text x="74.5929%" y="430.50"></text></g><g><title>arrow::compute::MetaFunction::Execute (pyarrow/libarrow.so.2000) (54 samples, 0.34%)</title><rect x="74.3305%" y="388" width="0.3355%" height="15" fill="rgb(244,35,45)" fg:x="11962" fg:w="54"/><text x="74.5805%" y="398.50"></text></g><g><title>arrow::compute::internal::(anonymous namespace)::FilterMetaFunction::ExecuteImpl (pyarrow/libarrow.so.2000) (54 samples, 0.34%)</title><rect x="74.3305%" y="404" width="0.3355%" height="15" fill="rgb(251,115,12)" fg:x="11962" fg:w="54"/><text x="74.5805%" y="414.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (1,504 samples, 9.35%)</title><rect x="74.6971%" y="404" width="9.3457%" height="15" fill="rgb(240,54,50)" fg:x="12021" fg:w="1504"/><text x="74.9471%" y="414.50">__futex_absti..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (1,599 samples, 9.94%)</title><rect x="74.6971%" y="388" width="9.9360%" height="15" fill="rgb(233,84,52)" fg:x="12021" fg:w="1599"/><text x="74.9471%" y="398.50">pthread_cond_t..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (95 samples, 0.59%)</title><rect x="84.0428%" y="404" width="0.5903%" height="15" fill="rgb(207,117,47)" fg:x="13525" fg:w="95"/><text x="84.2928%" y="414.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (95 samples, 0.59%)</title><rect x="84.0428%" y="420" width="0.5903%" height="15" fill="rgb(249,43,39)" fg:x="13525" fg:w="95"/><text x="84.2928%" y="430.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:356) (1,673 samples, 10.40%)</title><rect x="74.2745%" y="340" width="10.3958%" height="15" fill="rgb(209,38,44)" fg:x="11953" fg:w="1673"/><text x="74.5245%" y="350.50">read (arrakis_b..</text></g><g><title>wrapper (pyarrow/compute.py:269) (1,669 samples, 10.37%)</title><rect x="74.2994%" y="356" width="10.3710%" height="15" fill="rgb(236,212,23)" fg:x="11957" fg:w="1669"/><text x="74.5494%" y="366.50">wrapper (pyarro..</text></g><g><title>call (pyarrow/_compute.cpython-311-x86_64-linux-gnu.so) (1,669 samples, 10.37%)</title><rect x="74.2994%" y="372" width="10.3710%" height="15" fill="rgb(242,79,21)" fg:x="11957" fg:w="1669"/><text x="74.5494%" y="382.50">call (pyarrow/_..</text></g><g><title>pull (arrakis/mux.py:164) (17 samples, 0.11%)</title><rect x="84.7139%" y="356" width="0.1056%" height="15" fill="rgb(211,96,35)" fg:x="13633" fg:w="17"/><text x="84.9639%" y="366.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:360) (21 samples, 0.13%)</title><rect x="84.6952%" y="340" width="0.1305%" height="15" fill="rgb(253,215,40)" fg:x="13630" fg:w="21"/><text x="84.9452%" y="350.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (135 samples, 0.84%)</title><rect x="84.8941%" y="484" width="0.8389%" height="15" fill="rgb(211,81,21)" fg:x="13662" fg:w="135"/><text x="85.1441%" y="494.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeWriter (pyarrow/libarrow_python.so.2000) (153 samples, 0.95%)</title><rect x="84.8754%" y="436" width="0.9507%" height="15" fill="rgb(208,190,38)" fg:x="13659" fg:w="153"/><text x="85.1254%" y="446.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::PandasWriter (pyarrow/libarrow_python.so.2000) (153 samples, 0.95%)</title><rect x="84.8754%" y="452" width="0.9507%" height="15" fill="rgb(235,213,38)" fg:x="13659" fg:w="153"/><text x="85.1254%" y="462.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (150 samples, 0.93%)</title><rect x="84.8941%" y="468" width="0.9321%" height="15" fill="rgb(237,122,38)" fg:x="13662" fg:w="150"/><text x="85.1441%" y="478.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (260 samples, 1.62%)</title><rect x="85.8448%" y="484" width="1.6156%" height="15" fill="rgb(244,218,35)" fg:x="13815" fg:w="260"/><text x="86.0948%" y="494.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::GetSeriesResult (pyarrow/libarrow_python.so.2000) (285 samples, 1.77%)</title><rect x="85.8261%" y="436" width="1.7710%" height="15" fill="rgb(240,68,47)" fg:x="13812" fg:w="285"/><text x="86.0761%" y="446.50">a..</text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::MakeBlock1D (pyarrow/libarrow_python.so.2000) (285 samples, 1.77%)</title><rect x="85.8261%" y="452" width="1.7710%" height="15" fill="rgb(210,16,53)" fg:x="13812" fg:w="285"/><text x="86.0761%" y="462.50">a..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (282 samples, 1.75%)</title><rect x="85.8448%" y="468" width="1.7523%" height="15" fill="rgb(235,124,12)" fg:x="13815" fg:w="282"/><text x="86.0948%" y="478.50"></text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (22 samples, 0.14%)</title><rect x="87.4604%" y="484" width="0.1367%" height="15" fill="rgb(224,169,11)" fg:x="14075" fg:w="22"/><text x="87.7104%" y="494.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (22 samples, 0.14%)</title><rect x="87.4604%" y="500" width="0.1367%" height="15" fill="rgb(250,166,2)" fg:x="14075" fg:w="22"/><text x="87.7104%" y="510.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (136 samples, 0.85%)</title><rect x="87.6219%" y="484" width="0.8451%" height="15" fill="rgb(242,216,29)" fg:x="14101" fg:w="136"/><text x="87.8719%" y="494.50"></text></g><g><title>arrow::py::ConvertArrayToPandas (pyarrow/libarrow_python.so.2000) (586 samples, 3.64%)</title><rect x="84.8754%" y="404" width="3.6413%" height="15" fill="rgb(230,116,27)" fg:x="13659" fg:w="586"/><text x="85.1254%" y="414.50">arro..</text></g><g><title>arrow::py::ConvertChunkedArrayToPandas (pyarrow/libarrow_python.so.2000) (586 samples, 3.64%)</title><rect x="84.8754%" y="420" width="3.6413%" height="15" fill="rgb(228,99,48)" fg:x="13659" fg:w="586"/><text x="85.1254%" y="430.50">arro..</text></g><g><title>arrow::py::(anonymous namespace)::TypedPandasWriter&lt;7&gt;::TransferSingle (pyarrow/libarrow_python.so.2000) (148 samples, 0.92%)</title><rect x="87.5971%" y="436" width="0.9197%" height="15" fill="rgb(253,11,6)" fg:x="14097" fg:w="148"/><text x="87.8471%" y="446.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeNumPyView (pyarrow/libarrow_python.so.2000) (148 samples, 0.92%)</title><rect x="87.5971%" y="452" width="0.9197%" height="15" fill="rgb(247,143,39)" fg:x="14097" fg:w="148"/><text x="87.8471%" y="462.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (144 samples, 0.89%)</title><rect x="87.6219%" y="468" width="0.8948%" height="15" fill="rgb(236,97,10)" fg:x="14101" fg:w="144"/><text x="87.8719%" y="478.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (482 samples, 3.00%)</title><rect x="88.5230%" y="420" width="2.9951%" height="15" fill="rgb(233,208,19)" fg:x="14246" fg:w="482"/><text x="88.7730%" y="430.50">__f..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (39 samples, 0.24%)</title><rect x="91.5181%" y="420" width="0.2423%" height="15" fill="rgb(216,164,2)" fg:x="14728" fg:w="39"/><text x="91.7681%" y="430.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (39 samples, 0.24%)</title><rect x="91.5181%" y="436" width="0.2423%" height="15" fill="rgb(220,129,5)" fg:x="14728" fg:w="39"/><text x="91.7681%" y="446.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (522 samples, 3.24%)</title><rect x="88.5230%" y="404" width="3.2436%" height="15" fill="rgb(242,17,10)" fg:x="14246" fg:w="522"/><text x="88.7730%" y="414.50">pth..</text></g><g><title>from_row_batch (arrakis/block.py:403) (1,116 samples, 6.93%)</title><rect x="84.8381%" y="372" width="6.9347%" height="15" fill="rgb(242,107,0)" fg:x="13653" fg:w="1116"/><text x="85.0881%" y="382.50">from_row_..</text></g><g><title>to_numpy (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (1,111 samples, 6.90%)</title><rect x="84.8692%" y="388" width="6.9036%" height="15" fill="rgb(251,28,31)" fg:x="13658" fg:w="1111"/><text x="85.1192%" y="398.50">to_numpy ..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (96 samples, 0.60%)</title><rect x="91.9282%" y="500" width="0.5965%" height="15" fill="rgb(233,223,10)" fg:x="14794" fg:w="96"/><text x="92.1782%" y="510.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeWriter (pyarrow/libarrow_python.so.2000) (108 samples, 0.67%)</title><rect x="91.8971%" y="452" width="0.6711%" height="15" fill="rgb(215,21,27)" fg:x="14789" fg:w="108"/><text x="92.1471%" y="462.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::PandasWriter (pyarrow/libarrow_python.so.2000) (108 samples, 0.67%)</title><rect x="91.8971%" y="468" width="0.6711%" height="15" fill="rgb(232,23,21)" fg:x="14789" fg:w="108"/><text x="92.1471%" y="478.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (103 samples, 0.64%)</title><rect x="91.9282%" y="484" width="0.6400%" height="15" fill="rgb(244,5,23)" fg:x="14794" fg:w="103"/><text x="92.1782%" y="494.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (242 samples, 1.50%)</title><rect x="92.5744%" y="500" width="1.5038%" height="15" fill="rgb(226,81,46)" fg:x="14898" fg:w="242"/><text x="92.8244%" y="510.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (259 samples, 1.61%)</title><rect x="92.5744%" y="484" width="1.6094%" height="15" fill="rgb(247,70,30)" fg:x="14898" fg:w="259"/><text x="92.8244%" y="494.50"></text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (17 samples, 0.11%)</title><rect x="94.0782%" y="500" width="0.1056%" height="15" fill="rgb(212,68,19)" fg:x="15140" fg:w="17"/><text x="94.3282%" y="510.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (17 samples, 0.11%)</title><rect x="94.0782%" y="516" width="0.1056%" height="15" fill="rgb(240,187,13)" fg:x="15140" fg:w="17"/><text x="94.3282%" y="526.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::GetSeriesResult (pyarrow/libarrow_python.so.2000) (261 samples, 1.62%)</title><rect x="92.5682%" y="452" width="1.6218%" height="15" fill="rgb(223,113,26)" fg:x="14897" fg:w="261"/><text x="92.8182%" y="462.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::MakeBlock1D (pyarrow/libarrow_python.so.2000) (261 samples, 1.62%)</title><rect x="92.5682%" y="468" width="1.6218%" height="15" fill="rgb(206,192,2)" fg:x="14897" fg:w="261"/><text x="92.8182%" y="478.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (36 samples, 0.22%)</title><rect x="94.1900%" y="500" width="0.2237%" height="15" fill="rgb(241,108,4)" fg:x="15158" fg:w="36"/><text x="94.4400%" y="510.50"></text></g><g><title>arrow::py::(anonymous namespace)::TypedPandasWriter&lt;11&gt;::TransferSingle (pyarrow/libarrow_python.so.2000) (39 samples, 0.24%)</title><rect x="94.1900%" y="452" width="0.2423%" height="15" fill="rgb(247,173,49)" fg:x="15158" fg:w="39"/><text x="94.4400%" y="462.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeNumPyView (pyarrow/libarrow_python.so.2000) (39 samples, 0.24%)</title><rect x="94.1900%" y="468" width="0.2423%" height="15" fill="rgb(224,114,35)" fg:x="15158" fg:w="39"/><text x="94.4400%" y="478.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (39 samples, 0.24%)</title><rect x="94.1900%" y="484" width="0.2423%" height="15" fill="rgb(245,159,27)" fg:x="15158" fg:w="39"/><text x="94.4400%" y="494.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (71 samples, 0.44%)</title><rect x="94.4324%" y="500" width="0.4412%" height="15" fill="rgb(245,172,44)" fg:x="15197" fg:w="71"/><text x="94.6824%" y="510.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (77 samples, 0.48%)</title><rect x="94.4324%" y="484" width="0.4785%" height="15" fill="rgb(236,23,11)" fg:x="15197" fg:w="77"/><text x="94.6824%" y="494.50"></text></g><g><title>arrow::py::ConvertArrayToPandas (pyarrow/libarrow_python.so.2000) (488 samples, 3.03%)</title><rect x="91.8971%" y="420" width="3.0324%" height="15" fill="rgb(205,117,38)" fg:x="14789" fg:w="488"/><text x="92.1471%" y="430.50">arr..</text></g><g><title>arrow::py::ConvertChunkedArrayToPandas (pyarrow/libarrow_python.so.2000) (488 samples, 3.03%)</title><rect x="91.8971%" y="436" width="3.0324%" height="15" fill="rgb(237,72,25)" fg:x="14789" fg:w="488"/><text x="92.1471%" y="446.50">arr..</text></g><g><title>arrow::py::(anonymous namespace)::TypedPandasWriter&lt;12&gt;::TransferSingle (pyarrow/libarrow_python.so.2000) (80 samples, 0.50%)</title><rect x="94.4324%" y="452" width="0.4971%" height="15" fill="rgb(244,70,9)" fg:x="15197" fg:w="80"/><text x="94.6824%" y="462.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeNumPyView (pyarrow/libarrow_python.so.2000) (80 samples, 0.50%)</title><rect x="94.4324%" y="468" width="0.4971%" height="15" fill="rgb(217,125,39)" fg:x="15197" fg:w="80"/><text x="94.6824%" y="478.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (397 samples, 2.47%)</title><rect x="94.9357%" y="436" width="2.4669%" height="15" fill="rgb(235,36,10)" fg:x="15278" fg:w="397"/><text x="95.1857%" y="446.50">__..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (427 samples, 2.65%)</title><rect x="94.9357%" y="420" width="2.6533%" height="15" fill="rgb(251,123,47)" fg:x="15278" fg:w="427"/><text x="95.1857%" y="430.50">pt..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (30 samples, 0.19%)</title><rect x="97.4026%" y="436" width="0.1864%" height="15" fill="rgb(221,13,13)" fg:x="15675" fg:w="30"/><text x="97.6526%" y="446.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (30 samples, 0.19%)</title><rect x="97.4026%" y="452" width="0.1864%" height="15" fill="rgb(238,131,9)" fg:x="15675" fg:w="30"/><text x="97.6526%" y="462.50"></text></g><g><title>from_row_batch (arrakis/block.py:409) (922 samples, 5.73%)</title><rect x="91.8660%" y="372" width="5.7292%" height="15" fill="rgb(211,50,8)" fg:x="14784" fg:w="922"/><text x="92.1160%" y="382.50">from_ro..</text></g><g><title>_arrow_to_numpy_array (arrakis/block.py:511) (919 samples, 5.71%)</title><rect x="91.8847%" y="388" width="5.7106%" height="15" fill="rgb(245,182,24)" fg:x="14787" fg:w="919"/><text x="92.1347%" y="398.50">_arrow_..</text></g><g><title>to_numpy (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (918 samples, 5.70%)</title><rect x="91.8909%" y="404" width="5.7043%" height="15" fill="rgb(242,14,37)" fg:x="14788" fg:w="918"/><text x="92.1409%" y="414.50">to_nump..</text></g><g><title>&lt;listcomp&gt; (arrakis_backend_kafka/backend.py:363) (2,061 samples, 12.81%)</title><rect x="84.8381%" y="356" width="12.8068%" height="15" fill="rgb(246,228,12)" fg:x="13653" fg:w="2061"/><text x="85.0881%" y="366.50">&lt;listcomp&gt; (arrakis..</text></g><g><title>read (arrakis_backend_kafka/backend.py:362) (2,068 samples, 12.85%)</title><rect x="84.8257%" y="340" width="12.8503%" height="15" fill="rgb(213,55,15)" fg:x="13651" fg:w="2068"/><text x="85.0757%" y="350.50">read (arrakis_backe..</text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:588) (15,270 samples, 94.89%)</title><rect x="2.7962%" y="308" width="94.8860%" height="15" fill="rgb(209,9,3)" fg:x="450" fg:w="15270"/><text x="3.0462%" y="318.50">_convert_blocks_to_batches (arrakis_server/server.py:588)</text></g><g><title>stream (arrakis_backend_kafka/backend.py:178) (15,270 samples, 94.89%)</title><rect x="2.7962%" y="324" width="94.8860%" height="15" fill="rgb(230,59,30)" fg:x="450" fg:w="15270"/><text x="3.0462%" y="334.50">stream (arrakis_backend_kafka/backend.py:178)</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (54 samples, 0.34%)</title><rect x="97.8127%" y="388" width="0.3355%" height="15" fill="rgb(209,121,21)" fg:x="15741" fg:w="54"/><text x="98.0627%" y="398.50"></text></g><g><title>arrow::py::ConvertPySequence (pyarrow/libarrow_python.so.2000) (77 samples, 0.48%)</title><rect x="97.7133%" y="356" width="0.4785%" height="15" fill="rgb(220,109,13)" fg:x="15725" fg:w="77"/><text x="97.9633%" y="366.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (61 samples, 0.38%)</title><rect x="97.8127%" y="372" width="0.3790%" height="15" fill="rgb(232,18,1)" fg:x="15741" fg:w="61"/><text x="98.0627%" y="382.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (60 samples, 0.37%)</title><rect x="98.2228%" y="372" width="0.3728%" height="15" fill="rgb(215,41,42)" fg:x="15807" fg:w="60"/><text x="98.4728%" y="382.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (66 samples, 0.41%)</title><rect x="98.2228%" y="356" width="0.4101%" height="15" fill="rgb(224,123,36)" fg:x="15807" fg:w="66"/><text x="98.4728%" y="366.50"></text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:601) (152 samples, 0.94%)</title><rect x="97.6946%" y="308" width="0.9445%" height="15" fill="rgb(240,125,3)" fg:x="15722" fg:w="152"/><text x="97.9446%" y="318.50"></text></g><g><title>array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (152 samples, 0.94%)</title><rect x="97.6946%" y="324" width="0.9445%" height="15" fill="rgb(205,98,50)" fg:x="15722" fg:w="152"/><text x="97.9446%" y="334.50"></text></g><g><title>lib__sequence_to_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (151 samples, 0.94%)</title><rect x="97.7009%" y="340" width="0.9383%" height="15" fill="rgb(205,185,37)" fg:x="15723" fg:w="151"/><text x="97.9509%" y="350.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (37 samples, 0.23%)</title><rect x="98.6764%" y="372" width="0.2299%" height="15" fill="rgb(238,207,15)" fg:x="15880" fg:w="37"/><text x="98.9264%" y="382.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (47 samples, 0.29%)</title><rect x="98.6764%" y="356" width="0.2921%" height="15" fill="rgb(213,199,42)" fg:x="15880" fg:w="47"/><text x="98.9264%" y="366.50"></text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:603) (54 samples, 0.34%)</title><rect x="98.6392%" y="308" width="0.3355%" height="15" fill="rgb(235,201,11)" fg:x="15874" fg:w="54"/><text x="98.8892%" y="318.50"></text></g><g><title>from_arrays (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (54 samples, 0.34%)</title><rect x="98.6392%" y="324" width="0.3355%" height="15" fill="rgb(207,46,11)" fg:x="15874" fg:w="54"/><text x="98.8892%" y="334.50"></text></g><g><title>validate (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (50 samples, 0.31%)</title><rect x="98.6640%" y="340" width="0.3107%" height="15" fill="rgb(241,35,35)" fg:x="15878" fg:w="50"/><text x="98.9140%" y="350.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (35 samples, 0.22%)</title><rect x="98.9809%" y="388" width="0.2175%" height="15" fill="rgb(243,32,47)" fg:x="15929" fg:w="35"/><text x="99.2309%" y="398.50"></text></g><g><title>arrow::py::ConvertPySequence (pyarrow/libarrow_python.so.2000) (37 samples, 0.23%)</title><rect x="98.9809%" y="356" width="0.2299%" height="15" fill="rgb(247,202,23)" fg:x="15929" fg:w="37"/><text x="99.2309%" y="366.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (37 samples, 0.23%)</title><rect x="98.9809%" y="372" width="0.2299%" height="15" fill="rgb(219,102,11)" fg:x="15929" fg:w="37"/><text x="99.2309%" y="382.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (113 samples, 0.70%)</title><rect x="99.2171%" y="372" width="0.7022%" height="15" fill="rgb(243,110,44)" fg:x="15967" fg:w="113"/><text x="99.4671%" y="382.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (123 samples, 0.76%)</title><rect x="99.2171%" y="356" width="0.7643%" height="15" fill="rgb(222,74,54)" fg:x="15967" fg:w="123"/><text x="99.4671%" y="366.50"></text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:605) (163 samples, 1.01%)</title><rect x="98.9747%" y="308" width="1.0129%" height="15" fill="rgb(216,99,12)" fg:x="15928" fg:w="163"/><text x="99.2247%" y="318.50"></text></g><g><title>array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (163 samples, 1.01%)</title><rect x="98.9747%" y="324" width="1.0129%" height="15" fill="rgb(226,22,26)" fg:x="15928" fg:w="163"/><text x="99.2247%" y="334.50"></text></g><g><title>lib__sequence_to_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (163 samples, 1.01%)</title><rect x="98.9747%" y="340" width="1.0129%" height="15" fill="rgb(217,163,10)" fg:x="15928" fg:w="163"/><text x="99.2247%" y="350.50"></text></g><g><title>_generate_stream (arrakis_server/server.py:620) (15,645 samples, 97.22%)</title><rect x="2.7776%" y="292" width="97.2162%" height="15" fill="rgb(213,25,53)" fg:x="447" fg:w="15645"/><text x="3.0276%" y="302.50">_generate_stream (arrakis_server/server.py:620)</text></g><g><title>all (16,093 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="16093"/><text x="0.2500%" y="62.50"></text></g><g><title>clone3 (libc.so.6) (16,092 samples, 99.99%)</title><rect x="0.0062%" y="68" width="99.9938%" height="15" fill="rgb(220,39,43)" fg:x="1" fg:w="16092"/><text x="0.2562%" y="78.50">clone3 (libc.so.6)</text></g><g><title>start_thread (libc.so.6) (16,092 samples, 99.99%)</title><rect x="0.0062%" y="84" width="99.9938%" height="15" fill="rgb(229,68,48)" fg:x="1" fg:w="16092"/><text x="0.2562%" y="94.50">start_thread (libc.so.6)</text></g><g><title>grpc_core::(anonymous namespace)::ThreadInternalsPosix::ThreadInternalsPosix(char const*, void (*)(void*), void*, bool*, grpc_core::Thread::Options const&amp;)::{lambda(void*)#1}::_FUN (pyarrow/libarrow_flight.so.2000) (16,092 samples, 99.99%)</title><rect x="0.0062%" y="100" width="99.9938%" height="15" fill="rgb(252,8,32)" fg:x="1" fg:w="16092"/><text x="0.2562%" y="110.50">grpc_core::(anonymous namespace)::ThreadInternalsPosix::ThreadInternalsPosix(char const*, void (*)(void*), void*, bool*, grpc_core::Thread::Options const&amp;)::{lambda(vo..</text></g><g><title>grpc::ThreadManager::WorkerThread::Run (pyarrow/libarrow_flight.so.2000) (16,092 samples, 99.99%)</title><rect x="0.0062%" y="116" width="99.9938%" height="15" fill="rgb(223,20,43)" fg:x="1" fg:w="16092"/><text x="0.2562%" y="126.50">grpc::ThreadManager::WorkerThread::Run (pyarrow/libarrow_flight.so.2000)</text></g><g><title>grpc::ThreadManager::MainWorkLoop (pyarrow/libarrow_flight.so.2000) (16,092 samples, 99.99%)</title><rect x="0.0062%" y="132" width="99.9938%" height="15" fill="rgb(229,81,49)" fg:x="1" fg:w="16092"/><text x="0.2562%" y="142.50">grpc::ThreadManager::MainWorkLoop (pyarrow/libarrow_flight.so.2000)</text></g><g><title>grpc::Server::SyncRequest::ContinueRunAfterInterception (pyarrow/libarrow_flight.so.2000) (16,092 samples, 99.99%)</title><rect x="0.0062%" y="148" width="99.9938%" height="15" fill="rgb(236,28,36)" fg:x="1" fg:w="16092"/><text x="0.2562%" y="158.50">grpc::Server::SyncRequest::ContinueRunAfterInterception (pyarrow/libarrow_flight.so.2000)</text></g><g><title>grpc::internal::ServerStreamingHandler&lt;arrow::flight::protocol::FlightService::Service, arrow::flight::protocol::Ticket, arrow::flight::protocol::FlightData&gt;::RunHandler (pyarrow/libarrow_flight.so.2000) (16,092 samples, 99.99%)</title><rect x="0.0062%" y="164" width="99.9938%" height="15" fill="rgb(249,185,26)" fg:x="1" fg:w="16092"/><text x="0.2562%" y="174.50">grpc::internal::ServerStreamingHandler&lt;arrow::flight::protocol::FlightService::Service, arrow::flight::protocol::Ticket, arrow::flight::protocol::FlightData&gt;::RunHandl..</text></g><g><title>std::_Function_handler&lt;grpc::Status(arrow::flight::protocol::FlightService::Service*, grpc::ServerContext*, arrow::flight::protocol::Ticket const*, grpc::ServerWriter&lt;arrow::flight::protocol::FlightData&gt;*), arrow::flight::protocol::FlightService::Service()::Service::{lambda(arrow::flight::protocol::FlightService::Service*, grpc::ServerContext*, arrow::flight::protocol::Ticket const*, grpc::ServerWriter&lt;arrow::flight::protocol::FlightData&gt;*)#6}&gt;::_M_invoke (pyarrow/libarrow_flight.so.2000) (16,092 samples, 99.99%)</title><rect x="0.0062%" y="180" width="99.9938%" height="15" fill="rgb(249,174,33)" fg:x="1" fg:w="16092"/><text x="0.2562%" y="190.50">std::_Function_handler&lt;grpc::Status(arrow::flight::protocol::FlightService::Service*, grpc::ServerContext*, arrow::flight::protocol::Ticket const*, grpc::ServerWriter&lt;..</text></g><g><title>arrow::flight::transport::grpc::(anonymous namespace)::GrpcServiceHandler::DoGet (pyarrow/libarrow_flight.so.2000) (16,092 samples, 99.99%)</title><rect x="0.0062%" y="196" width="99.9938%" height="15" fill="rgb(233,201,37)" fg:x="1" fg:w="16092"/><text x="0.2562%" y="206.50">arrow::flight::transport::grpc::(anonymous namespace)::GrpcServiceHandler::DoGet (pyarrow/libarrow_flight.so.2000)</text></g><g><title>arrow::flight::internal::ServerTransport::DoGet (pyarrow/libarrow_flight.so.2000) (16,092 samples, 99.99%)</title><rect x="0.0062%" y="212" width="99.9938%" height="15" fill="rgb(221,78,26)" fg:x="1" fg:w="16092"/><text x="0.2562%" y="222.50">arrow::flight::internal::ServerTransport::DoGet (pyarrow/libarrow_flight.so.2000)</text></g><g><title>arrow::py::flight::PyFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000) (16,092 samples, 99.99%)</title><rect x="0.0062%" y="228" width="99.9938%" height="15" fill="rgb(250,127,30)" fg:x="1" fg:w="16092"/><text x="0.2562%" y="238.50">arrow::py::flight::PyFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000)</text></g><g><title>arrow::py::flight::PyGeneratorFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000) (16,092 samples, 99.99%)</title><rect x="0.0062%" y="244" width="99.9938%" height="15" fill="rgb(230,49,44)" fg:x="1" fg:w="16092"/><text x="0.2562%" y="254.50">arrow::py::flight::PyGeneratorFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000)</text></g><g><title>std::_Function_handler&lt;arrow::Status(_object*, arrow::flight::FlightPayload*), arrow::Status (*)(void*, arrow::flight::FlightPayload*)&gt;::_M_invoke (pyarrow/_flight.cpython-311-x86_64-linux-gnu.so) (15,647 samples, 97.23%)</title><rect x="2.7714%" y="260" width="97.2286%" height="15" fill="rgb(229,67,23)" fg:x="446" fg:w="15647"/><text x="3.0214%" y="270.50">std::_Function_handler&lt;arrow::Status(_object*, arrow::flight::FlightPayload*), arrow::Status (*)(void*, arrow::flight::FlightPayload*)&gt;::_M_invoke (pyarrow/_fligh..</text></g><g><title>_flight__data_stream_next (pyarrow/_flight.cpython-311-x86_64-linux-gnu.so) (15,647 samples, 97.23%)</title><rect x="2.7714%" y="276" width="97.2286%" height="15" fill="rgb(249,83,47)" fg:x="446" fg:w="15647"/><text x="3.0214%" y="286.50">_flight__data_stream_next (pyarrow/_flight.cpython-311-x86_64-linux-gnu.so)</text></g></svg></svg>