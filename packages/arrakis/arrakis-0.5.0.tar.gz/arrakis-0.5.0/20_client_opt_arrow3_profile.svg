<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="794" onload="init(evt)" viewBox="0 0 1200 794" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="794" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record --native --rate 50 -o profile.svg --pid 1124845</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="783.00"> </text><svg id="frames" x="10" width="1180" total_samples="16886"><g><title>__futex_abstimed_wait_common (libc.so.6) (322 samples, 1.91%)</title><rect x="0.0059%" y="276" width="1.9069%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="322"/><text x="0.2559%" y="286.50">_..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (40 samples, 0.24%)</title><rect x="1.9128%" y="276" width="0.2369%" height="15" fill="rgb(217,0,24)" fg:x="323" fg:w="40"/><text x="2.1628%" y="286.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (40 samples, 0.24%)</title><rect x="1.9128%" y="292" width="0.2369%" height="15" fill="rgb(221,193,54)" fg:x="323" fg:w="40"/><text x="2.1628%" y="302.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (364 samples, 2.16%)</title><rect x="0.0059%" y="260" width="2.1556%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="364"/><text x="0.2559%" y="270.50">p..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (411 samples, 2.43%)</title><rect x="2.3333%" y="404" width="2.4340%" height="15" fill="rgb(208,68,35)" fg:x="394" fg:w="411"/><text x="2.5833%" y="414.50">__..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (436 samples, 2.58%)</title><rect x="2.3333%" y="388" width="2.5820%" height="15" fill="rgb(232,128,0)" fg:x="394" fg:w="436"/><text x="2.5833%" y="398.50">pt..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (25 samples, 0.15%)</title><rect x="4.7673%" y="404" width="0.1481%" height="15" fill="rgb(207,160,47)" fg:x="805" fg:w="25"/><text x="5.0173%" y="414.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (25 samples, 0.15%)</title><rect x="4.7673%" y="420" width="0.1481%" height="15" fill="rgb(228,23,34)" fg:x="805" fg:w="25"/><text x="5.0173%" y="430.50"></text></g><g><title>CallState_end (confluent_kafka/cimpl.cpython-311-x86_64-linux-gnu.so) (440 samples, 2.61%)</title><rect x="2.3155%" y="372" width="2.6057%" height="15" fill="rgb(218,30,26)" fg:x="391" fg:w="440"/><text x="2.5655%" y="382.50">Ca..</text></g><g><title>cnd_timedwait_abs (librdkafka-9ddca43a.so.1) (7,214 samples, 42.72%)</title><rect x="4.9627%" y="404" width="42.7218%" height="15" fill="rgb(220,122,19)" fg:x="838" fg:w="7214"/><text x="5.2127%" y="414.50">cnd_timedwait_abs (librdkafka-9ddca43a.so.1)</text></g><g><title>cnd_timedwait_ms (librdkafka-9ddca43a.so.1) (7,214 samples, 42.72%)</title><rect x="4.9627%" y="420" width="42.7218%" height="15" fill="rgb(250,228,42)" fg:x="838" fg:w="7214"/><text x="5.2127%" y="430.50">cnd_timedwait_ms (librdkafka-9ddca43a.so.1)</text></g><g><title>cnd_timedwait@GLIBC_2.28 (libc.so.6) (7,214 samples, 42.72%)</title><rect x="4.9627%" y="436" width="42.7218%" height="15" fill="rgb(240,193,28)" fg:x="838" fg:w="7214"/><text x="5.2127%" y="446.50">cnd_timedwait@GLIBC_2.28 (libc.so.6)</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (7,214 samples, 42.72%)</title><rect x="4.9627%" y="452" width="42.7218%" height="15" fill="rgb(216,20,37)" fg:x="838" fg:w="7214"/><text x="5.2127%" y="462.50">pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6)</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (7,214 samples, 42.72%)</title><rect x="4.9627%" y="468" width="42.7218%" height="15" fill="rgb(206,188,39)" fg:x="838" fg:w="7214"/><text x="5.2127%" y="478.50">__futex_abstimed_wait_common (libc.so.6)</text></g><g><title>rd_kafka_consume0 (librdkafka-9ddca43a.so.1) (7,216 samples, 42.73%)</title><rect x="4.9568%" y="372" width="42.7336%" height="15" fill="rgb(217,207,13)" fg:x="837" fg:w="7216"/><text x="5.2068%" y="382.50">rd_kafka_consume0 (librdkafka-9ddca43a.so.1)</text></g><g><title>rd_kafka_q_pop_serve.localalias (librdkafka-9ddca43a.so.1) (7,216 samples, 42.73%)</title><rect x="4.9568%" y="388" width="42.7336%" height="15" fill="rgb(231,73,38)" fg:x="837" fg:w="7216"/><text x="5.2068%" y="398.50">rd_kafka_q_pop_serve.localalias (librdkafka-9ddca43a.so.1)</text></g><g><title>read (arrakis_backend_kafka/backend.py:322) (7,676 samples, 45.46%)</title><rect x="2.2563%" y="340" width="45.4578%" height="15" fill="rgb(225,20,46)" fg:x="381" fg:w="7676"/><text x="2.5063%" y="350.50">read (arrakis_backend_kafka/backend.py:322)</text></g><g><title>Consumer_poll (confluent_kafka/cimpl.cpython-311-x86_64-linux-gnu.so) (7,675 samples, 45.45%)</title><rect x="2.2622%" y="356" width="45.4519%" height="15" fill="rgb(210,31,41)" fg:x="382" fg:w="7675"/><text x="2.5122%" y="366.50">Consumer_poll (confluent_kafka/cimpl.cpython-311-x86_64-linux-gnu.so)</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (68 samples, 0.40%)</title><rect x="47.7792%" y="404" width="0.4027%" height="15" fill="rgb(221,200,47)" fg:x="8068" fg:w="68"/><text x="48.0292%" y="414.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (71 samples, 0.42%)</title><rect x="47.7792%" y="388" width="0.4205%" height="15" fill="rgb(226,26,5)" fg:x="8068" fg:w="71"/><text x="48.0292%" y="398.50"></text></g><g><title>__exit__ (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (81 samples, 0.48%)</title><rect x="47.7318%" y="356" width="0.4797%" height="15" fill="rgb(249,33,26)" fg:x="8060" fg:w="81"/><text x="47.9818%" y="366.50"></text></g><g><title>close (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (79 samples, 0.47%)</title><rect x="47.7437%" y="372" width="0.4678%" height="15" fill="rgb(235,183,28)" fg:x="8062" fg:w="79"/><text x="47.9937%" y="382.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (332 samples, 1.97%)</title><rect x="48.2530%" y="484" width="1.9661%" height="15" fill="rgb(221,5,38)" fg:x="8148" fg:w="332"/><text x="48.5030%" y="494.50">_..</text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (348 samples, 2.06%)</title><rect x="48.2530%" y="468" width="2.0609%" height="15" fill="rgb(247,18,42)" fg:x="8148" fg:w="348"/><text x="48.5030%" y="478.50">p..</text></g><g><title>arrow::ipc::RecordBatchStreamReaderImpl::~RecordBatchStreamReaderImpl (pyarrow/libarrow.so.2000) (360 samples, 2.13%)</title><rect x="48.2234%" y="372" width="2.1319%" height="15" fill="rgb(241,131,45)" fg:x="8143" fg:w="360"/><text x="48.4734%" y="382.50">a..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold (pyarrow/libarrow.so.2000) (359 samples, 2.13%)</title><rect x="48.2293%" y="388" width="2.1260%" height="15" fill="rgb(249,31,29)" fg:x="8144" fg:w="359"/><text x="48.4793%" y="398.50">s..</text></g><g><title>arrow::io::BufferReader::~BufferReader (pyarrow/libarrow.so.2000) (359 samples, 2.13%)</title><rect x="48.2293%" y="404" width="2.1260%" height="15" fill="rgb(225,111,53)" fg:x="8144" fg:w="359"/><text x="48.4793%" y="414.50">a..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (pyarrow/libarrow.so.2000) (359 samples, 2.13%)</title><rect x="48.2293%" y="420" width="2.1260%" height="15" fill="rgb(238,160,17)" fg:x="8144" fg:w="359"/><text x="48.4793%" y="430.50">s..</text></g><g><title>std::_Sp_counted_ptr&lt;arrow::py::PyBuffer*, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (pyarrow/libarrow_python.so.2000) (359 samples, 2.13%)</title><rect x="48.2293%" y="436" width="2.1260%" height="15" fill="rgb(214,148,48)" fg:x="8144" fg:w="359"/><text x="48.4793%" y="446.50">s..</text></g><g><title>arrow::py::PyBuffer::~PyBuffer (pyarrow/libarrow_python.so.2000) (359 samples, 2.13%)</title><rect x="48.2293%" y="452" width="2.1260%" height="15" fill="rgb(232,36,49)" fg:x="8144" fg:w="359"/><text x="48.4793%" y="462.50">a..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (478 samples, 2.83%)</title><rect x="50.3909%" y="388" width="2.8307%" height="15" fill="rgb(209,103,24)" fg:x="8509" fg:w="478"/><text x="50.6409%" y="398.50">__..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (25 samples, 0.15%)</title><rect x="53.2216%" y="388" width="0.1481%" height="15" fill="rgb(229,88,8)" fg:x="8987" fg:w="25"/><text x="53.4716%" y="398.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (25 samples, 0.15%)</title><rect x="53.2216%" y="404" width="0.1481%" height="15" fill="rgb(213,181,19)" fg:x="8987" fg:w="25"/><text x="53.4716%" y="414.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (504 samples, 2.98%)</title><rect x="50.3909%" y="372" width="2.9847%" height="15" fill="rgb(254,191,54)" fg:x="8509" fg:w="504"/><text x="50.6409%" y="382.50">pth..</text></g><g><title>__pyx_tp_dealloc_7pyarrow_3lib_RecordBatchReader (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (876 samples, 5.19%)</title><rect x="48.2115%" y="356" width="5.1877%" height="15" fill="rgb(241,83,37)" fg:x="8141" fg:w="876"/><text x="48.4615%" y="366.50">__pyx_..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (586 samples, 3.47%)</title><rect x="53.5236%" y="420" width="3.4703%" height="15" fill="rgb(233,36,39)" fg:x="9038" fg:w="586"/><text x="53.7736%" y="430.50">__f..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (19 samples, 0.11%)</title><rect x="56.9940%" y="420" width="0.1125%" height="15" fill="rgb(226,3,54)" fg:x="9624" fg:w="19"/><text x="57.2440%" y="430.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (19 samples, 0.11%)</title><rect x="56.9940%" y="436" width="0.1125%" height="15" fill="rgb(245,192,40)" fg:x="9624" fg:w="19"/><text x="57.2440%" y="446.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (607 samples, 3.59%)</title><rect x="53.5236%" y="404" width="3.5947%" height="15" fill="rgb(238,167,29)" fg:x="9038" fg:w="607"/><text x="53.7736%" y="414.50">pthr..</text></g><g><title>read (arrakis_backend_kafka/backend.py:327) (1,589 samples, 9.41%)</title><rect x="47.7200%" y="340" width="9.4102%" height="15" fill="rgb(232,182,51)" fg:x="8058" fg:w="1589"/><text x="47.9700%" y="350.50">read (arrakis..</text></g><g><title>open_stream (pyarrow/ipc.py:190) (630 samples, 3.73%)</title><rect x="53.3993%" y="356" width="3.7309%" height="15" fill="rgb(231,60,39)" fg:x="9017" fg:w="630"/><text x="53.6493%" y="366.50">open..</text></g><g><title>__init__ (pyarrow/ipc.py:52) (629 samples, 3.72%)</title><rect x="53.4052%" y="372" width="3.7250%" height="15" fill="rgb(208,69,12)" fg:x="9018" fg:w="629"/><text x="53.6552%" y="382.50">__in..</text></g><g><title>_open (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (629 samples, 3.72%)</title><rect x="53.4052%" y="388" width="3.7250%" height="15" fill="rgb(235,93,37)" fg:x="9018" fg:w="629"/><text x="53.6552%" y="398.50">_ope..</text></g><g><title>arrow::ipc::RecordBatchStreamReaderImpl::ReadNext (pyarrow/libarrow.so.2000) (18 samples, 0.11%)</title><rect x="57.1598%" y="388" width="0.1066%" height="15" fill="rgb(213,116,39)" fg:x="9652" fg:w="18"/><text x="57.4098%" y="398.50"></text></g><g><title>arrow::ipc::RecordBatchStreamReaderImpl::ReadNext (pyarrow/libarrow.so.2000) (18 samples, 0.11%)</title><rect x="57.1598%" y="404" width="0.1066%" height="15" fill="rgb(222,207,29)" fg:x="9652" fg:w="18"/><text x="57.4098%" y="414.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (889 samples, 5.26%)</title><rect x="57.3374%" y="404" width="5.2647%" height="15" fill="rgb(206,96,30)" fg:x="9682" fg:w="889"/><text x="57.5874%" y="414.50">__fute..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (48 samples, 0.28%)</title><rect x="62.6022%" y="404" width="0.2843%" height="15" fill="rgb(218,138,4)" fg:x="10571" fg:w="48"/><text x="62.8522%" y="414.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (48 samples, 0.28%)</title><rect x="62.6022%" y="420" width="0.2843%" height="15" fill="rgb(250,191,14)" fg:x="10571" fg:w="48"/><text x="62.8522%" y="430.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (941 samples, 5.57%)</title><rect x="57.3374%" y="388" width="5.5727%" height="15" fill="rgb(239,60,40)" fg:x="9682" fg:w="941"/><text x="57.5874%" y="398.50">pthread..</text></g><g><title>read (arrakis_backend_kafka/backend.py:328) (989 samples, 5.86%)</title><rect x="57.1302%" y="340" width="5.8569%" height="15" fill="rgb(206,27,48)" fg:x="9647" fg:w="989"/><text x="57.3802%" y="350.50">read (a..</text></g><g><title>read_all_batches (arrakis_backend_kafka/backend.py:401) (989 samples, 5.86%)</title><rect x="57.1302%" y="356" width="5.8569%" height="15" fill="rgb(225,35,8)" fg:x="9647" fg:w="989"/><text x="57.3802%" y="366.50">read_al..</text></g><g><title>read_next_batch (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (989 samples, 5.86%)</title><rect x="57.1302%" y="372" width="5.8569%" height="15" fill="rgb(250,213,24)" fg:x="9647" fg:w="989"/><text x="57.3802%" y="382.50">read_ne..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (142 samples, 0.84%)</title><rect x="63.1648%" y="452" width="0.8409%" height="15" fill="rgb(247,123,22)" fg:x="10666" fg:w="142"/><text x="63.4148%" y="462.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (150 samples, 0.89%)</title><rect x="63.1648%" y="436" width="0.8883%" height="15" fill="rgb(231,138,38)" fg:x="10666" fg:w="150"/><text x="63.4148%" y="446.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeWriter (pyarrow/libarrow_python.so.2000) (158 samples, 0.94%)</title><rect x="63.1292%" y="404" width="0.9357%" height="15" fill="rgb(231,145,46)" fg:x="10660" fg:w="158"/><text x="63.3792%" y="414.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::PandasWriter (pyarrow/libarrow_python.so.2000) (158 samples, 0.94%)</title><rect x="63.1292%" y="420" width="0.9357%" height="15" fill="rgb(251,118,11)" fg:x="10660" fg:w="158"/><text x="63.3792%" y="430.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (245 samples, 1.45%)</title><rect x="64.0945%" y="452" width="1.4509%" height="15" fill="rgb(217,147,25)" fg:x="10823" fg:w="245"/><text x="64.3445%" y="462.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (255 samples, 1.51%)</title><rect x="64.0945%" y="436" width="1.5101%" height="15" fill="rgb(247,81,37)" fg:x="10823" fg:w="255"/><text x="64.3445%" y="446.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::GetSeriesResult (pyarrow/libarrow_python.so.2000) (263 samples, 1.56%)</title><rect x="64.0649%" y="404" width="1.5575%" height="15" fill="rgb(209,12,38)" fg:x="10818" fg:w="263"/><text x="64.3149%" y="414.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::MakeBlock1D (pyarrow/libarrow_python.so.2000) (263 samples, 1.56%)</title><rect x="64.0649%" y="420" width="1.5575%" height="15" fill="rgb(227,1,9)" fg:x="10818" fg:w="263"/><text x="64.3149%" y="430.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (146 samples, 0.86%)</title><rect x="65.6816%" y="452" width="0.8646%" height="15" fill="rgb(248,47,43)" fg:x="11091" fg:w="146"/><text x="65.9316%" y="462.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (153 samples, 0.91%)</title><rect x="65.6816%" y="436" width="0.9061%" height="15" fill="rgb(221,10,30)" fg:x="11091" fg:w="153"/><text x="65.9316%" y="446.50"></text></g><g><title>arrow::py::ConvertChunkedArrayToPandas (pyarrow/libarrow_python.so.2000) (585 samples, 3.46%)</title><rect x="63.1292%" y="388" width="3.4644%" height="15" fill="rgb(210,229,1)" fg:x="10660" fg:w="585"/><text x="63.3792%" y="398.50">arr..</text></g><g><title>arrow::py::(anonymous namespace)::TypedPandasWriter&lt;7&gt;::TransferSingle (pyarrow/libarrow_python.so.2000) (164 samples, 0.97%)</title><rect x="65.6224%" y="404" width="0.9712%" height="15" fill="rgb(222,148,37)" fg:x="11081" fg:w="164"/><text x="65.8724%" y="414.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeNumPyView (pyarrow/libarrow_python.so.2000) (164 samples, 0.97%)</title><rect x="65.6224%" y="420" width="0.9712%" height="15" fill="rgb(234,67,33)" fg:x="11081" fg:w="164"/><text x="65.8724%" y="430.50"></text></g><g><title>arrow::py::ConvertArrayToPandas (pyarrow/libarrow_python.so.2000) (586 samples, 3.47%)</title><rect x="63.1292%" y="372" width="3.4703%" height="15" fill="rgb(247,98,35)" fg:x="10660" fg:w="586"/><text x="63.3792%" y="382.50">arr..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (274 samples, 1.62%)</title><rect x="66.6173%" y="388" width="1.6226%" height="15" fill="rgb(247,138,52)" fg:x="11249" fg:w="274"/><text x="66.8673%" y="398.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (285 samples, 1.69%)</title><rect x="66.6173%" y="372" width="1.6878%" height="15" fill="rgb(213,79,30)" fg:x="11249" fg:w="285"/><text x="66.8673%" y="382.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:330) (901 samples, 5.34%)</title><rect x="62.9871%" y="340" width="5.3358%" height="15" fill="rgb(246,177,23)" fg:x="10636" fg:w="901"/><text x="63.2371%" y="350.50">read (a..</text></g><g><title>to_numpy (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (880 samples, 5.21%)</title><rect x="63.1115%" y="356" width="5.2114%" height="15" fill="rgb(230,62,27)" fg:x="10657" fg:w="880"/><text x="63.3615%" y="366.50">to_num..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (970 samples, 5.74%)</title><rect x="68.6427%" y="404" width="5.7444%" height="15" fill="rgb(216,154,8)" fg:x="11591" fg:w="970"/><text x="68.8927%" y="414.50">__futex..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (62 samples, 0.37%)</title><rect x="74.3871%" y="404" width="0.3672%" height="15" fill="rgb(244,35,45)" fg:x="12561" fg:w="62"/><text x="74.6371%" y="414.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (62 samples, 0.37%)</title><rect x="74.3871%" y="420" width="0.3672%" height="15" fill="rgb(251,115,12)" fg:x="12561" fg:w="62"/><text x="74.6371%" y="430.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (1,035 samples, 6.13%)</title><rect x="68.6427%" y="388" width="6.1293%" height="15" fill="rgb(240,54,50)" fg:x="11591" fg:w="1035"/><text x="68.8927%" y="398.50">pthread_..</text></g><g><title>read (arrakis_backend_kafka/backend.py:331) (1,100 samples, 6.51%)</title><rect x="68.3229%" y="340" width="6.5143%" height="15" fill="rgb(233,84,52)" fg:x="11537" fg:w="1100"/><text x="68.5729%" y="350.50">read (arr..</text></g><g><title>wrapper (pyarrow/compute.py:269) (1,090 samples, 6.46%)</title><rect x="68.3821%" y="356" width="6.4551%" height="15" fill="rgb(207,117,47)" fg:x="11547" fg:w="1090"/><text x="68.6321%" y="366.50">wrapper ..</text></g><g><title>call (pyarrow/_compute.cpython-311-x86_64-linux-gnu.so) (1,089 samples, 6.45%)</title><rect x="68.3880%" y="372" width="6.4491%" height="15" fill="rgb(249,43,39)" fg:x="11548" fg:w="1089"/><text x="68.6380%" y="382.50">call (py..</text></g><g><title>arrow::compute::CallFunction (pyarrow/libarrow.so.2000) (18 samples, 0.11%)</title><rect x="75.4412%" y="660" width="0.1066%" height="15" fill="rgb(209,38,44)" fg:x="12739" fg:w="18"/><text x="75.6912%" y="670.50"></text></g><g><title>arrow::compute::MetaFunction::Execute (pyarrow/libarrow.so.2000) (18 samples, 0.11%)</title><rect x="75.4412%" y="676" width="0.1066%" height="15" fill="rgb(236,212,23)" fg:x="12739" fg:w="18"/><text x="75.6912%" y="686.50"></text></g><g><title>arrow::compute::internal::(anonymous namespace)::TakeMetaFunction::ExecuteImpl (pyarrow/libarrow.so.2000) (17 samples, 0.10%)</title><rect x="75.4471%" y="692" width="0.1007%" height="15" fill="rgb(242,79,21)" fg:x="12740" fg:w="17"/><text x="75.6971%" y="702.50"></text></g><g><title>arrow::compute::internal::(anonymous namespace)::TakeMetaFunction::TakeAAA (pyarrow/libarrow.so.2000) (17 samples, 0.10%)</title><rect x="75.4471%" y="708" width="0.1007%" height="15" fill="rgb(211,96,35)" fg:x="12740" fg:w="17"/><text x="75.6971%" y="718.50"></text></g><g><title>arrow::compute::Function::Execute (pyarrow/libarrow.so.2000) (17 samples, 0.10%)</title><rect x="75.4471%" y="724" width="0.1007%" height="15" fill="rgb(253,215,40)" fg:x="12740" fg:w="17"/><text x="75.6971%" y="734.50"></text></g><g><title>arrow::compute::(anonymous namespace)::ExecuteInternal (pyarrow/libarrow.so.2000) (17 samples, 0.10%)</title><rect x="75.4471%" y="740" width="0.1007%" height="15" fill="rgb(211,81,21)" fg:x="12740" fg:w="17"/><text x="75.6971%" y="750.50"></text></g><g><title>arrow::compute::detail::FunctionExecutorImpl::Execute (pyarrow/libarrow.so.2000) (17 samples, 0.10%)</title><rect x="75.4471%" y="756" width="0.1007%" height="15" fill="rgb(208,190,38)" fg:x="12740" fg:w="17"/><text x="75.6971%" y="766.50"></text></g><g><title>arrow::compute::internal::(anonymous namespace)::ListSelectionImpl&lt;arrow::ListType&gt;::Finish (pyarrow/libarrow.so.2000) (22 samples, 0.13%)</title><rect x="75.4234%" y="612" width="0.1303%" height="15" fill="rgb(235,213,38)" fg:x="12736" fg:w="22"/><text x="75.6734%" y="622.50"></text></g><g><title>arrow::compute::Take (pyarrow/libarrow.so.2000) (19 samples, 0.11%)</title><rect x="75.4412%" y="628" width="0.1125%" height="15" fill="rgb(237,122,38)" fg:x="12739" fg:w="19"/><text x="75.6912%" y="638.50"></text></g><g><title>arrow::compute::Take (pyarrow/libarrow.so.2000) (19 samples, 0.11%)</title><rect x="75.4412%" y="644" width="0.1125%" height="15" fill="rgb(244,218,35)" fg:x="12739" fg:w="19"/><text x="75.6912%" y="654.50"></text></g><g><title>arrow::compute::internal::ListTakeExec (pyarrow/libarrow.so.2000) (75 samples, 0.44%)</title><rect x="75.1155%" y="580" width="0.4442%" height="15" fill="rgb(240,68,47)" fg:x="12684" fg:w="75"/><text x="75.3655%" y="590.50"></text></g><g><title>arrow::compute::internal::(anonymous namespace)::TakeExec&lt;arrow::compute::internal::(anonymous namespace)::ListSelectionImpl&lt;arrow::ListType&gt; &gt; (pyarrow/libarrow.so.2000) (75 samples, 0.44%)</title><rect x="75.1155%" y="596" width="0.4442%" height="15" fill="rgb(210,16,53)" fg:x="12684" fg:w="75"/><text x="75.3655%" y="606.50"></text></g><g><title>arrow::compute::detail::(anonymous namespace)::VectorExecutor::Exec (pyarrow/libarrow.so.2000) (79 samples, 0.47%)</title><rect x="75.1096%" y="564" width="0.4678%" height="15" fill="rgb(235,124,12)" fg:x="12683" fg:w="79"/><text x="75.3596%" y="574.50"></text></g><g><title>arrow::compute::detail::FunctionExecutorImpl::Execute (pyarrow/libarrow.so.2000) (82 samples, 0.49%)</title><rect x="75.0977%" y="532" width="0.4856%" height="15" fill="rgb(224,169,11)" fg:x="12681" fg:w="82"/><text x="75.3477%" y="542.50"></text></g><g><title>arrow::compute::detail::(anonymous namespace)::VectorExecutor::Execute (pyarrow/libarrow.so.2000) (80 samples, 0.47%)</title><rect x="75.1096%" y="548" width="0.4738%" height="15" fill="rgb(250,166,2)" fg:x="12683" fg:w="80"/><text x="75.3596%" y="558.50"></text></g><g><title>arrow::compute::Function::Execute (pyarrow/libarrow.so.2000) (89 samples, 0.53%)</title><rect x="75.0681%" y="500" width="0.5271%" height="15" fill="rgb(242,216,29)" fg:x="12676" fg:w="89"/><text x="75.3181%" y="510.50"></text></g><g><title>arrow::compute::(anonymous namespace)::ExecuteInternal (pyarrow/libarrow.so.2000) (89 samples, 0.53%)</title><rect x="75.0681%" y="516" width="0.5271%" height="15" fill="rgb(230,116,27)" fg:x="12676" fg:w="89"/><text x="75.3181%" y="526.50"></text></g><g><title>arrow::compute::MetaFunction::Execute (pyarrow/libarrow.so.2000) (92 samples, 0.54%)</title><rect x="75.0622%" y="452" width="0.5448%" height="15" fill="rgb(228,99,48)" fg:x="12675" fg:w="92"/><text x="75.3122%" y="462.50"></text></g><g><title>arrow::compute::internal::(anonymous namespace)::TakeMetaFunction::ExecuteImpl (pyarrow/libarrow.so.2000) (92 samples, 0.54%)</title><rect x="75.0622%" y="468" width="0.5448%" height="15" fill="rgb(253,11,6)" fg:x="12675" fg:w="92"/><text x="75.3122%" y="478.50"></text></g><g><title>arrow::compute::internal::(anonymous namespace)::TakeMetaFunction::TakeAAA (pyarrow/libarrow.so.2000) (91 samples, 0.54%)</title><rect x="75.0681%" y="484" width="0.5389%" height="15" fill="rgb(247,143,39)" fg:x="12676" fg:w="91"/><text x="75.3181%" y="494.50"></text></g><g><title>arrow::compute::Take (pyarrow/libarrow.so.2000) (94 samples, 0.56%)</title><rect x="75.0563%" y="420" width="0.5567%" height="15" fill="rgb(236,97,10)" fg:x="12674" fg:w="94"/><text x="75.3063%" y="430.50"></text></g><g><title>arrow::compute::CallFunction (pyarrow/libarrow.so.2000) (94 samples, 0.56%)</title><rect x="75.0563%" y="436" width="0.5567%" height="15" fill="rgb(233,208,19)" fg:x="12674" fg:w="94"/><text x="75.3063%" y="446.50"></text></g><g><title>arrow::compute::MetaFunction::Execute (pyarrow/libarrow.so.2000) (107 samples, 0.63%)</title><rect x="75.0207%" y="388" width="0.6337%" height="15" fill="rgb(216,164,2)" fg:x="12668" fg:w="107"/><text x="75.2707%" y="398.50"></text></g><g><title>arrow::compute::internal::(anonymous namespace)::FilterMetaFunction::ExecuteImpl (pyarrow/libarrow.so.2000) (107 samples, 0.63%)</title><rect x="75.0207%" y="404" width="0.6337%" height="15" fill="rgb(220,129,5)" fg:x="12668" fg:w="107"/><text x="75.2707%" y="414.50"></text></g><g><title>pthread_cond_signal@@GLIBC_2.3.2 (libc.so.6) (17 samples, 0.10%)</title><rect x="75.6603%" y="388" width="0.1007%" height="15" fill="rgb(242,17,10)" fg:x="12776" fg:w="17"/><text x="75.9103%" y="398.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (893 samples, 5.29%)</title><rect x="75.7610%" y="404" width="5.2884%" height="15" fill="rgb(242,107,0)" fg:x="12793" fg:w="893"/><text x="76.0110%" y="414.50">__fute..</text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (58 samples, 0.34%)</title><rect x="81.0494%" y="404" width="0.3435%" height="15" fill="rgb(251,28,31)" fg:x="13686" fg:w="58"/><text x="81.2994%" y="414.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (58 samples, 0.34%)</title><rect x="81.0494%" y="420" width="0.3435%" height="15" fill="rgb(233,223,10)" fg:x="13686" fg:w="58"/><text x="81.2994%" y="430.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (955 samples, 5.66%)</title><rect x="75.7610%" y="388" width="5.6556%" height="15" fill="rgb(215,21,27)" fg:x="12793" fg:w="955"/><text x="76.0110%" y="398.50">pthread..</text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (libc.so.6) (22 samples, 0.13%)</title><rect x="81.4166%" y="388" width="0.1303%" height="15" fill="rgb(232,23,21)" fg:x="13748" fg:w="22"/><text x="81.6666%" y="398.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (22 samples, 0.13%)</title><rect x="81.4166%" y="404" width="0.1303%" height="15" fill="rgb(244,5,23)" fg:x="13748" fg:w="22"/><text x="81.6666%" y="414.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:335) (1,123 samples, 6.65%)</title><rect x="74.9082%" y="340" width="6.6505%" height="15" fill="rgb(226,81,46)" fg:x="12649" fg:w="1123"/><text x="75.1582%" y="350.50">read (arr..</text></g><g><title>wrapper (pyarrow/compute.py:269) (1,113 samples, 6.59%)</title><rect x="74.9674%" y="356" width="6.5913%" height="15" fill="rgb(247,70,30)" fg:x="12659" fg:w="1113"/><text x="75.2174%" y="366.50">wrapper (..</text></g><g><title>call (pyarrow/_compute.cpython-311-x86_64-linux-gnu.so) (1,113 samples, 6.59%)</title><rect x="74.9674%" y="372" width="6.5913%" height="15" fill="rgb(212,68,19)" fg:x="12659" fg:w="1113"/><text x="75.2174%" y="382.50">call (pya..</text></g><g><title>PyThread_acquire_lock_timed (libpython3.11.so.1.0) (26 samples, 0.15%)</title><rect x="81.5705%" y="468" width="0.1540%" height="15" fill="rgb(240,187,13)" fg:x="13774" fg:w="26"/><text x="81.8205%" y="478.50"></text></g><g><title>__new_sem_wait_slow64.constprop.0 (libc.so.6) (26 samples, 0.15%)</title><rect x="81.5705%" y="484" width="0.1540%" height="15" fill="rgb(223,113,26)" fg:x="13774" fg:w="26"/><text x="81.8205%" y="494.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (26 samples, 0.15%)</title><rect x="81.5705%" y="500" width="0.1540%" height="15" fill="rgb(206,192,2)" fg:x="13774" fg:w="26"/><text x="81.8205%" y="510.50"></text></g><g><title>handle (logging/__init__.py:976) (29 samples, 0.17%)</title><rect x="81.5705%" y="436" width="0.1717%" height="15" fill="rgb(241,108,4)" fg:x="13774" fg:w="29"/><text x="81.8205%" y="446.50"></text></g><g><title>acquire (logging/__init__.py:927) (29 samples, 0.17%)</title><rect x="81.5705%" y="452" width="0.1717%" height="15" fill="rgb(247,173,49)" fg:x="13774" fg:w="29"/><text x="81.8205%" y="462.50"></text></g><g><title>push (arrakis/mux.py:138) (31 samples, 0.18%)</title><rect x="81.5705%" y="356" width="0.1836%" height="15" fill="rgb(224,114,35)" fg:x="13774" fg:w="31"/><text x="81.8205%" y="366.50"></text></g><g><title>warning (logging/__init__.py:1501) (31 samples, 0.18%)</title><rect x="81.5705%" y="372" width="0.1836%" height="15" fill="rgb(245,159,27)" fg:x="13774" fg:w="31"/><text x="81.8205%" y="382.50"></text></g><g><title>_log (logging/__init__.py:1634) (31 samples, 0.18%)</title><rect x="81.5705%" y="388" width="0.1836%" height="15" fill="rgb(245,172,44)" fg:x="13774" fg:w="31"/><text x="81.8205%" y="398.50"></text></g><g><title>handle (logging/__init__.py:1644) (31 samples, 0.18%)</title><rect x="81.5705%" y="404" width="0.1836%" height="15" fill="rgb(236,23,11)" fg:x="13774" fg:w="31"/><text x="81.8205%" y="414.50"></text></g><g><title>callHandlers (logging/__init__.py:1706) (31 samples, 0.18%)</title><rect x="81.5705%" y="420" width="0.1836%" height="15" fill="rgb(205,117,38)" fg:x="13774" fg:w="31"/><text x="81.8205%" y="430.50"></text></g><g><title>read (arrakis_backend_kafka/backend.py:336) (39 samples, 0.23%)</title><rect x="81.5587%" y="340" width="0.2310%" height="15" fill="rgb(237,72,25)" fg:x="13772" fg:w="39"/><text x="81.8087%" y="350.50"></text></g><g><title>PyThread_acquire_lock_timed (libpython3.11.so.1.0) (1,578 samples, 9.35%)</title><rect x="82.0561%" y="468" width="9.3450%" height="15" fill="rgb(244,70,9)" fg:x="13856" fg:w="1578"/><text x="82.3061%" y="478.50">PyThread_acqu..</text></g><g><title>__new_sem_wait_slow64.constprop.0 (libc.so.6) (1,578 samples, 9.35%)</title><rect x="82.0561%" y="484" width="9.3450%" height="15" fill="rgb(217,125,39)" fg:x="13856" fg:w="1578"/><text x="82.3061%" y="494.50">__new_sem_wai..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (1,578 samples, 9.35%)</title><rect x="82.0561%" y="500" width="9.3450%" height="15" fill="rgb(235,36,10)" fg:x="13856" fg:w="1578"/><text x="82.3061%" y="510.50">__futex_absti..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (99 samples, 0.59%)</title><rect x="91.4189%" y="484" width="0.5863%" height="15" fill="rgb(251,123,47)" fg:x="15437" fg:w="99"/><text x="91.6689%" y="494.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (103 samples, 0.61%)</title><rect x="91.4189%" y="468" width="0.6100%" height="15" fill="rgb(221,13,13)" fg:x="15437" fg:w="103"/><text x="91.6689%" y="478.50"></text></g><g><title>handle (logging/__init__.py:976) (1,689 samples, 10.00%)</title><rect x="82.0443%" y="436" width="10.0024%" height="15" fill="rgb(238,131,9)" fg:x="13854" fg:w="1689"/><text x="82.2943%" y="446.50">handle (loggin..</text></g><g><title>acquire (logging/__init__.py:927) (1,688 samples, 10.00%)</title><rect x="82.0502%" y="452" width="9.9964%" height="15" fill="rgb(211,50,8)" fg:x="13855" fg:w="1688"/><text x="82.3002%" y="462.50">acquire (loggi..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (84 samples, 0.50%)</title><rect x="92.0881%" y="484" width="0.4975%" height="15" fill="rgb(245,182,24)" fg:x="15550" fg:w="84"/><text x="92.3381%" y="494.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (90 samples, 0.53%)</title><rect x="92.0881%" y="468" width="0.5330%" height="15" fill="rgb(242,14,37)" fg:x="15550" fg:w="90"/><text x="92.3381%" y="478.50"></text></g><g><title>emit (logging/__init__.py:1113) (97 samples, 0.57%)</title><rect x="92.0763%" y="452" width="0.5744%" height="15" fill="rgb(246,228,12)" fg:x="15548" fg:w="97"/><text x="92.3263%" y="462.50"></text></g><g><title>handle (logging/__init__.py:978) (103 samples, 0.61%)</title><rect x="92.0467%" y="436" width="0.6100%" height="15" fill="rgb(213,55,15)" fg:x="15543" fg:w="103"/><text x="92.2967%" y="446.50"></text></g><g><title>pull (arrakis/mux.py:166) (1,813 samples, 10.74%)</title><rect x="81.9259%" y="356" width="10.7367%" height="15" fill="rgb(209,9,3)" fg:x="13834" fg:w="1813"/><text x="82.1759%" y="366.50">pull (arrakis/mu..</text></g><g><title>debug (logging/__init__.py:1477) (1,812 samples, 10.73%)</title><rect x="81.9318%" y="372" width="10.7308%" height="15" fill="rgb(230,59,30)" fg:x="13835" fg:w="1812"/><text x="82.1818%" y="382.50">debug (logging/_..</text></g><g><title>_log (logging/__init__.py:1634) (1,796 samples, 10.64%)</title><rect x="82.0265%" y="388" width="10.6360%" height="15" fill="rgb(209,121,21)" fg:x="13851" fg:w="1796"/><text x="82.2765%" y="398.50">_log (logging/__..</text></g><g><title>handle (logging/__init__.py:1644) (1,796 samples, 10.64%)</title><rect x="82.0265%" y="404" width="10.6360%" height="15" fill="rgb(220,109,13)" fg:x="13851" fg:w="1796"/><text x="82.2765%" y="414.50">handle (logging/..</text></g><g><title>callHandlers (logging/__init__.py:1706) (1,793 samples, 10.62%)</title><rect x="82.0443%" y="420" width="10.6183%" height="15" fill="rgb(232,18,1)" fg:x="13854" fg:w="1793"/><text x="82.2943%" y="430.50">callHandlers (l..</text></g><g><title>read (arrakis_backend_kafka/backend.py:339) (1,839 samples, 10.89%)</title><rect x="81.7896%" y="340" width="10.8907%" height="15" fill="rgb(215,41,42)" fg:x="13811" fg:w="1839"/><text x="82.0396%" y="350.50">read (arrakis_ba..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (57 samples, 0.34%)</title><rect x="92.7573%" y="484" width="0.3376%" height="15" fill="rgb(224,123,36)" fg:x="15663" fg:w="57"/><text x="93.0073%" y="494.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (60 samples, 0.36%)</title><rect x="92.7573%" y="468" width="0.3553%" height="15" fill="rgb(240,125,3)" fg:x="15663" fg:w="60"/><text x="93.0073%" y="478.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeWriter (pyarrow/libarrow_python.so.2000) (65 samples, 0.38%)</title><rect x="92.7336%" y="436" width="0.3849%" height="15" fill="rgb(205,98,50)" fg:x="15659" fg:w="65"/><text x="92.9836%" y="446.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::PandasWriter (pyarrow/libarrow_python.so.2000) (64 samples, 0.38%)</title><rect x="92.7395%" y="452" width="0.3790%" height="15" fill="rgb(205,185,37)" fg:x="15660" fg:w="64"/><text x="92.9895%" y="462.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (85 samples, 0.50%)</title><rect x="93.1245%" y="484" width="0.5034%" height="15" fill="rgb(238,207,15)" fg:x="15725" fg:w="85"/><text x="93.3745%" y="494.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (94 samples, 0.56%)</title><rect x="93.1245%" y="468" width="0.5567%" height="15" fill="rgb(213,199,42)" fg:x="15725" fg:w="94"/><text x="93.3745%" y="478.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::GetSeriesResult (pyarrow/libarrow_python.so.2000) (97 samples, 0.57%)</title><rect x="93.1186%" y="436" width="0.5744%" height="15" fill="rgb(235,201,11)" fg:x="15724" fg:w="97"/><text x="93.3686%" y="446.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::MakeBlock1D (pyarrow/libarrow_python.so.2000) (97 samples, 0.57%)</title><rect x="93.1186%" y="452" width="0.5744%" height="15" fill="rgb(207,46,11)" fg:x="15724" fg:w="97"/><text x="93.3686%" y="462.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (55 samples, 0.33%)</title><rect x="93.7285%" y="484" width="0.3257%" height="15" fill="rgb(241,35,35)" fg:x="15827" fg:w="55"/><text x="93.9785%" y="494.50"></text></g><g><title>arrow::py::(anonymous namespace)::TypedPandasWriter&lt;7&gt;::TransferSingle (pyarrow/libarrow_python.so.2000) (66 samples, 0.39%)</title><rect x="93.6930%" y="436" width="0.3909%" height="15" fill="rgb(243,32,47)" fg:x="15821" fg:w="66"/><text x="93.9430%" y="446.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeNumPyView (pyarrow/libarrow_python.so.2000) (66 samples, 0.39%)</title><rect x="93.6930%" y="452" width="0.3909%" height="15" fill="rgb(247,202,23)" fg:x="15821" fg:w="66"/><text x="93.9430%" y="462.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (60 samples, 0.36%)</title><rect x="93.7285%" y="468" width="0.3553%" height="15" fill="rgb(219,102,11)" fg:x="15827" fg:w="60"/><text x="93.9785%" y="478.50"></text></g><g><title>arrow::py::ConvertArrayToPandas (pyarrow/libarrow_python.so.2000) (229 samples, 1.36%)</title><rect x="92.7336%" y="404" width="1.3562%" height="15" fill="rgb(243,110,44)" fg:x="15659" fg:w="229"/><text x="92.9836%" y="414.50"></text></g><g><title>arrow::py::ConvertChunkedArrayToPandas (pyarrow/libarrow_python.so.2000) (229 samples, 1.36%)</title><rect x="92.7336%" y="420" width="1.3562%" height="15" fill="rgb(222,74,54)" fg:x="15659" fg:w="229"/><text x="92.9836%" y="430.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (164 samples, 0.97%)</title><rect x="94.1253%" y="420" width="0.9712%" height="15" fill="rgb(216,99,12)" fg:x="15894" fg:w="164"/><text x="94.3753%" y="430.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (181 samples, 1.07%)</title><rect x="94.1253%" y="404" width="1.0719%" height="15" fill="rgb(226,22,26)" fg:x="15894" fg:w="181"/><text x="94.3753%" y="414.50"></text></g><g><title>__pthread_mutex_cond_lock (libc.so.6) (17 samples, 0.10%)</title><rect x="95.0965%" y="420" width="0.1007%" height="15" fill="rgb(217,163,10)" fg:x="16058" fg:w="17"/><text x="95.3465%" y="430.50"></text></g><g><title>__lll_lock_wait (libc.so.6) (17 samples, 0.10%)</title><rect x="95.0965%" y="436" width="0.1007%" height="15" fill="rgb(213,25,53)" fg:x="16058" fg:w="17"/><text x="95.3465%" y="446.50"></text></g><g><title>from_row_batch (arrakis/block.py:403) (423 samples, 2.51%)</title><rect x="92.6981%" y="372" width="2.5050%" height="15" fill="rgb(252,105,26)" fg:x="15653" fg:w="423"/><text x="92.9481%" y="382.50">fr..</text></g><g><title>to_numpy (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (417 samples, 2.47%)</title><rect x="92.7336%" y="388" width="2.4695%" height="15" fill="rgb(220,39,43)" fg:x="15659" fg:w="417"/><text x="92.9836%" y="398.50">to..</text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (32 samples, 0.19%)</title><rect x="95.3571%" y="500" width="0.1895%" height="15" fill="rgb(229,68,48)" fg:x="16102" fg:w="32"/><text x="95.6071%" y="510.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeWriter (pyarrow/libarrow_python.so.2000) (35 samples, 0.21%)</title><rect x="95.3512%" y="452" width="0.2073%" height="15" fill="rgb(252,8,32)" fg:x="16101" fg:w="35"/><text x="95.6012%" y="462.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::PandasWriter (pyarrow/libarrow_python.so.2000) (35 samples, 0.21%)</title><rect x="95.3512%" y="468" width="0.2073%" height="15" fill="rgb(223,20,43)" fg:x="16101" fg:w="35"/><text x="95.6012%" y="478.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (34 samples, 0.20%)</title><rect x="95.3571%" y="484" width="0.2014%" height="15" fill="rgb(229,81,49)" fg:x="16102" fg:w="34"/><text x="95.6071%" y="494.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (101 samples, 0.60%)</title><rect x="95.5762%" y="500" width="0.5981%" height="15" fill="rgb(236,28,36)" fg:x="16139" fg:w="101"/><text x="95.8262%" y="510.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (113 samples, 0.67%)</title><rect x="95.5762%" y="484" width="0.6692%" height="15" fill="rgb(249,185,26)" fg:x="16139" fg:w="113"/><text x="95.8262%" y="494.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::GetSeriesResult (pyarrow/libarrow_python.so.2000) (118 samples, 0.70%)</title><rect x="95.5585%" y="452" width="0.6988%" height="15" fill="rgb(249,174,33)" fg:x="16136" fg:w="118"/><text x="95.8085%" y="462.50"></text></g><g><title>arrow::py::(anonymous namespace)::PandasWriter::MakeBlock1D (pyarrow/libarrow_python.so.2000) (118 samples, 0.70%)</title><rect x="95.5585%" y="468" width="0.6988%" height="15" fill="rgb(233,201,37)" fg:x="16136" fg:w="118"/><text x="95.8085%" y="478.50"></text></g><g><title>arrow::py::(anonymous namespace)::TypedPandasWriter&lt;11&gt;::TransferSingle (pyarrow/libarrow_python.so.2000) (19 samples, 0.11%)</title><rect x="96.2573%" y="452" width="0.1125%" height="15" fill="rgb(221,78,26)" fg:x="16254" fg:w="19"/><text x="96.5073%" y="462.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeNumPyView (pyarrow/libarrow_python.so.2000) (19 samples, 0.11%)</title><rect x="96.2573%" y="468" width="0.1125%" height="15" fill="rgb(250,127,30)" fg:x="16254" fg:w="19"/><text x="96.5073%" y="478.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (19 samples, 0.11%)</title><rect x="96.2573%" y="484" width="0.1125%" height="15" fill="rgb(230,49,44)" fg:x="16254" fg:w="19"/><text x="96.5073%" y="494.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (19 samples, 0.11%)</title><rect x="96.2573%" y="500" width="0.1125%" height="15" fill="rgb(229,67,23)" fg:x="16254" fg:w="19"/><text x="96.5073%" y="510.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (30 samples, 0.18%)</title><rect x="96.3757%" y="500" width="0.1777%" height="15" fill="rgb(249,83,47)" fg:x="16274" fg:w="30"/><text x="96.6257%" y="510.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (36 samples, 0.21%)</title><rect x="96.3757%" y="484" width="0.2132%" height="15" fill="rgb(215,43,3)" fg:x="16274" fg:w="36"/><text x="96.6257%" y="494.50"></text></g><g><title>arrow::py::ConvertArrayToPandas (pyarrow/libarrow_python.so.2000) (211 samples, 1.25%)</title><rect x="95.3512%" y="420" width="1.2496%" height="15" fill="rgb(238,154,13)" fg:x="16101" fg:w="211"/><text x="95.6012%" y="430.50"></text></g><g><title>arrow::py::ConvertChunkedArrayToPandas (pyarrow/libarrow_python.so.2000) (211 samples, 1.25%)</title><rect x="95.3512%" y="436" width="1.2496%" height="15" fill="rgb(219,56,2)" fg:x="16101" fg:w="211"/><text x="95.6012%" y="446.50"></text></g><g><title>arrow::py::(anonymous namespace)::TypedPandasWriter&lt;12&gt;::TransferSingle (pyarrow/libarrow_python.so.2000) (39 samples, 0.23%)</title><rect x="96.3698%" y="452" width="0.2310%" height="15" fill="rgb(233,0,4)" fg:x="16273" fg:w="39"/><text x="96.6198%" y="462.50"></text></g><g><title>arrow::py::(anonymous namespace)::MakeNumPyView (pyarrow/libarrow_python.so.2000) (39 samples, 0.23%)</title><rect x="96.3698%" y="468" width="0.2310%" height="15" fill="rgb(235,30,7)" fg:x="16273" fg:w="39"/><text x="96.6198%" y="478.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (155 samples, 0.92%)</title><rect x="96.6067%" y="436" width="0.9179%" height="15" fill="rgb(250,79,13)" fg:x="16313" fg:w="155"/><text x="96.8567%" y="446.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (164 samples, 0.97%)</title><rect x="96.6067%" y="420" width="0.9712%" height="15" fill="rgb(211,146,34)" fg:x="16313" fg:w="164"/><text x="96.8567%" y="430.50"></text></g><g><title>from_row_batch (arrakis/block.py:409) (387 samples, 2.29%)</title><rect x="95.3097%" y="372" width="2.2918%" height="15" fill="rgb(228,22,38)" fg:x="16094" fg:w="387"/><text x="95.5597%" y="382.50">f..</text></g><g><title>_arrow_to_numpy_array (arrakis/block.py:511) (382 samples, 2.26%)</title><rect x="95.3393%" y="388" width="2.2622%" height="15" fill="rgb(235,168,5)" fg:x="16099" fg:w="382"/><text x="95.5893%" y="398.50">_..</text></g><g><title>to_numpy (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (382 samples, 2.26%)</title><rect x="95.3393%" y="404" width="2.2622%" height="15" fill="rgb(221,155,16)" fg:x="16099" fg:w="382"/><text x="95.5893%" y="414.50">t..</text></g><g><title>&lt;listcomp&gt; (arrakis_backend_kafka/backend.py:342) (834 samples, 4.94%)</title><rect x="92.6981%" y="356" width="4.9390%" height="15" fill="rgb(215,215,53)" fg:x="15653" fg:w="834"/><text x="92.9481%" y="366.50">&lt;listc..</text></g><g><title>read (arrakis_backend_kafka/backend.py:341) (844 samples, 5.00%)</title><rect x="92.6803%" y="340" width="4.9982%" height="15" fill="rgb(223,4,10)" fg:x="15650" fg:w="844"/><text x="92.9303%" y="350.50">read (..</text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:588) (16,118 samples, 95.45%)</title><rect x="2.2385%" y="308" width="95.4519%" height="15" fill="rgb(234,103,6)" fg:x="378" fg:w="16118"/><text x="2.4885%" y="318.50">_convert_blocks_to_batches (arrakis_server/server.py:588)</text></g><g><title>stream (arrakis_backend_kafka/backend.py:182) (16,115 samples, 95.43%)</title><rect x="2.2563%" y="324" width="95.4341%" height="15" fill="rgb(227,97,0)" fg:x="381" fg:w="16115"/><text x="2.5063%" y="334.50">stream (arrakis_backend_kafka/backend.py:182)</text></g><g><title>__pyx_sq_item_7pyarrow_3lib_StructType (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (19 samples, 0.11%)</title><rect x="97.8148%" y="452" width="0.1125%" height="15" fill="rgb(234,150,53)" fg:x="16517" fg:w="19"/><text x="98.0648%" y="462.50"></text></g><g><title>__getitem__ (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (17 samples, 0.10%)</title><rect x="97.8266%" y="468" width="0.1007%" height="15" fill="rgb(228,201,54)" fg:x="16519" fg:w="17"/><text x="98.0766%" y="478.50"></text></g><g><title>Array_getitem (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (17 samples, 0.10%)</title><rect x="97.8266%" y="484" width="0.1007%" height="15" fill="rgb(222,22,37)" fg:x="16519" fg:w="17"/><text x="98.0766%" y="494.50"></text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::py::internal::VisitSequence&lt;arrow::py::(anonymous namespace)::PyConverter::Extend(_object*, long, long)::{lambda(_object*, bool*)#1}&gt;(_object*, long, arrow::py::(anonymous namespace)::PyConverter::Extend(_object*, long, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (pyarrow/libarrow_python.so.2000) (48 samples, 0.28%)</title><rect x="97.7851%" y="372" width="0.2843%" height="15" fill="rgb(237,53,32)" fg:x="16512" fg:w="48"/><text x="98.0351%" y="382.50"></text></g><g><title>arrow::py::(anonymous namespace)::PyListConverter&lt;arrow::ListType&gt;::Append (pyarrow/libarrow_python.so.2000) (48 samples, 0.28%)</title><rect x="97.7851%" y="388" width="0.2843%" height="15" fill="rgb(233,25,53)" fg:x="16512" fg:w="48"/><text x="98.0351%" y="398.50"></text></g><g><title>arrow::py::(anonymous namespace)::PyListConverter&lt;arrow::ListType&gt;::AppendSequence (pyarrow/libarrow_python.so.2000) (48 samples, 0.28%)</title><rect x="97.7851%" y="404" width="0.2843%" height="15" fill="rgb(210,40,34)" fg:x="16512" fg:w="48"/><text x="98.0351%" y="414.50"></text></g><g><title>arrow::py::(anonymous namespace)::PyConverter::Extend (pyarrow/libarrow_python.so.2000) (48 samples, 0.28%)</title><rect x="97.7851%" y="420" width="0.2843%" height="15" fill="rgb(241,220,44)" fg:x="16512" fg:w="48"/><text x="98.0351%" y="430.50"></text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::py::internal::VisitSequence&lt;arrow::py::(anonymous namespace)::PyConverter::Extend(_object*, long, long)::{lambda(_object*, bool*)#1}&gt;(_object*, long, arrow::py::(anonymous namespace)::PyConverter::Extend(_object*, long, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (pyarrow/libarrow_python.so.2000) (48 samples, 0.28%)</title><rect x="97.7851%" y="436" width="0.2843%" height="15" fill="rgb(235,28,35)" fg:x="16512" fg:w="48"/><text x="98.0351%" y="446.50"></text></g><g><title>arrow::py::ConvertPySequence (pyarrow/libarrow_python.so.2000) (53 samples, 0.31%)</title><rect x="97.7851%" y="356" width="0.3139%" height="15" fill="rgb(210,56,17)" fg:x="16512" fg:w="53"/><text x="98.0351%" y="366.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (34 samples, 0.20%)</title><rect x="98.0990%" y="372" width="0.2014%" height="15" fill="rgb(224,130,29)" fg:x="16565" fg:w="34"/><text x="98.3490%" y="382.50"></text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:598) (88 samples, 0.52%)</title><rect x="97.7851%" y="308" width="0.5211%" height="15" fill="rgb(235,212,8)" fg:x="16512" fg:w="88"/><text x="98.0351%" y="318.50"></text></g><g><title>array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (88 samples, 0.52%)</title><rect x="97.7851%" y="324" width="0.5211%" height="15" fill="rgb(223,33,50)" fg:x="16512" fg:w="88"/><text x="98.0351%" y="334.50"></text></g><g><title>lib__sequence_to_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (88 samples, 0.52%)</title><rect x="97.7851%" y="340" width="0.5211%" height="15" fill="rgb(219,149,13)" fg:x="16512" fg:w="88"/><text x="98.0351%" y="350.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (35 samples, 0.21%)</title><rect x="98.0990%" y="356" width="0.2073%" height="15" fill="rgb(250,156,29)" fg:x="16565" fg:w="35"/><text x="98.3490%" y="366.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (42 samples, 0.25%)</title><rect x="98.5254%" y="388" width="0.2487%" height="15" fill="rgb(216,193,19)" fg:x="16637" fg:w="42"/><text x="98.7754%" y="398.50"></text></g><g><title>arrow::py::ConvertPySequence (pyarrow/libarrow_python.so.2000) (79 samples, 0.47%)</title><rect x="98.3241%" y="356" width="0.4678%" height="15" fill="rgb(216,135,14)" fg:x="16603" fg:w="79"/><text x="98.5741%" y="366.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (45 samples, 0.27%)</title><rect x="98.5254%" y="372" width="0.2665%" height="15" fill="rgb(241,47,5)" fg:x="16637" fg:w="45"/><text x="98.7754%" y="382.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (29 samples, 0.17%)</title><rect x="98.8867%" y="356" width="0.1717%" height="15" fill="rgb(233,42,35)" fg:x="16698" fg:w="29"/><text x="99.1367%" y="366.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (29 samples, 0.17%)</title><rect x="98.8867%" y="372" width="0.1717%" height="15" fill="rgb(231,13,6)" fg:x="16698" fg:w="29"/><text x="99.1367%" y="382.50"></text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:601) (129 samples, 0.76%)</title><rect x="98.3063%" y="308" width="0.7639%" height="15" fill="rgb(207,181,40)" fg:x="16600" fg:w="129"/><text x="98.5563%" y="318.50"></text></g><g><title>array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (129 samples, 0.76%)</title><rect x="98.3063%" y="324" width="0.7639%" height="15" fill="rgb(254,173,49)" fg:x="16600" fg:w="129"/><text x="98.5563%" y="334.50"></text></g><g><title>lib__sequence_to_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (126 samples, 0.75%)</title><rect x="98.3241%" y="340" width="0.7462%" height="15" fill="rgb(221,1,38)" fg:x="16603" fg:w="126"/><text x="98.5741%" y="350.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (23 samples, 0.14%)</title><rect x="99.1295%" y="372" width="0.1362%" height="15" fill="rgb(206,124,46)" fg:x="16739" fg:w="23"/><text x="99.3795%" y="382.50"></text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:603) (34 samples, 0.20%)</title><rect x="99.0702%" y="308" width="0.2014%" height="15" fill="rgb(249,21,11)" fg:x="16729" fg:w="34"/><text x="99.3202%" y="318.50"></text></g><g><title>from_arrays (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (34 samples, 0.20%)</title><rect x="99.0702%" y="324" width="0.2014%" height="15" fill="rgb(222,201,40)" fg:x="16729" fg:w="34"/><text x="99.3202%" y="334.50"></text></g><g><title>validate (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (24 samples, 0.14%)</title><rect x="99.1295%" y="340" width="0.1421%" height="15" fill="rgb(235,61,29)" fg:x="16739" fg:w="24"/><text x="99.3795%" y="350.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (24 samples, 0.14%)</title><rect x="99.1295%" y="356" width="0.1421%" height="15" fill="rgb(219,207,3)" fg:x="16739" fg:w="24"/><text x="99.3795%" y="366.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (25 samples, 0.15%)</title><rect x="99.3071%" y="388" width="0.1481%" height="15" fill="rgb(222,56,46)" fg:x="16769" fg:w="25"/><text x="99.5571%" y="398.50"></text></g><g><title>arrow::py::ConvertPySequence (pyarrow/libarrow_python.so.2000) (27 samples, 0.16%)</title><rect x="99.3012%" y="356" width="0.1599%" height="15" fill="rgb(239,76,54)" fg:x="16768" fg:w="27"/><text x="99.5512%" y="366.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (26 samples, 0.15%)</title><rect x="99.3071%" y="372" width="0.1540%" height="15" fill="rgb(231,124,27)" fg:x="16769" fg:w="26"/><text x="99.5571%" y="382.50"></text></g><g><title>__futex_abstimed_wait_common (libc.so.6) (68 samples, 0.40%)</title><rect x="99.4729%" y="372" width="0.4027%" height="15" fill="rgb(249,195,6)" fg:x="16797" fg:w="68"/><text x="99.7229%" y="382.50"></text></g><g><title>pthread_cond_timedwait@@GLIBC_2.3.2 (libc.so.6) (80 samples, 0.47%)</title><rect x="99.4729%" y="356" width="0.4738%" height="15" fill="rgb(237,174,47)" fg:x="16797" fg:w="80"/><text x="99.7229%" y="366.50"></text></g><g><title>_convert_blocks_to_batches (arrakis_server/server.py:605) (115 samples, 0.68%)</title><rect x="99.2716%" y="308" width="0.6810%" height="15" fill="rgb(206,201,31)" fg:x="16763" fg:w="115"/><text x="99.5216%" y="318.50"></text></g><g><title>array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (115 samples, 0.68%)</title><rect x="99.2716%" y="324" width="0.6810%" height="15" fill="rgb(231,57,52)" fg:x="16763" fg:w="115"/><text x="99.5216%" y="334.50"></text></g><g><title>lib__sequence_to_array (pyarrow/lib.cpython-311-x86_64-linux-gnu.so) (113 samples, 0.67%)</title><rect x="99.2834%" y="340" width="0.6692%" height="15" fill="rgb(248,177,22)" fg:x="16765" fg:w="113"/><text x="99.5334%" y="350.50"></text></g><g><title>_generate_stream (arrakis_server/server.py:620) (16,506 samples, 97.75%)</title><rect x="2.2089%" y="292" width="97.7496%" height="15" fill="rgb(215,211,37)" fg:x="373" fg:w="16506"/><text x="2.4589%" y="302.50">_generate_stream (arrakis_server/server.py:620)</text></g><g><title>all (16,886 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="16886"/><text x="0.2500%" y="62.50"></text></g><g><title>clone3 (libc.so.6) (16,886 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(227,165,31)" fg:x="0" fg:w="16886"/><text x="0.2500%" y="78.50">clone3 (libc.so.6)</text></g><g><title>start_thread (libc.so.6) (16,886 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(228,167,24)" fg:x="0" fg:w="16886"/><text x="0.2500%" y="94.50">start_thread (libc.so.6)</text></g><g><title>grpc_core::(anonymous namespace)::ThreadInternalsPosix::ThreadInternalsPosix(char const*, void (*)(void*), void*, bool*, grpc_core::Thread::Options const&amp;)::{lambda(void*)#1}::_FUN (pyarrow/libarrow_flight.so.2000) (16,886 samples, 100.00%)</title><rect x="0.0000%" y="100" width="100.0000%" height="15" fill="rgb(228,143,12)" fg:x="0" fg:w="16886"/><text x="0.2500%" y="110.50">grpc_core::(anonymous namespace)::ThreadInternalsPosix::ThreadInternalsPosix(char const*, void (*)(void*), void*, bool*, grpc_core::Thread::Options const&amp;)::{lambda(vo..</text></g><g><title>grpc::ThreadManager::WorkerThread::Run (pyarrow/libarrow_flight.so.2000) (16,886 samples, 100.00%)</title><rect x="0.0000%" y="116" width="100.0000%" height="15" fill="rgb(249,149,8)" fg:x="0" fg:w="16886"/><text x="0.2500%" y="126.50">grpc::ThreadManager::WorkerThread::Run (pyarrow/libarrow_flight.so.2000)</text></g><g><title>grpc::ThreadManager::MainWorkLoop (pyarrow/libarrow_flight.so.2000) (16,886 samples, 100.00%)</title><rect x="0.0000%" y="132" width="100.0000%" height="15" fill="rgb(243,35,44)" fg:x="0" fg:w="16886"/><text x="0.2500%" y="142.50">grpc::ThreadManager::MainWorkLoop (pyarrow/libarrow_flight.so.2000)</text></g><g><title>grpc::Server::SyncRequest::ContinueRunAfterInterception (pyarrow/libarrow_flight.so.2000) (16,886 samples, 100.00%)</title><rect x="0.0000%" y="148" width="100.0000%" height="15" fill="rgb(246,89,9)" fg:x="0" fg:w="16886"/><text x="0.2500%" y="158.50">grpc::Server::SyncRequest::ContinueRunAfterInterception (pyarrow/libarrow_flight.so.2000)</text></g><g><title>grpc::internal::ServerStreamingHandler&lt;arrow::flight::protocol::FlightService::Service, arrow::flight::protocol::Ticket, arrow::flight::protocol::FlightData&gt;::RunHandler (pyarrow/libarrow_flight.so.2000) (16,886 samples, 100.00%)</title><rect x="0.0000%" y="164" width="100.0000%" height="15" fill="rgb(233,213,13)" fg:x="0" fg:w="16886"/><text x="0.2500%" y="174.50">grpc::internal::ServerStreamingHandler&lt;arrow::flight::protocol::FlightService::Service, arrow::flight::protocol::Ticket, arrow::flight::protocol::FlightData&gt;::RunHandl..</text></g><g><title>std::_Function_handler&lt;grpc::Status(arrow::flight::protocol::FlightService::Service*, grpc::ServerContext*, arrow::flight::protocol::Ticket const*, grpc::ServerWriter&lt;arrow::flight::protocol::FlightData&gt;*), arrow::flight::protocol::FlightService::Service()::Service::{lambda(arrow::flight::protocol::FlightService::Service*, grpc::ServerContext*, arrow::flight::protocol::Ticket const*, grpc::ServerWriter&lt;arrow::flight::protocol::FlightData&gt;*)#6}&gt;::_M_invoke (pyarrow/libarrow_flight.so.2000) (16,886 samples, 100.00%)</title><rect x="0.0000%" y="180" width="100.0000%" height="15" fill="rgb(233,141,41)" fg:x="0" fg:w="16886"/><text x="0.2500%" y="190.50">std::_Function_handler&lt;grpc::Status(arrow::flight::protocol::FlightService::Service*, grpc::ServerContext*, arrow::flight::protocol::Ticket const*, grpc::ServerWriter&lt;..</text></g><g><title>arrow::flight::transport::grpc::(anonymous namespace)::GrpcServiceHandler::DoGet (pyarrow/libarrow_flight.so.2000) (16,886 samples, 100.00%)</title><rect x="0.0000%" y="196" width="100.0000%" height="15" fill="rgb(239,167,4)" fg:x="0" fg:w="16886"/><text x="0.2500%" y="206.50">arrow::flight::transport::grpc::(anonymous namespace)::GrpcServiceHandler::DoGet (pyarrow/libarrow_flight.so.2000)</text></g><g><title>arrow::flight::internal::ServerTransport::DoGet (pyarrow/libarrow_flight.so.2000) (16,886 samples, 100.00%)</title><rect x="0.0000%" y="212" width="100.0000%" height="15" fill="rgb(209,217,16)" fg:x="0" fg:w="16886"/><text x="0.2500%" y="222.50">arrow::flight::internal::ServerTransport::DoGet (pyarrow/libarrow_flight.so.2000)</text></g><g><title>arrow::py::flight::PyFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000) (16,886 samples, 100.00%)</title><rect x="0.0000%" y="228" width="100.0000%" height="15" fill="rgb(219,88,35)" fg:x="0" fg:w="16886"/><text x="0.2500%" y="238.50">arrow::py::flight::PyFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000)</text></g><g><title>arrow::py::flight::PyGeneratorFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000) (16,886 samples, 100.00%)</title><rect x="0.0000%" y="244" width="100.0000%" height="15" fill="rgb(220,193,23)" fg:x="0" fg:w="16886"/><text x="0.2500%" y="254.50">arrow::py::flight::PyGeneratorFlightDataStream::Next (pyarrow/libarrow_python_flight.so.2000)</text></g><g><title>std::_Function_handler&lt;arrow::Status(_object*, arrow::flight::FlightPayload*), arrow::Status (*)(void*, arrow::flight::FlightPayload*)&gt;::_M_invoke (pyarrow/_flight.cpython-311-x86_64-linux-gnu.so) (16,515 samples, 97.80%)</title><rect x="2.1971%" y="260" width="97.8029%" height="15" fill="rgb(230,90,52)" fg:x="371" fg:w="16515"/><text x="2.4471%" y="270.50">std::_Function_handler&lt;arrow::Status(_object*, arrow::flight::FlightPayload*), arrow::Status (*)(void*, arrow::flight::FlightPayload*)&gt;::_M_invoke (pyarrow/_flight..</text></g><g><title>_flight__data_stream_next (pyarrow/_flight.cpython-311-x86_64-linux-gnu.so) (16,515 samples, 97.80%)</title><rect x="2.1971%" y="276" width="97.8029%" height="15" fill="rgb(252,106,19)" fg:x="371" fg:w="16515"/><text x="2.4471%" y="286.50">_flight__data_stream_next (pyarrow/_flight.cpython-311-x86_64-linux-gnu.so)</text></g></svg></svg>