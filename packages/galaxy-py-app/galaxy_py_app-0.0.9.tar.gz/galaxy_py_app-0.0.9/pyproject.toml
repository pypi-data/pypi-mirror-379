[build-system]
requires = [
    "poetry-core>=2.0.0"
]
build-backend = "poetry.core.masonry.api"

[project]
name = "galaxy-py-app"
version = "0.0.9"
dependencies = [
    "galaxy-py-utils",
    "galaxy-py-error",
    "galaxy-py-service",
    "galaxy-py-perfo",
    "galaxy-py-kernel",
    "galaxy-py-data",
    "galaxy-py-net",
    "galaxy-py-cmd",
    "galaxy-py-proc",
    "galaxy-py-engine",
    "galaxy-py-report",
    "galaxy-py-comm",
    "galaxy-py-algo",
    "transitions",
    "pyyaml",
    "multipledispatch"
]
requires-python = ">=3.10,<4.0"
authors = [
    { name = "Bastien Saltel", email = "bastien.saltel@gmail.com" }
]
maintainers = [
    { name = "Bastien Saltel", email = "bastien.saltel@gmail.com" }
]
description = "Python Application for the Galaxy Project"
readme = "README.md"
license = "Apache-2.0"
license-files = [
    "LICEN[CS]E.*",
    "AUTHORS.md"
]
keywords = [
    "galaxy",
    "galaxy-app",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]

[tool.poetry]
packages = [
    { include = "galaxy" }
]

[project.urls]
Homepage = "https://github.com/bsaltel/galaxy-py-app"
Documentation = "https://github.com/bsaltel/galaxy-py-app"
Repository = "https://github.com/bsaltel/galaxy-py-app.git"
Issues = "https://github.com/bsaltel/galaxy-py-app/issues"
Changelog = "https://github.com/bsaltel/galaxy-py-app/blob/main/CHANGELOG.md"

[tool.poetry.dependencies]
galaxy-py-utils = "0.0.2"
galaxy-py-error = "0.0.2"
galaxy-py-service = "0.0.2"
galaxy-py-perfo = "0.0.2"
galaxy-py-kernel = "0.0.3"
galaxy-py-data = "0.0.7"
galaxy-py-net = "0.0.7"
galaxy-py-cmd = "0.0.9"
galaxy-py-proc = "0.0.9"
galaxy-py-engine = "0.0.2"
galaxy-py-report = "0.0.8"
galaxy-py-comm = "0.0.6"
galaxy-py-algo = "0.0.2"
transitions = "^0.9.3"
pyyaml = ">=6.0.2"
multipledispatch = ">=1.0.0"

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.8"

[tool.poetry.group.doc]
optional = true

[tool.poetry.group.doc.dependencies]
mkdocs = "*"
importlib-metadata = ">=8.5.0,<9.0.0"
sphinx = ">=8.1.3,<9.0.0"
sphinx-autoapi = ">=3.0.0,<4.0.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^6.0.0"
pytest-mock = "*"
pytest-testdox = ">=3.1.0,<4.0.0"
coverage = ">=7.4.4,<8.0.0"

[tool.poetry.group.build]
optional = true

[tool.poetry.group.build.dependencies]
virtualenv = ">=20.26.6,<20.33.0"
twine = "*"
pip-tools = "*"
pipenv = "*"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pylint = ">=3.0.1,<4.0.0"
pre-commit = ">=4.0.1,<5.0.0"
black = ">=24.2.0,<25.0.0"
mypy = ">=1.6.0,<2.0.0"
isort = ">=5.12.0,<6.0.0"
colorama = ">=0.4.6,<1.0.0"

[tool.black]
line-length = 132
target-version = ["py310"]
include = "(src/scripts/.*$|.pyi?$)"
exclude = """
/(
    .git
  | __pycache__
  | .tox
  | venv
  | .poetry
  | build
  | dist
  | doc
  | note
)/
"""

[tool.isort]
profile = "black"
line_length = 132
skip_glob = [
    "docs",
    "notes",
    ".poetry"
]

[tool.coverage.paths]
source = [
    "src"
]

[tool.coverage.run]
branch = true
source = [
    "src/sample"
]

[tool.coverage.report]
show_missing = false
precision = 1

[tool.pytest.ini_options]
filterwarnings = [
    "error",  # turn all Python warnings into test failures, so they're hard to miss
]

[tool.mypy]
# Settings are mostly equivalent to strict=true as of v1.14.1
pretty = true
show_absolute_path = true
show_column_numbers = true
show_error_codes = true
files = [
    "src/sample",
    "tests"
]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = false
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_no_return = true
warn_unused_configs = true
warn_unused_ignores = true

# It's hard to make tests compliant using unittest.mock
[[tool.mypy.overrides]]
module = "tests.*"
check_untyped_defs = false
allow_untyped_defs = true

# There is no type hinting for pytest
[[tool.mypy.overrides]]
module = "pytest"
ignore_missing_imports = true
