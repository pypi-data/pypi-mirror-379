# buildout.cfg file for Plone 4 development work
# - for production installations please use http://plone.org/download
# Each part has more information about its recipe on PyPi
# http://pypi.python.org/pypi
# ... just reach by the recipe name
[buildout]
unzip = true
extensions = mr.developer

dump-picked-versions-file = versions-picked.cfg

index = http://devpi.imio.be/root/imio/+simple

allow-picked-versions = true
parts =
    psycopg2
    omelette
    instance
    test
    coverage
    report
    code-analysis
    zopepy
    sphinx

extends =
    http://dist.plone.org/release/4.3.4/versions.cfg
    versions.cfg

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
allow-hosts =
    *.python.org
    *.plone.org
    *.zope.org
    *labix.org
    *imio.be

find-links =
    http://dist.plone.org/release/4.3.4
    http://dist.plone.org/thirdparty

sources = sources
sources-dir = devel
auto-checkout = appy
                collective.archetypes.select2
                collective.documentgenerator
                collective.faceted.task
                collective.wfadaptations
                collective.z3cform.select2
                imio.history
                imio.pm.wsclient
                imio.pm.locales
                plone.app.referenceintegrity
                urban.restapi
                urban.vocabulary

# Reference any folders where you have Python egg source code under development here
# e.g.: develop = src/my.package
# If you are using the mr.developer extension and have the source code in a
# repository mr.developer will handle this automatically for you
develop = .


[sphinx]
recipe = collective.recipe.sphinxbuilder
outputs = html
source = ${buildout:directory}/docs
build = ${buildout:directory}/docs/html
eggs =
  Sphinx
  Docutils
  roman
  Pygments
  collective.sphinx.autoatschema


[remotes]
imio = https://github.com/IMIO
imio_push = git@github.com:IMIO

[sources]
appy = svn https://svn.forge.pallavi.be/appy-dev/dev0
collective.archetypes.select2 = git ${remotes:imio}/collective.archetypes.select2 pushurl=${remotes:imio_push}/collective.archetypes.select2.git
collective.documentgenerator = git https://github.com/collective/collective.documentgenerator.git
collective.faceted.task = git ${remotes:imio}/collective.faceted.task pushurl=${remotes:imio_push}/collective.faceted.task.git
collective.wfadaptations = git https://github.com/collective/collective.wfadaptations.git
collective.z3cform.select2 = git https://github.com/collective/collective.z3cform.select2.git pushurl=git@github.com:collective/collective.z3cform.select2.git branch=1.x
eea.faceted.vocabularies = git https://github.com/collective/eea.faceted.vocabularies.git
imio.history = git ${remotes:imio}/imio.history pushurl=${remotes:imio_push}/imio.history.git
imio.pm.wsclient = git https://github.com/IMIO/imio.pm.wsclient.git
imio.pm.locales = git https://github.com/IMIO/imio.pm.locales.git
plone.app.referenceintegrity = git https://github.com/imio/plone.app.referenceintegrity.git
urban.restapi = git ${remotes:imio}/urban.restapi.git pushurl=${remotes:imio_push}/urban.restapi.git
urban.vocabulary = git ${remotes:imio}/urban.vocabulary.git pushurl=${remotes:imio_push}/urban.vocabulary.git


# Create bin/instance command to manage Zope start up and shutdown
[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080
debug-mode = off
verbose-security = on
blob-storage = var/blobstorage
environment-vars =
    zope_i18n_compile_mo_files true

eggs =
    archetypes.schematuning
    collective.ckeditor
    collective.documentgenerator
    collective.eeafaceted.collectionwidget
    collective.eeafaceted.z3ctable
    imio.pm.locales
    ipdb
    iw.debug
    MySQL-python
    plone.reload
    Products.Clouseau
    Products.ContentTypeValidator
    Products.urban
    imio.schedule
    collective.faceted.task
    collective.wfadaptations
    urban.vocabulary
    collective.z3cform.select2


# Some pre-Plone 3.3 packages may need you to register the package name here in
# order their configure.zcml to be run (http://plone.org/products/plone/roadmap/247)
# - this is never required for packages in the Products namespace (Products.*)
zcml =
    Products.urban
    collective.ckeditor
    iw.debug

[code-analysis]
recipe = plone.recipe.codeanalysis
directory = ${buildout:directory}/src

# zopepy commands allows you to execute Python scripts using a PYTHONPATH
# including all the configured eggs
[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy

# create bin/test command
[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs =
    Products.urban [test]
    imio.schedule [test]
    Products.ContentTypeValidator
    ipdb
environment = testenv

[testenv]
zope_i18n_compile_mo_files = true

[coverage]
recipe = zc.recipe.egg
eggs = coverage
initialization =
    include = '--source=${buildout:directory}/src/Products/urban'
    sys.argv = sys.argv[:] + ['run', include, 'bin/test', '--all', '-s', 'Products.urban']

[report]
recipe = zc.recipe.egg
eggs = coverage
scripts = coverage=report
initialization =
    sys.argv = sys.argv[:] + ['html', '-i']

# create ZopeSkel command
[zopeskel]
unzip = true
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    ${instance:eggs}

# symlinks all Python source code to parts/omelette folder when buildout is run
# windows users will need to install additional software for this part to build
# correctly.  See http://pypi.python.org/pypi/collective.recipe.omelette for
# relevant details.
[omelette]
recipe = collective.recipe.omelette
eggs =
    ${test:eggs}
    ${instance:eggs}
#products = ${instance:products}
#packages = ${zope2:location}/lib/python ./
# Put your mr.developer managed source code repositories here, see
# http://pypi.python.org/pypi/mr.developer for details on format for this part

[psycopg2]
recipe = zc.recipe.egg:custom
egg = psycopg2
find-links = http://eggs.affinitic.be/psycopg2-2.0.6.tar.gz
define = PSYCOPG_EXTENSIONS,PSYCOPG_DISPLAY_SIZE,PSYCOPG_NEW_BOOLEAN,HAVE_PQFREEMEM,HAVE_PQPROTOCOL3
include-dirs = /usr/include
library-dirs = /usr/lib
rpath = /usr/lib

[templates]
recipe = zc.recipe.egg:scripts
eggs = Products.urban [templates]
