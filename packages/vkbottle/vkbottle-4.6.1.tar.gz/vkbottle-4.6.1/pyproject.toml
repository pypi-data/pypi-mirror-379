[project]
name = "vkbottle"
description = "Homogenic! Customizable asynchronous VK API framework implementing comfort and speed."
license = { file = "LICENSE" }
keywords = [
  "vk",
  "vk-api",
  "vkbottle",
  "bot-longpoll",
  "user-longpoll",
  "async",
  "asyncio",
  "bot",
  "longpoll-api",
  "callback",
  "middleware",
]
dynamic = ["version", "classifiers"]
readme = "README.md"
authors = [{ name = "timoniq", email = "tesseradecades@mail.ru" }]
maintainers = [{ name = "luwqz1", email = "howluwqz1@gmail.com" }]
requires-python = '>=3.9,<4.0'
dependencies = [
    "aiohttp (>=3.12.15,<4.0.0)",
    "choicelib (>=0.1.5,<0.2.0)",
    "pydantic (>=2.11.9,<3.0.0)",
    "vbml (>=1.1.post1,<2.0)",
    "aiofiles (==24.1.0)",
    "typing-extensions (>=4.15.0,<5.0.0)",
    "colorama (>=0.4.6,<0.5.0)",
    "vkbottle-types (>=5.199.99.12,<5.200.0.0)",
]

[project.urls]
"Bug Tracker" = "https://github.com/vkbottle/vkbottle/issues"
Homepage = "https://github.com/vkbottle/vkbottle"
Documentation = "https://vkbottle.readthedocs.io/ru/latest"

[tool.poetry]
version = "4.6.1"
classifiers = [
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Quality Assurance",
  "Typing :: Typed",
]
requires-poetry = ">=2.0.0,<3.0.0"

[tool.poetry.group.dev.dependencies]
# Lint
black = "^25.9.0"
mypy = "^1.18.2"
mypy-extensions = "^1.1.0"
# mypy stubs
types-aiofiles = ">=24.1.0.20250822,<25.0"
# flake8, isort and autoflake replacement
ruff = ">=0.13.1"
# Tests
pytest = ">=8.4.2,<9.0.0"
pytest-asyncio = ">=1.2.0,<2.0.0"
pytest-cov = ">=7.0.0,<8"
pytest-mock = "^3.15.1"
aioresponses = "^0.7.8"
# Pre-commit
pre-commit = ">=4.3.0,<5.0"

[tool.poetry.group.docs.dependencies]
# Docs
mkdocs = "^1.6.1"
mkdocs-material = "^9.6.20"
mkdocs-redirects = "^1.2.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.mypy]
python_version = "3.9"
plugins = [
    "pydantic.mypy",
]
ignore_missing_imports = true
warn_no_return = false
warn_return_any = false
warn_unused_configs = true
check_untyped_defs = true

[[tool.mypy.overrides]]
# Ignore tests, because we can use fixtures that not quite represent a real type
module = "tests.*"
ignore_errors = true

[tool.black]
line-length = 99
target-version = ["py39"]

[tool.ruff]
line-length = 99
respect-gitignore = true
target-version = "py39"
lint.select = [
  "F",     # Pyflakes
  "E",     # pycodestyle errors
  "W",     # pycodestyle warnings
  "C90",   # mccabe
  "I",     # isort
  "N",     # pep8-naming
  "D",     # pydocstyle
  "UP",    # pyupgrade
  "YTT",   # flake8-2020
  "ASYNC", # flake8-async
  "S",     # flake8-bandit
  "B",     # flake8-bugbear
  "A",     # flake8-builtins
  "C40",   # flake8-comprehensions
  "T10",   # flake8-debugger
  "EM",    # flake8-errmsg
  "EXE",   # flake8-executable
  "FA",    # flake8-future-annotations
  "ISC",   # flake8-implicit-str-concat
  "ICN",   # flake8-import-conventions
  "G",     # flake8-logging-format
  "INP",   # flake8-no-pep420
  "PIE",   # flake8-pie
  "T20",   # flake8-print
  "PYI",   # flake8-pyi
  "PT",    # flake8-pytest-style
  "Q",     # flake8-quotes
  "RSE",   # flake8-raise
  "RET",   # flake8-return
  "SLF",   # flake8-self
  "SLOT",  # flake8-slots
  "SIM",   # flake8-simplify
  "TID",   # flake8-tidy-imports
  "INT",   # flake8-gettext
  "ARG",   # flake8-unused-arguments
  "PTH",   # flake8-use-pathlib
  "TD",    # flake8-todos
  "FIX",   # flake8-fixme
  "ERA",   # eradicate
  "PD",    # pandas-vet
  "PGH",   # pygrep-hooks
  "PL",    # Pylint
  "PLC",   # Pylint Convention
  "PLE",   # Pylint Error
  "PLR",   # Pylint Refactor
  "PLW",   # Pylint Warning
  "TRY",   # tryceratops
  "FLY",   # flynt
  "NPY",   # NumPy-specific rules
  "PERF",  # Perflint
  "RUF",   # ruff
  "ALL",   # All not listed above
]
lint.ignore = [
  "A005",    # stdlib-module-shadowing
  "ANN",     # flake8-annotations
  "BLE",     # flake8-blind-except
  "FBT",     # flake8-boolean-trap
  "COM",     # flake8-commas
  "CPY",     # Copyright-related rules
  "DTZ",     # flake8-datetimez
  "DJ",      # flake8-Django
  "INP",     # flake8-no-pep420
  "PYI",     # flake8-pyi
  "Q",       # flake8-quotes
  "RET",     # flake8-return
  "PTH",     # flake8-use-pathlib
  "ERA",     # flake8-eradicate
  "PD",      # pandas-vet
  "D",       # pydocstyle
  "TC003",   # typing-only-standard-library-import
  "TRY",     # tryceratops
  "SLF",     # flake8-self
  "AIR",     # Airflow
  "UP037",   # quoted-annotation
  "E501",    # line too long
  "B905",    # `zip()` without an explicit `strict=` parameter (python3.10+ only)
  "PLC0415", # `import` should be at the top-level of a file
  "PLR0913", # Too many arguments to function call
  "A003",    # Class attribute builtin name shadowing
  "N818",    # Exception should be named with an Error suffix
  "PGH003",  # Use specific rule codes when ignoring type issues
  "ARG002",  # Unused method argument
  "RUF001",  # String contains ambiguous unicode character
  "RUF002",  # Docstring contains ambiguous unicode character
  "RUF003",  # Comment contains ambiguous unicode character
  "PLW1641", # Object does not implement `__hash__` method
  "PLW2901", # for loop variable overwritten by assignment target
  "PLE1205", # https://github.com/charliermarsh/ruff/issues/3351
  "B030",    # Except handlers should only be exception classes or tuples of exception
  "UP006",   # Use `list` instead of `List` for type annotation
  "UP007",   # Use `X | Y` for type annotations
  "RUF022",  # Apply an isort-style sorting to `__all__`
  "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
  "S301",    # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
  "FA100",   # `__future__` import "annotations" missing
  "ISC001",  # single-line-implicit-string-concatenation
  "UP035",   # deprecated-import
  "UP045",   # Use `X | None` for type annotations
]

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = [
  "S101",    # Use of assert detected
  "PLR2004", # Magic value used in comparison
  "S106",    # Possible hardcoded password
  "ARG001",  # Unused function argument
  "ARG005",  # Unused lambda argument
]
"examples/**.py" = [
  "T201",    # print statement found
  "RUF101",  # Move application import into a type-checking block
]

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = [
  "classmethod",
  "pydantic.field_validator",
  "pydantic.model_validator",
]

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing_extensions", "typing"]
