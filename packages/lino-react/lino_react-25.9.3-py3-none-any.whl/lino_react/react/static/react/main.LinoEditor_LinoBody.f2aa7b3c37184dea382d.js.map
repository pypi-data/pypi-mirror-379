{"version":3,"file":"main.LinoEditor_LinoBody.f2aa7b3c37184dea382d.js","mappings":"qoCAAO,IASHA,EATSC,EAAO,aASaD,EAAK,CAClCE,gBAAiB,oCACjBC,SAAU,sFACVC,SAAU,wDACVC,SAAU,sFACVC,KAAM,oEAEVC,EAAAA,EAAAA,oBAAmBP,GAGZ,IAAMQ,EAAU,SAAAC,GAUnB,SAAAD,EAAYE,GAAO,IAAAC,E,MAMwC,OANxCC,EAAAA,EAAAA,GAAA,KAAAJ,G,EACf,K,EAAAA,E,EAAA,CAAME,G,cAANC,G,8EACKE,MAAKC,EAAAA,EAAA,GAAOH,EAAKE,OAAK,IACbE,MAA2C,UAApCL,EAAMM,KAAKC,cAAcC,SAE9CP,EAAKQ,YAAcR,EAAKQ,YAAYC,KAAIT,GACxCA,EAAKU,gBAAkBV,EAAKU,gBAAgBD,KAAIT,GAAOA,CAC3D,CAAC,OAAAW,EAAAA,EAAAA,GAAAd,EAAAC,IAAAc,EAAAA,EAAAA,GAAAf,EAAA,EAAAgB,IAAA,UAAAC,OAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAbD,SAAAC,IAAA,OAAAD,IAAAA,MAAA,SAAAE,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAAAC,EAAAzB,EAAA,iBAAAyB,CAAA,WAEIC,KAAKC,WAAa,IAAID,KAAKlC,GAAGE,gBAAe,QAC7CgC,KAAKlC,GAAGM,KAAO4B,KAAKlC,GAAGM,KAAI,QAAS,wBAAAwB,EAAAM,OAAA,GAAAP,EAAA,UACvC,WAJY,OAAAH,EAAAW,MAAC,KAADC,UAAA,KAAAd,IAAA,UAAAC,MAeb,WACIc,OAAOC,iBAAiB,UAAWN,KAAKb,gBAC5C,GAAC,CAAAG,IAAA,uBAAAC,MAED,WACIc,OAAOE,oBAAoB,UAAWP,KAAKb,gBAC/C,GAAC,CAAAG,IAAA,kBAAAC,MAED,SAAgBiB,GACE,UAAVA,EAAEC,MAAkBT,KAAKf,YAAYuB,EAC7C,GAAC,CAAAlB,IAAA,cAAAC,MAED,SAAYiB,GACR,IAAQE,EAAMV,KAANU,EACFC,EAAK,WACPD,EAAEE,QAAQC,SAAS,CACfC,SAAU,QAAFC,OAAUL,EAAEnB,MAAMyB,OAAM,KAAAD,OAAIL,EAAEnB,MAAM0B,QAAO,KAAAF,OAAIL,EAAEnB,MAAM2B,IAC/DC,OAAQT,EAAEU,cAAcC,uBAEhC,EACKX,EAAEY,aACHZ,EAAEU,cAAcG,mBAAmB,CAACC,MAAOb,IADzBA,GAE1B,GAAC,CAAArB,IAAA,eAAAC,MAED,WAAe,IAAAkC,EAAA,KACX,OAAOC,EAAAA,cAAAA,EAAAA,SAAA,KACFC,EAAAA,GAAaC,aAAa5B,MAC3B0B,EAAAA,cAAA,QAAMG,UAAU,cACZH,EAAAA,cAAA,UAAQI,KAAK,SACTC,QAAS,SAAAvB,GAAC,OAAIiB,EAAKf,EAAEU,cAAcY,OAAO,CAAC,EAAE,EAC7C,aAAW,kBACXN,EAAAA,cAAA,KAAGG,UAAU,gBACjBH,EAAAA,cAAA,UAAQI,KAAK,SACTC,QAAS/B,KAAKf,YACd,aAAW,gBACXyC,EAAAA,cAAA,KAAGG,UAAU,kBAG7B,GAAC,CAAAvC,IAAA,SAAAC,MAED,WAAU,IAAA0C,EAAA,KACN,OAAKjC,KAAKrB,MAAMuD,MACTR,EAAAA,cAACS,EAAAA,eAAeC,SAAQ,MAC1B,SAAA7C,GACG,IAAQ8C,EAAQ9C,EAAMU,WAAdoC,IACFC,GAAUC,EAAAA,EAAAA,IACZF,EACA9C,EAAMU,WAAWmB,cAAcoB,YAC/BjD,EAAMU,WAAWwC,OACjBlD,EAAMU,WAAWyC,cACjBT,EAAKnE,GAAGM,MAEZ,OAAOsD,EAAAA,cAAA,OAAKG,UAAU,WAClBc,YAAaN,EAAI1D,MAAMiE,UAAUC,oBACjCC,UAAW,SAACtC,IACHA,EAAEuC,SAAWvC,EAAEwC,UAAuB,SAAXxC,EAAEC,MAC9BD,EAAEyC,kBACFzC,EAAE0C,iBACFjB,EAAKvB,EAAEU,cAAcY,OAAO,CAAC,IACtBxB,EAAEuC,SAAWvC,EAAE2C,UAAsB,QAAV3C,EAAEC,MACpCD,EAAEyC,kBACFzC,EAAE0C,kBACFE,EAAAA,EAAAA,IAAgBnB,IACE,WAAXzB,EAAEC,MAAmBD,EAAEyC,iBACtC,GACAvB,EAAAA,cAACO,EAAKnE,GAAGI,SAASmF,OAAM,CACpBC,eAAgBrB,EAAKsB,eACrBjB,QAASA,EACTkB,OAAQ,SAAAhD,GACJyB,EAAKwB,MAAQxB,EAAKyB,QAAQC,YAC1BC,EAAAA,EAAAA,IAAY3B,EAAKwB,QACjBI,EAAAA,EAAAA,IAAU5B,EAAMA,EAAKwB,QACrBK,EAAAA,EAAAA,IAA2B7B,EAAKwB,MACpC,EACAM,aAAc,SAACvD,GAAC,OAAKuD,EAAAA,EAAAA,IAAa9B,EAAMzB,EAAE,EAC1CwD,IAAK,SAAAA,GAAG,OAAI/B,EAAKyB,QAAUM,CAAG,EAC9BC,MAAO,CAACC,WAAY,WACpB3E,MAAO0C,EAAKkC,QAAQC,KAAK7E,EAAM8E,aACnC3C,EAAAA,cAAA,OAAK4C,GAAG,uBACJxB,UAAW,SAAAtC,GAAC,OAAIA,EAAEyC,iBAAiB,IAE/C,IAxC0B,IA0ClC,KArFC,IAAAzD,CAqFA,CAtGkB,CAAS+E,EAAAA,oBAAnBjG,EACFkG,gBAAkB,CAAC,kBAAmB,WAAY,WACrD,WAAY,QAAQzD,OAAOwD,EAAAA,mBAAmBC,iBAFzClG,EAGFmG,MAAQC,OAAOC,OAAO7G,EAAIyG,EAAAA,mBAAmBE,MAAMG,O,8yBCR9DC,EAAAA,QAAMC,SAAS,4BAA6BC,EAAAA,GAC5CF,EAAAA,QAAMC,SAAS,yBAA0BE,EAAAA,IACzCH,EAAAA,QAAMC,SAAS,yBAA0BG,KACzCJ,EAAAA,QAAMC,SAAS,uBAAwBI,KAEvC,IAEIpH,EAFEqH,EAAiBJ,EAAAA,EAAAA,UAEUjH,EAAK,CAClCsH,YAAc,0DAChB/G,EAAAA,EAAAA,oBAAmBP,GAGd,IAAM8F,EAAc,SAACH,GACxB3F,EAAG2F,MAAQA,CACf,EAGaI,EAAY,SAAC/E,EAAM2E,GAAW,EAG9BM,EAAe,SAACjF,EAAM0B,GAG/B,IAAM6E,EAAa7E,EAAE8E,UAAUC,MAAM,GAAI,GACrChG,GAAST,EAAKH,MAAME,MAAQwG,EAAa7E,EAAEgF,YAAe,GA0C9D1G,EAAK2G,QAAMC,EAAAA,EAAAA,GAAC,CAAC,EAAC5G,EAAK6G,QAAUpG,GAIjC,EAGagD,EAAkB,SAC3BF,EAAKG,EAAaC,EAAQC,EAAetE,GACxC,IAD8CwH,IAAUxF,UAAAyF,OAAA,QAAAC,IAAA1F,UAAA,KAAAA,UAAA,GAEnDkC,EAAU,CACZyD,QAASC,EAAa,CAClBxD,YAAaA,EACbC,OAAQA,EACRC,cAAeA,IAEnBuD,eAAgB,CAACC,OAAO,GACxBC,OAAO,EACP,eAAgB,CACZC,cAAe,CAKX,IAuCZ,OAnCIR,IACAtD,EAAQ2C,eAAiB,CACrBoB,IAAKjI,EAAKkI,EAAE,qFACZC,gBAAiB,2BACjBC,OAAQpI,EAAKkI,EAAE,MACfG,WAAYrI,EAAKkI,EAAE,UACnBI,YAAatI,EAAKkI,EAAE,sBAGxBjE,EAAI1D,MAAMiE,UAAU+D,kBAAkBC,SAAS,aAC/CtE,EAAQuE,kBAAoB,CAACC,QAASC,IAC1CzE,EAAQ0E,SAAW,CACfC,SAAQrI,EAAAA,EAAA,GACDsG,IAAAA,kBAAiC,IACpCgC,IAAK,CACD5H,IAAK,EACLwH,QAAS,SAACK,EAAOhD,GACb,OAAO,CACX,GAEJiD,KAAM,CACF9H,IAAK,OACLwH,QAAS,SAACK,EAAOhD,GACb,IAAQV,EAAU3F,EAAV2F,MACR4D,EAAqB5D,EAAM6D,QAAQH,EAAMI,OAAMC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAA1CK,EAAIF,EAAA,GAAQA,EAAA,GACjB,OAAIE,GAAiC,OAAzBA,EAAKC,QAAQC,UAEvBnE,EAAMoE,aAAaH,EAAKI,OAAOrE,EAAMsE,QAAS,EAAG,SAC1C,EAGb,MAILzF,CACX,EAGawB,EAA6B,SAACL,GACvCA,EAAMuE,UAAU,WAAWC,WAAW,SAAS,SAACC,GAExC,IAAIC,EADJD,KAIIC,EAAYC,SAASC,cAAc,UACzBC,aAAa,OAAQ,QAC/BH,EAAUG,aAAa,SAAU,6DACjCH,EAAUI,UAAUC,IAAI,YACxBL,EAAU7H,iBAAiB,UAAU,SAACE,GAClC,IACIiI,EADEC,EAAQlI,EAAEmI,OAAOD,MAEvB,GAAIA,EAAM7C,OAAS,EAAG,CAElB,IAAM/D,GADN2G,EAAOC,EAAM,IACK5G,KACZ8G,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACtI,GACb,IAAMuI,EAAUvI,EAAEmI,OAAOK,OACzBjC,EAAagC,EAASjH,EAAM,IAAIqD,EAAe4D,EAASjH,EAAM2G,EAAK1K,OACnEoK,EAAU5I,MAAQ,EACtB,EACAqJ,EAAOK,cAAcR,EACzB,CACJ,IAEJN,EAAUe,QAElB,GACJ,EAEanC,EAAe,SAACoC,EAAcrH,EAAMsH,GAC7C,IAAM3F,EAAQ3F,EAAG2F,MACb8D,GAAS9D,EAAM4F,gBAAkB,CAAC,GAAG9B,YAC3BzB,IAAVyB,GAAuBA,EAAQ,KAAGA,EAAQ9D,EAAM6F,aACpD7F,EAAM8F,YAAYhC,EAAO,QAAS4B,EAKtC,EAEanD,EAAe,SAAHwD,GAA6C,IAAxChH,EAAWgH,EAAXhH,YAAaC,EAAM+G,EAAN/G,OAAQC,EAAa8G,EAAb9G,cAc/C,MAAO,CACH+G,aAAc,mBACdC,uBAAwBrJ,OAAOsJ,IAAIhL,MAAMiE,UAAUgH,WACnDC,OAhBJ,SAAuBC,EAAYC,EAAYC,GAC3C,GAA0B,IAAtBF,EAAWjE,OAAc,CACzB,IAAIoE,EAASvH,EAAcsH,GAC3BD,EAAWE,EAAQH,EACvB,MACIhM,EAAGoM,QAAQ,CAAC,gBAAgBC,MAAK,SAAAC,GAAmB,IAAjBhF,EAAWgF,EAAXhF,YAC/B5C,EAAY,CAAC6H,KAAM,eAAFtJ,OAAiBqE,EAAW,QAASkF,UAAU,CAC5DC,MAAOT,EAAYU,QAASR,KAAiBvH,OAAQA,IACxD0H,MAAK,SAAA/F,GAAI,OAAI2F,EAAW3F,EAAKqG,YAAaX,EAAW,GAC1D,GAER,EAMIY,cAAe,uBACfC,sBAAuB,4BACvBC,iBAAkB,kBAClBC,eAAgB,CAAC,QAAS,OAAQ,QAAS,kBAEnD,EAEMC,EAA6BpJ,EAAAA,cAACA,EAAAA,SAAc,KAC9CA,EAAAA,cAAA,QAAMG,UAAU,cACZH,EAAAA,cAAA,UAAQG,UAAU,YAAYkJ,aAAa,KACvCrJ,EAAAA,cAAA,UAAQnC,MAAM,KAAI,WAClBmC,EAAAA,cAAA,UAAQnC,MAAM,KAAI,cAClBmC,EAAAA,cAAA,UAAQnC,MAAM,KAAI,WAEtBmC,EAAAA,cAAA,UAAQG,UAAU,WACdH,EAAAA,cAAA,UAAQqJ,cAAc,IACtBrJ,EAAAA,cAAA,UAAQnC,MAAM,UACdmC,EAAAA,cAAA,UAAQnC,MAAM,gBAGtBmC,EAAAA,cAAA,QAAMG,UAAU,cACZH,EAAAA,cAAA,UAAQG,UAAU,WACdH,EAAAA,cAAA,UAAQnC,MAAM,UACdmC,EAAAA,cAAA,UAAQqJ,cAAc,IACtBrJ,EAAAA,cAAA,UAAQnC,MAAM,UACdmC,EAAAA,cAAA,UAAQnC,MAAM,WAGtBmC,EAAAA,cAAA,QAAMG,UAAU,cACZH,EAAAA,cAAA,UAAQG,UAAU,YAAYtC,MAAM,QACpCmC,EAAAA,cAAA,UAAQG,UAAU,YAAYtC,MAAM,WAExCmC,EAAAA,cAAA,QAAMG,UAAU,cACZH,EAAAA,cAAA,UAAQI,KAAK,SAASD,UAAU,UAAU,aAAW,SACrDH,EAAAA,cAAA,UAAQI,KAAK,SAASD,UAAU,YAAY,aAAW,WACvDH,EAAAA,cAAA,UAAQI,KAAK,SAASD,UAAU,eAAe,aAAW,eAE9DH,EAAAA,cAAA,QAAMG,UAAU,cACZH,EAAAA,cAAA,UAAQG,UAAU,aAClBH,EAAAA,cAAA,UAAQG,UAAU,mBAEtBH,EAAAA,cAAA,QAAMG,UAAU,cACZH,EAAAA,cAAA,UAAQI,KAAK,SAASD,UAAU,UAAUtC,MAAM,UAAU,aAAW,iBACrEmC,EAAAA,cAAA,UAAQI,KAAK,SAASD,UAAU,UAAUtC,MAAM,SAAS,aAAW,mBACpEmC,EAAAA,cAAA,UAAQG,UAAU,YACdH,EAAAA,cAAA,UAAQqJ,cAAc,IACtBrJ,EAAAA,cAAA,UAAQnC,MAAM,WACdmC,EAAAA,cAAA,UAAQnC,MAAM,UACdmC,EAAAA,cAAA,UAAQnC,MAAM,cAGtBmC,EAAAA,cAAA,QAAMG,UAAU,cACZH,EAAAA,cAAA,UAAQI,KAAK,SAASD,UAAU,UAAU,aAAW,gBACrDH,EAAAA,cAAA,UAAQI,KAAK,SAASD,UAAU,WAAW,aAAW,iBACtDH,EAAAA,cAAA,UAAQI,KAAK,SAASD,UAAU,gBAAgB,aAAW,uBAE/DH,EAAAA,cAAA,QAAMG,UAAU,cACZH,EAAAA,cAAA,UAAQI,KAAK,SAASD,UAAU,WAAW,aAAW,oBAIjDuB,EAAkB,SAACtE,GAC5B,IACQkM,EADQlM,EAAKN,MAAMyM,UAAUhL,WAA7BoC,IACA2I,WACJzD,GAASzI,EAAK2E,MAAM4F,gBAAkB,CAAC,GAAG9B,YAChCzB,IAAVyB,GAAuBA,EAAQ,KAC/BA,EAAQzI,EAAK2E,MAAM6F,aACvB0B,EAAW5J,cAAc8J,UAAU,CAC/BC,iBAAkBH,EAAW5J,cAAcgK,iBAAiB,oBAAoBC,UAChFpK,QAAS,cACTqK,kBAAmB,SAAClH,GACZA,EAAKmH,SACLzM,EAAK2E,MAAM+H,WAAWjE,EAAOnD,EAAKqH,QAC1C,GAER,EAEaC,EAAY,SAAC5M,GACtB,OAAKA,EAAK4B,EAAE2B,IAAI1D,MAAMiE,UAAU+D,kBAAkBC,SAAS,QAEpDlF,EAAAA,cAAA,QAAMG,UAAU,cACnBH,EAAAA,cAAA,UAAQI,KAAK,SACTC,QAAS,SAACvB,GAAC,OAAK4C,EAAgBtE,EAAK,EACrC,aAAW,oBACX4C,EAAAA,cAAA,KAAGG,UAAU,iBALV,IAOf,EAiBaF,EAAe,CACxBgK,OAAQb,EACRlJ,aAjBiB,SAAC9C,GAClB,OAAO4C,EAAAA,cAAAA,EAAAA,SAAA,KACFoJ,EACAY,EAAU5M,GACX4C,EAAAA,cAAA,QAAMG,UAAU,cACZH,EAAAA,cAAA,UAAQI,KAAK,SACTC,QAAS,SAAAvB,GACM1C,EAAG2F,MAAMuE,UAAU,gBAC3B4D,YAAY,EAAG,EACtB,GACAlK,EAAAA,cAAA,KAAGG,UAAU,kBAG7B,E","sources":["webpack://lino_react/./lino_react/react/components/LinoEditor.jsx","webpack://lino_react/./lino_react/react/components/quillmodules.jsx"],"sourcesContent":["export const name = \"LinoEditor\";\n\nimport React from \"react\";\nimport { RegisterImportPool, Component, URLContextType } from \"./Base\";\nimport { quillToolbar, overrideImageButtonHandler, getQuillModules, passInQuill,\n    invokeRefInsert, onTextChange, quillLoad } from \"./quillmodules\";\nimport { LeafComponentInput } from \"./LinoComponentUtils\";\nimport * as constants from \"./constants\";\n\nlet ex; const exModulePromises = ex = {\n    AbortController: import(/* webpackChunkName: \"AbortController_LinoEditor\" */\"abort-controller\"),\n    prButton: import(/* webpackChunkName: \"prButton_LinoEditor\" */\"primereact/button\"),\n    prEditor: import(/* webpackChunkName: \"prEditor_LinoEditor\" */\"primereact/editor\"),\n    prDialog: import(/* webpackChunkName: \"prDialog_LinoEditor\" */\"primereact/dialog\"),\n    i18n: import(/* webpackChunkName: \"i18n_LinoEditor\" */\"./i18n\"),\n}\nRegisterImportPool(ex);\n\n\nexport class LinoEditor extends LeafComponentInput {\n    static requiredModules = [\"AbortController\", \"prButton\", \"prEditor\",\n        \"prDialog\", \"i18n\"].concat(LeafComponentInput.requiredModules);\n    static iPool = Object.assign(ex, LeafComponentInput.iPool.copy());\n    async prepare() {\n        await super.prepare();\n        this.controller = new this.ex.AbortController.default();\n        this.ex.i18n = this.ex.i18n.default;\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {...this.state,\n                      plain: props.elem.field_options.format === \"plain\"}\n\n        this.closeEditor = this.closeEditor.bind(this);\n        this.onGlobalKeyDown = this.onGlobalKeyDown.bind(this);\n    }\n\n    onReady() {\n        window.addEventListener('keydown', this.onGlobalKeyDown);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.onGlobalKeyDown);\n    }\n\n    onGlobalKeyDown(e) {\n        if (e.code == 'Escape') this.closeEditor(e);\n    }\n\n    closeEditor(e) {\n        const { c } = this;\n        const DO = () => {\n            c.history.pushPath({\n                pathname: `/api/${c.value.packId}/${c.value.actorId}/${c.value.pk}`,\n                params: c.actionHandler.defaultStaticParams()\n            })\n        }\n        if (!c.isModified()) {DO()} else\n            c.actionHandler.discardModDConfirm({agree: DO});\n    }\n\n    headerExtend() {\n        return <>\n            {quillToolbar.commonHeader(this)}\n            <span className=\"ql-formats\">\n                <button type='button'\n                    onClick={e => this.c.actionHandler.submit({})}\n                    aria-label='Submit changes'>\n                    <i className=\"pi pi-save\"></i></button>\n                <button type='button'\n                    onClick={this.closeEditor}\n                    aria-label='Close window'>\n                    <i className=\"pi pi-times\"></i></button>\n            </span>\n        </>\n    }\n\n    render () {\n        if (!this.state.ready) return null;\n        return <URLContextType.Consumer>\n            {value => {\n                const { APP } = value.controller;\n                const modules = getQuillModules(\n                    APP,\n                    value.controller.actionHandler.silentFetch,\n                    value.controller.signal,\n                    value.controller.mentionValues,\n                    this.ex.i18n,\n                );\n                return <div className=\"l-editor\"\n                    spellCheck={!APP.state.site_data.disable_spell_check}\n                    onKeyDown={(e) => {\n                        if ((e.ctrlKey || e.metaKey) && e.code === \"KeyS\") {\n                            e.stopPropagation();\n                            e.preventDefault();\n                            this.c.actionHandler.submit({});\n                        } else if (e.ctrlKey && e.shiftKey && e.code == \"KeyL\") {\n                            e.stopPropagation();\n                            e.preventDefault();\n                            invokeRefInsert(this);\n                        } else if (e.code !== 'Escape') e.stopPropagation();\n                    }}>\n                    <this.ex.prEditor.Editor\n                        headerTemplate={this.headerExtend()}\n                        modules={modules}\n                        onLoad={e => {\n                            this.quill = this.inputEl.getQuill();\n                            passInQuill(this.quill);\n                            quillLoad(this, this.quill);\n                            overrideImageButtonHandler(this.quill);\n                        }}\n                        onTextChange={(e) => onTextChange(this, e)}\n                        ref={ref => this.inputEl = ref}\n                        style={{background: \"#ffffff\"}}\n                        value={this.context.data[value.fieldName]}/>\n                    <div id=\"raw-editor-container\"\n                        onKeyDown={e => e.stopPropagation()}></div>\n                </div>\n            }}\n        </URLContextType.Consumer>\n    }\n}\n","export const name = \"quillmodules\";\n\nimport 'quill-mention/autoregister';\nimport 'quill-mention';\nimport Quill from 'quill';\nimport QuillImageDropAndPaste from 'quill-image-drop-and-paste';\nimport BlotFormatter from '@enzedonline/quill-blot-formatter2';\nimport htmlEditButton from \"quill-html-edit-button\";\nimport QuillBetterTable from \"quill-better-table\";\nimport React from 'react';\nimport { RegisterImportPool } from \"./Base\";\n\nimport \"@enzedonline/quill-blot-formatter2/dist/css/quill-blot-formatter2.css\"; // align styles\n\nQuill.register('modules/imageDropAndPaste', QuillImageDropAndPaste);\nQuill.register('modules/blotFormatter2', BlotFormatter);\nQuill.register('modules/htmlEditButton', htmlEditButton);\nQuill.register('modules/better-table', QuillBetterTable);\n\nconst QuillImageData = QuillImageDropAndPaste.ImageData;\n\nlet ex; const exModulePromises = ex = {\n    queryString:  import(/* webpackChunkName: \"queryString_quillmodules\" */\"query-string\"),\n};RegisterImportPool(ex);\n\n\nexport const passInQuill = (quill) => {\n    ex.quill = quill;\n}\n\n\nexport const quillLoad = (elem, quill) => {}\n\n\nexport const onTextChange = (elem, e) => {\n    // console.log(\"onTextChange\", e);\n    // cleans up the trailing new line (\\n)\n    const plainValue = e.textValue.slice(0, -1);\n    let value = (elem.state.plain ? plainValue : e.htmlValue ) || \"\";\n\n    // When an image is seleted and on CTRL+S, before deselecting\n    // the image blotFormatter2 resets the --resize-width property;\n    // some transitional state. Clean it out.\n    // value = value.replace(/--resize-width:\\s*0px;?/g, \"\");\n    // better yet instead of cleaning it out, replace the value with img.width\n    // if (!elem.state.plain && e.source !== \"user\") {\n    //     const el = document.createElement(\"div\");\n    //     el.innerHTML = value;\n    //     el.querySelectorAll(\"img[width]\").forEach(img => {\n    //         const widthAttr = img.getAttribute(\"width\").split(\"px\")[0];\n    //         if (!widthAttr) return;\n    //\n    //         const parent = img.closest(\"[style]\");\n    //         if (parent) {\n    //             const cssWidth = parent.style.getPropertyValue(\"--resize-width\");\n    //             if (cssWidth === \"0px\" || cssWidth === \"\") {\n    //                 parent.style.setProperty(\"--resize-width\", widthAttr + \"px\");\n    //             }\n    //         }\n    //     })\n    //     value = el.innerHTML;\n    // }\n    //\n    // console.log(e.source, value);\n    // if (!elem.state.plain) {\n    //     const el = document.createElement(\"div\");\n    //     el.innerHTML = value;\n    //     el.querySelectorAll(\"img\").forEach(img => {\n    //       // Prefer style.width, fallback to attribute\n    //       let w = img.style.width || img.getAttribute(\"width\");\n    //       if (w) {\n    //         w = w.replace(\"px\", \"\");\n    //         img.setAttribute(\"width\", w);\n    //         img.style.width = w + \"px\"; // keep inline for display\n    //       }\n    //     });\n    //     value = el.innerHTML;\n    // }\n\n    // if (e.source === \"user\") elem.update({[elem.dataKey]: value});\n    elem.update({[elem.dataKey]: value});\n    // elem.setState({})\n    // elem.setState({});\n    // elem.updateValue(value);\n}\n\n\nexport const getQuillModules = (\n    APP, silentFetch, signal, mentionValues, i18n, hasToolbar = true\n) => {\n    const modules = {\n        mention: quillMention({\n            silentFetch: silentFetch,\n            signal: signal,\n            mentionValues: mentionValues,\n        }),\n        blotFormatter2: {debug: true},\n        table: false,\n        \"better-table\": {\n            operationMenu: {\n                // items: {\n                //     mergeCells: {\n                //         text: i18n.t(\"Merge cells\"),\n                //     }\n                // },\n            }\n        }\n    }\n    if (hasToolbar) {\n        modules.htmlEditButton = {\n            msg: i18n.t('Edit HTML here, when you click \"OK\" the quill editor\\'s contents will be replaced'),\n            prependSelector: \"div#raw-editor-container\",\n            okText: i18n.t(\"Ok\"),\n            cancelText: i18n.t(\"Cancel\"),\n            buttonTitle: i18n.t(\"Show HTML source\"),\n        }\n    }\n    if (APP.state.site_data.installed_plugins.includes('uploads'))\n        modules.imageDropAndPaste = {handler: imageHandler};\n    modules.keyboard = {\n        bindings: {\n            ...QuillBetterTable.keyboardBindings,\n            tab: {\n                key: 9,\n                handler: (range, context) => {\n                    return true;\n                },\n            },\n            home: {\n                key: \"Home\",\n                handler: (range, context) => {\n                    const { quill } = ex;\n                    let [line, offset] = quill.getLine(range.index);\n                    if (line && line.domNode.tagName === \"LI\") {\n                      // Move to the start of text inside the list item\n                      quill.setSelection(line.offset(quill.scroll), 0, \"user\");\n                      return false; // stop default browser behavior\n                    }\n                    return true;\n                },\n            }\n        }\n    }\n    return modules;\n}\n\n\nexport const overrideImageButtonHandler = (quill) => {\n    quill.getModule('toolbar').addHandler('image', (clicked) => {\n        if (clicked) {\n            let fileInput;\n            // fileInput = quill.container.querySelector('input.ql-image[type=file]');\n            // if (fileInput == null) {\n                fileInput = document.createElement('input');\n                fileInput.setAttribute('type', 'file');\n                fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');\n                fileInput.classList.add('ql-image');\n                fileInput.addEventListener('change', (e) => {\n                    const files = e.target.files;\n                    let file;\n                    if (files.length > 0) {\n                        file = files[0];\n                        const type = file.type;\n                        const reader = new FileReader();\n                        reader.onload = (e) => {\n                            const dataURL = e.target.result;\n                            imageHandler(dataURL, type, new QuillImageData(dataURL, type, file.name));\n                            fileInput.value = '';\n                        }\n                        reader.readAsDataURL(file);\n                    }\n                })\n            // }\n            fileInput.click();\n        }\n    })\n}\n\nexport const imageHandler = (imageDataURL, type, imageData) => {\n    const quill = ex.quill;\n    let index = (quill.getSelection() || {}).index;\n    if (index === undefined || index < 0) index = quill.getLength();\n    quill.insertEmbed(index, 'image', imageDataURL);\n\n    // const imageEl = quill.root.querySelector(`img[src=\"${imageDataURL}\"]`);\n    // Set default height\n    // imageEl.setAttribute(\"height\", window.App.URLContext.root.chInPx.offsetHeight * 20);\n}\n\nexport const quillMention = ({silentFetch, signal, mentionValues}) => {\n    function mentionSource(searchTerm, renderList, mentionChar) {\n        if (searchTerm.length === 0) {\n            let values = mentionValues[mentionChar];\n            renderList(values, searchTerm);\n        } else {\n            ex.resolve(['queryString']).then(({queryString}) => {\n                silentFetch({path: `suggestions?${queryString.default.stringify({\n                    query: searchTerm, trigger: mentionChar})}`, signal: signal})\n                .then(data => renderList(data.suggestions, searchTerm));\n            });\n        }\n    }\n\n    return {\n        allowedChars: /^[A-Za-z0-9\\s]*$/,\n        mentionDenotationChars: window.App.state.site_data.suggestors,\n        source: mentionSource,\n        listItemClass: \"ql-mention-list-item\",\n        mentionContainerClass: \"ql-mention-list-container\",\n        mentionListClass: \"ql-mention-list\",\n        dataAttributes: [\"value\", \"link\", \"title\", \"denotationChar\"],\n    }\n}\n\nconst quillToolbarHeaderTemplate = <React.Fragment>\n    <span className=\"ql-formats\">\n        <select className='ql-header' defaultValue='0'>\n            <option value='1'>Heading</option>\n            <option value='2'>Subheading</option>\n            <option value='0'>Normal</option>\n        </select>\n        <select className='ql-font'>\n            <option defaultValue={true}></option>\n            <option value='serif'></option>\n            <option value='monospace'></option>\n        </select>\n    </span>\n    <span className=\"ql-formats\">\n        <select className=\"ql-size\">\n            <option value=\"small\"></option>\n            <option defaultValue={true}></option>\n            <option value=\"large\"></option>\n            <option value=\"huge\"></option>\n        </select>\n    </span>\n    <span className=\"ql-formats\">\n        <button className=\"ql-script\" value=\"sub\"></button>\n        <button className=\"ql-script\" value=\"super\"></button>\n    </span>\n    <span className=\"ql-formats\">\n        <button type='button' className='ql-bold' aria-label='Bold'></button>\n        <button type='button' className='ql-italic' aria-label='Italic'></button>\n        <button type='button' className='ql-underline' aria-label='Underline'></button>\n    </span>\n    <span className=\"ql-formats\">\n        <select className='ql-color'></select>\n        <select className='ql-background'></select>\n    </span>\n    <span className=\"ql-formats\">\n        <button type='button' className='ql-list' value='ordered' aria-label='Ordered List'></button>\n        <button type='button' className='ql-list' value='bullet' aria-label='Unordered List'></button>\n        <select className='ql-align'>\n            <option defaultValue={true}></option>\n            <option value='center'></option>\n            <option value='right'></option>\n            <option value='justify'></option>\n        </select>\n    </span>\n    <span className=\"ql-formats\">\n        <button type='button' className='ql-link' aria-label='Insert Link'></button>\n        <button type='button' className='ql-image' aria-label='Insert Image'></button>\n        <button type='button' className='ql-code-block' aria-label='Insert Code Block'></button>\n    </span>\n    <span className=\"ql-formats\">\n        <button type='button' className='ql-clean' aria-label='Remove Styles'></button>\n    </span>\n</React.Fragment>\n\nexport const invokeRefInsert = (elem) => {\n    const { APP } = elem.props.urlParams.controller;\n    const { URLContext } = APP;\n    let index = (elem.quill.getSelection() || {}).index;\n    if (index === undefined || index < 0)\n        index = elem.quill.getLength();\n    URLContext.actionHandler.runAction({\n        action_full_name: URLContext.actionHandler.findUniqueAction(\"insert_reference\").full_name,\n        actorId: \"about.About\",\n        response_callback: (data) => {\n            if (data.success)\n                elem.quill.insertText(index, data.message);\n        }\n    });\n}\n\nexport const refInsert = (elem) => {\n    if (!elem.c.APP.state.site_data.installed_plugins.includes('memo'))\n        return null;\n    return <span className=\"ql-formats\">\n        <button type='button'\n            onClick={(e) => invokeRefInsert(elem)}\n            aria-label='Open link dialog'>\n            <i className=\"pi pi-link\"></i></button>\n    </span>\n}\n\nconst commonHeader = (elem) => {\n    return <>\n        {quillToolbarHeaderTemplate}\n        {refInsert(elem)}\n        <span className=\"ql-formats\">\n            <button type=\"button\"\n                onClick={e => {\n                    const bt = ex.quill.getModule(\"better-table\");\n                    bt.insertTable(3, 3);\n                }}>\n                <i className=\"pi pi-table\"></i></button>\n        </span>\n    </>\n}\n\nexport const quillToolbar = {\n    header: quillToolbarHeaderTemplate,\n    commonHeader: commonHeader,\n}\n"],"names":["ex","name","AbortController","prButton","prEditor","prDialog","i18n","RegisterImportPool","LinoEditor","_LeafComponentInput","props","_this","_classCallCheck","state","_objectSpread","plain","elem","field_options","format","closeEditor","bind","onGlobalKeyDown","_inherits","_createClass","key","value","_prepare","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","_superPropGet","this","controller","stop","apply","arguments","window","addEventListener","removeEventListener","e","code","c","DO","history","pushPath","pathname","concat","packId","actorId","pk","params","actionHandler","defaultStaticParams","isModified","discardModDConfirm","agree","_this2","React","quillToolbar","commonHeader","className","type","onClick","submit","_this3","ready","URLContextType","Consumer","APP","modules","getQuillModules","silentFetch","signal","mentionValues","spellCheck","site_data","disable_spell_check","onKeyDown","ctrlKey","metaKey","stopPropagation","preventDefault","shiftKey","invokeRefInsert","Editor","headerTemplate","headerExtend","onLoad","quill","inputEl","getQuill","passInQuill","quillLoad","overrideImageButtonHandler","onTextChange","ref","style","background","context","data","fieldName","id","LeafComponentInput","requiredModules","iPool","Object","assign","copy","Quill","register","QuillImageDropAndPaste","BlotFormatter","htmlEditButton","QuillBetterTable","QuillImageData","queryString","plainValue","textValue","slice","htmlValue","update","_defineProperty","dataKey","hasToolbar","length","undefined","mention","quillMention","blotFormatter2","debug","table","operationMenu","msg","t","prependSelector","okText","cancelText","buttonTitle","installed_plugins","includes","imageDropAndPaste","handler","imageHandler","keyboard","bindings","tab","range","home","_quill$getLine","getLine","index","_quill$getLine2","_slicedToArray","line","domNode","tagName","setSelection","offset","scroll","getModule","addHandler","clicked","fileInput","document","createElement","setAttribute","classList","add","file","files","target","reader","FileReader","onload","dataURL","result","readAsDataURL","click","imageDataURL","imageData","getSelection","getLength","insertEmbed","_ref","allowedChars","mentionDenotationChars","App","suggestors","source","searchTerm","renderList","mentionChar","values","resolve","then","_ref2","path","stringify","query","trigger","suggestions","listItemClass","mentionContainerClass","mentionListClass","dataAttributes","quillToolbarHeaderTemplate","defaultValue","URLContext","urlParams","runAction","action_full_name","findUniqueAction","full_name","response_callback","success","insertText","message","refInsert","header","insertTable"],"sourceRoot":""}