Metadata-Version: 2.1
Name: pyfaust
Version: 3.42.1
Summary: FAµST python toolbox
Home-page: https://faust.inria.fr
Author: Inria, Rémi Gribonval et al.
Author-email: remi.gribonval@inria.fr
Maintainer-email: hakim.hadj-djilani@inria.fr
License: BSD-3-clause
Project-URL: Bug Tracker, https://gitlab.inria.fr/faustgrp/faust/-/issues
Project-URL: Documentation, https://faust.inria.fr/api-doc/
Project-URL: Source Code, https://gitlab.inria.fr/faustgrp/faust
Platform: Windows
Platform: Linux
Platform: Mac OS-X
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: C
Classifier: Programming Language :: C++
Classifier: Topic :: Software Development
Classifier: Topic :: Scientific/Engineering
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Classifier: Operating System :: Unix
Classifier: Operating System :: MacOS
Description-Content-Type: text/markdown
Requires-Dist: scipy
Requires-Dist: numpy (>=2.0.0)
Requires-Dist: matplotlib (>=2.0.0)

[![FAµST logo](https://faust.inria.fr/files/2023/10/faust_logo-tight-450x110-1.jpg)](https://faust.inria.fr)
![pipeline status](https://gitlab.inria.fr/faustgrp/faust/badges/main/pipeline.svg?ignore_skipped=true)
[![coverage](https://gitlab.inria.fr/faustgrp/faust/badges/hakim_branch/coverage.svg?job=pyfaust_test_code_coverage&key_text=coverage)](https://gitlab.inria.fr/faustgrp/faust/-/jobs/artifacts/hakim_branch/browse/htmlcov?job=pyfaust_test_code_coverage)
![python3](https://img.shields.io/pypi/pyversions/pyfaust)

The FAµST toolbox provides algorithms and data structures to decompose a given dense matrix into a product of sparse matrices in order to reduce its computational complexity (both for storage and manipulation).

FaµST can be used to:

- speed up / reduce the memory footprint of iterative algorithms commonly used for solving high dimensional linear inverse problems,
- learn dictionaries with an intrinsically efficient implementation,
- compute (approximate) fast Fourier transforms on graphs.

    
