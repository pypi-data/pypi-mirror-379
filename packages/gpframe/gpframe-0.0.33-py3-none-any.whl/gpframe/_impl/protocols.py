
from typing import Any, Iterable, Protocol, TypeVar

_K = TypeVar("_K")
_V = TypeVar("_V")

class _QueueLike(Protocol):
    def get(self) -> Any: ...
    def put(self, item: Any) -> None: ...
    def empty(self) -> bool: ...
    def full(self) -> bool: ...
    def get_nowait(self) -> Any: ...
    def put_nowait(self, item: Any) -> None: ...

class _DictLike(Protocol[_K, _V]):
    def __getitem__(self, key: _K, /) -> _V: ...
    def __setitem__(self, key: _K, value: _V, /) -> None: ...
    def __delitem__(self, key: _K, /) -> None: ...
    def keys(self) -> Iterable[_K]: ...
    def values(self) -> Iterable[_V]: ...
    def items(self) -> Iterable[tuple[_K, _V]]: ...
    def update(self, *args: Any, **kwargs: Any) -> None: ...
    def pop(self, *args: Any, **kwargs: Any) -> _V: ...
    def clear(self) -> None: ...

