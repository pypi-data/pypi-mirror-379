# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mdc_gateway_client
else:
    import _mdc_gateway_client

try:
    import builtins as __builtin__
except ImportError:
    import builtin

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mdc_gateway_client.delete_SwigPyIterator

    def value(self):
        return _mdc_gateway_client.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _mdc_gateway_client.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _mdc_gateway_client.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _mdc_gateway_client.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _mdc_gateway_client.SwigPyIterator_equal(self, x)

    def copy(self):
        return _mdc_gateway_client.SwigPyIterator_copy(self)

    def next(self):
        return _mdc_gateway_client.SwigPyIterator_next(self)

    def __next__(self):
        return _mdc_gateway_client.SwigPyIterator___next__(self)

    def previous(self):
        return _mdc_gateway_client.SwigPyIterator_previous(self)

    def advance(self, n):
        return _mdc_gateway_client.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _mdc_gateway_client.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _mdc_gateway_client.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _mdc_gateway_client.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _mdc_gateway_client.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _mdc_gateway_client.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _mdc_gateway_client.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _mdc_gateway_client:
_mdc_gateway_client.SwigPyIterator_swigregister(SwigPyIterator)


def cdata(ptr, nelements=1):
    return _mdc_gateway_client.cdata(ptr, nelements)

def memmove(data, indata):
    return _mdc_gateway_client.memmove(data, indata)
class StrIntMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _mdc_gateway_client.StrIntMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mdc_gateway_client.StrIntMap___nonzero__(self)

    def __bool__(self):
        return _mdc_gateway_client.StrIntMap___bool__(self)

    def __len__(self):
        return _mdc_gateway_client.StrIntMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mdc_gateway_client.StrIntMap___getitem__(self, key)

    def __delitem__(self, key):
        return _mdc_gateway_client.StrIntMap___delitem__(self, key)

    def has_key(self, key):
        return _mdc_gateway_client.StrIntMap_has_key(self, key)

    def keys(self):
        return _mdc_gateway_client.StrIntMap_keys(self)

    def values(self):
        return _mdc_gateway_client.StrIntMap_values(self)

    def items(self):
        return _mdc_gateway_client.StrIntMap_items(self)

    def __contains__(self, key):
        return _mdc_gateway_client.StrIntMap___contains__(self, key)

    def key_iterator(self):
        return _mdc_gateway_client.StrIntMap_key_iterator(self)

    def value_iterator(self):
        return _mdc_gateway_client.StrIntMap_value_iterator(self)

    def __setitem__(self, *args):
        return _mdc_gateway_client.StrIntMap___setitem__(self, *args)

    def asdict(self):
        return _mdc_gateway_client.StrIntMap_asdict(self)

    def __init__(self, *args):
        _mdc_gateway_client.StrIntMap_swiginit(self, _mdc_gateway_client.new_StrIntMap(*args))

    def empty(self):
        return _mdc_gateway_client.StrIntMap_empty(self)

    def size(self):
        return _mdc_gateway_client.StrIntMap_size(self)

    def swap(self, v):
        return _mdc_gateway_client.StrIntMap_swap(self, v)

    def begin(self):
        return _mdc_gateway_client.StrIntMap_begin(self)

    def end(self):
        return _mdc_gateway_client.StrIntMap_end(self)

    def rbegin(self):
        return _mdc_gateway_client.StrIntMap_rbegin(self)

    def rend(self):
        return _mdc_gateway_client.StrIntMap_rend(self)

    def clear(self):
        return _mdc_gateway_client.StrIntMap_clear(self)

    def get_allocator(self):
        return _mdc_gateway_client.StrIntMap_get_allocator(self)

    def count(self, x):
        return _mdc_gateway_client.StrIntMap_count(self, x)

    def erase(self, *args):
        return _mdc_gateway_client.StrIntMap_erase(self, *args)

    def find(self, x):
        return _mdc_gateway_client.StrIntMap_find(self, x)

    def lower_bound(self, x):
        return _mdc_gateway_client.StrIntMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _mdc_gateway_client.StrIntMap_upper_bound(self, x)
    __swig_destroy__ = _mdc_gateway_client.delete_StrIntMap

# Register StrIntMap in _mdc_gateway_client:
_mdc_gateway_client.StrIntMap_swigregister(StrIntMap)

class Notify(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Notify:
            _self = None
        else:
            _self = self
        _mdc_gateway_client.Notify_swiginit(self, _mdc_gateway_client.new_Notify(_self, ))
    __swig_destroy__ = _mdc_gateway_client.delete_Notify

    def OnMarketData(self, buf, size):
        return _mdc_gateway_client.Notify_OnMarketData(self, buf, size)

    def OnPlaybackPayload(self, buf, size):
        return _mdc_gateway_client.Notify_OnPlaybackPayload(self, buf, size)

    def OnPlaybackStatus(self, buf, size):
        return _mdc_gateway_client.Notify_OnPlaybackStatus(self, buf, size)

    def OnPlaybackResponse(self, buf, size):
        return _mdc_gateway_client.Notify_OnPlaybackResponse(self, buf, size)

    def OnPlaybackControlResponse(self, buf, size):
        return _mdc_gateway_client.Notify_OnPlaybackControlResponse(self, buf, size)

    def OnServiceMessage(self, buf, size):
        return _mdc_gateway_client.Notify_OnServiceMessage(self, buf, size)

    def OnSubscribeResponse(self, buf, size):
        return _mdc_gateway_client.Notify_OnSubscribeResponse(self, buf, size)

    def OnQueryResponse(self, buf, size):
        return _mdc_gateway_client.Notify_OnQueryResponse(self, buf, size)

    def OnGeneralError(self, buf, size):
        return _mdc_gateway_client.Notify_OnGeneralError(self, buf, size)

    def OnFinInfoQueryResponse(self, buf, size):
        return _mdc_gateway_client.Notify_OnFinInfoQueryResponse(self, buf, size)

    def OnLoginSuccess(self):
        return _mdc_gateway_client.Notify_OnLoginSuccess(self)

    def OnLoginFailed(self, error_no, message):
        return _mdc_gateway_client.Notify_OnLoginFailed(self, error_no, message)

    def OnNoConnections(self):
        return _mdc_gateway_client.Notify_OnNoConnections(self)

    def OnReconnect(self):
        return _mdc_gateway_client.Notify_OnReconnect(self)
    def __disown__(self):
        self.this.disown()
        _mdc_gateway_client.disown_Notify(self)
        return weakref.proxy(self)

# Register Notify in _mdc_gateway_client:
_mdc_gateway_client.Notify_swigregister(Notify)


def Notify_Regist(notify):
    return _mdc_gateway_client.Notify_Regist(notify)

def Log_Regist(log):
    return _mdc_gateway_client.Log_Regist(log)

def python_init_env():
    return _mdc_gateway_client.python_init_env()

def python_fini_env():
    return _mdc_gateway_client.python_fini_env()

def python_open_file_log():
    return _mdc_gateway_client.python_open_file_log()

def python_close_file_log():
    return _mdc_gateway_client.python_close_file_log()

def python_open_cout_log():
    return _mdc_gateway_client.python_open_cout_log()

def python_close_cout_log():
    return _mdc_gateway_client.python_close_cout_log()

def python_open_trace():
    return _mdc_gateway_client.python_open_trace()

def python_close_trace():
    return _mdc_gateway_client.python_close_trace()

def python_is_trace():
    return _mdc_gateway_client.python_is_trace()

def python_open_compress():
    return _mdc_gateway_client.python_open_compress()

def python_close_compress():
    return _mdc_gateway_client.python_close_compress()

def python_is_compress():
    return _mdc_gateway_client.python_is_compress()

def python_open_response_callback():
    return _mdc_gateway_client.python_open_response_callback()

def python_close_response_callback():
    return _mdc_gateway_client.python_close_response_callback()

def python_is_response_callback():
    return _mdc_gateway_client.python_is_response_callback()

def python_debug_print(msg):
    return _mdc_gateway_client.python_debug_print(msg)

def python_warning_print(msg):
    return _mdc_gateway_client.python_warning_print(msg)

def python_error_print(msg):
    return _mdc_gateway_client.python_error_print(msg)

def python_get_version():
    return _mdc_gateway_client.python_get_version()

def python_get_error_code_value(code):
    return _mdc_gateway_client.python_get_error_code_value(code)

def python_get_task_id():
    return _mdc_gateway_client.python_get_task_id()

def python_login(loginstr, size):
    return _mdc_gateway_client.python_login(loginstr, size)

def python_logout():
    return _mdc_gateway_client.python_logout()

def python_subscribe(buf, size):
    return _mdc_gateway_client.python_subscribe(buf, size)

def python_request_mdquery(buf, size):
    return _mdc_gateway_client.python_request_mdquery(buf, size)

def python_request_fin_info_query_sync(buf, size):
    return _mdc_gateway_client.python_request_fin_info_query_sync(buf, size)

def python_request_fin_info_query_async(buf, size):
    return _mdc_gateway_client.python_request_fin_info_query_async(buf, size)

def python_request_playback(buf, size):
    return _mdc_gateway_client.python_request_playback(buf, size)


