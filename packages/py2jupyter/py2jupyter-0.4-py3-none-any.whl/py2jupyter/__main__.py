#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –º–µ–∂–¥—É Python —Ñ–∞–π–ª–∞–º–∏ —Å —è—á–µ–π–∫–∞–º–∏ –∏ Jupyter –Ω–æ—É—Ç–±—É–∫–∞–º–∏

–õ–æ–≥–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:
- py -> ipynb: –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ \"\"\" —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è markdown —è—á–µ–π–∫–∞–º–∏,
  —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã - –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ code —è—á–µ–π–∫–∞–º–∏, –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç—Å—è
- ipynb -> py: –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, outputs –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
"""

import ast
import glob
import json
import re
import sys
import warnings
from pathlib import Path
from typing import List, Dict, Any, Tuple, Optional

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö AST –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
warnings.filterwarnings("ignore", category=DeprecationWarning, message=".*ast.Str.*")
warnings.filterwarnings("ignore", category=DeprecationWarning, message=".*Attribute s.*")


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é main –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ __main__.py
def expand_glob_patterns(patterns: List[str]) -> List[str]:
    """–†–∞—Å—à–∏—Ä—è–µ—Ç glob-—à–∞–±–ª–æ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∏–º–µ–Ω–∏"""
    expanded_files = []
    for pattern in patterns:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º glob –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
        matches = glob.glob(pattern)
        if matches:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏
            matches.sort()
            expanded_files.extend(matches)
        else:
            # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞—à–µ–ª —Ñ–∞–π–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            expanded_files.append(pattern)
    return expanded_files


def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    print("üîÑ py2jupyter - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Python ‚Üî Jupyter Notebook")
    print("=" * 50)
    print()
    print("üìñ –û–ü–ò–°–ê–ù–ò–ï:")
    print("  –î–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –º–µ–∂–¥—É Python —Ñ–∞–π–ª–∞–º–∏ –∏ Jupyter –Ω–æ—É—Ç–±—É–∫–∞–º–∏")
    print("  —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π markdown –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —É–º–Ω—ã–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞.")
    print()
    print("üöÄ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:")
    print("  –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:")
    print("    py2jupyter input.py                    # ‚Üí input.ipynb")
    print("    py2jupyter input.ipynb                 # ‚Üí input.py")
    print("    py2jupyter input.py output.ipynb       # —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∏–º—è")
    print("    py2jupyter input.py output             # ‚Üí output.ipynb")
    print()
    print("  –ú–Ω–æ–≥–æ—Ñ–∞–π–ª–æ–≤–æ–µ —Å–ª–∏—è–Ω–∏–µ:")
    print("    py2jupyter file1.py file2.py merged.ipynb")
    print("    py2jupyter nb1.ipynb nb2.ipynb merged.py")
    print("    py2jupyter script*.py                    # ‚Üí script.ipynb (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    print("    py2jupyter test_*.py output.ipynb       # —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    print()
    print("üìù –§–û–†–ú–ê–¢–´ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í:")
    print("  Python ‚Üí Jupyter:")
    print('    """ # –ó–∞–≥–æ–ª–æ–≤–æ–∫ # """           ‚Üí markdown –∑–∞–≥–æ–ª–æ–≤–æ–∫')
    print('    """ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ """         ‚Üí markdown –±–ª–æ–∫')
    print('    r""" LaTeX: $\\int x dx$ """    ‚Üí markdown —Å r-–ø—Ä–µ—Ñ–∏–∫—Å–æ–º')
    print("    def func(): \"\"\"docstring\"\"\"  ‚Üí –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –∫–æ–¥–µ")
    print("    # –æ–±—ã—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π          ‚Üí –æ—Å—Ç–∞–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º")
    print()
    print("  Jupyter ‚Üí Python:")
    print("    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ #                  ‚Üí \"\"\" # –ó–∞–≥–æ–ª–æ–≤–æ–∫ # \"\"\"")
    print("    Markdown —Å \\ —Å–∏–º–≤–æ–ª–∞–º–∏        ‚Üí r\"\"\"...\"\"\"")
    print("    –û–±—ã—á–Ω—ã–π markdown               ‚Üí \"\"\"...\"\"\"")
    print()
    print("‚öôÔ∏è  –û–°–û–ë–ï–ù–ù–û–°–¢–ò:")
    print("  ‚úì –§—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö")
    print("  ‚úì –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ r-–ø—Ä–µ—Ñ–∏–∫—Å–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é \\ —Å–∏–º–≤–æ–ª–æ–≤")
    print("  ‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤")
    print("  ‚úì –ú–Ω–æ–≥–æ—Ñ–∞–π–ª–æ–≤–æ–µ —Å–ª–∏—è–Ω–∏–µ")
    print("  ‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ glob-—à–∞–±–ª–æ–Ω–æ–≤ (*, ?)")
    print("  ‚úì –í–∑–∞–∏–º–æ–æ–±—Ä–∞—Ç–∏–º–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è")
    print()
    print("üìö –ü–†–ò–ú–ï–†–´:")
    print("  py2jupyter script.py")
    print("  py2jupyter notebook.ipynb")
    print("  py2jupyter --help")
    print()


def main():
    """–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —Å–ø—Ä–∞–≤–∫–∏
    if len(sys.argv) == 2 and sys.argv[1] in ['--help', '-h', 'help']:
        show_help()
        sys.exit(0)
    
    if len(sys.argv) < 2:
        print("üîÑ py2jupyter - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Python ‚Üî Jupyter Notebook")
        print()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python py2jupyter.py input.py [output.ipynb]    # py ‚Üí ipynb")
        print("  python py2jupyter.py input.ipynb [output.py]    # ipynb ‚Üí py")
        print("  python py2jupyter.py input1.py input2.py output.ipynb  # –º–Ω–æ–≥–æ—Ñ–∞–π–ª–æ–≤–æ–µ —Å–ª–∏—è–Ω–∏–µ")
        print("  python py2jupyter.py script*.py                 # glob-—à–∞–±–ª–æ–Ω—ã")
        print("  python py2jupyter.py --help                     # –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞")
        print()
        print("–ï—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        sys.exit(1)

    # –†–∞–∑–¥–µ–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    original_input_pattern = None  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –∏–∑ glob-—à–∞–±–ª–æ–Ω–∞
    if len(sys.argv) == 2:
        # –û–¥–∏–Ω –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª, –≤—ã—Ö–æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        original_input_pattern = sys.argv[1]
        input_files = [sys.argv[1]]
        output_file = None
    elif len(sys.argv) == 3:
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–∏–Ω –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å –≤—ã—Ö–æ–¥–Ω—ã–º, –∏–ª–∏ –¥–≤–∞ –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–∞ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç glob-—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
        first_path = Path(sys.argv[1])
        second_path = Path(sys.argv[2])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .py/.ipynb - –µ—Å–ª–∏ –¥–∞, —Ç–æ —ç—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if second_path.suffix in ['.py', '.ipynb'] and first_path.suffix == second_path.suffix:
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç glob-—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            input_files = [sys.argv[1], sys.argv[2]]
            output_file = None
        else:
            # –≠—Ç–æ –æ–¥–∏–Ω –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å –≤—ã—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º
            input_files = [sys.argv[1]]
            output_file = sys.argv[2]
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã - —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        all_args = sys.argv[1:]
        all_paths_exist = all(Path(arg).exists() for arg in all_args)
        if all_paths_exist:
            # –í—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã - —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
            all_suffixes = set(Path(arg).suffix for arg in all_args)
            if len(all_suffixes) == 1 and all_suffixes.pop() in ['.py', '.ipynb']:
                # –í—Å–µ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .py –∏–ª–∏ .ipynb - —Å—á–∏—Ç–∞–µ–º –∏—Ö –≤—Ö–æ–¥–Ω—ã–º–∏
                input_files = all_args
                output_file = None
            else:
                # –†–∞–∑–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ - –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π
                input_files = all_args[:-1]
                output_file = all_args[-1]
        else:
            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç - –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π
            input_files = all_args[:-1]
            output_file = all_args[-1]

    # –†–∞—Å—à–∏—Ä—è–µ–º glob-—à–∞–±–ª–æ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    input_files = expand_glob_patterns(input_files)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    input_paths = []
    for input_file in input_files:
        input_path = Path(input_file)
        if not input_path.exists():
            print(f"–§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)
        input_paths.append(input_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    if len(input_paths) > 1:
        first_suffix = input_paths[0].suffix
        if not all(p.suffix == first_suffix for p in input_paths):
            print("–û—à–∏–±–∫–∞: –í—Å–µ –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (.py –∏–ª–∏ .ipynb)")
            sys.exit(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if output_file is None:
        if len(input_paths) > 1:
            # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
            # (—á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ glob-—à–∞–±–ª–æ–Ω–∞)
            file_names = [p.stem for p in input_paths]  # –∏–º–µ–Ω–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π

            # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
            if file_names:
                common_prefix = file_names[0]
                for name in file_names[1:]:
                    # –ù–∞—Ö–æ–¥–∏–º –æ–±—â—É—é —á–∞—Å—Ç—å –¥–æ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–ª–∏—á–∏—è
                    for i, (a, b) in enumerate(zip(common_prefix, name)):
                        if a != b:
                            common_prefix = common_prefix[:i]
                            break
                    else:
                        # –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–º—è –∫–æ—Ä–æ—á–µ –¥—Ä—É–≥–æ–≥–æ
                        common_prefix = common_prefix[:min(len(common_prefix), len(name))]

                # –£–±–∏—Ä–∞–µ–º trailing —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é —à–∞–±–ª–æ–Ω–∞
                common_prefix = common_prefix.rstrip('_-0123456789')

                if common_prefix and len(common_prefix) > 1:  # –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
                    base_name = common_prefix
                else:
                    # –ï—Å–ª–∏ –æ–±—â–µ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –±–µ–∑ –Ω–æ–º–µ—Ä–∞
                    base_name = file_names[0].rstrip('_-0123456789')

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–∞–∫ –±–∞–∑–æ–≤—É—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                output_dir = input_paths[0].parent
                if input_paths[0].suffix == '.py':
                    output_file = str(output_dir / (base_name + '.ipynb'))
                elif input_paths[0].suffix == '.ipynb':
                    output_file = str(output_dir / (base_name + '.py'))
                else:
                    print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {input_paths[0].suffix}")
                    print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .py –∏ .ipynb —Ñ–∞–π–ª—ã")
                    sys.exit(1)
            else:
                print("–û—à–∏–±–∫–∞: –î–ª—è –º–Ω–æ–≥–æ—Ñ–∞–π–ª–æ–≤–æ–≥–æ —Å–ª–∏—è–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª")
                sys.exit(1)
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ
            input_path = input_paths[0]
            if input_path.suffix == '.py':
                output_file = str(input_path.with_suffix('.ipynb'))
            elif input_path.suffix == '.ipynb':
                output_file = str(input_path.with_suffix('.py'))
            else:
                print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {input_path.suffix}")
                print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .py –∏ .ipynb —Ñ–∞–π–ª—ã")
                sys.exit(1)

    output_path = Path(output_file)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    if not output_path.suffix:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if input_paths[0].suffix == '.py':
            # Python -> Jupyter
            output_path = output_path.with_suffix('.ipynb')
        elif input_paths[0].suffix == '.ipynb':
            # Jupyter -> Python  
            output_path = output_path.with_suffix('.py')
        else:
            print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {input_paths[0].suffix}")
            sys.exit(1)

    try:
        if input_paths[0].suffix == '.py':
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Python -> Jupyter (–æ–¥–∏–Ω–æ—á–Ω–∞—è –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è)
            converter = PythonToIPythonConverter()
            total_cells = 0

            if len(input_paths) == 1:
                # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
                cells = converter.parse_python_file(str(input_path))
                total_cells = len(cells)
            else:
                # –î–ª—è —Å–ª–∏—è–Ω–∏—è —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                for input_path in input_paths:
                    temp_converter = PythonToIPythonConverter()
                    cells = temp_converter.parse_python_file(str(input_path))
                    total_cells += len(cells)
                    # –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
                    converter.cells.extend(cells)

            converter.generate_ipynb(str(output_path))
            if len(input_paths) == 1:
                print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {total_cells} —è—á–µ–µ–∫: {input_paths[0].name} ‚Üí {output_path.name}")
            else:
                file_names = [p.name for p in input_paths]
                print(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(input_paths)} —Ñ–∞–π–ª–æ–≤ ({', '.join(file_names)}) ‚Üí {output_path}")
                print(f"–í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}")

        elif input_paths[0].suffix == '.ipynb':
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Jupyter -> Python (–æ–¥–∏–Ω–æ—á–Ω–∞—è –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è)  
            converter = IPythonToPythonConverter()
            combined_code = []
            
            for i, input_path in enumerate(input_paths):
                file_converter = IPythonToPythonConverter()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                python_code = file_converter.parse_ipynb_file(str(input_path))
                if python_code.strip():
                    if i > 0:  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
                        combined_code.append('\n' + '# ' + '='*60)
                        combined_code.append(f'# –§–∞–π–ª: {input_path.name}')
                        combined_code.append('# ' + '='*60 + '\n')
                    combined_code.append(python_code)
            
            final_code = '\n'.join(combined_code)
            converter.save_python_file(final_code, str(output_path))
            
            if len(input_paths) == 1:
                print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {input_paths[0].name} ‚Üí {output_path.name}")
            else:
                file_names = [p.name for p in input_paths]
                print(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(input_paths)} —Ñ–∞–π–ª–æ–≤ ({', '.join(file_names)}) ‚Üí {output_path}")

        else:
            print("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            sys.exit(1)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        sys.exit(1)


class PythonToIPythonConverter:
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Python —Ñ–∞–π–ª–æ–≤ –≤ Jupyter –Ω–æ—É—Ç–±—É–∫–∏"""

    def __init__(self):
        self.cells = []

    def parse_python_file(self, filepath: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç Python —Ñ–∞–π–ª –∏ –≤—ã–¥–µ–ª—è–µ—Ç –±–ª–æ–∫–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —è—á–µ–π–∫–∏"""
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AST –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä
        try:
            tree = ast.parse(content)
        except SyntaxError as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ —Ñ–∞–π–ª–µ {filepath}: {e}")
            return []

        self.cells = []
        self._extract_cells_from_ast(tree, content)

        return self.cells

    def _extract_cells_from_ast(self, tree: ast.AST, content: str):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —è—á–µ–π–∫–∏ –∏–∑ AST –¥–µ—Ä–µ–≤–∞"""
        lines = content.split('\n')

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã, –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        functions: List[Tuple[int, int, str]] = []
        classes: List[Tuple[int, int, str]] = []
        multiline_strings = []
        single_line_multistrings = []

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        all_functions: List[Tuple[int, int, str, Any]] = []
        all_classes: List[Tuple[int, int, str, Any]] = []

        for node in ast.walk(tree):
            if isinstance(node, ast.FunctionDef):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
                start_line = node.lineno
                if node.decorator_list:
                    # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π lineno —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
                    decorator_start = min(decorator.lineno for decorator in node.decorator_list)
                    start_line = min(start_line, decorator_start)
                all_functions.append((start_line, node.end_lineno, node.name, node)) #type:ignore
            elif isinstance(node, ast.ClassDef):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª–æ –∫–ª–∞—Å—Å–∞ —Å —É—á–µ—Ç–æ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
                start_line = node.lineno
                if node.decorator_list:
                    # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π lineno —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
                    decorator_start = min(decorator.lineno for decorator in node.decorator_list)
                    start_line = min(start_line, decorator_start)
                all_classes.append((start_line, node.end_lineno, node.name, node)) #type:ignore

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ top-level —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ)
        for func_start, func_end, func_name, func_node in all_functions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ–π
            is_nested = False
            for parent_start, parent_end, _, _ in all_functions + all_classes:
                if parent_start < func_start < parent_end and (func_start, func_end, func_name, func_node) != (parent_start, parent_end, _, _):
                    is_nested = True
                    break
            if not is_nested:
                functions.append((func_start, func_end, func_name))

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ top-level –∫–ª–∞—Å—Å—ã
        for class_start, class_end, class_name, class_node in all_classes:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–∞—Å—Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º
            is_nested = False
            for parent_start, parent_end, _, _ in all_functions + all_classes:
                if parent_start < class_start < parent_end and (class_start, class_end, class_name, class_node) != (parent_start, parent_end, _, _):
                    is_nested = True
                    break
            if not is_nested:
                classes.append((class_start, class_end, class_name))

        # –ù–∞—Ö–æ–¥–∏–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (—Ç–æ–ª—å–∫–æ top-level, –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–π/–∫–ª–∞—Å—Å–æ–≤)
        for node in ast.walk(tree):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Python 3.8+)
            is_string_node = False
            if hasattr(ast, 'Constant') and isinstance(node, ast.Expr) and isinstance(node.value, ast.Constant):
                # Python 3.8+: –∏—Å–ø–æ–ª—å–∑—É–µ–º ast.Constant
                is_string_node = isinstance(node.value.value, str)
            elif hasattr(ast, 'Str') and isinstance(node, ast.Expr) and isinstance(node.value, ast.Str):
                # Python < 3.8: –∏—Å–ø–æ–ª—å–∑—É–µ–º ast.Str
                is_string_node = True
                
            if is_string_node and hasattr(node, 'lineno') and hasattr(node, 'end_lineno') and node.end_lineno:
                if node.lineno != node.end_lineno:  # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ docstring (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å–∞)
                    is_docstring = False
                    parent = getattr(node, '_parent', None)
                    if parent and isinstance(parent, (ast.FunctionDef, ast.ClassDef)):
                        is_docstring = True

                    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –≤ –∫–æ–¥–µ
                    for func_start, func_end, _, _ in all_functions:
                        if func_start < node.lineno < func_end:
                            is_docstring = True
                            break
                    for class_start, class_end, _, _ in all_classes:
                        if class_start < node.lineno < class_end:
                            is_docstring = True
                            break

                    if not is_docstring:
                        multiline_strings.append((node.lineno, node.end_lineno))

        # –ù–∞—Ö–æ–¥–∏–º magic –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ #> %command
        magic_commands = []
        for i, line in enumerate(lines, 1):  # i - –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (1-based)
            stripped = line.strip()
            if stripped.startswith('#> %'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º magic –∫–æ–º–∞–Ω–¥—É (—É–±–∏—Ä–∞–µ–º #> )
                magic_content = stripped[3:].strip()  # —É–±–∏—Ä–∞–µ–º #> –∏ –ø—Ä–æ–±–µ–ª—ã

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å–∞
                is_inside_block = False
                for func_start, func_end, _, _ in all_functions:
                    if func_start < i < func_end:
                        is_inside_block = True
                        break
                for class_start, class_end, _, _ in all_classes:
                    if class_start < i < class_end:
                        is_inside_block = True
                        break

                if not is_inside_block:
                    magic_commands.append((i, i, magic_content))

        # –ù–∞—Ö–æ–¥–∏–º shell –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ #> !command
        shell_commands = []
        for i, line in enumerate(lines, 1):  # i - –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (1-based)
            stripped = line.strip()
            if stripped.startswith('#> !'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º shell –∫–æ–º–∞–Ω–¥—É (—É–±–∏—Ä–∞–µ–º #> )
                shell_content = stripped[3:].strip()  # —É–±–∏—Ä–∞–µ–º #> –∏ –ø—Ä–æ–±–µ–ª—ã

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å–∞
                is_inside_block = False
                for func_start, func_end, _, _ in all_functions:
                    if func_start < i < func_end:
                        is_inside_block = True
                        break
                for class_start, class_end, _, _ in all_classes:
                    if class_start < i < class_end:
                        is_inside_block = True
                        break

                if not is_inside_block:
                    shell_commands.append((i, i, shell_content))

        # –ù–∞—Ö–æ–¥–∏–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ """ —Ç–µ–∫—Å—Ç """
        for i, line in enumerate(lines, 1):  # i - –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (1-based)
            stripped = line.strip()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç """ —Ç–µ–∫—Å—Ç """ –∏–ª–∏ r""" —Ç–µ–∫—Å—Ç """ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            # –í–∫–ª—é—á–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ç–∞–∫ –∏ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ """ # —Ç–µ–∫—Å—Ç # """
            if ((stripped.startswith('"""') and stripped.endswith('"""') and len(stripped) > 6) or
                (stripped.startswith('r"""') and stripped.endswith('"""') and len(stripped) > 7)):

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                if stripped.startswith('r"""'):
                    inner_content = stripped[4:-3].strip()
                else:
                    inner_content = stripped[3:-3].strip()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å–∞ (–Ω–µ docstring)
                is_inside_block = False
                for func_start, func_end, _, _ in all_functions:
                    if func_start < i < func_end:
                        is_inside_block = True
                        break
                for class_start, class_end, _, _ in all_classes:
                    if class_start < i < class_end:
                        is_inside_block = True
                        break

                if not is_inside_block:
                    # –í—Å–µ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ
                    single_line_multistrings.append((i, i, inner_content))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        all_blocks = []
        for start, end, name in functions:
            all_blocks.append(('function', start, end, name))
        for start, end, name in classes:
            all_blocks.append(('class', start, end, name))
        for start, end in multiline_strings:
            all_blocks.append(('multiline_string', start, end, ''))
        for start, end, content in single_line_multistrings:
            all_blocks.append(('single_line_multistring', start, end, content))
        for start, end, content in magic_commands:
            all_blocks.append(('magic_command', start, end, content))
        for start, end, content in shell_commands:
            all_blocks.append(('shell_command', start, end, content))

        all_blocks.sort(key=lambda x: x[1])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

        # –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫–∏
        current_pos = 0
        for block_type, start, end, name in all_blocks:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º
            if start > current_pos + 1:
                code_lines = lines[current_pos:start-1]
                self._add_code_cell(code_lines)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –±–ª–æ–∫
            if block_type in ('function', 'class'):
                cell_lines = lines[start-1:end]
                self._add_code_cell_with_name(cell_lines, f"{block_type} {name}")
                current_pos = end  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å–∞
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ current_pos –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞
            elif block_type == 'magic_command':
                # Magic –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è code —è—á–µ–π–∫–∞–º–∏
                self.cells.append({
                    'type': 'code',
                    'name': 'magic',
                    'content': name  # name —Å–æ–¥–µ—Ä–∂–∏—Ç magic –∫–æ–º–∞–Ω–¥—É
                })
                current_pos = end  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ magic –∫–æ–º–∞–Ω–¥—ã
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ current_pos –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞
            elif block_type == 'shell_command':
                # Shell –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è code —è—á–µ–π–∫–∞–º–∏
                self.cells.append({
                    'type': 'code',
                    'name': 'shell',
                    'content': name  # name —Å–æ–¥–µ—Ä–∂–∏—Ç shell –∫–æ–º–∞–Ω–¥—É
                })
                current_pos = end  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ shell –∫–æ–º–∞–Ω–¥—ã
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ current_pos –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞
            elif block_type == 'multiline_string':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ markdown —è—á–µ–π–∫–æ–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å r""" –∏–ª–∏ """)
                first_line = lines[start-1] if start-1 < len(lines) else ""
                stripped_first_line = first_line.strip()
                is_markdown_cell = (stripped_first_line.startswith('r\"\"\"') or 
                                  stripped_first_line.startswith('\"\"\"'))

                if is_markdown_cell:
                    # –≠—Ç–æ markdown —è—á–µ–π–∫–∞ - —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —è—á–µ–π–∫—É
                    docstring_lines = lines[start-1:end]
                    # –£–±–∏—Ä–∞–µ–º r""" –∏–ª–∏ """
                    if docstring_lines and docstring_lines[0].strip().startswith('r\"\"\"'):
                        docstring_lines[0] = docstring_lines[0].replace('r\"\"\"', '', 1)
                    elif docstring_lines and docstring_lines[0].strip().startswith('\"\"\"'):
                        docstring_lines[0] = docstring_lines[0].replace('\"\"\"', '', 1)
                    if docstring_lines and docstring_lines[-1].strip().endswith('\"\"\"'):
                        docstring_lines[-1] = docstring_lines[-1].rsplit('\"\"\"', 1)[0]

                    # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    while docstring_lines and not docstring_lines[0].strip():
                        docstring_lines.pop(0)
                    while docstring_lines and not docstring_lines[-1].strip():
                        docstring_lines.pop()

                    if docstring_lines:
                        content = '\n'.join(docstring_lines)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ # text #
                        content_stripped = content.strip()
                        self.cells.append({
                            'type': 'markdown',
                            'name': 'markdown',
                            'content': content
                        })
                    current_pos = end  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ markdown —è—á–µ–π–∫–∏
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ current_pos –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π """ –∏–ª–∏ docstring, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ -
                # –æ–Ω –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –≤ —è—á–µ–π–∫—É —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å–∞ –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ –∫–æ–¥–∞

            elif block_type == 'single_line_multistring':
                # –≠—Ç–æ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - —Å–æ–∑–¥–∞–µ–º markdown —è—á–µ–π–∫—É
                if name:  # name —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    self.cells.append({
                        'type': 'markdown',
                        'name': 'markdown',
                        'content': name
                    })
                current_pos = end  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ markdown —è—á–µ–π–∫–∏
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ current_pos –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞

            current_pos = end

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∫–æ–¥
        if current_pos < len(lines):
            remaining_lines = lines[current_pos:]
            self._add_code_cell(remaining_lines)

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –∫–∞–∫ –æ–¥–Ω—É —è—á–µ–π–∫—É
        if not self.cells:
            content_lines = content.split('\n')
            self._add_code_cell_with_name(content_lines, 'main')

    def _find_block_end(self, lines: List[str], start_line_idx: int) -> int:
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ (—Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å–∞) –ø–æ –æ—Ç—Å—Ç—É–ø–∞–º"""
        if start_line_idx >= len(lines):
            return len(lines)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—Å—Ç—É–ø –±–ª–æ–∫–∞
        base_indent = len(lines[start_line_idx]) - len(lines[start_line_idx].lstrip())

        # –ò—â–µ–º –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ - —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–º –∂–µ –∏–ª–∏ –º–µ–Ω—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º
        for i in range(start_line_idx + 1, len(lines)):
            line = lines[i]
            if line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                current_indent = len(line) - len(line.lstrip())
                # –ï—Å–ª–∏ –æ—Ç—Å—Ç—É–ø –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –±–∞–∑–æ–≤–æ–º—É - —ç—Ç–æ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞
                if current_indent <= base_indent:
                    return i

        return len(lines)  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–µ—Ü, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞

    def _add_code_cell(self, lines: List[str]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç code —è—á–µ–π–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫"""
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º
        code_blocks = self._split_code_by_empty_lines(lines)

        for block in code_blocks:
            # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
            while block and not block[0].strip():
                block.pop(0)
            while block and not block[-1].strip():
                block.pop()

            if block:
                self.cells.append({
                    'type': 'code',
                    'name': 'code',
                    'content': '\n'.join(block)
                })

    def _split_code_by_empty_lines(self, lines: List[str]) -> List[List[str]]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –∫–æ–¥ –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –¥–≤—É–º –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º (—Ç–æ–ª—å–∫–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω—É–ª–µ–≤–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞)"""
        if not lines:
            return []

        blocks = []
        current_block = []

        i = 0
        while i < len(lines):
            line = lines[i]
            current_block.append(line)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–≤–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Ä—è–¥ –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω—É–ª–µ–≤–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞
            if (i + 2 < len(lines) and
                not line.strip() and  # —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è
                not lines[i + 1].strip() and  # —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è
                self._is_zero_indent_line(lines[i + 2])):  # —Å–ª–µ–¥—É—é—â–∞—è –ø–æ—Å–ª–µ –ø—É—Å—Ç—ã—Ö –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤–æ–π –æ—Ç—Å—Ç—É–ø

                # –ù–∞—à–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                if current_block:
                    blocks.append(current_block)
                current_block = []
                i += 1  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–¥–Ω—É –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è

            i += 1

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
        if current_block:
            blocks.append(current_block)

        return blocks

    def _is_zero_indent_line(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω—É–ª–µ–≤–æ–π –æ—Ç—Å—Ç—É–ø (–Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ —Å –ø—Ä–æ–±–µ–ª–∞)"""
        stripped = line.strip()
        return bool(stripped) and not line.startswith((' ', '\t'))

    def _add_code_cell_with_name(self, lines: List[str], name: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç code —è—á–µ–π–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º
        code_blocks = self._split_code_by_empty_lines(lines)

        for block in code_blocks:
            # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
            while block and not block[0].strip():
                block.pop(0)
            while block and not block[-1].strip():
                block.pop()

            if block:
                self.cells.append({
                    'type': 'code',
                    'name': name,
                    'content': '\n'.join(block)
                })

    def generate_ipynb(self, output_path: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç .ipynb —Ñ–∞–π–ª –∏–∑ —è—á–µ–µ–∫"""

        cells: list = []

        notebook = {
            "cells": cells,
            "metadata": {
                "kernelspec": {
                    "display_name": "Python 3",
                    "language": "python",
                    "name": "python3"
                },
                "language_info": {
                    "name": "python",
                    "version": "3.8.5"
                }
            },
            "nbformat": 4,
            "nbformat_minor": 2
        }

        for cell_data in self.cells:
            if cell_data['type'] == 'markdown':
                cell = {
                    "cell_type": "markdown",
                    "metadata": {},
                    "source": cell_data['content'].split('\n')
                }
            else:  # code
                cell = {
                    "cell_type": "code",
                    "execution_count": None,
                    "metadata": {},
                    "outputs": [],
                    "source": cell_data['content'].split('\n')
                }
            cells.append(cell)

        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(notebook, f, indent=1, ensure_ascii=False)


class IPythonToPythonConverter:
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä Jupyter –Ω–æ—É—Ç–±—É–∫–æ–≤ –≤ Python —Ñ–∞–π–ª—ã"""

    def __init__(self):
        self.python_code = []

    def parse_ipynb_file(self, filepath: str) -> str:
        """–ü–∞—Ä—Å–∏—Ç .ipynb —Ñ–∞–π–ª –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ Python –∫–æ–¥"""
        with open(filepath, 'r', encoding='utf-8') as f:
            notebook = json.load(f)

        self.python_code = []
        first_code_cell_found = False

        for cell in notebook.get('cells', []):
            cell_type = cell.get('cell_type', 'code')
            source_lines = cell.get('source', [])

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º source –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Å—Ç—Ä–æ–∫—É
            if isinstance(source_lines, list):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–µ \n –≤ –∫–æ–Ω—Ü–µ
                processed_lines = []
                for line in source_lines:
                    # –£–±–∏—Ä–∞–µ–º \n –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    if line.endswith('\n'):
                        line = line[:-1]
                    processed_lines.append(line)

                # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
                while processed_lines and not processed_lines[0].strip():
                    processed_lines.pop(0)

                # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
                while processed_lines and not processed_lines[-1].strip():
                    processed_lines.pop()

                content = '\n'.join(processed_lines)
            else:
                content = source_lines

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–π code —è—á–µ–π–∫–æ–π —Å shebang
            if cell_type == 'code' and not first_code_cell_found and content.strip().startswith('#!'):
                # –ù–∞—à–ª–∏ shebang –≤ –ø–µ—Ä–≤–æ–π code —è—á–µ–π–∫–µ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ
                shebang_lines = [line for line in content.split('\n') if line.strip().startswith('#!')]
                if shebang_lines:
                    self.python_code.append(shebang_lines[0])
                    self.python_code.append('')  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ shebang
                first_code_cell_found = True

            if cell_type == 'markdown':
                if content.strip():
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å r –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è —Å–∏–º–≤–æ–ª–∞ \
                    needs_r_prefix = '\\' in content
                    prefix = 'r' if needs_r_prefix else ''

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                    lines_content = content.strip().split('\n')
                    is_single_line = len(lines_content) == 1

                    if (is_single_line and
                        content.strip().startswith('#') and content.strip().endswith('#')):
                        # –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ """ # –∑–∞–≥–æ–ª–æ–≤–æ–∫ # """
                        self.python_code.append(f'{prefix}\"\"\" {content.strip()} \"\"\"')
                    elif is_single_line:
                        # –≠—Ç–æ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π markdown - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        self.python_code.append(f'{prefix}\"\"\" {content.strip()} \"\"\"')
                    else:
                        # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π markdown - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        self.python_code.append(f'{prefix}\"\"\"\n{content}\n\"\"\"')

            elif cell_type == 'code':
                if content.strip():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ magic –∏–ª–∏ shell –∫–æ–º–∞–Ω–¥–æ–π
                    lines = content.strip().split('\n')
                    if len(lines) == 1:
                        single_line = lines[0].strip()
                        if single_line.startswith('%'):
                            # –≠—Ç–æ magic –∫–æ–º–∞–Ω–¥–∞ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                            self.python_code.append(f'#> {single_line}')
                        elif single_line.startswith('!'):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ shebang
                            if single_line.startswith('!/usr/bin/env python') or single_line.startswith('!/usr/bin/python'):
                                # –≠—Ç–æ shebang - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                self.python_code.append(f'#{single_line}')
                            else:
                                # –≠—Ç–æ shell –∫–æ–º–∞–Ω–¥–∞ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                                self.python_code.append(f'#> {single_line}')
                        else:
                            # –û–±—ã—á–Ω—ã–π –∫–æ–¥ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –±–µ–∑ shebang (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ)
                            code_content = '\n'.join([line for line in content.split('\n') if not line.strip().startswith('#!')])
                            if code_content.strip():
                                self.python_code.append(code_content)
                    else:
                        # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –±–µ–∑ shebang
                        code_content = '\n'.join([line for line in content.split('\n') if not line.strip().startswith('#!')])
                        if code_content.strip():
                            self.python_code.append(code_content)

                if cell_type == 'code':
                    first_code_cell_found = True

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if cell != notebook.get('cells', [])[-1]:
                self.python_code.append('')

        return '\n'.join(self.python_code)

    def save_python_file(self, content: str, output_path: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç Python –∫–æ–¥ –≤ —Ñ–∞–π–ª"""
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(content)


if __name__ == "__main__":
    main()
