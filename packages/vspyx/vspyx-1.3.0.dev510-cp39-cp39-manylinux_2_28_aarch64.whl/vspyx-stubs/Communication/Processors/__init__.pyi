import typing, enum, vspyx

class E2EProcessor(vspyx.Communication.PointProcessor):
	"""E2EProcessor
	"""

	@staticmethod
	def New() -> vspyx.Communication.Processors.E2EProcessor: ...

	def AddSignal(self, name: str, config: vspyx.Communication.TransformationTechnologyConfig_EndToEnd) -> typing.Any: ...

class AUTOSARAdaptiveProcessor(vspyx.Communication.PointProcessor):
	"""AUTOSARAdaptiveProcessor
	"""

	@staticmethod
	def New() -> vspyx.Communication.Processors.AUTOSARAdaptiveProcessor: ...

	def RegisterServiceInterfaceDeployment(self, deployment: vspyx.Communication.ServiceInterfaceDeployment) -> typing.Any: ...

class AUTOSARClassicProcessor(vspyx.Communication.PointProcessor):
	"""AUTOSARClassicProcessor
	"""
	ECUInstance: vspyx.AUTOSAR.Classic.ECUInstance

	@staticmethod
	def New() -> vspyx.Communication.Processors.AUTOSARClassicProcessor: ...

	def ReceiveSignal(self, signal: vspyx.Communication.ISignal) -> vspyx.Runtime.Value: ...

	def ReceiveSignalGroup(self, signalGroup: vspyx.Communication.ISignalGroup) -> typing.List[typing.Any]: ...

	def MakeGlobalPDURefForPDU(self, pdu: vspyx.Communication.PDU) -> str: ...

	def MakeGlobalPDURef(self, length: int) -> str: ...

	def GetGlobalPDURefForPDU(self, pdu: vspyx.Communication.PDU) -> str: ...

	def GetIDForCANController(self, controller: vspyx.Communication.CANController) -> int:
		"""Get an ID for the given CAN controller, guaranteed not to collide with other CAN controllers

		"""
		pass


	def RegisterFlexRayLPDU(self, controllerId: int, triggering: vspyx.Communication.FlexRayFrameTriggering) -> int: ...

	def DeregisterFlexRayLPDU(self, controllerId: int, triggering: vspyx.Communication.FlexRayFrameTriggering) -> typing.Any: ...

	def GetIDForFlexRayController(self, controller: vspyx.Communication.FlexRayController) -> int: ...

	def RegisterSourcePDUIndex(self, globalPDURef: str) -> typing.Any: ...

	def DeregisterSourcePDUIndex(self, globalPDURef: str) -> typing.Any: ...

	def RegisterDestinationPDUIndex(self, globalPDURef: str) -> typing.Any: ...

	def DeregisterDestinationPDUIndex(self, globalPDURef: str) -> typing.Any: ...

	def RegisterCanIfRxPDU(self, triggering: vspyx.Communication.CANFrameTriggering) -> int: ...

	def DeregisterCanIfRxPDU(self, triggering: vspyx.Communication.CANFrameTriggering) -> typing.Any: ...

	def RegisterCanIfTxPDU(self, triggering: vspyx.Communication.CANFrameTriggering) -> int: ...

	def DeregisterCanIfTxPDU(self, triggering: vspyx.Communication.CANFrameTriggering) -> typing.Any: ...

	def RegisterComIPDU(self, pdu: vspyx.Communication.ISignalIPDU) -> int: ...

	def GetIDForComIPDU(self, pdu: vspyx.Communication.ISignalIPDU) -> typing.Any: ...

	def DeregisterComIPDU(self, pdu: vspyx.Communication.ISignalIPDU) -> typing.Any: ...

	def RegisterIpduMPDU(self, pdu: vspyx.Communication.IPDU) -> int: ...

	def DeregisterIpduMPDU(self, pdu: vspyx.Communication.IPDU) -> typing.Any: ...

	def RegisterComISignalMapping(self, mapping: vspyx.Communication.ISignalToIPDUMapping, type: vspyx.intrepidcs.vspyx.rpc.AUTOSAR.ComSignalTypeEnumType) -> int: ...

	def DeregisterComISignalMapping(self, mapping: vspyx.Communication.ISignalToIPDUMapping) -> typing.Any: ...

	def GetNetworkEndpointID(self, nep: vspyx.Communication.NetworkEndpoint, ipAddr: vspyx.Core.IPAddress) -> typing.Any: ...

	def RegisterSocketConnection(self, socon: typing.Any) -> int: ...

class DissectorProcessor(vspyx.Communication.PointProcessor):
	"""DissectorProcessor
	"""
	AcceptanceFilter: vspyx.Core.Function_5230b09a44
	OnConfigurationMutation: vspyx.Core.Callback_634bd5c449

	@staticmethod
	def New(config: typing.Any) -> vspyx.Communication.Processors.DissectorProcessor: ...

	def CloneConfiguration(self) -> typing.Any: ...

class ISOStandardizedServicePrimitiveProcessor(vspyx.Communication.PointProcessor):
	"""ISOStandardizedServicePrimitiveProcessor
	"""

