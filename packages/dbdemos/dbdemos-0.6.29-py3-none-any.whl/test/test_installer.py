import dbdemos
from dbdemos.conf import DemoNotebook

from dbdemos.installer import Installer
from dbdemos.installer_report import InstallerReport



def test_html():
    installer = InstallerReport("http://localhost")
    demo_name = "lakehouse-fsi-fraud"
    description = "Build your Banking platform and detect Fraud in real-time"
    title = "Lakehouse - Banking Fraud"
    install_path = "/Users/quentin.ambard@databricks.com/test_install_quentin"


    notebooks =[{"path": "_resources/00-setup", "title": "Prep data", "description": "Helpers & setup.", "pre_run": False, "publish_on_website": False, "add_cluster_setup_cell": False, "parameters": {}, "depends_on_previous": True},
                {"path": "_resources/01-load-data", "title": "Prep data", "description": "Prep data for demo.", "pre_run": False, "publish_on_website": False, "add_cluster_setup_cell": False, "parameters": {}, "depends_on_previous": True},
                {"path": "00-FSI-fraud-detection-introduction-lakehouse", "title": "Lakehouse - Fraud introduction", "description": "Start here to explore the Lakehouse.", "pre_run": False, "publish_on_website": True, "add_cluster_setup_cell": False, "parameters": {}, "depends_on_previous": True},
                {"path": "01-Data-ingestion/01.1-DLT-fraud-detection-SQL", "title": "Ingest data with Delta Live Table", "description": "SQL DLT pipeline to ingest data & build clean tables.", "pre_run": True, "publish_on_website": True, "add_cluster_setup_cell": False, "parameters": {}, "depends_on_previous": True},
                {"path": "02-Data-governance/02-UC-data-governance-ACL-fsi-fraud", "title": "Governance with Unity Catalog", "description": "Secure your tables, lineage, auditlog...", "pre_run": True, "publish_on_website": True, "add_cluster_setup_cell": True, "parameters": {}, "depends_on_previous": True},
                {"path": "03-BI-data-warehousing/03-BI-Datawarehousing-fraud", "title": "Datawarehousing & BI / Dashboarding", "description": "Run interactive queries on top of your data", "pre_run": False, "publish_on_website": True, "add_cluster_setup_cell": False, "parameters": {}, "depends_on_previous": True},
                {"path": "04-Data-Science-ML/04.1-AutoML-FSI-fraud", "title": "Build Fraud prediction model (AutoML)", "description": "Leverage Databricks AutoML to create a Fraud model in a few clicks", "pre_run": True, "publish_on_website": True, "add_cluster_setup_cell": True, "parameters": {}, "depends_on_previous": True},
                {"path": "04-Data-Science-ML/04.2-automl-generated-notebook-fraud", "title": "Explore Fraud Prediction generated model", "description": "Explore the best Fraud model generated by AutoML and deploy it in production.", "pre_run": True, "publish_on_website": True, "add_cluster_setup_cell": True, "parameters": {"shap_enabled": "true"}, "depends_on_previous": True},
                {"path": "04-Data-Science-ML/04.3-Model-serving-realtime-inference-fraud", "title": "Infer Fraud in realtime - serverless API", "description": "Once your model is deployed, run low latency inferences.", "pre_run": True, "publish_on_website": True, "add_cluster_setup_cell": True, "parameters": {}, "depends_on_previous": True},
                {"path": "04-Data-Science-ML/04.4-Upgrade-to-imbalance-and-xgboost-model-fraud", "title": "Upgrade our model to XGboost", "description": "Improve AutoML model to handle imbalanced data.", "pre_run": True, "publish_on_website": True, "add_cluster_setup_cell": True, "parameters": {}, "depends_on_previous": True},
                {"path": "04-Data-Science-ML/04.5-AB-testing-model-serving-fraud", "title": "Roll-out our new model with A/B testing.", "description": "Deploy the new model comparing its performance with the previous one.", "pre_run": True, "publish_on_website": True, "add_cluster_setup_cell": True, "parameters": {}, "depends_on_previous": True},
                {"path": "05-Workflow-orchestration/05-Workflow-orchestration-fsi-fraud", "title": "Orchestrate churn prevention with Workflow", "description": "Orchestrate all tasks in a job and schedule your data/model refresh", "pre_run": False, "publish_on_website": True, "add_cluster_setup_cell": False, "parameters": {}, "depends_on_previous": True},
                {"path": "_resources/00-global-setup", "title": "Global init", "description": "Global init", "pre_run": False, "publish_on_website": False, "add_cluster_setup_cell": False, "parameters": {}, "depends_on_previous": True}]

    notebooks = [DemoNotebook(n['path'], n['title'], n['description'], n['pre_run'], n['publish_on_website'], n['add_cluster_setup_cell'], n['parameters'], n['depends_on_previous']) for n in notebooks]

    job_id=720149424775058
    run_id=120544375
    cluster_id="0320-175126-exzit1ks"
    cluster_name="dbdemos-lakehouse-fsi-fraud-quentin_ambard"
    pipelines_ids= [{"name": "dbdemos-fsi-fraud-detection", "uid": "30177e65-8729-4363-9e9c-7bff51caddc3", "id": "dlt-fsi-fraud", "run_after_creation": True}]
    dashboards=[{"id": "9fc6a3bb-ff36-4e06-b5f9-912d7e77dc05", "name": "FSI Fraud Detection - dbdemos", "uid": "e1fa43f0-865d-4f5b-b884-64806fe2526a"}]
    workflows= []

    from pathlib import Path
    html = installer.get_install_result_html(demo_name, description, title, install_path, notebooks, job_id, run_id, cluster_id, cluster_name, pipelines_ids, dashboards, workflows)
    with open("./test2.html", "w") as text_file:
        text_file.write(html)
    print(html)

def test_list():
    i = Installer("test","test","test","test","test","test")
    dbdemos.list_demos(None, i)

def test_list_html():
    deprecated_demos = ["uc-04-audit-log", "llm-dolly-chatbot"]
    installer = Installer("http://localhost", pat_token="test")
    from collections import defaultdict
    demos = defaultdict(lambda: [])
    
    #Define category order
    demos["lakehouse"] = []
    for demo in installer.get_demos_available():
        conf = installer.get_demo_conf(demo)
        if len(demos[conf.category]) == 0:
            demos[conf.category].append(conf)
    content = dbdemos.get_html_list_demos(demos)
    with open("./test_list_html.html", "w") as text_file:
        text_file.write(content)
    print(content)


#test_list_html()
#test_list()
#test_html()