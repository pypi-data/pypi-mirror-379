{"name": "computer-vision-pcb", "category": "data-science", "title": "Image classification - Fault detection", "custom_schema_supported": true, "default_catalog": "main", "default_schema": "dbdemos_computer_vision_dl", "description": "Deep Learning using Databricks Lakehouse: detect faults in PCBs with Hugging Face transformers and PyTorch Lightning.", "fullDescription": "Being able to analyze factory faults in real time is a critical task to increase production line quality and reducing defects.<br/>Implementing such a use case with deep learning for computer vision can be challenging at scale, especially when it comes to data preprocessing and building production-grade pipelines.<br/>Databricks simplifies this process end to end, making all the operational tasks simple so that you can focus on improving the model performance.<br/>In this demo, we will cover how to implement a complete deep learning pipeline to detect printed circuit board (PCB) defaults, from the image ingestion to real-time inferences (over REST API):<br /><br/><br/><ul><li>Simplify data and image ingestions using Databricks Auto Loader and Delta Lake</li><li>Learn how to do image preprocessing at scale</li><li>Train and deploy a computer vision pipeline with Hugging Face and the new Spark DataFrame data set for transformers</li><li>Deploy the pipeline for batch or streaming inferences and real-time serving with Databricks Serverless model endpoints</li><li>Understand which pixels are flagged as damaged PCBs to highlight potential default</li><li>A complete training and inference example using PyTorch Lightning if the Hugging Face library isn\u2019t enough for your requirements, including deltatorch and distributed training with TorchDistributor</li></ul>", "usecase": "Data Science & AI", "products": ["Feature Store", "MLFLow", "Auto ML"], "related_links": [{"title": "View all Product demos", "url": "<TBD: LINK TO A FILTER WITH ALL DBDEMOS CONTENT>"}, {"title": "Implement a Vision Language Model from Scratch", "url": "https://huggingface.co/blog/AviSoori1x/seemore-vision-language-model"}], "recommended_items": ["llm-dolly-chatbot", "pandas-on-spark", "mlops-end2end"], "demo_assets": [], "bundle": true, "tags": [{"ds": "Data Science"}], "notebooks": [{"path": "_resources/00-init", "pre_run": false, "publish_on_website": false, "add_cluster_setup_cell": false, "title": "Setup", "description": "Init data for demo.", "object_type": "NOTEBOOK"}, {"path": "_resources/01-load-data", "pre_run": false, "publish_on_website": false, "add_cluster_setup_cell": false, "title": "Setup", "description": "Load demo dataset.", "object_type": "NOTEBOOK"}, {"path": "00-introduction-deep-learning-vision", "pre_run": false, "publish_on_website": true, "add_cluster_setup_cell": false, "title": "Computer Vision - Introduction", "description": "Start here to build your Deep Learning pipeline", "object_type": "NOTEBOOK"}, {"path": "config", "pre_run": false, "publish_on_website": false, "add_cluster_setup_cell": false, "title": "Configuration file", "description": "Setup database and schema", "object_type": "NOTEBOOK"}, {"path": "01-ingestion-and-ETL", "pre_run": true, "publish_on_website": true, "add_cluster_setup_cell": true, "title": "Images ingestion and preparation", "description": "Data pipeline to ingest and prepare training dataset"}, {"path": "02-huggingface-model-training", "pre_run": true, "publish_on_website": true, "add_cluster_setup_cell": true, "title": "Model Training with Hugging Face", "description": "Build, fine tune and deploy your transformers pipeline"}, {"path": "03-running-cv-inferences", "pre_run": true, "publish_on_website": true, "add_cluster_setup_cell": true, "title": "Deploy the pipeline for inference", "description": "Run batch/streaming or realtime inference (Model Endpoint)"}, {"path": "04-explaining-inference", "pre_run": true, "publish_on_website": true, "add_cluster_setup_cell": true, "title": "Hihlight default in PCB image", "description": "Add model explainer to highglight pixels having a potential default"}, {"path": "05-torch-lightning-training-and-inference", "pre_run": false, "publish_on_website": true, "add_cluster_setup_cell": true, "title": "Train & deploy a Pytorch Lightning", "description": "Extra example to train torch model, distributing on multiple node.", "object_type": "NOTEBOOK"}, {"path": "_resources/00-global-setup-v2", "title": "Global init", "description": "Global init", "pre_run": false, "publish_on_website": false, "add_cluster_setup_cell": false, "parameters": {}, "depends_on_previous": true, "libraries": [], "warehouse_id": null, "object_type": null}], "cluster": {"num_workers": 0, "spark_conf": {"spark.master": "local[*, 4]"}, "spark_version": "16.4.x-scala2.12", "single_user_name": "{{CURRENT_USER}}", "data_security_mode": "SINGLE_USER"}}