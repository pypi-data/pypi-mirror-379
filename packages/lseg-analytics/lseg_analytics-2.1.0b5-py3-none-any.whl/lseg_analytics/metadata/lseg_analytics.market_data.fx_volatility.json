[
    {
        "type": "ClassChunk",
        "name": "BidAskMid",
        "id": "lseg_analytics.market_data.fx_volatility.BidAskMid",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "ask",
                "type": "float"
            },
            {
                "name": "bid",
                "type": "float"
            },
            {
                "name": "mid",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 1869,
        "content": "class BidAskMid:\n    \"\"\"BidAskMid.\n\n    Attributes\n    ----------\n    ask : float\n    bid : float\n    mid : float\n    \n    \"\"\"\n    ask: typing.Optional[float]\n    bid: typing.Optional[float]\n    mid: typing.Optional[float]",
        "metadata": {
            "doc": "BidAskMid.\n\n    Attributes\n    ----------\n    ask : float\n    bid : float\n    mid : float\n    \n",
            "annotations": "    ask: typing.Optional[float]\n    bid: typing.Optional[float]\n    mid: typing.Optional[float]",
            "signature": "class BidAskMid:\n    \"\"\"\"\"\"\n    ask: typing.Optional[float]\n    bid: typing.Optional[float]\n    mid: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.fx_volatility.BidAskMid.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "BidAskMid.__init__",
        "id": "lseg_analytics.market_data.fx_volatility.BidAskMid.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 1901,
        "content": "class BidAskMid:\n    @overload\n    def __init__(self, *, ask: Optional[float] = None, bid: Optional[float] = None, mid: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "BidAskMid"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.fx_volatility.BidAskMid"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesFxSwapCalculationMethodEnum",
        "id": "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesFxSwapCalculationMethodEnum",
        "content": "class CurvesAndSurfacesFxSwapCalculationMethodEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesFxSwapCalculationMethodEnum.\"\"\"\n\n    DEPOSIT_CCY1_IMPLIED_FROM_FX_SWAP = \"DepositCcy1ImpliedFromFxSwap\"\n    DEPOSIT_CCY2_IMPLIED_FROM_FX_SWAP = \"DepositCcy2ImpliedFromFxSwap\"\n    FX_SWAP = \"FxSwap\"\n    FX_SWAP_IMPLIED_FROM_DEPOSIT = \"FxSwapImpliedFromDeposit\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesFxSwapCalculationMethodEnum.\n",
            "members": [
                "CurvesAndSurfacesFxSwapCalculationMethodEnum.DEPOSIT_CCY1_IMPLIED_FROM_FX_SWAP = 'DepositCcy1ImpliedFromFxSwap'",
                "CurvesAndSurfacesFxSwapCalculationMethodEnum.DEPOSIT_CCY2_IMPLIED_FROM_FX_SWAP = 'DepositCcy2ImpliedFromFxSwap'",
                "CurvesAndSurfacesFxSwapCalculationMethodEnum.FX_SWAP = 'FxSwap'",
                "CurvesAndSurfacesFxSwapCalculationMethodEnum.FX_SWAP_IMPLIED_FROM_DEPOSIT = 'FxSwapImpliedFromDeposit'"
            ],
            "signature": "class CurvesAndSurfacesFxSwapCalculationMethodEnum(Enum):\n    \"\"\"\"\"\"\n    DEPOSIT_CCY1_IMPLIED_FROM_FX_SWAP = 'DepositCcy1ImpliedFromFxSwap'\n    DEPOSIT_CCY2_IMPLIED_FROM_FX_SWAP = 'DepositCcy2ImpliedFromFxSwap'\n    FX_SWAP = 'FxSwap'\n    FX_SWAP_IMPLIED_FROM_DEPOSIT = 'FxSwapImpliedFromDeposit'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesPriceSideEnum",
        "id": "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesPriceSideEnum",
        "content": "class CurvesAndSurfacesPriceSideEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesPriceSideEnum.\"\"\"\n\n    ASK = \"Ask\"\n    BID = \"Bid\"\n    LAST = \"Last\"\n    MID = \"Mid\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesPriceSideEnum.\n",
            "members": [
                "CurvesAndSurfacesPriceSideEnum.ASK = 'Ask'",
                "CurvesAndSurfacesPriceSideEnum.BID = 'Bid'",
                "CurvesAndSurfacesPriceSideEnum.LAST = 'Last'",
                "CurvesAndSurfacesPriceSideEnum.MID = 'Mid'"
            ],
            "signature": "class CurvesAndSurfacesPriceSideEnum(Enum):\n    \"\"\"\"\"\"\n    ASK = 'Ask'\n    BID = 'Bid'\n    LAST = 'Last'\n    MID = 'Mid'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesTimeStampEnum",
        "id": "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesTimeStampEnum",
        "content": "class CurvesAndSurfacesTimeStampEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesTimeStampEnum.\"\"\"\n\n    CLOSE = \"Close\"\n    DEFAULT = \"Default\"\n    OPEN = \"Open\"\n    SETTLE = \"Settle\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesTimeStampEnum.\n",
            "members": [
                "CurvesAndSurfacesTimeStampEnum.CLOSE = 'Close'",
                "CurvesAndSurfacesTimeStampEnum.DEFAULT = 'Default'",
                "CurvesAndSurfacesTimeStampEnum.OPEN = 'Open'",
                "CurvesAndSurfacesTimeStampEnum.SETTLE = 'Settle'"
            ],
            "signature": "class CurvesAndSurfacesTimeStampEnum(Enum):\n    \"\"\"\"\"\"\n    CLOSE = 'Close'\n    DEFAULT = 'Default'\n    OPEN = 'Open'\n    SETTLE = 'Settle'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesUnderlyingTypeEnum",
        "id": "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesUnderlyingTypeEnum",
        "content": "class CurvesAndSurfacesUnderlyingTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesUnderlyingTypeEnum.\"\"\"\n\n    CAP = \"Cap\"\n    ETI = \"Eti\"\n    FX = \"Fx\"\n    SWAPTION = \"Swaption\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesUnderlyingTypeEnum.\n",
            "members": [
                "CurvesAndSurfacesUnderlyingTypeEnum.CAP = 'Cap'",
                "CurvesAndSurfacesUnderlyingTypeEnum.ETI = 'Eti'",
                "CurvesAndSurfacesUnderlyingTypeEnum.FX = 'Fx'",
                "CurvesAndSurfacesUnderlyingTypeEnum.SWAPTION = 'Swaption'"
            ],
            "signature": "class CurvesAndSurfacesUnderlyingTypeEnum(Enum):\n    \"\"\"\"\"\"\n    CAP = 'Cap'\n    ETI = 'Eti'\n    FX = 'Fx'\n    SWAPTION = 'Swaption'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesVolatilityModelEnum",
        "id": "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesVolatilityModelEnum",
        "content": "class CurvesAndSurfacesVolatilityModelEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesVolatilityModelEnum.\"\"\"\n\n    CUBIC_SPLINE = \"CubicSpline\"\n    SABR = \"SABR\"\n    SSVI = \"SSVI\"\n    SVI = \"SVI\"\n    TWIN_LOGNORMAL = \"TwinLognormal\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesVolatilityModelEnum.\n",
            "members": [
                "CurvesAndSurfacesVolatilityModelEnum.CUBIC_SPLINE = 'CubicSpline'",
                "CurvesAndSurfacesVolatilityModelEnum.SABR = 'SABR'",
                "CurvesAndSurfacesVolatilityModelEnum.SSVI = 'SSVI'",
                "CurvesAndSurfacesVolatilityModelEnum.SVI = 'SVI'",
                "CurvesAndSurfacesVolatilityModelEnum.TWIN_LOGNORMAL = 'TwinLognormal'"
            ],
            "signature": "class CurvesAndSurfacesVolatilityModelEnum(Enum):\n    \"\"\"\"\"\"\n    CUBIC_SPLINE = 'CubicSpline'\n    SABR = 'SABR'\n    SSVI = 'SSVI'\n    SVI = 'SVI'\n    TWIN_LOGNORMAL = 'TwinLognormal'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "DayWeight",
        "id": "lseg_analytics.market_data.fx_volatility.DayWeight",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "date",
                "type": "datetime"
            },
            {
                "name": "weight",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 24762,
        "content": "class DayWeight:\n    \"\"\"DayWeight.\n\n    Attributes\n    ----------\n    date : ~datetime.datetime\n    weight : float\n    \n    \"\"\"\n    date: typing.Optional[datetime.datetime]\n    weight: typing.Optional[float]",
        "metadata": {
            "doc": "DayWeight.\n\n    Attributes\n    ----------\n    date : ~datetime.datetime\n    weight : float\n    \n",
            "annotations": "    date: typing.Optional[datetime.datetime]\n    weight: typing.Optional[float]",
            "signature": "class DayWeight:\n    \"\"\"\"\"\"\n    date: typing.Optional[datetime.datetime]\n    weight: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.fx_volatility.DayWeight.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "DayWeight.__init__",
        "id": "lseg_analytics.market_data.fx_volatility.DayWeight.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 24791,
        "content": "class DayWeight:\n    @overload\n    def __init__(self, *, date: Optional[datetime.datetime] = None, weight: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "DayWeight"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.fx_volatility.DayWeight"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "FormatEnum",
        "id": "lseg_analytics.market_data.fx_volatility.FormatEnum",
        "content": "class FormatEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of FormatEnum.\"\"\"\n\n    LIST = \"List\"\n    MATRIX = \"Matrix\"\n    NDIMENSIONAL_ARRAY = \"NDimensionalArray\"\n",
        "metadata": {
            "doc": "Type of FormatEnum.\n",
            "members": [
                "FormatEnum.LIST = 'List'",
                "FormatEnum.MATRIX = 'Matrix'",
                "FormatEnum.NDIMENSIONAL_ARRAY = 'NDimensionalArray'"
            ],
            "signature": "class FormatEnum(Enum):\n    \"\"\"\"\"\"\n    LIST = 'List'\n    MATRIX = 'Matrix'\n    NDIMENSIONAL_ARRAY = 'NDimensionalArray'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "FxVolatilityPricingParameters",
        "id": "lseg_analytics.market_data.fx_volatility.FxVolatilityPricingParameters",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "atm_volatility_object",
                "type": "BidAskMid"
            },
            {
                "name": "butterfly10_dobject",
                "type": "BidAskMid"
            },
            {
                "name": "butterfly25_dobject",
                "type": "BidAskMid"
            },
            {
                "name": "calculation_date",
                "type": "datetime"
            },
            {
                "name": "cutoff_time",
                "type": "str"
            },
            {
                "name": "cutoff_time_zone",
                "type": "str"
            },
            {
                "name": "domestic_deposit_rate_percent_object",
                "type": "BidAskMid"
            },
            {
                "name": "foreign_deposit_rate_percent_object",
                "type": "BidAskMid"
            },
            {
                "name": "forward_points_object",
                "type": "BidAskMid"
            },
            {
                "name": "fx_spot_object",
                "type": "BidAskMid"
            },
            {
                "name": "fx_swap_calculation_method",
                "type": "CurvesAndSurfacesFxSwapCalculationMethodEnum",
                "valuelookup": "enum.CurvesAndSurfacesFxSwapCalculationMethodEnum"
            },
            {
                "name": "implied_volatility_object",
                "type": "BidAskMid"
            },
            {
                "name": "interpolation_weight",
                "type": "InterpolationWeight"
            },
            {
                "name": "price_side",
                "type": "CurvesAndSurfacesPriceSideEnum",
                "valuelookup": "enum.CurvesAndSurfacesPriceSideEnum"
            },
            {
                "name": "risk_reversal10_dobject",
                "type": "BidAskMid"
            },
            {
                "name": "risk_reversal25_dobject",
                "type": "BidAskMid"
            },
            {
                "name": "time_stamp",
                "type": "CurvesAndSurfacesTimeStampEnum",
                "valuelookup": "enum.CurvesAndSurfacesTimeStampEnum"
            },
            {
                "name": "volatility_model",
                "type": "CurvesAndSurfacesVolatilityModelEnum",
                "valuelookup": "enum.CurvesAndSurfacesVolatilityModelEnum"
            },
            {
                "name": "x_axis",
                "type": "XAxisEnum",
                "valuelookup": "enum.XAxisEnum"
            },
            {
                "name": "y_axis",
                "type": "YAxisEnum",
                "valuelookup": "enum.YAxisEnum"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 34007,
        "content": "class FxVolatilityPricingParameters:\n    \"\"\"FxVolatilityPricingParameters.\n\n    Attributes\n    ----------\n    atm_volatility_object : ~analyticsapi.models.BidAskMid\n    butterfly10_dobject : ~analyticsapi.models.BidAskMid\n    butterfly25_dobject : ~analyticsapi.models.BidAskMid\n    calculation_date : ~datetime.datetime\n        The date the volatility surface is generated.\n    cutoff_time : str\n        The cutoff time.\n    cutoff_time_zone : str\n        The cutoff time zone.\n    domestic_deposit_rate_percent_object : ~analyticsapi.models.BidAskMid\n    foreign_deposit_rate_percent_object : ~analyticsapi.models.BidAskMid\n    forward_points_object : ~analyticsapi.models.BidAskMid\n    fx_spot_object : ~analyticsapi.models.BidAskMid\n    fx_swap_calculation_method : str or ~analyticsapi.models.CurvesAndSurfacesFxSwapCalculationMethodEnum\n        The method we chose to price outrights using or not implied deposits.\n        Possible values are: FxSwap (compute outrights using swap points),\n        DepositCcy1ImpliedFromFxSwap (compute currency1 deposits using swap\n        points), DepositCcy2ImpliedFromFxSwap (compute currency2 deposits using\n        swap points). Optional. Defaults to 'FxSwap'. Known values are:\n        \"DepositCcy1ImpliedFromFxSwap\", \"DepositCcy2ImpliedFromFxSwap\",\n        \"FxSwap\", and \"FxSwapImpliedFromDeposit\".\n    implied_volatility_object : ~analyticsapi.models.BidAskMid\n    interpolation_weight : ~analyticsapi.models.InterpolationWeight\n    price_side : str or ~analyticsapi.models.CurvesAndSurfacesPriceSideEnum\n        Specifies whether bid, ask, mid or settle is used to build the surface.\n        If not precised, default to mid. Known values are: \"Ask\", \"Bid\",\n        \"Last\", and \"Mid\".\n    risk_reversal10_dobject : ~analyticsapi.models.BidAskMid\n    risk_reversal25_dobject : ~analyticsapi.models.BidAskMid\n    time_stamp : str or ~analyticsapi.models.CurvesAndSurfacesTimeStampEnum\n        Define how the timestamp is selected:\n\n        * Open: the opening value of the valuationDate or if not available the close of the previous\n        day is used.\n        * Default: the latest snapshot is used when valuationDate is today, the close price when\n        valuationDate is in the past. Known values are: \"Close\", \"Default\", \"Open\", and \"Settle\".\n    volatility_model : str or ~analyticsapi.models.CurvesAndSurfacesVolatilityModelEnum\n        The quantitative model used to generate the volatility surface. This\n        may depend on the asset class. For Fx Volatility Surface, we currently\n        support the SVI model. Known values are: \"CubicSpline\", \"SABR\", \"SSVI\",\n        \"SVI\", and \"TwinLognormal\".\n    x_axis : str or ~analyticsapi.models.XAxisEnum\n        Specifies the unit for the x axis (e.g. Date, Tenor). Known values are:\n        \"Date\", \"Delta\", \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    y_axis : str or ~analyticsapi.models.YAxisEnum\n        Specifies the unit for the y axis (e.g. Strike, Delta). This may depend\n        on the asset class. For Fx Volatility Surface, we support both Delta\n        and Strike. Known values are: \"Date\", \"Delta\", \"Expiry\", \"Moneyness\",\n        \"Strike\", and \"Tenor\".\n    \n    \"\"\"\n    atm_volatility_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    butterfly10_dobject: typing.Optional[ForwardRef('_models.BidAskMid')]\n    butterfly25_dobject: typing.Optional[ForwardRef('_models.BidAskMid')]\n    calculation_date: typing.Optional[datetime.datetime]\n    cutoff_time: typing.Optional[str]\n    cutoff_time_zone: typing.Optional[str]\n    domestic_deposit_rate_percent_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    foreign_deposit_rate_percent_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    forward_points_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    fx_spot_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    fx_swap_calculation_method: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesFxSwapCalculationMethodEnum'), NoneType]\n    implied_volatility_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    interpolation_weight: typing.Optional[ForwardRef('_models.InterpolationWeight')]\n    price_side: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType]\n    risk_reversal10_dobject: typing.Optional[ForwardRef('_models.BidAskMid')]\n    risk_reversal25_dobject: typing.Optional[ForwardRef('_models.BidAskMid')]\n    time_stamp: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType]\n    volatility_model: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesVolatilityModelEnum'), NoneType]\n    x_axis: typing.Union[str, ForwardRef('_models.XAxisEnum'), NoneType]\n    y_axis: typing.Union[str, ForwardRef('_models.YAxisEnum'), NoneType]",
        "metadata": {
            "doc": "FxVolatilityPricingParameters.\n\n    Attributes\n    ----------\n    atm_volatility_object : ~analyticsapi.models.BidAskMid\n    butterfly10_dobject : ~analyticsapi.models.BidAskMid\n    butterfly25_dobject : ~analyticsapi.models.BidAskMid\n    calculation_date : ~datetime.datetime\n        The date the volatility surface is generated.\n    cutoff_time : str\n        The cutoff time.\n    cutoff_time_zone : str\n        The cutoff time zone.\n    domestic_deposit_rate_percent_object : ~analyticsapi.models.BidAskMid\n    foreign_deposit_rate_percent_object : ~analyticsapi.models.BidAskMid\n    forward_points_object : ~analyticsapi.models.BidAskMid\n    fx_spot_object : ~analyticsapi.models.BidAskMid\n    fx_swap_calculation_method : str or ~analyticsapi.models.CurvesAndSurfacesFxSwapCalculationMethodEnum\n        The method we chose to price outrights using or not implied deposits.\n        Possible values are: FxSwap (compute outrights using swap points),\n        DepositCcy1ImpliedFromFxSwap (compute currency1 deposits using swap\n        points), DepositCcy2ImpliedFromFxSwap (compute currency2 deposits using\n        swap points). Optional. Defaults to 'FxSwap'. Known values are:\n        \"DepositCcy1ImpliedFromFxSwap\", \"DepositCcy2ImpliedFromFxSwap\",\n        \"FxSwap\", and \"FxSwapImpliedFromDeposit\".\n    implied_volatility_object : ~analyticsapi.models.BidAskMid\n    interpolation_weight : ~analyticsapi.models.InterpolationWeight\n    price_side : str or ~analyticsapi.models.CurvesAndSurfacesPriceSideEnum\n        Specifies whether bid, ask, mid or settle is used to build the surface.\n        If not precised, default to mid. Known values are: \"Ask\", \"Bid\",\n        \"Last\", and \"Mid\".\n    risk_reversal10_dobject : ~analyticsapi.models.BidAskMid\n    risk_reversal25_dobject : ~analyticsapi.models.BidAskMid\n    time_stamp : str or ~analyticsapi.models.CurvesAndSurfacesTimeStampEnum\n        Define how the timestamp is selected:\n\n        * Open: the opening value of the valuationDate or if not available the close of the previous\n        day is used.\n        * Default: the latest snapshot is used when valuationDate is today, the close price when\n        valuationDate is in the past. Known values are: \"Close\", \"Default\", \"Open\", and \"Settle\".\n    volatility_model : str or ~analyticsapi.models.CurvesAndSurfacesVolatilityModelEnum\n        The quantitative model used to generate the volatility surface. This\n        may depend on the asset class. For Fx Volatility Surface, we currently\n        support the SVI model. Known values are: \"CubicSpline\", \"SABR\", \"SSVI\",\n        \"SVI\", and \"TwinLognormal\".\n    x_axis : str or ~analyticsapi.models.XAxisEnum\n        Specifies the unit for the x axis (e.g. Date, Tenor). Known values are:\n        \"Date\", \"Delta\", \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    y_axis : str or ~analyticsapi.models.YAxisEnum\n        Specifies the unit for the y axis (e.g. Strike, Delta). This may depend\n        on the asset class. For Fx Volatility Surface, we support both Delta\n        and Strike. Known values are: \"Date\", \"Delta\", \"Expiry\", \"Moneyness\",\n        \"Strike\", and \"Tenor\".\n    \n",
            "annotations": "    atm_volatility_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    butterfly10_dobject: typing.Optional[ForwardRef('_models.BidAskMid')]\n    butterfly25_dobject: typing.Optional[ForwardRef('_models.BidAskMid')]\n    calculation_date: typing.Optional[datetime.datetime]\n    cutoff_time: typing.Optional[str]\n    cutoff_time_zone: typing.Optional[str]\n    domestic_deposit_rate_percent_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    foreign_deposit_rate_percent_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    forward_points_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    fx_spot_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    fx_swap_calculation_method: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesFxSwapCalculationMethodEnum'), NoneType]\n    implied_volatility_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    interpolation_weight: typing.Optional[ForwardRef('_models.InterpolationWeight')]\n    price_side: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType]\n    risk_reversal10_dobject: typing.Optional[ForwardRef('_models.BidAskMid')]\n    risk_reversal25_dobject: typing.Optional[ForwardRef('_models.BidAskMid')]\n    time_stamp: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType]\n    volatility_model: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesVolatilityModelEnum'), NoneType]\n    x_axis: typing.Union[str, ForwardRef('_models.XAxisEnum'), NoneType]\n    y_axis: typing.Union[str, ForwardRef('_models.YAxisEnum'), NoneType]",
            "signature": "class FxVolatilityPricingParameters:\n    \"\"\"\"\"\"\n    atm_volatility_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    butterfly10_dobject: typing.Optional[ForwardRef('_models.BidAskMid')]\n    butterfly25_dobject: typing.Optional[ForwardRef('_models.BidAskMid')]\n    calculation_date: typing.Optional[datetime.datetime]\n    cutoff_time: typing.Optional[str]\n    cutoff_time_zone: typing.Optional[str]\n    domestic_deposit_rate_percent_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    foreign_deposit_rate_percent_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    forward_points_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    fx_spot_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    fx_swap_calculation_method: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesFxSwapCalculationMethodEnum'), NoneType]\n    implied_volatility_object: typing.Optional[ForwardRef('_models.BidAskMid')]\n    interpolation_weight: typing.Optional[ForwardRef('_models.InterpolationWeight')]\n    price_side: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType]\n    risk_reversal10_dobject: typing.Optional[ForwardRef('_models.BidAskMid')]\n    risk_reversal25_dobject: typing.Optional[ForwardRef('_models.BidAskMid')]\n    time_stamp: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType]\n    volatility_model: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesVolatilityModelEnum'), NoneType]\n    x_axis: typing.Union[str, ForwardRef('_models.XAxisEnum'), NoneType]\n    y_axis: typing.Union[str, ForwardRef('_models.YAxisEnum'), NoneType]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.fx_volatility.FxVolatilityPricingParameters.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.fx_volatility.BidAskMid",
                "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesFxSwapCalculationMethodEnum",
                "lseg_analytics.market_data.fx_volatility.InterpolationWeight",
                "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesPriceSideEnum",
                "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesTimeStampEnum",
                "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesVolatilityModelEnum",
                "lseg_analytics.market_data.fx_volatility.XAxisEnum",
                "lseg_analytics.market_data.fx_volatility.YAxisEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "FxVolatilityPricingParameters.__init__",
        "id": "lseg_analytics.market_data.fx_volatility.FxVolatilityPricingParameters.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 34155,
        "content": "class FxVolatilityPricingParameters:\n    @overload\n    def __init__(self, *, atm_volatility_object: Optional[ForwardRef('_models.BidAskMid')] = None, butterfly10_dobject: Optional[ForwardRef('_models.BidAskMid')] = None, butterfly25_dobject: Optional[ForwardRef('_models.BidAskMid')] = None, calculation_date: Optional[datetime.datetime] = None, cutoff_time: Optional[str] = None, cutoff_time_zone: Optional[str] = None, domestic_deposit_rate_percent_object: Optional[ForwardRef('_models.BidAskMid')] = None, foreign_deposit_rate_percent_object: Optional[ForwardRef('_models.BidAskMid')] = None, forward_points_object: Optional[ForwardRef('_models.BidAskMid')] = None, fx_spot_object: Optional[ForwardRef('_models.BidAskMid')] = None, fx_swap_calculation_method: Union[str, ForwardRef('_models.CurvesAndSurfacesFxSwapCalculationMethodEnum'), NoneType] = None, implied_volatility_object: Optional[ForwardRef('_models.BidAskMid')] = None, interpolation_weight: Optional[ForwardRef('_models.InterpolationWeight')] = None, price_side: Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType] = None, risk_reversal10_dobject: Optional[ForwardRef('_models.BidAskMid')] = None, risk_reversal25_dobject: Optional[ForwardRef('_models.BidAskMid')] = None, time_stamp: Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType] = None, volatility_model: Union[str, ForwardRef('_models.CurvesAndSurfacesVolatilityModelEnum'), NoneType] = None, x_axis: Union[str, ForwardRef('_models.XAxisEnum'), NoneType] = None, y_axis: Union[str, ForwardRef('_models.YAxisEnum'), NoneType] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "FxVolatilityPricingParameters"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.fx_volatility.FxVolatilityPricingParameters"
            ],
            "use": [
                "lseg_analytics.market_data.fx_volatility.BidAskMid",
                "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesFxSwapCalculationMethodEnum",
                "lseg_analytics.market_data.fx_volatility.InterpolationWeight",
                "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesPriceSideEnum",
                "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesTimeStampEnum",
                "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesVolatilityModelEnum",
                "lseg_analytics.market_data.fx_volatility.XAxisEnum",
                "lseg_analytics.market_data.fx_volatility.YAxisEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "FxVolatilityStatisticsParameters",
        "id": "lseg_analytics.market_data.fx_volatility.FxVolatilityStatisticsParameters",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "high_delta",
                "type": "float"
            },
            {
                "name": "low_delta",
                "type": "float"
            },
            {
                "name": "model",
                "type": "str"
            },
            {
                "name": "nb_points",
                "type": "int"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 34159,
        "content": "class FxVolatilityStatisticsParameters:\n    \"\"\"FxVolatilityStatisticsParameters.\n\n    Attributes\n    ----------\n    high_delta : float\n    low_delta : float\n    model : str\n    nb_points : int\n    \n    \"\"\"\n    high_delta: typing.Optional[float]\n    low_delta: typing.Optional[float]\n    model: typing.Optional[str]\n    nb_points: typing.Optional[int]",
        "metadata": {
            "doc": "FxVolatilityStatisticsParameters.\n\n    Attributes\n    ----------\n    high_delta : float\n    low_delta : float\n    model : str\n    nb_points : int\n    \n",
            "annotations": "    high_delta: typing.Optional[float]\n    low_delta: typing.Optional[float]\n    model: typing.Optional[str]\n    nb_points: typing.Optional[int]",
            "signature": "class FxVolatilityStatisticsParameters:\n    \"\"\"\"\"\"\n    high_delta: typing.Optional[float]\n    low_delta: typing.Optional[float]\n    model: typing.Optional[str]\n    nb_points: typing.Optional[int]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.fx_volatility.FxVolatilityStatisticsParameters.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "FxVolatilityStatisticsParameters.__init__",
        "id": "lseg_analytics.market_data.fx_volatility.FxVolatilityStatisticsParameters.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 34194,
        "content": "class FxVolatilityStatisticsParameters:\n    @overload\n    def __init__(self, *, high_delta: Optional[float] = None, low_delta: Optional[float] = None, model: Optional[str] = None, nb_points: Optional[int] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "FxVolatilityStatisticsParameters"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.fx_volatility.FxVolatilityStatisticsParameters"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "FxVolatilitySurfaceDefinition",
        "id": "lseg_analytics.market_data.fx_volatility.FxVolatilitySurfaceDefinition",
        "params": [
            {
                "name": "instrument_code",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 34198,
        "content": "class FxVolatilitySurfaceDefinition:\n    \"\"\"FxVolatilitySurfaceDefinition.\n\n    Attributes\n    ----------\n    instrument_code : str\n        The ISO code of the cross currency (e.g. 'EURCHF'). Mandatory.\n    \n    \"\"\"\n    instrument_code: typing.Optional[str]",
        "metadata": {
            "doc": "FxVolatilitySurfaceDefinition.\n\n    Attributes\n    ----------\n    instrument_code : str\n        The ISO code of the cross currency (e.g. 'EURCHF'). Mandatory.\n    \n",
            "annotations": "    instrument_code: typing.Optional[str]",
            "signature": "class FxVolatilitySurfaceDefinition:\n    \"\"\"\"\"\"\n    instrument_code: typing.Optional[str]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.fx_volatility.FxVolatilitySurfaceDefinition.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "FxVolatilitySurfaceDefinition.__init__",
        "id": "lseg_analytics.market_data.fx_volatility.FxVolatilitySurfaceDefinition.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 34226,
        "content": "class FxVolatilitySurfaceDefinition:\n    @overload\n    def __init__(self, instrument_code: Optional[str] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "FxVolatilitySurfaceDefinition"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.fx_volatility.FxVolatilitySurfaceDefinition"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "FxVolatilitySurfaceRequestItem",
        "id": "lseg_analytics.market_data.fx_volatility.FxVolatilitySurfaceRequestItem",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "surface_layout",
                "type": "SurfaceOutput"
            },
            {
                "name": "surface_parameters",
                "type": "FxVolatilityPricingParameters"
            },
            {
                "name": "surface_statistics_parameters",
                "type": "FxVolatilityStatisticsParameters"
            },
            {
                "name": "surface_tag",
                "type": "str"
            },
            {
                "name": "underlying_definition",
                "type": "FxVolatilitySurfaceDefinition"
            },
            {
                "name": "underlying_type",
                "type": "CurvesAndSurfacesUnderlyingTypeEnum",
                "valuelookup": "enum.CurvesAndSurfacesUnderlyingTypeEnum"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 34233,
        "content": "class FxVolatilitySurfaceRequestItem:\n    \"\"\"FxVolatilitySurfaceRequestItem.\n\n    Attributes\n    ----------\n    surface_layout : ~analyticsapi.models.SurfaceOutput\n    surface_parameters : ~analyticsapi.models.FxVolatilityPricingParameters\n    surface_statistics_parameters : ~analyticsapi.models.FxVolatilityStatisticsParameters\n    surface_tag : str\n    underlying_definition : ~analyticsapi.models.FxVolatilitySurfaceDefinition\n    underlying_type : str or ~analyticsapi.models.CurvesAndSurfacesUnderlyingTypeEnum\n        The type of the underlying used to generate the volatility surface.\n        Known values are: \"Cap\", \"Eti\", \"Fx\", and \"Swaption\".\n    \n    \"\"\"\n    surface_layout: typing.Optional[ForwardRef('_models.SurfaceOutput')]\n    surface_parameters: typing.Optional[ForwardRef('_models.FxVolatilityPricingParameters')]\n    surface_statistics_parameters: typing.Optional[ForwardRef('_models.FxVolatilityStatisticsParameters')]\n    surface_tag: typing.Optional[str]\n    underlying_definition: typing.Optional[ForwardRef('_models.FxVolatilitySurfaceDefinition')]\n    underlying_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType]",
        "metadata": {
            "doc": "FxVolatilitySurfaceRequestItem.\n\n    Attributes\n    ----------\n    surface_layout : ~analyticsapi.models.SurfaceOutput\n    surface_parameters : ~analyticsapi.models.FxVolatilityPricingParameters\n    surface_statistics_parameters : ~analyticsapi.models.FxVolatilityStatisticsParameters\n    surface_tag : str\n    underlying_definition : ~analyticsapi.models.FxVolatilitySurfaceDefinition\n    underlying_type : str or ~analyticsapi.models.CurvesAndSurfacesUnderlyingTypeEnum\n        The type of the underlying used to generate the volatility surface.\n        Known values are: \"Cap\", \"Eti\", \"Fx\", and \"Swaption\".\n    \n",
            "annotations": "    surface_layout: typing.Optional[ForwardRef('_models.SurfaceOutput')]\n    surface_parameters: typing.Optional[ForwardRef('_models.FxVolatilityPricingParameters')]\n    surface_statistics_parameters: typing.Optional[ForwardRef('_models.FxVolatilityStatisticsParameters')]\n    surface_tag: typing.Optional[str]\n    underlying_definition: typing.Optional[ForwardRef('_models.FxVolatilitySurfaceDefinition')]\n    underlying_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType]",
            "signature": "class FxVolatilitySurfaceRequestItem:\n    \"\"\"\"\"\"\n    surface_layout: typing.Optional[ForwardRef('_models.SurfaceOutput')]\n    surface_parameters: typing.Optional[ForwardRef('_models.FxVolatilityPricingParameters')]\n    surface_statistics_parameters: typing.Optional[ForwardRef('_models.FxVolatilityStatisticsParameters')]\n    surface_tag: typing.Optional[str]\n    underlying_definition: typing.Optional[ForwardRef('_models.FxVolatilitySurfaceDefinition')]\n    underlying_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.fx_volatility.FxVolatilitySurfaceRequestItem.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.fx_volatility.SurfaceOutput",
                "lseg_analytics.market_data.fx_volatility.FxVolatilityPricingParameters",
                "lseg_analytics.market_data.fx_volatility.FxVolatilityStatisticsParameters",
                "lseg_analytics.market_data.fx_volatility.FxVolatilitySurfaceDefinition",
                "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesUnderlyingTypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "FxVolatilitySurfaceRequestItem.__init__",
        "id": "lseg_analytics.market_data.fx_volatility.FxVolatilitySurfaceRequestItem.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 34282,
        "content": "class FxVolatilitySurfaceRequestItem:\n    @overload\n    def __init__(self, *, surface_layout: Optional[ForwardRef('_models.SurfaceOutput')] = None, surface_parameters: Optional[ForwardRef('_models.FxVolatilityPricingParameters')] = None, surface_statistics_parameters: Optional[ForwardRef('_models.FxVolatilityStatisticsParameters')] = None, surface_tag: Optional[str] = None, underlying_definition: Optional[ForwardRef('_models.FxVolatilitySurfaceDefinition')] = None, underlying_type: Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "FxVolatilitySurfaceRequestItem"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.fx_volatility.FxVolatilitySurfaceRequestItem"
            ],
            "use": [
                "lseg_analytics.market_data.fx_volatility.SurfaceOutput",
                "lseg_analytics.market_data.fx_volatility.FxVolatilityPricingParameters",
                "lseg_analytics.market_data.fx_volatility.FxVolatilityStatisticsParameters",
                "lseg_analytics.market_data.fx_volatility.FxVolatilitySurfaceDefinition",
                "lseg_analytics.market_data.fx_volatility.CurvesAndSurfacesUnderlyingTypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "InterpolationWeight",
        "id": "lseg_analytics.market_data.fx_volatility.InterpolationWeight",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "days_list",
                "type": "List[DayWeight]"
            },
            {
                "name": "holidays",
                "type": "float"
            },
            {
                "name": "week_days",
                "type": "float"
            },
            {
                "name": "week_ends",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 40864,
        "content": "class InterpolationWeight:\n    \"\"\"InterpolationWeight.\n\n    Attributes\n    ----------\n    days_list : list[~analyticsapi.models.DayWeight]\n        The default value is None, needs to be assigned before using.\n    holidays : float\n    week_days : float\n    week_ends : float\n    \n    \"\"\"\n    days_list: typing.Optional[typing.List[ForwardRef('_models.DayWeight')]]\n    holidays: typing.Optional[float]\n    week_days: typing.Optional[float]\n    week_ends: typing.Optional[float]",
        "metadata": {
            "doc": "InterpolationWeight.\n\n    Attributes\n    ----------\n    days_list : list[~analyticsapi.models.DayWeight]\n        The default value is None, needs to be assigned before using.\n    holidays : float\n    week_days : float\n    week_ends : float\n    \n",
            "annotations": "    days_list: typing.Optional[typing.List[ForwardRef('_models.DayWeight')]]\n    holidays: typing.Optional[float]\n    week_days: typing.Optional[float]\n    week_ends: typing.Optional[float]",
            "signature": "class InterpolationWeight:\n    \"\"\"\"\"\"\n    days_list: typing.Optional[typing.List[ForwardRef('_models.DayWeight')]]\n    holidays: typing.Optional[float]\n    week_days: typing.Optional[float]\n    week_ends: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.fx_volatility.InterpolationWeight.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.fx_volatility.DayWeight"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "InterpolationWeight.__init__",
        "id": "lseg_analytics.market_data.fx_volatility.InterpolationWeight.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 40900,
        "content": "class InterpolationWeight:\n    @overload\n    def __init__(self, *, days_list: Optional[List[ForwardRef('_models.DayWeight')]] = None, holidays: Optional[float] = None, week_days: Optional[float] = None, week_ends: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "InterpolationWeight"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.fx_volatility.InterpolationWeight"
            ],
            "use": [
                "lseg_analytics.market_data.fx_volatility.DayWeight"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "SurfaceOutput",
        "id": "lseg_analytics.market_data.fx_volatility.SurfaceOutput",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "data_points",
                "type": "List[VolatilitySurfacePoint]"
            },
            {
                "name": "format",
                "type": "FormatEnum",
                "valuelookup": "enum.FormatEnum"
            },
            {
                "name": "x_point_count",
                "type": "int"
            },
            {
                "name": "x_values",
                "type": "List[str]"
            },
            {
                "name": "y_point_count",
                "type": "int"
            },
            {
                "name": "y_values",
                "type": "List[str]"
            },
            {
                "name": "z_point_count",
                "type": "int"
            },
            {
                "name": "z_values",
                "type": "List[str]"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 56605,
        "content": "class SurfaceOutput:\n    \"\"\"SurfaceOutput.\n\n    Attributes\n    ----------\n    data_points : list[~analyticsapi.models.VolatilitySurfacePoint]\n        Specifies the list of specific data points to be returned.  The default\n        value is None, needs to be assigned before using.\n    format : str or ~analyticsapi.models.FormatEnum\n        Specifies whether the calculated volatilities are returned as a list or\n        a matrix. Known values are: \"List\", \"Matrix\", and \"NDimensionalArray\".\n    x_point_count : int\n        Specifies the number of values that will be generated along the x-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    x_values : list[str]\n        Specifies a list of discrete values for the x-axis.  The default value\n        is None, needs to be assigned before using.\n    y_point_count : int\n        Specifies the number of values that will be generated along the y-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    y_values : list[str]\n        Specifies a list of discrete values for the y-axis.  The default value\n        is None, needs to be assigned before using.\n    z_point_count : int\n        Specifies the number of values that will be generated along the z-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    z_values : list[str]\n        Specifies a list of discrete values for the z-axis.  The default value\n        is None, needs to be assigned before using.\n    \n    \"\"\"\n    data_points: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfacePoint')]]\n    format: typing.Union[str, ForwardRef('_models.FormatEnum'), NoneType]\n    x_point_count: typing.Optional[int]\n    x_values: typing.Optional[typing.List[str]]\n    y_point_count: typing.Optional[int]\n    y_values: typing.Optional[typing.List[str]]\n    z_point_count: typing.Optional[int]\n    z_values: typing.Optional[typing.List[str]]",
        "metadata": {
            "doc": "SurfaceOutput.\n\n    Attributes\n    ----------\n    data_points : list[~analyticsapi.models.VolatilitySurfacePoint]\n        Specifies the list of specific data points to be returned.  The default\n        value is None, needs to be assigned before using.\n    format : str or ~analyticsapi.models.FormatEnum\n        Specifies whether the calculated volatilities are returned as a list or\n        a matrix. Known values are: \"List\", \"Matrix\", and \"NDimensionalArray\".\n    x_point_count : int\n        Specifies the number of values that will be generated along the x-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    x_values : list[str]\n        Specifies a list of discrete values for the x-axis.  The default value\n        is None, needs to be assigned before using.\n    y_point_count : int\n        Specifies the number of values that will be generated along the y-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    y_values : list[str]\n        Specifies a list of discrete values for the y-axis.  The default value\n        is None, needs to be assigned before using.\n    z_point_count : int\n        Specifies the number of values that will be generated along the z-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    z_values : list[str]\n        Specifies a list of discrete values for the z-axis.  The default value\n        is None, needs to be assigned before using.\n    \n",
            "annotations": "    data_points: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfacePoint')]]\n    format: typing.Union[str, ForwardRef('_models.FormatEnum'), NoneType]\n    x_point_count: typing.Optional[int]\n    x_values: typing.Optional[typing.List[str]]\n    y_point_count: typing.Optional[int]\n    y_values: typing.Optional[typing.List[str]]\n    z_point_count: typing.Optional[int]\n    z_values: typing.Optional[typing.List[str]]",
            "signature": "class SurfaceOutput:\n    \"\"\"\"\"\"\n    data_points: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfacePoint')]]\n    format: typing.Union[str, ForwardRef('_models.FormatEnum'), NoneType]\n    x_point_count: typing.Optional[int]\n    x_values: typing.Optional[typing.List[str]]\n    y_point_count: typing.Optional[int]\n    y_values: typing.Optional[typing.List[str]]\n    z_point_count: typing.Optional[int]\n    z_values: typing.Optional[typing.List[str]]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.fx_volatility.SurfaceOutput.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.fx_volatility.VolatilitySurfacePoint",
                "lseg_analytics.market_data.fx_volatility.FormatEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "SurfaceOutput.__init__",
        "id": "lseg_analytics.market_data.fx_volatility.SurfaceOutput.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 56683,
        "content": "class SurfaceOutput:\n    @overload\n    def __init__(self, *, data_points: Optional[List[ForwardRef('_models.VolatilitySurfacePoint')]] = None, format: Union[str, ForwardRef('_models.FormatEnum'), NoneType] = None, x_point_count: Optional[int] = None, x_values: Optional[List[str]] = None, y_point_count: Optional[int] = None, y_values: Optional[List[str]] = None, z_point_count: Optional[int] = None, z_values: Optional[List[str]] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "SurfaceOutput"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.fx_volatility.SurfaceOutput"
            ],
            "use": [
                "lseg_analytics.market_data.fx_volatility.VolatilitySurfacePoint",
                "lseg_analytics.market_data.fx_volatility.FormatEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilitySurfacePoint",
        "id": "lseg_analytics.market_data.fx_volatility.VolatilitySurfacePoint",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "x",
                "type": "str"
            },
            {
                "name": "y",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62502,
        "content": "class VolatilitySurfacePoint:\n    \"\"\"VolatilitySurfacePoint.\n\n    Attributes\n    ----------\n    x : str\n        The coordinate of the volatility data point on the x-axis.\n    y : str\n        The coordinate of the volatility data point on the y-axis.\n    \n    \"\"\"\n    x: typing.Optional[str]\n    y: typing.Optional[str]",
        "metadata": {
            "doc": "VolatilitySurfacePoint.\n\n    Attributes\n    ----------\n    x : str\n        The coordinate of the volatility data point on the x-axis.\n    y : str\n        The coordinate of the volatility data point on the y-axis.\n    \n",
            "annotations": "    x: typing.Optional[str]\n    y: typing.Optional[str]",
            "signature": "class VolatilitySurfacePoint:\n    \"\"\"\"\"\"\n    x: typing.Optional[str]\n    y: typing.Optional[str]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.fx_volatility.VolatilitySurfacePoint.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilitySurfacePoint.__init__",
        "id": "lseg_analytics.market_data.fx_volatility.VolatilitySurfacePoint.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62535,
        "content": "class VolatilitySurfacePoint:\n    @overload\n    def __init__(self, *, x: Optional[str] = None, y: Optional[str] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilitySurfacePoint"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.fx_volatility.VolatilitySurfacePoint"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilitySurfaceResponse",
        "id": "lseg_analytics.market_data.fx_volatility.VolatilitySurfaceResponse",
        "params": [
            {
                "name": "data",
                "type": "List[VolatilitySurfaceResponseItem]"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62539,
        "content": "class VolatilitySurfaceResponse:\n    \"\"\"VolatilitySurfaceResponse.\n\n    Attributes\n    ----------\n    data : list[~analyticsapi.models.VolatilitySurfaceResponseItem]\n        The list of volatility surfaces that have been generated based on the\n        request.  The default value is None, needs to be assigned before using.\n    \n    \"\"\"\n    data: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfaceResponseItem')]]",
        "metadata": {
            "doc": "VolatilitySurfaceResponse.\n\n    Attributes\n    ----------\n    data : list[~analyticsapi.models.VolatilitySurfaceResponseItem]\n        The list of volatility surfaces that have been generated based on the\n        request.  The default value is None, needs to be assigned before using.\n    \n",
            "annotations": "    data: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfaceResponseItem')]]",
            "signature": "class VolatilitySurfaceResponse:\n    \"\"\"\"\"\"\n    data: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfaceResponseItem')]]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.fx_volatility.VolatilitySurfaceResponse.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.fx_volatility.VolatilitySurfaceResponseItem"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilitySurfaceResponse.__init__",
        "id": "lseg_analytics.market_data.fx_volatility.VolatilitySurfaceResponse.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62567,
        "content": "class VolatilitySurfaceResponse:\n    @overload\n    def __init__(self, data: Optional[List[ForwardRef('_models.VolatilitySurfaceResponseItem')]] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilitySurfaceResponse"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.fx_volatility.VolatilitySurfaceResponse"
            ],
            "use": [
                "lseg_analytics.market_data.fx_volatility.VolatilitySurfaceResponseItem"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilitySurfaceResponseItem",
        "id": "lseg_analytics.market_data.fx_volatility.VolatilitySurfaceResponseItem",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "discount_curve",
                "type": "Any"
            },
            {
                "name": "dividends",
                "type": "Any"
            },
            {
                "name": "forward_curve",
                "type": "Any"
            },
            {
                "name": "goodness_of_fit",
                "type": "Any"
            },
            {
                "name": "headers",
                "type": "List[str]"
            },
            {
                "name": "interest_rate_curve",
                "type": "Any"
            },
            {
                "name": "moneyness_strike",
                "type": "Any"
            },
            {
                "name": "surface",
                "type": "List[Any]"
            },
            {
                "name": "surface_tag",
                "type": "str"
            },
            {
                "name": "underlying_spot",
                "type": "Any"
            },
            {
                "name": "constituents",
                "type": "Any"
            },
            {
                "name": "description",
                "type": "Any"
            },
            {
                "name": "cross_currency_curves",
                "type": "Any"
            },
            {
                "name": "calibration_parameters",
                "type": "Any"
            },
            {
                "name": "theoritical_calls_premiums",
                "type": "Any"
            },
            {
                "name": "theoritical_puts_premiums",
                "type": "Any"
            },
            {
                "name": "theoritical_strikes",
                "type": "Any"
            },
            {
                "name": "theoretical_strikes",
                "type": "Any"
            },
            {
                "name": "expiry_dates",
                "type": "Any"
            },
            {
                "name": "surface_information",
                "type": "Any"
            },
            {
                "name": "statistics",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62574,
        "content": "class VolatilitySurfaceResponseItem:\n    \"\"\"VolatilitySurfaceResponseItem.\n\n    Attributes\n    ----------\n    discount_curve : any\n        The discount curve.\n    dividends : any\n        The dividends.\n    forward_curve : any\n        The forward curve.\n    goodness_of_fit : any\n        The goodness of fit for VolSurface.\n    headers : list[str]\n        The list of column headers that describe the columns returned in the\n        case of a \"List\" format.  The default value is None, needs to be\n        assigned before using.\n    interest_rate_curve : any\n        The Interest rate curve.\n    moneyness_strike : any\n        The strike level associated to the moneyness level for VolSurface.\n    surface : list[list[any]]\n        The actual volatility surface.  The default value is None, needs to be\n        assigned before using.\n    surface_tag : str\n        The user-defined tag provided in the request or a generated one if no\n        tag were provided.\n    underlying_spot : any\n        The Underlying Spot.\n    constituents : any\n        The constituents of the volatility surface.\n    description : any\n        A description of the volatility surface.\n    cross_currency_curves : any\n        The cross currency curves.\n    calibration_parameters : any\n        The set of inputs and model-specific variables used to fit the\n        volatility surface to observed option market data.\n    theoritical_calls_premiums : any\n        The model-based call prices derived from the calibrated volatility\n        surface.\n    theoritical_puts_premiums : any\n        The model-based put prices derived from the calibrated volatility\n        surface.\n    theoritical_strikes : any\n        Model-generated strike values.\n    theoretical_strikes : any\n        Model-generated strike values.\n    expiry_dates : any\n        A list of tenors, expiry dates, and settlement dates for each smile\n        point in a volatility surface.\n    surface_information : any\n        This output provides further information about the surface, the\n        underlying, and the constituents.\n    statistics : any\n        The parameters defining the computation of skewness and kurtosis across\n        the smiles of the surface.\n    \n    \"\"\"\n    discount_curve: typing.Optional[typing.Any]\n    dividends: typing.Optional[typing.Any]\n    forward_curve: typing.Optional[typing.Any]\n    goodness_of_fit: typing.Optional[typing.Any]\n    headers: typing.Optional[typing.List[str]]\n    interest_rate_curve: typing.Optional[typing.Any]\n    moneyness_strike: typing.Optional[typing.Any]\n    surface: typing.Optional[typing.List[typing.List[typing.Any]]]\n    surface_tag: typing.Optional[str]\n    underlying_spot: typing.Optional[typing.Any]\n    constituents: typing.Optional[typing.Any]\n    description: typing.Optional[typing.Any]\n    cross_currency_curves: typing.Optional[typing.Any]\n    calibration_parameters: typing.Optional[typing.Any]\n    theoritical_calls_premiums: typing.Optional[typing.Any]\n    theoritical_puts_premiums: typing.Optional[typing.Any]\n    theoritical_strikes: typing.Optional[typing.Any]\n    theoretical_strikes: typing.Optional[typing.Any]\n    expiry_dates: typing.Optional[typing.Any]\n    surface_information: typing.Optional[typing.Any]\n    statistics: typing.Optional[typing.Any]",
        "metadata": {
            "doc": "VolatilitySurfaceResponseItem.\n\n    Attributes\n    ----------\n    discount_curve : any\n        The discount curve.\n    dividends : any\n        The dividends.\n    forward_curve : any\n        The forward curve.\n    goodness_of_fit : any\n        The goodness of fit for VolSurface.\n    headers : list[str]\n        The list of column headers that describe the columns returned in the\n        case of a \"List\" format.  The default value is None, needs to be\n        assigned before using.\n    interest_rate_curve : any\n        The Interest rate curve.\n    moneyness_strike : any\n        The strike level associated to the moneyness level for VolSurface.\n    surface : list[list[any]]\n        The actual volatility surface.  The default value is None, needs to be\n        assigned before using.\n    surface_tag : str\n        The user-defined tag provided in the request or a generated one if no\n        tag were provided.\n    underlying_spot : any\n        The Underlying Spot.\n    constituents : any\n        The constituents of the volatility surface.\n    description : any\n        A description of the volatility surface.\n    cross_currency_curves : any\n        The cross currency curves.\n    calibration_parameters : any\n        The set of inputs and model-specific variables used to fit the\n        volatility surface to observed option market data.\n    theoritical_calls_premiums : any\n        The model-based call prices derived from the calibrated volatility\n        surface.\n    theoritical_puts_premiums : any\n        The model-based put prices derived from the calibrated volatility\n        surface.\n    theoritical_strikes : any\n        Model-generated strike values.\n    theoretical_strikes : any\n        Model-generated strike values.\n    expiry_dates : any\n        A list of tenors, expiry dates, and settlement dates for each smile\n        point in a volatility surface.\n    surface_information : any\n        This output provides further information about the surface, the\n        underlying, and the constituents.\n    statistics : any\n        The parameters defining the computation of skewness and kurtosis across\n        the smiles of the surface.\n    \n",
            "annotations": "    discount_curve: typing.Optional[typing.Any]\n    dividends: typing.Optional[typing.Any]\n    forward_curve: typing.Optional[typing.Any]\n    goodness_of_fit: typing.Optional[typing.Any]\n    headers: typing.Optional[typing.List[str]]\n    interest_rate_curve: typing.Optional[typing.Any]\n    moneyness_strike: typing.Optional[typing.Any]\n    surface: typing.Optional[typing.List[typing.List[typing.Any]]]\n    surface_tag: typing.Optional[str]\n    underlying_spot: typing.Optional[typing.Any]\n    constituents: typing.Optional[typing.Any]\n    description: typing.Optional[typing.Any]\n    cross_currency_curves: typing.Optional[typing.Any]\n    calibration_parameters: typing.Optional[typing.Any]\n    theoritical_calls_premiums: typing.Optional[typing.Any]\n    theoritical_puts_premiums: typing.Optional[typing.Any]\n    theoritical_strikes: typing.Optional[typing.Any]\n    theoretical_strikes: typing.Optional[typing.Any]\n    expiry_dates: typing.Optional[typing.Any]\n    surface_information: typing.Optional[typing.Any]\n    statistics: typing.Optional[typing.Any]",
            "signature": "class VolatilitySurfaceResponseItem:\n    \"\"\"\"\"\"\n    discount_curve: typing.Optional[typing.Any]\n    dividends: typing.Optional[typing.Any]\n    forward_curve: typing.Optional[typing.Any]\n    goodness_of_fit: typing.Optional[typing.Any]\n    headers: typing.Optional[typing.List[str]]\n    interest_rate_curve: typing.Optional[typing.Any]\n    moneyness_strike: typing.Optional[typing.Any]\n    surface: typing.Optional[typing.List[typing.List[typing.Any]]]\n    surface_tag: typing.Optional[str]\n    underlying_spot: typing.Optional[typing.Any]\n    constituents: typing.Optional[typing.Any]\n    description: typing.Optional[typing.Any]\n    cross_currency_curves: typing.Optional[typing.Any]\n    calibration_parameters: typing.Optional[typing.Any]\n    theoritical_calls_premiums: typing.Optional[typing.Any]\n    theoritical_puts_premiums: typing.Optional[typing.Any]\n    theoritical_strikes: typing.Optional[typing.Any]\n    theoretical_strikes: typing.Optional[typing.Any]\n    expiry_dates: typing.Optional[typing.Any]\n    surface_information: typing.Optional[typing.Any]\n    statistics: typing.Optional[typing.Any]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.fx_volatility.VolatilitySurfaceResponseItem.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilitySurfaceResponseItem.__init__",
        "id": "lseg_analytics.market_data.fx_volatility.VolatilitySurfaceResponseItem.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62716,
        "content": "class VolatilitySurfaceResponseItem:\n    @overload\n    def __init__(self, *, discount_curve: Optional[Any] = None, dividends: Optional[Any] = None, forward_curve: Optional[Any] = None, goodness_of_fit: Optional[Any] = None, headers: Optional[List[str]] = None, interest_rate_curve: Optional[Any] = None, moneyness_strike: Optional[Any] = None, surface: Optional[List[List[Any]]] = None, surface_tag: Optional[str] = None, underlying_spot: Optional[Any] = None, constituents: Optional[Any] = None, description: Optional[Any] = None, cross_currency_curves: Optional[Any] = None, calibration_parameters: Optional[Any] = None, theoritical_calls_premiums: Optional[Any] = None, theoritical_puts_premiums: Optional[Any] = None, theoritical_strikes: Optional[Any] = None, theoretical_strikes: Optional[Any] = None, expiry_dates: Optional[Any] = None, surface_information: Optional[Any] = None, statistics: Optional[Any] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilitySurfaceResponseItem"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.fx_volatility.VolatilitySurfaceResponseItem"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "XAxisEnum",
        "id": "lseg_analytics.market_data.fx_volatility.XAxisEnum",
        "content": "class XAxisEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of XAxisEnum.\"\"\"\n\n    DATE = \"Date\"\n    DELTA = \"Delta\"\n    EXPIRY = \"Expiry\"\n    MONEYNESS = \"Moneyness\"\n    STRIKE = \"Strike\"\n    TENOR = \"Tenor\"\n",
        "metadata": {
            "doc": "Type of XAxisEnum.\n",
            "members": [
                "XAxisEnum.DATE = 'Date'",
                "XAxisEnum.DELTA = 'Delta'",
                "XAxisEnum.EXPIRY = 'Expiry'",
                "XAxisEnum.MONEYNESS = 'Moneyness'",
                "XAxisEnum.STRIKE = 'Strike'",
                "XAxisEnum.TENOR = 'Tenor'"
            ],
            "signature": "class XAxisEnum(Enum):\n    \"\"\"\"\"\"\n    DATE = 'Date'\n    DELTA = 'Delta'\n    EXPIRY = 'Expiry'\n    MONEYNESS = 'Moneyness'\n    STRIKE = 'Strike'\n    TENOR = 'Tenor'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "YAxisEnum",
        "id": "lseg_analytics.market_data.fx_volatility.YAxisEnum",
        "content": "class YAxisEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of YAxisEnum.\"\"\"\n\n    DATE = \"Date\"\n    DELTA = \"Delta\"\n    EXPIRY = \"Expiry\"\n    MONEYNESS = \"Moneyness\"\n    STRIKE = \"Strike\"\n    TENOR = \"Tenor\"\n",
        "metadata": {
            "doc": "Type of YAxisEnum.\n",
            "members": [
                "YAxisEnum.DATE = 'Date'",
                "YAxisEnum.DELTA = 'Delta'",
                "YAxisEnum.EXPIRY = 'Expiry'",
                "YAxisEnum.MONEYNESS = 'Moneyness'",
                "YAxisEnum.STRIKE = 'Strike'",
                "YAxisEnum.TENOR = 'Tenor'"
            ],
            "signature": "class YAxisEnum(Enum):\n    \"\"\"\"\"\"\n    DATE = 'Date'\n    DELTA = 'Delta'\n    EXPIRY = 'Expiry'\n    MONEYNESS = 'Moneyness'\n    STRIKE = 'Strike'\n    TENOR = 'Tenor'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "FunctionChunk",
        "name": "calculate",
        "id": "lseg_analytics.market_data.fx_volatility.calculate",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "universe",
                "type": "List[FxVolatilitySurfaceRequestItem]"
            },
            {
                "name": "fields",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics/market_data/fx_volatility/_functions.py",
        "line_number": 61,
        "content": "def calculate(*, universe: Optional[List[FxVolatilitySurfaceRequestItem]] = None, fields: Optional[str] = None) -> VolatilitySurfaceResponse:\n    \"\"\"\n    Generates the surfaces for the definitions provided\n\n    Parameters\n    ----------\n    universe : List[FxVolatilitySurfaceRequestItem], optional\n\n    fields : str, optional\n        A parameter used to select the fields to return in response. If not provided, all fields will be returned.\n        Some usage examples:\n        1. Simply enumerating the fields, separating them by ',', e.g. 'fields=//please insert the selected fields here, e.g., field1, field2 //'\n        2. Using parentheses to indicate nesting, e.g. 'fields= //please insert the selected field and subfields here, e.g., field1(subfield1, subfield2), field2(subfield3)//\u2019\n        3. Using forward slash '/' to indicate nesting, e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1/subfield1, field1/subfield2, field2/subfield3//\u2019 (same result as example above)\n        4. Operators can even be combined (forward slashes in brackets, not the way around), e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1(subfield1/subsubfield1), field2/subfield2//'\n\n    Returns\n    --------\n    VolatilitySurfaceResponse\n\n\n    Examples\n    --------\n    >>> print(\"Step 1: Creating Surface Definition...\")\n    >>>\n    >>> currencyPair = \"EURUSD\"\n    >>>\n    >>> # Create surface definition object\n    >>> surface_definition = fxv.FxVolatilitySurfaceDefinition(\n    >>>         instrument_code = currencyPair\n    >>>         )\n    >>> print(f\"   \u2713 Instrument: {surface_definition.instrument_code}\")\n    >>>\n    >>> print(\"Step 2: Configuring Surface Parameters...\")\n    >>> surface_parameters = fxv.FxVolatilityPricingParameters(\n    >>>         calculation_date = dt.datetime.strptime(\"2025-01-18\", \"%Y-%m-%d\"),\n    >>>         volatility_model = fxv.CurvesAndSurfacesVolatilityModelEnum.SVI,  # Options: SVI, SABR, TWIN_LOGNORMAL\n    >>>         price_side = fxv.CurvesAndSurfacesPriceSideEnum.MID,              # Options: BID, MID, ASK\n    >>>         x_axis = fxv.XAxisEnum.DELTA,                                     # Options: DATE, DELTA, MONEYNESS, STRIKE, TENOR\n    >>>         y_axis = fxv.YAxisEnum.TENOR                                      # Options: same as X-axis\n    >>>     )\n    >>> print(f\"   \u2713 Surface Parameters: {surface_parameters}\")\n    >>>\n    >>>\n    >>> print(\"Step 3: Create request item...\")\n    >>> # Create the main request object  with basic configuration\n    >>> request_item = fxv.FxVolatilitySurfaceRequestItem(\n    >>>         surface_tag = f\"{currencyPair}_Volsurface\",\n    >>>         underlying_definition = surface_definition,\n    >>>         surface_parameters = surface_parameters,\n    >>>         underlying_type = fxv.CurvesAndSurfacesUnderlyingTypeEnum.FX,\n    >>>         surface_layout = fxv.SurfaceOutput(\n    >>>             format = fxv.FormatEnum.MATRIX,  # Options: LIST, MATRIX\n    >>>         )\n    >>>     )\n    >>> print(f\"   \u2713 Request Item: {request_item}\")\n    Step 1: Creating Surface Definition...\n       \u2713 Instrument: EURUSD\n    Step 2: Configuring Surface Parameters...\n       \u2713 Surface Parameters: {'calculationDate': '2025-01-18T00:00:00Z', 'volatilityModel': 'SVI', 'priceSide': 'Mid', 'xAxis': 'Delta', 'yAxis': 'Tenor'}\n    Step 3: Create request item...\n       \u2713 Request Item: {'surfaceTag': 'EURUSD_Volsurface', 'underlyingDefinition': {'instrumentCode': 'EURUSD'}, 'surfaceParameters': {'calculationDate': '2025-01-18T00:00:00Z', 'volatilityModel': 'SVI', 'priceSide': 'Mid', 'xAxis': 'Delta', 'yAxis': 'Tenor'}, 'underlyingType': 'Fx', 'surfaceLayout': {'format': 'Matrix'}}\n\n\n    >>> # Execute the calculation using the calculate function\n    >>> # The 'universe' parameter accepts a list of request items for batch processing\n    >>> try:\n    >>>     response = fxv.calculate(universe=[request_item])\n    >>>\n    >>>     # Display response structure information\n    >>>     surface_data = response['data'][0]\n    >>>     if 'surface' in surface_data:\n    >>>         print(f\"   Calculation successful!\")\n    >>>         print(f\"   Surface data points available: {len(surface_data['surface'])}\")\n    >>>     else:\n    >>>         print(\"   No surface data found in response\")\n    >>>\n    >>> except Exception as e:\n    >>>     print(f\"   Calculation failed: {str(e)}\")\n    >>>     raise\n       Calculation successful!\n       Surface data points available: 18\n\n    \n    \"\"\"",
        "metadata": {
            "doc": "\n    Generates the surfaces for the definitions provided\n\n    Parameters\n    ----------\n    universe : List[FxVolatilitySurfaceRequestItem], optional\n\n    fields : str, optional\n        A parameter used to select the fields to return in response. If not provided, all fields will be returned.\n        Some usage examples:\n        1. Simply enumerating the fields, separating them by ',', e.g. 'fields=//please insert the selected fields here, e.g., field1, field2 //'\n        2. Using parentheses to indicate nesting, e.g. 'fields= //please insert the selected field and subfields here, e.g., field1(subfield1, subfield2), field2(subfield3)//\u2019\n        3. Using forward slash '/' to indicate nesting, e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1/subfield1, field1/subfield2, field2/subfield3//\u2019 (same result as example above)\n        4. Operators can even be combined (forward slashes in brackets, not the way around), e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1(subfield1/subsubfield1), field2/subfield2//'\n\n    Returns\n    --------\n    VolatilitySurfaceResponse\n\n\n    Examples\n    --------\n    >>> print(\"Step 1: Creating Surface Definition...\")\n    >>>\n    >>> currencyPair = \"EURUSD\"\n    >>>\n    >>> # Create surface definition object\n    >>> surface_definition = fxv.FxVolatilitySurfaceDefinition(\n    >>>         instrument_code = currencyPair\n    >>>         )\n    >>> print(f\"   \u2713 Instrument: {surface_definition.instrument_code}\")\n    >>>\n    >>> print(\"Step 2: Configuring Surface Parameters...\")\n    >>> surface_parameters = fxv.FxVolatilityPricingParameters(\n    >>>         calculation_date = dt.datetime.strptime(\"2025-01-18\", \"%Y-%m-%d\"),\n    >>>         volatility_model = fxv.CurvesAndSurfacesVolatilityModelEnum.SVI,  # Options: SVI, SABR, TWIN_LOGNORMAL\n    >>>         price_side = fxv.CurvesAndSurfacesPriceSideEnum.MID,              # Options: BID, MID, ASK\n    >>>         x_axis = fxv.XAxisEnum.DELTA,                                     # Options: DATE, DELTA, MONEYNESS, STRIKE, TENOR\n    >>>         y_axis = fxv.YAxisEnum.TENOR                                      # Options: same as X-axis\n    >>>     )\n    >>> print(f\"   \u2713 Surface Parameters: {surface_parameters}\")\n    >>>\n    >>>\n    >>> print(\"Step 3: Create request item...\")\n    >>> # Create the main request object  with basic configuration\n    >>> request_item = fxv.FxVolatilitySurfaceRequestItem(\n    >>>         surface_tag = f\"{currencyPair}_Volsurface\",\n    >>>         underlying_definition = surface_definition,\n    >>>         surface_parameters = surface_parameters,\n    >>>         underlying_type = fxv.CurvesAndSurfacesUnderlyingTypeEnum.FX,\n    >>>         surface_layout = fxv.SurfaceOutput(\n    >>>             format = fxv.FormatEnum.MATRIX,  # Options: LIST, MATRIX\n    >>>         )\n    >>>     )\n    >>> print(f\"   \u2713 Request Item: {request_item}\")\n    Step 1: Creating Surface Definition...\n       \u2713 Instrument: EURUSD\n    Step 2: Configuring Surface Parameters...\n       \u2713 Surface Parameters: {'calculationDate': '2025-01-18T00:00:00Z', 'volatilityModel': 'SVI', 'priceSide': 'Mid', 'xAxis': 'Delta', 'yAxis': 'Tenor'}\n    Step 3: Create request item...\n       \u2713 Request Item: {'surfaceTag': 'EURUSD_Volsurface', 'underlyingDefinition': {'instrumentCode': 'EURUSD'}, 'surfaceParameters': {'calculationDate': '2025-01-18T00:00:00Z', 'volatilityModel': 'SVI', 'priceSide': 'Mid', 'xAxis': 'Delta', 'yAxis': 'Tenor'}, 'underlyingType': 'Fx', 'surfaceLayout': {'format': 'Matrix'}}\n\n\n    >>> # Execute the calculation using the calculate function\n    >>> # The 'universe' parameter accepts a list of request items for batch processing\n    >>> try:\n    >>>     response = fxv.calculate(universe=[request_item])\n    >>>\n    >>>     # Display response structure information\n    >>>     surface_data = response['data'][0]\n    >>>     if 'surface' in surface_data:\n    >>>         print(f\"   Calculation successful!\")\n    >>>         print(f\"   Surface data points available: {len(surface_data['surface'])}\")\n    >>>     else:\n    >>>         print(\"   No surface data found in response\")\n    >>>\n    >>> except Exception as e:\n    >>>     print(f\"   Calculation failed: {str(e)}\")\n    >>>     raise\n       Calculation successful!\n       Surface data points available: 18\n\n    \n",
            "signature": "def calculate(*, universe: Optional[List[FxVolatilitySurfaceRequestItem]] = None, fields: Optional[str] = None) -> VolatilitySurfaceResponse:"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.fx_volatility.FxVolatilitySurfaceRequestItem",
                "lseg_analytics.market_data.fx_volatility.VolatilitySurfaceResponse"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.fx_volatility",
        "module_version": "2.1.0b5"
    }
]