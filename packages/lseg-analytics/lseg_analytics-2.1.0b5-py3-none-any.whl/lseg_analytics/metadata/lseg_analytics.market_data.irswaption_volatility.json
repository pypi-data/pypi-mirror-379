[
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesCalibrationTypeEnum",
        "id": "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesCalibrationTypeEnum",
        "content": "class CurvesAndSurfacesCalibrationTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesCalibrationTypeEnum.\"\"\"\n\n    ALTERNATE_CONJUGATE_GRADIENT = \"AlternateConjugateGradient\"\n    CONJUGATE_GRADIENT = \"ConjugateGradient\"\n    POWELL = \"Powell\"\n    SIMPLEX_NELDER_MEAD = \"SimplexNelderMead\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesCalibrationTypeEnum.\n",
            "members": [
                "CurvesAndSurfacesCalibrationTypeEnum.ALTERNATE_CONJUGATE_GRADIENT = 'AlternateConjugateGradient'",
                "CurvesAndSurfacesCalibrationTypeEnum.CONJUGATE_GRADIENT = 'ConjugateGradient'",
                "CurvesAndSurfacesCalibrationTypeEnum.POWELL = 'Powell'",
                "CurvesAndSurfacesCalibrationTypeEnum.SIMPLEX_NELDER_MEAD = 'SimplexNelderMead'"
            ],
            "signature": "class CurvesAndSurfacesCalibrationTypeEnum(Enum):\n    \"\"\"\"\"\"\n    ALTERNATE_CONJUGATE_GRADIENT = 'AlternateConjugateGradient'\n    CONJUGATE_GRADIENT = 'ConjugateGradient'\n    POWELL = 'Powell'\n    SIMPLEX_NELDER_MEAD = 'SimplexNelderMead'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesPriceSideEnum",
        "id": "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesPriceSideEnum",
        "content": "class CurvesAndSurfacesPriceSideEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesPriceSideEnum.\"\"\"\n\n    ASK = \"Ask\"\n    BID = \"Bid\"\n    LAST = \"Last\"\n    MID = \"Mid\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesPriceSideEnum.\n",
            "members": [
                "CurvesAndSurfacesPriceSideEnum.ASK = 'Ask'",
                "CurvesAndSurfacesPriceSideEnum.BID = 'Bid'",
                "CurvesAndSurfacesPriceSideEnum.LAST = 'Last'",
                "CurvesAndSurfacesPriceSideEnum.MID = 'Mid'"
            ],
            "signature": "class CurvesAndSurfacesPriceSideEnum(Enum):\n    \"\"\"\"\"\"\n    ASK = 'Ask'\n    BID = 'Bid'\n    LAST = 'Last'\n    MID = 'Mid'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesStrikeTypeEnum",
        "id": "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesStrikeTypeEnum",
        "content": "class CurvesAndSurfacesStrikeTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesStrikeTypeEnum.\"\"\"\n\n    ABSOLUTE_PERCENT = \"AbsolutePercent\"\n    RELATIVE_PERCENT = \"RelativePercent\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesStrikeTypeEnum.\n",
            "members": [
                "CurvesAndSurfacesStrikeTypeEnum.ABSOLUTE_PERCENT = 'AbsolutePercent'",
                "CurvesAndSurfacesStrikeTypeEnum.RELATIVE_PERCENT = 'RelativePercent'"
            ],
            "signature": "class CurvesAndSurfacesStrikeTypeEnum(Enum):\n    \"\"\"\"\"\"\n    ABSOLUTE_PERCENT = 'AbsolutePercent'\n    RELATIVE_PERCENT = 'RelativePercent'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesTimeStampEnum",
        "id": "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesTimeStampEnum",
        "content": "class CurvesAndSurfacesTimeStampEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesTimeStampEnum.\"\"\"\n\n    CLOSE = \"Close\"\n    DEFAULT = \"Default\"\n    OPEN = \"Open\"\n    SETTLE = \"Settle\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesTimeStampEnum.\n",
            "members": [
                "CurvesAndSurfacesTimeStampEnum.CLOSE = 'Close'",
                "CurvesAndSurfacesTimeStampEnum.DEFAULT = 'Default'",
                "CurvesAndSurfacesTimeStampEnum.OPEN = 'Open'",
                "CurvesAndSurfacesTimeStampEnum.SETTLE = 'Settle'"
            ],
            "signature": "class CurvesAndSurfacesTimeStampEnum(Enum):\n    \"\"\"\"\"\"\n    CLOSE = 'Close'\n    DEFAULT = 'Default'\n    OPEN = 'Open'\n    SETTLE = 'Settle'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesUnderlyingTypeEnum",
        "id": "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesUnderlyingTypeEnum",
        "content": "class CurvesAndSurfacesUnderlyingTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesUnderlyingTypeEnum.\"\"\"\n\n    CAP = \"Cap\"\n    ETI = \"Eti\"\n    FX = \"Fx\"\n    SWAPTION = \"Swaption\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesUnderlyingTypeEnum.\n",
            "members": [
                "CurvesAndSurfacesUnderlyingTypeEnum.CAP = 'Cap'",
                "CurvesAndSurfacesUnderlyingTypeEnum.ETI = 'Eti'",
                "CurvesAndSurfacesUnderlyingTypeEnum.FX = 'Fx'",
                "CurvesAndSurfacesUnderlyingTypeEnum.SWAPTION = 'Swaption'"
            ],
            "signature": "class CurvesAndSurfacesUnderlyingTypeEnum(Enum):\n    \"\"\"\"\"\"\n    CAP = 'Cap'\n    ETI = 'Eti'\n    FX = 'Fx'\n    SWAPTION = 'Swaption'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "DiscountingTypeEnum",
        "id": "lseg_analytics.market_data.irswaption_volatility.DiscountingTypeEnum",
        "content": "class DiscountingTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of DiscountingTypeEnum.\"\"\"\n\n    LIBOR_DISCOUNTING = \"LiborDiscounting\"\n    OIS_DISCOUNTING = \"OisDiscounting\"\n",
        "metadata": {
            "doc": "Type of DiscountingTypeEnum.\n",
            "members": [
                "DiscountingTypeEnum.LIBOR_DISCOUNTING = 'LiborDiscounting'",
                "DiscountingTypeEnum.OIS_DISCOUNTING = 'OisDiscounting'"
            ],
            "signature": "class DiscountingTypeEnum(Enum):\n    \"\"\"\"\"\"\n    LIBOR_DISCOUNTING = 'LiborDiscounting'\n    OIS_DISCOUNTING = 'OisDiscounting'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "FormatEnum",
        "id": "lseg_analytics.market_data.irswaption_volatility.FormatEnum",
        "content": "class FormatEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of FormatEnum.\"\"\"\n\n    LIST = \"List\"\n    MATRIX = \"Matrix\"\n    NDIMENSIONAL_ARRAY = \"NDimensionalArray\"\n",
        "metadata": {
            "doc": "Type of FormatEnum.\n",
            "members": [
                "FormatEnum.LIST = 'List'",
                "FormatEnum.MATRIX = 'Matrix'",
                "FormatEnum.NDIMENSIONAL_ARRAY = 'NDimensionalArray'"
            ],
            "signature": "class FormatEnum(Enum):\n    \"\"\"\"\"\"\n    LIST = 'List'\n    MATRIX = 'Matrix'\n    NDIMENSIONAL_ARRAY = 'NDimensionalArray'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "InputVolatilityTypeEnum",
        "id": "lseg_analytics.market_data.irswaption_volatility.InputVolatilityTypeEnum",
        "content": "class InputVolatilityTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of InputVolatilityTypeEnum.\"\"\"\n\n    IMPLIED = \"Implied\"\n    LOG_NORMAL_VOLATILITY = \"LogNormalVolatility\"\n    NORMAL_VOLATILITY = \"NormalVolatility\"\n    QUOTED = \"Quoted\"\n    SETTLE = \"Settle\"\n",
        "metadata": {
            "doc": "Type of InputVolatilityTypeEnum.\n",
            "members": [
                "InputVolatilityTypeEnum.IMPLIED = 'Implied'",
                "InputVolatilityTypeEnum.LOG_NORMAL_VOLATILITY = 'LogNormalVolatility'",
                "InputVolatilityTypeEnum.NORMAL_VOLATILITY = 'NormalVolatility'",
                "InputVolatilityTypeEnum.QUOTED = 'Quoted'",
                "InputVolatilityTypeEnum.SETTLE = 'Settle'"
            ],
            "signature": "class InputVolatilityTypeEnum(Enum):\n    \"\"\"\"\"\"\n    IMPLIED = 'Implied'\n    LOG_NORMAL_VOLATILITY = 'LogNormalVolatility'\n    NORMAL_VOLATILITY = 'NormalVolatility'\n    QUOTED = 'Quoted'\n    SETTLE = 'Settle'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "OutputVolatilityTypeEnum",
        "id": "lseg_analytics.market_data.irswaption_volatility.OutputVolatilityTypeEnum",
        "content": "class OutputVolatilityTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of OutputVolatilityTypeEnum.\"\"\"\n\n    LOG_NORMAL_VOLATILITY = \"LogNormalVolatility\"\n    NORMAL_VOLATILITY = \"NormalVolatility\"\n",
        "metadata": {
            "doc": "Type of OutputVolatilityTypeEnum.\n",
            "members": [
                "OutputVolatilityTypeEnum.LOG_NORMAL_VOLATILITY = 'LogNormalVolatility'",
                "OutputVolatilityTypeEnum.NORMAL_VOLATILITY = 'NormalVolatility'"
            ],
            "signature": "class OutputVolatilityTypeEnum(Enum):\n    \"\"\"\"\"\"\n    LOG_NORMAL_VOLATILITY = 'LogNormalVolatility'\n    NORMAL_VOLATILITY = 'NormalVolatility'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "SurfaceOutput",
        "id": "lseg_analytics.market_data.irswaption_volatility.SurfaceOutput",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "data_points",
                "type": "List[VolatilitySurfacePoint]"
            },
            {
                "name": "format",
                "type": "FormatEnum",
                "valuelookup": "enum.FormatEnum"
            },
            {
                "name": "x_point_count",
                "type": "int"
            },
            {
                "name": "x_values",
                "type": "List[str]"
            },
            {
                "name": "y_point_count",
                "type": "int"
            },
            {
                "name": "y_values",
                "type": "List[str]"
            },
            {
                "name": "z_point_count",
                "type": "int"
            },
            {
                "name": "z_values",
                "type": "List[str]"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 56605,
        "content": "class SurfaceOutput:\n    \"\"\"SurfaceOutput.\n\n    Attributes\n    ----------\n    data_points : list[~analyticsapi.models.VolatilitySurfacePoint]\n        Specifies the list of specific data points to be returned.  The default\n        value is None, needs to be assigned before using.\n    format : str or ~analyticsapi.models.FormatEnum\n        Specifies whether the calculated volatilities are returned as a list or\n        a matrix. Known values are: \"List\", \"Matrix\", and \"NDimensionalArray\".\n    x_point_count : int\n        Specifies the number of values that will be generated along the x-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    x_values : list[str]\n        Specifies a list of discrete values for the x-axis.  The default value\n        is None, needs to be assigned before using.\n    y_point_count : int\n        Specifies the number of values that will be generated along the y-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    y_values : list[str]\n        Specifies a list of discrete values for the y-axis.  The default value\n        is None, needs to be assigned before using.\n    z_point_count : int\n        Specifies the number of values that will be generated along the z-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    z_values : list[str]\n        Specifies a list of discrete values for the z-axis.  The default value\n        is None, needs to be assigned before using.\n    \n    \"\"\"\n    data_points: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfacePoint')]]\n    format: typing.Union[str, ForwardRef('_models.FormatEnum'), NoneType]\n    x_point_count: typing.Optional[int]\n    x_values: typing.Optional[typing.List[str]]\n    y_point_count: typing.Optional[int]\n    y_values: typing.Optional[typing.List[str]]\n    z_point_count: typing.Optional[int]\n    z_values: typing.Optional[typing.List[str]]",
        "metadata": {
            "doc": "SurfaceOutput.\n\n    Attributes\n    ----------\n    data_points : list[~analyticsapi.models.VolatilitySurfacePoint]\n        Specifies the list of specific data points to be returned.  The default\n        value is None, needs to be assigned before using.\n    format : str or ~analyticsapi.models.FormatEnum\n        Specifies whether the calculated volatilities are returned as a list or\n        a matrix. Known values are: \"List\", \"Matrix\", and \"NDimensionalArray\".\n    x_point_count : int\n        Specifies the number of values that will be generated along the x-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    x_values : list[str]\n        Specifies a list of discrete values for the x-axis.  The default value\n        is None, needs to be assigned before using.\n    y_point_count : int\n        Specifies the number of values that will be generated along the y-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    y_values : list[str]\n        Specifies a list of discrete values for the y-axis.  The default value\n        is None, needs to be assigned before using.\n    z_point_count : int\n        Specifies the number of values that will be generated along the z-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    z_values : list[str]\n        Specifies a list of discrete values for the z-axis.  The default value\n        is None, needs to be assigned before using.\n    \n",
            "annotations": "    data_points: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfacePoint')]]\n    format: typing.Union[str, ForwardRef('_models.FormatEnum'), NoneType]\n    x_point_count: typing.Optional[int]\n    x_values: typing.Optional[typing.List[str]]\n    y_point_count: typing.Optional[int]\n    y_values: typing.Optional[typing.List[str]]\n    z_point_count: typing.Optional[int]\n    z_values: typing.Optional[typing.List[str]]",
            "signature": "class SurfaceOutput:\n    \"\"\"\"\"\"\n    data_points: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfacePoint')]]\n    format: typing.Union[str, ForwardRef('_models.FormatEnum'), NoneType]\n    x_point_count: typing.Optional[int]\n    x_values: typing.Optional[typing.List[str]]\n    y_point_count: typing.Optional[int]\n    y_values: typing.Optional[typing.List[str]]\n    z_point_count: typing.Optional[int]\n    z_values: typing.Optional[typing.List[str]]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.irswaption_volatility.SurfaceOutput.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfacePoint",
                "lseg_analytics.market_data.irswaption_volatility.FormatEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "SurfaceOutput.__init__",
        "id": "lseg_analytics.market_data.irswaption_volatility.SurfaceOutput.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 56683,
        "content": "class SurfaceOutput:\n    @overload\n    def __init__(self, *, data_points: Optional[List[ForwardRef('_models.VolatilitySurfacePoint')]] = None, format: Union[str, ForwardRef('_models.FormatEnum'), NoneType] = None, x_point_count: Optional[int] = None, x_values: Optional[List[str]] = None, y_point_count: Optional[int] = None, y_values: Optional[List[str]] = None, z_point_count: Optional[int] = None, z_values: Optional[List[str]] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "SurfaceOutput"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.irswaption_volatility.SurfaceOutput"
            ],
            "use": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfacePoint",
                "lseg_analytics.market_data.irswaption_volatility.FormatEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "VolatilityAdjustmentTypeEnum",
        "id": "lseg_analytics.market_data.irswaption_volatility.VolatilityAdjustmentTypeEnum",
        "content": "class VolatilityAdjustmentTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of VolatilityAdjustmentTypeEnum.\"\"\"\n\n    CONSTANT_CAP = \"ConstantCap\"\n    CONSTANT_CAPLET = \"ConstantCaplet\"\n    NORMALIZED_CAP = \"NormalizedCap\"\n    NORMALIZED_CAPLET = \"NormalizedCaplet\"\n    SHIFTED_CAP = \"ShiftedCap\"\n",
        "metadata": {
            "doc": "Type of VolatilityAdjustmentTypeEnum.\n",
            "members": [
                "VolatilityAdjustmentTypeEnum.CONSTANT_CAP = 'ConstantCap'",
                "VolatilityAdjustmentTypeEnum.CONSTANT_CAPLET = 'ConstantCaplet'",
                "VolatilityAdjustmentTypeEnum.NORMALIZED_CAP = 'NormalizedCap'",
                "VolatilityAdjustmentTypeEnum.NORMALIZED_CAPLET = 'NormalizedCaplet'",
                "VolatilityAdjustmentTypeEnum.SHIFTED_CAP = 'ShiftedCap'"
            ],
            "signature": "class VolatilityAdjustmentTypeEnum(Enum):\n    \"\"\"\"\"\"\n    CONSTANT_CAP = 'ConstantCap'\n    CONSTANT_CAPLET = 'ConstantCaplet'\n    NORMALIZED_CAP = 'NormalizedCap'\n    NORMALIZED_CAPLET = 'NormalizedCaplet'\n    SHIFTED_CAP = 'ShiftedCap'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilityCubeDefinition",
        "id": "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeDefinition",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "discounting_type",
                "type": "DiscountingTypeEnum",
                "valuelookup": "enum.DiscountingTypeEnum"
            },
            {
                "name": "index_name",
                "type": "str"
            },
            {
                "name": "index_tenor",
                "type": "str"
            },
            {
                "name": "instrument_code",
                "type": "str"
            },
            {
                "name": "underlying_swap_structure",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62186,
        "content": "class VolatilityCubeDefinition:\n    \"\"\"VolatilityCubeDefinition.\n\n    Attributes\n    ----------\n    discounting_type : str or ~analyticsapi.models.DiscountingTypeEnum\n        The discounting type of the interest rate volatility model. The default\n        value is selected based on 'instrumentCode'. Known values are:\n        \"LiborDiscounting\" and \"OisDiscounting\".\n    index_name : str\n        Underlying index name (e.g. 'EURIBOR').\n    index_tenor : str\n        Index tenor of the projected zero curve used to calculate swap rates.\n        The default value is the index tenor associated with the underlying\n        swap structure (for EUR_AB6E, 6M).\n    instrument_code : str\n        The Currency of the interest rate volatility model.\n    underlying_swap_structure : str\n        Underlying swap structure, eg: EUR_AB6E.\n    \n    \"\"\"\n    discounting_type: typing.Union[str, ForwardRef('_models.DiscountingTypeEnum'), NoneType]\n    index_name: typing.Optional[str]\n    index_tenor: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    underlying_swap_structure: typing.Optional[str]",
        "metadata": {
            "doc": "VolatilityCubeDefinition.\n\n    Attributes\n    ----------\n    discounting_type : str or ~analyticsapi.models.DiscountingTypeEnum\n        The discounting type of the interest rate volatility model. The default\n        value is selected based on 'instrumentCode'. Known values are:\n        \"LiborDiscounting\" and \"OisDiscounting\".\n    index_name : str\n        Underlying index name (e.g. 'EURIBOR').\n    index_tenor : str\n        Index tenor of the projected zero curve used to calculate swap rates.\n        The default value is the index tenor associated with the underlying\n        swap structure (for EUR_AB6E, 6M).\n    instrument_code : str\n        The Currency of the interest rate volatility model.\n    underlying_swap_structure : str\n        Underlying swap structure, eg: EUR_AB6E.\n    \n",
            "annotations": "    discounting_type: typing.Union[str, ForwardRef('_models.DiscountingTypeEnum'), NoneType]\n    index_name: typing.Optional[str]\n    index_tenor: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    underlying_swap_structure: typing.Optional[str]",
            "signature": "class VolatilityCubeDefinition:\n    \"\"\"\"\"\"\n    discounting_type: typing.Union[str, ForwardRef('_models.DiscountingTypeEnum'), NoneType]\n    index_name: typing.Optional[str]\n    index_tenor: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    underlying_swap_structure: typing.Optional[str]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeDefinition.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.irswaption_volatility.DiscountingTypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilityCubeDefinition.__init__",
        "id": "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeDefinition.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62242,
        "content": "class VolatilityCubeDefinition:\n    @overload\n    def __init__(self, *, discounting_type: Union[str, ForwardRef('_models.DiscountingTypeEnum'), NoneType] = None, index_name: Optional[str] = None, index_tenor: Optional[str] = None, instrument_code: Optional[str] = None, underlying_swap_structure: Optional[str] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilityCubeDefinition"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeDefinition"
            ],
            "use": [
                "lseg_analytics.market_data.irswaption_volatility.DiscountingTypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilityCubeSurfaceParameters",
        "id": "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeSurfaceParameters",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "beta",
                "type": "float"
            },
            {
                "name": "calculation_date",
                "type": "datetime"
            },
            {
                "name": "calibration_type",
                "type": "CurvesAndSurfacesCalibrationTypeEnum",
                "valuelookup": "enum.CurvesAndSurfacesCalibrationTypeEnum"
            },
            {
                "name": "cap_source",
                "type": "str"
            },
            {
                "name": "include_caplets_volatility",
                "type": "bool"
            },
            {
                "name": "input_volatility_type",
                "type": "InputVolatilityTypeEnum",
                "valuelookup": "enum.InputVolatilityTypeEnum"
            },
            {
                "name": "output_volatility_type",
                "type": "OutputVolatilityTypeEnum",
                "valuelookup": "enum.OutputVolatilityTypeEnum"
            },
            {
                "name": "price_side",
                "type": "CurvesAndSurfacesPriceSideEnum",
                "valuelookup": "enum.CurvesAndSurfacesPriceSideEnum"
            },
            {
                "name": "shift_percent",
                "type": "float"
            },
            {
                "name": "source",
                "type": "str"
            },
            {
                "name": "strike_type",
                "type": "CurvesAndSurfacesStrikeTypeEnum",
                "valuelookup": "enum.CurvesAndSurfacesStrikeTypeEnum"
            },
            {
                "name": "stripping_shift_percent",
                "type": "float"
            },
            {
                "name": "swaption_source",
                "type": "str"
            },
            {
                "name": "time_stamp",
                "type": "CurvesAndSurfacesTimeStampEnum",
                "valuelookup": "enum.CurvesAndSurfacesTimeStampEnum"
            },
            {
                "name": "use_smart_params",
                "type": "bool"
            },
            {
                "name": "valuation_date",
                "type": "datetime"
            },
            {
                "name": "volatility_adjustment_type",
                "type": "VolatilityAdjustmentTypeEnum",
                "valuelookup": "enum.VolatilityAdjustmentTypeEnum"
            },
            {
                "name": "x_axis",
                "type": "XAxisEnum",
                "valuelookup": "enum.XAxisEnum"
            },
            {
                "name": "y_axis",
                "type": "YAxisEnum",
                "valuelookup": "enum.YAxisEnum"
            },
            {
                "name": "z_axis",
                "type": "ZAxisEnum",
                "valuelookup": "enum.ZAxisEnum"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62246,
        "content": "class VolatilityCubeSurfaceParameters:\n    \"\"\"VolatilityCubeSurfaceParameters.\n\n    Attributes\n    ----------\n    beta : float\n        SABR Beta parameter. The possible values: a number between 0 and 1. The\n        default value is '0.45'.\n    calculation_date : ~datetime.datetime\n        The date the volatility surface is generated.\n    calibration_type : str or ~analyticsapi.models.CurvesAndSurfacesCalibrationTypeEnum\n        The Calibration type defines the solver used during calibration (i.e.\n        Sabr Model Calibration Optimization Method). The default value is\n        selected based on instrumentCode. Known values are:\n        \"AlternateConjugateGradient\", \"ConjugateGradient\", \"Powell\", and\n        \"SimplexNelderMead\".\n    cap_source : str\n    include_caplets_volatility : bool\n        Determines whether the volatility cube is computed from interpolations\n        on volatility skews, or via Atm swaption volatility and caplets\n        volatility. The default value is True.\n    input_volatility_type : str or ~analyticsapi.models.InputVolatilityTypeEnum\n        user can specify whether calibration is based on Normal or Lognorma\n        vol. However it would be preferrable to let the service determine the\n        most appropriate one. Known values are: \"Implied\",\n        \"LogNormalVolatility\", \"NormalVolatility\", \"Quoted\", and \"Settle\".\n    output_volatility_type : str or ~analyticsapi.models.OutputVolatilityTypeEnum\n        The SABR volatility can be expressed as lognormal volatility (%) or\n        normal volatility (bp). By default the output volatility type follows\n        the InputVolatilityType parameter. Known values are:\n        \"LogNormalVolatility\" and \"NormalVolatility\".\n    price_side : str or ~analyticsapi.models.CurvesAndSurfacesPriceSideEnum\n        Specifies whether bid, ask, mid or settle is used to build the surface.\n        If not precised, default to mid. Known values are: \"Ask\", \"Bid\",\n        \"Last\", and \"Mid\".\n    shift_percent : float\n        Shift applied to calibrated strikes allowing negative rates. The value\n        is expressed in percentages. The default value is selected based on\n        instrumentCode.\n    source : str\n        Requested volatility data contributor.\n    strike_type : str or ~analyticsapi.models.CurvesAndSurfacesStrikeTypeEnum\n        The strike axis type of the volatility cube surface. The default value\n        is 'RelativePercent'. Known values are: \"AbsolutePercent\" and\n        \"RelativePercent\".\n    stripping_shift_percent : float\n        Shift value applied to strikes allowing the stripped caplets surface to\n        include volatility even when some strikes are negative. The value is\n        expressed in percentages. The default value is '0.0'.\n    swaption_source : str\n    time_stamp : str or ~analyticsapi.models.CurvesAndSurfacesTimeStampEnum\n        Define how the timestamp is selected:\n\n        * Open: the opening value of the valuationDate or if not available the close of the previous\n        day is used.\n        * Default: the latest snapshot is used when valuationDate is today, the close price when\n        valuationDate is in the past. Known values are: \"Close\", \"Default\", \"Open\", and \"Settle\".\n    use_smart_params : bool\n        An indicator if a first SABR calibration is used to estimate the model\n        initial parameters (correlation and volatility of volatility). The\n        possible values are: True: will use a Precalibration to estimate\n        initial parameters, False: will use an arbitrary initial parameters.\n        The default value is 'False'.\n    valuation_date : ~datetime.datetime\n        The date at which the instrument is valued. The value is expressed in\n        ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). By default, MarketDataDate is used. If\n        MarketDataDate is not specified, the default value is today.\n    volatility_adjustment_type : str or ~analyticsapi.models.VolatilityAdjustmentTypeEnum\n        Volatility adjustment method applied to caplets surface before\n        stripping. The default value is 'ConstantCap'. Known values are:\n        \"ConstantCap\", \"ConstantCaplet\", \"NormalizedCap\", \"NormalizedCaplet\",\n        and \"ShiftedCap\".\n    x_axis : str or ~analyticsapi.models.XAxisEnum\n        The enumerate that specifies the unit for the x axis. Known values are:\n        \"Date\", \"Delta\", \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    y_axis : str or ~analyticsapi.models.YAxisEnum\n        The enumerate that specifies the unit for the y axis. Known values are:\n        \"Date\", \"Delta\", \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    z_axis : str or ~analyticsapi.models.ZAxisEnum\n        Specifies the unit for the z axis (e.g. Strike, Expiry, Tenor). This\n        applies to swaption SABR cube. Known values are: \"Date\", \"Delta\",\n        \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    \n    \"\"\"\n    beta: typing.Optional[float]\n    calculation_date: typing.Optional[datetime.datetime]\n    calibration_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesCalibrationTypeEnum'), NoneType]\n    cap_source: typing.Optional[str]\n    include_caplets_volatility: typing.Optional[bool]\n    input_volatility_type: typing.Union[str, ForwardRef('_models.InputVolatilityTypeEnum'), NoneType]\n    output_volatility_type: typing.Union[str, ForwardRef('_models.OutputVolatilityTypeEnum'), NoneType]\n    price_side: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType]\n    shift_percent: typing.Optional[float]\n    source: typing.Optional[str]\n    strike_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesStrikeTypeEnum'), NoneType]\n    stripping_shift_percent: typing.Optional[float]\n    swaption_source: typing.Optional[str]\n    time_stamp: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType]\n    use_smart_params: typing.Optional[bool]\n    valuation_date: typing.Optional[datetime.datetime]\n    volatility_adjustment_type: typing.Union[str, ForwardRef('_models.VolatilityAdjustmentTypeEnum'), NoneType]\n    x_axis: typing.Union[str, ForwardRef('_models.XAxisEnum'), NoneType]\n    y_axis: typing.Union[str, ForwardRef('_models.YAxisEnum'), NoneType]\n    z_axis: typing.Union[str, ForwardRef('_models.ZAxisEnum'), NoneType]",
        "metadata": {
            "doc": "VolatilityCubeSurfaceParameters.\n\n    Attributes\n    ----------\n    beta : float\n        SABR Beta parameter. The possible values: a number between 0 and 1. The\n        default value is '0.45'.\n    calculation_date : ~datetime.datetime\n        The date the volatility surface is generated.\n    calibration_type : str or ~analyticsapi.models.CurvesAndSurfacesCalibrationTypeEnum\n        The Calibration type defines the solver used during calibration (i.e.\n        Sabr Model Calibration Optimization Method). The default value is\n        selected based on instrumentCode. Known values are:\n        \"AlternateConjugateGradient\", \"ConjugateGradient\", \"Powell\", and\n        \"SimplexNelderMead\".\n    cap_source : str\n    include_caplets_volatility : bool\n        Determines whether the volatility cube is computed from interpolations\n        on volatility skews, or via Atm swaption volatility and caplets\n        volatility. The default value is True.\n    input_volatility_type : str or ~analyticsapi.models.InputVolatilityTypeEnum\n        user can specify whether calibration is based on Normal or Lognorma\n        vol. However it would be preferrable to let the service determine the\n        most appropriate one. Known values are: \"Implied\",\n        \"LogNormalVolatility\", \"NormalVolatility\", \"Quoted\", and \"Settle\".\n    output_volatility_type : str or ~analyticsapi.models.OutputVolatilityTypeEnum\n        The SABR volatility can be expressed as lognormal volatility (%) or\n        normal volatility (bp). By default the output volatility type follows\n        the InputVolatilityType parameter. Known values are:\n        \"LogNormalVolatility\" and \"NormalVolatility\".\n    price_side : str or ~analyticsapi.models.CurvesAndSurfacesPriceSideEnum\n        Specifies whether bid, ask, mid or settle is used to build the surface.\n        If not precised, default to mid. Known values are: \"Ask\", \"Bid\",\n        \"Last\", and \"Mid\".\n    shift_percent : float\n        Shift applied to calibrated strikes allowing negative rates. The value\n        is expressed in percentages. The default value is selected based on\n        instrumentCode.\n    source : str\n        Requested volatility data contributor.\n    strike_type : str or ~analyticsapi.models.CurvesAndSurfacesStrikeTypeEnum\n        The strike axis type of the volatility cube surface. The default value\n        is 'RelativePercent'. Known values are: \"AbsolutePercent\" and\n        \"RelativePercent\".\n    stripping_shift_percent : float\n        Shift value applied to strikes allowing the stripped caplets surface to\n        include volatility even when some strikes are negative. The value is\n        expressed in percentages. The default value is '0.0'.\n    swaption_source : str\n    time_stamp : str or ~analyticsapi.models.CurvesAndSurfacesTimeStampEnum\n        Define how the timestamp is selected:\n\n        * Open: the opening value of the valuationDate or if not available the close of the previous\n        day is used.\n        * Default: the latest snapshot is used when valuationDate is today, the close price when\n        valuationDate is in the past. Known values are: \"Close\", \"Default\", \"Open\", and \"Settle\".\n    use_smart_params : bool\n        An indicator if a first SABR calibration is used to estimate the model\n        initial parameters (correlation and volatility of volatility). The\n        possible values are: True: will use a Precalibration to estimate\n        initial parameters, False: will use an arbitrary initial parameters.\n        The default value is 'False'.\n    valuation_date : ~datetime.datetime\n        The date at which the instrument is valued. The value is expressed in\n        ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). By default, MarketDataDate is used. If\n        MarketDataDate is not specified, the default value is today.\n    volatility_adjustment_type : str or ~analyticsapi.models.VolatilityAdjustmentTypeEnum\n        Volatility adjustment method applied to caplets surface before\n        stripping. The default value is 'ConstantCap'. Known values are:\n        \"ConstantCap\", \"ConstantCaplet\", \"NormalizedCap\", \"NormalizedCaplet\",\n        and \"ShiftedCap\".\n    x_axis : str or ~analyticsapi.models.XAxisEnum\n        The enumerate that specifies the unit for the x axis. Known values are:\n        \"Date\", \"Delta\", \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    y_axis : str or ~analyticsapi.models.YAxisEnum\n        The enumerate that specifies the unit for the y axis. Known values are:\n        \"Date\", \"Delta\", \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    z_axis : str or ~analyticsapi.models.ZAxisEnum\n        Specifies the unit for the z axis (e.g. Strike, Expiry, Tenor). This\n        applies to swaption SABR cube. Known values are: \"Date\", \"Delta\",\n        \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    \n",
            "annotations": "    beta: typing.Optional[float]\n    calculation_date: typing.Optional[datetime.datetime]\n    calibration_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesCalibrationTypeEnum'), NoneType]\n    cap_source: typing.Optional[str]\n    include_caplets_volatility: typing.Optional[bool]\n    input_volatility_type: typing.Union[str, ForwardRef('_models.InputVolatilityTypeEnum'), NoneType]\n    output_volatility_type: typing.Union[str, ForwardRef('_models.OutputVolatilityTypeEnum'), NoneType]\n    price_side: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType]\n    shift_percent: typing.Optional[float]\n    source: typing.Optional[str]\n    strike_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesStrikeTypeEnum'), NoneType]\n    stripping_shift_percent: typing.Optional[float]\n    swaption_source: typing.Optional[str]\n    time_stamp: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType]\n    use_smart_params: typing.Optional[bool]\n    valuation_date: typing.Optional[datetime.datetime]\n    volatility_adjustment_type: typing.Union[str, ForwardRef('_models.VolatilityAdjustmentTypeEnum'), NoneType]\n    x_axis: typing.Union[str, ForwardRef('_models.XAxisEnum'), NoneType]\n    y_axis: typing.Union[str, ForwardRef('_models.YAxisEnum'), NoneType]\n    z_axis: typing.Union[str, ForwardRef('_models.ZAxisEnum'), NoneType]",
            "signature": "class VolatilityCubeSurfaceParameters:\n    \"\"\"\"\"\"\n    beta: typing.Optional[float]\n    calculation_date: typing.Optional[datetime.datetime]\n    calibration_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesCalibrationTypeEnum'), NoneType]\n    cap_source: typing.Optional[str]\n    include_caplets_volatility: typing.Optional[bool]\n    input_volatility_type: typing.Union[str, ForwardRef('_models.InputVolatilityTypeEnum'), NoneType]\n    output_volatility_type: typing.Union[str, ForwardRef('_models.OutputVolatilityTypeEnum'), NoneType]\n    price_side: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType]\n    shift_percent: typing.Optional[float]\n    source: typing.Optional[str]\n    strike_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesStrikeTypeEnum'), NoneType]\n    stripping_shift_percent: typing.Optional[float]\n    swaption_source: typing.Optional[str]\n    time_stamp: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType]\n    use_smart_params: typing.Optional[bool]\n    valuation_date: typing.Optional[datetime.datetime]\n    volatility_adjustment_type: typing.Union[str, ForwardRef('_models.VolatilityAdjustmentTypeEnum'), NoneType]\n    x_axis: typing.Union[str, ForwardRef('_models.XAxisEnum'), NoneType]\n    y_axis: typing.Union[str, ForwardRef('_models.YAxisEnum'), NoneType]\n    z_axis: typing.Union[str, ForwardRef('_models.ZAxisEnum'), NoneType]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeSurfaceParameters.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesCalibrationTypeEnum",
                "lseg_analytics.market_data.irswaption_volatility.InputVolatilityTypeEnum",
                "lseg_analytics.market_data.irswaption_volatility.OutputVolatilityTypeEnum",
                "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesPriceSideEnum",
                "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesStrikeTypeEnum",
                "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesTimeStampEnum",
                "lseg_analytics.market_data.irswaption_volatility.VolatilityAdjustmentTypeEnum",
                "lseg_analytics.market_data.irswaption_volatility.XAxisEnum",
                "lseg_analytics.market_data.irswaption_volatility.YAxisEnum",
                "lseg_analytics.market_data.irswaption_volatility.ZAxisEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilityCubeSurfaceParameters.__init__",
        "id": "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeSurfaceParameters.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62450,
        "content": "class VolatilityCubeSurfaceParameters:\n    @overload\n    def __init__(self, *, beta: Optional[float] = None, calculation_date: Optional[datetime.datetime] = None, calibration_type: Union[str, ForwardRef('_models.CurvesAndSurfacesCalibrationTypeEnum'), NoneType] = None, cap_source: Optional[str] = None, include_caplets_volatility: Optional[bool] = None, input_volatility_type: Union[str, ForwardRef('_models.InputVolatilityTypeEnum'), NoneType] = None, output_volatility_type: Union[str, ForwardRef('_models.OutputVolatilityTypeEnum'), NoneType] = None, price_side: Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType] = None, shift_percent: Optional[float] = None, source: Optional[str] = None, strike_type: Union[str, ForwardRef('_models.CurvesAndSurfacesStrikeTypeEnum'), NoneType] = None, stripping_shift_percent: Optional[float] = None, swaption_source: Optional[str] = None, time_stamp: Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType] = None, use_smart_params: Optional[bool] = None, valuation_date: Optional[datetime.datetime] = None, volatility_adjustment_type: Union[str, ForwardRef('_models.VolatilityAdjustmentTypeEnum'), NoneType] = None, x_axis: Union[str, ForwardRef('_models.XAxisEnum'), NoneType] = None, y_axis: Union[str, ForwardRef('_models.YAxisEnum'), NoneType] = None, z_axis: Union[str, ForwardRef('_models.ZAxisEnum'), NoneType] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilityCubeSurfaceParameters"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeSurfaceParameters"
            ],
            "use": [
                "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesCalibrationTypeEnum",
                "lseg_analytics.market_data.irswaption_volatility.InputVolatilityTypeEnum",
                "lseg_analytics.market_data.irswaption_volatility.OutputVolatilityTypeEnum",
                "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesPriceSideEnum",
                "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesStrikeTypeEnum",
                "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesTimeStampEnum",
                "lseg_analytics.market_data.irswaption_volatility.VolatilityAdjustmentTypeEnum",
                "lseg_analytics.market_data.irswaption_volatility.XAxisEnum",
                "lseg_analytics.market_data.irswaption_volatility.YAxisEnum",
                "lseg_analytics.market_data.irswaption_volatility.ZAxisEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilityCubeSurfaceRequestItem",
        "id": "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeSurfaceRequestItem",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "surface_layout",
                "type": "SurfaceOutput"
            },
            {
                "name": "surface_parameters",
                "type": "VolatilityCubeSurfaceParameters"
            },
            {
                "name": "surface_tag",
                "type": "str"
            },
            {
                "name": "underlying_definition",
                "type": "VolatilityCubeDefinition"
            },
            {
                "name": "underlying_type",
                "type": "CurvesAndSurfacesUnderlyingTypeEnum",
                "valuelookup": "enum.CurvesAndSurfacesUnderlyingTypeEnum"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62454,
        "content": "class VolatilityCubeSurfaceRequestItem:\n    \"\"\"VolatilityCubeSurfaceRequestItem.\n\n    Attributes\n    ----------\n    surface_layout : ~analyticsapi.models.SurfaceOutput\n    surface_parameters : ~analyticsapi.models.VolatilityCubeSurfaceParameters\n    surface_tag : str\n    underlying_definition : ~analyticsapi.models.VolatilityCubeDefinition\n    underlying_type : str or ~analyticsapi.models.CurvesAndSurfacesUnderlyingTypeEnum\n        The type of the underlying used to generate the volatility surface.\n        Known values are: \"Cap\", \"Eti\", \"Fx\", and \"Swaption\".\n    \n    \"\"\"\n    surface_layout: typing.Optional[ForwardRef('_models.SurfaceOutput')]\n    surface_parameters: typing.Optional[ForwardRef('_models.VolatilityCubeSurfaceParameters')]\n    surface_tag: typing.Optional[str]\n    underlying_definition: typing.Optional[ForwardRef('_models.VolatilityCubeDefinition')]\n    underlying_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType]",
        "metadata": {
            "doc": "VolatilityCubeSurfaceRequestItem.\n\n    Attributes\n    ----------\n    surface_layout : ~analyticsapi.models.SurfaceOutput\n    surface_parameters : ~analyticsapi.models.VolatilityCubeSurfaceParameters\n    surface_tag : str\n    underlying_definition : ~analyticsapi.models.VolatilityCubeDefinition\n    underlying_type : str or ~analyticsapi.models.CurvesAndSurfacesUnderlyingTypeEnum\n        The type of the underlying used to generate the volatility surface.\n        Known values are: \"Cap\", \"Eti\", \"Fx\", and \"Swaption\".\n    \n",
            "annotations": "    surface_layout: typing.Optional[ForwardRef('_models.SurfaceOutput')]\n    surface_parameters: typing.Optional[ForwardRef('_models.VolatilityCubeSurfaceParameters')]\n    surface_tag: typing.Optional[str]\n    underlying_definition: typing.Optional[ForwardRef('_models.VolatilityCubeDefinition')]\n    underlying_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType]",
            "signature": "class VolatilityCubeSurfaceRequestItem:\n    \"\"\"\"\"\"\n    surface_layout: typing.Optional[ForwardRef('_models.SurfaceOutput')]\n    surface_parameters: typing.Optional[ForwardRef('_models.VolatilityCubeSurfaceParameters')]\n    surface_tag: typing.Optional[str]\n    underlying_definition: typing.Optional[ForwardRef('_models.VolatilityCubeDefinition')]\n    underlying_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeSurfaceRequestItem.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.irswaption_volatility.SurfaceOutput",
                "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeSurfaceParameters",
                "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeDefinition",
                "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesUnderlyingTypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilityCubeSurfaceRequestItem.__init__",
        "id": "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeSurfaceRequestItem.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62498,
        "content": "class VolatilityCubeSurfaceRequestItem:\n    @overload\n    def __init__(self, *, surface_layout: Optional[ForwardRef('_models.SurfaceOutput')] = None, surface_parameters: Optional[ForwardRef('_models.VolatilityCubeSurfaceParameters')] = None, surface_tag: Optional[str] = None, underlying_definition: Optional[ForwardRef('_models.VolatilityCubeDefinition')] = None, underlying_type: Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilityCubeSurfaceRequestItem"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeSurfaceRequestItem"
            ],
            "use": [
                "lseg_analytics.market_data.irswaption_volatility.SurfaceOutput",
                "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeSurfaceParameters",
                "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeDefinition",
                "lseg_analytics.market_data.irswaption_volatility.CurvesAndSurfacesUnderlyingTypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilitySurfacePoint",
        "id": "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfacePoint",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "x",
                "type": "str"
            },
            {
                "name": "y",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62502,
        "content": "class VolatilitySurfacePoint:\n    \"\"\"VolatilitySurfacePoint.\n\n    Attributes\n    ----------\n    x : str\n        The coordinate of the volatility data point on the x-axis.\n    y : str\n        The coordinate of the volatility data point on the y-axis.\n    \n    \"\"\"\n    x: typing.Optional[str]\n    y: typing.Optional[str]",
        "metadata": {
            "doc": "VolatilitySurfacePoint.\n\n    Attributes\n    ----------\n    x : str\n        The coordinate of the volatility data point on the x-axis.\n    y : str\n        The coordinate of the volatility data point on the y-axis.\n    \n",
            "annotations": "    x: typing.Optional[str]\n    y: typing.Optional[str]",
            "signature": "class VolatilitySurfacePoint:\n    \"\"\"\"\"\"\n    x: typing.Optional[str]\n    y: typing.Optional[str]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfacePoint.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilitySurfacePoint.__init__",
        "id": "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfacePoint.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62535,
        "content": "class VolatilitySurfacePoint:\n    @overload\n    def __init__(self, *, x: Optional[str] = None, y: Optional[str] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilitySurfacePoint"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfacePoint"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilitySurfaceResponse",
        "id": "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfaceResponse",
        "params": [
            {
                "name": "data",
                "type": "List[VolatilitySurfaceResponseItem]"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62539,
        "content": "class VolatilitySurfaceResponse:\n    \"\"\"VolatilitySurfaceResponse.\n\n    Attributes\n    ----------\n    data : list[~analyticsapi.models.VolatilitySurfaceResponseItem]\n        The list of volatility surfaces that have been generated based on the\n        request.  The default value is None, needs to be assigned before using.\n    \n    \"\"\"\n    data: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfaceResponseItem')]]",
        "metadata": {
            "doc": "VolatilitySurfaceResponse.\n\n    Attributes\n    ----------\n    data : list[~analyticsapi.models.VolatilitySurfaceResponseItem]\n        The list of volatility surfaces that have been generated based on the\n        request.  The default value is None, needs to be assigned before using.\n    \n",
            "annotations": "    data: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfaceResponseItem')]]",
            "signature": "class VolatilitySurfaceResponse:\n    \"\"\"\"\"\"\n    data: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfaceResponseItem')]]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfaceResponse.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfaceResponseItem"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilitySurfaceResponse.__init__",
        "id": "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfaceResponse.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62567,
        "content": "class VolatilitySurfaceResponse:\n    @overload\n    def __init__(self, data: Optional[List[ForwardRef('_models.VolatilitySurfaceResponseItem')]] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilitySurfaceResponse"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfaceResponse"
            ],
            "use": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfaceResponseItem"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilitySurfaceResponseItem",
        "id": "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfaceResponseItem",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "discount_curve",
                "type": "Any"
            },
            {
                "name": "dividends",
                "type": "Any"
            },
            {
                "name": "forward_curve",
                "type": "Any"
            },
            {
                "name": "goodness_of_fit",
                "type": "Any"
            },
            {
                "name": "headers",
                "type": "List[str]"
            },
            {
                "name": "interest_rate_curve",
                "type": "Any"
            },
            {
                "name": "moneyness_strike",
                "type": "Any"
            },
            {
                "name": "surface",
                "type": "List[Any]"
            },
            {
                "name": "surface_tag",
                "type": "str"
            },
            {
                "name": "underlying_spot",
                "type": "Any"
            },
            {
                "name": "constituents",
                "type": "Any"
            },
            {
                "name": "description",
                "type": "Any"
            },
            {
                "name": "cross_currency_curves",
                "type": "Any"
            },
            {
                "name": "calibration_parameters",
                "type": "Any"
            },
            {
                "name": "theoritical_calls_premiums",
                "type": "Any"
            },
            {
                "name": "theoritical_puts_premiums",
                "type": "Any"
            },
            {
                "name": "theoritical_strikes",
                "type": "Any"
            },
            {
                "name": "theoretical_strikes",
                "type": "Any"
            },
            {
                "name": "expiry_dates",
                "type": "Any"
            },
            {
                "name": "surface_information",
                "type": "Any"
            },
            {
                "name": "statistics",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62574,
        "content": "class VolatilitySurfaceResponseItem:\n    \"\"\"VolatilitySurfaceResponseItem.\n\n    Attributes\n    ----------\n    discount_curve : any\n        The discount curve.\n    dividends : any\n        The dividends.\n    forward_curve : any\n        The forward curve.\n    goodness_of_fit : any\n        The goodness of fit for VolSurface.\n    headers : list[str]\n        The list of column headers that describe the columns returned in the\n        case of a \"List\" format.  The default value is None, needs to be\n        assigned before using.\n    interest_rate_curve : any\n        The Interest rate curve.\n    moneyness_strike : any\n        The strike level associated to the moneyness level for VolSurface.\n    surface : list[list[any]]\n        The actual volatility surface.  The default value is None, needs to be\n        assigned before using.\n    surface_tag : str\n        The user-defined tag provided in the request or a generated one if no\n        tag were provided.\n    underlying_spot : any\n        The Underlying Spot.\n    constituents : any\n        The constituents of the volatility surface.\n    description : any\n        A description of the volatility surface.\n    cross_currency_curves : any\n        The cross currency curves.\n    calibration_parameters : any\n        The set of inputs and model-specific variables used to fit the\n        volatility surface to observed option market data.\n    theoritical_calls_premiums : any\n        The model-based call prices derived from the calibrated volatility\n        surface.\n    theoritical_puts_premiums : any\n        The model-based put prices derived from the calibrated volatility\n        surface.\n    theoritical_strikes : any\n        Model-generated strike values.\n    theoretical_strikes : any\n        Model-generated strike values.\n    expiry_dates : any\n        A list of tenors, expiry dates, and settlement dates for each smile\n        point in a volatility surface.\n    surface_information : any\n        This output provides further information about the surface, the\n        underlying, and the constituents.\n    statistics : any\n        The parameters defining the computation of skewness and kurtosis across\n        the smiles of the surface.\n    \n    \"\"\"\n    discount_curve: typing.Optional[typing.Any]\n    dividends: typing.Optional[typing.Any]\n    forward_curve: typing.Optional[typing.Any]\n    goodness_of_fit: typing.Optional[typing.Any]\n    headers: typing.Optional[typing.List[str]]\n    interest_rate_curve: typing.Optional[typing.Any]\n    moneyness_strike: typing.Optional[typing.Any]\n    surface: typing.Optional[typing.List[typing.List[typing.Any]]]\n    surface_tag: typing.Optional[str]\n    underlying_spot: typing.Optional[typing.Any]\n    constituents: typing.Optional[typing.Any]\n    description: typing.Optional[typing.Any]\n    cross_currency_curves: typing.Optional[typing.Any]\n    calibration_parameters: typing.Optional[typing.Any]\n    theoritical_calls_premiums: typing.Optional[typing.Any]\n    theoritical_puts_premiums: typing.Optional[typing.Any]\n    theoritical_strikes: typing.Optional[typing.Any]\n    theoretical_strikes: typing.Optional[typing.Any]\n    expiry_dates: typing.Optional[typing.Any]\n    surface_information: typing.Optional[typing.Any]\n    statistics: typing.Optional[typing.Any]",
        "metadata": {
            "doc": "VolatilitySurfaceResponseItem.\n\n    Attributes\n    ----------\n    discount_curve : any\n        The discount curve.\n    dividends : any\n        The dividends.\n    forward_curve : any\n        The forward curve.\n    goodness_of_fit : any\n        The goodness of fit for VolSurface.\n    headers : list[str]\n        The list of column headers that describe the columns returned in the\n        case of a \"List\" format.  The default value is None, needs to be\n        assigned before using.\n    interest_rate_curve : any\n        The Interest rate curve.\n    moneyness_strike : any\n        The strike level associated to the moneyness level for VolSurface.\n    surface : list[list[any]]\n        The actual volatility surface.  The default value is None, needs to be\n        assigned before using.\n    surface_tag : str\n        The user-defined tag provided in the request or a generated one if no\n        tag were provided.\n    underlying_spot : any\n        The Underlying Spot.\n    constituents : any\n        The constituents of the volatility surface.\n    description : any\n        A description of the volatility surface.\n    cross_currency_curves : any\n        The cross currency curves.\n    calibration_parameters : any\n        The set of inputs and model-specific variables used to fit the\n        volatility surface to observed option market data.\n    theoritical_calls_premiums : any\n        The model-based call prices derived from the calibrated volatility\n        surface.\n    theoritical_puts_premiums : any\n        The model-based put prices derived from the calibrated volatility\n        surface.\n    theoritical_strikes : any\n        Model-generated strike values.\n    theoretical_strikes : any\n        Model-generated strike values.\n    expiry_dates : any\n        A list of tenors, expiry dates, and settlement dates for each smile\n        point in a volatility surface.\n    surface_information : any\n        This output provides further information about the surface, the\n        underlying, and the constituents.\n    statistics : any\n        The parameters defining the computation of skewness and kurtosis across\n        the smiles of the surface.\n    \n",
            "annotations": "    discount_curve: typing.Optional[typing.Any]\n    dividends: typing.Optional[typing.Any]\n    forward_curve: typing.Optional[typing.Any]\n    goodness_of_fit: typing.Optional[typing.Any]\n    headers: typing.Optional[typing.List[str]]\n    interest_rate_curve: typing.Optional[typing.Any]\n    moneyness_strike: typing.Optional[typing.Any]\n    surface: typing.Optional[typing.List[typing.List[typing.Any]]]\n    surface_tag: typing.Optional[str]\n    underlying_spot: typing.Optional[typing.Any]\n    constituents: typing.Optional[typing.Any]\n    description: typing.Optional[typing.Any]\n    cross_currency_curves: typing.Optional[typing.Any]\n    calibration_parameters: typing.Optional[typing.Any]\n    theoritical_calls_premiums: typing.Optional[typing.Any]\n    theoritical_puts_premiums: typing.Optional[typing.Any]\n    theoritical_strikes: typing.Optional[typing.Any]\n    theoretical_strikes: typing.Optional[typing.Any]\n    expiry_dates: typing.Optional[typing.Any]\n    surface_information: typing.Optional[typing.Any]\n    statistics: typing.Optional[typing.Any]",
            "signature": "class VolatilitySurfaceResponseItem:\n    \"\"\"\"\"\"\n    discount_curve: typing.Optional[typing.Any]\n    dividends: typing.Optional[typing.Any]\n    forward_curve: typing.Optional[typing.Any]\n    goodness_of_fit: typing.Optional[typing.Any]\n    headers: typing.Optional[typing.List[str]]\n    interest_rate_curve: typing.Optional[typing.Any]\n    moneyness_strike: typing.Optional[typing.Any]\n    surface: typing.Optional[typing.List[typing.List[typing.Any]]]\n    surface_tag: typing.Optional[str]\n    underlying_spot: typing.Optional[typing.Any]\n    constituents: typing.Optional[typing.Any]\n    description: typing.Optional[typing.Any]\n    cross_currency_curves: typing.Optional[typing.Any]\n    calibration_parameters: typing.Optional[typing.Any]\n    theoritical_calls_premiums: typing.Optional[typing.Any]\n    theoritical_puts_premiums: typing.Optional[typing.Any]\n    theoritical_strikes: typing.Optional[typing.Any]\n    theoretical_strikes: typing.Optional[typing.Any]\n    expiry_dates: typing.Optional[typing.Any]\n    surface_information: typing.Optional[typing.Any]\n    statistics: typing.Optional[typing.Any]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfaceResponseItem.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilitySurfaceResponseItem.__init__",
        "id": "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfaceResponseItem.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62716,
        "content": "class VolatilitySurfaceResponseItem:\n    @overload\n    def __init__(self, *, discount_curve: Optional[Any] = None, dividends: Optional[Any] = None, forward_curve: Optional[Any] = None, goodness_of_fit: Optional[Any] = None, headers: Optional[List[str]] = None, interest_rate_curve: Optional[Any] = None, moneyness_strike: Optional[Any] = None, surface: Optional[List[List[Any]]] = None, surface_tag: Optional[str] = None, underlying_spot: Optional[Any] = None, constituents: Optional[Any] = None, description: Optional[Any] = None, cross_currency_curves: Optional[Any] = None, calibration_parameters: Optional[Any] = None, theoritical_calls_premiums: Optional[Any] = None, theoritical_puts_premiums: Optional[Any] = None, theoritical_strikes: Optional[Any] = None, theoretical_strikes: Optional[Any] = None, expiry_dates: Optional[Any] = None, surface_information: Optional[Any] = None, statistics: Optional[Any] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilitySurfaceResponseItem"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfaceResponseItem"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "XAxisEnum",
        "id": "lseg_analytics.market_data.irswaption_volatility.XAxisEnum",
        "content": "class XAxisEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of XAxisEnum.\"\"\"\n\n    DATE = \"Date\"\n    DELTA = \"Delta\"\n    EXPIRY = \"Expiry\"\n    MONEYNESS = \"Moneyness\"\n    STRIKE = \"Strike\"\n    TENOR = \"Tenor\"\n",
        "metadata": {
            "doc": "Type of XAxisEnum.\n",
            "members": [
                "XAxisEnum.DATE = 'Date'",
                "XAxisEnum.DELTA = 'Delta'",
                "XAxisEnum.EXPIRY = 'Expiry'",
                "XAxisEnum.MONEYNESS = 'Moneyness'",
                "XAxisEnum.STRIKE = 'Strike'",
                "XAxisEnum.TENOR = 'Tenor'"
            ],
            "signature": "class XAxisEnum(Enum):\n    \"\"\"\"\"\"\n    DATE = 'Date'\n    DELTA = 'Delta'\n    EXPIRY = 'Expiry'\n    MONEYNESS = 'Moneyness'\n    STRIKE = 'Strike'\n    TENOR = 'Tenor'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "YAxisEnum",
        "id": "lseg_analytics.market_data.irswaption_volatility.YAxisEnum",
        "content": "class YAxisEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of YAxisEnum.\"\"\"\n\n    DATE = \"Date\"\n    DELTA = \"Delta\"\n    EXPIRY = \"Expiry\"\n    MONEYNESS = \"Moneyness\"\n    STRIKE = \"Strike\"\n    TENOR = \"Tenor\"\n",
        "metadata": {
            "doc": "Type of YAxisEnum.\n",
            "members": [
                "YAxisEnum.DATE = 'Date'",
                "YAxisEnum.DELTA = 'Delta'",
                "YAxisEnum.EXPIRY = 'Expiry'",
                "YAxisEnum.MONEYNESS = 'Moneyness'",
                "YAxisEnum.STRIKE = 'Strike'",
                "YAxisEnum.TENOR = 'Tenor'"
            ],
            "signature": "class YAxisEnum(Enum):\n    \"\"\"\"\"\"\n    DATE = 'Date'\n    DELTA = 'Delta'\n    EXPIRY = 'Expiry'\n    MONEYNESS = 'Moneyness'\n    STRIKE = 'Strike'\n    TENOR = 'Tenor'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "ZAxisEnum",
        "id": "lseg_analytics.market_data.irswaption_volatility.ZAxisEnum",
        "content": "class ZAxisEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of ZAxisEnum.\"\"\"\n\n    DATE = \"Date\"\n    DELTA = \"Delta\"\n    EXPIRY = \"Expiry\"\n    MONEYNESS = \"Moneyness\"\n    STRIKE = \"Strike\"\n    TENOR = \"Tenor\"\n",
        "metadata": {
            "doc": "Type of ZAxisEnum.\n",
            "members": [
                "ZAxisEnum.DATE = 'Date'",
                "ZAxisEnum.DELTA = 'Delta'",
                "ZAxisEnum.EXPIRY = 'Expiry'",
                "ZAxisEnum.MONEYNESS = 'Moneyness'",
                "ZAxisEnum.STRIKE = 'Strike'",
                "ZAxisEnum.TENOR = 'Tenor'"
            ],
            "signature": "class ZAxisEnum(Enum):\n    \"\"\"\"\"\"\n    DATE = 'Date'\n    DELTA = 'Delta'\n    EXPIRY = 'Expiry'\n    MONEYNESS = 'Moneyness'\n    STRIKE = 'Strike'\n    TENOR = 'Tenor'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "FunctionChunk",
        "name": "calculate",
        "id": "lseg_analytics.market_data.irswaption_volatility.calculate",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "universe",
                "type": "List[VolatilityCubeSurfaceRequestItem]"
            },
            {
                "name": "fields",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics/market_data/irswaption_volatility/_functions.py",
        "line_number": 63,
        "content": "def calculate(*, universe: Optional[List[VolatilityCubeSurfaceRequestItem]] = None, fields: Optional[str] = None) -> VolatilitySurfaceResponse:\n    \"\"\"\n    Generates the surfaces for the definitions provided\n\n    Parameters\n    ----------\n    universe : List[VolatilityCubeSurfaceRequestItem], optional\n\n    fields : str, optional\n        A parameter used to select the fields to return in response. If not provided, all fields will be returned.\n        Some usage examples:\n        1. Simply enumerating the fields, separating them by ',', e.g. 'fields=//please insert the selected fields here, e.g., field1, field2 //'\n        2. Using parentheses to indicate nesting, e.g. 'fields= //please insert the selected field and subfields here, e.g., field1(subfield1, subfield2), field2(subfield3)//\u2019\n        3. Using forward slash '/' to indicate nesting, e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1/subfield1, field1/subfield2, field2/subfield3//\u2019 (same result as example above)\n        4. Operators can even be combined (forward slashes in brackets, not the way around), e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1(subfield1/subsubfield1), field2/subfield2//'\n\n    Returns\n    --------\n    VolatilitySurfaceResponse\n\n\n    Examples\n    --------\n    >>> print(\"Step 1: Creating Cube Definition...\")\n    >>> # Select currency and reference rate for caplets\n    >>> currency = \"USD\"\n    >>> index_name = \"SOFR\"\n    >>>\n    >>> # Create surface definition object\n    >>> cube_definition = sv.VolatilityCubeDefinition(\n    >>>         instrument_code = currency,\n    >>>         index_name = index_name,\n    >>>         index_tenor  = \"ON\",\n    >>>         # discounting_type = sv.DiscountingTypeEnum.OisDiscounting  # Options: LiborDiscounting, OisDiscounting\n    >>>         )\n    >>> print(f\"   Instrument: {cube_definition.instrument_code}\")\n    >>>\n    >>> # Create the surface parameters - optional\n    >>> print(\"Step 2: Configuring Cube Parameters...\")\n    >>> cube_parameters = sv.VolatilityCubeSurfaceParameters(\n    >>>         calculation_date = dt.datetime.strptime(\"2025-01-18\", \"%Y-%m-%d\"),\n    >>>         x_axis = sv.XAxisEnum.STRIKE,                                     # Options: DATE, DELTA, EXPIRY, MONEYNESS, STRIKE, TENOR\n    >>>         y_axis = sv.YAxisEnum.TENOR,                                      # Options: same as X-axis\n    >>>         z_axis = sv.YAxisEnum.EXPIRY                                      # Options: same as X-axis\n    >>>     )\n    >>> print(f\"   Surface Parameters: {cube_parameters}\")\n    >>>\n    >>> # Create the main request object with basic configuration\n    >>> print(\"Step 3: Create request item...\")\n    >>> request_item = sv.VolatilityCubeSurfaceRequestItem(\n    >>>         surface_tag = f\"{currency}_{index_name}_Swaption_volatility_cube\",\n    >>>         underlying_definition = cube_definition,\n    >>>         surface_parameters = cube_parameters,\n    >>>         underlying_type = sv.CurvesAndSurfacesUnderlyingTypeEnum.Swaption,\n    >>>         surface_layout = sv.SurfaceOutput(\n    >>>             format = sv.FormatEnum.LIST,  # Options: LIST, MATRIX, NDIMENSIONAL_ARRAY\n    >>>         )\n    >>>     )\n    >>> print(f\"   Request Item: {json.dumps(request_item.as_dict(), indent=4)}\")\n    Step 1: Creating Cube Definition...\n       Instrument: USD\n    Step 2: Configuring Cube Parameters...\n       Surface Parameters: {'calculationDate': '2025-01-18T00:00:00Z', 'xAxis': 'Strike', 'yAxis': 'Tenor', 'zAxis': 'Expiry'}\n    Step 3: Create request item...\n       Request Item: {\n        \"surfaceTag\": \"USD_SOFR_Swaption_volatility_cube\",\n        \"underlyingDefinition\": {\n            \"instrumentCode\": \"USD\",\n            \"indexName\": \"SOFR\",\n            \"indexTenor\": \"ON\"\n        },\n        \"surfaceParameters\": {\n            \"calculationDate\": \"2025-01-18T00:00:00Z\",\n            \"xAxis\": \"Strike\",\n            \"yAxis\": \"Tenor\",\n            \"zAxis\": \"Expiry\"\n        },\n        \"underlyingType\": \"Swaption\",\n        \"surfaceLayout\": {\n            \"format\": \"List\"\n        }\n    }\n\n\n    >>> # Execute the calculation using the calculate function\n    >>> # The 'universe' parameter accepts a list of request items for batch processing\n    >>> try:\n    >>>     response = sv.calculate(universe=[request_item])\n    >>>\n    >>>     # Display response structure information\n    >>>     surface_data = response['data'][0]\n    >>>     if 'surface' in surface_data:\n    >>>         print(f\"   Calculation successful!\")\n    >>>         print(f\"   Cube data points available: {len(surface_data['surface'])}\")\n    >>>     else:\n    >>>         print(\"   No cube data found in response\")\n    >>>\n    >>> except Exception as e:\n    >>>     print(f\"   Calculation failed: {str(e)}\")\n    >>>     raise\n       Calculation successful!\n       Cube data points available: 9315\n\n    \n    \"\"\"",
        "metadata": {
            "doc": "\n    Generates the surfaces for the definitions provided\n\n    Parameters\n    ----------\n    universe : List[VolatilityCubeSurfaceRequestItem], optional\n\n    fields : str, optional\n        A parameter used to select the fields to return in response. If not provided, all fields will be returned.\n        Some usage examples:\n        1. Simply enumerating the fields, separating them by ',', e.g. 'fields=//please insert the selected fields here, e.g., field1, field2 //'\n        2. Using parentheses to indicate nesting, e.g. 'fields= //please insert the selected field and subfields here, e.g., field1(subfield1, subfield2), field2(subfield3)//\u2019\n        3. Using forward slash '/' to indicate nesting, e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1/subfield1, field1/subfield2, field2/subfield3//\u2019 (same result as example above)\n        4. Operators can even be combined (forward slashes in brackets, not the way around), e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1(subfield1/subsubfield1), field2/subfield2//'\n\n    Returns\n    --------\n    VolatilitySurfaceResponse\n\n\n    Examples\n    --------\n    >>> print(\"Step 1: Creating Cube Definition...\")\n    >>> # Select currency and reference rate for caplets\n    >>> currency = \"USD\"\n    >>> index_name = \"SOFR\"\n    >>>\n    >>> # Create surface definition object\n    >>> cube_definition = sv.VolatilityCubeDefinition(\n    >>>         instrument_code = currency,\n    >>>         index_name = index_name,\n    >>>         index_tenor  = \"ON\",\n    >>>         # discounting_type = sv.DiscountingTypeEnum.OisDiscounting  # Options: LiborDiscounting, OisDiscounting\n    >>>         )\n    >>> print(f\"   Instrument: {cube_definition.instrument_code}\")\n    >>>\n    >>> # Create the surface parameters - optional\n    >>> print(\"Step 2: Configuring Cube Parameters...\")\n    >>> cube_parameters = sv.VolatilityCubeSurfaceParameters(\n    >>>         calculation_date = dt.datetime.strptime(\"2025-01-18\", \"%Y-%m-%d\"),\n    >>>         x_axis = sv.XAxisEnum.STRIKE,                                     # Options: DATE, DELTA, EXPIRY, MONEYNESS, STRIKE, TENOR\n    >>>         y_axis = sv.YAxisEnum.TENOR,                                      # Options: same as X-axis\n    >>>         z_axis = sv.YAxisEnum.EXPIRY                                      # Options: same as X-axis\n    >>>     )\n    >>> print(f\"   Surface Parameters: {cube_parameters}\")\n    >>>\n    >>> # Create the main request object with basic configuration\n    >>> print(\"Step 3: Create request item...\")\n    >>> request_item = sv.VolatilityCubeSurfaceRequestItem(\n    >>>         surface_tag = f\"{currency}_{index_name}_Swaption_volatility_cube\",\n    >>>         underlying_definition = cube_definition,\n    >>>         surface_parameters = cube_parameters,\n    >>>         underlying_type = sv.CurvesAndSurfacesUnderlyingTypeEnum.Swaption,\n    >>>         surface_layout = sv.SurfaceOutput(\n    >>>             format = sv.FormatEnum.LIST,  # Options: LIST, MATRIX, NDIMENSIONAL_ARRAY\n    >>>         )\n    >>>     )\n    >>> print(f\"   Request Item: {json.dumps(request_item.as_dict(), indent=4)}\")\n    Step 1: Creating Cube Definition...\n       Instrument: USD\n    Step 2: Configuring Cube Parameters...\n       Surface Parameters: {'calculationDate': '2025-01-18T00:00:00Z', 'xAxis': 'Strike', 'yAxis': 'Tenor', 'zAxis': 'Expiry'}\n    Step 3: Create request item...\n       Request Item: {\n        \"surfaceTag\": \"USD_SOFR_Swaption_volatility_cube\",\n        \"underlyingDefinition\": {\n            \"instrumentCode\": \"USD\",\n            \"indexName\": \"SOFR\",\n            \"indexTenor\": \"ON\"\n        },\n        \"surfaceParameters\": {\n            \"calculationDate\": \"2025-01-18T00:00:00Z\",\n            \"xAxis\": \"Strike\",\n            \"yAxis\": \"Tenor\",\n            \"zAxis\": \"Expiry\"\n        },\n        \"underlyingType\": \"Swaption\",\n        \"surfaceLayout\": {\n            \"format\": \"List\"\n        }\n    }\n\n\n    >>> # Execute the calculation using the calculate function\n    >>> # The 'universe' parameter accepts a list of request items for batch processing\n    >>> try:\n    >>>     response = sv.calculate(universe=[request_item])\n    >>>\n    >>>     # Display response structure information\n    >>>     surface_data = response['data'][0]\n    >>>     if 'surface' in surface_data:\n    >>>         print(f\"   Calculation successful!\")\n    >>>         print(f\"   Cube data points available: {len(surface_data['surface'])}\")\n    >>>     else:\n    >>>         print(\"   No cube data found in response\")\n    >>>\n    >>> except Exception as e:\n    >>>     print(f\"   Calculation failed: {str(e)}\")\n    >>>     raise\n       Calculation successful!\n       Cube data points available: 9315\n\n    \n",
            "signature": "def calculate(*, universe: Optional[List[VolatilityCubeSurfaceRequestItem]] = None, fields: Optional[str] = None) -> VolatilitySurfaceResponse:"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.irswaption_volatility.VolatilityCubeSurfaceRequestItem",
                "lseg_analytics.market_data.irswaption_volatility.VolatilitySurfaceResponse"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.irswaption_volatility",
        "module_version": "2.1.0b5"
    }
]