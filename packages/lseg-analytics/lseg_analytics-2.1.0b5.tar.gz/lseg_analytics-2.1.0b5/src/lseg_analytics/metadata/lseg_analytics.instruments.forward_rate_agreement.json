[
    {
        "type": "ClassChunk",
        "name": "FinancialContractResponse",
        "id": "lseg_analytics.instruments.forward_rate_agreement.FinancialContractResponse",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "data",
                "type": "List[Any]"
            },
            {
                "name": "headers",
                "type": "List[Header]"
            },
            {
                "name": "statuses",
                "type": "List[int]"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 27216,
        "content": "class FinancialContractResponse:\n    \"\"\"The tabular response of the Financial Contract API of the Quantitative Analytics service.\n\n    Attributes\n    ----------\n    data : list[any]\n        The list that contains the values of requested fields for each\n        Financial Contract definition sent.Financial Contracts appears in the\n        rows and fields in the columns.  The default value is None, needs to be\n        assigned before using.\n    headers : list[~analyticsapi.models.Header]\n        The column headers of the requested fields.  The default value is None,\n        needs to be assigned before using.\n    statuses : list[int]\n        A list that contains the status of each calculation requested. Each\n        code is described in the \"Messages\" property. Codes higher than 1000\n        represents errors.  The default value is None, needs to be assigned\n        before using.\n    \n    \"\"\"\n    data: typing.Optional[typing.List[typing.Any]]\n    headers: typing.Optional[typing.List[ForwardRef('_models.Header')]]\n    statuses: typing.Optional[typing.List[int]]",
        "metadata": {
            "doc": "The tabular response of the Financial Contract API of the Quantitative Analytics service.\n\n    Attributes\n    ----------\n    data : list[any]\n        The list that contains the values of requested fields for each\n        Financial Contract definition sent.Financial Contracts appears in the\n        rows and fields in the columns.  The default value is None, needs to be\n        assigned before using.\n    headers : list[~analyticsapi.models.Header]\n        The column headers of the requested fields.  The default value is None,\n        needs to be assigned before using.\n    statuses : list[int]\n        A list that contains the status of each calculation requested. Each\n        code is described in the \"Messages\" property. Codes higher than 1000\n        represents errors.  The default value is None, needs to be assigned\n        before using.\n    \n",
            "annotations": "    data: typing.Optional[typing.List[typing.Any]]\n    headers: typing.Optional[typing.List[ForwardRef('_models.Header')]]\n    statuses: typing.Optional[typing.List[int]]",
            "signature": "class FinancialContractResponse:\n    \"\"\"\"\"\"\n    data: typing.Optional[typing.List[typing.Any]]\n    headers: typing.Optional[typing.List[ForwardRef('_models.Header')]]\n    statuses: typing.Optional[typing.List[int]]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.forward_rate_agreement.FinancialContractResponse.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.Header"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "FinancialContractResponse.__init__",
        "id": "lseg_analytics.instruments.forward_rate_agreement.FinancialContractResponse.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 27263,
        "content": "class FinancialContractResponse:\n    @overload\n    def __init__(self, *, data: Optional[List[Any]] = None, headers: Optional[List[ForwardRef('_models.Header')]] = None, statuses: Optional[List[int]] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "FinancialContractResponse"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.forward_rate_agreement.FinancialContractResponse"
            ],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.Header"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "ForwardRateAgreementAnalyticsResponseData",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementAnalyticsResponseData",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "definitions",
                "type": "List[ForwardRateAgreementDefinitionInstrument]"
            },
            {
                "name": "pricing_preferences",
                "type": "ForwardRateAgreementPricingParameters"
            },
            {
                "name": "analytics",
                "type": "List[ForwardRateAgreementAnalyticsResponseWithError]"
            },
            {
                "name": "market_data",
                "type": "MarketDataQps"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 28262,
        "content": "class ForwardRateAgreementAnalyticsResponseData:\n    \"\"\"ForwardRateAgreementAnalyticsResponseData.\n\n    Attributes\n    ----------\n    definitions : list[~analyticsapi.models.ForwardRateAgreementDefinitionInstrument]\n        An array of objects describing a curve or an instrument. Please provide\n        either a full definition (for a user-defined curve/instrument), or\n        reference to a curve/instrument definition saved in the platform, or\n        the code identifying the existing curve/instrument.  The default value\n        is None, needs to be assigned before using.\n    pricing_preferences : ~analyticsapi.models.ForwardRateAgreementPricingParameters\n        The parameters that control the computation of the analytics.\n    analytics : list[~analyticsapi.models.ForwardRateAgreementAnalyticsResponseWithError]\n        The result of the calculation request.  The default value is None,\n        needs to be assigned before using.\n    market_data : ~analyticsapi.models.MarketDataQps\n        The market data used to compute the analytics.\n    \n    \"\"\"\n    definitions: typing.Optional[typing.List[ForwardRef('_models.ForwardRateAgreementDefinitionInstrument')]]\n    pricing_preferences: typing.Optional[ForwardRef('_models.ForwardRateAgreementPricingParameters')]\n    analytics: typing.Optional[typing.List[ForwardRef('_models.ForwardRateAgreementAnalyticsResponseWithError')]]\n    market_data: typing.Optional[ForwardRef('_models.MarketDataQps')]",
        "metadata": {
            "doc": "ForwardRateAgreementAnalyticsResponseData.\n\n    Attributes\n    ----------\n    definitions : list[~analyticsapi.models.ForwardRateAgreementDefinitionInstrument]\n        An array of objects describing a curve or an instrument. Please provide\n        either a full definition (for a user-defined curve/instrument), or\n        reference to a curve/instrument definition saved in the platform, or\n        the code identifying the existing curve/instrument.  The default value\n        is None, needs to be assigned before using.\n    pricing_preferences : ~analyticsapi.models.ForwardRateAgreementPricingParameters\n        The parameters that control the computation of the analytics.\n    analytics : list[~analyticsapi.models.ForwardRateAgreementAnalyticsResponseWithError]\n        The result of the calculation request.  The default value is None,\n        needs to be assigned before using.\n    market_data : ~analyticsapi.models.MarketDataQps\n        The market data used to compute the analytics.\n    \n",
            "annotations": "    definitions: typing.Optional[typing.List[ForwardRef('_models.ForwardRateAgreementDefinitionInstrument')]]\n    pricing_preferences: typing.Optional[ForwardRef('_models.ForwardRateAgreementPricingParameters')]\n    analytics: typing.Optional[typing.List[ForwardRef('_models.ForwardRateAgreementAnalyticsResponseWithError')]]\n    market_data: typing.Optional[ForwardRef('_models.MarketDataQps')]",
            "signature": "class ForwardRateAgreementAnalyticsResponseData:\n    \"\"\"\"\"\"\n    definitions: typing.Optional[typing.List[ForwardRef('_models.ForwardRateAgreementDefinitionInstrument')]]\n    pricing_preferences: typing.Optional[ForwardRef('_models.ForwardRateAgreementPricingParameters')]\n    analytics: typing.Optional[typing.List[ForwardRef('_models.ForwardRateAgreementAnalyticsResponseWithError')]]\n    market_data: typing.Optional[ForwardRef('_models.MarketDataQps')]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementAnalyticsResponseData.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDefinitionInstrument",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementPricingParameters",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementAnalyticsResponseWithError",
                "lseg_analytics.instruments.forward_rate_agreement.MarketDataQps"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "ForwardRateAgreementAnalyticsResponseData.__init__",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementAnalyticsResponseData.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 28315,
        "content": "class ForwardRateAgreementAnalyticsResponseData:\n    @overload\n    def __init__(self, *, definitions: Optional[List[ForwardRef('_models.ForwardRateAgreementDefinitionInstrument')]] = None, pricing_preferences: Optional[ForwardRef('_models.ForwardRateAgreementPricingParameters')] = None, analytics: Optional[List[ForwardRef('_models.ForwardRateAgreementAnalyticsResponseWithError')]] = None, market_data: Optional[ForwardRef('_models.MarketDataQps')] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "ForwardRateAgreementAnalyticsResponseData"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementAnalyticsResponseData"
            ],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDefinitionInstrument",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementPricingParameters",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementAnalyticsResponseWithError",
                "lseg_analytics.instruments.forward_rate_agreement.MarketDataQps"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "ForwardRateAgreementAnalyticsResponseWithError",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementAnalyticsResponseWithError",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "tabular_data",
                "type": "FinancialContractResponse"
            },
            {
                "name": "cashflows",
                "type": "ForwardRateAgreementCashflows"
            },
            {
                "name": "description",
                "type": "ForwardRateAgreementDescription"
            },
            {
                "name": "nominal_measures",
                "type": "ForwardRateAgreementNominalMeasures"
            },
            {
                "name": "pricing_analysis",
                "type": "ForwardRateAgreementPricingAnalysis"
            },
            {
                "name": "valuation",
                "type": "ForwardRateAgreementValuation"
            },
            {
                "name": "error",
                "type": "ServiceError"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 28319,
        "content": "class ForwardRateAgreementAnalyticsResponseWithError:\n    \"\"\"A model template describing a response with an error for a given object.\n\n    Attributes\n    ----------\n    tabular_data : ~analyticsapi.models.FinancialContractResponse\n        Standard Financial Contract Analytics in tabular format.\n    cashflows : ~analyticsapi.models.ForwardRateAgreementCashflows\n        Response categorized under Cashflows.\n    description : ~analyticsapi.models.ForwardRateAgreementDescription\n        Response categorized under Description.\n    nominal_measures : ~analyticsapi.models.ForwardRateAgreementNominalMeasures\n        Response categorized under Nominal measures.\n    pricing_analysis : ~analyticsapi.models.ForwardRateAgreementPricingAnalysis\n        Response categorized under Pricing analysis.\n    valuation : ~analyticsapi.models.ForwardRateAgreementValuation\n        Response categorized under Valuation.\n    error : ~analyticsapi.models.ServiceError\n        The error message for the calculation in case of a non-blocking error.\n    \n    \"\"\"\n    tabular_data: typing.Optional[ForwardRef('_models.FinancialContractResponse')]\n    cashflows: typing.Optional[ForwardRef('_models.ForwardRateAgreementCashflows')]\n    description: typing.Optional[ForwardRef('_models.ForwardRateAgreementDescription')]\n    nominal_measures: typing.Optional[ForwardRef('_models.ForwardRateAgreementNominalMeasures')]\n    pricing_analysis: typing.Optional[ForwardRef('_models.ForwardRateAgreementPricingAnalysis')]\n    valuation: typing.Optional[ForwardRef('_models.ForwardRateAgreementValuation')]\n    error: typing.Optional[ForwardRef('_models.ServiceError')]",
        "metadata": {
            "doc": "A model template describing a response with an error for a given object.\n\n    Attributes\n    ----------\n    tabular_data : ~analyticsapi.models.FinancialContractResponse\n        Standard Financial Contract Analytics in tabular format.\n    cashflows : ~analyticsapi.models.ForwardRateAgreementCashflows\n        Response categorized under Cashflows.\n    description : ~analyticsapi.models.ForwardRateAgreementDescription\n        Response categorized under Description.\n    nominal_measures : ~analyticsapi.models.ForwardRateAgreementNominalMeasures\n        Response categorized under Nominal measures.\n    pricing_analysis : ~analyticsapi.models.ForwardRateAgreementPricingAnalysis\n        Response categorized under Pricing analysis.\n    valuation : ~analyticsapi.models.ForwardRateAgreementValuation\n        Response categorized under Valuation.\n    error : ~analyticsapi.models.ServiceError\n        The error message for the calculation in case of a non-blocking error.\n    \n",
            "annotations": "    tabular_data: typing.Optional[ForwardRef('_models.FinancialContractResponse')]\n    cashflows: typing.Optional[ForwardRef('_models.ForwardRateAgreementCashflows')]\n    description: typing.Optional[ForwardRef('_models.ForwardRateAgreementDescription')]\n    nominal_measures: typing.Optional[ForwardRef('_models.ForwardRateAgreementNominalMeasures')]\n    pricing_analysis: typing.Optional[ForwardRef('_models.ForwardRateAgreementPricingAnalysis')]\n    valuation: typing.Optional[ForwardRef('_models.ForwardRateAgreementValuation')]\n    error: typing.Optional[ForwardRef('_models.ServiceError')]",
            "signature": "class ForwardRateAgreementAnalyticsResponseWithError:\n    \"\"\"\"\"\"\n    tabular_data: typing.Optional[ForwardRef('_models.FinancialContractResponse')]\n    cashflows: typing.Optional[ForwardRef('_models.ForwardRateAgreementCashflows')]\n    description: typing.Optional[ForwardRef('_models.ForwardRateAgreementDescription')]\n    nominal_measures: typing.Optional[ForwardRef('_models.ForwardRateAgreementNominalMeasures')]\n    pricing_analysis: typing.Optional[ForwardRef('_models.ForwardRateAgreementPricingAnalysis')]\n    valuation: typing.Optional[ForwardRef('_models.ForwardRateAgreementValuation')]\n    error: typing.Optional[ForwardRef('_models.ServiceError')]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementAnalyticsResponseWithError.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.FinancialContractResponse",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementCashflows",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDescription",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementNominalMeasures",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementPricingAnalysis",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementValuation",
                "lseg_analytics.common.ServiceError"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "ForwardRateAgreementAnalyticsResponseWithError.__init__",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementAnalyticsResponseWithError.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 28377,
        "content": "class ForwardRateAgreementAnalyticsResponseWithError:\n    @overload\n    def __init__(self, *, tabular_data: Optional[ForwardRef('_models.FinancialContractResponse')] = None, cashflows: Optional[ForwardRef('_models.ForwardRateAgreementCashflows')] = None, description: Optional[ForwardRef('_models.ForwardRateAgreementDescription')] = None, nominal_measures: Optional[ForwardRef('_models.ForwardRateAgreementNominalMeasures')] = None, pricing_analysis: Optional[ForwardRef('_models.ForwardRateAgreementPricingAnalysis')] = None, valuation: Optional[ForwardRef('_models.ForwardRateAgreementValuation')] = None, error: Optional[ForwardRef('_models.ServiceError')] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "ForwardRateAgreementAnalyticsResponseWithError"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementAnalyticsResponseWithError"
            ],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.FinancialContractResponse",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementCashflows",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDescription",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementNominalMeasures",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementPricingAnalysis",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementValuation",
                "lseg_analytics.common.ServiceError"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "ForwardRateAgreementCalculationResponse",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementCalculationResponse",
        "params": [
            {
                "name": "data",
                "type": "ForwardRateAgreementAnalyticsResponseData"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 28381,
        "content": "class ForwardRateAgreementCalculationResponse:\n    \"\"\"A model template describing the analytics response returned for an instrument provided as part\n    of the request.\n\n    Attributes\n    ----------\n    data : ~analyticsapi.models.ForwardRateAgreementAnalyticsResponseData\n        An object that contains calculated analytics, requested, and other data\n        used for calculation. Required.\n    \n    \"\"\"\n    data: _models.ForwardRateAgreementAnalyticsResponseData",
        "metadata": {
            "doc": "A model template describing the analytics response returned for an instrument provided as part\n    of the request.\n\n    Attributes\n    ----------\n    data : ~analyticsapi.models.ForwardRateAgreementAnalyticsResponseData\n        An object that contains calculated analytics, requested, and other data\n        used for calculation. Required.\n    \n",
            "annotations": "    data: _models.ForwardRateAgreementAnalyticsResponseData",
            "signature": "class ForwardRateAgreementCalculationResponse:\n    \"\"\"\"\"\"\n    data: _models.ForwardRateAgreementAnalyticsResponseData"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementCalculationResponse.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementAnalyticsResponseData"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "ForwardRateAgreementCalculationResponse.__init__",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementCalculationResponse.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 28411,
        "content": "class ForwardRateAgreementCalculationResponse:\n    @overload\n    def __init__(self, data: '_models.ForwardRateAgreementAnalyticsResponseData') -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "ForwardRateAgreementCalculationResponse"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementCalculationResponse"
            ],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementAnalyticsResponseData"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "ForwardRateAgreementCashflows",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementCashflows",
        "params": [
            {
                "name": "cash_flows",
                "type": "List[Any]"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 28418,
        "content": "class ForwardRateAgreementCashflows:\n    \"\"\"Cashflows Object.\n\n    Attributes\n    ----------\n    cash_flows : list[any]\n        The information on the contract's cash flows during its lifetime. It\n        consists of the following properties:\n\n        * instrumentType: the instrument type for which cash flows are computed,\n        * payments: the array of properties which define all instrument\ufffds cash flows (paid and\n        received) during its lifetime.\n\n        For more details, please refer here.  The default value is None, needs to be assigned before\n        using.\n    \n    \"\"\"\n    cash_flows: typing.Optional[typing.List[typing.Any]]",
        "metadata": {
            "doc": "Cashflows Object.\n\n    Attributes\n    ----------\n    cash_flows : list[any]\n        The information on the contract's cash flows during its lifetime. It\n        consists of the following properties:\n\n        * instrumentType: the instrument type for which cash flows are computed,\n        * payments: the array of properties which define all instrument\ufffds cash flows (paid and\n        received) during its lifetime.\n\n        For more details, please refer here.  The default value is None, needs to be assigned before\n        using.\n    \n",
            "annotations": "    cash_flows: typing.Optional[typing.List[typing.Any]]",
            "signature": "class ForwardRateAgreementCashflows:\n    \"\"\"\"\"\"\n    cash_flows: typing.Optional[typing.List[typing.Any]]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementCashflows.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "ForwardRateAgreementCashflows.__init__",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementCashflows.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 28461,
        "content": "class ForwardRateAgreementCashflows:\n    @overload\n    def __init__(self, cash_flows: Optional[List[Any]] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "ForwardRateAgreementCashflows"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementCashflows"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "ForwardRateAgreementDefinition",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDefinition",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "end_date",
                "type": "datetime"
            },
            {
                "name": "end_tenor",
                "type": "str"
            },
            {
                "name": "fixed_rate_percent",
                "type": "float"
            },
            {
                "name": "fixing_date",
                "type": "datetime"
            },
            {
                "name": "index_name",
                "type": "str"
            },
            {
                "name": "index_tenor",
                "type": "str"
            },
            {
                "name": "instrument_code",
                "type": "str"
            },
            {
                "name": "instrument_tag",
                "type": "str"
            },
            {
                "name": "interest_calculation_method",
                "type": "InterestCalculationMethodEnum",
                "valuelookup": "enum.InterestCalculationMethodEnum"
            },
            {
                "name": "notional_amount",
                "type": "float"
            },
            {
                "name": "notional_ccy",
                "type": "str"
            },
            {
                "name": "payment_business_day_convention",
                "type": "PaymentBusinessDayConventionEnum",
                "valuelookup": "enum.PaymentBusinessDayConventionEnum"
            },
            {
                "name": "start_date",
                "type": "datetime"
            },
            {
                "name": "start_tenor",
                "type": "str"
            },
            {
                "name": "tenor",
                "type": "str",
                "valuelookup": "tenors"
            },
            {
                "name": "trade_date",
                "type": "datetime"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 28561,
        "content": "class ForwardRateAgreementDefinition:\n    \"\"\"ForwardRateAgreementDefinition.\n\n    Attributes\n    ----------\n    end_date : ~datetime.datetime\n        The maturity or expiry date of the instrument. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). If instrumentCode is not defined, either:\n\n        * endDate, or\n        * endTenor, or\n        * tenor + [startDate, or startTenor] must be provided.\n\n        If instrumentCode is defined, the value comes from the instrument reference data.\n    end_tenor : str\n        The code indicating the period from ValuationDate to EndDate of the\n        instrument (e.g., '10M'). If instrumentCode is not defined, either:\n\n        * endDate, or\n        * endTenor, or\n        * tenor + [startDate, or startTenor] must be provided.\n\n        If instrumentCode is defined, the value comes from the instrument reference data.\n    fixed_rate_percent : float\n        The fixed interest rate used to derive future fixed interest payments\n        of the instrument (FRA rate negotiated by counterparties). The value is\n        expressed in percentages. Mandatory to calculate the market value of\n        the instrument. By default, it is equal to ParRatePercent.\n    fixing_date : ~datetime.datetime\n    index_name : str\n        The name of the floating rate index (e.g., 'EURIBOR'). The default\n        value depends on the notional currency.\n    index_tenor : str\n        The period code indicating the tenor of the underlying (reference)\n        floating rate index (e.g., '1M', '1Y'). If instrumentCode is defined,\n        the value comes from the instrument reference data. Otherwise, tenor is\n        used.\n    instrument_code : str\n        The code used to define the instrument.\n    instrument_tag : str\n        A user defined string to identify the instrument. It can be used to\n        link output results to the instrument definition. Limited to 40\n        characters. Only alphabetic, numeric and '- _.#=@' characters are\n        supported.\n    interest_calculation_method : str or ~analyticsapi.models.InterestCalculationMethodEnum\n        The Day Count Basis method used to calculate the coupon interest\n        payments. The default value depends on the notional currency. Known\n        values are: \"Dcb_30_360\", \"Dcb_30_360_US\", \"Dcb_30_360_German\",\n        \"Dcb_30_360_ISDA\", \"Dcb_30_365_ISDA\", \"Dcb_30_365_German\",\n        \"Dcb_30_365_Brazil\", \"Dcb_30_Actual_German\", \"Dcb_30_Actual\",\n        \"Dcb_30_Actual_ISDA\", \"Dcb_30E_360_ISMA\", \"Dcb_Actual_360\",\n        \"Dcb_Actual_364\", \"Dcb_Actual_365\", \"Dcb_Actual_Actual\",\n        \"Dcb_Actual_Actual_ISDA\", \"Dcb_Actual_Actual_AFB\",\n        \"Dcb_WorkingDays_252\", \"Dcb_Actual_365L\", \"Dcb_Actual_365P\",\n        \"Dcb_ActualLeapDay_365\", \"Dcb_ActualLeapDay_360\", \"Dcb_Actual_36525\",\n        \"Dcb_Actual_365_CanadianConvention\", and \"Dcb_Constant\".\n    notional_amount : float\n        The notional amount of the instrument. The default value is 1000000.\n    notional_ccy : str\n        The currency of the instrument's notional amount. The value is\n        expressed in ISO 4217 alphabetical format (e.g., 'EUR'). Mandatory if\n        instrumentCode is not defined. If instrumentCode is defined, the value\n        comes from the instrument reference data.\n    payment_business_day_convention : str or ~analyticsapi.models.PaymentBusinessDayConventionEnum\n        The method to adjust dates to a working day. Optional. Default value is\n        'ModifiedFollowing'. Known values are: \"ModifiedFollowing\",\n        \"NextBusinessDay\", \"PreviousBusinessDay\", \"NoMoving\",\n        \"EveryThirdWednesday\", and \"BbswModifiedFollowing\".\n    start_date : ~datetime.datetime\n        The code indicating the period from ValuationDate, or SpotDate to\n        StartDate of the instrument (e.g., '1M'). If instrumentCode is not\n        defined, either startDate or startTenor must be provided. If\n        instrumentCode is defined, the value comes from the instrument\n        reference data.\n    start_tenor : str\n        The code indicating the period from ValuationDate, or SpotDate to\n        StartDate of the instrument (e.g., '1M'). If instrumentCode is not\n        defined, either startDate or startTenor must be provided. If\n        instrumentCode is defined, the value comes from the instrument\n        reference data.\n    tenor : str\n        The code indicating the period between StartDate and EndDate of the\n        instrument (e.g., '6M', '1Y'). If instrumentCode is not defined,\n        either:\n\n        * endDate, or\n        * endTenor, or\n        * tenor + [startDate, or startTenor] must be provided.\n\n        If instrumentCode is defined, the value comes from the instrument reference data.\n    trade_date : ~datetime.datetime\n        The date when the instrument is traded. The value is expressed in ISO\n        8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '2021-01-01T00:00:00Z').\n        By default, it equals to marketDataDate, or valuationDate, or today's\n        date.\n    \n    \"\"\"\n    end_date: typing.Optional[datetime.datetime]\n    end_tenor: typing.Optional[str]\n    fixed_rate_percent: typing.Optional[float]\n    fixing_date: typing.Optional[datetime.datetime]\n    index_name: typing.Optional[str]\n    index_tenor: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    instrument_tag: typing.Optional[str]\n    interest_calculation_method: typing.Union[str, ForwardRef('_models.InterestCalculationMethodEnum'), NoneType]\n    notional_amount: typing.Optional[float]\n    notional_ccy: typing.Optional[str]\n    payment_business_day_convention: typing.Union[str, ForwardRef('_models.PaymentBusinessDayConventionEnum'), NoneType]\n    start_date: typing.Optional[datetime.datetime]\n    start_tenor: typing.Optional[str]\n    tenor: typing.Optional[str]\n    trade_date: typing.Optional[datetime.datetime]",
        "metadata": {
            "doc": "ForwardRateAgreementDefinition.\n\n    Attributes\n    ----------\n    end_date : ~datetime.datetime\n        The maturity or expiry date of the instrument. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). If instrumentCode is not defined, either:\n\n        * endDate, or\n        * endTenor, or\n        * tenor + [startDate, or startTenor] must be provided.\n\n        If instrumentCode is defined, the value comes from the instrument reference data.\n    end_tenor : str\n        The code indicating the period from ValuationDate to EndDate of the\n        instrument (e.g., '10M'). If instrumentCode is not defined, either:\n\n        * endDate, or\n        * endTenor, or\n        * tenor + [startDate, or startTenor] must be provided.\n\n        If instrumentCode is defined, the value comes from the instrument reference data.\n    fixed_rate_percent : float\n        The fixed interest rate used to derive future fixed interest payments\n        of the instrument (FRA rate negotiated by counterparties). The value is\n        expressed in percentages. Mandatory to calculate the market value of\n        the instrument. By default, it is equal to ParRatePercent.\n    fixing_date : ~datetime.datetime\n    index_name : str\n        The name of the floating rate index (e.g., 'EURIBOR'). The default\n        value depends on the notional currency.\n    index_tenor : str\n        The period code indicating the tenor of the underlying (reference)\n        floating rate index (e.g., '1M', '1Y'). If instrumentCode is defined,\n        the value comes from the instrument reference data. Otherwise, tenor is\n        used.\n    instrument_code : str\n        The code used to define the instrument.\n    instrument_tag : str\n        A user defined string to identify the instrument. It can be used to\n        link output results to the instrument definition. Limited to 40\n        characters. Only alphabetic, numeric and '- _.#=@' characters are\n        supported.\n    interest_calculation_method : str or ~analyticsapi.models.InterestCalculationMethodEnum\n        The Day Count Basis method used to calculate the coupon interest\n        payments. The default value depends on the notional currency. Known\n        values are: \"Dcb_30_360\", \"Dcb_30_360_US\", \"Dcb_30_360_German\",\n        \"Dcb_30_360_ISDA\", \"Dcb_30_365_ISDA\", \"Dcb_30_365_German\",\n        \"Dcb_30_365_Brazil\", \"Dcb_30_Actual_German\", \"Dcb_30_Actual\",\n        \"Dcb_30_Actual_ISDA\", \"Dcb_30E_360_ISMA\", \"Dcb_Actual_360\",\n        \"Dcb_Actual_364\", \"Dcb_Actual_365\", \"Dcb_Actual_Actual\",\n        \"Dcb_Actual_Actual_ISDA\", \"Dcb_Actual_Actual_AFB\",\n        \"Dcb_WorkingDays_252\", \"Dcb_Actual_365L\", \"Dcb_Actual_365P\",\n        \"Dcb_ActualLeapDay_365\", \"Dcb_ActualLeapDay_360\", \"Dcb_Actual_36525\",\n        \"Dcb_Actual_365_CanadianConvention\", and \"Dcb_Constant\".\n    notional_amount : float\n        The notional amount of the instrument. The default value is 1000000.\n    notional_ccy : str\n        The currency of the instrument's notional amount. The value is\n        expressed in ISO 4217 alphabetical format (e.g., 'EUR'). Mandatory if\n        instrumentCode is not defined. If instrumentCode is defined, the value\n        comes from the instrument reference data.\n    payment_business_day_convention : str or ~analyticsapi.models.PaymentBusinessDayConventionEnum\n        The method to adjust dates to a working day. Optional. Default value is\n        'ModifiedFollowing'. Known values are: \"ModifiedFollowing\",\n        \"NextBusinessDay\", \"PreviousBusinessDay\", \"NoMoving\",\n        \"EveryThirdWednesday\", and \"BbswModifiedFollowing\".\n    start_date : ~datetime.datetime\n        The code indicating the period from ValuationDate, or SpotDate to\n        StartDate of the instrument (e.g., '1M'). If instrumentCode is not\n        defined, either startDate or startTenor must be provided. If\n        instrumentCode is defined, the value comes from the instrument\n        reference data.\n    start_tenor : str\n        The code indicating the period from ValuationDate, or SpotDate to\n        StartDate of the instrument (e.g., '1M'). If instrumentCode is not\n        defined, either startDate or startTenor must be provided. If\n        instrumentCode is defined, the value comes from the instrument\n        reference data.\n    tenor : str\n        The code indicating the period between StartDate and EndDate of the\n        instrument (e.g., '6M', '1Y'). If instrumentCode is not defined,\n        either:\n\n        * endDate, or\n        * endTenor, or\n        * tenor + [startDate, or startTenor] must be provided.\n\n        If instrumentCode is defined, the value comes from the instrument reference data.\n    trade_date : ~datetime.datetime\n        The date when the instrument is traded. The value is expressed in ISO\n        8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '2021-01-01T00:00:00Z').\n        By default, it equals to marketDataDate, or valuationDate, or today's\n        date.\n    \n",
            "annotations": "    end_date: typing.Optional[datetime.datetime]\n    end_tenor: typing.Optional[str]\n    fixed_rate_percent: typing.Optional[float]\n    fixing_date: typing.Optional[datetime.datetime]\n    index_name: typing.Optional[str]\n    index_tenor: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    instrument_tag: typing.Optional[str]\n    interest_calculation_method: typing.Union[str, ForwardRef('_models.InterestCalculationMethodEnum'), NoneType]\n    notional_amount: typing.Optional[float]\n    notional_ccy: typing.Optional[str]\n    payment_business_day_convention: typing.Union[str, ForwardRef('_models.PaymentBusinessDayConventionEnum'), NoneType]\n    start_date: typing.Optional[datetime.datetime]\n    start_tenor: typing.Optional[str]\n    tenor: typing.Optional[str]\n    trade_date: typing.Optional[datetime.datetime]",
            "signature": "class ForwardRateAgreementDefinition:\n    \"\"\"\"\"\"\n    end_date: typing.Optional[datetime.datetime]\n    end_tenor: typing.Optional[str]\n    fixed_rate_percent: typing.Optional[float]\n    fixing_date: typing.Optional[datetime.datetime]\n    index_name: typing.Optional[str]\n    index_tenor: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    instrument_tag: typing.Optional[str]\n    interest_calculation_method: typing.Union[str, ForwardRef('_models.InterestCalculationMethodEnum'), NoneType]\n    notional_amount: typing.Optional[float]\n    notional_ccy: typing.Optional[str]\n    payment_business_day_convention: typing.Union[str, ForwardRef('_models.PaymentBusinessDayConventionEnum'), NoneType]\n    start_date: typing.Optional[datetime.datetime]\n    start_tenor: typing.Optional[str]\n    tenor: typing.Optional[str]\n    trade_date: typing.Optional[datetime.datetime]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDefinition.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.InterestCalculationMethodEnum",
                "lseg_analytics.instruments.forward_rate_agreement.PaymentBusinessDayConventionEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "ForwardRateAgreementDefinition.__init__",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDefinition.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 28784,
        "content": "class ForwardRateAgreementDefinition:\n    @overload\n    def __init__(self, *, end_date: Optional[datetime.datetime] = None, end_tenor: Optional[str] = None, fixed_rate_percent: Optional[float] = None, fixing_date: Optional[datetime.datetime] = None, index_name: Optional[str] = None, index_tenor: Optional[str] = None, instrument_code: Optional[str] = None, instrument_tag: Optional[str] = None, interest_calculation_method: Union[str, ForwardRef('_models.InterestCalculationMethodEnum'), NoneType] = None, notional_amount: Optional[float] = None, notional_ccy: Optional[str] = None, payment_business_day_convention: Union[str, ForwardRef('_models.PaymentBusinessDayConventionEnum'), NoneType] = None, start_date: Optional[datetime.datetime] = None, start_tenor: Optional[str] = None, tenor: Optional[str] = None, trade_date: Optional[datetime.datetime] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "ForwardRateAgreementDefinition"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDefinition"
            ],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.InterestCalculationMethodEnum",
                "lseg_analytics.instruments.forward_rate_agreement.PaymentBusinessDayConventionEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "ForwardRateAgreementDefinitionInstrument",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDefinitionInstrument",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "definition",
                "type": "ForwardRateAgreementDefinition"
            },
            {
                "name": "reference",
                "type": "str"
            },
            {
                "name": "code",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 28788,
        "content": "class ForwardRateAgreementDefinitionInstrument:\n    \"\"\"An array of objects describing a curve or an instrument.\n    Please provide either a full definition (for a user-defined curve/instrument), or reference to\n    a curve/instrument definition saved in the platform, or the code identifying the existing\n    curve/instrument.\n\n    Attributes\n    ----------\n    definition : ~analyticsapi.models.ForwardRateAgreementDefinition\n        The object that describes the definition of the instrument.\n    reference : str\n        The identifier of a resource (instrument definition, curve definition)\n        that is already in the platform.\n    code : str\n        The unique public code used to identify an instrument that exists on\n        the market (ISIN, RIC, etc.).\n    \n    \"\"\"\n    definition: typing.Optional[ForwardRef('_models.ForwardRateAgreementDefinition')]\n    reference: typing.Optional[str]\n    code: typing.Optional[str]",
        "metadata": {
            "doc": "An array of objects describing a curve or an instrument.\n    Please provide either a full definition (for a user-defined curve/instrument), or reference to\n    a curve/instrument definition saved in the platform, or the code identifying the existing\n    curve/instrument.\n\n    Attributes\n    ----------\n    definition : ~analyticsapi.models.ForwardRateAgreementDefinition\n        The object that describes the definition of the instrument.\n    reference : str\n        The identifier of a resource (instrument definition, curve definition)\n        that is already in the platform.\n    code : str\n        The unique public code used to identify an instrument that exists on\n        the market (ISIN, RIC, etc.).\n    \n",
            "annotations": "    definition: typing.Optional[ForwardRef('_models.ForwardRateAgreementDefinition')]\n    reference: typing.Optional[str]\n    code: typing.Optional[str]",
            "signature": "class ForwardRateAgreementDefinitionInstrument:\n    \"\"\"\"\"\"\n    definition: typing.Optional[ForwardRef('_models.ForwardRateAgreementDefinition')]\n    reference: typing.Optional[str]\n    code: typing.Optional[str]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDefinitionInstrument.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDefinition"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "ForwardRateAgreementDefinitionInstrument.__init__",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDefinitionInstrument.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 28833,
        "content": "class ForwardRateAgreementDefinitionInstrument:\n    @overload\n    def __init__(self, *, definition: Optional[ForwardRef('_models.ForwardRateAgreementDefinition')] = None, reference: Optional[str] = None, code: Optional[str] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "ForwardRateAgreementDefinitionInstrument"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDefinitionInstrument"
            ],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDefinition"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "ForwardRateAgreementDescription",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDescription",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "instrument_type",
                "type": "str"
            },
            {
                "name": "instrument_code",
                "type": "str"
            },
            {
                "name": "instrument_tag",
                "type": "str"
            },
            {
                "name": "instrument_description",
                "type": "str"
            },
            {
                "name": "trade_date",
                "type": "datetime"
            },
            {
                "name": "spot_date",
                "type": "datetime"
            },
            {
                "name": "fixing_date",
                "type": "datetime"
            },
            {
                "name": "start_date",
                "type": "datetime"
            },
            {
                "name": "end_date",
                "type": "datetime"
            },
            {
                "name": "tenor",
                "type": "str",
                "valuelookup": "tenors"
            },
            {
                "name": "calendar",
                "type": "str"
            },
            {
                "name": "notional_ccy",
                "type": "str"
            },
            {
                "name": "notional_amount",
                "type": "float"
            },
            {
                "name": "report_ccy",
                "type": "str"
            },
            {
                "name": "interest_calculation_method",
                "type": "str"
            },
            {
                "name": "index_name",
                "type": "str"
            },
            {
                "name": "index_tenor",
                "type": "str"
            },
            {
                "name": "price_side",
                "type": "str"
            },
            {
                "name": "forward_curve_name",
                "type": "str"
            },
            {
                "name": "discount_curve_name",
                "type": "str"
            },
            {
                "name": "error_code",
                "type": "str"
            },
            {
                "name": "error_message",
                "type": "str"
            },
            {
                "name": "processing_information",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 28837,
        "content": "class ForwardRateAgreementDescription:\n    \"\"\"Description Object.\n\n    Attributes\n    ----------\n    instrument_type : str\n        The type of instrument defined in the request.  The possible values are\n        listed  here  .\n    instrument_code : str\n        The code used to define the instrument.\n    instrument_tag : str\n        A user defined string to identify the instrument. It can be used to\n        link output results to the instrument definition. Limited to 40\n        characters. Only alphabetic, numeric and '- _.#=@' characters are\n        supported.\n    instrument_description : str\n        The label that describes the instrument.\n    trade_date : ~datetime.datetime\n        The date when the instrument is traded. The value is expressed in ISO\n        8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '2021-01-01T00:00:00Z').\n    spot_date : ~datetime.datetime\n        The date when a spot transaction is settled. The date is defined by the\n        market conventions. The value is expressed in ISO 8601 format: YYYY-MM-\n        DDT[hh]:[mm]:[ss]Z (e.g., '2021-01-01T00:00:00Z').\n    fixing_date : ~datetime.datetime\n        The date at which the settlement amount of the instrument is\n        calculated. This date is defined as [  StartDate  - 2WD]. The value is\n        expressed in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z').\n    start_date : ~datetime.datetime\n        The start date of the instrument. The value is expressed in ISO 8601\n        format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '2021-01-01T00:00:00Z').\n    end_date : ~datetime.datetime\n        The maturity or expiry date of the instrument. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z').\n    tenor : str\n        The code indicating the period between  StartDate  and  EndDate  of the\n        instrument (e.g., '6M', '1Y').\n    calendar : str\n        A list of comma-separated calendar codes to adjust dates (e.g., 'EMU'\n        or 'USA'). It is the calendar associated with the market conventions\n        depending on the notional currency. The possible values are listed\n        here  .\n    notional_ccy : str\n        The currency of the instrument's notional amount. The value is\n        expressed in ISO 4217 alphabetical format (e.g., 'USD').\n    notional_amount : float\n        The notional amount of the instrument.\n    report_ccy : str\n        The currency code set for the fields ending with '  xxxInReportCcy  '.\n        The value is expressed in ISO 4217 alphabetical format (e.g., '  USD\n        ').\n    interest_calculation_method : str\n        The day count basis method used to calculate the interest payments. The\n        possible values are listed  here  .\n    index_name : str\n        The name of the floating rate index (e.g., 'EURIBOR'). The possible\n        values depending on the currency are listed  here  .\n    index_tenor : str\n        The period code indicating the tenor of the underlying floating rate\n        index (e.g., '1M', '1Y').\n    price_side : str\n        The price side of the instrument which comes from the instrument's\n        quote or from the curve (derived from quotes) used to value the\n        instrument. The possible values are:\n\n        * Bid,\n        * Ask,\n        * Mid.\n    forward_curve_name : str\n        The name of the zero-coupon curve used to derive forward index values\n        for the instrument. Examples could be as follows:\n\n        * EUR EURIBOR 6M: a zero-coupon curve bootstrapped from EURIBOR 6M swaps,\n        * USD LIBOR OIS disc. COP COIBR OIS: a cross-currency curve COP COIBR OIS discounted by USD\n        LIBOR OIS.\n    discount_curve_name : str\n        The name of the zero-coupon curve used to discount the instrument's\n        cash flows. Specifying data for this curve can be set using the market\n        data section. By default, the discount curve is found from the\n        instrument's currency and frequency.\n    error_code : str\n        The code of  ErrorMessage  .\n    error_message : str\n        The error message in case of a blocking error in calculation.\n    processing_information : str\n        The error message for the calculation in case of a non-blocking error.\n    \n    \"\"\"\n    instrument_type: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    instrument_tag: typing.Optional[str]\n    instrument_description: typing.Optional[str]\n    trade_date: typing.Optional[datetime.datetime]\n    spot_date: typing.Optional[datetime.datetime]\n    fixing_date: typing.Optional[datetime.datetime]\n    start_date: typing.Optional[datetime.datetime]\n    end_date: typing.Optional[datetime.datetime]\n    tenor: typing.Optional[str]\n    calendar: typing.Optional[str]\n    notional_ccy: typing.Optional[str]\n    notional_amount: typing.Optional[float]\n    report_ccy: typing.Optional[str]\n    interest_calculation_method: typing.Optional[str]\n    index_name: typing.Optional[str]\n    index_tenor: typing.Optional[str]\n    price_side: typing.Optional[str]\n    forward_curve_name: typing.Optional[str]\n    discount_curve_name: typing.Optional[str]\n    error_code: typing.Optional[str]\n    error_message: typing.Optional[str]\n    processing_information: typing.Optional[str]",
        "metadata": {
            "doc": "Description Object.\n\n    Attributes\n    ----------\n    instrument_type : str\n        The type of instrument defined in the request.  The possible values are\n        listed  here  .\n    instrument_code : str\n        The code used to define the instrument.\n    instrument_tag : str\n        A user defined string to identify the instrument. It can be used to\n        link output results to the instrument definition. Limited to 40\n        characters. Only alphabetic, numeric and '- _.#=@' characters are\n        supported.\n    instrument_description : str\n        The label that describes the instrument.\n    trade_date : ~datetime.datetime\n        The date when the instrument is traded. The value is expressed in ISO\n        8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '2021-01-01T00:00:00Z').\n    spot_date : ~datetime.datetime\n        The date when a spot transaction is settled. The date is defined by the\n        market conventions. The value is expressed in ISO 8601 format: YYYY-MM-\n        DDT[hh]:[mm]:[ss]Z (e.g., '2021-01-01T00:00:00Z').\n    fixing_date : ~datetime.datetime\n        The date at which the settlement amount of the instrument is\n        calculated. This date is defined as [  StartDate  - 2WD]. The value is\n        expressed in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z').\n    start_date : ~datetime.datetime\n        The start date of the instrument. The value is expressed in ISO 8601\n        format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '2021-01-01T00:00:00Z').\n    end_date : ~datetime.datetime\n        The maturity or expiry date of the instrument. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z').\n    tenor : str\n        The code indicating the period between  StartDate  and  EndDate  of the\n        instrument (e.g., '6M', '1Y').\n    calendar : str\n        A list of comma-separated calendar codes to adjust dates (e.g., 'EMU'\n        or 'USA'). It is the calendar associated with the market conventions\n        depending on the notional currency. The possible values are listed\n        here  .\n    notional_ccy : str\n        The currency of the instrument's notional amount. The value is\n        expressed in ISO 4217 alphabetical format (e.g., 'USD').\n    notional_amount : float\n        The notional amount of the instrument.\n    report_ccy : str\n        The currency code set for the fields ending with '  xxxInReportCcy  '.\n        The value is expressed in ISO 4217 alphabetical format (e.g., '  USD\n        ').\n    interest_calculation_method : str\n        The day count basis method used to calculate the interest payments. The\n        possible values are listed  here  .\n    index_name : str\n        The name of the floating rate index (e.g., 'EURIBOR'). The possible\n        values depending on the currency are listed  here  .\n    index_tenor : str\n        The period code indicating the tenor of the underlying floating rate\n        index (e.g., '1M', '1Y').\n    price_side : str\n        The price side of the instrument which comes from the instrument's\n        quote or from the curve (derived from quotes) used to value the\n        instrument. The possible values are:\n\n        * Bid,\n        * Ask,\n        * Mid.\n    forward_curve_name : str\n        The name of the zero-coupon curve used to derive forward index values\n        for the instrument. Examples could be as follows:\n\n        * EUR EURIBOR 6M: a zero-coupon curve bootstrapped from EURIBOR 6M swaps,\n        * USD LIBOR OIS disc. COP COIBR OIS: a cross-currency curve COP COIBR OIS discounted by USD\n        LIBOR OIS.\n    discount_curve_name : str\n        The name of the zero-coupon curve used to discount the instrument's\n        cash flows. Specifying data for this curve can be set using the market\n        data section. By default, the discount curve is found from the\n        instrument's currency and frequency.\n    error_code : str\n        The code of  ErrorMessage  .\n    error_message : str\n        The error message in case of a blocking error in calculation.\n    processing_information : str\n        The error message for the calculation in case of a non-blocking error.\n    \n",
            "annotations": "    instrument_type: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    instrument_tag: typing.Optional[str]\n    instrument_description: typing.Optional[str]\n    trade_date: typing.Optional[datetime.datetime]\n    spot_date: typing.Optional[datetime.datetime]\n    fixing_date: typing.Optional[datetime.datetime]\n    start_date: typing.Optional[datetime.datetime]\n    end_date: typing.Optional[datetime.datetime]\n    tenor: typing.Optional[str]\n    calendar: typing.Optional[str]\n    notional_ccy: typing.Optional[str]\n    notional_amount: typing.Optional[float]\n    report_ccy: typing.Optional[str]\n    interest_calculation_method: typing.Optional[str]\n    index_name: typing.Optional[str]\n    index_tenor: typing.Optional[str]\n    price_side: typing.Optional[str]\n    forward_curve_name: typing.Optional[str]\n    discount_curve_name: typing.Optional[str]\n    error_code: typing.Optional[str]\n    error_message: typing.Optional[str]\n    processing_information: typing.Optional[str]",
            "signature": "class ForwardRateAgreementDescription:\n    \"\"\"\"\"\"\n    instrument_type: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    instrument_tag: typing.Optional[str]\n    instrument_description: typing.Optional[str]\n    trade_date: typing.Optional[datetime.datetime]\n    spot_date: typing.Optional[datetime.datetime]\n    fixing_date: typing.Optional[datetime.datetime]\n    start_date: typing.Optional[datetime.datetime]\n    end_date: typing.Optional[datetime.datetime]\n    tenor: typing.Optional[str]\n    calendar: typing.Optional[str]\n    notional_ccy: typing.Optional[str]\n    notional_amount: typing.Optional[float]\n    report_ccy: typing.Optional[str]\n    interest_calculation_method: typing.Optional[str]\n    index_name: typing.Optional[str]\n    index_tenor: typing.Optional[str]\n    price_side: typing.Optional[str]\n    forward_curve_name: typing.Optional[str]\n    discount_curve_name: typing.Optional[str]\n    error_code: typing.Optional[str]\n    error_message: typing.Optional[str]\n    processing_information: typing.Optional[str]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDescription.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "ForwardRateAgreementDescription.__init__",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDescription.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 29042,
        "content": "class ForwardRateAgreementDescription:\n    @overload\n    def __init__(self, *, instrument_type: Optional[str] = None, instrument_code: Optional[str] = None, instrument_tag: Optional[str] = None, instrument_description: Optional[str] = None, trade_date: Optional[datetime.datetime] = None, spot_date: Optional[datetime.datetime] = None, fixing_date: Optional[datetime.datetime] = None, start_date: Optional[datetime.datetime] = None, end_date: Optional[datetime.datetime] = None, tenor: Optional[str] = None, calendar: Optional[str] = None, notional_ccy: Optional[str] = None, notional_amount: Optional[float] = None, report_ccy: Optional[str] = None, interest_calculation_method: Optional[str] = None, index_name: Optional[str] = None, index_tenor: Optional[str] = None, price_side: Optional[str] = None, forward_curve_name: Optional[str] = None, discount_curve_name: Optional[str] = None, error_code: Optional[str] = None, error_message: Optional[str] = None, processing_information: Optional[str] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "ForwardRateAgreementDescription"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDescription"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "ForwardRateAgreementNominalMeasures",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementNominalMeasures",
        "params": [
            {
                "name": "pv01_bp",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 29046,
        "content": "class ForwardRateAgreementNominalMeasures:\n    \"\"\"Nominal measures Object.\n\n    Attributes\n    ----------\n    pv01_bp : float\n        The sensitivity of the net present value to a  1 bp  parallel shift in\n        the yield curve. The value is expressed in basis points.\n    \n    \"\"\"\n    pv01_bp: typing.Optional[float]",
        "metadata": {
            "doc": "Nominal measures Object.\n\n    Attributes\n    ----------\n    pv01_bp : float\n        The sensitivity of the net present value to a  1 bp  parallel shift in\n        the yield curve. The value is expressed in basis points.\n    \n",
            "annotations": "    pv01_bp: typing.Optional[float]",
            "signature": "class ForwardRateAgreementNominalMeasures:\n    \"\"\"\"\"\"\n    pv01_bp: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementNominalMeasures.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "ForwardRateAgreementNominalMeasures.__init__",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementNominalMeasures.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 29075,
        "content": "class ForwardRateAgreementNominalMeasures:\n    @overload\n    def __init__(self, pv01_bp: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "ForwardRateAgreementNominalMeasures"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementNominalMeasures"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "ForwardRateAgreementPricingAnalysis",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementPricingAnalysis",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "market_data_date",
                "type": "datetime"
            },
            {
                "name": "valuation_date",
                "type": "datetime"
            },
            {
                "name": "discount_factor",
                "type": "float"
            },
            {
                "name": "fixed_rate_percent",
                "type": "float"
            },
            {
                "name": "par_rate_percent",
                "type": "float"
            },
            {
                "name": "spread_bp",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 29082,
        "content": "class ForwardRateAgreementPricingAnalysis:\n    \"\"\"Pricing analysis Object.\n\n    Attributes\n    ----------\n    market_data_date : ~datetime.datetime\n        The date at which the market data is retrieved. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z').\n    valuation_date : ~datetime.datetime\n        The date at which the instrument is valued. The value is expressed in\n        ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z').\n    discount_factor : float\n        The ratio used to calculate the present value of the future cash flows\n        of the instrument.\n    fixed_rate_percent : float\n        The interest rate used to derive future fixed interest payments of the\n        instrument. The value is expressed in percentages.\n    par_rate_percent : float\n        The fixed interest rate of the instrument at which in theory\n        MarketValueInDealCcy  = 0. The value is expressed in percentages.\n    spread_bp : float\n        The spread applied to the floating interest rate of the instrument. The\n        value is expressed in basis points. For more details on the field\n        calculation, please refer here.\n    \n    \"\"\"\n    market_data_date: typing.Optional[datetime.datetime]\n    valuation_date: typing.Optional[datetime.datetime]\n    discount_factor: typing.Optional[float]\n    fixed_rate_percent: typing.Optional[float]\n    par_rate_percent: typing.Optional[float]\n    spread_bp: typing.Optional[float]",
        "metadata": {
            "doc": "Pricing analysis Object.\n\n    Attributes\n    ----------\n    market_data_date : ~datetime.datetime\n        The date at which the market data is retrieved. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z').\n    valuation_date : ~datetime.datetime\n        The date at which the instrument is valued. The value is expressed in\n        ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z').\n    discount_factor : float\n        The ratio used to calculate the present value of the future cash flows\n        of the instrument.\n    fixed_rate_percent : float\n        The interest rate used to derive future fixed interest payments of the\n        instrument. The value is expressed in percentages.\n    par_rate_percent : float\n        The fixed interest rate of the instrument at which in theory\n        MarketValueInDealCcy  = 0. The value is expressed in percentages.\n    spread_bp : float\n        The spread applied to the floating interest rate of the instrument. The\n        value is expressed in basis points. For more details on the field\n        calculation, please refer here.\n    \n",
            "annotations": "    market_data_date: typing.Optional[datetime.datetime]\n    valuation_date: typing.Optional[datetime.datetime]\n    discount_factor: typing.Optional[float]\n    fixed_rate_percent: typing.Optional[float]\n    par_rate_percent: typing.Optional[float]\n    spread_bp: typing.Optional[float]",
            "signature": "class ForwardRateAgreementPricingAnalysis:\n    \"\"\"\"\"\"\n    market_data_date: typing.Optional[datetime.datetime]\n    valuation_date: typing.Optional[datetime.datetime]\n    discount_factor: typing.Optional[float]\n    fixed_rate_percent: typing.Optional[float]\n    par_rate_percent: typing.Optional[float]\n    spread_bp: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementPricingAnalysis.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "ForwardRateAgreementPricingAnalysis.__init__",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementPricingAnalysis.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 29150,
        "content": "class ForwardRateAgreementPricingAnalysis:\n    @overload\n    def __init__(self, *, market_data_date: Optional[datetime.datetime] = None, valuation_date: Optional[datetime.datetime] = None, discount_factor: Optional[float] = None, fixed_rate_percent: Optional[float] = None, par_rate_percent: Optional[float] = None, spread_bp: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "ForwardRateAgreementPricingAnalysis"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementPricingAnalysis"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "ForwardRateAgreementPricingParameters",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementPricingParameters",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "market_data_date",
                "type": "datetime"
            },
            {
                "name": "price_side",
                "type": "PriceSideEnum",
                "valuelookup": "enum.PriceSideEnum"
            },
            {
                "name": "report_ccy",
                "type": "str"
            },
            {
                "name": "tenor_reference_date",
                "type": "TenorReferenceDateEnum",
                "valuelookup": "enum.TenorReferenceDateEnum"
            },
            {
                "name": "valuation_date",
                "type": "datetime"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 29154,
        "content": "class ForwardRateAgreementPricingParameters:\n    \"\"\"ForwardRateAgreementPricingParameters.\n\n    Attributes\n    ----------\n    market_data_date : ~datetime.datetime\n        The date at which the market data is retrieved. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). It should be less or equal to valuationDate).\n        Optional. By default, marketDataDate is valuationDate or today.\n    price_side : str or ~analyticsapi.models.PriceSideEnum\n        The price side of the instrument which comes from the instrument's\n        quote or from the curve (derived from quotes) used to value the\n        instrument. The possible values are: Bid, Ask, Mid. Optional. The\n        default value is 'Mid'. Known values are: \"Mid\", \"Bid\", \"Ask\", and\n        \"Last\".\n    report_ccy : str\n        The currency code set for the fields ending with 'xxxInReportCcy'. The\n        value is expressed in ISO 4217 alphabetical format (e.g., 'USD').\n        Optional. No default value applies.\n    tenor_reference_date : str or ~analyticsapi.models.TenorReferenceDateEnum\n        The reference date for the computation of the start and end dates from\n        the tenor. The possible values are:\n\n        * ValuationDate: StartDate is computed as [ValuationDate + StartTenor], EndDate is computed as\n        [ValuationDate + EndTenor],\n        * SpotDate: StartDate is computed as [ValuationDate + spot lag + StartTenor], EndDate is\n        computed as [ValuationDate + spot lag + EndTenor].\n\n        The default value is 'ValuationDate'. Known values are: \"SpotDate\" and \"ValuationDate\".\n    valuation_date : ~datetime.datetime\n        The date at which the instrument is valued. The value is expressed in\n        ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). It can't be greater than today's date. By\n        default, it equals to marketDataDate or today's date.\n    \n    \"\"\"\n    market_data_date: typing.Optional[datetime.datetime]\n    price_side: typing.Union[str, ForwardRef('_models.PriceSideEnum'), NoneType]\n    report_ccy: typing.Optional[str]\n    tenor_reference_date: typing.Union[str, ForwardRef('_models.TenorReferenceDateEnum'), NoneType]\n    valuation_date: typing.Optional[datetime.datetime]",
        "metadata": {
            "doc": "ForwardRateAgreementPricingParameters.\n\n    Attributes\n    ----------\n    market_data_date : ~datetime.datetime\n        The date at which the market data is retrieved. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). It should be less or equal to valuationDate).\n        Optional. By default, marketDataDate is valuationDate or today.\n    price_side : str or ~analyticsapi.models.PriceSideEnum\n        The price side of the instrument which comes from the instrument's\n        quote or from the curve (derived from quotes) used to value the\n        instrument. The possible values are: Bid, Ask, Mid. Optional. The\n        default value is 'Mid'. Known values are: \"Mid\", \"Bid\", \"Ask\", and\n        \"Last\".\n    report_ccy : str\n        The currency code set for the fields ending with 'xxxInReportCcy'. The\n        value is expressed in ISO 4217 alphabetical format (e.g., 'USD').\n        Optional. No default value applies.\n    tenor_reference_date : str or ~analyticsapi.models.TenorReferenceDateEnum\n        The reference date for the computation of the start and end dates from\n        the tenor. The possible values are:\n\n        * ValuationDate: StartDate is computed as [ValuationDate + StartTenor], EndDate is computed as\n        [ValuationDate + EndTenor],\n        * SpotDate: StartDate is computed as [ValuationDate + spot lag + StartTenor], EndDate is\n        computed as [ValuationDate + spot lag + EndTenor].\n\n        The default value is 'ValuationDate'. Known values are: \"SpotDate\" and \"ValuationDate\".\n    valuation_date : ~datetime.datetime\n        The date at which the instrument is valued. The value is expressed in\n        ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). It can't be greater than today's date. By\n        default, it equals to marketDataDate or today's date.\n    \n",
            "annotations": "    market_data_date: typing.Optional[datetime.datetime]\n    price_side: typing.Union[str, ForwardRef('_models.PriceSideEnum'), NoneType]\n    report_ccy: typing.Optional[str]\n    tenor_reference_date: typing.Union[str, ForwardRef('_models.TenorReferenceDateEnum'), NoneType]\n    valuation_date: typing.Optional[datetime.datetime]",
            "signature": "class ForwardRateAgreementPricingParameters:\n    \"\"\"\"\"\"\n    market_data_date: typing.Optional[datetime.datetime]\n    price_side: typing.Union[str, ForwardRef('_models.PriceSideEnum'), NoneType]\n    report_ccy: typing.Optional[str]\n    tenor_reference_date: typing.Union[str, ForwardRef('_models.TenorReferenceDateEnum'), NoneType]\n    valuation_date: typing.Optional[datetime.datetime]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementPricingParameters.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.PriceSideEnum",
                "lseg_analytics.instruments.forward_rate_agreement.TenorReferenceDateEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "ForwardRateAgreementPricingParameters.__init__",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementPricingParameters.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 29243,
        "content": "class ForwardRateAgreementPricingParameters:\n    @overload\n    def __init__(self, *, market_data_date: Optional[datetime.datetime] = None, price_side: Union[str, ForwardRef('_models.PriceSideEnum'), NoneType] = None, report_ccy: Optional[str] = None, tenor_reference_date: Union[str, ForwardRef('_models.TenorReferenceDateEnum'), NoneType] = None, valuation_date: Optional[datetime.datetime] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "ForwardRateAgreementPricingParameters"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementPricingParameters"
            ],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.PriceSideEnum",
                "lseg_analytics.instruments.forward_rate_agreement.TenorReferenceDateEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "ForwardRateAgreementValuation",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementValuation",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "market_value_in_deal_ccy",
                "type": "float"
            },
            {
                "name": "market_value_in_report_ccy",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 29247,
        "content": "class ForwardRateAgreementValuation:\n    \"\"\"Valuation Object.\n\n    Attributes\n    ----------\n    market_value_in_deal_ccy : float\n        The market value of the instrument. The value is expressed in the deal\n        currency.\n    market_value_in_report_ccy : float\n        The market value of the instrument. The value is expressed in the\n        reporting currency.\n    \n    \"\"\"\n    market_value_in_deal_ccy: typing.Optional[float]\n    market_value_in_report_ccy: typing.Optional[float]",
        "metadata": {
            "doc": "Valuation Object.\n\n    Attributes\n    ----------\n    market_value_in_deal_ccy : float\n        The market value of the instrument. The value is expressed in the deal\n        currency.\n    market_value_in_report_ccy : float\n        The market value of the instrument. The value is expressed in the\n        reporting currency.\n    \n",
            "annotations": "    market_value_in_deal_ccy: typing.Optional[float]\n    market_value_in_report_ccy: typing.Optional[float]",
            "signature": "class ForwardRateAgreementValuation:\n    \"\"\"\"\"\"\n    market_value_in_deal_ccy: typing.Optional[float]\n    market_value_in_report_ccy: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementValuation.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "ForwardRateAgreementValuation.__init__",
        "id": "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementValuation.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 29282,
        "content": "class ForwardRateAgreementValuation:\n    @overload\n    def __init__(self, *, market_value_in_deal_ccy: Optional[float] = None, market_value_in_report_ccy: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "ForwardRateAgreementValuation"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementValuation"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "Header",
        "id": "lseg_analytics.instruments.forward_rate_agreement.Header",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "name",
                "type": "str"
            },
            {
                "name": "type",
                "type": "TypeEnum",
                "valuelookup": "enum.TypeEnum"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 34629,
        "content": "class Header:\n    \"\"\"Header.\n\n    Attributes\n    ----------\n    name : str\n        Name of the field.\n    type : str or ~analyticsapi.models.TypeEnum\n        Type of the field. Known values are: \"String\", \"Float\", \"DateTime\",\n        \"Integer\", \"Object\", \"Date\", \"Bool\", \"StringArray\", \"FloatArray\",\n        \"DateArray\", \"ObjectArray\", and \"InvalidField\".\n    \n    \"\"\"\n    name: typing.Optional[str]\n    type: typing.Union[str, ForwardRef('_models.TypeEnum'), NoneType]",
        "metadata": {
            "doc": "Header.\n\n    Attributes\n    ----------\n    name : str\n        Name of the field.\n    type : str or ~analyticsapi.models.TypeEnum\n        Type of the field. Known values are: \"String\", \"Float\", \"DateTime\",\n        \"Integer\", \"Object\", \"Date\", \"Bool\", \"StringArray\", \"FloatArray\",\n        \"DateArray\", \"ObjectArray\", and \"InvalidField\".\n    \n",
            "annotations": "    name: typing.Optional[str]\n    type: typing.Union[str, ForwardRef('_models.TypeEnum'), NoneType]",
            "signature": "class Header:\n    \"\"\"\"\"\"\n    name: typing.Optional[str]\n    type: typing.Union[str, ForwardRef('_models.TypeEnum'), NoneType]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.forward_rate_agreement.Header.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.TypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "Header.__init__",
        "id": "lseg_analytics.instruments.forward_rate_agreement.Header.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 34666,
        "content": "class Header:\n    @overload\n    def __init__(self, *, name: Optional[str] = None, type: Union[str, ForwardRef('_models.TypeEnum'), NoneType] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "Header"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.forward_rate_agreement.Header"
            ],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.TypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "InterestCalculationMethodEnum",
        "id": "lseg_analytics.instruments.forward_rate_agreement.InterestCalculationMethodEnum",
        "content": "class InterestCalculationMethodEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of InterestCalculationMethodEnum.\"\"\"\n\n    DCB_30_360 = \"Dcb_30_360\"\n    DCB_30_360_US = \"Dcb_30_360_US\"\n    DCB_30_360_GERMAN = \"Dcb_30_360_German\"\n    DCB_30_360_ISDA = \"Dcb_30_360_ISDA\"\n    DCB_30_365_ISDA = \"Dcb_30_365_ISDA\"\n    DCB_30_365_GERMAN = \"Dcb_30_365_German\"\n    DCB_30_365_BRAZIL = \"Dcb_30_365_Brazil\"\n    DCB_30_ACTUAL_GERMAN = \"Dcb_30_Actual_German\"\n    DCB_30_ACTUAL = \"Dcb_30_Actual\"\n    DCB_30_ACTUAL_ISDA = \"Dcb_30_Actual_ISDA\"\n    DCB_30_E_360_ISMA = \"Dcb_30E_360_ISMA\"\n    DCB_ACTUAL_360 = \"Dcb_Actual_360\"\n    DCB_ACTUAL_364 = \"Dcb_Actual_364\"\n    DCB_ACTUAL_365 = \"Dcb_Actual_365\"\n    DCB_ACTUAL_ACTUAL = \"Dcb_Actual_Actual\"\n    DCB_ACTUAL_ACTUAL_ISDA = \"Dcb_Actual_Actual_ISDA\"\n    DCB_ACTUAL_ACTUAL_AFB = \"Dcb_Actual_Actual_AFB\"\n    DCB_WORKING_DAYS_252 = \"Dcb_WorkingDays_252\"\n    DCB_ACTUAL_365_L = \"Dcb_Actual_365L\"\n    DCB_ACTUAL_365_P = \"Dcb_Actual_365P\"\n    DCB_ACTUAL_LEAP_DAY_365 = \"Dcb_ActualLeapDay_365\"\n    DCB_ACTUAL_LEAP_DAY_360 = \"Dcb_ActualLeapDay_360\"\n    DCB_ACTUAL_36525 = \"Dcb_Actual_36525\"\n    DCB_ACTUAL_365_CANADIAN_CONVENTION = \"Dcb_Actual_365_CanadianConvention\"\n    DCB_CONSTANT = \"Dcb_Constant\"\n",
        "metadata": {
            "doc": "Type of InterestCalculationMethodEnum.\n",
            "members": [
                "InterestCalculationMethodEnum.DCB_30_360 = 'Dcb_30_360'",
                "InterestCalculationMethodEnum.DCB_30_360_US = 'Dcb_30_360_US'",
                "InterestCalculationMethodEnum.DCB_30_360_GERMAN = 'Dcb_30_360_German'",
                "InterestCalculationMethodEnum.DCB_30_360_ISDA = 'Dcb_30_360_ISDA'",
                "InterestCalculationMethodEnum.DCB_30_365_ISDA = 'Dcb_30_365_ISDA'",
                "InterestCalculationMethodEnum.DCB_30_365_GERMAN = 'Dcb_30_365_German'",
                "InterestCalculationMethodEnum.DCB_30_365_BRAZIL = 'Dcb_30_365_Brazil'",
                "InterestCalculationMethodEnum.DCB_30_ACTUAL_GERMAN = 'Dcb_30_Actual_German'",
                "InterestCalculationMethodEnum.DCB_30_ACTUAL = 'Dcb_30_Actual'",
                "InterestCalculationMethodEnum.DCB_30_ACTUAL_ISDA = 'Dcb_30_Actual_ISDA'",
                "InterestCalculationMethodEnum.DCB_30_E_360_ISMA = 'Dcb_30E_360_ISMA'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_360 = 'Dcb_Actual_360'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_364 = 'Dcb_Actual_364'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_365 = 'Dcb_Actual_365'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_ACTUAL = 'Dcb_Actual_Actual'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_ACTUAL_ISDA = 'Dcb_Actual_Actual_ISDA'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_ACTUAL_AFB = 'Dcb_Actual_Actual_AFB'",
                "InterestCalculationMethodEnum.DCB_WORKING_DAYS_252 = 'Dcb_WorkingDays_252'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_365_L = 'Dcb_Actual_365L'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_365_P = 'Dcb_Actual_365P'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_LEAP_DAY_365 = 'Dcb_ActualLeapDay_365'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_LEAP_DAY_360 = 'Dcb_ActualLeapDay_360'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_36525 = 'Dcb_Actual_36525'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_365_CANADIAN_CONVENTION = 'Dcb_Actual_365_CanadianConvention'",
                "InterestCalculationMethodEnum.DCB_CONSTANT = 'Dcb_Constant'"
            ],
            "signature": "class InterestCalculationMethodEnum(Enum):\n    \"\"\"\"\"\"\n    DCB_30_360 = 'Dcb_30_360'\n    DCB_30_360_US = 'Dcb_30_360_US'\n    DCB_30_360_GERMAN = 'Dcb_30_360_German'\n    DCB_30_360_ISDA = 'Dcb_30_360_ISDA'\n    DCB_30_365_ISDA = 'Dcb_30_365_ISDA'\n    DCB_30_365_GERMAN = 'Dcb_30_365_German'\n    DCB_30_365_BRAZIL = 'Dcb_30_365_Brazil'\n    DCB_30_ACTUAL_GERMAN = 'Dcb_30_Actual_German'\n    DCB_30_ACTUAL = 'Dcb_30_Actual'\n    DCB_30_ACTUAL_ISDA = 'Dcb_30_Actual_ISDA'\n    DCB_30_E_360_ISMA = 'Dcb_30E_360_ISMA'\n    DCB_ACTUAL_360 = 'Dcb_Actual_360'\n    DCB_ACTUAL_364 = 'Dcb_Actual_364'\n    DCB_ACTUAL_365 = 'Dcb_Actual_365'\n    DCB_ACTUAL_ACTUAL = 'Dcb_Actual_Actual'\n    DCB_ACTUAL_ACTUAL_ISDA = 'Dcb_Actual_Actual_ISDA'\n    DCB_ACTUAL_ACTUAL_AFB = 'Dcb_Actual_Actual_AFB'\n    DCB_WORKING_DAYS_252 = 'Dcb_WorkingDays_252'\n    DCB_ACTUAL_365_L = 'Dcb_Actual_365L'\n    DCB_ACTUAL_365_P = 'Dcb_Actual_365P'\n    DCB_ACTUAL_LEAP_DAY_365 = 'Dcb_ActualLeapDay_365'\n    DCB_ACTUAL_LEAP_DAY_360 = 'Dcb_ActualLeapDay_360'\n    DCB_ACTUAL_36525 = 'Dcb_Actual_36525'\n    DCB_ACTUAL_365_CANADIAN_CONVENTION = 'Dcb_Actual_365_CanadianConvention'\n    DCB_CONSTANT = 'Dcb_Constant'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "MarketDataQps",
        "id": "lseg_analytics.instruments.forward_rate_agreement.MarketDataQps",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 45954,
        "content": "class MarketDataQps:\n    \"\"\"MarketDataQps.\n    \"\"\"\n",
        "metadata": {
            "doc": "MarketDataQps.\n",
            "annotations": "",
            "signature": "class MarketDataQps:\n    \"\"\"\"\"\"\n"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "PaymentBusinessDayConventionEnum",
        "id": "lseg_analytics.instruments.forward_rate_agreement.PaymentBusinessDayConventionEnum",
        "content": "class PaymentBusinessDayConventionEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of PaymentBusinessDayConventionEnum.\"\"\"\n\n    MODIFIED_FOLLOWING = \"ModifiedFollowing\"\n    NEXT_BUSINESS_DAY = \"NextBusinessDay\"\n    PREVIOUS_BUSINESS_DAY = \"PreviousBusinessDay\"\n    NO_MOVING = \"NoMoving\"\n    EVERY_THIRD_WEDNESDAY = \"EveryThirdWednesday\"\n    BBSW_MODIFIED_FOLLOWING = \"BbswModifiedFollowing\"\n",
        "metadata": {
            "doc": "Type of PaymentBusinessDayConventionEnum.\n",
            "members": [
                "PaymentBusinessDayConventionEnum.MODIFIED_FOLLOWING = 'ModifiedFollowing'",
                "PaymentBusinessDayConventionEnum.NEXT_BUSINESS_DAY = 'NextBusinessDay'",
                "PaymentBusinessDayConventionEnum.PREVIOUS_BUSINESS_DAY = 'PreviousBusinessDay'",
                "PaymentBusinessDayConventionEnum.NO_MOVING = 'NoMoving'",
                "PaymentBusinessDayConventionEnum.EVERY_THIRD_WEDNESDAY = 'EveryThirdWednesday'",
                "PaymentBusinessDayConventionEnum.BBSW_MODIFIED_FOLLOWING = 'BbswModifiedFollowing'"
            ],
            "signature": "class PaymentBusinessDayConventionEnum(Enum):\n    \"\"\"\"\"\"\n    MODIFIED_FOLLOWING = 'ModifiedFollowing'\n    NEXT_BUSINESS_DAY = 'NextBusinessDay'\n    PREVIOUS_BUSINESS_DAY = 'PreviousBusinessDay'\n    NO_MOVING = 'NoMoving'\n    EVERY_THIRD_WEDNESDAY = 'EveryThirdWednesday'\n    BBSW_MODIFIED_FOLLOWING = 'BbswModifiedFollowing'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "PriceSideEnum",
        "id": "lseg_analytics.instruments.forward_rate_agreement.PriceSideEnum",
        "content": "class PriceSideEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of PriceSideEnum.\"\"\"\n\n    MID = \"Mid\"\n    BID = \"Bid\"\n    ASK = \"Ask\"\n    LAST = \"Last\"\n",
        "metadata": {
            "doc": "Type of PriceSideEnum.\n",
            "members": [
                "PriceSideEnum.MID = 'Mid'",
                "PriceSideEnum.BID = 'Bid'",
                "PriceSideEnum.ASK = 'Ask'",
                "PriceSideEnum.LAST = 'Last'"
            ],
            "signature": "class PriceSideEnum(Enum):\n    \"\"\"\"\"\"\n    MID = 'Mid'\n    BID = 'Bid'\n    ASK = 'Ask'\n    LAST = 'Last'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "TenorReferenceDateEnum",
        "id": "lseg_analytics.instruments.forward_rate_agreement.TenorReferenceDateEnum",
        "content": "class TenorReferenceDateEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of TenorReferenceDateEnum.\"\"\"\n\n    SPOT_DATE = \"SpotDate\"\n    VALUATION_DATE = \"ValuationDate\"\n",
        "metadata": {
            "doc": "Type of TenorReferenceDateEnum.\n",
            "members": [
                "TenorReferenceDateEnum.SPOT_DATE = 'SpotDate'",
                "TenorReferenceDateEnum.VALUATION_DATE = 'ValuationDate'"
            ],
            "signature": "class TenorReferenceDateEnum(Enum):\n    \"\"\"\"\"\"\n    SPOT_DATE = 'SpotDate'\n    VALUATION_DATE = 'ValuationDate'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "TypeEnum",
        "id": "lseg_analytics.instruments.forward_rate_agreement.TypeEnum",
        "content": "class TypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of TypeEnum.\"\"\"\n\n    STRING = \"String\"\n    FLOAT = \"Float\"\n    DATE_TIME = \"DateTime\"\n    INTEGER = \"Integer\"\n    OBJECT = \"Object\"\n    DATE = \"Date\"\n    BOOL = \"Bool\"\n    STRING_ARRAY = \"StringArray\"\n    FLOAT_ARRAY = \"FloatArray\"\n    DATE_ARRAY = \"DateArray\"\n    OBJECT_ARRAY = \"ObjectArray\"\n    INVALID_FIELD = \"InvalidField\"\n",
        "metadata": {
            "doc": "Type of TypeEnum.\n",
            "members": [
                "TypeEnum.STRING = 'String'",
                "TypeEnum.FLOAT = 'Float'",
                "TypeEnum.DATE_TIME = 'DateTime'",
                "TypeEnum.INTEGER = 'Integer'",
                "TypeEnum.OBJECT = 'Object'",
                "TypeEnum.DATE = 'Date'",
                "TypeEnum.BOOL = 'Bool'",
                "TypeEnum.STRING_ARRAY = 'StringArray'",
                "TypeEnum.FLOAT_ARRAY = 'FloatArray'",
                "TypeEnum.DATE_ARRAY = 'DateArray'",
                "TypeEnum.OBJECT_ARRAY = 'ObjectArray'",
                "TypeEnum.INVALID_FIELD = 'InvalidField'"
            ],
            "signature": "class TypeEnum(Enum):\n    \"\"\"\"\"\"\n    STRING = 'String'\n    FLOAT = 'Float'\n    DATE_TIME = 'DateTime'\n    INTEGER = 'Integer'\n    OBJECT = 'Object'\n    DATE = 'Date'\n    BOOL = 'Bool'\n    STRING_ARRAY = 'StringArray'\n    FLOAT_ARRAY = 'FloatArray'\n    DATE_ARRAY = 'DateArray'\n    OBJECT_ARRAY = 'ObjectArray'\n    INVALID_FIELD = 'InvalidField'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    },
    {
        "type": "FunctionChunk",
        "name": "price",
        "id": "lseg_analytics.instruments.forward_rate_agreement.price",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "definitions",
                "type": "List[ForwardRateAgreementDefinitionInstrument]"
            },
            {
                "name": "pricing_preferences",
                "type": "ForwardRateAgreementPricingParameters"
            },
            {
                "name": "market_data",
                "type": "MarketDataQps"
            },
            {
                "name": "return_market_data",
                "type": "bool"
            },
            {
                "name": "fields",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics/instruments/forward_rate_agreement/_functions.py",
        "line_number": 63,
        "content": "def price(*, definitions: List[ForwardRateAgreementDefinitionInstrument], pricing_preferences: Optional[ForwardRateAgreementPricingParameters] = None, market_data: Optional[MarketDataQps] = None, return_market_data: Optional[bool] = None, fields: Optional[str] = None) -> ForwardRateAgreementCalculationResponse:\n    \"\"\"\n    Calculate ForwardRateAgreement analytics\n\n    Parameters\n    ----------\n    definitions : List[ForwardRateAgreementDefinitionInstrument]\n        An array of objects describing a curve or an instrument.\n        Please provide either a full definition (for a user-defined curve/instrument), or reference to a curve/instrument definition saved in the platform, or the code identifying the existing curve/instrument.\n    pricing_preferences : ForwardRateAgreementPricingParameters, optional\n        The parameters that control the computation of the analytics.\n    market_data : MarketDataQps, optional\n        The market data used to compute the analytics.\n    return_market_data : bool, optional\n        Boolean property to determine if undelying market data used for calculation should be returned in the response\n    fields : str, optional\n        A parameter used to select the fields to return in response. If not provided, all fields will be returned.\n        Some usage examples:\n        1. Simply enumerating the fields, separating them by ',', e.g. 'fields=//please insert the selected fields here, e.g., field1, field2 //'\n        2. Using parentheses to indicate nesting, e.g. 'fields= //please insert the selected field and subfields here, e.g., field1(subfield1, subfield2), field2(subfield3)//\u2019\n        3. Using forward slash '/' to indicate nesting, e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1/subfield1, field1/subfield2, field2/subfield3//\u2019 (same result as example above)\n        4. Operators can even be combined (forward slashes in brackets, not the way around), e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1(subfield1/subsubfield1), field2/subfield2//'\n\n    Returns\n    --------\n    ForwardRateAgreementCalculationResponse\n        A model template describing the analytics response returned for an instrument provided as part of the request.\n\n    Examples\n    --------\n    >>> # Create FRA defintion object\n    >>> fra_definition = fra.ForwardRateAgreementDefinition(\n    >>>     start_tenor=\"2M\", # mandatory\n    >>>     fixed_rate_percent=4,\n    >>>     end_tenor=\"8M\", # mandatory\n    >>>     notional_ccy=\"USD\", # mandatory\n    >>>     index_name=\"LIBOR\",\n    >>>     notional_amount=1000000\n    >>> )\n    >>>\n    >>> # Create FRA instrument defintion object\n    >>> fra_instrument = fra.ForwardRateAgreementDefinitionInstrument(\n    >>>     definition = fra_definition\n    >>> )\n    >>>\n    >>> # Create FRA pricing parameters object - optional\n    >>> fra_parameters = fra.ForwardRateAgreementPricingParameters(\n    >>>     valuation_date  = dt.datetime.strptime(\"2025-07-21\", \"%Y-%m-%d\"),\n    >>> )\n\n\n    >>> # Execute the calculation using the price() function\n    >>> # The 'definitions' parameter accepts a list of instruments definitions for batch processing\n    >>>\n    >>> fra_response = fra.price(\n    >>>     definitions = [fra_instrument],\n    >>>     pricing_preferences = fra_parameters\n    >>> )\n\n    \n    \"\"\"",
        "metadata": {
            "doc": "\n    Calculate ForwardRateAgreement analytics\n\n    Parameters\n    ----------\n    definitions : List[ForwardRateAgreementDefinitionInstrument]\n        An array of objects describing a curve or an instrument.\n        Please provide either a full definition (for a user-defined curve/instrument), or reference to a curve/instrument definition saved in the platform, or the code identifying the existing curve/instrument.\n    pricing_preferences : ForwardRateAgreementPricingParameters, optional\n        The parameters that control the computation of the analytics.\n    market_data : MarketDataQps, optional\n        The market data used to compute the analytics.\n    return_market_data : bool, optional\n        Boolean property to determine if undelying market data used for calculation should be returned in the response\n    fields : str, optional\n        A parameter used to select the fields to return in response. If not provided, all fields will be returned.\n        Some usage examples:\n        1. Simply enumerating the fields, separating them by ',', e.g. 'fields=//please insert the selected fields here, e.g., field1, field2 //'\n        2. Using parentheses to indicate nesting, e.g. 'fields= //please insert the selected field and subfields here, e.g., field1(subfield1, subfield2), field2(subfield3)//\u2019\n        3. Using forward slash '/' to indicate nesting, e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1/subfield1, field1/subfield2, field2/subfield3//\u2019 (same result as example above)\n        4. Operators can even be combined (forward slashes in brackets, not the way around), e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1(subfield1/subsubfield1), field2/subfield2//'\n\n    Returns\n    --------\n    ForwardRateAgreementCalculationResponse\n        A model template describing the analytics response returned for an instrument provided as part of the request.\n\n    Examples\n    --------\n    >>> # Create FRA defintion object\n    >>> fra_definition = fra.ForwardRateAgreementDefinition(\n    >>>     start_tenor=\"2M\", # mandatory\n    >>>     fixed_rate_percent=4,\n    >>>     end_tenor=\"8M\", # mandatory\n    >>>     notional_ccy=\"USD\", # mandatory\n    >>>     index_name=\"LIBOR\",\n    >>>     notional_amount=1000000\n    >>> )\n    >>>\n    >>> # Create FRA instrument defintion object\n    >>> fra_instrument = fra.ForwardRateAgreementDefinitionInstrument(\n    >>>     definition = fra_definition\n    >>> )\n    >>>\n    >>> # Create FRA pricing parameters object - optional\n    >>> fra_parameters = fra.ForwardRateAgreementPricingParameters(\n    >>>     valuation_date  = dt.datetime.strptime(\"2025-07-21\", \"%Y-%m-%d\"),\n    >>> )\n\n\n    >>> # Execute the calculation using the price() function\n    >>> # The 'definitions' parameter accepts a list of instruments definitions for batch processing\n    >>>\n    >>> fra_response = fra.price(\n    >>>     definitions = [fra_instrument],\n    >>>     pricing_preferences = fra_parameters\n    >>> )\n\n    \n",
            "signature": "def price(*, definitions: List[ForwardRateAgreementDefinitionInstrument], pricing_preferences: Optional[ForwardRateAgreementPricingParameters] = None, market_data: Optional[MarketDataQps] = None, return_market_data: Optional[bool] = None, fields: Optional[str] = None) -> ForwardRateAgreementCalculationResponse:"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementDefinitionInstrument",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementPricingParameters",
                "lseg_analytics.instruments.forward_rate_agreement.MarketDataQps",
                "lseg_analytics.instruments.forward_rate_agreement.ForwardRateAgreementCalculationResponse"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.forward_rate_agreement",
        "module_version": "2.1.0b5"
    }
]