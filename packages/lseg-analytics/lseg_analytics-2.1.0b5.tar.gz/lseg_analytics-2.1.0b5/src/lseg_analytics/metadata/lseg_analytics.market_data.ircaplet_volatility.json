[
    {
        "type": "ClassChunk",
        "name": "CapletsStrippingDefinition",
        "id": "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingDefinition",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "discounting_type",
                "type": "DiscountingTypeEnum",
                "valuelookup": "enum.DiscountingTypeEnum"
            },
            {
                "name": "index_name",
                "type": "str"
            },
            {
                "name": "instrument_code",
                "type": "str"
            },
            {
                "name": "reference_caplet_tenor",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 10504,
        "content": "class CapletsStrippingDefinition:\n    \"\"\"CapletsStrippingDefinition.\n\n    Attributes\n    ----------\n    discounting_type : str or ~analyticsapi.models.DiscountingTypeEnum\n        The discounting type of the interest rate volatility model. The default\n        value is selected based on 'instrumentCode'. Known values are:\n        \"LiborDiscounting\" and \"OisDiscounting\".\n    index_name : str\n        Underlying index name.\n    instrument_code : str\n        The Currency of the interest rate volatility model.\n    reference_caplet_tenor : str\n        Reference caplet payment or index tenor. ex: 1M, 3M, 6M, 1Y.\n    \n    \"\"\"\n    discounting_type: typing.Union[str, ForwardRef('_models.DiscountingTypeEnum'), NoneType]\n    index_name: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    reference_caplet_tenor: typing.Optional[str]",
        "metadata": {
            "doc": "CapletsStrippingDefinition.\n\n    Attributes\n    ----------\n    discounting_type : str or ~analyticsapi.models.DiscountingTypeEnum\n        The discounting type of the interest rate volatility model. The default\n        value is selected based on 'instrumentCode'. Known values are:\n        \"LiborDiscounting\" and \"OisDiscounting\".\n    index_name : str\n        Underlying index name.\n    instrument_code : str\n        The Currency of the interest rate volatility model.\n    reference_caplet_tenor : str\n        Reference caplet payment or index tenor. ex: 1M, 3M, 6M, 1Y.\n    \n",
            "annotations": "    discounting_type: typing.Union[str, ForwardRef('_models.DiscountingTypeEnum'), NoneType]\n    index_name: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    reference_caplet_tenor: typing.Optional[str]",
            "signature": "class CapletsStrippingDefinition:\n    \"\"\"\"\"\"\n    discounting_type: typing.Union[str, ForwardRef('_models.DiscountingTypeEnum'), NoneType]\n    index_name: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    reference_caplet_tenor: typing.Optional[str]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingDefinition.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.ircaplet_volatility.DiscountingTypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "CapletsStrippingDefinition.__init__",
        "id": "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingDefinition.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 10551,
        "content": "class CapletsStrippingDefinition:\n    @overload\n    def __init__(self, *, discounting_type: Union[str, ForwardRef('_models.DiscountingTypeEnum'), NoneType] = None, index_name: Optional[str] = None, instrument_code: Optional[str] = None, reference_caplet_tenor: Optional[str] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "CapletsStrippingDefinition"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingDefinition"
            ],
            "use": [
                "lseg_analytics.market_data.ircaplet_volatility.DiscountingTypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "CapletsStrippingSurfaceParameters",
        "id": "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingSurfaceParameters",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "calculation_date",
                "type": "datetime"
            },
            {
                "name": "filters",
                "type": "SurfaceFilters"
            },
            {
                "name": "input_volatility_type",
                "type": "InputVolatilityTypeEnum",
                "valuelookup": "enum.InputVolatilityTypeEnum"
            },
            {
                "name": "price_side",
                "type": "CurvesAndSurfacesPriceSideEnum",
                "valuelookup": "enum.CurvesAndSurfacesPriceSideEnum"
            },
            {
                "name": "shift_percent",
                "type": "float"
            },
            {
                "name": "source",
                "type": "str"
            },
            {
                "name": "stripping_shift_percent",
                "type": "float"
            },
            {
                "name": "time_stamp",
                "type": "CurvesAndSurfacesTimeStampEnum",
                "valuelookup": "enum.CurvesAndSurfacesTimeStampEnum"
            },
            {
                "name": "valuation_date",
                "type": "datetime"
            },
            {
                "name": "volatility_adjustment_type",
                "type": "VolatilityAdjustmentTypeEnum",
                "valuelookup": "enum.VolatilityAdjustmentTypeEnum"
            },
            {
                "name": "x_axis",
                "type": "XAxisEnum",
                "valuelookup": "enum.XAxisEnum"
            },
            {
                "name": "y_axis",
                "type": "YAxisEnum",
                "valuelookup": "enum.YAxisEnum"
            },
            {
                "name": "z_axis",
                "type": "ZAxisEnum",
                "valuelookup": "enum.ZAxisEnum"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 10555,
        "content": "class CapletsStrippingSurfaceParameters:\n    \"\"\"CapletsStrippingSurfaceParameters.\n\n    Attributes\n    ----------\n    calculation_date : ~datetime.datetime\n        The date the volatility surface is generated.\n    filters : ~analyticsapi.models.SurfaceFilters\n    input_volatility_type : str or ~analyticsapi.models.InputVolatilityTypeEnum\n        user can specify whether calibration is based on Normal or Lognorma\n        vol. However it would be preferrable to let the service determine the\n        most appropriate one. Known values are: \"Implied\",\n        \"LogNormalVolatility\", \"NormalVolatility\", \"Quoted\", and \"Settle\".\n    price_side : str or ~analyticsapi.models.CurvesAndSurfacesPriceSideEnum\n        Specifies whether bid, ask, mid or settle is used to build the surface.\n        If not precised, default to mid. Known values are: \"Ask\", \"Bid\",\n        \"Last\", and \"Mid\".\n    shift_percent : float\n        Shift applied to calibrated strikes allowing negative rates. The value\n        is expressed in percentages. The default value is selected based on\n        instrumentCode.\n    source : str\n        Requested volatility data contributor.\n    stripping_shift_percent : float\n        Shift value applied to strikes allowing the stripped caplets surface to\n        include volatility even when some strikes are negative. The value is\n        expressed in percentages. The default value is '0.0'.\n    time_stamp : str or ~analyticsapi.models.CurvesAndSurfacesTimeStampEnum\n        Define how the timestamp is selected:\n\n        * Open: the opening value of the valuationDate or if not available the close of the previous\n        day is used.\n        * Default: the latest snapshot is used when valuationDate is today, the close price when\n        valuationDate is in the past. Known values are: \"Close\", \"Default\", \"Open\", and \"Settle\".\n    valuation_date : ~datetime.datetime\n        The date at which the instrument is valued. The value is expressed in\n        ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). By default, MarketDataDate is used. If\n        MarketDataDate is not specified, the default value is today.\n    volatility_adjustment_type : str or ~analyticsapi.models.VolatilityAdjustmentTypeEnum\n        Volatility adjustment method applied to caplets surface before\n        stripping. The default value is 'ConstantCap'. Known values are:\n        \"ConstantCap\", \"ConstantCaplet\", \"NormalizedCap\", \"NormalizedCaplet\",\n        and \"ShiftedCap\".\n    x_axis : str or ~analyticsapi.models.XAxisEnum\n        The enumerate that specifies the unit for the x axis. Known values are:\n        \"Date\", \"Delta\", \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    y_axis : str or ~analyticsapi.models.YAxisEnum\n        The enumerate that specifies the unit for the y axis. Known values are:\n        \"Date\", \"Delta\", \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    z_axis : str or ~analyticsapi.models.ZAxisEnum\n        Specifies the unit for the z axis (e.g. Strike, Expiry, Tenor). This\n        applies to swaption SABR cube. Known values are: \"Date\", \"Delta\",\n        \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    \n    \"\"\"\n    calculation_date: typing.Optional[datetime.datetime]\n    filters: typing.Optional[ForwardRef('_models.SurfaceFilters')]\n    input_volatility_type: typing.Union[str, ForwardRef('_models.InputVolatilityTypeEnum'), NoneType]\n    price_side: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType]\n    shift_percent: typing.Optional[float]\n    source: typing.Optional[str]\n    stripping_shift_percent: typing.Optional[float]\n    time_stamp: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType]\n    valuation_date: typing.Optional[datetime.datetime]\n    volatility_adjustment_type: typing.Union[str, ForwardRef('_models.VolatilityAdjustmentTypeEnum'), NoneType]\n    x_axis: typing.Union[str, ForwardRef('_models.XAxisEnum'), NoneType]\n    y_axis: typing.Union[str, ForwardRef('_models.YAxisEnum'), NoneType]\n    z_axis: typing.Union[str, ForwardRef('_models.ZAxisEnum'), NoneType]",
        "metadata": {
            "doc": "CapletsStrippingSurfaceParameters.\n\n    Attributes\n    ----------\n    calculation_date : ~datetime.datetime\n        The date the volatility surface is generated.\n    filters : ~analyticsapi.models.SurfaceFilters\n    input_volatility_type : str or ~analyticsapi.models.InputVolatilityTypeEnum\n        user can specify whether calibration is based on Normal or Lognorma\n        vol. However it would be preferrable to let the service determine the\n        most appropriate one. Known values are: \"Implied\",\n        \"LogNormalVolatility\", \"NormalVolatility\", \"Quoted\", and \"Settle\".\n    price_side : str or ~analyticsapi.models.CurvesAndSurfacesPriceSideEnum\n        Specifies whether bid, ask, mid or settle is used to build the surface.\n        If not precised, default to mid. Known values are: \"Ask\", \"Bid\",\n        \"Last\", and \"Mid\".\n    shift_percent : float\n        Shift applied to calibrated strikes allowing negative rates. The value\n        is expressed in percentages. The default value is selected based on\n        instrumentCode.\n    source : str\n        Requested volatility data contributor.\n    stripping_shift_percent : float\n        Shift value applied to strikes allowing the stripped caplets surface to\n        include volatility even when some strikes are negative. The value is\n        expressed in percentages. The default value is '0.0'.\n    time_stamp : str or ~analyticsapi.models.CurvesAndSurfacesTimeStampEnum\n        Define how the timestamp is selected:\n\n        * Open: the opening value of the valuationDate or if not available the close of the previous\n        day is used.\n        * Default: the latest snapshot is used when valuationDate is today, the close price when\n        valuationDate is in the past. Known values are: \"Close\", \"Default\", \"Open\", and \"Settle\".\n    valuation_date : ~datetime.datetime\n        The date at which the instrument is valued. The value is expressed in\n        ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). By default, MarketDataDate is used. If\n        MarketDataDate is not specified, the default value is today.\n    volatility_adjustment_type : str or ~analyticsapi.models.VolatilityAdjustmentTypeEnum\n        Volatility adjustment method applied to caplets surface before\n        stripping. The default value is 'ConstantCap'. Known values are:\n        \"ConstantCap\", \"ConstantCaplet\", \"NormalizedCap\", \"NormalizedCaplet\",\n        and \"ShiftedCap\".\n    x_axis : str or ~analyticsapi.models.XAxisEnum\n        The enumerate that specifies the unit for the x axis. Known values are:\n        \"Date\", \"Delta\", \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    y_axis : str or ~analyticsapi.models.YAxisEnum\n        The enumerate that specifies the unit for the y axis. Known values are:\n        \"Date\", \"Delta\", \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    z_axis : str or ~analyticsapi.models.ZAxisEnum\n        Specifies the unit for the z axis (e.g. Strike, Expiry, Tenor). This\n        applies to swaption SABR cube. Known values are: \"Date\", \"Delta\",\n        \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    \n",
            "annotations": "    calculation_date: typing.Optional[datetime.datetime]\n    filters: typing.Optional[ForwardRef('_models.SurfaceFilters')]\n    input_volatility_type: typing.Union[str, ForwardRef('_models.InputVolatilityTypeEnum'), NoneType]\n    price_side: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType]\n    shift_percent: typing.Optional[float]\n    source: typing.Optional[str]\n    stripping_shift_percent: typing.Optional[float]\n    time_stamp: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType]\n    valuation_date: typing.Optional[datetime.datetime]\n    volatility_adjustment_type: typing.Union[str, ForwardRef('_models.VolatilityAdjustmentTypeEnum'), NoneType]\n    x_axis: typing.Union[str, ForwardRef('_models.XAxisEnum'), NoneType]\n    y_axis: typing.Union[str, ForwardRef('_models.YAxisEnum'), NoneType]\n    z_axis: typing.Union[str, ForwardRef('_models.ZAxisEnum'), NoneType]",
            "signature": "class CapletsStrippingSurfaceParameters:\n    \"\"\"\"\"\"\n    calculation_date: typing.Optional[datetime.datetime]\n    filters: typing.Optional[ForwardRef('_models.SurfaceFilters')]\n    input_volatility_type: typing.Union[str, ForwardRef('_models.InputVolatilityTypeEnum'), NoneType]\n    price_side: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType]\n    shift_percent: typing.Optional[float]\n    source: typing.Optional[str]\n    stripping_shift_percent: typing.Optional[float]\n    time_stamp: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType]\n    valuation_date: typing.Optional[datetime.datetime]\n    volatility_adjustment_type: typing.Union[str, ForwardRef('_models.VolatilityAdjustmentTypeEnum'), NoneType]\n    x_axis: typing.Union[str, ForwardRef('_models.XAxisEnum'), NoneType]\n    y_axis: typing.Union[str, ForwardRef('_models.YAxisEnum'), NoneType]\n    z_axis: typing.Union[str, ForwardRef('_models.ZAxisEnum'), NoneType]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingSurfaceParameters.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.ircaplet_volatility.SurfaceFilters",
                "lseg_analytics.market_data.ircaplet_volatility.InputVolatilityTypeEnum",
                "lseg_analytics.market_data.ircaplet_volatility.CurvesAndSurfacesPriceSideEnum",
                "lseg_analytics.market_data.ircaplet_volatility.CurvesAndSurfacesTimeStampEnum",
                "lseg_analytics.market_data.ircaplet_volatility.VolatilityAdjustmentTypeEnum",
                "lseg_analytics.market_data.ircaplet_volatility.XAxisEnum",
                "lseg_analytics.market_data.ircaplet_volatility.YAxisEnum",
                "lseg_analytics.market_data.ircaplet_volatility.ZAxisEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "CapletsStrippingSurfaceParameters.__init__",
        "id": "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingSurfaceParameters.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 10692,
        "content": "class CapletsStrippingSurfaceParameters:\n    @overload\n    def __init__(self, *, calculation_date: Optional[datetime.datetime] = None, filters: Optional[ForwardRef('_models.SurfaceFilters')] = None, input_volatility_type: Union[str, ForwardRef('_models.InputVolatilityTypeEnum'), NoneType] = None, price_side: Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType] = None, shift_percent: Optional[float] = None, source: Optional[str] = None, stripping_shift_percent: Optional[float] = None, time_stamp: Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType] = None, valuation_date: Optional[datetime.datetime] = None, volatility_adjustment_type: Union[str, ForwardRef('_models.VolatilityAdjustmentTypeEnum'), NoneType] = None, x_axis: Union[str, ForwardRef('_models.XAxisEnum'), NoneType] = None, y_axis: Union[str, ForwardRef('_models.YAxisEnum'), NoneType] = None, z_axis: Union[str, ForwardRef('_models.ZAxisEnum'), NoneType] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "CapletsStrippingSurfaceParameters"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingSurfaceParameters"
            ],
            "use": [
                "lseg_analytics.market_data.ircaplet_volatility.SurfaceFilters",
                "lseg_analytics.market_data.ircaplet_volatility.InputVolatilityTypeEnum",
                "lseg_analytics.market_data.ircaplet_volatility.CurvesAndSurfacesPriceSideEnum",
                "lseg_analytics.market_data.ircaplet_volatility.CurvesAndSurfacesTimeStampEnum",
                "lseg_analytics.market_data.ircaplet_volatility.VolatilityAdjustmentTypeEnum",
                "lseg_analytics.market_data.ircaplet_volatility.XAxisEnum",
                "lseg_analytics.market_data.ircaplet_volatility.YAxisEnum",
                "lseg_analytics.market_data.ircaplet_volatility.ZAxisEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "CapletsStrippingSurfaceRequestItem",
        "id": "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingSurfaceRequestItem",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "surface_layout",
                "type": "SurfaceOutput"
            },
            {
                "name": "surface_parameters",
                "type": "CapletsStrippingSurfaceParameters"
            },
            {
                "name": "surface_tag",
                "type": "str"
            },
            {
                "name": "underlying_definition",
                "type": "CapletsStrippingDefinition"
            },
            {
                "name": "underlying_type",
                "type": "CurvesAndSurfacesUnderlyingTypeEnum",
                "valuelookup": "enum.CurvesAndSurfacesUnderlyingTypeEnum"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 10696,
        "content": "class CapletsStrippingSurfaceRequestItem:\n    \"\"\"CapletsStrippingSurfaceRequestItem.\n\n    Attributes\n    ----------\n    surface_layout : ~analyticsapi.models.SurfaceOutput\n    surface_parameters : ~analyticsapi.models.CapletsStrippingSurfaceParameters\n    surface_tag : str\n    underlying_definition : ~analyticsapi.models.CapletsStrippingDefinition\n    underlying_type : str or ~analyticsapi.models.CurvesAndSurfacesUnderlyingTypeEnum\n        The type of the underlying used to generate the volatility surface.\n        Known values are: \"Cap\", \"Eti\", \"Fx\", and \"Swaption\".\n    \n    \"\"\"\n    surface_layout: typing.Optional[ForwardRef('_models.SurfaceOutput')]\n    surface_parameters: typing.Optional[ForwardRef('_models.CapletsStrippingSurfaceParameters')]\n    surface_tag: typing.Optional[str]\n    underlying_definition: typing.Optional[ForwardRef('_models.CapletsStrippingDefinition')]\n    underlying_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType]",
        "metadata": {
            "doc": "CapletsStrippingSurfaceRequestItem.\n\n    Attributes\n    ----------\n    surface_layout : ~analyticsapi.models.SurfaceOutput\n    surface_parameters : ~analyticsapi.models.CapletsStrippingSurfaceParameters\n    surface_tag : str\n    underlying_definition : ~analyticsapi.models.CapletsStrippingDefinition\n    underlying_type : str or ~analyticsapi.models.CurvesAndSurfacesUnderlyingTypeEnum\n        The type of the underlying used to generate the volatility surface.\n        Known values are: \"Cap\", \"Eti\", \"Fx\", and \"Swaption\".\n    \n",
            "annotations": "    surface_layout: typing.Optional[ForwardRef('_models.SurfaceOutput')]\n    surface_parameters: typing.Optional[ForwardRef('_models.CapletsStrippingSurfaceParameters')]\n    surface_tag: typing.Optional[str]\n    underlying_definition: typing.Optional[ForwardRef('_models.CapletsStrippingDefinition')]\n    underlying_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType]",
            "signature": "class CapletsStrippingSurfaceRequestItem:\n    \"\"\"\"\"\"\n    surface_layout: typing.Optional[ForwardRef('_models.SurfaceOutput')]\n    surface_parameters: typing.Optional[ForwardRef('_models.CapletsStrippingSurfaceParameters')]\n    surface_tag: typing.Optional[str]\n    underlying_definition: typing.Optional[ForwardRef('_models.CapletsStrippingDefinition')]\n    underlying_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingSurfaceRequestItem.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.ircaplet_volatility.SurfaceOutput",
                "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingSurfaceParameters",
                "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingDefinition",
                "lseg_analytics.market_data.ircaplet_volatility.CurvesAndSurfacesUnderlyingTypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "CapletsStrippingSurfaceRequestItem.__init__",
        "id": "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingSurfaceRequestItem.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 10740,
        "content": "class CapletsStrippingSurfaceRequestItem:\n    @overload\n    def __init__(self, *, surface_layout: Optional[ForwardRef('_models.SurfaceOutput')] = None, surface_parameters: Optional[ForwardRef('_models.CapletsStrippingSurfaceParameters')] = None, surface_tag: Optional[str] = None, underlying_definition: Optional[ForwardRef('_models.CapletsStrippingDefinition')] = None, underlying_type: Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "CapletsStrippingSurfaceRequestItem"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingSurfaceRequestItem"
            ],
            "use": [
                "lseg_analytics.market_data.ircaplet_volatility.SurfaceOutput",
                "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingSurfaceParameters",
                "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingDefinition",
                "lseg_analytics.market_data.ircaplet_volatility.CurvesAndSurfacesUnderlyingTypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesPriceSideEnum",
        "id": "lseg_analytics.market_data.ircaplet_volatility.CurvesAndSurfacesPriceSideEnum",
        "content": "class CurvesAndSurfacesPriceSideEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesPriceSideEnum.\"\"\"\n\n    ASK = \"Ask\"\n    BID = \"Bid\"\n    LAST = \"Last\"\n    MID = \"Mid\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesPriceSideEnum.\n",
            "members": [
                "CurvesAndSurfacesPriceSideEnum.ASK = 'Ask'",
                "CurvesAndSurfacesPriceSideEnum.BID = 'Bid'",
                "CurvesAndSurfacesPriceSideEnum.LAST = 'Last'",
                "CurvesAndSurfacesPriceSideEnum.MID = 'Mid'"
            ],
            "signature": "class CurvesAndSurfacesPriceSideEnum(Enum):\n    \"\"\"\"\"\"\n    ASK = 'Ask'\n    BID = 'Bid'\n    LAST = 'Last'\n    MID = 'Mid'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesTimeStampEnum",
        "id": "lseg_analytics.market_data.ircaplet_volatility.CurvesAndSurfacesTimeStampEnum",
        "content": "class CurvesAndSurfacesTimeStampEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesTimeStampEnum.\"\"\"\n\n    CLOSE = \"Close\"\n    DEFAULT = \"Default\"\n    OPEN = \"Open\"\n    SETTLE = \"Settle\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesTimeStampEnum.\n",
            "members": [
                "CurvesAndSurfacesTimeStampEnum.CLOSE = 'Close'",
                "CurvesAndSurfacesTimeStampEnum.DEFAULT = 'Default'",
                "CurvesAndSurfacesTimeStampEnum.OPEN = 'Open'",
                "CurvesAndSurfacesTimeStampEnum.SETTLE = 'Settle'"
            ],
            "signature": "class CurvesAndSurfacesTimeStampEnum(Enum):\n    \"\"\"\"\"\"\n    CLOSE = 'Close'\n    DEFAULT = 'Default'\n    OPEN = 'Open'\n    SETTLE = 'Settle'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesUnderlyingTypeEnum",
        "id": "lseg_analytics.market_data.ircaplet_volatility.CurvesAndSurfacesUnderlyingTypeEnum",
        "content": "class CurvesAndSurfacesUnderlyingTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesUnderlyingTypeEnum.\"\"\"\n\n    CAP = \"Cap\"\n    ETI = \"Eti\"\n    FX = \"Fx\"\n    SWAPTION = \"Swaption\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesUnderlyingTypeEnum.\n",
            "members": [
                "CurvesAndSurfacesUnderlyingTypeEnum.CAP = 'Cap'",
                "CurvesAndSurfacesUnderlyingTypeEnum.ETI = 'Eti'",
                "CurvesAndSurfacesUnderlyingTypeEnum.FX = 'Fx'",
                "CurvesAndSurfacesUnderlyingTypeEnum.SWAPTION = 'Swaption'"
            ],
            "signature": "class CurvesAndSurfacesUnderlyingTypeEnum(Enum):\n    \"\"\"\"\"\"\n    CAP = 'Cap'\n    ETI = 'Eti'\n    FX = 'Fx'\n    SWAPTION = 'Swaption'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "DiscountingTypeEnum",
        "id": "lseg_analytics.market_data.ircaplet_volatility.DiscountingTypeEnum",
        "content": "class DiscountingTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of DiscountingTypeEnum.\"\"\"\n\n    LIBOR_DISCOUNTING = \"LiborDiscounting\"\n    OIS_DISCOUNTING = \"OisDiscounting\"\n",
        "metadata": {
            "doc": "Type of DiscountingTypeEnum.\n",
            "members": [
                "DiscountingTypeEnum.LIBOR_DISCOUNTING = 'LiborDiscounting'",
                "DiscountingTypeEnum.OIS_DISCOUNTING = 'OisDiscounting'"
            ],
            "signature": "class DiscountingTypeEnum(Enum):\n    \"\"\"\"\"\"\n    LIBOR_DISCOUNTING = 'LiborDiscounting'\n    OIS_DISCOUNTING = 'OisDiscounting'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "FormatEnum",
        "id": "lseg_analytics.market_data.ircaplet_volatility.FormatEnum",
        "content": "class FormatEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of FormatEnum.\"\"\"\n\n    LIST = \"List\"\n    MATRIX = \"Matrix\"\n    NDIMENSIONAL_ARRAY = \"NDimensionalArray\"\n",
        "metadata": {
            "doc": "Type of FormatEnum.\n",
            "members": [
                "FormatEnum.LIST = 'List'",
                "FormatEnum.MATRIX = 'Matrix'",
                "FormatEnum.NDIMENSIONAL_ARRAY = 'NDimensionalArray'"
            ],
            "signature": "class FormatEnum(Enum):\n    \"\"\"\"\"\"\n    LIST = 'List'\n    MATRIX = 'Matrix'\n    NDIMENSIONAL_ARRAY = 'NDimensionalArray'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "InputVolatilityTypeEnum",
        "id": "lseg_analytics.market_data.ircaplet_volatility.InputVolatilityTypeEnum",
        "content": "class InputVolatilityTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of InputVolatilityTypeEnum.\"\"\"\n\n    IMPLIED = \"Implied\"\n    LOG_NORMAL_VOLATILITY = \"LogNormalVolatility\"\n    NORMAL_VOLATILITY = \"NormalVolatility\"\n    QUOTED = \"Quoted\"\n    SETTLE = \"Settle\"\n",
        "metadata": {
            "doc": "Type of InputVolatilityTypeEnum.\n",
            "members": [
                "InputVolatilityTypeEnum.IMPLIED = 'Implied'",
                "InputVolatilityTypeEnum.LOG_NORMAL_VOLATILITY = 'LogNormalVolatility'",
                "InputVolatilityTypeEnum.NORMAL_VOLATILITY = 'NormalVolatility'",
                "InputVolatilityTypeEnum.QUOTED = 'Quoted'",
                "InputVolatilityTypeEnum.SETTLE = 'Settle'"
            ],
            "signature": "class InputVolatilityTypeEnum(Enum):\n    \"\"\"\"\"\"\n    IMPLIED = 'Implied'\n    LOG_NORMAL_VOLATILITY = 'LogNormalVolatility'\n    NORMAL_VOLATILITY = 'NormalVolatility'\n    QUOTED = 'Quoted'\n    SETTLE = 'Settle'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "MaturityFilter",
        "id": "lseg_analytics.market_data.ircaplet_volatility.MaturityFilter",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "max_maturity",
                "type": "str"
            },
            {
                "name": "min_maturity",
                "type": "str"
            },
            {
                "name": "min_of_median_nb_of_strikes_percent",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 46121,
        "content": "class MaturityFilter:\n    \"\"\"The parameters needed to define the maturity filter.\n\n    Attributes\n    ----------\n    max_maturity : str\n        Max Maturity to consider in the filtering. (expressed in tenor).\n    min_maturity : str\n        Min Maturity to consider in the filtering. (expressed in tenor) Default\n        value: 7D.\n    min_of_median_nb_of_strikes_percent : float\n        Remove maturities whose number of strikes is less than\n        MinOfMedianNbOfStrikesPercent of the Median number of Strikes.\n    \n    \"\"\"\n    max_maturity: typing.Optional[str]\n    min_maturity: typing.Optional[str]\n    min_of_median_nb_of_strikes_percent: typing.Optional[float]",
        "metadata": {
            "doc": "The parameters needed to define the maturity filter.\n\n    Attributes\n    ----------\n    max_maturity : str\n        Max Maturity to consider in the filtering. (expressed in tenor).\n    min_maturity : str\n        Min Maturity to consider in the filtering. (expressed in tenor) Default\n        value: 7D.\n    min_of_median_nb_of_strikes_percent : float\n        Remove maturities whose number of strikes is less than\n        MinOfMedianNbOfStrikesPercent of the Median number of Strikes.\n    \n",
            "annotations": "    max_maturity: typing.Optional[str]\n    min_maturity: typing.Optional[str]\n    min_of_median_nb_of_strikes_percent: typing.Optional[float]",
            "signature": "class MaturityFilter:\n    \"\"\"\"\"\"\n    max_maturity: typing.Optional[str]\n    min_maturity: typing.Optional[str]\n    min_of_median_nb_of_strikes_percent: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.ircaplet_volatility.MaturityFilter.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "MaturityFilter.__init__",
        "id": "lseg_analytics.market_data.ircaplet_volatility.MaturityFilter.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 46163,
        "content": "class MaturityFilter:\n    @overload\n    def __init__(self, *, max_maturity: Optional[str] = None, min_maturity: Optional[str] = None, min_of_median_nb_of_strikes_percent: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "MaturityFilter"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.ircaplet_volatility.MaturityFilter"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "StrikeFilter",
        "id": "lseg_analytics.market_data.ircaplet_volatility.StrikeFilter",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "max_of_median_implied_vol",
                "type": "float"
            },
            {
                "name": "min_of_median_implied_vol",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 55384,
        "content": "class StrikeFilter:\n    \"\"\"The parameters needed to define the strike filter.\n\n    Attributes\n    ----------\n    max_of_median_implied_vol : float\n        Remove strikes whose implied vol is more than\n        MaxOfMedianImpliedVolPercent x Median implied Vol.\n    min_of_median_implied_vol : float\n        Remove strikes whose implied vol is less than\n        MinOfMedianImpliedVolPercent x Median implied Vol.\n    \n    \"\"\"\n    max_of_median_implied_vol: typing.Optional[float]\n    min_of_median_implied_vol: typing.Optional[float]",
        "metadata": {
            "doc": "The parameters needed to define the strike filter.\n\n    Attributes\n    ----------\n    max_of_median_implied_vol : float\n        Remove strikes whose implied vol is more than\n        MaxOfMedianImpliedVolPercent x Median implied Vol.\n    min_of_median_implied_vol : float\n        Remove strikes whose implied vol is less than\n        MinOfMedianImpliedVolPercent x Median implied Vol.\n    \n",
            "annotations": "    max_of_median_implied_vol: typing.Optional[float]\n    min_of_median_implied_vol: typing.Optional[float]",
            "signature": "class StrikeFilter:\n    \"\"\"\"\"\"\n    max_of_median_implied_vol: typing.Optional[float]\n    min_of_median_implied_vol: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.ircaplet_volatility.StrikeFilter.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "StrikeFilter.__init__",
        "id": "lseg_analytics.market_data.ircaplet_volatility.StrikeFilter.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 55421,
        "content": "class StrikeFilter:\n    @overload\n    def __init__(self, *, max_of_median_implied_vol: Optional[float] = None, min_of_median_implied_vol: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "StrikeFilter"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.ircaplet_volatility.StrikeFilter"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "StrikeFilterRange",
        "id": "lseg_analytics.market_data.ircaplet_volatility.StrikeFilterRange",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "max_of_median_implied_vol_percent",
                "type": "float"
            },
            {
                "name": "min_of_median_implied_vol_percent",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 55425,
        "content": "class StrikeFilterRange:\n    \"\"\"The parameters needed to define the strike filter.\n\n    Attributes\n    ----------\n    max_of_median_implied_vol_percent : float\n        Remove strikes whose implied vol is more than\n        MaxOfMedianImpliedVolPercent x Median implied Vol.\n    min_of_median_implied_vol_percent : float\n        Remove strikes whose implied vol is less than\n        MinOfMedianImpliedVolPercent x Median implied Vol.\n    \n    \"\"\"\n    max_of_median_implied_vol_percent: typing.Optional[float]\n    min_of_median_implied_vol_percent: typing.Optional[float]",
        "metadata": {
            "doc": "The parameters needed to define the strike filter.\n\n    Attributes\n    ----------\n    max_of_median_implied_vol_percent : float\n        Remove strikes whose implied vol is more than\n        MaxOfMedianImpliedVolPercent x Median implied Vol.\n    min_of_median_implied_vol_percent : float\n        Remove strikes whose implied vol is less than\n        MinOfMedianImpliedVolPercent x Median implied Vol.\n    \n",
            "annotations": "    max_of_median_implied_vol_percent: typing.Optional[float]\n    min_of_median_implied_vol_percent: typing.Optional[float]",
            "signature": "class StrikeFilterRange:\n    \"\"\"\"\"\"\n    max_of_median_implied_vol_percent: typing.Optional[float]\n    min_of_median_implied_vol_percent: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.ircaplet_volatility.StrikeFilterRange.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "StrikeFilterRange.__init__",
        "id": "lseg_analytics.market_data.ircaplet_volatility.StrikeFilterRange.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 55462,
        "content": "class StrikeFilterRange:\n    @overload\n    def __init__(self, *, max_of_median_implied_vol_percent: Optional[float] = None, min_of_median_implied_vol_percent: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "StrikeFilterRange"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.ircaplet_volatility.StrikeFilterRange"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "SurfaceFilters",
        "id": "lseg_analytics.market_data.ircaplet_volatility.SurfaceFilters",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "atm_tolerance_interval_percent",
                "type": "float"
            },
            {
                "name": "ensure_prices_monotonicity",
                "type": "bool"
            },
            {
                "name": "include_min_tick_prices",
                "type": "bool"
            },
            {
                "name": "maturity_filter_range",
                "type": "MaturityFilter"
            },
            {
                "name": "max_of_median_bid_ask_spread",
                "type": "float"
            },
            {
                "name": "max_staleness_days",
                "type": "int"
            },
            {
                "name": "strike_range",
                "type": "StrikeFilterRange"
            },
            {
                "name": "strike_range_percent",
                "type": "StrikeFilter"
            },
            {
                "name": "use_only_calls",
                "type": "bool"
            },
            {
                "name": "use_only_puts",
                "type": "bool"
            },
            {
                "name": "use_weekly_options",
                "type": "bool"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 56529,
        "content": "class SurfaceFilters:\n    \"\"\"The parameters needed for filtering the vol.\n\n    Attributes\n    ----------\n    atm_tolerance_interval_percent : float\n        Filter on the ATM tolerance interval percent.\n    ensure_prices_monotonicity : bool\n        Filter on the monotonicity of price options.\n    include_min_tick_prices : bool\n        Take into account the minimum tick prices to build the surface.\n    maturity_filter_range : ~analyticsapi.models.MaturityFilter\n    max_of_median_bid_ask_spread : float\n        Spread mutltiplier to filter the options with the same expiry.\n    max_staleness_days : int\n        Max Staleness past days to use for building the surface.\n    strike_range : ~analyticsapi.models.StrikeFilterRange\n    strike_range_percent : ~analyticsapi.models.StrikeFilter\n    use_only_calls : bool\n        SElect only teh calls to build the surface.\n    use_only_puts : bool\n        Select only the puts to build the surface.\n    use_weekly_options : bool\n        Filter on the weekly options.\n    \n    \"\"\"\n    atm_tolerance_interval_percent: typing.Optional[float]\n    ensure_prices_monotonicity: typing.Optional[bool]\n    include_min_tick_prices: typing.Optional[bool]\n    maturity_filter_range: typing.Optional[ForwardRef('_models.MaturityFilter')]\n    max_of_median_bid_ask_spread: typing.Optional[float]\n    max_staleness_days: typing.Optional[int]\n    strike_range: typing.Optional[ForwardRef('_models.StrikeFilterRange')]\n    strike_range_percent: typing.Optional[ForwardRef('_models.StrikeFilter')]\n    use_only_calls: typing.Optional[bool]\n    use_only_puts: typing.Optional[bool]\n    use_weekly_options: typing.Optional[bool]",
        "metadata": {
            "doc": "The parameters needed for filtering the vol.\n\n    Attributes\n    ----------\n    atm_tolerance_interval_percent : float\n        Filter on the ATM tolerance interval percent.\n    ensure_prices_monotonicity : bool\n        Filter on the monotonicity of price options.\n    include_min_tick_prices : bool\n        Take into account the minimum tick prices to build the surface.\n    maturity_filter_range : ~analyticsapi.models.MaturityFilter\n    max_of_median_bid_ask_spread : float\n        Spread mutltiplier to filter the options with the same expiry.\n    max_staleness_days : int\n        Max Staleness past days to use for building the surface.\n    strike_range : ~analyticsapi.models.StrikeFilterRange\n    strike_range_percent : ~analyticsapi.models.StrikeFilter\n    use_only_calls : bool\n        SElect only teh calls to build the surface.\n    use_only_puts : bool\n        Select only the puts to build the surface.\n    use_weekly_options : bool\n        Filter on the weekly options.\n    \n",
            "annotations": "    atm_tolerance_interval_percent: typing.Optional[float]\n    ensure_prices_monotonicity: typing.Optional[bool]\n    include_min_tick_prices: typing.Optional[bool]\n    maturity_filter_range: typing.Optional[ForwardRef('_models.MaturityFilter')]\n    max_of_median_bid_ask_spread: typing.Optional[float]\n    max_staleness_days: typing.Optional[int]\n    strike_range: typing.Optional[ForwardRef('_models.StrikeFilterRange')]\n    strike_range_percent: typing.Optional[ForwardRef('_models.StrikeFilter')]\n    use_only_calls: typing.Optional[bool]\n    use_only_puts: typing.Optional[bool]\n    use_weekly_options: typing.Optional[bool]",
            "signature": "class SurfaceFilters:\n    \"\"\"\"\"\"\n    atm_tolerance_interval_percent: typing.Optional[float]\n    ensure_prices_monotonicity: typing.Optional[bool]\n    include_min_tick_prices: typing.Optional[bool]\n    maturity_filter_range: typing.Optional[ForwardRef('_models.MaturityFilter')]\n    max_of_median_bid_ask_spread: typing.Optional[float]\n    max_staleness_days: typing.Optional[int]\n    strike_range: typing.Optional[ForwardRef('_models.StrikeFilterRange')]\n    strike_range_percent: typing.Optional[ForwardRef('_models.StrikeFilter')]\n    use_only_calls: typing.Optional[bool]\n    use_only_puts: typing.Optional[bool]\n    use_weekly_options: typing.Optional[bool]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.ircaplet_volatility.SurfaceFilters.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.ircaplet_volatility.MaturityFilter",
                "lseg_analytics.market_data.ircaplet_volatility.StrikeFilterRange",
                "lseg_analytics.market_data.ircaplet_volatility.StrikeFilter"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "SurfaceFilters.__init__",
        "id": "lseg_analytics.market_data.ircaplet_volatility.SurfaceFilters.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 56601,
        "content": "class SurfaceFilters:\n    @overload\n    def __init__(self, *, atm_tolerance_interval_percent: Optional[float] = None, ensure_prices_monotonicity: Optional[bool] = None, include_min_tick_prices: Optional[bool] = None, maturity_filter_range: Optional[ForwardRef('_models.MaturityFilter')] = None, max_of_median_bid_ask_spread: Optional[float] = None, max_staleness_days: Optional[int] = None, strike_range: Optional[ForwardRef('_models.StrikeFilterRange')] = None, strike_range_percent: Optional[ForwardRef('_models.StrikeFilter')] = None, use_only_calls: Optional[bool] = None, use_only_puts: Optional[bool] = None, use_weekly_options: Optional[bool] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "SurfaceFilters"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.ircaplet_volatility.SurfaceFilters"
            ],
            "use": [
                "lseg_analytics.market_data.ircaplet_volatility.MaturityFilter",
                "lseg_analytics.market_data.ircaplet_volatility.StrikeFilterRange",
                "lseg_analytics.market_data.ircaplet_volatility.StrikeFilter"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "SurfaceOutput",
        "id": "lseg_analytics.market_data.ircaplet_volatility.SurfaceOutput",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "data_points",
                "type": "List[VolatilitySurfacePoint]"
            },
            {
                "name": "format",
                "type": "FormatEnum",
                "valuelookup": "enum.FormatEnum"
            },
            {
                "name": "x_point_count",
                "type": "int"
            },
            {
                "name": "x_values",
                "type": "List[str]"
            },
            {
                "name": "y_point_count",
                "type": "int"
            },
            {
                "name": "y_values",
                "type": "List[str]"
            },
            {
                "name": "z_point_count",
                "type": "int"
            },
            {
                "name": "z_values",
                "type": "List[str]"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 56605,
        "content": "class SurfaceOutput:\n    \"\"\"SurfaceOutput.\n\n    Attributes\n    ----------\n    data_points : list[~analyticsapi.models.VolatilitySurfacePoint]\n        Specifies the list of specific data points to be returned.  The default\n        value is None, needs to be assigned before using.\n    format : str or ~analyticsapi.models.FormatEnum\n        Specifies whether the calculated volatilities are returned as a list or\n        a matrix. Known values are: \"List\", \"Matrix\", and \"NDimensionalArray\".\n    x_point_count : int\n        Specifies the number of values that will be generated along the x-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    x_values : list[str]\n        Specifies a list of discrete values for the x-axis.  The default value\n        is None, needs to be assigned before using.\n    y_point_count : int\n        Specifies the number of values that will be generated along the y-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    y_values : list[str]\n        Specifies a list of discrete values for the y-axis.  The default value\n        is None, needs to be assigned before using.\n    z_point_count : int\n        Specifies the number of values that will be generated along the z-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    z_values : list[str]\n        Specifies a list of discrete values for the z-axis.  The default value\n        is None, needs to be assigned before using.\n    \n    \"\"\"\n    data_points: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfacePoint')]]\n    format: typing.Union[str, ForwardRef('_models.FormatEnum'), NoneType]\n    x_point_count: typing.Optional[int]\n    x_values: typing.Optional[typing.List[str]]\n    y_point_count: typing.Optional[int]\n    y_values: typing.Optional[typing.List[str]]\n    z_point_count: typing.Optional[int]\n    z_values: typing.Optional[typing.List[str]]",
        "metadata": {
            "doc": "SurfaceOutput.\n\n    Attributes\n    ----------\n    data_points : list[~analyticsapi.models.VolatilitySurfacePoint]\n        Specifies the list of specific data points to be returned.  The default\n        value is None, needs to be assigned before using.\n    format : str or ~analyticsapi.models.FormatEnum\n        Specifies whether the calculated volatilities are returned as a list or\n        a matrix. Known values are: \"List\", \"Matrix\", and \"NDimensionalArray\".\n    x_point_count : int\n        Specifies the number of values that will be generated along the x-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    x_values : list[str]\n        Specifies a list of discrete values for the x-axis.  The default value\n        is None, needs to be assigned before using.\n    y_point_count : int\n        Specifies the number of values that will be generated along the y-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    y_values : list[str]\n        Specifies a list of discrete values for the y-axis.  The default value\n        is None, needs to be assigned before using.\n    z_point_count : int\n        Specifies the number of values that will be generated along the z-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    z_values : list[str]\n        Specifies a list of discrete values for the z-axis.  The default value\n        is None, needs to be assigned before using.\n    \n",
            "annotations": "    data_points: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfacePoint')]]\n    format: typing.Union[str, ForwardRef('_models.FormatEnum'), NoneType]\n    x_point_count: typing.Optional[int]\n    x_values: typing.Optional[typing.List[str]]\n    y_point_count: typing.Optional[int]\n    y_values: typing.Optional[typing.List[str]]\n    z_point_count: typing.Optional[int]\n    z_values: typing.Optional[typing.List[str]]",
            "signature": "class SurfaceOutput:\n    \"\"\"\"\"\"\n    data_points: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfacePoint')]]\n    format: typing.Union[str, ForwardRef('_models.FormatEnum'), NoneType]\n    x_point_count: typing.Optional[int]\n    x_values: typing.Optional[typing.List[str]]\n    y_point_count: typing.Optional[int]\n    y_values: typing.Optional[typing.List[str]]\n    z_point_count: typing.Optional[int]\n    z_values: typing.Optional[typing.List[str]]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.ircaplet_volatility.SurfaceOutput.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfacePoint",
                "lseg_analytics.market_data.ircaplet_volatility.FormatEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "SurfaceOutput.__init__",
        "id": "lseg_analytics.market_data.ircaplet_volatility.SurfaceOutput.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 56683,
        "content": "class SurfaceOutput:\n    @overload\n    def __init__(self, *, data_points: Optional[List[ForwardRef('_models.VolatilitySurfacePoint')]] = None, format: Union[str, ForwardRef('_models.FormatEnum'), NoneType] = None, x_point_count: Optional[int] = None, x_values: Optional[List[str]] = None, y_point_count: Optional[int] = None, y_values: Optional[List[str]] = None, z_point_count: Optional[int] = None, z_values: Optional[List[str]] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "SurfaceOutput"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.ircaplet_volatility.SurfaceOutput"
            ],
            "use": [
                "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfacePoint",
                "lseg_analytics.market_data.ircaplet_volatility.FormatEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "VolatilityAdjustmentTypeEnum",
        "id": "lseg_analytics.market_data.ircaplet_volatility.VolatilityAdjustmentTypeEnum",
        "content": "class VolatilityAdjustmentTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of VolatilityAdjustmentTypeEnum.\"\"\"\n\n    CONSTANT_CAP = \"ConstantCap\"\n    CONSTANT_CAPLET = \"ConstantCaplet\"\n    NORMALIZED_CAP = \"NormalizedCap\"\n    NORMALIZED_CAPLET = \"NormalizedCaplet\"\n    SHIFTED_CAP = \"ShiftedCap\"\n",
        "metadata": {
            "doc": "Type of VolatilityAdjustmentTypeEnum.\n",
            "members": [
                "VolatilityAdjustmentTypeEnum.CONSTANT_CAP = 'ConstantCap'",
                "VolatilityAdjustmentTypeEnum.CONSTANT_CAPLET = 'ConstantCaplet'",
                "VolatilityAdjustmentTypeEnum.NORMALIZED_CAP = 'NormalizedCap'",
                "VolatilityAdjustmentTypeEnum.NORMALIZED_CAPLET = 'NormalizedCaplet'",
                "VolatilityAdjustmentTypeEnum.SHIFTED_CAP = 'ShiftedCap'"
            ],
            "signature": "class VolatilityAdjustmentTypeEnum(Enum):\n    \"\"\"\"\"\"\n    CONSTANT_CAP = 'ConstantCap'\n    CONSTANT_CAPLET = 'ConstantCaplet'\n    NORMALIZED_CAP = 'NormalizedCap'\n    NORMALIZED_CAPLET = 'NormalizedCaplet'\n    SHIFTED_CAP = 'ShiftedCap'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilitySurfacePoint",
        "id": "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfacePoint",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "x",
                "type": "str"
            },
            {
                "name": "y",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62502,
        "content": "class VolatilitySurfacePoint:\n    \"\"\"VolatilitySurfacePoint.\n\n    Attributes\n    ----------\n    x : str\n        The coordinate of the volatility data point on the x-axis.\n    y : str\n        The coordinate of the volatility data point on the y-axis.\n    \n    \"\"\"\n    x: typing.Optional[str]\n    y: typing.Optional[str]",
        "metadata": {
            "doc": "VolatilitySurfacePoint.\n\n    Attributes\n    ----------\n    x : str\n        The coordinate of the volatility data point on the x-axis.\n    y : str\n        The coordinate of the volatility data point on the y-axis.\n    \n",
            "annotations": "    x: typing.Optional[str]\n    y: typing.Optional[str]",
            "signature": "class VolatilitySurfacePoint:\n    \"\"\"\"\"\"\n    x: typing.Optional[str]\n    y: typing.Optional[str]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfacePoint.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilitySurfacePoint.__init__",
        "id": "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfacePoint.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62535,
        "content": "class VolatilitySurfacePoint:\n    @overload\n    def __init__(self, *, x: Optional[str] = None, y: Optional[str] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilitySurfacePoint"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfacePoint"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilitySurfaceResponse",
        "id": "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfaceResponse",
        "params": [
            {
                "name": "data",
                "type": "List[VolatilitySurfaceResponseItem]"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62539,
        "content": "class VolatilitySurfaceResponse:\n    \"\"\"VolatilitySurfaceResponse.\n\n    Attributes\n    ----------\n    data : list[~analyticsapi.models.VolatilitySurfaceResponseItem]\n        The list of volatility surfaces that have been generated based on the\n        request.  The default value is None, needs to be assigned before using.\n    \n    \"\"\"\n    data: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfaceResponseItem')]]",
        "metadata": {
            "doc": "VolatilitySurfaceResponse.\n\n    Attributes\n    ----------\n    data : list[~analyticsapi.models.VolatilitySurfaceResponseItem]\n        The list of volatility surfaces that have been generated based on the\n        request.  The default value is None, needs to be assigned before using.\n    \n",
            "annotations": "    data: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfaceResponseItem')]]",
            "signature": "class VolatilitySurfaceResponse:\n    \"\"\"\"\"\"\n    data: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfaceResponseItem')]]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfaceResponse.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfaceResponseItem"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilitySurfaceResponse.__init__",
        "id": "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfaceResponse.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62567,
        "content": "class VolatilitySurfaceResponse:\n    @overload\n    def __init__(self, data: Optional[List[ForwardRef('_models.VolatilitySurfaceResponseItem')]] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilitySurfaceResponse"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfaceResponse"
            ],
            "use": [
                "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfaceResponseItem"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilitySurfaceResponseItem",
        "id": "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfaceResponseItem",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "discount_curve",
                "type": "Any"
            },
            {
                "name": "dividends",
                "type": "Any"
            },
            {
                "name": "forward_curve",
                "type": "Any"
            },
            {
                "name": "goodness_of_fit",
                "type": "Any"
            },
            {
                "name": "headers",
                "type": "List[str]"
            },
            {
                "name": "interest_rate_curve",
                "type": "Any"
            },
            {
                "name": "moneyness_strike",
                "type": "Any"
            },
            {
                "name": "surface",
                "type": "List[Any]"
            },
            {
                "name": "surface_tag",
                "type": "str"
            },
            {
                "name": "underlying_spot",
                "type": "Any"
            },
            {
                "name": "constituents",
                "type": "Any"
            },
            {
                "name": "description",
                "type": "Any"
            },
            {
                "name": "cross_currency_curves",
                "type": "Any"
            },
            {
                "name": "calibration_parameters",
                "type": "Any"
            },
            {
                "name": "theoritical_calls_premiums",
                "type": "Any"
            },
            {
                "name": "theoritical_puts_premiums",
                "type": "Any"
            },
            {
                "name": "theoritical_strikes",
                "type": "Any"
            },
            {
                "name": "theoretical_strikes",
                "type": "Any"
            },
            {
                "name": "expiry_dates",
                "type": "Any"
            },
            {
                "name": "surface_information",
                "type": "Any"
            },
            {
                "name": "statistics",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62574,
        "content": "class VolatilitySurfaceResponseItem:\n    \"\"\"VolatilitySurfaceResponseItem.\n\n    Attributes\n    ----------\n    discount_curve : any\n        The discount curve.\n    dividends : any\n        The dividends.\n    forward_curve : any\n        The forward curve.\n    goodness_of_fit : any\n        The goodness of fit for VolSurface.\n    headers : list[str]\n        The list of column headers that describe the columns returned in the\n        case of a \"List\" format.  The default value is None, needs to be\n        assigned before using.\n    interest_rate_curve : any\n        The Interest rate curve.\n    moneyness_strike : any\n        The strike level associated to the moneyness level for VolSurface.\n    surface : list[list[any]]\n        The actual volatility surface.  The default value is None, needs to be\n        assigned before using.\n    surface_tag : str\n        The user-defined tag provided in the request or a generated one if no\n        tag were provided.\n    underlying_spot : any\n        The Underlying Spot.\n    constituents : any\n        The constituents of the volatility surface.\n    description : any\n        A description of the volatility surface.\n    cross_currency_curves : any\n        The cross currency curves.\n    calibration_parameters : any\n        The set of inputs and model-specific variables used to fit the\n        volatility surface to observed option market data.\n    theoritical_calls_premiums : any\n        The model-based call prices derived from the calibrated volatility\n        surface.\n    theoritical_puts_premiums : any\n        The model-based put prices derived from the calibrated volatility\n        surface.\n    theoritical_strikes : any\n        Model-generated strike values.\n    theoretical_strikes : any\n        Model-generated strike values.\n    expiry_dates : any\n        A list of tenors, expiry dates, and settlement dates for each smile\n        point in a volatility surface.\n    surface_information : any\n        This output provides further information about the surface, the\n        underlying, and the constituents.\n    statistics : any\n        The parameters defining the computation of skewness and kurtosis across\n        the smiles of the surface.\n    \n    \"\"\"\n    discount_curve: typing.Optional[typing.Any]\n    dividends: typing.Optional[typing.Any]\n    forward_curve: typing.Optional[typing.Any]\n    goodness_of_fit: typing.Optional[typing.Any]\n    headers: typing.Optional[typing.List[str]]\n    interest_rate_curve: typing.Optional[typing.Any]\n    moneyness_strike: typing.Optional[typing.Any]\n    surface: typing.Optional[typing.List[typing.List[typing.Any]]]\n    surface_tag: typing.Optional[str]\n    underlying_spot: typing.Optional[typing.Any]\n    constituents: typing.Optional[typing.Any]\n    description: typing.Optional[typing.Any]\n    cross_currency_curves: typing.Optional[typing.Any]\n    calibration_parameters: typing.Optional[typing.Any]\n    theoritical_calls_premiums: typing.Optional[typing.Any]\n    theoritical_puts_premiums: typing.Optional[typing.Any]\n    theoritical_strikes: typing.Optional[typing.Any]\n    theoretical_strikes: typing.Optional[typing.Any]\n    expiry_dates: typing.Optional[typing.Any]\n    surface_information: typing.Optional[typing.Any]\n    statistics: typing.Optional[typing.Any]",
        "metadata": {
            "doc": "VolatilitySurfaceResponseItem.\n\n    Attributes\n    ----------\n    discount_curve : any\n        The discount curve.\n    dividends : any\n        The dividends.\n    forward_curve : any\n        The forward curve.\n    goodness_of_fit : any\n        The goodness of fit for VolSurface.\n    headers : list[str]\n        The list of column headers that describe the columns returned in the\n        case of a \"List\" format.  The default value is None, needs to be\n        assigned before using.\n    interest_rate_curve : any\n        The Interest rate curve.\n    moneyness_strike : any\n        The strike level associated to the moneyness level for VolSurface.\n    surface : list[list[any]]\n        The actual volatility surface.  The default value is None, needs to be\n        assigned before using.\n    surface_tag : str\n        The user-defined tag provided in the request or a generated one if no\n        tag were provided.\n    underlying_spot : any\n        The Underlying Spot.\n    constituents : any\n        The constituents of the volatility surface.\n    description : any\n        A description of the volatility surface.\n    cross_currency_curves : any\n        The cross currency curves.\n    calibration_parameters : any\n        The set of inputs and model-specific variables used to fit the\n        volatility surface to observed option market data.\n    theoritical_calls_premiums : any\n        The model-based call prices derived from the calibrated volatility\n        surface.\n    theoritical_puts_premiums : any\n        The model-based put prices derived from the calibrated volatility\n        surface.\n    theoritical_strikes : any\n        Model-generated strike values.\n    theoretical_strikes : any\n        Model-generated strike values.\n    expiry_dates : any\n        A list of tenors, expiry dates, and settlement dates for each smile\n        point in a volatility surface.\n    surface_information : any\n        This output provides further information about the surface, the\n        underlying, and the constituents.\n    statistics : any\n        The parameters defining the computation of skewness and kurtosis across\n        the smiles of the surface.\n    \n",
            "annotations": "    discount_curve: typing.Optional[typing.Any]\n    dividends: typing.Optional[typing.Any]\n    forward_curve: typing.Optional[typing.Any]\n    goodness_of_fit: typing.Optional[typing.Any]\n    headers: typing.Optional[typing.List[str]]\n    interest_rate_curve: typing.Optional[typing.Any]\n    moneyness_strike: typing.Optional[typing.Any]\n    surface: typing.Optional[typing.List[typing.List[typing.Any]]]\n    surface_tag: typing.Optional[str]\n    underlying_spot: typing.Optional[typing.Any]\n    constituents: typing.Optional[typing.Any]\n    description: typing.Optional[typing.Any]\n    cross_currency_curves: typing.Optional[typing.Any]\n    calibration_parameters: typing.Optional[typing.Any]\n    theoritical_calls_premiums: typing.Optional[typing.Any]\n    theoritical_puts_premiums: typing.Optional[typing.Any]\n    theoritical_strikes: typing.Optional[typing.Any]\n    theoretical_strikes: typing.Optional[typing.Any]\n    expiry_dates: typing.Optional[typing.Any]\n    surface_information: typing.Optional[typing.Any]\n    statistics: typing.Optional[typing.Any]",
            "signature": "class VolatilitySurfaceResponseItem:\n    \"\"\"\"\"\"\n    discount_curve: typing.Optional[typing.Any]\n    dividends: typing.Optional[typing.Any]\n    forward_curve: typing.Optional[typing.Any]\n    goodness_of_fit: typing.Optional[typing.Any]\n    headers: typing.Optional[typing.List[str]]\n    interest_rate_curve: typing.Optional[typing.Any]\n    moneyness_strike: typing.Optional[typing.Any]\n    surface: typing.Optional[typing.List[typing.List[typing.Any]]]\n    surface_tag: typing.Optional[str]\n    underlying_spot: typing.Optional[typing.Any]\n    constituents: typing.Optional[typing.Any]\n    description: typing.Optional[typing.Any]\n    cross_currency_curves: typing.Optional[typing.Any]\n    calibration_parameters: typing.Optional[typing.Any]\n    theoritical_calls_premiums: typing.Optional[typing.Any]\n    theoritical_puts_premiums: typing.Optional[typing.Any]\n    theoritical_strikes: typing.Optional[typing.Any]\n    theoretical_strikes: typing.Optional[typing.Any]\n    expiry_dates: typing.Optional[typing.Any]\n    surface_information: typing.Optional[typing.Any]\n    statistics: typing.Optional[typing.Any]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfaceResponseItem.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilitySurfaceResponseItem.__init__",
        "id": "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfaceResponseItem.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62716,
        "content": "class VolatilitySurfaceResponseItem:\n    @overload\n    def __init__(self, *, discount_curve: Optional[Any] = None, dividends: Optional[Any] = None, forward_curve: Optional[Any] = None, goodness_of_fit: Optional[Any] = None, headers: Optional[List[str]] = None, interest_rate_curve: Optional[Any] = None, moneyness_strike: Optional[Any] = None, surface: Optional[List[List[Any]]] = None, surface_tag: Optional[str] = None, underlying_spot: Optional[Any] = None, constituents: Optional[Any] = None, description: Optional[Any] = None, cross_currency_curves: Optional[Any] = None, calibration_parameters: Optional[Any] = None, theoritical_calls_premiums: Optional[Any] = None, theoritical_puts_premiums: Optional[Any] = None, theoritical_strikes: Optional[Any] = None, theoretical_strikes: Optional[Any] = None, expiry_dates: Optional[Any] = None, surface_information: Optional[Any] = None, statistics: Optional[Any] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilitySurfaceResponseItem"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfaceResponseItem"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "XAxisEnum",
        "id": "lseg_analytics.market_data.ircaplet_volatility.XAxisEnum",
        "content": "class XAxisEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of XAxisEnum.\"\"\"\n\n    DATE = \"Date\"\n    DELTA = \"Delta\"\n    EXPIRY = \"Expiry\"\n    MONEYNESS = \"Moneyness\"\n    STRIKE = \"Strike\"\n    TENOR = \"Tenor\"\n",
        "metadata": {
            "doc": "Type of XAxisEnum.\n",
            "members": [
                "XAxisEnum.DATE = 'Date'",
                "XAxisEnum.DELTA = 'Delta'",
                "XAxisEnum.EXPIRY = 'Expiry'",
                "XAxisEnum.MONEYNESS = 'Moneyness'",
                "XAxisEnum.STRIKE = 'Strike'",
                "XAxisEnum.TENOR = 'Tenor'"
            ],
            "signature": "class XAxisEnum(Enum):\n    \"\"\"\"\"\"\n    DATE = 'Date'\n    DELTA = 'Delta'\n    EXPIRY = 'Expiry'\n    MONEYNESS = 'Moneyness'\n    STRIKE = 'Strike'\n    TENOR = 'Tenor'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "YAxisEnum",
        "id": "lseg_analytics.market_data.ircaplet_volatility.YAxisEnum",
        "content": "class YAxisEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of YAxisEnum.\"\"\"\n\n    DATE = \"Date\"\n    DELTA = \"Delta\"\n    EXPIRY = \"Expiry\"\n    MONEYNESS = \"Moneyness\"\n    STRIKE = \"Strike\"\n    TENOR = \"Tenor\"\n",
        "metadata": {
            "doc": "Type of YAxisEnum.\n",
            "members": [
                "YAxisEnum.DATE = 'Date'",
                "YAxisEnum.DELTA = 'Delta'",
                "YAxisEnum.EXPIRY = 'Expiry'",
                "YAxisEnum.MONEYNESS = 'Moneyness'",
                "YAxisEnum.STRIKE = 'Strike'",
                "YAxisEnum.TENOR = 'Tenor'"
            ],
            "signature": "class YAxisEnum(Enum):\n    \"\"\"\"\"\"\n    DATE = 'Date'\n    DELTA = 'Delta'\n    EXPIRY = 'Expiry'\n    MONEYNESS = 'Moneyness'\n    STRIKE = 'Strike'\n    TENOR = 'Tenor'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "ZAxisEnum",
        "id": "lseg_analytics.market_data.ircaplet_volatility.ZAxisEnum",
        "content": "class ZAxisEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of ZAxisEnum.\"\"\"\n\n    DATE = \"Date\"\n    DELTA = \"Delta\"\n    EXPIRY = \"Expiry\"\n    MONEYNESS = \"Moneyness\"\n    STRIKE = \"Strike\"\n    TENOR = \"Tenor\"\n",
        "metadata": {
            "doc": "Type of ZAxisEnum.\n",
            "members": [
                "ZAxisEnum.DATE = 'Date'",
                "ZAxisEnum.DELTA = 'Delta'",
                "ZAxisEnum.EXPIRY = 'Expiry'",
                "ZAxisEnum.MONEYNESS = 'Moneyness'",
                "ZAxisEnum.STRIKE = 'Strike'",
                "ZAxisEnum.TENOR = 'Tenor'"
            ],
            "signature": "class ZAxisEnum(Enum):\n    \"\"\"\"\"\"\n    DATE = 'Date'\n    DELTA = 'Delta'\n    EXPIRY = 'Expiry'\n    MONEYNESS = 'Moneyness'\n    STRIKE = 'Strike'\n    TENOR = 'Tenor'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "FunctionChunk",
        "name": "calculate",
        "id": "lseg_analytics.market_data.ircaplet_volatility.calculate",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "universe",
                "type": "List[CapletsStrippingSurfaceRequestItem]"
            },
            {
                "name": "fields",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics/market_data/ircaplet_volatility/_functions.py",
        "line_number": 65,
        "content": "def calculate(*, universe: Optional[List[CapletsStrippingSurfaceRequestItem]] = None, fields: Optional[str] = None) -> VolatilitySurfaceResponse:\n    \"\"\"\n    Generates the surfaces for the definitions provided\n\n    Parameters\n    ----------\n    universe : List[CapletsStrippingSurfaceRequestItem], optional\n\n    fields : str, optional\n        A parameter used to select the fields to return in response. If not provided, all fields will be returned.\n        Some usage examples:\n        1. Simply enumerating the fields, separating them by ',', e.g. 'fields=//please insert the selected fields here, e.g., field1, field2 //'\n        2. Using parentheses to indicate nesting, e.g. 'fields= //please insert the selected field and subfields here, e.g., field1(subfield1, subfield2), field2(subfield3)//\u2019\n        3. Using forward slash '/' to indicate nesting, e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1/subfield1, field1/subfield2, field2/subfield3//\u2019 (same result as example above)\n        4. Operators can even be combined (forward slashes in brackets, not the way around), e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1(subfield1/subsubfield1), field2/subfield2//'\n\n    Returns\n    --------\n    VolatilitySurfaceResponse\n\n\n    Examples\n    --------\n    >>> print(\"Step 1: Creating Surface Definition...\")\n    >>> # Select currency and reference rate for caplets\n    >>> currency = \"USD\"\n    >>> index_name = \"SOFR\"\n    >>>\n    >>> # Create surface definition object\n    >>> surface_definition = cv.CapletsStrippingDefinition(\n    >>>         instrument_code = currency,\n    >>>         index_name = index_name,\n    >>>         reference_caplet_tenor = \"ON\"\n    >>>         # discounting_type = cv.DiscountingTypeEnum.OisDiscounting  # Options: LiborDiscounting, OisDiscounting\n    >>>         )\n    >>> print(f\"   Instrument: {surface_definition.instrument_code}\")\n    >>>\n    >>>\n    >>> print(\"Step 2: Configuring Surface Parameters...\")\n    >>> surface_parameters = cv.CapletsStrippingSurfaceParameters(\n    >>>         calculation_date = dt.datetime.strptime(\"2025-01-18\", \"%Y-%m-%d\"),\n    >>>         x_axis = cv.XAxisEnum.STRIKE,                                    # Options: DATE, DELTA, EXPIRY, MONEYNESS, STRIKE, TENOR\n    >>>         y_axis = cv.YAxisEnum.TENOR                                      # Options: same as X-axis\n    >>>     )\n    >>> print(f\"   Surface Parameters: {surface_parameters}\")\n    >>>\n    >>>\n    >>> print(\"Step 3: Create request item...\")\n    >>> # Create the main request object with basic configuration\n    >>> request_item = cv.CapletsStrippingSurfaceRequestItem(\n    >>>         surface_tag = f\"{currency}_CAPLET_VOLSURFACE\",\n    >>>         underlying_definition = surface_definition,\n    >>>         surface_parameters = surface_parameters,\n    >>>         underlying_type = cv.CurvesAndSurfacesUnderlyingTypeEnum.Cap,\n    >>>         surface_layout = cv.SurfaceOutput(\n    >>>             format = cv.FormatEnum.Matrix,  # Options: List, Matrix\n    >>>         )\n    >>>     )\n    >>> print(f\"   Request Item: {json.dumps(request_item.as_dict(), indent=4)}\")\n    Step 1: Creating Surface Definition...\n       Instrument: USD\n    Step 2: Configuring Surface Parameters...\n       Surface Parameters: {'calculationDate': '2025-01-18T00:00:00Z', 'xAxis': 'Strike', 'yAxis': 'Tenor'}\n    Step 3: Create request item...\n       Request Item: {\n        \"surfaceTag\": \"USD_CAPLET_VOLSURFACE\",\n        \"underlyingDefinition\": {\n            \"instrumentCode\": \"USD\",\n            \"indexName\": \"SOFR\",\n            \"referenceCapletTenor\": \"ON\"\n        },\n        \"surfaceParameters\": {\n            \"calculationDate\": \"2025-01-18T00:00:00Z\",\n            \"xAxis\": \"Strike\",\n            \"yAxis\": \"Tenor\"\n        },\n        \"underlyingType\": \"Cap\",\n        \"surfaceLayout\": {\n            \"format\": \"Matrix\"\n        }\n    }\n\n\n    >>> # Execute the calculation using the calculate function\n    >>> # The 'universe' parameter accepts a list of request items for batch processing\n    >>> try:\n    >>>     response = cv.calculate(universe=[request_item])\n    >>>\n    >>>     # Display response structure information\n    >>>     surface_data = response['data'][0]\n    >>>     if 'surface' in surface_data:\n    >>>         print(f\"   Surface Calculation successful!\")\n    >>>         print(f\"   Surface data points available: {len(surface_data['surface']) - 1} x {len(surface_data['surface'][0]) - 1}\")\n    >>>     else:\n    >>>         print(\"   No surface data found in response\")\n    >>>\n    >>> except Exception as e:\n    >>>     print(f\"   Surface Calculation failed: {str(e)}\")\n    >>>     raise\n       Surface Calculation successful!\n       Surface data points available: 14 x 25\n\n    \n    \"\"\"",
        "metadata": {
            "doc": "\n    Generates the surfaces for the definitions provided\n\n    Parameters\n    ----------\n    universe : List[CapletsStrippingSurfaceRequestItem], optional\n\n    fields : str, optional\n        A parameter used to select the fields to return in response. If not provided, all fields will be returned.\n        Some usage examples:\n        1. Simply enumerating the fields, separating them by ',', e.g. 'fields=//please insert the selected fields here, e.g., field1, field2 //'\n        2. Using parentheses to indicate nesting, e.g. 'fields= //please insert the selected field and subfields here, e.g., field1(subfield1, subfield2), field2(subfield3)//\u2019\n        3. Using forward slash '/' to indicate nesting, e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1/subfield1, field1/subfield2, field2/subfield3//\u2019 (same result as example above)\n        4. Operators can even be combined (forward slashes in brackets, not the way around), e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1(subfield1/subsubfield1), field2/subfield2//'\n\n    Returns\n    --------\n    VolatilitySurfaceResponse\n\n\n    Examples\n    --------\n    >>> print(\"Step 1: Creating Surface Definition...\")\n    >>> # Select currency and reference rate for caplets\n    >>> currency = \"USD\"\n    >>> index_name = \"SOFR\"\n    >>>\n    >>> # Create surface definition object\n    >>> surface_definition = cv.CapletsStrippingDefinition(\n    >>>         instrument_code = currency,\n    >>>         index_name = index_name,\n    >>>         reference_caplet_tenor = \"ON\"\n    >>>         # discounting_type = cv.DiscountingTypeEnum.OisDiscounting  # Options: LiborDiscounting, OisDiscounting\n    >>>         )\n    >>> print(f\"   Instrument: {surface_definition.instrument_code}\")\n    >>>\n    >>>\n    >>> print(\"Step 2: Configuring Surface Parameters...\")\n    >>> surface_parameters = cv.CapletsStrippingSurfaceParameters(\n    >>>         calculation_date = dt.datetime.strptime(\"2025-01-18\", \"%Y-%m-%d\"),\n    >>>         x_axis = cv.XAxisEnum.STRIKE,                                    # Options: DATE, DELTA, EXPIRY, MONEYNESS, STRIKE, TENOR\n    >>>         y_axis = cv.YAxisEnum.TENOR                                      # Options: same as X-axis\n    >>>     )\n    >>> print(f\"   Surface Parameters: {surface_parameters}\")\n    >>>\n    >>>\n    >>> print(\"Step 3: Create request item...\")\n    >>> # Create the main request object with basic configuration\n    >>> request_item = cv.CapletsStrippingSurfaceRequestItem(\n    >>>         surface_tag = f\"{currency}_CAPLET_VOLSURFACE\",\n    >>>         underlying_definition = surface_definition,\n    >>>         surface_parameters = surface_parameters,\n    >>>         underlying_type = cv.CurvesAndSurfacesUnderlyingTypeEnum.Cap,\n    >>>         surface_layout = cv.SurfaceOutput(\n    >>>             format = cv.FormatEnum.Matrix,  # Options: List, Matrix\n    >>>         )\n    >>>     )\n    >>> print(f\"   Request Item: {json.dumps(request_item.as_dict(), indent=4)}\")\n    Step 1: Creating Surface Definition...\n       Instrument: USD\n    Step 2: Configuring Surface Parameters...\n       Surface Parameters: {'calculationDate': '2025-01-18T00:00:00Z', 'xAxis': 'Strike', 'yAxis': 'Tenor'}\n    Step 3: Create request item...\n       Request Item: {\n        \"surfaceTag\": \"USD_CAPLET_VOLSURFACE\",\n        \"underlyingDefinition\": {\n            \"instrumentCode\": \"USD\",\n            \"indexName\": \"SOFR\",\n            \"referenceCapletTenor\": \"ON\"\n        },\n        \"surfaceParameters\": {\n            \"calculationDate\": \"2025-01-18T00:00:00Z\",\n            \"xAxis\": \"Strike\",\n            \"yAxis\": \"Tenor\"\n        },\n        \"underlyingType\": \"Cap\",\n        \"surfaceLayout\": {\n            \"format\": \"Matrix\"\n        }\n    }\n\n\n    >>> # Execute the calculation using the calculate function\n    >>> # The 'universe' parameter accepts a list of request items for batch processing\n    >>> try:\n    >>>     response = cv.calculate(universe=[request_item])\n    >>>\n    >>>     # Display response structure information\n    >>>     surface_data = response['data'][0]\n    >>>     if 'surface' in surface_data:\n    >>>         print(f\"   Surface Calculation successful!\")\n    >>>         print(f\"   Surface data points available: {len(surface_data['surface']) - 1} x {len(surface_data['surface'][0]) - 1}\")\n    >>>     else:\n    >>>         print(\"   No surface data found in response\")\n    >>>\n    >>> except Exception as e:\n    >>>     print(f\"   Surface Calculation failed: {str(e)}\")\n    >>>     raise\n       Surface Calculation successful!\n       Surface data points available: 14 x 25\n\n    \n",
            "signature": "def calculate(*, universe: Optional[List[CapletsStrippingSurfaceRequestItem]] = None, fields: Optional[str] = None) -> VolatilitySurfaceResponse:"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.ircaplet_volatility.CapletsStrippingSurfaceRequestItem",
                "lseg_analytics.market_data.ircaplet_volatility.VolatilitySurfaceResponse"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.ircaplet_volatility",
        "module_version": "2.1.0b5"
    }
]