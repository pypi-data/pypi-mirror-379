[
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesPriceSideEnum",
        "id": "lseg_analytics.market_data.eq_volatility.CurvesAndSurfacesPriceSideEnum",
        "content": "class CurvesAndSurfacesPriceSideEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesPriceSideEnum.\"\"\"\n\n    ASK = \"Ask\"\n    BID = \"Bid\"\n    LAST = \"Last\"\n    MID = \"Mid\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesPriceSideEnum.\n",
            "members": [
                "CurvesAndSurfacesPriceSideEnum.ASK = 'Ask'",
                "CurvesAndSurfacesPriceSideEnum.BID = 'Bid'",
                "CurvesAndSurfacesPriceSideEnum.LAST = 'Last'",
                "CurvesAndSurfacesPriceSideEnum.MID = 'Mid'"
            ],
            "signature": "class CurvesAndSurfacesPriceSideEnum(Enum):\n    \"\"\"\"\"\"\n    ASK = 'Ask'\n    BID = 'Bid'\n    LAST = 'Last'\n    MID = 'Mid'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesTimeStampEnum",
        "id": "lseg_analytics.market_data.eq_volatility.CurvesAndSurfacesTimeStampEnum",
        "content": "class CurvesAndSurfacesTimeStampEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesTimeStampEnum.\"\"\"\n\n    CLOSE = \"Close\"\n    DEFAULT = \"Default\"\n    OPEN = \"Open\"\n    SETTLE = \"Settle\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesTimeStampEnum.\n",
            "members": [
                "CurvesAndSurfacesTimeStampEnum.CLOSE = 'Close'",
                "CurvesAndSurfacesTimeStampEnum.DEFAULT = 'Default'",
                "CurvesAndSurfacesTimeStampEnum.OPEN = 'Open'",
                "CurvesAndSurfacesTimeStampEnum.SETTLE = 'Settle'"
            ],
            "signature": "class CurvesAndSurfacesTimeStampEnum(Enum):\n    \"\"\"\"\"\"\n    CLOSE = 'Close'\n    DEFAULT = 'Default'\n    OPEN = 'Open'\n    SETTLE = 'Settle'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesUnderlyingTypeEnum",
        "id": "lseg_analytics.market_data.eq_volatility.CurvesAndSurfacesUnderlyingTypeEnum",
        "content": "class CurvesAndSurfacesUnderlyingTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesUnderlyingTypeEnum.\"\"\"\n\n    CAP = \"Cap\"\n    ETI = \"Eti\"\n    FX = \"Fx\"\n    SWAPTION = \"Swaption\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesUnderlyingTypeEnum.\n",
            "members": [
                "CurvesAndSurfacesUnderlyingTypeEnum.CAP = 'Cap'",
                "CurvesAndSurfacesUnderlyingTypeEnum.ETI = 'Eti'",
                "CurvesAndSurfacesUnderlyingTypeEnum.FX = 'Fx'",
                "CurvesAndSurfacesUnderlyingTypeEnum.SWAPTION = 'Swaption'"
            ],
            "signature": "class CurvesAndSurfacesUnderlyingTypeEnum(Enum):\n    \"\"\"\"\"\"\n    CAP = 'Cap'\n    ETI = 'Eti'\n    FX = 'Fx'\n    SWAPTION = 'Swaption'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "CurvesAndSurfacesVolatilityModelEnum",
        "id": "lseg_analytics.market_data.eq_volatility.CurvesAndSurfacesVolatilityModelEnum",
        "content": "class CurvesAndSurfacesVolatilityModelEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of CurvesAndSurfacesVolatilityModelEnum.\"\"\"\n\n    CUBIC_SPLINE = \"CubicSpline\"\n    SABR = \"SABR\"\n    SSVI = \"SSVI\"\n    SVI = \"SVI\"\n    TWIN_LOGNORMAL = \"TwinLognormal\"\n",
        "metadata": {
            "doc": "Type of CurvesAndSurfacesVolatilityModelEnum.\n",
            "members": [
                "CurvesAndSurfacesVolatilityModelEnum.CUBIC_SPLINE = 'CubicSpline'",
                "CurvesAndSurfacesVolatilityModelEnum.SABR = 'SABR'",
                "CurvesAndSurfacesVolatilityModelEnum.SSVI = 'SSVI'",
                "CurvesAndSurfacesVolatilityModelEnum.SVI = 'SVI'",
                "CurvesAndSurfacesVolatilityModelEnum.TWIN_LOGNORMAL = 'TwinLognormal'"
            ],
            "signature": "class CurvesAndSurfacesVolatilityModelEnum(Enum):\n    \"\"\"\"\"\"\n    CUBIC_SPLINE = 'CubicSpline'\n    SABR = 'SABR'\n    SSVI = 'SSVI'\n    SVI = 'SVI'\n    TWIN_LOGNORMAL = 'TwinLognormal'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "EtiSurfaceDefinition",
        "id": "lseg_analytics.market_data.eq_volatility.EtiSurfaceDefinition",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "clean_instrument_code",
                "type": "str"
            },
            {
                "name": "exchange",
                "type": "str"
            },
            {
                "name": "instrument_code",
                "type": "str"
            },
            {
                "name": "is_future_underlying",
                "type": "bool"
            },
            {
                "name": "is_lme_future_underlying",
                "type": "bool"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 26252,
        "content": "class EtiSurfaceDefinition:\n    \"\"\"The volatility surface definition for a listed instrument (e.g. equity, indices).\n\n    Attributes\n    ----------\n    clean_instrument_code : str\n    exchange : str\n        Specifies the exchange to be used to retrieve the underlying data.\n    instrument_code : str\n        The code (RIC for equities and indices and RICROOT for Futures.) that\n        represents the instrument. The format for equities and indices is\n        xxx@RIC (Example: VOD.L@RIC) The format for Futures is xx@RICROOT\n        (Example: CL@RICROOT).\n    is_future_underlying : bool\n    is_lme_future_underlying : bool\n    \n    \"\"\"\n    clean_instrument_code: typing.Optional[str]\n    exchange: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    is_future_underlying: typing.Optional[bool]\n    is_lme_future_underlying: typing.Optional[bool]",
        "metadata": {
            "doc": "The volatility surface definition for a listed instrument (e.g. equity, indices).\n\n    Attributes\n    ----------\n    clean_instrument_code : str\n    exchange : str\n        Specifies the exchange to be used to retrieve the underlying data.\n    instrument_code : str\n        The code (RIC for equities and indices and RICROOT for Futures.) that\n        represents the instrument. The format for equities and indices is\n        xxx@RIC (Example: VOD.L@RIC) The format for Futures is xx@RICROOT\n        (Example: CL@RICROOT).\n    is_future_underlying : bool\n    is_lme_future_underlying : bool\n    \n",
            "annotations": "    clean_instrument_code: typing.Optional[str]\n    exchange: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    is_future_underlying: typing.Optional[bool]\n    is_lme_future_underlying: typing.Optional[bool]",
            "signature": "class EtiSurfaceDefinition:\n    \"\"\"\"\"\"\n    clean_instrument_code: typing.Optional[str]\n    exchange: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    is_future_underlying: typing.Optional[bool]\n    is_lme_future_underlying: typing.Optional[bool]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.eq_volatility.EtiSurfaceDefinition.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "EtiSurfaceDefinition.__init__",
        "id": "lseg_analytics.market_data.eq_volatility.EtiSurfaceDefinition.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 26300,
        "content": "class EtiSurfaceDefinition:\n    @overload\n    def __init__(self, *, clean_instrument_code: Optional[str] = None, exchange: Optional[str] = None, instrument_code: Optional[str] = None, is_future_underlying: Optional[bool] = None, is_lme_future_underlying: Optional[bool] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "EtiSurfaceDefinition"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.eq_volatility.EtiSurfaceDefinition"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "EtiSurfaceParameters",
        "id": "lseg_analytics.market_data.eq_volatility.EtiSurfaceParameters",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "calculation_date",
                "type": "datetime"
            },
            {
                "name": "filters",
                "type": "SurfaceFilters"
            },
            {
                "name": "input_volatility_type",
                "type": "InputVolatilityTypeEnum",
                "valuelookup": "enum.InputVolatilityTypeEnum"
            },
            {
                "name": "moneyness_type",
                "type": "MoneynessTypeEnum",
                "valuelookup": "enum.MoneynessTypeEnum"
            },
            {
                "name": "price_side",
                "type": "CurvesAndSurfacesPriceSideEnum",
                "valuelookup": "enum.CurvesAndSurfacesPriceSideEnum"
            },
            {
                "name": "smile_by_smile_arbitrage_check",
                "type": "bool"
            },
            {
                "name": "svi_alpha_extrapolation",
                "type": "bool"
            },
            {
                "name": "time_stamp",
                "type": "CurvesAndSurfacesTimeStampEnum",
                "valuelookup": "enum.CurvesAndSurfacesTimeStampEnum"
            },
            {
                "name": "volatility_model",
                "type": "CurvesAndSurfacesVolatilityModelEnum",
                "valuelookup": "enum.CurvesAndSurfacesVolatilityModelEnum"
            },
            {
                "name": "weights",
                "type": "List[MoneynessWeight]"
            },
            {
                "name": "x_axis",
                "type": "XAxisEnum",
                "valuelookup": "enum.XAxisEnum"
            },
            {
                "name": "y_axis",
                "type": "YAxisEnum",
                "valuelookup": "enum.YAxisEnum"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 26304,
        "content": "class EtiSurfaceParameters:\n    \"\"\"The parameters needed to define the volatility surface for a listed instrument (e.g. equity,\n    indices).\n\n    Attributes\n    ----------\n    calculation_date : ~datetime.datetime\n        The date the volatility surface is generated.\n    filters : ~analyticsapi.models.SurfaceFilters\n    input_volatility_type : str or ~analyticsapi.models.InputVolatilityTypeEnum\n        Specifies the type of volatility used as an input of the model\n        (calculated Implied Volatility, Settlement)\n\n        * Settle: [DEPRECATED] The service uses the settlement volatility to build the volatility\n        surface\n        * Quoted: The service uses the quoted volatility to build the volatility surface\n        * Implied: The service internally calculates implied volatilities for the option universe\n        before building the surface\n\n        Default value is \"Implied\". Known values are: \"Implied\", \"LogNormalVolatility\",\n        \"NormalVolatility\", \"Quoted\", and \"Settle\".\n    moneyness_type : str or ~analyticsapi.models.MoneynessTypeEnum\n        The enumerate that specifies the moneyness type to use for calibration.\n\n        * Spot\n        * Fwd\n        * Sigma\n\n        Optional. Default value is \"Spot\". Known values are: \"Fwd\", \"Sigma\", and \"Spot\".\n    price_side : str or ~analyticsapi.models.CurvesAndSurfacesPriceSideEnum\n        Specifies whether bid, ask or mid is used to build the surface. Known\n        values are: \"Ask\", \"Bid\", \"Last\", and \"Mid\".\n    smile_by_smile_arbitrage_check : bool\n        Smile by Smile Arbitrage Check for building the surface Default value :\n        TRUE.\n    svi_alpha_extrapolation : bool\n        Svi Alpha Extrapolation for building the surface Default value : TRUE.\n    time_stamp : str or ~analyticsapi.models.CurvesAndSurfacesTimeStampEnum\n        Define how the timestamp is selected:\n\n        * Open: the opening value of the valuationDate or if not available the close of the previous\n        day is used.\n        * Default: the latest snapshot is used when valuationDate is today, the close price when\n        valuationDate is in the past. Known values are: \"Close\", \"Default\", \"Open\", and \"Settle\".\n    volatility_model : str or ~analyticsapi.models.CurvesAndSurfacesVolatilityModelEnum\n        The quantitative model used to generate the volatility surface. This\n        may depend on the asset class. Known values are: \"CubicSpline\", \"SABR\",\n        \"SSVI\", \"SVI\", and \"TwinLognormal\".\n    weights : list[~analyticsapi.models.MoneynessWeight]\n        Specifies the list of calibration weight.  The default value is None,\n        needs to be assigned before using.\n    x_axis : str or ~analyticsapi.models.XAxisEnum\n        Specifies the unit for the x axis (e.g. Date, Tenor). Known values are:\n        \"Date\", \"Delta\", \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    y_axis : str or ~analyticsapi.models.YAxisEnum\n        Specifies the unit for the y axis (e.g. Strike, Delta). This may depend\n        on the asset class. For Fx Volatility Surface, we support both Delta\n        and Strike. Known values are: \"Date\", \"Delta\", \"Expiry\", \"Moneyness\",\n        \"Strike\", and \"Tenor\".\n    \n    \"\"\"\n    calculation_date: typing.Optional[datetime.datetime]\n    filters: typing.Optional[ForwardRef('_models.SurfaceFilters')]\n    input_volatility_type: typing.Union[str, ForwardRef('_models.InputVolatilityTypeEnum'), NoneType]\n    moneyness_type: typing.Union[str, ForwardRef('_models.MoneynessTypeEnum'), NoneType]\n    price_side: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType]\n    smile_by_smile_arbitrage_check: typing.Optional[bool]\n    svi_alpha_extrapolation: typing.Optional[bool]\n    time_stamp: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType]\n    volatility_model: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesVolatilityModelEnum'), NoneType]\n    weights: typing.Optional[typing.List[ForwardRef('_models.MoneynessWeight')]]\n    x_axis: typing.Union[str, ForwardRef('_models.XAxisEnum'), NoneType]\n    y_axis: typing.Union[str, ForwardRef('_models.YAxisEnum'), NoneType]",
        "metadata": {
            "doc": "The parameters needed to define the volatility surface for a listed instrument (e.g. equity,\n    indices).\n\n    Attributes\n    ----------\n    calculation_date : ~datetime.datetime\n        The date the volatility surface is generated.\n    filters : ~analyticsapi.models.SurfaceFilters\n    input_volatility_type : str or ~analyticsapi.models.InputVolatilityTypeEnum\n        Specifies the type of volatility used as an input of the model\n        (calculated Implied Volatility, Settlement)\n\n        * Settle: [DEPRECATED] The service uses the settlement volatility to build the volatility\n        surface\n        * Quoted: The service uses the quoted volatility to build the volatility surface\n        * Implied: The service internally calculates implied volatilities for the option universe\n        before building the surface\n\n        Default value is \"Implied\". Known values are: \"Implied\", \"LogNormalVolatility\",\n        \"NormalVolatility\", \"Quoted\", and \"Settle\".\n    moneyness_type : str or ~analyticsapi.models.MoneynessTypeEnum\n        The enumerate that specifies the moneyness type to use for calibration.\n\n        * Spot\n        * Fwd\n        * Sigma\n\n        Optional. Default value is \"Spot\". Known values are: \"Fwd\", \"Sigma\", and \"Spot\".\n    price_side : str or ~analyticsapi.models.CurvesAndSurfacesPriceSideEnum\n        Specifies whether bid, ask or mid is used to build the surface. Known\n        values are: \"Ask\", \"Bid\", \"Last\", and \"Mid\".\n    smile_by_smile_arbitrage_check : bool\n        Smile by Smile Arbitrage Check for building the surface Default value :\n        TRUE.\n    svi_alpha_extrapolation : bool\n        Svi Alpha Extrapolation for building the surface Default value : TRUE.\n    time_stamp : str or ~analyticsapi.models.CurvesAndSurfacesTimeStampEnum\n        Define how the timestamp is selected:\n\n        * Open: the opening value of the valuationDate or if not available the close of the previous\n        day is used.\n        * Default: the latest snapshot is used when valuationDate is today, the close price when\n        valuationDate is in the past. Known values are: \"Close\", \"Default\", \"Open\", and \"Settle\".\n    volatility_model : str or ~analyticsapi.models.CurvesAndSurfacesVolatilityModelEnum\n        The quantitative model used to generate the volatility surface. This\n        may depend on the asset class. Known values are: \"CubicSpline\", \"SABR\",\n        \"SSVI\", \"SVI\", and \"TwinLognormal\".\n    weights : list[~analyticsapi.models.MoneynessWeight]\n        Specifies the list of calibration weight.  The default value is None,\n        needs to be assigned before using.\n    x_axis : str or ~analyticsapi.models.XAxisEnum\n        Specifies the unit for the x axis (e.g. Date, Tenor). Known values are:\n        \"Date\", \"Delta\", \"Expiry\", \"Moneyness\", \"Strike\", and \"Tenor\".\n    y_axis : str or ~analyticsapi.models.YAxisEnum\n        Specifies the unit for the y axis (e.g. Strike, Delta). This may depend\n        on the asset class. For Fx Volatility Surface, we support both Delta\n        and Strike. Known values are: \"Date\", \"Delta\", \"Expiry\", \"Moneyness\",\n        \"Strike\", and \"Tenor\".\n    \n",
            "annotations": "    calculation_date: typing.Optional[datetime.datetime]\n    filters: typing.Optional[ForwardRef('_models.SurfaceFilters')]\n    input_volatility_type: typing.Union[str, ForwardRef('_models.InputVolatilityTypeEnum'), NoneType]\n    moneyness_type: typing.Union[str, ForwardRef('_models.MoneynessTypeEnum'), NoneType]\n    price_side: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType]\n    smile_by_smile_arbitrage_check: typing.Optional[bool]\n    svi_alpha_extrapolation: typing.Optional[bool]\n    time_stamp: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType]\n    volatility_model: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesVolatilityModelEnum'), NoneType]\n    weights: typing.Optional[typing.List[ForwardRef('_models.MoneynessWeight')]]\n    x_axis: typing.Union[str, ForwardRef('_models.XAxisEnum'), NoneType]\n    y_axis: typing.Union[str, ForwardRef('_models.YAxisEnum'), NoneType]",
            "signature": "class EtiSurfaceParameters:\n    \"\"\"\"\"\"\n    calculation_date: typing.Optional[datetime.datetime]\n    filters: typing.Optional[ForwardRef('_models.SurfaceFilters')]\n    input_volatility_type: typing.Union[str, ForwardRef('_models.InputVolatilityTypeEnum'), NoneType]\n    moneyness_type: typing.Union[str, ForwardRef('_models.MoneynessTypeEnum'), NoneType]\n    price_side: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType]\n    smile_by_smile_arbitrage_check: typing.Optional[bool]\n    svi_alpha_extrapolation: typing.Optional[bool]\n    time_stamp: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType]\n    volatility_model: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesVolatilityModelEnum'), NoneType]\n    weights: typing.Optional[typing.List[ForwardRef('_models.MoneynessWeight')]]\n    x_axis: typing.Union[str, ForwardRef('_models.XAxisEnum'), NoneType]\n    y_axis: typing.Union[str, ForwardRef('_models.YAxisEnum'), NoneType]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.eq_volatility.EtiSurfaceParameters.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.eq_volatility.SurfaceFilters",
                "lseg_analytics.market_data.eq_volatility.InputVolatilityTypeEnum",
                "lseg_analytics.market_data.eq_volatility.MoneynessTypeEnum",
                "lseg_analytics.market_data.eq_volatility.CurvesAndSurfacesPriceSideEnum",
                "lseg_analytics.market_data.eq_volatility.CurvesAndSurfacesTimeStampEnum",
                "lseg_analytics.market_data.eq_volatility.CurvesAndSurfacesVolatilityModelEnum",
                "lseg_analytics.market_data.eq_volatility.MoneynessWeight",
                "lseg_analytics.market_data.eq_volatility.XAxisEnum",
                "lseg_analytics.market_data.eq_volatility.YAxisEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "EtiSurfaceParameters.__init__",
        "id": "lseg_analytics.market_data.eq_volatility.EtiSurfaceParameters.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 26452,
        "content": "class EtiSurfaceParameters:\n    @overload\n    def __init__(self, *, calculation_date: Optional[datetime.datetime] = None, filters: Optional[ForwardRef('_models.SurfaceFilters')] = None, input_volatility_type: Union[str, ForwardRef('_models.InputVolatilityTypeEnum'), NoneType] = None, moneyness_type: Union[str, ForwardRef('_models.MoneynessTypeEnum'), NoneType] = None, price_side: Union[str, ForwardRef('_models.CurvesAndSurfacesPriceSideEnum'), NoneType] = None, smile_by_smile_arbitrage_check: Optional[bool] = None, svi_alpha_extrapolation: Optional[bool] = None, time_stamp: Union[str, ForwardRef('_models.CurvesAndSurfacesTimeStampEnum'), NoneType] = None, volatility_model: Union[str, ForwardRef('_models.CurvesAndSurfacesVolatilityModelEnum'), NoneType] = None, weights: Optional[List[ForwardRef('_models.MoneynessWeight')]] = None, x_axis: Union[str, ForwardRef('_models.XAxisEnum'), NoneType] = None, y_axis: Union[str, ForwardRef('_models.YAxisEnum'), NoneType] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "EtiSurfaceParameters"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.eq_volatility.EtiSurfaceParameters"
            ],
            "use": [
                "lseg_analytics.market_data.eq_volatility.SurfaceFilters",
                "lseg_analytics.market_data.eq_volatility.InputVolatilityTypeEnum",
                "lseg_analytics.market_data.eq_volatility.MoneynessTypeEnum",
                "lseg_analytics.market_data.eq_volatility.CurvesAndSurfacesPriceSideEnum",
                "lseg_analytics.market_data.eq_volatility.CurvesAndSurfacesTimeStampEnum",
                "lseg_analytics.market_data.eq_volatility.CurvesAndSurfacesVolatilityModelEnum",
                "lseg_analytics.market_data.eq_volatility.MoneynessWeight",
                "lseg_analytics.market_data.eq_volatility.XAxisEnum",
                "lseg_analytics.market_data.eq_volatility.YAxisEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "EtiVolatilitySurfaceRequestItem",
        "id": "lseg_analytics.market_data.eq_volatility.EtiVolatilitySurfaceRequestItem",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "surface_layout",
                "type": "SurfaceOutput"
            },
            {
                "name": "surface_parameters",
                "type": "EtiSurfaceParameters"
            },
            {
                "name": "surface_tag",
                "type": "str"
            },
            {
                "name": "underlying_definition",
                "type": "EtiSurfaceDefinition"
            },
            {
                "name": "underlying_type",
                "type": "CurvesAndSurfacesUnderlyingTypeEnum",
                "valuelookup": "enum.CurvesAndSurfacesUnderlyingTypeEnum"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 26456,
        "content": "class EtiVolatilitySurfaceRequestItem:\n    \"\"\"EtiVolatilitySurfaceRequestItem.\n\n    Attributes\n    ----------\n    surface_layout : ~analyticsapi.models.SurfaceOutput\n    surface_parameters : ~analyticsapi.models.EtiSurfaceParameters\n    surface_tag : str\n    underlying_definition : ~analyticsapi.models.EtiSurfaceDefinition\n    underlying_type : str or ~analyticsapi.models.CurvesAndSurfacesUnderlyingTypeEnum\n        The type of the underlying used to generate the volatility surface.\n        Known values are: \"Cap\", \"Eti\", \"Fx\", and \"Swaption\".\n    \n    \"\"\"\n    surface_layout: typing.Optional[ForwardRef('_models.SurfaceOutput')]\n    surface_parameters: typing.Optional[ForwardRef('_models.EtiSurfaceParameters')]\n    surface_tag: typing.Optional[str]\n    underlying_definition: typing.Optional[ForwardRef('_models.EtiSurfaceDefinition')]\n    underlying_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType]",
        "metadata": {
            "doc": "EtiVolatilitySurfaceRequestItem.\n\n    Attributes\n    ----------\n    surface_layout : ~analyticsapi.models.SurfaceOutput\n    surface_parameters : ~analyticsapi.models.EtiSurfaceParameters\n    surface_tag : str\n    underlying_definition : ~analyticsapi.models.EtiSurfaceDefinition\n    underlying_type : str or ~analyticsapi.models.CurvesAndSurfacesUnderlyingTypeEnum\n        The type of the underlying used to generate the volatility surface.\n        Known values are: \"Cap\", \"Eti\", \"Fx\", and \"Swaption\".\n    \n",
            "annotations": "    surface_layout: typing.Optional[ForwardRef('_models.SurfaceOutput')]\n    surface_parameters: typing.Optional[ForwardRef('_models.EtiSurfaceParameters')]\n    surface_tag: typing.Optional[str]\n    underlying_definition: typing.Optional[ForwardRef('_models.EtiSurfaceDefinition')]\n    underlying_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType]",
            "signature": "class EtiVolatilitySurfaceRequestItem:\n    \"\"\"\"\"\"\n    surface_layout: typing.Optional[ForwardRef('_models.SurfaceOutput')]\n    surface_parameters: typing.Optional[ForwardRef('_models.EtiSurfaceParameters')]\n    surface_tag: typing.Optional[str]\n    underlying_definition: typing.Optional[ForwardRef('_models.EtiSurfaceDefinition')]\n    underlying_type: typing.Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.eq_volatility.EtiVolatilitySurfaceRequestItem.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.eq_volatility.SurfaceOutput",
                "lseg_analytics.market_data.eq_volatility.EtiSurfaceParameters",
                "lseg_analytics.market_data.eq_volatility.EtiSurfaceDefinition",
                "lseg_analytics.market_data.eq_volatility.CurvesAndSurfacesUnderlyingTypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "EtiVolatilitySurfaceRequestItem.__init__",
        "id": "lseg_analytics.market_data.eq_volatility.EtiVolatilitySurfaceRequestItem.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 26500,
        "content": "class EtiVolatilitySurfaceRequestItem:\n    @overload\n    def __init__(self, *, surface_layout: Optional[ForwardRef('_models.SurfaceOutput')] = None, surface_parameters: Optional[ForwardRef('_models.EtiSurfaceParameters')] = None, surface_tag: Optional[str] = None, underlying_definition: Optional[ForwardRef('_models.EtiSurfaceDefinition')] = None, underlying_type: Union[str, ForwardRef('_models.CurvesAndSurfacesUnderlyingTypeEnum'), NoneType] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "EtiVolatilitySurfaceRequestItem"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.eq_volatility.EtiVolatilitySurfaceRequestItem"
            ],
            "use": [
                "lseg_analytics.market_data.eq_volatility.SurfaceOutput",
                "lseg_analytics.market_data.eq_volatility.EtiSurfaceParameters",
                "lseg_analytics.market_data.eq_volatility.EtiSurfaceDefinition",
                "lseg_analytics.market_data.eq_volatility.CurvesAndSurfacesUnderlyingTypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "FormatEnum",
        "id": "lseg_analytics.market_data.eq_volatility.FormatEnum",
        "content": "class FormatEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of FormatEnum.\"\"\"\n\n    LIST = \"List\"\n    MATRIX = \"Matrix\"\n    NDIMENSIONAL_ARRAY = \"NDimensionalArray\"\n",
        "metadata": {
            "doc": "Type of FormatEnum.\n",
            "members": [
                "FormatEnum.LIST = 'List'",
                "FormatEnum.MATRIX = 'Matrix'",
                "FormatEnum.NDIMENSIONAL_ARRAY = 'NDimensionalArray'"
            ],
            "signature": "class FormatEnum(Enum):\n    \"\"\"\"\"\"\n    LIST = 'List'\n    MATRIX = 'Matrix'\n    NDIMENSIONAL_ARRAY = 'NDimensionalArray'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "InputVolatilityTypeEnum",
        "id": "lseg_analytics.market_data.eq_volatility.InputVolatilityTypeEnum",
        "content": "class InputVolatilityTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of InputVolatilityTypeEnum.\"\"\"\n\n    IMPLIED = \"Implied\"\n    LOG_NORMAL_VOLATILITY = \"LogNormalVolatility\"\n    NORMAL_VOLATILITY = \"NormalVolatility\"\n    QUOTED = \"Quoted\"\n    SETTLE = \"Settle\"\n",
        "metadata": {
            "doc": "Type of InputVolatilityTypeEnum.\n",
            "members": [
                "InputVolatilityTypeEnum.IMPLIED = 'Implied'",
                "InputVolatilityTypeEnum.LOG_NORMAL_VOLATILITY = 'LogNormalVolatility'",
                "InputVolatilityTypeEnum.NORMAL_VOLATILITY = 'NormalVolatility'",
                "InputVolatilityTypeEnum.QUOTED = 'Quoted'",
                "InputVolatilityTypeEnum.SETTLE = 'Settle'"
            ],
            "signature": "class InputVolatilityTypeEnum(Enum):\n    \"\"\"\"\"\"\n    IMPLIED = 'Implied'\n    LOG_NORMAL_VOLATILITY = 'LogNormalVolatility'\n    NORMAL_VOLATILITY = 'NormalVolatility'\n    QUOTED = 'Quoted'\n    SETTLE = 'Settle'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "MaturityFilter",
        "id": "lseg_analytics.market_data.eq_volatility.MaturityFilter",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "max_maturity",
                "type": "str"
            },
            {
                "name": "min_maturity",
                "type": "str"
            },
            {
                "name": "min_of_median_nb_of_strikes_percent",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 46121,
        "content": "class MaturityFilter:\n    \"\"\"The parameters needed to define the maturity filter.\n\n    Attributes\n    ----------\n    max_maturity : str\n        Max Maturity to consider in the filtering. (expressed in tenor).\n    min_maturity : str\n        Min Maturity to consider in the filtering. (expressed in tenor) Default\n        value: 7D.\n    min_of_median_nb_of_strikes_percent : float\n        Remove maturities whose number of strikes is less than\n        MinOfMedianNbOfStrikesPercent of the Median number of Strikes.\n    \n    \"\"\"\n    max_maturity: typing.Optional[str]\n    min_maturity: typing.Optional[str]\n    min_of_median_nb_of_strikes_percent: typing.Optional[float]",
        "metadata": {
            "doc": "The parameters needed to define the maturity filter.\n\n    Attributes\n    ----------\n    max_maturity : str\n        Max Maturity to consider in the filtering. (expressed in tenor).\n    min_maturity : str\n        Min Maturity to consider in the filtering. (expressed in tenor) Default\n        value: 7D.\n    min_of_median_nb_of_strikes_percent : float\n        Remove maturities whose number of strikes is less than\n        MinOfMedianNbOfStrikesPercent of the Median number of Strikes.\n    \n",
            "annotations": "    max_maturity: typing.Optional[str]\n    min_maturity: typing.Optional[str]\n    min_of_median_nb_of_strikes_percent: typing.Optional[float]",
            "signature": "class MaturityFilter:\n    \"\"\"\"\"\"\n    max_maturity: typing.Optional[str]\n    min_maturity: typing.Optional[str]\n    min_of_median_nb_of_strikes_percent: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.eq_volatility.MaturityFilter.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "MaturityFilter.__init__",
        "id": "lseg_analytics.market_data.eq_volatility.MaturityFilter.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 46163,
        "content": "class MaturityFilter:\n    @overload\n    def __init__(self, *, max_maturity: Optional[str] = None, min_maturity: Optional[str] = None, min_of_median_nb_of_strikes_percent: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "MaturityFilter"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.eq_volatility.MaturityFilter"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "MoneynessTypeEnum",
        "id": "lseg_analytics.market_data.eq_volatility.MoneynessTypeEnum",
        "content": "class MoneynessTypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of MoneynessTypeEnum.\"\"\"\n\n    FWD = \"Fwd\"\n    SIGMA = \"Sigma\"\n    SPOT = \"Spot\"\n",
        "metadata": {
            "doc": "Type of MoneynessTypeEnum.\n",
            "members": [
                "MoneynessTypeEnum.FWD = 'Fwd'",
                "MoneynessTypeEnum.SIGMA = 'Sigma'",
                "MoneynessTypeEnum.SPOT = 'Spot'"
            ],
            "signature": "class MoneynessTypeEnum(Enum):\n    \"\"\"\"\"\"\n    FWD = 'Fwd'\n    SIGMA = 'Sigma'\n    SPOT = 'Spot'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "MoneynessWeight",
        "id": "lseg_analytics.market_data.eq_volatility.MoneynessWeight",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "max_moneyness",
                "type": "float"
            },
            {
                "name": "min_moneyness",
                "type": "float"
            },
            {
                "name": "weight",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 46789,
        "content": "class MoneynessWeight:\n    \"\"\"MoneynessWeight.\n\n    Attributes\n    ----------\n    max_moneyness : float\n    min_moneyness : float\n    weight : float\n    \n    \"\"\"\n    max_moneyness: typing.Optional[float]\n    min_moneyness: typing.Optional[float]\n    weight: typing.Optional[float]",
        "metadata": {
            "doc": "MoneynessWeight.\n\n    Attributes\n    ----------\n    max_moneyness : float\n    min_moneyness : float\n    weight : float\n    \n",
            "annotations": "    max_moneyness: typing.Optional[float]\n    min_moneyness: typing.Optional[float]\n    weight: typing.Optional[float]",
            "signature": "class MoneynessWeight:\n    \"\"\"\"\"\"\n    max_moneyness: typing.Optional[float]\n    min_moneyness: typing.Optional[float]\n    weight: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.eq_volatility.MoneynessWeight.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "MoneynessWeight.__init__",
        "id": "lseg_analytics.market_data.eq_volatility.MoneynessWeight.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 46821,
        "content": "class MoneynessWeight:\n    @overload\n    def __init__(self, *, max_moneyness: Optional[float] = None, min_moneyness: Optional[float] = None, weight: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "MoneynessWeight"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.eq_volatility.MoneynessWeight"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "StrikeFilter",
        "id": "lseg_analytics.market_data.eq_volatility.StrikeFilter",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "max_of_median_implied_vol",
                "type": "float"
            },
            {
                "name": "min_of_median_implied_vol",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 55384,
        "content": "class StrikeFilter:\n    \"\"\"The parameters needed to define the strike filter.\n\n    Attributes\n    ----------\n    max_of_median_implied_vol : float\n        Remove strikes whose implied vol is more than\n        MaxOfMedianImpliedVolPercent x Median implied Vol.\n    min_of_median_implied_vol : float\n        Remove strikes whose implied vol is less than\n        MinOfMedianImpliedVolPercent x Median implied Vol.\n    \n    \"\"\"\n    max_of_median_implied_vol: typing.Optional[float]\n    min_of_median_implied_vol: typing.Optional[float]",
        "metadata": {
            "doc": "The parameters needed to define the strike filter.\n\n    Attributes\n    ----------\n    max_of_median_implied_vol : float\n        Remove strikes whose implied vol is more than\n        MaxOfMedianImpliedVolPercent x Median implied Vol.\n    min_of_median_implied_vol : float\n        Remove strikes whose implied vol is less than\n        MinOfMedianImpliedVolPercent x Median implied Vol.\n    \n",
            "annotations": "    max_of_median_implied_vol: typing.Optional[float]\n    min_of_median_implied_vol: typing.Optional[float]",
            "signature": "class StrikeFilter:\n    \"\"\"\"\"\"\n    max_of_median_implied_vol: typing.Optional[float]\n    min_of_median_implied_vol: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.eq_volatility.StrikeFilter.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "StrikeFilter.__init__",
        "id": "lseg_analytics.market_data.eq_volatility.StrikeFilter.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 55421,
        "content": "class StrikeFilter:\n    @overload\n    def __init__(self, *, max_of_median_implied_vol: Optional[float] = None, min_of_median_implied_vol: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "StrikeFilter"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.eq_volatility.StrikeFilter"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "StrikeFilterRange",
        "id": "lseg_analytics.market_data.eq_volatility.StrikeFilterRange",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "max_of_median_implied_vol_percent",
                "type": "float"
            },
            {
                "name": "min_of_median_implied_vol_percent",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 55425,
        "content": "class StrikeFilterRange:\n    \"\"\"The parameters needed to define the strike filter.\n\n    Attributes\n    ----------\n    max_of_median_implied_vol_percent : float\n        Remove strikes whose implied vol is more than\n        MaxOfMedianImpliedVolPercent x Median implied Vol.\n    min_of_median_implied_vol_percent : float\n        Remove strikes whose implied vol is less than\n        MinOfMedianImpliedVolPercent x Median implied Vol.\n    \n    \"\"\"\n    max_of_median_implied_vol_percent: typing.Optional[float]\n    min_of_median_implied_vol_percent: typing.Optional[float]",
        "metadata": {
            "doc": "The parameters needed to define the strike filter.\n\n    Attributes\n    ----------\n    max_of_median_implied_vol_percent : float\n        Remove strikes whose implied vol is more than\n        MaxOfMedianImpliedVolPercent x Median implied Vol.\n    min_of_median_implied_vol_percent : float\n        Remove strikes whose implied vol is less than\n        MinOfMedianImpliedVolPercent x Median implied Vol.\n    \n",
            "annotations": "    max_of_median_implied_vol_percent: typing.Optional[float]\n    min_of_median_implied_vol_percent: typing.Optional[float]",
            "signature": "class StrikeFilterRange:\n    \"\"\"\"\"\"\n    max_of_median_implied_vol_percent: typing.Optional[float]\n    min_of_median_implied_vol_percent: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.eq_volatility.StrikeFilterRange.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "StrikeFilterRange.__init__",
        "id": "lseg_analytics.market_data.eq_volatility.StrikeFilterRange.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 55462,
        "content": "class StrikeFilterRange:\n    @overload\n    def __init__(self, *, max_of_median_implied_vol_percent: Optional[float] = None, min_of_median_implied_vol_percent: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "StrikeFilterRange"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.eq_volatility.StrikeFilterRange"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "SurfaceFilters",
        "id": "lseg_analytics.market_data.eq_volatility.SurfaceFilters",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "atm_tolerance_interval_percent",
                "type": "float"
            },
            {
                "name": "ensure_prices_monotonicity",
                "type": "bool"
            },
            {
                "name": "include_min_tick_prices",
                "type": "bool"
            },
            {
                "name": "maturity_filter_range",
                "type": "MaturityFilter"
            },
            {
                "name": "max_of_median_bid_ask_spread",
                "type": "float"
            },
            {
                "name": "max_staleness_days",
                "type": "int"
            },
            {
                "name": "strike_range",
                "type": "StrikeFilterRange"
            },
            {
                "name": "strike_range_percent",
                "type": "StrikeFilter"
            },
            {
                "name": "use_only_calls",
                "type": "bool"
            },
            {
                "name": "use_only_puts",
                "type": "bool"
            },
            {
                "name": "use_weekly_options",
                "type": "bool"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 56529,
        "content": "class SurfaceFilters:\n    \"\"\"The parameters needed for filtering the vol.\n\n    Attributes\n    ----------\n    atm_tolerance_interval_percent : float\n        Filter on the ATM tolerance interval percent.\n    ensure_prices_monotonicity : bool\n        Filter on the monotonicity of price options.\n    include_min_tick_prices : bool\n        Take into account the minimum tick prices to build the surface.\n    maturity_filter_range : ~analyticsapi.models.MaturityFilter\n    max_of_median_bid_ask_spread : float\n        Spread mutltiplier to filter the options with the same expiry.\n    max_staleness_days : int\n        Max Staleness past days to use for building the surface.\n    strike_range : ~analyticsapi.models.StrikeFilterRange\n    strike_range_percent : ~analyticsapi.models.StrikeFilter\n    use_only_calls : bool\n        SElect only teh calls to build the surface.\n    use_only_puts : bool\n        Select only the puts to build the surface.\n    use_weekly_options : bool\n        Filter on the weekly options.\n    \n    \"\"\"\n    atm_tolerance_interval_percent: typing.Optional[float]\n    ensure_prices_monotonicity: typing.Optional[bool]\n    include_min_tick_prices: typing.Optional[bool]\n    maturity_filter_range: typing.Optional[ForwardRef('_models.MaturityFilter')]\n    max_of_median_bid_ask_spread: typing.Optional[float]\n    max_staleness_days: typing.Optional[int]\n    strike_range: typing.Optional[ForwardRef('_models.StrikeFilterRange')]\n    strike_range_percent: typing.Optional[ForwardRef('_models.StrikeFilter')]\n    use_only_calls: typing.Optional[bool]\n    use_only_puts: typing.Optional[bool]\n    use_weekly_options: typing.Optional[bool]",
        "metadata": {
            "doc": "The parameters needed for filtering the vol.\n\n    Attributes\n    ----------\n    atm_tolerance_interval_percent : float\n        Filter on the ATM tolerance interval percent.\n    ensure_prices_monotonicity : bool\n        Filter on the monotonicity of price options.\n    include_min_tick_prices : bool\n        Take into account the minimum tick prices to build the surface.\n    maturity_filter_range : ~analyticsapi.models.MaturityFilter\n    max_of_median_bid_ask_spread : float\n        Spread mutltiplier to filter the options with the same expiry.\n    max_staleness_days : int\n        Max Staleness past days to use for building the surface.\n    strike_range : ~analyticsapi.models.StrikeFilterRange\n    strike_range_percent : ~analyticsapi.models.StrikeFilter\n    use_only_calls : bool\n        SElect only teh calls to build the surface.\n    use_only_puts : bool\n        Select only the puts to build the surface.\n    use_weekly_options : bool\n        Filter on the weekly options.\n    \n",
            "annotations": "    atm_tolerance_interval_percent: typing.Optional[float]\n    ensure_prices_monotonicity: typing.Optional[bool]\n    include_min_tick_prices: typing.Optional[bool]\n    maturity_filter_range: typing.Optional[ForwardRef('_models.MaturityFilter')]\n    max_of_median_bid_ask_spread: typing.Optional[float]\n    max_staleness_days: typing.Optional[int]\n    strike_range: typing.Optional[ForwardRef('_models.StrikeFilterRange')]\n    strike_range_percent: typing.Optional[ForwardRef('_models.StrikeFilter')]\n    use_only_calls: typing.Optional[bool]\n    use_only_puts: typing.Optional[bool]\n    use_weekly_options: typing.Optional[bool]",
            "signature": "class SurfaceFilters:\n    \"\"\"\"\"\"\n    atm_tolerance_interval_percent: typing.Optional[float]\n    ensure_prices_monotonicity: typing.Optional[bool]\n    include_min_tick_prices: typing.Optional[bool]\n    maturity_filter_range: typing.Optional[ForwardRef('_models.MaturityFilter')]\n    max_of_median_bid_ask_spread: typing.Optional[float]\n    max_staleness_days: typing.Optional[int]\n    strike_range: typing.Optional[ForwardRef('_models.StrikeFilterRange')]\n    strike_range_percent: typing.Optional[ForwardRef('_models.StrikeFilter')]\n    use_only_calls: typing.Optional[bool]\n    use_only_puts: typing.Optional[bool]\n    use_weekly_options: typing.Optional[bool]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.eq_volatility.SurfaceFilters.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.eq_volatility.MaturityFilter",
                "lseg_analytics.market_data.eq_volatility.StrikeFilterRange",
                "lseg_analytics.market_data.eq_volatility.StrikeFilter"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "SurfaceFilters.__init__",
        "id": "lseg_analytics.market_data.eq_volatility.SurfaceFilters.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 56601,
        "content": "class SurfaceFilters:\n    @overload\n    def __init__(self, *, atm_tolerance_interval_percent: Optional[float] = None, ensure_prices_monotonicity: Optional[bool] = None, include_min_tick_prices: Optional[bool] = None, maturity_filter_range: Optional[ForwardRef('_models.MaturityFilter')] = None, max_of_median_bid_ask_spread: Optional[float] = None, max_staleness_days: Optional[int] = None, strike_range: Optional[ForwardRef('_models.StrikeFilterRange')] = None, strike_range_percent: Optional[ForwardRef('_models.StrikeFilter')] = None, use_only_calls: Optional[bool] = None, use_only_puts: Optional[bool] = None, use_weekly_options: Optional[bool] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "SurfaceFilters"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.eq_volatility.SurfaceFilters"
            ],
            "use": [
                "lseg_analytics.market_data.eq_volatility.MaturityFilter",
                "lseg_analytics.market_data.eq_volatility.StrikeFilterRange",
                "lseg_analytics.market_data.eq_volatility.StrikeFilter"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "SurfaceOutput",
        "id": "lseg_analytics.market_data.eq_volatility.SurfaceOutput",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "data_points",
                "type": "List[VolatilitySurfacePoint]"
            },
            {
                "name": "format",
                "type": "FormatEnum",
                "valuelookup": "enum.FormatEnum"
            },
            {
                "name": "x_point_count",
                "type": "int"
            },
            {
                "name": "x_values",
                "type": "List[str]"
            },
            {
                "name": "y_point_count",
                "type": "int"
            },
            {
                "name": "y_values",
                "type": "List[str]"
            },
            {
                "name": "z_point_count",
                "type": "int"
            },
            {
                "name": "z_values",
                "type": "List[str]"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 56605,
        "content": "class SurfaceOutput:\n    \"\"\"SurfaceOutput.\n\n    Attributes\n    ----------\n    data_points : list[~analyticsapi.models.VolatilitySurfacePoint]\n        Specifies the list of specific data points to be returned.  The default\n        value is None, needs to be assigned before using.\n    format : str or ~analyticsapi.models.FormatEnum\n        Specifies whether the calculated volatilities are returned as a list or\n        a matrix. Known values are: \"List\", \"Matrix\", and \"NDimensionalArray\".\n    x_point_count : int\n        Specifies the number of values that will be generated along the x-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    x_values : list[str]\n        Specifies a list of discrete values for the x-axis.  The default value\n        is None, needs to be assigned before using.\n    y_point_count : int\n        Specifies the number of values that will be generated along the y-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    y_values : list[str]\n        Specifies a list of discrete values for the y-axis.  The default value\n        is None, needs to be assigned before using.\n    z_point_count : int\n        Specifies the number of values that will be generated along the z-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    z_values : list[str]\n        Specifies a list of discrete values for the z-axis.  The default value\n        is None, needs to be assigned before using.\n    \n    \"\"\"\n    data_points: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfacePoint')]]\n    format: typing.Union[str, ForwardRef('_models.FormatEnum'), NoneType]\n    x_point_count: typing.Optional[int]\n    x_values: typing.Optional[typing.List[str]]\n    y_point_count: typing.Optional[int]\n    y_values: typing.Optional[typing.List[str]]\n    z_point_count: typing.Optional[int]\n    z_values: typing.Optional[typing.List[str]]",
        "metadata": {
            "doc": "SurfaceOutput.\n\n    Attributes\n    ----------\n    data_points : list[~analyticsapi.models.VolatilitySurfacePoint]\n        Specifies the list of specific data points to be returned.  The default\n        value is None, needs to be assigned before using.\n    format : str or ~analyticsapi.models.FormatEnum\n        Specifies whether the calculated volatilities are returned as a list or\n        a matrix. Known values are: \"List\", \"Matrix\", and \"NDimensionalArray\".\n    x_point_count : int\n        Specifies the number of values that will be generated along the x-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    x_values : list[str]\n        Specifies a list of discrete values for the x-axis.  The default value\n        is None, needs to be assigned before using.\n    y_point_count : int\n        Specifies the number of values that will be generated along the y-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    y_values : list[str]\n        Specifies a list of discrete values for the y-axis.  The default value\n        is None, needs to be assigned before using.\n    z_point_count : int\n        Specifies the number of values that will be generated along the z-axis.\n        These values will distributed depending on the available input data and\n        the type of volatility.\n    z_values : list[str]\n        Specifies a list of discrete values for the z-axis.  The default value\n        is None, needs to be assigned before using.\n    \n",
            "annotations": "    data_points: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfacePoint')]]\n    format: typing.Union[str, ForwardRef('_models.FormatEnum'), NoneType]\n    x_point_count: typing.Optional[int]\n    x_values: typing.Optional[typing.List[str]]\n    y_point_count: typing.Optional[int]\n    y_values: typing.Optional[typing.List[str]]\n    z_point_count: typing.Optional[int]\n    z_values: typing.Optional[typing.List[str]]",
            "signature": "class SurfaceOutput:\n    \"\"\"\"\"\"\n    data_points: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfacePoint')]]\n    format: typing.Union[str, ForwardRef('_models.FormatEnum'), NoneType]\n    x_point_count: typing.Optional[int]\n    x_values: typing.Optional[typing.List[str]]\n    y_point_count: typing.Optional[int]\n    y_values: typing.Optional[typing.List[str]]\n    z_point_count: typing.Optional[int]\n    z_values: typing.Optional[typing.List[str]]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.eq_volatility.SurfaceOutput.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.eq_volatility.VolatilitySurfacePoint",
                "lseg_analytics.market_data.eq_volatility.FormatEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "SurfaceOutput.__init__",
        "id": "lseg_analytics.market_data.eq_volatility.SurfaceOutput.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 56683,
        "content": "class SurfaceOutput:\n    @overload\n    def __init__(self, *, data_points: Optional[List[ForwardRef('_models.VolatilitySurfacePoint')]] = None, format: Union[str, ForwardRef('_models.FormatEnum'), NoneType] = None, x_point_count: Optional[int] = None, x_values: Optional[List[str]] = None, y_point_count: Optional[int] = None, y_values: Optional[List[str]] = None, z_point_count: Optional[int] = None, z_values: Optional[List[str]] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "SurfaceOutput"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.eq_volatility.SurfaceOutput"
            ],
            "use": [
                "lseg_analytics.market_data.eq_volatility.VolatilitySurfacePoint",
                "lseg_analytics.market_data.eq_volatility.FormatEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilitySurfacePoint",
        "id": "lseg_analytics.market_data.eq_volatility.VolatilitySurfacePoint",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "x",
                "type": "str"
            },
            {
                "name": "y",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62502,
        "content": "class VolatilitySurfacePoint:\n    \"\"\"VolatilitySurfacePoint.\n\n    Attributes\n    ----------\n    x : str\n        The coordinate of the volatility data point on the x-axis.\n    y : str\n        The coordinate of the volatility data point on the y-axis.\n    \n    \"\"\"\n    x: typing.Optional[str]\n    y: typing.Optional[str]",
        "metadata": {
            "doc": "VolatilitySurfacePoint.\n\n    Attributes\n    ----------\n    x : str\n        The coordinate of the volatility data point on the x-axis.\n    y : str\n        The coordinate of the volatility data point on the y-axis.\n    \n",
            "annotations": "    x: typing.Optional[str]\n    y: typing.Optional[str]",
            "signature": "class VolatilitySurfacePoint:\n    \"\"\"\"\"\"\n    x: typing.Optional[str]\n    y: typing.Optional[str]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.eq_volatility.VolatilitySurfacePoint.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilitySurfacePoint.__init__",
        "id": "lseg_analytics.market_data.eq_volatility.VolatilitySurfacePoint.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62535,
        "content": "class VolatilitySurfacePoint:\n    @overload\n    def __init__(self, *, x: Optional[str] = None, y: Optional[str] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilitySurfacePoint"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.eq_volatility.VolatilitySurfacePoint"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilitySurfaceResponse",
        "id": "lseg_analytics.market_data.eq_volatility.VolatilitySurfaceResponse",
        "params": [
            {
                "name": "data",
                "type": "List[VolatilitySurfaceResponseItem]"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62539,
        "content": "class VolatilitySurfaceResponse:\n    \"\"\"VolatilitySurfaceResponse.\n\n    Attributes\n    ----------\n    data : list[~analyticsapi.models.VolatilitySurfaceResponseItem]\n        The list of volatility surfaces that have been generated based on the\n        request.  The default value is None, needs to be assigned before using.\n    \n    \"\"\"\n    data: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfaceResponseItem')]]",
        "metadata": {
            "doc": "VolatilitySurfaceResponse.\n\n    Attributes\n    ----------\n    data : list[~analyticsapi.models.VolatilitySurfaceResponseItem]\n        The list of volatility surfaces that have been generated based on the\n        request.  The default value is None, needs to be assigned before using.\n    \n",
            "annotations": "    data: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfaceResponseItem')]]",
            "signature": "class VolatilitySurfaceResponse:\n    \"\"\"\"\"\"\n    data: typing.Optional[typing.List[ForwardRef('_models.VolatilitySurfaceResponseItem')]]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.eq_volatility.VolatilitySurfaceResponse.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.eq_volatility.VolatilitySurfaceResponseItem"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilitySurfaceResponse.__init__",
        "id": "lseg_analytics.market_data.eq_volatility.VolatilitySurfaceResponse.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62567,
        "content": "class VolatilitySurfaceResponse:\n    @overload\n    def __init__(self, data: Optional[List[ForwardRef('_models.VolatilitySurfaceResponseItem')]] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilitySurfaceResponse"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.eq_volatility.VolatilitySurfaceResponse"
            ],
            "use": [
                "lseg_analytics.market_data.eq_volatility.VolatilitySurfaceResponseItem"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "VolatilitySurfaceResponseItem",
        "id": "lseg_analytics.market_data.eq_volatility.VolatilitySurfaceResponseItem",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "discount_curve",
                "type": "Any"
            },
            {
                "name": "dividends",
                "type": "Any"
            },
            {
                "name": "forward_curve",
                "type": "Any"
            },
            {
                "name": "goodness_of_fit",
                "type": "Any"
            },
            {
                "name": "headers",
                "type": "List[str]"
            },
            {
                "name": "interest_rate_curve",
                "type": "Any"
            },
            {
                "name": "moneyness_strike",
                "type": "Any"
            },
            {
                "name": "surface",
                "type": "List[Any]"
            },
            {
                "name": "surface_tag",
                "type": "str"
            },
            {
                "name": "underlying_spot",
                "type": "Any"
            },
            {
                "name": "constituents",
                "type": "Any"
            },
            {
                "name": "description",
                "type": "Any"
            },
            {
                "name": "cross_currency_curves",
                "type": "Any"
            },
            {
                "name": "calibration_parameters",
                "type": "Any"
            },
            {
                "name": "theoritical_calls_premiums",
                "type": "Any"
            },
            {
                "name": "theoritical_puts_premiums",
                "type": "Any"
            },
            {
                "name": "theoritical_strikes",
                "type": "Any"
            },
            {
                "name": "theoretical_strikes",
                "type": "Any"
            },
            {
                "name": "expiry_dates",
                "type": "Any"
            },
            {
                "name": "surface_information",
                "type": "Any"
            },
            {
                "name": "statistics",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62574,
        "content": "class VolatilitySurfaceResponseItem:\n    \"\"\"VolatilitySurfaceResponseItem.\n\n    Attributes\n    ----------\n    discount_curve : any\n        The discount curve.\n    dividends : any\n        The dividends.\n    forward_curve : any\n        The forward curve.\n    goodness_of_fit : any\n        The goodness of fit for VolSurface.\n    headers : list[str]\n        The list of column headers that describe the columns returned in the\n        case of a \"List\" format.  The default value is None, needs to be\n        assigned before using.\n    interest_rate_curve : any\n        The Interest rate curve.\n    moneyness_strike : any\n        The strike level associated to the moneyness level for VolSurface.\n    surface : list[list[any]]\n        The actual volatility surface.  The default value is None, needs to be\n        assigned before using.\n    surface_tag : str\n        The user-defined tag provided in the request or a generated one if no\n        tag were provided.\n    underlying_spot : any\n        The Underlying Spot.\n    constituents : any\n        The constituents of the volatility surface.\n    description : any\n        A description of the volatility surface.\n    cross_currency_curves : any\n        The cross currency curves.\n    calibration_parameters : any\n        The set of inputs and model-specific variables used to fit the\n        volatility surface to observed option market data.\n    theoritical_calls_premiums : any\n        The model-based call prices derived from the calibrated volatility\n        surface.\n    theoritical_puts_premiums : any\n        The model-based put prices derived from the calibrated volatility\n        surface.\n    theoritical_strikes : any\n        Model-generated strike values.\n    theoretical_strikes : any\n        Model-generated strike values.\n    expiry_dates : any\n        A list of tenors, expiry dates, and settlement dates for each smile\n        point in a volatility surface.\n    surface_information : any\n        This output provides further information about the surface, the\n        underlying, and the constituents.\n    statistics : any\n        The parameters defining the computation of skewness and kurtosis across\n        the smiles of the surface.\n    \n    \"\"\"\n    discount_curve: typing.Optional[typing.Any]\n    dividends: typing.Optional[typing.Any]\n    forward_curve: typing.Optional[typing.Any]\n    goodness_of_fit: typing.Optional[typing.Any]\n    headers: typing.Optional[typing.List[str]]\n    interest_rate_curve: typing.Optional[typing.Any]\n    moneyness_strike: typing.Optional[typing.Any]\n    surface: typing.Optional[typing.List[typing.List[typing.Any]]]\n    surface_tag: typing.Optional[str]\n    underlying_spot: typing.Optional[typing.Any]\n    constituents: typing.Optional[typing.Any]\n    description: typing.Optional[typing.Any]\n    cross_currency_curves: typing.Optional[typing.Any]\n    calibration_parameters: typing.Optional[typing.Any]\n    theoritical_calls_premiums: typing.Optional[typing.Any]\n    theoritical_puts_premiums: typing.Optional[typing.Any]\n    theoritical_strikes: typing.Optional[typing.Any]\n    theoretical_strikes: typing.Optional[typing.Any]\n    expiry_dates: typing.Optional[typing.Any]\n    surface_information: typing.Optional[typing.Any]\n    statistics: typing.Optional[typing.Any]",
        "metadata": {
            "doc": "VolatilitySurfaceResponseItem.\n\n    Attributes\n    ----------\n    discount_curve : any\n        The discount curve.\n    dividends : any\n        The dividends.\n    forward_curve : any\n        The forward curve.\n    goodness_of_fit : any\n        The goodness of fit for VolSurface.\n    headers : list[str]\n        The list of column headers that describe the columns returned in the\n        case of a \"List\" format.  The default value is None, needs to be\n        assigned before using.\n    interest_rate_curve : any\n        The Interest rate curve.\n    moneyness_strike : any\n        The strike level associated to the moneyness level for VolSurface.\n    surface : list[list[any]]\n        The actual volatility surface.  The default value is None, needs to be\n        assigned before using.\n    surface_tag : str\n        The user-defined tag provided in the request or a generated one if no\n        tag were provided.\n    underlying_spot : any\n        The Underlying Spot.\n    constituents : any\n        The constituents of the volatility surface.\n    description : any\n        A description of the volatility surface.\n    cross_currency_curves : any\n        The cross currency curves.\n    calibration_parameters : any\n        The set of inputs and model-specific variables used to fit the\n        volatility surface to observed option market data.\n    theoritical_calls_premiums : any\n        The model-based call prices derived from the calibrated volatility\n        surface.\n    theoritical_puts_premiums : any\n        The model-based put prices derived from the calibrated volatility\n        surface.\n    theoritical_strikes : any\n        Model-generated strike values.\n    theoretical_strikes : any\n        Model-generated strike values.\n    expiry_dates : any\n        A list of tenors, expiry dates, and settlement dates for each smile\n        point in a volatility surface.\n    surface_information : any\n        This output provides further information about the surface, the\n        underlying, and the constituents.\n    statistics : any\n        The parameters defining the computation of skewness and kurtosis across\n        the smiles of the surface.\n    \n",
            "annotations": "    discount_curve: typing.Optional[typing.Any]\n    dividends: typing.Optional[typing.Any]\n    forward_curve: typing.Optional[typing.Any]\n    goodness_of_fit: typing.Optional[typing.Any]\n    headers: typing.Optional[typing.List[str]]\n    interest_rate_curve: typing.Optional[typing.Any]\n    moneyness_strike: typing.Optional[typing.Any]\n    surface: typing.Optional[typing.List[typing.List[typing.Any]]]\n    surface_tag: typing.Optional[str]\n    underlying_spot: typing.Optional[typing.Any]\n    constituents: typing.Optional[typing.Any]\n    description: typing.Optional[typing.Any]\n    cross_currency_curves: typing.Optional[typing.Any]\n    calibration_parameters: typing.Optional[typing.Any]\n    theoritical_calls_premiums: typing.Optional[typing.Any]\n    theoritical_puts_premiums: typing.Optional[typing.Any]\n    theoritical_strikes: typing.Optional[typing.Any]\n    theoretical_strikes: typing.Optional[typing.Any]\n    expiry_dates: typing.Optional[typing.Any]\n    surface_information: typing.Optional[typing.Any]\n    statistics: typing.Optional[typing.Any]",
            "signature": "class VolatilitySurfaceResponseItem:\n    \"\"\"\"\"\"\n    discount_curve: typing.Optional[typing.Any]\n    dividends: typing.Optional[typing.Any]\n    forward_curve: typing.Optional[typing.Any]\n    goodness_of_fit: typing.Optional[typing.Any]\n    headers: typing.Optional[typing.List[str]]\n    interest_rate_curve: typing.Optional[typing.Any]\n    moneyness_strike: typing.Optional[typing.Any]\n    surface: typing.Optional[typing.List[typing.List[typing.Any]]]\n    surface_tag: typing.Optional[str]\n    underlying_spot: typing.Optional[typing.Any]\n    constituents: typing.Optional[typing.Any]\n    description: typing.Optional[typing.Any]\n    cross_currency_curves: typing.Optional[typing.Any]\n    calibration_parameters: typing.Optional[typing.Any]\n    theoritical_calls_premiums: typing.Optional[typing.Any]\n    theoritical_puts_premiums: typing.Optional[typing.Any]\n    theoritical_strikes: typing.Optional[typing.Any]\n    theoretical_strikes: typing.Optional[typing.Any]\n    expiry_dates: typing.Optional[typing.Any]\n    surface_information: typing.Optional[typing.Any]\n    statistics: typing.Optional[typing.Any]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.market_data.eq_volatility.VolatilitySurfaceResponseItem.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "VolatilitySurfaceResponseItem.__init__",
        "id": "lseg_analytics.market_data.eq_volatility.VolatilitySurfaceResponseItem.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 62716,
        "content": "class VolatilitySurfaceResponseItem:\n    @overload\n    def __init__(self, *, discount_curve: Optional[Any] = None, dividends: Optional[Any] = None, forward_curve: Optional[Any] = None, goodness_of_fit: Optional[Any] = None, headers: Optional[List[str]] = None, interest_rate_curve: Optional[Any] = None, moneyness_strike: Optional[Any] = None, surface: Optional[List[List[Any]]] = None, surface_tag: Optional[str] = None, underlying_spot: Optional[Any] = None, constituents: Optional[Any] = None, description: Optional[Any] = None, cross_currency_curves: Optional[Any] = None, calibration_parameters: Optional[Any] = None, theoritical_calls_premiums: Optional[Any] = None, theoritical_puts_premiums: Optional[Any] = None, theoritical_strikes: Optional[Any] = None, theoretical_strikes: Optional[Any] = None, expiry_dates: Optional[Any] = None, surface_information: Optional[Any] = None, statistics: Optional[Any] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "VolatilitySurfaceResponseItem"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.market_data.eq_volatility.VolatilitySurfaceResponseItem"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "XAxisEnum",
        "id": "lseg_analytics.market_data.eq_volatility.XAxisEnum",
        "content": "class XAxisEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of XAxisEnum.\"\"\"\n\n    DATE = \"Date\"\n    DELTA = \"Delta\"\n    EXPIRY = \"Expiry\"\n    MONEYNESS = \"Moneyness\"\n    STRIKE = \"Strike\"\n    TENOR = \"Tenor\"\n",
        "metadata": {
            "doc": "Type of XAxisEnum.\n",
            "members": [
                "XAxisEnum.DATE = 'Date'",
                "XAxisEnum.DELTA = 'Delta'",
                "XAxisEnum.EXPIRY = 'Expiry'",
                "XAxisEnum.MONEYNESS = 'Moneyness'",
                "XAxisEnum.STRIKE = 'Strike'",
                "XAxisEnum.TENOR = 'Tenor'"
            ],
            "signature": "class XAxisEnum(Enum):\n    \"\"\"\"\"\"\n    DATE = 'Date'\n    DELTA = 'Delta'\n    EXPIRY = 'Expiry'\n    MONEYNESS = 'Moneyness'\n    STRIKE = 'Strike'\n    TENOR = 'Tenor'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "YAxisEnum",
        "id": "lseg_analytics.market_data.eq_volatility.YAxisEnum",
        "content": "class YAxisEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of YAxisEnum.\"\"\"\n\n    DATE = \"Date\"\n    DELTA = \"Delta\"\n    EXPIRY = \"Expiry\"\n    MONEYNESS = \"Moneyness\"\n    STRIKE = \"Strike\"\n    TENOR = \"Tenor\"\n",
        "metadata": {
            "doc": "Type of YAxisEnum.\n",
            "members": [
                "YAxisEnum.DATE = 'Date'",
                "YAxisEnum.DELTA = 'Delta'",
                "YAxisEnum.EXPIRY = 'Expiry'",
                "YAxisEnum.MONEYNESS = 'Moneyness'",
                "YAxisEnum.STRIKE = 'Strike'",
                "YAxisEnum.TENOR = 'Tenor'"
            ],
            "signature": "class YAxisEnum(Enum):\n    \"\"\"\"\"\"\n    DATE = 'Date'\n    DELTA = 'Delta'\n    EXPIRY = 'Expiry'\n    MONEYNESS = 'Moneyness'\n    STRIKE = 'Strike'\n    TENOR = 'Tenor'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    },
    {
        "type": "FunctionChunk",
        "name": "calculate",
        "id": "lseg_analytics.market_data.eq_volatility.calculate",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "universe",
                "type": "List[EtiVolatilitySurfaceRequestItem]"
            },
            {
                "name": "fields",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics/market_data/eq_volatility/_functions.py",
        "line_number": 65,
        "content": "def calculate(*, universe: Optional[List[EtiVolatilitySurfaceRequestItem]] = None, fields: Optional[str] = None) -> VolatilitySurfaceResponse:\n    \"\"\"\n    Generates the surfaces for the definitions provided\n\n    Parameters\n    ----------\n    universe : List[EtiVolatilitySurfaceRequestItem], optional\n\n    fields : str, optional\n        A parameter used to select the fields to return in response. If not provided, all fields will be returned.\n        Some usage examples:\n        1. Simply enumerating the fields, separating them by ',', e.g. 'fields=//please insert the selected fields here, e.g., field1, field2 //'\n        2. Using parentheses to indicate nesting, e.g. 'fields= //please insert the selected field and subfields here, e.g., field1(subfield1, subfield2), field2(subfield3)//\u2019\n        3. Using forward slash '/' to indicate nesting, e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1/subfield1, field1/subfield2, field2/subfield3//\u2019 (same result as example above)\n        4. Operators can even be combined (forward slashes in brackets, not the way around), e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1(subfield1/subsubfield1), field2/subfield2//'\n\n    Returns\n    --------\n    VolatilitySurfaceResponse\n\n\n    Examples\n    --------\n    >>> print(\"Step 1: Creating Surface Definition...\")\n    >>> # Select a RIC for equities and indices\n    >>> ric = \"AAPL.O@RIC\"\n    >>>\n    >>> # Create surface definition object\n    >>> surface_definition = ev.EtiSurfaceDefinition(\n    >>>         instrument_code = ric\n    >>>         # exchange = 'NSQ'  # NASDAQ\n    >>>         )\n    >>> print(f\"   \u2713 Instrument: {surface_definition.instrument_code}\")\n    >>>\n    >>>\n    >>> print(\"Step 2: Configuring Surface Parameters...\")\n    >>> surface_parameters = ev.EtiSurfaceParameters(\n    >>>         calculation_date = dt.datetime.strptime(\"2025-01-18\", \"%Y-%m-%d\"),\n    >>>         time_stamp = ev.CurvesAndSurfacesTimeStampEnum.DEFAULT,          # Options: CLOSE, OPEN, SETTLE, DEFAULT\n    >>>         input_volatility_type = ev.InputVolatilityTypeEnum.IMPLIED,      # Options: IMPLIED, QUOTED\n    >>>         volatility_model = ev.CurvesAndSurfacesVolatilityModelEnum.SSVI, # Options: SVI, SSVI\n    >>>         moneyness_type = ev.MoneynessTypeEnum.SPOT,                      # Options: SPOT\n    >>>         price_side = ev.CurvesAndSurfacesPriceSideEnum.MID,              # Options: BID, MID, ASK\n    >>>         x_axis = ev.XAxisEnum.STRIKE,                                    # Options: DATE, DELTA, MONEYNESS, STRIKE, TENOR\n    >>>         y_axis = ev.YAxisEnum.DATE                                       # Options: same as X-axis\n    >>>     )\n    >>> print(f\"   \u2713 Surface Parameters: {surface_parameters}\")\n    >>>\n    >>>\n    >>> print(\"Step 3: Create request item...\")\n    >>> # Create the main request object  with basic configuration\n    >>> request_item = ev.EtiVolatilitySurfaceRequestItem(\n    >>>         surface_tag = f\"{ric}_Volsurface\",\n    >>>         underlying_definition = surface_definition,\n    >>>         surface_parameters = surface_parameters,\n    >>>         underlying_type = ev.CurvesAndSurfacesUnderlyingTypeEnum.ETI,\n    >>>         surface_layout = ev.SurfaceOutput(\n    >>>             format = ev.FormatEnum.MATRIX,  # Options: LIST, MATRIX\n    >>>         )\n    >>>     )\n    >>> print(f\"   \u2713 Request Item: {request_item}\")\n    Step 1: Creating Surface Definition...\n       \u2713 Instrument: AAPL.O@RIC\n    Step 2: Configuring Surface Parameters...\n       \u2713 Surface Parameters: {'calculationDate': '2025-01-18T00:00:00Z', 'timeStamp': 'Default', 'inputVolatilityType': 'Implied', 'volatilityModel': 'SSVI', 'moneynessType': 'Spot', 'priceSide': 'Mid', 'xAxis': 'Strike', 'yAxis': 'Date'}\n    Step 3: Create request item...\n       \u2713 Request Item: {'surfaceTag': 'AAPL.O@RIC_Volsurface', 'underlyingDefinition': {'instrumentCode': 'AAPL.O@RIC'}, 'surfaceParameters': {'calculationDate': '2025-01-18T00:00:00Z', 'timeStamp': 'Default', 'inputVolatilityType': 'Implied', 'volatilityModel': 'SSVI', 'moneynessType': 'Spot', 'priceSide': 'Mid', 'xAxis': 'Strike', 'yAxis': 'Date'}, 'underlyingType': 'Eti', 'surfaceLayout': {'format': 'Matrix'}}\n\n\n    >>> # Execute the calculation using the calculate function\n    >>> # The 'universe' parameter accepts a list of request items for batch processing\n    >>> try:\n    >>>     response = ev.calculate(universe=[request_item])\n    >>>\n    >>>     # Display response structure information\n    >>>     surface_data = response['data'][0]\n    >>>     if 'surface' in surface_data:\n    >>>         print(f\"   Calculation successful!\")\n    >>>         print(f\"   Surface data points available: {len(surface_data['surface'])}\")\n    >>>     else:\n    >>>         print(\"   No surface data found in response\")\n    >>>\n    >>> except Exception as e:\n    >>>     print(f\"   Calculation failed: {str(e)}\")\n    >>>     raise\n       Calculation successful!\n       Surface data points available: 20\n\n    \n    \"\"\"",
        "metadata": {
            "doc": "\n    Generates the surfaces for the definitions provided\n\n    Parameters\n    ----------\n    universe : List[EtiVolatilitySurfaceRequestItem], optional\n\n    fields : str, optional\n        A parameter used to select the fields to return in response. If not provided, all fields will be returned.\n        Some usage examples:\n        1. Simply enumerating the fields, separating them by ',', e.g. 'fields=//please insert the selected fields here, e.g., field1, field2 //'\n        2. Using parentheses to indicate nesting, e.g. 'fields= //please insert the selected field and subfields here, e.g., field1(subfield1, subfield2), field2(subfield3)//\u2019\n        3. Using forward slash '/' to indicate nesting, e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1/subfield1, field1/subfield2, field2/subfield3//\u2019 (same result as example above)\n        4. Operators can even be combined (forward slashes in brackets, not the way around), e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1(subfield1/subsubfield1), field2/subfield2//'\n\n    Returns\n    --------\n    VolatilitySurfaceResponse\n\n\n    Examples\n    --------\n    >>> print(\"Step 1: Creating Surface Definition...\")\n    >>> # Select a RIC for equities and indices\n    >>> ric = \"AAPL.O@RIC\"\n    >>>\n    >>> # Create surface definition object\n    >>> surface_definition = ev.EtiSurfaceDefinition(\n    >>>         instrument_code = ric\n    >>>         # exchange = 'NSQ'  # NASDAQ\n    >>>         )\n    >>> print(f\"   \u2713 Instrument: {surface_definition.instrument_code}\")\n    >>>\n    >>>\n    >>> print(\"Step 2: Configuring Surface Parameters...\")\n    >>> surface_parameters = ev.EtiSurfaceParameters(\n    >>>         calculation_date = dt.datetime.strptime(\"2025-01-18\", \"%Y-%m-%d\"),\n    >>>         time_stamp = ev.CurvesAndSurfacesTimeStampEnum.DEFAULT,          # Options: CLOSE, OPEN, SETTLE, DEFAULT\n    >>>         input_volatility_type = ev.InputVolatilityTypeEnum.IMPLIED,      # Options: IMPLIED, QUOTED\n    >>>         volatility_model = ev.CurvesAndSurfacesVolatilityModelEnum.SSVI, # Options: SVI, SSVI\n    >>>         moneyness_type = ev.MoneynessTypeEnum.SPOT,                      # Options: SPOT\n    >>>         price_side = ev.CurvesAndSurfacesPriceSideEnum.MID,              # Options: BID, MID, ASK\n    >>>         x_axis = ev.XAxisEnum.STRIKE,                                    # Options: DATE, DELTA, MONEYNESS, STRIKE, TENOR\n    >>>         y_axis = ev.YAxisEnum.DATE                                       # Options: same as X-axis\n    >>>     )\n    >>> print(f\"   \u2713 Surface Parameters: {surface_parameters}\")\n    >>>\n    >>>\n    >>> print(\"Step 3: Create request item...\")\n    >>> # Create the main request object  with basic configuration\n    >>> request_item = ev.EtiVolatilitySurfaceRequestItem(\n    >>>         surface_tag = f\"{ric}_Volsurface\",\n    >>>         underlying_definition = surface_definition,\n    >>>         surface_parameters = surface_parameters,\n    >>>         underlying_type = ev.CurvesAndSurfacesUnderlyingTypeEnum.ETI,\n    >>>         surface_layout = ev.SurfaceOutput(\n    >>>             format = ev.FormatEnum.MATRIX,  # Options: LIST, MATRIX\n    >>>         )\n    >>>     )\n    >>> print(f\"   \u2713 Request Item: {request_item}\")\n    Step 1: Creating Surface Definition...\n       \u2713 Instrument: AAPL.O@RIC\n    Step 2: Configuring Surface Parameters...\n       \u2713 Surface Parameters: {'calculationDate': '2025-01-18T00:00:00Z', 'timeStamp': 'Default', 'inputVolatilityType': 'Implied', 'volatilityModel': 'SSVI', 'moneynessType': 'Spot', 'priceSide': 'Mid', 'xAxis': 'Strike', 'yAxis': 'Date'}\n    Step 3: Create request item...\n       \u2713 Request Item: {'surfaceTag': 'AAPL.O@RIC_Volsurface', 'underlyingDefinition': {'instrumentCode': 'AAPL.O@RIC'}, 'surfaceParameters': {'calculationDate': '2025-01-18T00:00:00Z', 'timeStamp': 'Default', 'inputVolatilityType': 'Implied', 'volatilityModel': 'SSVI', 'moneynessType': 'Spot', 'priceSide': 'Mid', 'xAxis': 'Strike', 'yAxis': 'Date'}, 'underlyingType': 'Eti', 'surfaceLayout': {'format': 'Matrix'}}\n\n\n    >>> # Execute the calculation using the calculate function\n    >>> # The 'universe' parameter accepts a list of request items for batch processing\n    >>> try:\n    >>>     response = ev.calculate(universe=[request_item])\n    >>>\n    >>>     # Display response structure information\n    >>>     surface_data = response['data'][0]\n    >>>     if 'surface' in surface_data:\n    >>>         print(f\"   Calculation successful!\")\n    >>>         print(f\"   Surface data points available: {len(surface_data['surface'])}\")\n    >>>     else:\n    >>>         print(\"   No surface data found in response\")\n    >>>\n    >>> except Exception as e:\n    >>>     print(f\"   Calculation failed: {str(e)}\")\n    >>>     raise\n       Calculation successful!\n       Surface data points available: 20\n\n    \n",
            "signature": "def calculate(*, universe: Optional[List[EtiVolatilitySurfaceRequestItem]] = None, fields: Optional[str] = None) -> VolatilitySurfaceResponse:"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": [
                "lseg_analytics.market_data.eq_volatility.EtiVolatilitySurfaceRequestItem",
                "lseg_analytics.market_data.eq_volatility.VolatilitySurfaceResponse"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.market_data.eq_volatility",
        "module_version": "2.1.0b5"
    }
]