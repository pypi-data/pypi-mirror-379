[
    {
        "type": "ClassChunk",
        "name": "FinancialContractResponse",
        "id": "lseg_analytics.instruments.term_deposit.FinancialContractResponse",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "data",
                "type": "List[Any]"
            },
            {
                "name": "headers",
                "type": "List[Header]"
            },
            {
                "name": "statuses",
                "type": "List[int]"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 27216,
        "content": "class FinancialContractResponse:\n    \"\"\"The tabular response of the Financial Contract API of the Quantitative Analytics service.\n\n    Attributes\n    ----------\n    data : list[any]\n        The list that contains the values of requested fields for each\n        Financial Contract definition sent.Financial Contracts appears in the\n        rows and fields in the columns.  The default value is None, needs to be\n        assigned before using.\n    headers : list[~analyticsapi.models.Header]\n        The column headers of the requested fields.  The default value is None,\n        needs to be assigned before using.\n    statuses : list[int]\n        A list that contains the status of each calculation requested. Each\n        code is described in the \"Messages\" property. Codes higher than 1000\n        represents errors.  The default value is None, needs to be assigned\n        before using.\n    \n    \"\"\"\n    data: typing.Optional[typing.List[typing.Any]]\n    headers: typing.Optional[typing.List[ForwardRef('_models.Header')]]\n    statuses: typing.Optional[typing.List[int]]",
        "metadata": {
            "doc": "The tabular response of the Financial Contract API of the Quantitative Analytics service.\n\n    Attributes\n    ----------\n    data : list[any]\n        The list that contains the values of requested fields for each\n        Financial Contract definition sent.Financial Contracts appears in the\n        rows and fields in the columns.  The default value is None, needs to be\n        assigned before using.\n    headers : list[~analyticsapi.models.Header]\n        The column headers of the requested fields.  The default value is None,\n        needs to be assigned before using.\n    statuses : list[int]\n        A list that contains the status of each calculation requested. Each\n        code is described in the \"Messages\" property. Codes higher than 1000\n        represents errors.  The default value is None, needs to be assigned\n        before using.\n    \n",
            "annotations": "    data: typing.Optional[typing.List[typing.Any]]\n    headers: typing.Optional[typing.List[ForwardRef('_models.Header')]]\n    statuses: typing.Optional[typing.List[int]]",
            "signature": "class FinancialContractResponse:\n    \"\"\"\"\"\"\n    data: typing.Optional[typing.List[typing.Any]]\n    headers: typing.Optional[typing.List[ForwardRef('_models.Header')]]\n    statuses: typing.Optional[typing.List[int]]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.term_deposit.FinancialContractResponse.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.term_deposit.Header"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "FinancialContractResponse.__init__",
        "id": "lseg_analytics.instruments.term_deposit.FinancialContractResponse.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 27263,
        "content": "class FinancialContractResponse:\n    @overload\n    def __init__(self, *, data: Optional[List[Any]] = None, headers: Optional[List[ForwardRef('_models.Header')]] = None, statuses: Optional[List[int]] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "FinancialContractResponse"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.term_deposit.FinancialContractResponse"
            ],
            "use": [
                "lseg_analytics.instruments.term_deposit.Header"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "FinancialContractYearBasisEnum",
        "id": "lseg_analytics.instruments.term_deposit.FinancialContractYearBasisEnum",
        "content": "class FinancialContractYearBasisEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of FinancialContractYearBasisEnum.\"\"\"\n\n    DCB_30_360 = \"Dcb_30_360\"\n    DCB_30_360_US = \"Dcb_30_360_US\"\n    DCB_30_360_GERMAN = \"Dcb_30_360_German\"\n    DCB_30_360_ISDA = \"Dcb_30_360_ISDA\"\n    DCB_30_365_ISDA = \"Dcb_30_365_ISDA\"\n    DCB_30_365_GERMAN = \"Dcb_30_365_German\"\n    DCB_30_365_BRAZIL = \"Dcb_30_365_Brazil\"\n    DCB_30_ACTUAL_GERMAN = \"Dcb_30_Actual_German\"\n    DCB_30_ACTUAL = \"Dcb_30_Actual\"\n    DCB_30_ACTUAL_ISDA = \"Dcb_30_Actual_ISDA\"\n    DCB_30_E_360_ISMA = \"Dcb_30E_360_ISMA\"\n    DCB_ACTUAL_360 = \"Dcb_Actual_360\"\n    DCB_ACTUAL_364 = \"Dcb_Actual_364\"\n    DCB_ACTUAL_365 = \"Dcb_Actual_365\"\n    DCB_ACTUAL_ACTUAL = \"Dcb_Actual_Actual\"\n    DCB_ACTUAL_ACTUAL_ISDA = \"Dcb_Actual_Actual_ISDA\"\n    DCB_ACTUAL_ACTUAL_AFB = \"Dcb_Actual_Actual_AFB\"\n    DCB_WORKING_DAYS_252 = \"Dcb_WorkingDays_252\"\n    DCB_ACTUAL_365_L = \"Dcb_Actual_365L\"\n    DCB_ACTUAL_365_P = \"Dcb_Actual_365P\"\n    DCB_ACTUAL_LEAP_DAY_365 = \"Dcb_ActualLeapDay_365\"\n    DCB_ACTUAL_LEAP_DAY_360 = \"Dcb_ActualLeapDay_360\"\n    DCB_ACTUAL_36525 = \"Dcb_Actual_36525\"\n    DCB_ACTUAL_365_CANADIAN_CONVENTION = \"Dcb_Actual_365_CanadianConvention\"\n    DCB_CONSTANT = \"Dcb_Constant\"\n",
        "metadata": {
            "doc": "Type of FinancialContractYearBasisEnum.\n",
            "members": [
                "FinancialContractYearBasisEnum.DCB_30_360 = 'Dcb_30_360'",
                "FinancialContractYearBasisEnum.DCB_30_360_US = 'Dcb_30_360_US'",
                "FinancialContractYearBasisEnum.DCB_30_360_GERMAN = 'Dcb_30_360_German'",
                "FinancialContractYearBasisEnum.DCB_30_360_ISDA = 'Dcb_30_360_ISDA'",
                "FinancialContractYearBasisEnum.DCB_30_365_ISDA = 'Dcb_30_365_ISDA'",
                "FinancialContractYearBasisEnum.DCB_30_365_GERMAN = 'Dcb_30_365_German'",
                "FinancialContractYearBasisEnum.DCB_30_365_BRAZIL = 'Dcb_30_365_Brazil'",
                "FinancialContractYearBasisEnum.DCB_30_ACTUAL_GERMAN = 'Dcb_30_Actual_German'",
                "FinancialContractYearBasisEnum.DCB_30_ACTUAL = 'Dcb_30_Actual'",
                "FinancialContractYearBasisEnum.DCB_30_ACTUAL_ISDA = 'Dcb_30_Actual_ISDA'",
                "FinancialContractYearBasisEnum.DCB_30_E_360_ISMA = 'Dcb_30E_360_ISMA'",
                "FinancialContractYearBasisEnum.DCB_ACTUAL_360 = 'Dcb_Actual_360'",
                "FinancialContractYearBasisEnum.DCB_ACTUAL_364 = 'Dcb_Actual_364'",
                "FinancialContractYearBasisEnum.DCB_ACTUAL_365 = 'Dcb_Actual_365'",
                "FinancialContractYearBasisEnum.DCB_ACTUAL_ACTUAL = 'Dcb_Actual_Actual'",
                "FinancialContractYearBasisEnum.DCB_ACTUAL_ACTUAL_ISDA = 'Dcb_Actual_Actual_ISDA'",
                "FinancialContractYearBasisEnum.DCB_ACTUAL_ACTUAL_AFB = 'Dcb_Actual_Actual_AFB'",
                "FinancialContractYearBasisEnum.DCB_WORKING_DAYS_252 = 'Dcb_WorkingDays_252'",
                "FinancialContractYearBasisEnum.DCB_ACTUAL_365_L = 'Dcb_Actual_365L'",
                "FinancialContractYearBasisEnum.DCB_ACTUAL_365_P = 'Dcb_Actual_365P'",
                "FinancialContractYearBasisEnum.DCB_ACTUAL_LEAP_DAY_365 = 'Dcb_ActualLeapDay_365'",
                "FinancialContractYearBasisEnum.DCB_ACTUAL_LEAP_DAY_360 = 'Dcb_ActualLeapDay_360'",
                "FinancialContractYearBasisEnum.DCB_ACTUAL_36525 = 'Dcb_Actual_36525'",
                "FinancialContractYearBasisEnum.DCB_ACTUAL_365_CANADIAN_CONVENTION = 'Dcb_Actual_365_CanadianConvention'",
                "FinancialContractYearBasisEnum.DCB_CONSTANT = 'Dcb_Constant'"
            ],
            "signature": "class FinancialContractYearBasisEnum(Enum):\n    \"\"\"\"\"\"\n    DCB_30_360 = 'Dcb_30_360'\n    DCB_30_360_US = 'Dcb_30_360_US'\n    DCB_30_360_GERMAN = 'Dcb_30_360_German'\n    DCB_30_360_ISDA = 'Dcb_30_360_ISDA'\n    DCB_30_365_ISDA = 'Dcb_30_365_ISDA'\n    DCB_30_365_GERMAN = 'Dcb_30_365_German'\n    DCB_30_365_BRAZIL = 'Dcb_30_365_Brazil'\n    DCB_30_ACTUAL_GERMAN = 'Dcb_30_Actual_German'\n    DCB_30_ACTUAL = 'Dcb_30_Actual'\n    DCB_30_ACTUAL_ISDA = 'Dcb_30_Actual_ISDA'\n    DCB_30_E_360_ISMA = 'Dcb_30E_360_ISMA'\n    DCB_ACTUAL_360 = 'Dcb_Actual_360'\n    DCB_ACTUAL_364 = 'Dcb_Actual_364'\n    DCB_ACTUAL_365 = 'Dcb_Actual_365'\n    DCB_ACTUAL_ACTUAL = 'Dcb_Actual_Actual'\n    DCB_ACTUAL_ACTUAL_ISDA = 'Dcb_Actual_Actual_ISDA'\n    DCB_ACTUAL_ACTUAL_AFB = 'Dcb_Actual_Actual_AFB'\n    DCB_WORKING_DAYS_252 = 'Dcb_WorkingDays_252'\n    DCB_ACTUAL_365_L = 'Dcb_Actual_365L'\n    DCB_ACTUAL_365_P = 'Dcb_Actual_365P'\n    DCB_ACTUAL_LEAP_DAY_365 = 'Dcb_ActualLeapDay_365'\n    DCB_ACTUAL_LEAP_DAY_360 = 'Dcb_ActualLeapDay_360'\n    DCB_ACTUAL_36525 = 'Dcb_Actual_36525'\n    DCB_ACTUAL_365_CANADIAN_CONVENTION = 'Dcb_Actual_365_CanadianConvention'\n    DCB_CONSTANT = 'Dcb_Constant'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "Header",
        "id": "lseg_analytics.instruments.term_deposit.Header",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "name",
                "type": "str"
            },
            {
                "name": "type",
                "type": "TypeEnum",
                "valuelookup": "enum.TypeEnum"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 34629,
        "content": "class Header:\n    \"\"\"Header.\n\n    Attributes\n    ----------\n    name : str\n        Name of the field.\n    type : str or ~analyticsapi.models.TypeEnum\n        Type of the field. Known values are: \"String\", \"Float\", \"DateTime\",\n        \"Integer\", \"Object\", \"Date\", \"Bool\", \"StringArray\", \"FloatArray\",\n        \"DateArray\", \"ObjectArray\", and \"InvalidField\".\n    \n    \"\"\"\n    name: typing.Optional[str]\n    type: typing.Union[str, ForwardRef('_models.TypeEnum'), NoneType]",
        "metadata": {
            "doc": "Header.\n\n    Attributes\n    ----------\n    name : str\n        Name of the field.\n    type : str or ~analyticsapi.models.TypeEnum\n        Type of the field. Known values are: \"String\", \"Float\", \"DateTime\",\n        \"Integer\", \"Object\", \"Date\", \"Bool\", \"StringArray\", \"FloatArray\",\n        \"DateArray\", \"ObjectArray\", and \"InvalidField\".\n    \n",
            "annotations": "    name: typing.Optional[str]\n    type: typing.Union[str, ForwardRef('_models.TypeEnum'), NoneType]",
            "signature": "class Header:\n    \"\"\"\"\"\"\n    name: typing.Optional[str]\n    type: typing.Union[str, ForwardRef('_models.TypeEnum'), NoneType]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.term_deposit.Header.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.term_deposit.TypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "Header.__init__",
        "id": "lseg_analytics.instruments.term_deposit.Header.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 34666,
        "content": "class Header:\n    @overload\n    def __init__(self, *, name: Optional[str] = None, type: Union[str, ForwardRef('_models.TypeEnum'), NoneType] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "Header"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.term_deposit.Header"
            ],
            "use": [
                "lseg_analytics.instruments.term_deposit.TypeEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "InterestCalculationMethodEnum",
        "id": "lseg_analytics.instruments.term_deposit.InterestCalculationMethodEnum",
        "content": "class InterestCalculationMethodEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of InterestCalculationMethodEnum.\"\"\"\n\n    DCB_30_360 = \"Dcb_30_360\"\n    DCB_30_360_US = \"Dcb_30_360_US\"\n    DCB_30_360_GERMAN = \"Dcb_30_360_German\"\n    DCB_30_360_ISDA = \"Dcb_30_360_ISDA\"\n    DCB_30_365_ISDA = \"Dcb_30_365_ISDA\"\n    DCB_30_365_GERMAN = \"Dcb_30_365_German\"\n    DCB_30_365_BRAZIL = \"Dcb_30_365_Brazil\"\n    DCB_30_ACTUAL_GERMAN = \"Dcb_30_Actual_German\"\n    DCB_30_ACTUAL = \"Dcb_30_Actual\"\n    DCB_30_ACTUAL_ISDA = \"Dcb_30_Actual_ISDA\"\n    DCB_30_E_360_ISMA = \"Dcb_30E_360_ISMA\"\n    DCB_ACTUAL_360 = \"Dcb_Actual_360\"\n    DCB_ACTUAL_364 = \"Dcb_Actual_364\"\n    DCB_ACTUAL_365 = \"Dcb_Actual_365\"\n    DCB_ACTUAL_ACTUAL = \"Dcb_Actual_Actual\"\n    DCB_ACTUAL_ACTUAL_ISDA = \"Dcb_Actual_Actual_ISDA\"\n    DCB_ACTUAL_ACTUAL_AFB = \"Dcb_Actual_Actual_AFB\"\n    DCB_WORKING_DAYS_252 = \"Dcb_WorkingDays_252\"\n    DCB_ACTUAL_365_L = \"Dcb_Actual_365L\"\n    DCB_ACTUAL_365_P = \"Dcb_Actual_365P\"\n    DCB_ACTUAL_LEAP_DAY_365 = \"Dcb_ActualLeapDay_365\"\n    DCB_ACTUAL_LEAP_DAY_360 = \"Dcb_ActualLeapDay_360\"\n    DCB_ACTUAL_36525 = \"Dcb_Actual_36525\"\n    DCB_ACTUAL_365_CANADIAN_CONVENTION = \"Dcb_Actual_365_CanadianConvention\"\n    DCB_CONSTANT = \"Dcb_Constant\"\n",
        "metadata": {
            "doc": "Type of InterestCalculationMethodEnum.\n",
            "members": [
                "InterestCalculationMethodEnum.DCB_30_360 = 'Dcb_30_360'",
                "InterestCalculationMethodEnum.DCB_30_360_US = 'Dcb_30_360_US'",
                "InterestCalculationMethodEnum.DCB_30_360_GERMAN = 'Dcb_30_360_German'",
                "InterestCalculationMethodEnum.DCB_30_360_ISDA = 'Dcb_30_360_ISDA'",
                "InterestCalculationMethodEnum.DCB_30_365_ISDA = 'Dcb_30_365_ISDA'",
                "InterestCalculationMethodEnum.DCB_30_365_GERMAN = 'Dcb_30_365_German'",
                "InterestCalculationMethodEnum.DCB_30_365_BRAZIL = 'Dcb_30_365_Brazil'",
                "InterestCalculationMethodEnum.DCB_30_ACTUAL_GERMAN = 'Dcb_30_Actual_German'",
                "InterestCalculationMethodEnum.DCB_30_ACTUAL = 'Dcb_30_Actual'",
                "InterestCalculationMethodEnum.DCB_30_ACTUAL_ISDA = 'Dcb_30_Actual_ISDA'",
                "InterestCalculationMethodEnum.DCB_30_E_360_ISMA = 'Dcb_30E_360_ISMA'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_360 = 'Dcb_Actual_360'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_364 = 'Dcb_Actual_364'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_365 = 'Dcb_Actual_365'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_ACTUAL = 'Dcb_Actual_Actual'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_ACTUAL_ISDA = 'Dcb_Actual_Actual_ISDA'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_ACTUAL_AFB = 'Dcb_Actual_Actual_AFB'",
                "InterestCalculationMethodEnum.DCB_WORKING_DAYS_252 = 'Dcb_WorkingDays_252'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_365_L = 'Dcb_Actual_365L'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_365_P = 'Dcb_Actual_365P'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_LEAP_DAY_365 = 'Dcb_ActualLeapDay_365'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_LEAP_DAY_360 = 'Dcb_ActualLeapDay_360'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_36525 = 'Dcb_Actual_36525'",
                "InterestCalculationMethodEnum.DCB_ACTUAL_365_CANADIAN_CONVENTION = 'Dcb_Actual_365_CanadianConvention'",
                "InterestCalculationMethodEnum.DCB_CONSTANT = 'Dcb_Constant'"
            ],
            "signature": "class InterestCalculationMethodEnum(Enum):\n    \"\"\"\"\"\"\n    DCB_30_360 = 'Dcb_30_360'\n    DCB_30_360_US = 'Dcb_30_360_US'\n    DCB_30_360_GERMAN = 'Dcb_30_360_German'\n    DCB_30_360_ISDA = 'Dcb_30_360_ISDA'\n    DCB_30_365_ISDA = 'Dcb_30_365_ISDA'\n    DCB_30_365_GERMAN = 'Dcb_30_365_German'\n    DCB_30_365_BRAZIL = 'Dcb_30_365_Brazil'\n    DCB_30_ACTUAL_GERMAN = 'Dcb_30_Actual_German'\n    DCB_30_ACTUAL = 'Dcb_30_Actual'\n    DCB_30_ACTUAL_ISDA = 'Dcb_30_Actual_ISDA'\n    DCB_30_E_360_ISMA = 'Dcb_30E_360_ISMA'\n    DCB_ACTUAL_360 = 'Dcb_Actual_360'\n    DCB_ACTUAL_364 = 'Dcb_Actual_364'\n    DCB_ACTUAL_365 = 'Dcb_Actual_365'\n    DCB_ACTUAL_ACTUAL = 'Dcb_Actual_Actual'\n    DCB_ACTUAL_ACTUAL_ISDA = 'Dcb_Actual_Actual_ISDA'\n    DCB_ACTUAL_ACTUAL_AFB = 'Dcb_Actual_Actual_AFB'\n    DCB_WORKING_DAYS_252 = 'Dcb_WorkingDays_252'\n    DCB_ACTUAL_365_L = 'Dcb_Actual_365L'\n    DCB_ACTUAL_365_P = 'Dcb_Actual_365P'\n    DCB_ACTUAL_LEAP_DAY_365 = 'Dcb_ActualLeapDay_365'\n    DCB_ACTUAL_LEAP_DAY_360 = 'Dcb_ActualLeapDay_360'\n    DCB_ACTUAL_36525 = 'Dcb_Actual_36525'\n    DCB_ACTUAL_365_CANADIAN_CONVENTION = 'Dcb_Actual_365_CanadianConvention'\n    DCB_CONSTANT = 'Dcb_Constant'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "InterestPaymentFrequencyEnum",
        "id": "lseg_analytics.instruments.term_deposit.InterestPaymentFrequencyEnum",
        "content": "class InterestPaymentFrequencyEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of InterestPaymentFrequencyEnum.\"\"\"\n\n    ANNUAL = \"Annual\"\n    SEMI_ANNUAL = \"SemiAnnual\"\n    QUARTERLY = \"Quarterly\"\n    MONTHLY = \"Monthly\"\n    BI_MONTHLY = \"BiMonthly\"\n    EVERYDAY = \"Everyday\"\n    EVERY_WORKING_DAY = \"EveryWorkingDay\"\n    EVERY7_DAYS = \"Every7Days\"\n    EVERY14_DAYS = \"Every14Days\"\n    EVERY28_DAYS = \"Every28Days\"\n    EVERY30_DAYS = \"Every30Days\"\n    EVERY91_DAYS = \"Every91Days\"\n    EVERY182_DAYS = \"Every182Days\"\n    EVERY364_DAYS = \"Every364Days\"\n    EVERY365_DAYS = \"Every365Days\"\n    EVERY90_DAYS = \"Every90Days\"\n    EVERY92_DAYS = \"Every92Days\"\n    EVERY93_DAYS = \"Every93Days\"\n    EVERY180_DAYS = \"Every180Days\"\n    EVERY183_DAYS = \"Every183Days\"\n    EVERY184_DAYS = \"Every184Days\"\n    EVERY4_MONTHS = \"Every4Months\"\n    R2 = \"R2\"\n    R4 = \"R4\"\n    ZERO = \"Zero\"\n    SCHEDULED = \"Scheduled\"\n",
        "metadata": {
            "doc": "Type of InterestPaymentFrequencyEnum.\n",
            "members": [
                "InterestPaymentFrequencyEnum.ANNUAL = 'Annual'",
                "InterestPaymentFrequencyEnum.SEMI_ANNUAL = 'SemiAnnual'",
                "InterestPaymentFrequencyEnum.QUARTERLY = 'Quarterly'",
                "InterestPaymentFrequencyEnum.MONTHLY = 'Monthly'",
                "InterestPaymentFrequencyEnum.BI_MONTHLY = 'BiMonthly'",
                "InterestPaymentFrequencyEnum.EVERYDAY = 'Everyday'",
                "InterestPaymentFrequencyEnum.EVERY_WORKING_DAY = 'EveryWorkingDay'",
                "InterestPaymentFrequencyEnum.EVERY7_DAYS = 'Every7Days'",
                "InterestPaymentFrequencyEnum.EVERY14_DAYS = 'Every14Days'",
                "InterestPaymentFrequencyEnum.EVERY28_DAYS = 'Every28Days'",
                "InterestPaymentFrequencyEnum.EVERY30_DAYS = 'Every30Days'",
                "InterestPaymentFrequencyEnum.EVERY91_DAYS = 'Every91Days'",
                "InterestPaymentFrequencyEnum.EVERY182_DAYS = 'Every182Days'",
                "InterestPaymentFrequencyEnum.EVERY364_DAYS = 'Every364Days'",
                "InterestPaymentFrequencyEnum.EVERY365_DAYS = 'Every365Days'",
                "InterestPaymentFrequencyEnum.EVERY90_DAYS = 'Every90Days'",
                "InterestPaymentFrequencyEnum.EVERY92_DAYS = 'Every92Days'",
                "InterestPaymentFrequencyEnum.EVERY93_DAYS = 'Every93Days'",
                "InterestPaymentFrequencyEnum.EVERY180_DAYS = 'Every180Days'",
                "InterestPaymentFrequencyEnum.EVERY183_DAYS = 'Every183Days'",
                "InterestPaymentFrequencyEnum.EVERY184_DAYS = 'Every184Days'",
                "InterestPaymentFrequencyEnum.EVERY4_MONTHS = 'Every4Months'",
                "InterestPaymentFrequencyEnum.R2 = 'R2'",
                "InterestPaymentFrequencyEnum.R4 = 'R4'",
                "InterestPaymentFrequencyEnum.ZERO = 'Zero'",
                "InterestPaymentFrequencyEnum.SCHEDULED = 'Scheduled'"
            ],
            "signature": "class InterestPaymentFrequencyEnum(Enum):\n    \"\"\"\"\"\"\n    ANNUAL = 'Annual'\n    SEMI_ANNUAL = 'SemiAnnual'\n    QUARTERLY = 'Quarterly'\n    MONTHLY = 'Monthly'\n    BI_MONTHLY = 'BiMonthly'\n    EVERYDAY = 'Everyday'\n    EVERY_WORKING_DAY = 'EveryWorkingDay'\n    EVERY7_DAYS = 'Every7Days'\n    EVERY14_DAYS = 'Every14Days'\n    EVERY28_DAYS = 'Every28Days'\n    EVERY30_DAYS = 'Every30Days'\n    EVERY91_DAYS = 'Every91Days'\n    EVERY182_DAYS = 'Every182Days'\n    EVERY364_DAYS = 'Every364Days'\n    EVERY365_DAYS = 'Every365Days'\n    EVERY90_DAYS = 'Every90Days'\n    EVERY92_DAYS = 'Every92Days'\n    EVERY93_DAYS = 'Every93Days'\n    EVERY180_DAYS = 'Every180Days'\n    EVERY183_DAYS = 'Every183Days'\n    EVERY184_DAYS = 'Every184Days'\n    EVERY4_MONTHS = 'Every4Months'\n    R2 = 'R2'\n    R4 = 'R4'\n    ZERO = 'Zero'\n    SCHEDULED = 'Scheduled'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "MarketDataQps",
        "id": "lseg_analytics.instruments.term_deposit.MarketDataQps",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 45954,
        "content": "class MarketDataQps:\n    \"\"\"MarketDataQps.\n    \"\"\"\n",
        "metadata": {
            "doc": "MarketDataQps.\n",
            "annotations": "",
            "signature": "class MarketDataQps:\n    \"\"\"\"\"\"\n"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "PaymentBusinessDayConventionEnum",
        "id": "lseg_analytics.instruments.term_deposit.PaymentBusinessDayConventionEnum",
        "content": "class PaymentBusinessDayConventionEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of PaymentBusinessDayConventionEnum.\"\"\"\n\n    MODIFIED_FOLLOWING = \"ModifiedFollowing\"\n    NEXT_BUSINESS_DAY = \"NextBusinessDay\"\n    PREVIOUS_BUSINESS_DAY = \"PreviousBusinessDay\"\n    NO_MOVING = \"NoMoving\"\n    EVERY_THIRD_WEDNESDAY = \"EveryThirdWednesday\"\n    BBSW_MODIFIED_FOLLOWING = \"BbswModifiedFollowing\"\n",
        "metadata": {
            "doc": "Type of PaymentBusinessDayConventionEnum.\n",
            "members": [
                "PaymentBusinessDayConventionEnum.MODIFIED_FOLLOWING = 'ModifiedFollowing'",
                "PaymentBusinessDayConventionEnum.NEXT_BUSINESS_DAY = 'NextBusinessDay'",
                "PaymentBusinessDayConventionEnum.PREVIOUS_BUSINESS_DAY = 'PreviousBusinessDay'",
                "PaymentBusinessDayConventionEnum.NO_MOVING = 'NoMoving'",
                "PaymentBusinessDayConventionEnum.EVERY_THIRD_WEDNESDAY = 'EveryThirdWednesday'",
                "PaymentBusinessDayConventionEnum.BBSW_MODIFIED_FOLLOWING = 'BbswModifiedFollowing'"
            ],
            "signature": "class PaymentBusinessDayConventionEnum(Enum):\n    \"\"\"\"\"\"\n    MODIFIED_FOLLOWING = 'ModifiedFollowing'\n    NEXT_BUSINESS_DAY = 'NextBusinessDay'\n    PREVIOUS_BUSINESS_DAY = 'PreviousBusinessDay'\n    NO_MOVING = 'NoMoving'\n    EVERY_THIRD_WEDNESDAY = 'EveryThirdWednesday'\n    BBSW_MODIFIED_FOLLOWING = 'BbswModifiedFollowing'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "PaymentRollConventionEnum",
        "id": "lseg_analytics.instruments.term_deposit.PaymentRollConventionEnum",
        "content": "class PaymentRollConventionEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of PaymentRollConventionEnum.\"\"\"\n\n    LAST = \"Last\"\n    SAME = \"Same\"\n    SAME1 = \"Same1\"\n    LAST28 = \"Last28\"\n    SAME28 = \"Same28\"\n",
        "metadata": {
            "doc": "Type of PaymentRollConventionEnum.\n",
            "members": [
                "PaymentRollConventionEnum.LAST = 'Last'",
                "PaymentRollConventionEnum.SAME = 'Same'",
                "PaymentRollConventionEnum.SAME1 = 'Same1'",
                "PaymentRollConventionEnum.LAST28 = 'Last28'",
                "PaymentRollConventionEnum.SAME28 = 'Same28'"
            ],
            "signature": "class PaymentRollConventionEnum(Enum):\n    \"\"\"\"\"\"\n    LAST = 'Last'\n    SAME = 'Same'\n    SAME1 = 'Same1'\n    LAST28 = 'Last28'\n    SAME28 = 'Same28'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "PriceSideEnum",
        "id": "lseg_analytics.instruments.term_deposit.PriceSideEnum",
        "content": "class PriceSideEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of PriceSideEnum.\"\"\"\n\n    MID = \"Mid\"\n    BID = \"Bid\"\n    ASK = \"Ask\"\n    LAST = \"Last\"\n",
        "metadata": {
            "doc": "Type of PriceSideEnum.\n",
            "members": [
                "PriceSideEnum.MID = 'Mid'",
                "PriceSideEnum.BID = 'Bid'",
                "PriceSideEnum.ASK = 'Ask'",
                "PriceSideEnum.LAST = 'Last'"
            ],
            "signature": "class PriceSideEnum(Enum):\n    \"\"\"\"\"\"\n    MID = 'Mid'\n    BID = 'Bid'\n    ASK = 'Ask'\n    LAST = 'Last'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "TermDepositAnalyticsResponseData",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositAnalyticsResponseData",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "definitions",
                "type": "List[TermDepositDefinitionInstrument]"
            },
            {
                "name": "pricing_preferences",
                "type": "TermDepositPricingParameters"
            },
            {
                "name": "analytics",
                "type": "List[TermDepositAnalyticsResponseWithError]"
            },
            {
                "name": "market_data",
                "type": "MarketDataQps"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59248,
        "content": "class TermDepositAnalyticsResponseData:\n    \"\"\"TermDepositAnalyticsResponseData.\n\n    Attributes\n    ----------\n    definitions : list[~analyticsapi.models.TermDepositDefinitionInstrument]\n        An array of objects describing a curve or an instrument. Please provide\n        either a full definition (for a user-defined curve/instrument), or\n        reference to a curve/instrument definition saved in the platform, or\n        the code identifying the existing curve/instrument.  The default value\n        is None, needs to be assigned before using.\n    pricing_preferences : ~analyticsapi.models.TermDepositPricingParameters\n        The parameters that control the computation of the analytics.\n    analytics : list[~analyticsapi.models.TermDepositAnalyticsResponseWithError]\n        The result of the calculation request.  The default value is None,\n        needs to be assigned before using.\n    market_data : ~analyticsapi.models.MarketDataQps\n        The market data used to compute the analytics.\n    \n    \"\"\"\n    definitions: typing.Optional[typing.List[ForwardRef('_models.TermDepositDefinitionInstrument')]]\n    pricing_preferences: typing.Optional[ForwardRef('_models.TermDepositPricingParameters')]\n    analytics: typing.Optional[typing.List[ForwardRef('_models.TermDepositAnalyticsResponseWithError')]]\n    market_data: typing.Optional[ForwardRef('_models.MarketDataQps')]",
        "metadata": {
            "doc": "TermDepositAnalyticsResponseData.\n\n    Attributes\n    ----------\n    definitions : list[~analyticsapi.models.TermDepositDefinitionInstrument]\n        An array of objects describing a curve or an instrument. Please provide\n        either a full definition (for a user-defined curve/instrument), or\n        reference to a curve/instrument definition saved in the platform, or\n        the code identifying the existing curve/instrument.  The default value\n        is None, needs to be assigned before using.\n    pricing_preferences : ~analyticsapi.models.TermDepositPricingParameters\n        The parameters that control the computation of the analytics.\n    analytics : list[~analyticsapi.models.TermDepositAnalyticsResponseWithError]\n        The result of the calculation request.  The default value is None,\n        needs to be assigned before using.\n    market_data : ~analyticsapi.models.MarketDataQps\n        The market data used to compute the analytics.\n    \n",
            "annotations": "    definitions: typing.Optional[typing.List[ForwardRef('_models.TermDepositDefinitionInstrument')]]\n    pricing_preferences: typing.Optional[ForwardRef('_models.TermDepositPricingParameters')]\n    analytics: typing.Optional[typing.List[ForwardRef('_models.TermDepositAnalyticsResponseWithError')]]\n    market_data: typing.Optional[ForwardRef('_models.MarketDataQps')]",
            "signature": "class TermDepositAnalyticsResponseData:\n    \"\"\"\"\"\"\n    definitions: typing.Optional[typing.List[ForwardRef('_models.TermDepositDefinitionInstrument')]]\n    pricing_preferences: typing.Optional[ForwardRef('_models.TermDepositPricingParameters')]\n    analytics: typing.Optional[typing.List[ForwardRef('_models.TermDepositAnalyticsResponseWithError')]]\n    market_data: typing.Optional[ForwardRef('_models.MarketDataQps')]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.term_deposit.TermDepositAnalyticsResponseData.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.term_deposit.TermDepositDefinitionInstrument",
                "lseg_analytics.instruments.term_deposit.TermDepositPricingParameters",
                "lseg_analytics.instruments.term_deposit.TermDepositAnalyticsResponseWithError",
                "lseg_analytics.instruments.term_deposit.MarketDataQps"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "TermDepositAnalyticsResponseData.__init__",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositAnalyticsResponseData.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59299,
        "content": "class TermDepositAnalyticsResponseData:\n    @overload\n    def __init__(self, *, definitions: Optional[List[ForwardRef('_models.TermDepositDefinitionInstrument')]] = None, pricing_preferences: Optional[ForwardRef('_models.TermDepositPricingParameters')] = None, analytics: Optional[List[ForwardRef('_models.TermDepositAnalyticsResponseWithError')]] = None, market_data: Optional[ForwardRef('_models.MarketDataQps')] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "TermDepositAnalyticsResponseData"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.term_deposit.TermDepositAnalyticsResponseData"
            ],
            "use": [
                "lseg_analytics.instruments.term_deposit.TermDepositDefinitionInstrument",
                "lseg_analytics.instruments.term_deposit.TermDepositPricingParameters",
                "lseg_analytics.instruments.term_deposit.TermDepositAnalyticsResponseWithError",
                "lseg_analytics.instruments.term_deposit.MarketDataQps"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "TermDepositAnalyticsResponseWithError",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositAnalyticsResponseWithError",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "tabular_data",
                "type": "FinancialContractResponse"
            },
            {
                "name": "cashflows",
                "type": "TermDepositCashflows"
            },
            {
                "name": "description",
                "type": "TermDepositDescription"
            },
            {
                "name": "nominal_measures",
                "type": "TermDepositNominalMeasures"
            },
            {
                "name": "pricing_analysis",
                "type": "TermDepositPricingAnalysis"
            },
            {
                "name": "valuation",
                "type": "TermDepositValuation"
            },
            {
                "name": "error",
                "type": "ServiceError"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59303,
        "content": "class TermDepositAnalyticsResponseWithError:\n    \"\"\"A model template describing a response with an error for a given object.\n\n    Attributes\n    ----------\n    tabular_data : ~analyticsapi.models.FinancialContractResponse\n        Standard Financial Contract Analytics in tabular format.\n    cashflows : ~analyticsapi.models.TermDepositCashflows\n        Response categorized under Cashflows.\n    description : ~analyticsapi.models.TermDepositDescription\n        Response categorized under Description.\n    nominal_measures : ~analyticsapi.models.TermDepositNominalMeasures\n        Response categorized under Nominal measures.\n    pricing_analysis : ~analyticsapi.models.TermDepositPricingAnalysis\n        Response categorized under Pricing analysis.\n    valuation : ~analyticsapi.models.TermDepositValuation\n        Response categorized under Valuation.\n    error : ~analyticsapi.models.ServiceError\n        The error message for the calculation in case of a non-blocking error.\n    \n    \"\"\"\n    tabular_data: typing.Optional[ForwardRef('_models.FinancialContractResponse')]\n    cashflows: typing.Optional[ForwardRef('_models.TermDepositCashflows')]\n    description: typing.Optional[ForwardRef('_models.TermDepositDescription')]\n    nominal_measures: typing.Optional[ForwardRef('_models.TermDepositNominalMeasures')]\n    pricing_analysis: typing.Optional[ForwardRef('_models.TermDepositPricingAnalysis')]\n    valuation: typing.Optional[ForwardRef('_models.TermDepositValuation')]\n    error: typing.Optional[ForwardRef('_models.ServiceError')]",
        "metadata": {
            "doc": "A model template describing a response with an error for a given object.\n\n    Attributes\n    ----------\n    tabular_data : ~analyticsapi.models.FinancialContractResponse\n        Standard Financial Contract Analytics in tabular format.\n    cashflows : ~analyticsapi.models.TermDepositCashflows\n        Response categorized under Cashflows.\n    description : ~analyticsapi.models.TermDepositDescription\n        Response categorized under Description.\n    nominal_measures : ~analyticsapi.models.TermDepositNominalMeasures\n        Response categorized under Nominal measures.\n    pricing_analysis : ~analyticsapi.models.TermDepositPricingAnalysis\n        Response categorized under Pricing analysis.\n    valuation : ~analyticsapi.models.TermDepositValuation\n        Response categorized under Valuation.\n    error : ~analyticsapi.models.ServiceError\n        The error message for the calculation in case of a non-blocking error.\n    \n",
            "annotations": "    tabular_data: typing.Optional[ForwardRef('_models.FinancialContractResponse')]\n    cashflows: typing.Optional[ForwardRef('_models.TermDepositCashflows')]\n    description: typing.Optional[ForwardRef('_models.TermDepositDescription')]\n    nominal_measures: typing.Optional[ForwardRef('_models.TermDepositNominalMeasures')]\n    pricing_analysis: typing.Optional[ForwardRef('_models.TermDepositPricingAnalysis')]\n    valuation: typing.Optional[ForwardRef('_models.TermDepositValuation')]\n    error: typing.Optional[ForwardRef('_models.ServiceError')]",
            "signature": "class TermDepositAnalyticsResponseWithError:\n    \"\"\"\"\"\"\n    tabular_data: typing.Optional[ForwardRef('_models.FinancialContractResponse')]\n    cashflows: typing.Optional[ForwardRef('_models.TermDepositCashflows')]\n    description: typing.Optional[ForwardRef('_models.TermDepositDescription')]\n    nominal_measures: typing.Optional[ForwardRef('_models.TermDepositNominalMeasures')]\n    pricing_analysis: typing.Optional[ForwardRef('_models.TermDepositPricingAnalysis')]\n    valuation: typing.Optional[ForwardRef('_models.TermDepositValuation')]\n    error: typing.Optional[ForwardRef('_models.ServiceError')]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.term_deposit.TermDepositAnalyticsResponseWithError.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.term_deposit.FinancialContractResponse",
                "lseg_analytics.instruments.term_deposit.TermDepositCashflows",
                "lseg_analytics.instruments.term_deposit.TermDepositDescription",
                "lseg_analytics.instruments.term_deposit.TermDepositNominalMeasures",
                "lseg_analytics.instruments.term_deposit.TermDepositPricingAnalysis",
                "lseg_analytics.instruments.term_deposit.TermDepositValuation",
                "lseg_analytics.common.ServiceError"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "TermDepositAnalyticsResponseWithError.__init__",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositAnalyticsResponseWithError.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59361,
        "content": "class TermDepositAnalyticsResponseWithError:\n    @overload\n    def __init__(self, *, tabular_data: Optional[ForwardRef('_models.FinancialContractResponse')] = None, cashflows: Optional[ForwardRef('_models.TermDepositCashflows')] = None, description: Optional[ForwardRef('_models.TermDepositDescription')] = None, nominal_measures: Optional[ForwardRef('_models.TermDepositNominalMeasures')] = None, pricing_analysis: Optional[ForwardRef('_models.TermDepositPricingAnalysis')] = None, valuation: Optional[ForwardRef('_models.TermDepositValuation')] = None, error: Optional[ForwardRef('_models.ServiceError')] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "TermDepositAnalyticsResponseWithError"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.term_deposit.TermDepositAnalyticsResponseWithError"
            ],
            "use": [
                "lseg_analytics.instruments.term_deposit.FinancialContractResponse",
                "lseg_analytics.instruments.term_deposit.TermDepositCashflows",
                "lseg_analytics.instruments.term_deposit.TermDepositDescription",
                "lseg_analytics.instruments.term_deposit.TermDepositNominalMeasures",
                "lseg_analytics.instruments.term_deposit.TermDepositPricingAnalysis",
                "lseg_analytics.instruments.term_deposit.TermDepositValuation",
                "lseg_analytics.common.ServiceError"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "TermDepositCalculationResponse",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositCalculationResponse",
        "params": [
            {
                "name": "data",
                "type": "TermDepositAnalyticsResponseData"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59365,
        "content": "class TermDepositCalculationResponse:\n    \"\"\"A model template describing the analytics response returned for an instrument provided as part\n    of the request.\n\n    Attributes\n    ----------\n    data : ~analyticsapi.models.TermDepositAnalyticsResponseData\n        An object that contains calculated analytics, requested, and other data\n        used for calculation. Required.\n    \n    \"\"\"\n    data: _models.TermDepositAnalyticsResponseData",
        "metadata": {
            "doc": "A model template describing the analytics response returned for an instrument provided as part\n    of the request.\n\n    Attributes\n    ----------\n    data : ~analyticsapi.models.TermDepositAnalyticsResponseData\n        An object that contains calculated analytics, requested, and other data\n        used for calculation. Required.\n    \n",
            "annotations": "    data: _models.TermDepositAnalyticsResponseData",
            "signature": "class TermDepositCalculationResponse:\n    \"\"\"\"\"\"\n    data: _models.TermDepositAnalyticsResponseData"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.term_deposit.TermDepositCalculationResponse.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.term_deposit.TermDepositAnalyticsResponseData"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "TermDepositCalculationResponse.__init__",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositCalculationResponse.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59395,
        "content": "class TermDepositCalculationResponse:\n    @overload\n    def __init__(self, data: '_models.TermDepositAnalyticsResponseData') -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "TermDepositCalculationResponse"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.term_deposit.TermDepositCalculationResponse"
            ],
            "use": [
                "lseg_analytics.instruments.term_deposit.TermDepositAnalyticsResponseData"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "TermDepositCashflows",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositCashflows",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "interest_amount_in_deal_ccy",
                "type": "float"
            },
            {
                "name": "interest_amount_in_report_ccy",
                "type": "float"
            },
            {
                "name": "repayment_amount_in_deal_ccy",
                "type": "float"
            },
            {
                "name": "repayment_amount_in_report_ccy",
                "type": "float"
            },
            {
                "name": "cash_flows",
                "type": "List[Any]"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59402,
        "content": "class TermDepositCashflows:\n    \"\"\"Cashflows Object.\n\n    Attributes\n    ----------\n    interest_amount_in_deal_ccy : float\n        The amount of interest payments. The value is expressed in the deal\n        currency. For more details on the field calculation, please refer here.\n    interest_amount_in_report_ccy : float\n        The amount of interest payments. The value is expressed in the\n        reporting currency.\n    repayment_amount_in_deal_ccy : float\n        The total amount settled at maturity. The value is expressed in the\n        deal currency. For more details on the field calculation, please refer\n        here.\n    repayment_amount_in_report_ccy : float\n        The total amount settled at maturity. The value is expressed in the\n        reporting currency.\n    cash_flows : list[any]\n        The information on the contract's cash flows during its lifetime. It\n        consists of the following properties:\n\n        * instrumentType: the instrument type for which cash flows are computed,\n        * payments: the array of properties which define all instruments cash flows (paid and received)\n        during its lifetime.\n\n        For more details, please refer here.\n        For more details on the field calculation, please refer here.  The default value is None, needs\n        to be assigned before using.\n    \n    \"\"\"\n    interest_amount_in_deal_ccy: typing.Optional[float]\n    interest_amount_in_report_ccy: typing.Optional[float]\n    repayment_amount_in_deal_ccy: typing.Optional[float]\n    repayment_amount_in_report_ccy: typing.Optional[float]\n    cash_flows: typing.Optional[typing.List[typing.Any]]",
        "metadata": {
            "doc": "Cashflows Object.\n\n    Attributes\n    ----------\n    interest_amount_in_deal_ccy : float\n        The amount of interest payments. The value is expressed in the deal\n        currency. For more details on the field calculation, please refer here.\n    interest_amount_in_report_ccy : float\n        The amount of interest payments. The value is expressed in the\n        reporting currency.\n    repayment_amount_in_deal_ccy : float\n        The total amount settled at maturity. The value is expressed in the\n        deal currency. For more details on the field calculation, please refer\n        here.\n    repayment_amount_in_report_ccy : float\n        The total amount settled at maturity. The value is expressed in the\n        reporting currency.\n    cash_flows : list[any]\n        The information on the contract's cash flows during its lifetime. It\n        consists of the following properties:\n\n        * instrumentType: the instrument type for which cash flows are computed,\n        * payments: the array of properties which define all instruments cash flows (paid and received)\n        during its lifetime.\n\n        For more details, please refer here.\n        For more details on the field calculation, please refer here.  The default value is None, needs\n        to be assigned before using.\n    \n",
            "annotations": "    interest_amount_in_deal_ccy: typing.Optional[float]\n    interest_amount_in_report_ccy: typing.Optional[float]\n    repayment_amount_in_deal_ccy: typing.Optional[float]\n    repayment_amount_in_report_ccy: typing.Optional[float]\n    cash_flows: typing.Optional[typing.List[typing.Any]]",
            "signature": "class TermDepositCashflows:\n    \"\"\"\"\"\"\n    interest_amount_in_deal_ccy: typing.Optional[float]\n    interest_amount_in_report_ccy: typing.Optional[float]\n    repayment_amount_in_deal_ccy: typing.Optional[float]\n    repayment_amount_in_report_ccy: typing.Optional[float]\n    cash_flows: typing.Optional[typing.List[typing.Any]]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.term_deposit.TermDepositCashflows.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "TermDepositCashflows.__init__",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositCashflows.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59475,
        "content": "class TermDepositCashflows:\n    @overload\n    def __init__(self, *, interest_amount_in_deal_ccy: Optional[float] = None, interest_amount_in_report_ccy: Optional[float] = None, repayment_amount_in_deal_ccy: Optional[float] = None, repayment_amount_in_report_ccy: Optional[float] = None, cash_flows: Optional[List[Any]] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "TermDepositCashflows"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.term_deposit.TermDepositCashflows"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "TermDepositDefinition",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositDefinition",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "calendar",
                "type": "str"
            },
            {
                "name": "end_date",
                "type": "datetime"
            },
            {
                "name": "fixed_rate_percent",
                "type": "float"
            },
            {
                "name": "instrument_code",
                "type": "str"
            },
            {
                "name": "instrument_tag",
                "type": "str"
            },
            {
                "name": "interest_calculation_method",
                "type": "InterestCalculationMethodEnum",
                "valuelookup": "enum.InterestCalculationMethodEnum"
            },
            {
                "name": "interest_payment_frequency",
                "type": "InterestPaymentFrequencyEnum",
                "valuelookup": "enum.InterestPaymentFrequencyEnum"
            },
            {
                "name": "notional_amount",
                "type": "float"
            },
            {
                "name": "notional_ccy",
                "type": "str"
            },
            {
                "name": "payment_business_day_convention",
                "type": "PaymentBusinessDayConventionEnum",
                "valuelookup": "enum.PaymentBusinessDayConventionEnum"
            },
            {
                "name": "payment_business_days",
                "type": "str"
            },
            {
                "name": "payment_roll_convention",
                "type": "PaymentRollConventionEnum",
                "valuelookup": "enum.PaymentRollConventionEnum"
            },
            {
                "name": "start_date",
                "type": "datetime"
            },
            {
                "name": "start_tenor",
                "type": "str"
            },
            {
                "name": "tenor",
                "type": "str",
                "valuelookup": "tenors"
            },
            {
                "name": "year_basis",
                "type": "FinancialContractYearBasisEnum",
                "valuelookup": "enum.FinancialContractYearBasisEnum"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59479,
        "content": "class TermDepositDefinition:\n    \"\"\"TermDepositDefinition.\n\n    Attributes\n    ----------\n    calendar : str\n        Deprecated, please use 'paymentBusinessDays'.\n    end_date : ~datetime.datetime\n        The maturity or expiry date of the instrument. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). If no instrumentCode is defined, either tenor\n        or endDate must be provided. If instrumentCode is defined, the value\n        comes from the instrument reference data.\n    fixed_rate_percent : float\n        The interest rate of the instrument. The value is expressed in\n        percentages. Mandatory if no instrumentCode is defined. If\n        instrumentCode is defined, the value comes from the instrument\n        reference data.\n    instrument_code : str\n        The code used to define the instrument. The possible values for each\n        asset type are listed here. Mandatory if no user-defined instrument\n        data is provided.\n    instrument_tag : str\n        A user-defined string to identify the instrument. It can be used to\n        link output results to the instrument definition. Limited to 40\n        characters. Only alphabetic, numeric and '- _.#=@' characters are\n        supported.\n    interest_calculation_method : str or ~analyticsapi.models.InterestCalculationMethodEnum\n        The day count basis method used to calculate the interest payments.\n        Mandatory if no instrumentCode is defined. If instrumentCode is\n        defined, the value comes from the instrument reference data. Known\n        values are: \"Dcb_30_360\", \"Dcb_30_360_US\", \"Dcb_30_360_German\",\n        \"Dcb_30_360_ISDA\", \"Dcb_30_365_ISDA\", \"Dcb_30_365_German\",\n        \"Dcb_30_365_Brazil\", \"Dcb_30_Actual_German\", \"Dcb_30_Actual\",\n        \"Dcb_30_Actual_ISDA\", \"Dcb_30E_360_ISMA\", \"Dcb_Actual_360\",\n        \"Dcb_Actual_364\", \"Dcb_Actual_365\", \"Dcb_Actual_Actual\",\n        \"Dcb_Actual_Actual_ISDA\", \"Dcb_Actual_Actual_AFB\",\n        \"Dcb_WorkingDays_252\", \"Dcb_Actual_365L\", \"Dcb_Actual_365P\",\n        \"Dcb_ActualLeapDay_365\", \"Dcb_ActualLeapDay_360\", \"Dcb_Actual_36525\",\n        \"Dcb_Actual_365_CanadianConvention\", and \"Dcb_Constant\".\n    interest_payment_frequency : str or ~analyticsapi.models.InterestPaymentFrequencyEnum\n        The frequency of the interest payment. The default value is zero. Known\n        values are: \"Annual\", \"SemiAnnual\", \"Quarterly\", \"Monthly\",\n        \"BiMonthly\", \"Everyday\", \"EveryWorkingDay\", \"Every7Days\",\n        \"Every14Days\", \"Every28Days\", \"Every30Days\", \"Every91Days\",\n        \"Every182Days\", \"Every364Days\", \"Every365Days\", \"Every90Days\",\n        \"Every92Days\", \"Every93Days\", \"Every180Days\", \"Every183Days\",\n        \"Every184Days\", \"Every4Months\", \"R2\", \"R4\", \"Zero\", and \"Scheduled\".\n    notional_amount : float\n        The notional amount of the instrument. The default value is\n        '1,000,000'.\n    notional_ccy : str\n        The currency of the instrument's notional amount. The value is\n        expressed in ISO 4217 alphabetical format (e.g. 'USD'). Mandatory if no\n        instrumentCode is defined. If instrumentCode is defined, the value\n        comes from the instrument reference data.\n    payment_business_day_convention : str or ~analyticsapi.models.PaymentBusinessDayConventionEnum\n        The method to adjust dates to a working day. Optional. By Default\n        'ModifiedFollowing'. Known values are: \"ModifiedFollowing\",\n        \"NextBusinessDay\", \"PreviousBusinessDay\", \"NoMoving\",\n        \"EveryThirdWednesday\", and \"BbswModifiedFollowing\".\n    payment_business_days : str\n        A comma-separated calendar code used to adjust dates(e.g., 'EMU' or\n        'USA'). The default value is the calendar associated to the market\n        conventions of NotionalCcy.\n    payment_roll_convention : str or ~analyticsapi.models.PaymentRollConventionEnum\n        Method to adjust payment dates when they fall at the end of the month\n        (28th of February, 30th, 31st). Optional. By Default 'Last'. Known\n        values are: \"Last\", \"Same\", \"Same1\", \"Last28\", and \"Same28\".\n    start_date : ~datetime.datetime\n        The start date of the instrument. The value is expressed in ISO 8601\n        format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g. 2021-01-01T00:00:00Z). The\n        default value is valuationDate shifted forward by a spot lag using\n        money market conventions.\n    start_tenor : str\n        The code indicating the period from a spot date to startDate of the\n        instrument (e.g., '1M'). Either startDate or startTenor can be\n        specified, but not both.\n    tenor : str\n        The code indicating the period between StartDate and EndDate of the\n        instrument (e.g. '6M', '1Y'). If no instrumentCode is defined, either\n        tenor or endDate must be provided. If instrumentCode is defined, the\n        value comes from the instrument reference data.\n    year_basis : str or ~analyticsapi.models.FinancialContractYearBasisEnum\n        Deprecated, please use 'interestCalculationMethod'. Known values are:\n        \"Dcb_30_360\", \"Dcb_30_360_US\", \"Dcb_30_360_German\", \"Dcb_30_360_ISDA\",\n        \"Dcb_30_365_ISDA\", \"Dcb_30_365_German\", \"Dcb_30_365_Brazil\",\n        \"Dcb_30_Actual_German\", \"Dcb_30_Actual\", \"Dcb_30_Actual_ISDA\",\n        \"Dcb_30E_360_ISMA\", \"Dcb_Actual_360\", \"Dcb_Actual_364\",\n        \"Dcb_Actual_365\", \"Dcb_Actual_Actual\", \"Dcb_Actual_Actual_ISDA\",\n        \"Dcb_Actual_Actual_AFB\", \"Dcb_WorkingDays_252\", \"Dcb_Actual_365L\",\n        \"Dcb_Actual_365P\", \"Dcb_ActualLeapDay_365\", \"Dcb_ActualLeapDay_360\",\n        \"Dcb_Actual_36525\", \"Dcb_Actual_365_CanadianConvention\", and\n        \"Dcb_Constant\".\n    \n    \"\"\"\n    calendar: typing.Optional[str]\n    end_date: typing.Optional[datetime.datetime]\n    fixed_rate_percent: typing.Optional[float]\n    instrument_code: typing.Optional[str]\n    instrument_tag: typing.Optional[str]\n    interest_calculation_method: typing.Union[str, ForwardRef('_models.InterestCalculationMethodEnum'), NoneType]\n    interest_payment_frequency: typing.Union[str, ForwardRef('_models.InterestPaymentFrequencyEnum'), NoneType]\n    notional_amount: typing.Optional[float]\n    notional_ccy: typing.Optional[str]\n    payment_business_day_convention: typing.Union[str, ForwardRef('_models.PaymentBusinessDayConventionEnum'), NoneType]\n    payment_business_days: typing.Optional[str]\n    payment_roll_convention: typing.Union[str, ForwardRef('_models.PaymentRollConventionEnum'), NoneType]\n    start_date: typing.Optional[datetime.datetime]\n    start_tenor: typing.Optional[str]\n    tenor: typing.Optional[str]\n    year_basis: typing.Union[str, ForwardRef('_models.FinancialContractYearBasisEnum'), NoneType]",
        "metadata": {
            "doc": "TermDepositDefinition.\n\n    Attributes\n    ----------\n    calendar : str\n        Deprecated, please use 'paymentBusinessDays'.\n    end_date : ~datetime.datetime\n        The maturity or expiry date of the instrument. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). If no instrumentCode is defined, either tenor\n        or endDate must be provided. If instrumentCode is defined, the value\n        comes from the instrument reference data.\n    fixed_rate_percent : float\n        The interest rate of the instrument. The value is expressed in\n        percentages. Mandatory if no instrumentCode is defined. If\n        instrumentCode is defined, the value comes from the instrument\n        reference data.\n    instrument_code : str\n        The code used to define the instrument. The possible values for each\n        asset type are listed here. Mandatory if no user-defined instrument\n        data is provided.\n    instrument_tag : str\n        A user-defined string to identify the instrument. It can be used to\n        link output results to the instrument definition. Limited to 40\n        characters. Only alphabetic, numeric and '- _.#=@' characters are\n        supported.\n    interest_calculation_method : str or ~analyticsapi.models.InterestCalculationMethodEnum\n        The day count basis method used to calculate the interest payments.\n        Mandatory if no instrumentCode is defined. If instrumentCode is\n        defined, the value comes from the instrument reference data. Known\n        values are: \"Dcb_30_360\", \"Dcb_30_360_US\", \"Dcb_30_360_German\",\n        \"Dcb_30_360_ISDA\", \"Dcb_30_365_ISDA\", \"Dcb_30_365_German\",\n        \"Dcb_30_365_Brazil\", \"Dcb_30_Actual_German\", \"Dcb_30_Actual\",\n        \"Dcb_30_Actual_ISDA\", \"Dcb_30E_360_ISMA\", \"Dcb_Actual_360\",\n        \"Dcb_Actual_364\", \"Dcb_Actual_365\", \"Dcb_Actual_Actual\",\n        \"Dcb_Actual_Actual_ISDA\", \"Dcb_Actual_Actual_AFB\",\n        \"Dcb_WorkingDays_252\", \"Dcb_Actual_365L\", \"Dcb_Actual_365P\",\n        \"Dcb_ActualLeapDay_365\", \"Dcb_ActualLeapDay_360\", \"Dcb_Actual_36525\",\n        \"Dcb_Actual_365_CanadianConvention\", and \"Dcb_Constant\".\n    interest_payment_frequency : str or ~analyticsapi.models.InterestPaymentFrequencyEnum\n        The frequency of the interest payment. The default value is zero. Known\n        values are: \"Annual\", \"SemiAnnual\", \"Quarterly\", \"Monthly\",\n        \"BiMonthly\", \"Everyday\", \"EveryWorkingDay\", \"Every7Days\",\n        \"Every14Days\", \"Every28Days\", \"Every30Days\", \"Every91Days\",\n        \"Every182Days\", \"Every364Days\", \"Every365Days\", \"Every90Days\",\n        \"Every92Days\", \"Every93Days\", \"Every180Days\", \"Every183Days\",\n        \"Every184Days\", \"Every4Months\", \"R2\", \"R4\", \"Zero\", and \"Scheduled\".\n    notional_amount : float\n        The notional amount of the instrument. The default value is\n        '1,000,000'.\n    notional_ccy : str\n        The currency of the instrument's notional amount. The value is\n        expressed in ISO 4217 alphabetical format (e.g. 'USD'). Mandatory if no\n        instrumentCode is defined. If instrumentCode is defined, the value\n        comes from the instrument reference data.\n    payment_business_day_convention : str or ~analyticsapi.models.PaymentBusinessDayConventionEnum\n        The method to adjust dates to a working day. Optional. By Default\n        'ModifiedFollowing'. Known values are: \"ModifiedFollowing\",\n        \"NextBusinessDay\", \"PreviousBusinessDay\", \"NoMoving\",\n        \"EveryThirdWednesday\", and \"BbswModifiedFollowing\".\n    payment_business_days : str\n        A comma-separated calendar code used to adjust dates(e.g., 'EMU' or\n        'USA'). The default value is the calendar associated to the market\n        conventions of NotionalCcy.\n    payment_roll_convention : str or ~analyticsapi.models.PaymentRollConventionEnum\n        Method to adjust payment dates when they fall at the end of the month\n        (28th of February, 30th, 31st). Optional. By Default 'Last'. Known\n        values are: \"Last\", \"Same\", \"Same1\", \"Last28\", and \"Same28\".\n    start_date : ~datetime.datetime\n        The start date of the instrument. The value is expressed in ISO 8601\n        format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g. 2021-01-01T00:00:00Z). The\n        default value is valuationDate shifted forward by a spot lag using\n        money market conventions.\n    start_tenor : str\n        The code indicating the period from a spot date to startDate of the\n        instrument (e.g., '1M'). Either startDate or startTenor can be\n        specified, but not both.\n    tenor : str\n        The code indicating the period between StartDate and EndDate of the\n        instrument (e.g. '6M', '1Y'). If no instrumentCode is defined, either\n        tenor or endDate must be provided. If instrumentCode is defined, the\n        value comes from the instrument reference data.\n    year_basis : str or ~analyticsapi.models.FinancialContractYearBasisEnum\n        Deprecated, please use 'interestCalculationMethod'. Known values are:\n        \"Dcb_30_360\", \"Dcb_30_360_US\", \"Dcb_30_360_German\", \"Dcb_30_360_ISDA\",\n        \"Dcb_30_365_ISDA\", \"Dcb_30_365_German\", \"Dcb_30_365_Brazil\",\n        \"Dcb_30_Actual_German\", \"Dcb_30_Actual\", \"Dcb_30_Actual_ISDA\",\n        \"Dcb_30E_360_ISMA\", \"Dcb_Actual_360\", \"Dcb_Actual_364\",\n        \"Dcb_Actual_365\", \"Dcb_Actual_Actual\", \"Dcb_Actual_Actual_ISDA\",\n        \"Dcb_Actual_Actual_AFB\", \"Dcb_WorkingDays_252\", \"Dcb_Actual_365L\",\n        \"Dcb_Actual_365P\", \"Dcb_ActualLeapDay_365\", \"Dcb_ActualLeapDay_360\",\n        \"Dcb_Actual_36525\", \"Dcb_Actual_365_CanadianConvention\", and\n        \"Dcb_Constant\".\n    \n",
            "annotations": "    calendar: typing.Optional[str]\n    end_date: typing.Optional[datetime.datetime]\n    fixed_rate_percent: typing.Optional[float]\n    instrument_code: typing.Optional[str]\n    instrument_tag: typing.Optional[str]\n    interest_calculation_method: typing.Union[str, ForwardRef('_models.InterestCalculationMethodEnum'), NoneType]\n    interest_payment_frequency: typing.Union[str, ForwardRef('_models.InterestPaymentFrequencyEnum'), NoneType]\n    notional_amount: typing.Optional[float]\n    notional_ccy: typing.Optional[str]\n    payment_business_day_convention: typing.Union[str, ForwardRef('_models.PaymentBusinessDayConventionEnum'), NoneType]\n    payment_business_days: typing.Optional[str]\n    payment_roll_convention: typing.Union[str, ForwardRef('_models.PaymentRollConventionEnum'), NoneType]\n    start_date: typing.Optional[datetime.datetime]\n    start_tenor: typing.Optional[str]\n    tenor: typing.Optional[str]\n    year_basis: typing.Union[str, ForwardRef('_models.FinancialContractYearBasisEnum'), NoneType]",
            "signature": "class TermDepositDefinition:\n    \"\"\"\"\"\"\n    calendar: typing.Optional[str]\n    end_date: typing.Optional[datetime.datetime]\n    fixed_rate_percent: typing.Optional[float]\n    instrument_code: typing.Optional[str]\n    instrument_tag: typing.Optional[str]\n    interest_calculation_method: typing.Union[str, ForwardRef('_models.InterestCalculationMethodEnum'), NoneType]\n    interest_payment_frequency: typing.Union[str, ForwardRef('_models.InterestPaymentFrequencyEnum'), NoneType]\n    notional_amount: typing.Optional[float]\n    notional_ccy: typing.Optional[str]\n    payment_business_day_convention: typing.Union[str, ForwardRef('_models.PaymentBusinessDayConventionEnum'), NoneType]\n    payment_business_days: typing.Optional[str]\n    payment_roll_convention: typing.Union[str, ForwardRef('_models.PaymentRollConventionEnum'), NoneType]\n    start_date: typing.Optional[datetime.datetime]\n    start_tenor: typing.Optional[str]\n    tenor: typing.Optional[str]\n    year_basis: typing.Union[str, ForwardRef('_models.FinancialContractYearBasisEnum'), NoneType]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.term_deposit.TermDepositDefinition.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.term_deposit.InterestCalculationMethodEnum",
                "lseg_analytics.instruments.term_deposit.InterestPaymentFrequencyEnum",
                "lseg_analytics.instruments.term_deposit.PaymentBusinessDayConventionEnum",
                "lseg_analytics.instruments.term_deposit.PaymentRollConventionEnum",
                "lseg_analytics.instruments.term_deposit.FinancialContractYearBasisEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "TermDepositDefinition.__init__",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositDefinition.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59699,
        "content": "class TermDepositDefinition:\n    @overload\n    def __init__(self, *, calendar: Optional[str] = None, end_date: Optional[datetime.datetime] = None, fixed_rate_percent: Optional[float] = None, instrument_code: Optional[str] = None, instrument_tag: Optional[str] = None, interest_calculation_method: Union[str, ForwardRef('_models.InterestCalculationMethodEnum'), NoneType] = None, interest_payment_frequency: Union[str, ForwardRef('_models.InterestPaymentFrequencyEnum'), NoneType] = None, notional_amount: Optional[float] = None, notional_ccy: Optional[str] = None, payment_business_day_convention: Union[str, ForwardRef('_models.PaymentBusinessDayConventionEnum'), NoneType] = None, payment_business_days: Optional[str] = None, payment_roll_convention: Union[str, ForwardRef('_models.PaymentRollConventionEnum'), NoneType] = None, start_date: Optional[datetime.datetime] = None, start_tenor: Optional[str] = None, tenor: Optional[str] = None, year_basis: Union[str, ForwardRef('_models.FinancialContractYearBasisEnum'), NoneType] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "TermDepositDefinition"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.term_deposit.TermDepositDefinition"
            ],
            "use": [
                "lseg_analytics.instruments.term_deposit.InterestCalculationMethodEnum",
                "lseg_analytics.instruments.term_deposit.InterestPaymentFrequencyEnum",
                "lseg_analytics.instruments.term_deposit.PaymentBusinessDayConventionEnum",
                "lseg_analytics.instruments.term_deposit.PaymentRollConventionEnum",
                "lseg_analytics.instruments.term_deposit.FinancialContractYearBasisEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "TermDepositDefinitionInstrument",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositDefinitionInstrument",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "definition",
                "type": "TermDepositDefinition"
            },
            {
                "name": "reference",
                "type": "str"
            },
            {
                "name": "code",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59703,
        "content": "class TermDepositDefinitionInstrument:\n    \"\"\"An array of objects describing a curve or an instrument.\n    Please provide either a full definition (for a user-defined curve/instrument), or reference to\n    a curve/instrument definition saved in the platform, or the code identifying the existing\n    curve/instrument.\n\n    Attributes\n    ----------\n    definition : ~analyticsapi.models.TermDepositDefinition\n        The object that describes the definition of the instrument.\n    reference : str\n        The identifier of a resource (instrument definition, curve definition)\n        that is already in the platform.\n    code : str\n        The unique public code used to identify an instrument that exists on\n        the market (ISIN, RIC, etc.).\n    \n    \"\"\"\n    definition: typing.Optional[ForwardRef('_models.TermDepositDefinition')]\n    reference: typing.Optional[str]\n    code: typing.Optional[str]",
        "metadata": {
            "doc": "An array of objects describing a curve or an instrument.\n    Please provide either a full definition (for a user-defined curve/instrument), or reference to\n    a curve/instrument definition saved in the platform, or the code identifying the existing\n    curve/instrument.\n\n    Attributes\n    ----------\n    definition : ~analyticsapi.models.TermDepositDefinition\n        The object that describes the definition of the instrument.\n    reference : str\n        The identifier of a resource (instrument definition, curve definition)\n        that is already in the platform.\n    code : str\n        The unique public code used to identify an instrument that exists on\n        the market (ISIN, RIC, etc.).\n    \n",
            "annotations": "    definition: typing.Optional[ForwardRef('_models.TermDepositDefinition')]\n    reference: typing.Optional[str]\n    code: typing.Optional[str]",
            "signature": "class TermDepositDefinitionInstrument:\n    \"\"\"\"\"\"\n    definition: typing.Optional[ForwardRef('_models.TermDepositDefinition')]\n    reference: typing.Optional[str]\n    code: typing.Optional[str]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.term_deposit.TermDepositDefinitionInstrument.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.term_deposit.TermDepositDefinition"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "TermDepositDefinitionInstrument.__init__",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositDefinitionInstrument.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59748,
        "content": "class TermDepositDefinitionInstrument:\n    @overload\n    def __init__(self, *, definition: Optional[ForwardRef('_models.TermDepositDefinition')] = None, reference: Optional[str] = None, code: Optional[str] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "TermDepositDefinitionInstrument"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.term_deposit.TermDepositDefinitionInstrument"
            ],
            "use": [
                "lseg_analytics.instruments.term_deposit.TermDepositDefinition"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "TermDepositDescription",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositDescription",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "instrument_type",
                "type": "str"
            },
            {
                "name": "instrument_code",
                "type": "str"
            },
            {
                "name": "instrument_tag",
                "type": "str"
            },
            {
                "name": "instrument_description",
                "type": "str"
            },
            {
                "name": "notional_ccy",
                "type": "str"
            },
            {
                "name": "notional_amount",
                "type": "float"
            },
            {
                "name": "report_ccy",
                "type": "str"
            },
            {
                "name": "start_date",
                "type": "datetime"
            },
            {
                "name": "end_date",
                "type": "datetime"
            },
            {
                "name": "tenor",
                "type": "str",
                "valuelookup": "tenors"
            },
            {
                "name": "interest_calculation_method",
                "type": "str"
            },
            {
                "name": "error_code",
                "type": "str"
            },
            {
                "name": "error_message",
                "type": "str"
            },
            {
                "name": "processing_information",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59752,
        "content": "class TermDepositDescription:\n    \"\"\"Description Object.\n\n    Attributes\n    ----------\n    instrument_type : str\n        The type of instrument defined in the request. The possible values are\n        listed  here  .\n    instrument_code : str\n        The code used to define the instrument. The possible values for each\n        asset type are listed  here  .\n    instrument_tag : str\n        A user-defined string to identify the instrument. It can be used to\n        link output results to the instrument definition. Limited to 40\n        characters. Only alphabetic, numeric and '- _.#=@' characters are\n        supported.\n    instrument_description : str\n        The label that describes the instrument.\n    notional_ccy : str\n        The currency of the instrument's notional amount. The value is\n        expressed in ISO 4217 alphabetical format (e.g.,  'USD  ').\n    notional_amount : float\n        The notional amount of the instrument.\n    report_ccy : str\n        The currency code set for the fields ending with '  xxxInReportCcy  '.\n        The value is expressed in ISO 4217 alphabetical format (e.g., '  USD\n        ').\n    start_date : ~datetime.datetime\n        The start date of the instrument. The value is expressed in ISO 8601\n        format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '  2021-01-01T00:00:00Z  ').\n    end_date : ~datetime.datetime\n        The maturity or expiry date of the instrument. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '\n        2021-01-01T00:00:00Z  ').\n    tenor : str\n        The code indicating the period between  StartDate  and  EndDate  of the\n        instrument (e.g. '  6M  ',  '  1Y  ').\n    interest_calculation_method : str\n        The day count basis method used to calculate the interest payments. The\n        possible values are listed  here  .\n    error_code : str\n        The code of  ErrorMessage  .\n    error_message : str\n        The error message in case of a blocking error in calculation.\n    processing_information : str\n        The error message for the calculation in case of a non-blocking error.\n    \n    \"\"\"\n    instrument_type: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    instrument_tag: typing.Optional[str]\n    instrument_description: typing.Optional[str]\n    notional_ccy: typing.Optional[str]\n    notional_amount: typing.Optional[float]\n    report_ccy: typing.Optional[str]\n    start_date: typing.Optional[datetime.datetime]\n    end_date: typing.Optional[datetime.datetime]\n    tenor: typing.Optional[str]\n    interest_calculation_method: typing.Optional[str]\n    error_code: typing.Optional[str]\n    error_message: typing.Optional[str]\n    processing_information: typing.Optional[str]",
        "metadata": {
            "doc": "Description Object.\n\n    Attributes\n    ----------\n    instrument_type : str\n        The type of instrument defined in the request. The possible values are\n        listed  here  .\n    instrument_code : str\n        The code used to define the instrument. The possible values for each\n        asset type are listed  here  .\n    instrument_tag : str\n        A user-defined string to identify the instrument. It can be used to\n        link output results to the instrument definition. Limited to 40\n        characters. Only alphabetic, numeric and '- _.#=@' characters are\n        supported.\n    instrument_description : str\n        The label that describes the instrument.\n    notional_ccy : str\n        The currency of the instrument's notional amount. The value is\n        expressed in ISO 4217 alphabetical format (e.g.,  'USD  ').\n    notional_amount : float\n        The notional amount of the instrument.\n    report_ccy : str\n        The currency code set for the fields ending with '  xxxInReportCcy  '.\n        The value is expressed in ISO 4217 alphabetical format (e.g., '  USD\n        ').\n    start_date : ~datetime.datetime\n        The start date of the instrument. The value is expressed in ISO 8601\n        format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '  2021-01-01T00:00:00Z  ').\n    end_date : ~datetime.datetime\n        The maturity or expiry date of the instrument. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '\n        2021-01-01T00:00:00Z  ').\n    tenor : str\n        The code indicating the period between  StartDate  and  EndDate  of the\n        instrument (e.g. '  6M  ',  '  1Y  ').\n    interest_calculation_method : str\n        The day count basis method used to calculate the interest payments. The\n        possible values are listed  here  .\n    error_code : str\n        The code of  ErrorMessage  .\n    error_message : str\n        The error message in case of a blocking error in calculation.\n    processing_information : str\n        The error message for the calculation in case of a non-blocking error.\n    \n",
            "annotations": "    instrument_type: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    instrument_tag: typing.Optional[str]\n    instrument_description: typing.Optional[str]\n    notional_ccy: typing.Optional[str]\n    notional_amount: typing.Optional[float]\n    report_ccy: typing.Optional[str]\n    start_date: typing.Optional[datetime.datetime]\n    end_date: typing.Optional[datetime.datetime]\n    tenor: typing.Optional[str]\n    interest_calculation_method: typing.Optional[str]\n    error_code: typing.Optional[str]\n    error_message: typing.Optional[str]\n    processing_information: typing.Optional[str]",
            "signature": "class TermDepositDescription:\n    \"\"\"\"\"\"\n    instrument_type: typing.Optional[str]\n    instrument_code: typing.Optional[str]\n    instrument_tag: typing.Optional[str]\n    instrument_description: typing.Optional[str]\n    notional_ccy: typing.Optional[str]\n    notional_amount: typing.Optional[float]\n    report_ccy: typing.Optional[str]\n    start_date: typing.Optional[datetime.datetime]\n    end_date: typing.Optional[datetime.datetime]\n    tenor: typing.Optional[str]\n    interest_calculation_method: typing.Optional[str]\n    error_code: typing.Optional[str]\n    error_message: typing.Optional[str]\n    processing_information: typing.Optional[str]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.term_deposit.TermDepositDescription.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "TermDepositDescription.__init__",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositDescription.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59867,
        "content": "class TermDepositDescription:\n    @overload\n    def __init__(self, *, instrument_type: Optional[str] = None, instrument_code: Optional[str] = None, instrument_tag: Optional[str] = None, instrument_description: Optional[str] = None, notional_ccy: Optional[str] = None, notional_amount: Optional[float] = None, report_ccy: Optional[str] = None, start_date: Optional[datetime.datetime] = None, end_date: Optional[datetime.datetime] = None, tenor: Optional[str] = None, interest_calculation_method: Optional[str] = None, error_code: Optional[str] = None, error_message: Optional[str] = None, processing_information: Optional[str] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "TermDepositDescription"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.term_deposit.TermDepositDescription"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "TermDepositNominalMeasures",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositNominalMeasures",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "average_life",
                "type": "float"
            },
            {
                "name": "duration",
                "type": "float"
            },
            {
                "name": "modified_duration",
                "type": "float"
            },
            {
                "name": "convexity",
                "type": "float"
            },
            {
                "name": "dv01_bp",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59871,
        "content": "class TermDepositNominalMeasures:\n    \"\"\"Nominal measures Object.\n\n    Attributes\n    ----------\n    average_life : float\n        The average remaining time to all principal instrument payments,\n        weighted by the repayment amounts. It doesn't take into account\n        interest payments. The value is expressed in years. For more details on\n        the field calculation, please refer here.\n    duration : float\n        The weighted average maturity of all cash flows. The final cash flow\n        includes the principal, which has a much greater weight than the\n        intermediate cash flows. For more details on the field calculation,\n        please refer here.\n    modified_duration : float\n        The measure of price sensitivity to a 100 basis points change in the\n        instrument's yield, or 1% parallel shift in the underlying zero-coupon\n        curve in case of interest rate swap instruments. For a floating rate\n        instrument, it is computed as time to next payment. For more details on\n        the field calculation, please refer here.\n    convexity : float\n        The measure of the curvature in the relationship between the\n        instrument's price and yield. For more details on the field\n        calculation, please refer here.\n    dv01_bp : float\n        The sensitivity of the market value to a 1bp parallel shift in the\n        yield curve. The value is expressed in basis points. For more details\n        on the field calculation, please refer here.\n    \n    \"\"\"\n    average_life: typing.Optional[float]\n    duration: typing.Optional[float]\n    modified_duration: typing.Optional[float]\n    convexity: typing.Optional[float]\n    dv01_bp: typing.Optional[float]",
        "metadata": {
            "doc": "Nominal measures Object.\n\n    Attributes\n    ----------\n    average_life : float\n        The average remaining time to all principal instrument payments,\n        weighted by the repayment amounts. It doesn't take into account\n        interest payments. The value is expressed in years. For more details on\n        the field calculation, please refer here.\n    duration : float\n        The weighted average maturity of all cash flows. The final cash flow\n        includes the principal, which has a much greater weight than the\n        intermediate cash flows. For more details on the field calculation,\n        please refer here.\n    modified_duration : float\n        The measure of price sensitivity to a 100 basis points change in the\n        instrument's yield, or 1% parallel shift in the underlying zero-coupon\n        curve in case of interest rate swap instruments. For a floating rate\n        instrument, it is computed as time to next payment. For more details on\n        the field calculation, please refer here.\n    convexity : float\n        The measure of the curvature in the relationship between the\n        instrument's price and yield. For more details on the field\n        calculation, please refer here.\n    dv01_bp : float\n        The sensitivity of the market value to a 1bp parallel shift in the\n        yield curve. The value is expressed in basis points. For more details\n        on the field calculation, please refer here.\n    \n",
            "annotations": "    average_life: typing.Optional[float]\n    duration: typing.Optional[float]\n    modified_duration: typing.Optional[float]\n    convexity: typing.Optional[float]\n    dv01_bp: typing.Optional[float]",
            "signature": "class TermDepositNominalMeasures:\n    \"\"\"\"\"\"\n    average_life: typing.Optional[float]\n    duration: typing.Optional[float]\n    modified_duration: typing.Optional[float]\n    convexity: typing.Optional[float]\n    dv01_bp: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.term_deposit.TermDepositNominalMeasures.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "TermDepositNominalMeasures.__init__",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositNominalMeasures.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59943,
        "content": "class TermDepositNominalMeasures:\n    @overload\n    def __init__(self, *, average_life: Optional[float] = None, duration: Optional[float] = None, modified_duration: Optional[float] = None, convexity: Optional[float] = None, dv01_bp: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "TermDepositNominalMeasures"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.term_deposit.TermDepositNominalMeasures"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "TermDepositPricingAnalysis",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositPricingAnalysis",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "fixed_rate_percent",
                "type": "float"
            },
            {
                "name": "valuation_date",
                "type": "datetime"
            },
            {
                "name": "market_data_date",
                "type": "datetime"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59947,
        "content": "class TermDepositPricingAnalysis:\n    \"\"\"Pricing analysis Object.\n\n    Attributes\n    ----------\n    fixed_rate_percent : float\n        The interest rate used to derive future fixed interest payments of the\n        instrument. The value is expressed in percentages.\n    valuation_date : ~datetime.datetime\n        The date at which the instrument is valued. The value is expressed in\n        ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '\n        2021-01-01T00:00:00Z  ').\n    market_data_date : ~datetime.datetime\n        The date at which the market data is retrieved. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '\n        2021-01-01T00:00:00Z  ').\n    \n    \"\"\"\n    fixed_rate_percent: typing.Optional[float]\n    valuation_date: typing.Optional[datetime.datetime]\n    market_data_date: typing.Optional[datetime.datetime]",
        "metadata": {
            "doc": "Pricing analysis Object.\n\n    Attributes\n    ----------\n    fixed_rate_percent : float\n        The interest rate used to derive future fixed interest payments of the\n        instrument. The value is expressed in percentages.\n    valuation_date : ~datetime.datetime\n        The date at which the instrument is valued. The value is expressed in\n        ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '\n        2021-01-01T00:00:00Z  ').\n    market_data_date : ~datetime.datetime\n        The date at which the market data is retrieved. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g., '\n        2021-01-01T00:00:00Z  ').\n    \n",
            "annotations": "    fixed_rate_percent: typing.Optional[float]\n    valuation_date: typing.Optional[datetime.datetime]\n    market_data_date: typing.Optional[datetime.datetime]",
            "signature": "class TermDepositPricingAnalysis:\n    \"\"\"\"\"\"\n    fixed_rate_percent: typing.Optional[float]\n    valuation_date: typing.Optional[datetime.datetime]\n    market_data_date: typing.Optional[datetime.datetime]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.term_deposit.TermDepositPricingAnalysis.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "TermDepositPricingAnalysis.__init__",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositPricingAnalysis.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59993,
        "content": "class TermDepositPricingAnalysis:\n    @overload\n    def __init__(self, *, fixed_rate_percent: Optional[float] = None, valuation_date: Optional[datetime.datetime] = None, market_data_date: Optional[datetime.datetime] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "TermDepositPricingAnalysis"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.term_deposit.TermDepositPricingAnalysis"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "TermDepositPricingParameters",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositPricingParameters",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "market_data_date",
                "type": "datetime"
            },
            {
                "name": "price_side",
                "type": "PriceSideEnum",
                "valuelookup": "enum.PriceSideEnum"
            },
            {
                "name": "report_ccy",
                "type": "str"
            },
            {
                "name": "valuation_date",
                "type": "datetime"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 59997,
        "content": "class TermDepositPricingParameters:\n    \"\"\"TermDepositPricingParameters.\n\n    Attributes\n    ----------\n    market_data_date : ~datetime.datetime\n        The date at which the market data is retrieved. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). It should be less or equal to valuationDate).\n        Optional. By default, marketDataDate is valuationDate or today.\n    price_side : str or ~analyticsapi.models.PriceSideEnum\n        The price side of the instrument which comes from the instrument's\n        quote or from the curve (derived from quotes) used to value the\n        instrument. The possible values are:\n\n        * Bid,\n        * Ask,\n        * Mid.\n\n        The default value is 'Mid'. Known values are: \"Mid\", \"Bid\", \"Ask\", and \"Last\".\n    report_ccy : str\n        The currency code for the fields ending with 'xxxInReportCcy'. The\n        value is expressed in ISO 4217 alphabetical format (e.g., 'USD').\n        Optional. No default value applies.\n    valuation_date : ~datetime.datetime\n        The date at which the instrument is valued. The value is expressed in\n        ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). By default, MarketDataDate is used. If\n        MarketDataDate is not specified, the default value is today.\n    \n    \"\"\"\n    market_data_date: typing.Optional[datetime.datetime]\n    price_side: typing.Union[str, ForwardRef('_models.PriceSideEnum'), NoneType]\n    report_ccy: typing.Optional[str]\n    valuation_date: typing.Optional[datetime.datetime]",
        "metadata": {
            "doc": "TermDepositPricingParameters.\n\n    Attributes\n    ----------\n    market_data_date : ~datetime.datetime\n        The date at which the market data is retrieved. The value is expressed\n        in ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). It should be less or equal to valuationDate).\n        Optional. By default, marketDataDate is valuationDate or today.\n    price_side : str or ~analyticsapi.models.PriceSideEnum\n        The price side of the instrument which comes from the instrument's\n        quote or from the curve (derived from quotes) used to value the\n        instrument. The possible values are:\n\n        * Bid,\n        * Ask,\n        * Mid.\n\n        The default value is 'Mid'. Known values are: \"Mid\", \"Bid\", \"Ask\", and \"Last\".\n    report_ccy : str\n        The currency code for the fields ending with 'xxxInReportCcy'. The\n        value is expressed in ISO 4217 alphabetical format (e.g., 'USD').\n        Optional. No default value applies.\n    valuation_date : ~datetime.datetime\n        The date at which the instrument is valued. The value is expressed in\n        ISO 8601 format: YYYY-MM-DDT[hh]:[mm]:[ss]Z (e.g.,\n        '2021-01-01T00:00:00Z'). By default, MarketDataDate is used. If\n        MarketDataDate is not specified, the default value is today.\n    \n",
            "annotations": "    market_data_date: typing.Optional[datetime.datetime]\n    price_side: typing.Union[str, ForwardRef('_models.PriceSideEnum'), NoneType]\n    report_ccy: typing.Optional[str]\n    valuation_date: typing.Optional[datetime.datetime]",
            "signature": "class TermDepositPricingParameters:\n    \"\"\"\"\"\"\n    market_data_date: typing.Optional[datetime.datetime]\n    price_side: typing.Union[str, ForwardRef('_models.PriceSideEnum'), NoneType]\n    report_ccy: typing.Optional[str]\n    valuation_date: typing.Optional[datetime.datetime]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.term_deposit.TermDepositPricingParameters.__init__"
            ],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.term_deposit.PriceSideEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "TermDepositPricingParameters.__init__",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositPricingParameters.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 60073,
        "content": "class TermDepositPricingParameters:\n    @overload\n    def __init__(self, *, market_data_date: Optional[datetime.datetime] = None, price_side: Union[str, ForwardRef('_models.PriceSideEnum'), NoneType] = None, report_ccy: Optional[str] = None, valuation_date: Optional[datetime.datetime] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "TermDepositPricingParameters"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.term_deposit.TermDepositPricingParameters"
            ],
            "use": [
                "lseg_analytics.instruments.term_deposit.PriceSideEnum"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "ClassChunk",
        "name": "TermDepositValuation",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositValuation",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "accrued_days",
                "type": "int"
            },
            {
                "name": "accrued_amount_in_deal_ccy",
                "type": "float"
            },
            {
                "name": "accrued_amount_in_report_ccy",
                "type": "float"
            },
            {
                "name": "market_value_in_deal_ccy",
                "type": "float"
            },
            {
                "name": "market_value_in_report_ccy",
                "type": "float"
            },
            {
                "name": "clean_market_value_in_deal_ccy",
                "type": "float"
            },
            {
                "name": "clean_market_value_in_report_ccy",
                "type": "float"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 60077,
        "content": "class TermDepositValuation:\n    \"\"\"Valuation Object.\n\n    Attributes\n    ----------\n    accrued_days : int\n        The number of days since the last interest payment date or since the\n        dated date of the instrument.\n    accrued_amount_in_deal_ccy : float\n        The accrued interest amount. It is computed from the accrued percent\n        and the notional amount. The value is expressed in the deal currency.\n        For more details on the field calculation, please refer here.\n    accrued_amount_in_report_ccy : float\n        The accrued interest amount. It is computed from the accrued percent\n        and the notional amount. The value is expressed in the reporting\n        currency.\n    market_value_in_deal_ccy : float\n        The market value of the instrument. The value is expressed in the deal\n        currency. For more details on the field calculation, please refer here.\n    market_value_in_report_ccy : float\n        The market value of the instrument. The value is expressed in the\n        reporting currency.\n    clean_market_value_in_deal_ccy : float\n        The market value of the instrument less any accrued interest. The value\n        is expressed in the deal currency. For more details on the field\n        calculation, please refer here.\n    clean_market_value_in_report_ccy : float\n        The market value of the instrument less any accrued interest. The value\n        is expressed in the reporting currency.\n    \n    \"\"\"\n    accrued_days: typing.Optional[int]\n    accrued_amount_in_deal_ccy: typing.Optional[float]\n    accrued_amount_in_report_ccy: typing.Optional[float]\n    market_value_in_deal_ccy: typing.Optional[float]\n    market_value_in_report_ccy: typing.Optional[float]\n    clean_market_value_in_deal_ccy: typing.Optional[float]\n    clean_market_value_in_report_ccy: typing.Optional[float]",
        "metadata": {
            "doc": "Valuation Object.\n\n    Attributes\n    ----------\n    accrued_days : int\n        The number of days since the last interest payment date or since the\n        dated date of the instrument.\n    accrued_amount_in_deal_ccy : float\n        The accrued interest amount. It is computed from the accrued percent\n        and the notional amount. The value is expressed in the deal currency.\n        For more details on the field calculation, please refer here.\n    accrued_amount_in_report_ccy : float\n        The accrued interest amount. It is computed from the accrued percent\n        and the notional amount. The value is expressed in the reporting\n        currency.\n    market_value_in_deal_ccy : float\n        The market value of the instrument. The value is expressed in the deal\n        currency. For more details on the field calculation, please refer here.\n    market_value_in_report_ccy : float\n        The market value of the instrument. The value is expressed in the\n        reporting currency.\n    clean_market_value_in_deal_ccy : float\n        The market value of the instrument less any accrued interest. The value\n        is expressed in the deal currency. For more details on the field\n        calculation, please refer here.\n    clean_market_value_in_report_ccy : float\n        The market value of the instrument less any accrued interest. The value\n        is expressed in the reporting currency.\n    \n",
            "annotations": "    accrued_days: typing.Optional[int]\n    accrued_amount_in_deal_ccy: typing.Optional[float]\n    accrued_amount_in_report_ccy: typing.Optional[float]\n    market_value_in_deal_ccy: typing.Optional[float]\n    market_value_in_report_ccy: typing.Optional[float]\n    clean_market_value_in_deal_ccy: typing.Optional[float]\n    clean_market_value_in_report_ccy: typing.Optional[float]",
            "signature": "class TermDepositValuation:\n    \"\"\"\"\"\"\n    accrued_days: typing.Optional[int]\n    accrued_amount_in_deal_ccy: typing.Optional[float]\n    accrued_amount_in_report_ccy: typing.Optional[float]\n    market_value_in_deal_ccy: typing.Optional[float]\n    market_value_in_report_ccy: typing.Optional[float]\n    clean_market_value_in_deal_ccy: typing.Optional[float]\n    clean_market_value_in_report_ccy: typing.Optional[float]"
        },
        "dependencies": {
            "children": [
                "lseg_analytics.instruments.term_deposit.TermDepositValuation.__init__"
            ],
            "parent": [],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "OverloadedMethodChunk",
        "name": "TermDepositValuation.__init__",
        "id": "lseg_analytics.instruments.term_deposit.TermDepositValuation.__init__",
        "params": [
            {
                "name": "args",
                "type": "Any"
            },
            {
                "name": "kwargs",
                "type": "Any"
            }
        ],
        "file_path": "lseg_analytics_basic_client/models/_models.py",
        "line_number": 60153,
        "content": "class TermDepositValuation:\n    @overload\n    def __init__(self, *, accrued_days: Optional[int] = None, accrued_amount_in_deal_ccy: Optional[float] = None, accrued_amount_in_report_ccy: Optional[float] = None, market_value_in_deal_ccy: Optional[float] = None, market_value_in_report_ccy: Optional[float] = None, clean_market_value_in_deal_ccy: Optional[float] = None, clean_market_value_in_report_ccy: Optional[float] = None) -> None:\n        \"\"\"\"\"\"\n\n    @overload\n    def __init__(self, mapping: Mapping[str, Any]) -> None:\n        \"\"\"\n        Parameters\n        ----------\n        mapping : Mapping[str, Any]\n            raw JSON to initialize the model.\n        \n        \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any) -> None:\n        \"\"\"\"\"\"",
        "metadata": {
            "doc": "",
            "signature": "__init__(self, *args: Any, **kwargs: Any) -> None:",
            "class": "TermDepositValuation"
        },
        "dependencies": {
            "children": [],
            "parent": [
                "lseg_analytics.instruments.term_deposit.TermDepositValuation"
            ],
            "use": [],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "EnumChunk",
        "name": "TypeEnum",
        "id": "lseg_analytics.instruments.term_deposit.TypeEnum",
        "content": "class TypeEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    \"\"\"Type of TypeEnum.\"\"\"\n\n    STRING = \"String\"\n    FLOAT = \"Float\"\n    DATE_TIME = \"DateTime\"\n    INTEGER = \"Integer\"\n    OBJECT = \"Object\"\n    DATE = \"Date\"\n    BOOL = \"Bool\"\n    STRING_ARRAY = \"StringArray\"\n    FLOAT_ARRAY = \"FloatArray\"\n    DATE_ARRAY = \"DateArray\"\n    OBJECT_ARRAY = \"ObjectArray\"\n    INVALID_FIELD = \"InvalidField\"\n",
        "metadata": {
            "doc": "Type of TypeEnum.\n",
            "members": [
                "TypeEnum.STRING = 'String'",
                "TypeEnum.FLOAT = 'Float'",
                "TypeEnum.DATE_TIME = 'DateTime'",
                "TypeEnum.INTEGER = 'Integer'",
                "TypeEnum.OBJECT = 'Object'",
                "TypeEnum.DATE = 'Date'",
                "TypeEnum.BOOL = 'Bool'",
                "TypeEnum.STRING_ARRAY = 'StringArray'",
                "TypeEnum.FLOAT_ARRAY = 'FloatArray'",
                "TypeEnum.DATE_ARRAY = 'DateArray'",
                "TypeEnum.OBJECT_ARRAY = 'ObjectArray'",
                "TypeEnum.INVALID_FIELD = 'InvalidField'"
            ],
            "signature": "class TypeEnum(Enum):\n    \"\"\"\"\"\"\n    STRING = 'String'\n    FLOAT = 'Float'\n    DATE_TIME = 'DateTime'\n    INTEGER = 'Integer'\n    OBJECT = 'Object'\n    DATE = 'Date'\n    BOOL = 'Bool'\n    STRING_ARRAY = 'StringArray'\n    FLOAT_ARRAY = 'FloatArray'\n    DATE_ARRAY = 'DateArray'\n    OBJECT_ARRAY = 'ObjectArray'\n    INVALID_FIELD = 'InvalidField'"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    },
    {
        "type": "FunctionChunk",
        "name": "price",
        "id": "lseg_analytics.instruments.term_deposit.price",
        "params": [
            {
                "name": "*",
                "type": "python-keyword"
            },
            {
                "name": "definitions",
                "type": "List[TermDepositDefinitionInstrument]"
            },
            {
                "name": "pricing_preferences",
                "type": "TermDepositPricingParameters"
            },
            {
                "name": "market_data",
                "type": "MarketDataQps"
            },
            {
                "name": "return_market_data",
                "type": "bool"
            },
            {
                "name": "fields",
                "type": "str"
            }
        ],
        "file_path": "lseg_analytics/instruments/term_deposit/_functions.py",
        "line_number": 67,
        "content": "def price(*, definitions: List[TermDepositDefinitionInstrument], pricing_preferences: Optional[TermDepositPricingParameters] = None, market_data: Optional[MarketDataQps] = None, return_market_data: Optional[bool] = None, fields: Optional[str] = None) -> TermDepositCalculationResponse:\n    \"\"\"\n    Calculate TermDeposit analytics\n\n    Parameters\n    ----------\n    definitions : List[TermDepositDefinitionInstrument]\n        An array of objects describing a curve or an instrument.\n        Please provide either a full definition (for a user-defined curve/instrument), or reference to a curve/instrument definition saved in the platform, or the code identifying the existing curve/instrument.\n    pricing_preferences : TermDepositPricingParameters, optional\n        The parameters that control the computation of the analytics.\n    market_data : MarketDataQps, optional\n        The market data used to compute the analytics.\n    return_market_data : bool, optional\n        Boolean property to determine if undelying market data used for calculation should be returned in the response\n    fields : str, optional\n        A parameter used to select the fields to return in response. If not provided, all fields will be returned.\n        Some usage examples:\n        1. Simply enumerating the fields, separating them by ',', e.g. 'fields=//please insert the selected fields here, e.g., field1, field2 //'\n        2. Using parentheses to indicate nesting, e.g. 'fields= //please insert the selected field and subfields here, e.g., field1(subfield1, subfield2), field2(subfield3)//\u2019\n        3. Using forward slash '/' to indicate nesting, e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1/subfield1, field1/subfield2, field2/subfield3//\u2019 (same result as example above)\n        4. Operators can even be combined (forward slashes in brackets, not the way around), e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1(subfield1/subsubfield1), field2/subfield2//'\n\n    Returns\n    --------\n    TermDepositCalculationResponse\n        A model template describing the analytics response returned for an instrument provided as part of the request.\n\n    Examples\n    --------\n    >>> # Create term deposit defintion object\n    >>> term_deposit_definition = td.TermDepositDefinition(\n    >>>     instrument_code = \"EUR3MD=\",\n    >>>     notional_amount = 1000000\n    >>> )\n    >>>\n    >>> # Create term deposit instrument defintion object\n    >>> term_deposit_instrument = td.TermDepositDefinitionInstrument(\n    >>>     definition = term_deposit_definition\n    >>> )\n    >>>\n    >>> # Create term deposit pricing parameters object - optional\n    >>> term_deposit_parameters = td.TermDepositPricingParameters(\n    >>>     valuation_date  = dt.datetime.strptime(\"2025-07-21\", \"%Y-%m-%d\"),\n    >>> )\n\n\n    >>> #  Execute the calculation using the price() function\n    >>> # The 'definitions' parameter accepts a list of instruments definitions for batch processing\n    >>>\n    >>> term_deposit_response = td.price(\n    >>>     definitions = [term_deposit_instrument],\n    >>>     pricing_preferences = term_deposit_parameters\n    >>> )\n\n    \n    \"\"\"",
        "metadata": {
            "doc": "\n    Calculate TermDeposit analytics\n\n    Parameters\n    ----------\n    definitions : List[TermDepositDefinitionInstrument]\n        An array of objects describing a curve or an instrument.\n        Please provide either a full definition (for a user-defined curve/instrument), or reference to a curve/instrument definition saved in the platform, or the code identifying the existing curve/instrument.\n    pricing_preferences : TermDepositPricingParameters, optional\n        The parameters that control the computation of the analytics.\n    market_data : MarketDataQps, optional\n        The market data used to compute the analytics.\n    return_market_data : bool, optional\n        Boolean property to determine if undelying market data used for calculation should be returned in the response\n    fields : str, optional\n        A parameter used to select the fields to return in response. If not provided, all fields will be returned.\n        Some usage examples:\n        1. Simply enumerating the fields, separating them by ',', e.g. 'fields=//please insert the selected fields here, e.g., field1, field2 //'\n        2. Using parentheses to indicate nesting, e.g. 'fields= //please insert the selected field and subfields here, e.g., field1(subfield1, subfield2), field2(subfield3)//\u2019\n        3. Using forward slash '/' to indicate nesting, e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1/subfield1, field1/subfield2, field2/subfield3//\u2019 (same result as example above)\n        4. Operators can even be combined (forward slashes in brackets, not the way around), e.g. 'fields=//please insert the selected field and subfields here, e.g.,  field1(subfield1/subsubfield1), field2/subfield2//'\n\n    Returns\n    --------\n    TermDepositCalculationResponse\n        A model template describing the analytics response returned for an instrument provided as part of the request.\n\n    Examples\n    --------\n    >>> # Create term deposit defintion object\n    >>> term_deposit_definition = td.TermDepositDefinition(\n    >>>     instrument_code = \"EUR3MD=\",\n    >>>     notional_amount = 1000000\n    >>> )\n    >>>\n    >>> # Create term deposit instrument defintion object\n    >>> term_deposit_instrument = td.TermDepositDefinitionInstrument(\n    >>>     definition = term_deposit_definition\n    >>> )\n    >>>\n    >>> # Create term deposit pricing parameters object - optional\n    >>> term_deposit_parameters = td.TermDepositPricingParameters(\n    >>>     valuation_date  = dt.datetime.strptime(\"2025-07-21\", \"%Y-%m-%d\"),\n    >>> )\n\n\n    >>> #  Execute the calculation using the price() function\n    >>> # The 'definitions' parameter accepts a list of instruments definitions for batch processing\n    >>>\n    >>> term_deposit_response = td.price(\n    >>>     definitions = [term_deposit_instrument],\n    >>>     pricing_preferences = term_deposit_parameters\n    >>> )\n\n    \n",
            "signature": "def price(*, definitions: List[TermDepositDefinitionInstrument], pricing_preferences: Optional[TermDepositPricingParameters] = None, market_data: Optional[MarketDataQps] = None, return_market_data: Optional[bool] = None, fields: Optional[str] = None) -> TermDepositCalculationResponse:"
        },
        "dependencies": {
            "children": [],
            "parent": [],
            "use": [
                "lseg_analytics.instruments.term_deposit.TermDepositDefinitionInstrument",
                "lseg_analytics.instruments.term_deposit.TermDepositPricingParameters",
                "lseg_analytics.instruments.term_deposit.MarketDataQps",
                "lseg_analytics.instruments.term_deposit.TermDepositCalculationResponse"
            ],
            "base_classes": [],
            "sub_classes": []
        },
        "source_module": "lseg_analytics.instruments.term_deposit",
        "module_version": "2.1.0b5"
    }
]