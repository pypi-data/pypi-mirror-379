import json

from sudorouter.http import TeeConnection, encrypt, decrypt
from sudorouter.quoter import get_tee_quoter


def verify_send_data(cipher_key: bytes, nonce: bytes, plaintext: bytes, ciphertext: bytes):
    """
    optional send_callback
    :param cipher_key: cipher key generated by ecdh
    :param nonce: random nonce generated by client
    :param plaintext: the original http plaintext
    :param ciphertext: ciphertext encrypted by other parameters, that will be sent to the server.
    :return: None
    """
    print("send: ", ciphertext)
    expected = encrypt(cipher_key, nonce, plaintext)
    assert expected == ciphertext, "invalid encrypted data"


def verify_recv_data(cipher_key: bytes, nonce: bytes, plaintext: bytes, ciphertext: bytes):
    """
    optional recv_callback
    :param cipher_key: cipher key generated by ecdh
    :param nonce: random nonce generated by tee sudorouter server
    :param plaintext: The plaintext decrypted by other parameters, that will be parsed as a HTTPResponse and provided to the client.
    :param ciphertext: The original ciphertext returned by the server
    :return: None
    """
    print("recv: ", ciphertext)
    expected = decrypt(cipher_key, nonce, ciphertext)
    assert expected == plaintext, "invalid decrypted data"


conn = TeeConnection(
    "tee.sudorouter.ai",
    443,
    send_callback=verify_send_data,
    recv_callback=verify_recv_data,
)

conn.request(
    method="POST",
    url="/v1/chat/completions",
    headers={
        "Authorization": "Bearer <YourToken>",
        "Content-Type": "application/json",
    },
    body=json.dumps(
        {
            "messages": [{"content": [{"type": "text", "text": "<Your prompt>"}], "role": "user"}],
            "model": "DeepSeek-R1-Distill-Llama-70B",
            "temperature": 0.7,
            "top_p": 1,
            "frequency_penalty": 0,
            "presence_penalty": 0,
            "stream": True,
        }
    ),
    encode_chunked=True,
)

res = conn.getresponse()
data = res.read()
print(data.decode("utf-8"))

# Get tee info, optional

tee_info = conn.get_tee_info()
print("tee.type:", tee_info.type)
print("tee.report.user_data ", tee_info.report.user_data.hex())
print("tee.report.nonce ", tee_info.report.nonce.hex())
for k, v in tee_info.report.measure.items():
    print(f"tee.report.measure.{k} ", v.hex())
report = get_tee_quoter(tee_info.type).verify(tee_info.quote, tee_info.nonce)
if report == tee_info.report:
    print("tee report is verified")
else:
    print("tee report is NOT verified")
