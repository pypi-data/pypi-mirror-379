[build-system]
requires = ["hatchling>=1.8.0"]
build-backend = "hatchling.build"

[project]
name = "shadcn-agent"
version = "0.2.0"
authors = [
  { name = "Aryan Bagale", email = "aryanbagale22@gmail.com" }
]
description = "A Shadcn-style CLI for building composable AI agents with LangGraph. Fetch component templates directly from GitHub."
readme = "README.MD"
license = "MIT"
requires-python = ">=3.8"
keywords = ["ai", "agents", "langgraph", "cli", "workflow", "automation"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Code Generators",
    "Topic :: System :: Systems Administration",
]

# Core dependencies
dependencies = [
    "requests>=2.25.0",
    # langgraph does not publish wheels for Python 3.8; make it optional for 3.8 CI
    "langgraph>=0.0.1; python_version >= '3.9'",
    "deep-translator>=1.9.0", 
    "beautifulsoup4>=4.9.0",
    "python-dotenv>=0.19.0",
]

[project.urls]
Homepage = "https://github.com/Aryan-Bagale/shadcn-agents"
Repository = "https://github.com/Aryan-Bagale/shadcn-agents"
Issues = "https://github.com/Aryan-Bagale/shadcn-agents/issues"
Documentation = "https://github.com/Aryan-Bagale/shadcn-agents#readme"
Changelog = "https://github.com/Aryan-Bagale/shadcn-agents/releases"

[project.scripts]
shadcn-agent = "shadcn_agent.cli:main"

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.900",
    "pre-commit>=2.0",
]

# Playground/UI dependencies (optional - only needed for playground)
playground = [
    "streamlit>=1.20.0",
]

# Full installation with all features
all = [
    "shadcn-agent[dev,playground]",
]

[tool.hatch.version]
path = "shadcn_agent/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["shadcn_agent"]

[tool.hatch.build.targets.sdist]
include = [
    "/shadcn_agent",
    "/templates", 
    "/README.MD",
    "/LICENSE",
    "/requirements.txt",
]

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "requests.*", 
    "bs4.*",
    "deep_translator.*",
    "langgraph.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--cov=shadcn_agent",
    "--cov-report=html",
    "--cov-report=term-missing",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["shadcn_agent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]