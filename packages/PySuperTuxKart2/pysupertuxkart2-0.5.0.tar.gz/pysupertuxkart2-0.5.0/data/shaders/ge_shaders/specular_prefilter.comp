layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// Binding for the input skybox cubemap.
layout(set = 0, binding = 0) uniform samplerCube uSkybox;
// Output prefiltered environment specular map (stored as a 2D array for cube faces).
#ifdef SHADER_STORAGE_IMAGE_EXTENDED_FORMATS
layout(set = 0, binding = 1, rgb10_a2) uniform restrict writeonly image2DArray uPrefilterMap;
#else
layout(set = 0, binding = 1, rgba8) uniform restrict writeonly image2DArray uPrefilterMap;
#endif

#include "utils/environment_map.glsl"
#include "utils/pbr_utils.glsl"

void main()
{
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    if (pix.x >= pc.size || pix.y >= pc.size) return;

    // Get normalized UV for current pixel.
    vec2 uv = (vec2(pix) + 0.5) / vec2(pc.size, pc.size);
    int face = int(gl_GlobalInvocationID.z);

    float roughness = float(pc.mipmapLevel) / float(pc.mipmapCount - 1);
    vec3 R = FaceUVtoDir(face, uv);
    vec3 V = normalize(R);
    // Don't need to sample skybox when roughness is 0.
    // Since it's a perfect reflector.
    if (roughness == 0.0)
    {
        vec4 color = textureLod(uSkybox, V, 0);
        imageStore(uPrefilterMap, ivec3(pix, face), color);
        return;
    }

    vec3 prefilteredColor = vec3(0.0);
    float totalWeight = 0.0;
    uint sampleCount = uint(pc.sampleCount);
    for (uint i = 0u; i < sampleCount; ++i)
    {
        vec2 xi = Hammersley(i, sampleCount);
        // Importance sampling with a GGX distribution.
        float a = roughness * roughness;
        float phi = 2.0 * PI * xi.x;
        // GGX importance sampling for the cosine of the angle.
        float cosTheta = sqrt((1.0 - xi.y) / (1.0 + (a * a - 1.0) * xi.y));
        float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
        vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

        // Construct TBN basis from view direction V.
        vec3 up = abs(V.y) < 0.999 ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
        vec3 tangent = normalize(cross(up, V));
        vec3 bitangent = cross(V, tangent);
        mat3 TBN = mat3(tangent, bitangent, V);
        H = normalize(TBN * H);

        // Compute reflection vector L.
        vec3 L = normalize(reflect(-V, H));
        float NdotL = max(dot(V, L), 0.0);

        if (NdotL > 0.0)
        {
            // Calculate the mip level based on the PDF.
            // In a skybox/environment map scenario, N = V.
            float NoH = max(dot(V, H), 0.0);
            float VoH = max(dot(V, H), 0.0);

            float D = D_GGX(roughness, NoH);
            float pdf = D * NoH / (4.0 * VoH);
            float omegaS = 1.0 / (float(sampleCount) * pdf);
            float omegaP = 4.0 * PI / (6.0 * float(pc.size * pc.size));
            float mipLevel = 0.5 * log2(omegaS / omegaP);

            vec3 sampleColor = textureLod(uSkybox, L, mipLevel).rgb;
            prefilteredColor += sampleColor * NdotL;
            totalWeight += NdotL;
        }
    }
    prefilteredColor = prefilteredColor / totalWeight;

    imageStore(uPrefilterMap, ivec3(pix, face), vec4(prefilteredColor, 1.0));
}
