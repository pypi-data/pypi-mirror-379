
.. py:class:: pystk2.Race

   The SuperTuxKart race instance


   .. py:method:: __init__ (self: pystk2.Race, config: pystk2.RaceConfig)

   .. py:method:: get_kart_action (self: pystk2.Race, arg0: int) -> pystk2.Action

      Get a kart control state


   .. py:method:: restart (self: pystk2.Race) -> None

      Restart the current track. Use this function if the race config does not change, instead of creating a new SuperTuxKart object


   .. py:method:: start (self: pystk2.Race) -> None

      start the race


   .. py:method:: step (*args, **kwargs)

      Overloaded function.


      * step(self: pystk2.Race, action: List[pystk2.Action]) -> bool


      Take a step with an action per agent


      * step(self: pystk2.Race, action: pystk2.Action) -> bool


      Take a step with an action for agent 0


      * step(self: pystk2.Race) -> bool


      Take a step without changing the action


   .. py:method:: stop (self: pystk2.Race) -> None

      Stop the race


   .. py:property:: config () -> pystk2.RaceConfig
      :annotation: property

      The current race configuration


   .. py:property:: render_data () -> List[pystk2.RenderData]
      :annotation: property

      rendering data from the last step

