# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDisplacementFieldPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBSplineExponentialDiffeomorphicTransformPython
else:
    import _itkBSplineExponentialDiffeomorphicTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkArrayPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkConstantVelocityFieldTransformPython
import itk.itkOptimizerParametersPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkDisplacementFieldTransformPython
import itk.itkVectorImagePython

def itkBSplineExponentialDiffeomorphicTransformD2_New():
    return itkBSplineExponentialDiffeomorphicTransformD2.New()

class itkBSplineExponentialDiffeomorphicTransformD2(itk.itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2):
    r"""Proxy of C++ itkBSplineExponentialDiffeomorphicTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineExponentialDiffeomorphicTransformD2_Pointer"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineExponentialDiffeomorphicTransformD2_Pointer"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2_Clone(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2_UpdateTransformParameters(self, update, factor)

    def BSplineSmoothConstantVelocityField(self, arg0, arg1):
        r"""
        BSplineSmoothConstantVelocityField(self, arg0, arg1) -> itkImageVD22_Pointer

        Parameters
        ----------
        arg0: itkImageVD22 const *
        arg1: itkFixedArrayUI2 const &

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2_BSplineSmoothConstantVelocityField(self, arg0, arg1)

    def SetSplineOrder(self, _arg):
        r"""
        SetSplineOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2_SetSplineOrder(self, _arg)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2_GetSplineOrder(self)

    def SetNumberOfControlPointsForTheConstantVelocityField(self, _arg):
        r"""
        SetNumberOfControlPointsForTheConstantVelocityField(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayUI2

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2_SetNumberOfControlPointsForTheConstantVelocityField(self, _arg)

    def GetNumberOfControlPointsForTheConstantVelocityField(self):
        r"""GetNumberOfControlPointsForTheConstantVelocityField(self) -> itkFixedArrayUI2"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2_GetNumberOfControlPointsForTheConstantVelocityField(self)

    def SetNumberOfControlPointsForTheUpdateField(self, _arg):
        r"""
        SetNumberOfControlPointsForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayUI2

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2_SetNumberOfControlPointsForTheUpdateField(self, _arg)

    def GetNumberOfControlPointsForTheUpdateField(self):
        r"""GetNumberOfControlPointsForTheUpdateField(self) -> itkFixedArrayUI2"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2_GetNumberOfControlPointsForTheUpdateField(self)

    def SetMeshSizeForTheConstantVelocityField(self, arg0):
        r"""
        SetMeshSizeForTheConstantVelocityField(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayUI2 const &

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2_SetMeshSizeForTheConstantVelocityField(self, arg0)

    def SetMeshSizeForTheUpdateField(self, arg0):
        r"""
        SetMeshSizeForTheUpdateField(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayUI2 const &

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2_SetMeshSizeForTheUpdateField(self, arg0)
    __swig_destroy__ = _itkBSplineExponentialDiffeomorphicTransformPython.delete_itkBSplineExponentialDiffeomorphicTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineExponentialDiffeomorphicTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineExponentialDiffeomorphicTransformD2

        Create a new object of the class itkBSplineExponentialDiffeomorphicTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineExponentialDiffeomorphicTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineExponentialDiffeomorphicTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineExponentialDiffeomorphicTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineExponentialDiffeomorphicTransformD2 in _itkBSplineExponentialDiffeomorphicTransformPython:
_itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD2_swigregister(itkBSplineExponentialDiffeomorphicTransformD2)

def itkBSplineExponentialDiffeomorphicTransformD3_New():
    return itkBSplineExponentialDiffeomorphicTransformD3.New()

class itkBSplineExponentialDiffeomorphicTransformD3(itk.itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3):
    r"""Proxy of C++ itkBSplineExponentialDiffeomorphicTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineExponentialDiffeomorphicTransformD3_Pointer"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineExponentialDiffeomorphicTransformD3_Pointer"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3_Clone(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3_UpdateTransformParameters(self, update, factor)

    def BSplineSmoothConstantVelocityField(self, arg0, arg1):
        r"""
        BSplineSmoothConstantVelocityField(self, arg0, arg1) -> itkImageVD33_Pointer

        Parameters
        ----------
        arg0: itkImageVD33 const *
        arg1: itkFixedArrayUI3 const &

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3_BSplineSmoothConstantVelocityField(self, arg0, arg1)

    def SetSplineOrder(self, _arg):
        r"""
        SetSplineOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3_SetSplineOrder(self, _arg)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3_GetSplineOrder(self)

    def SetNumberOfControlPointsForTheConstantVelocityField(self, _arg):
        r"""
        SetNumberOfControlPointsForTheConstantVelocityField(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayUI3

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3_SetNumberOfControlPointsForTheConstantVelocityField(self, _arg)

    def GetNumberOfControlPointsForTheConstantVelocityField(self):
        r"""GetNumberOfControlPointsForTheConstantVelocityField(self) -> itkFixedArrayUI3"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3_GetNumberOfControlPointsForTheConstantVelocityField(self)

    def SetNumberOfControlPointsForTheUpdateField(self, _arg):
        r"""
        SetNumberOfControlPointsForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayUI3

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3_SetNumberOfControlPointsForTheUpdateField(self, _arg)

    def GetNumberOfControlPointsForTheUpdateField(self):
        r"""GetNumberOfControlPointsForTheUpdateField(self) -> itkFixedArrayUI3"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3_GetNumberOfControlPointsForTheUpdateField(self)

    def SetMeshSizeForTheConstantVelocityField(self, arg0):
        r"""
        SetMeshSizeForTheConstantVelocityField(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayUI3 const &

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3_SetMeshSizeForTheConstantVelocityField(self, arg0)

    def SetMeshSizeForTheUpdateField(self, arg0):
        r"""
        SetMeshSizeForTheUpdateField(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayUI3 const &

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3_SetMeshSizeForTheUpdateField(self, arg0)
    __swig_destroy__ = _itkBSplineExponentialDiffeomorphicTransformPython.delete_itkBSplineExponentialDiffeomorphicTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineExponentialDiffeomorphicTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineExponentialDiffeomorphicTransformD3

        Create a new object of the class itkBSplineExponentialDiffeomorphicTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineExponentialDiffeomorphicTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineExponentialDiffeomorphicTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineExponentialDiffeomorphicTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineExponentialDiffeomorphicTransformD3 in _itkBSplineExponentialDiffeomorphicTransformPython:
_itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD3_swigregister(itkBSplineExponentialDiffeomorphicTransformD3)

def itkBSplineExponentialDiffeomorphicTransformD4_New():
    return itkBSplineExponentialDiffeomorphicTransformD4.New()

class itkBSplineExponentialDiffeomorphicTransformD4(itk.itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4):
    r"""Proxy of C++ itkBSplineExponentialDiffeomorphicTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineExponentialDiffeomorphicTransformD4_Pointer"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineExponentialDiffeomorphicTransformD4_Pointer"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4_Clone(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4_UpdateTransformParameters(self, update, factor)

    def BSplineSmoothConstantVelocityField(self, arg0, arg1):
        r"""
        BSplineSmoothConstantVelocityField(self, arg0, arg1) -> itkImageVD44_Pointer

        Parameters
        ----------
        arg0: itkImageVD44 const *
        arg1: itkFixedArrayUI4 const &

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4_BSplineSmoothConstantVelocityField(self, arg0, arg1)

    def SetSplineOrder(self, _arg):
        r"""
        SetSplineOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4_SetSplineOrder(self, _arg)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4_GetSplineOrder(self)

    def SetNumberOfControlPointsForTheConstantVelocityField(self, _arg):
        r"""
        SetNumberOfControlPointsForTheConstantVelocityField(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayUI4

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4_SetNumberOfControlPointsForTheConstantVelocityField(self, _arg)

    def GetNumberOfControlPointsForTheConstantVelocityField(self):
        r"""GetNumberOfControlPointsForTheConstantVelocityField(self) -> itkFixedArrayUI4"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4_GetNumberOfControlPointsForTheConstantVelocityField(self)

    def SetNumberOfControlPointsForTheUpdateField(self, _arg):
        r"""
        SetNumberOfControlPointsForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayUI4

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4_SetNumberOfControlPointsForTheUpdateField(self, _arg)

    def GetNumberOfControlPointsForTheUpdateField(self):
        r"""GetNumberOfControlPointsForTheUpdateField(self) -> itkFixedArrayUI4"""
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4_GetNumberOfControlPointsForTheUpdateField(self)

    def SetMeshSizeForTheConstantVelocityField(self, arg0):
        r"""
        SetMeshSizeForTheConstantVelocityField(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayUI4 const &

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4_SetMeshSizeForTheConstantVelocityField(self, arg0)

    def SetMeshSizeForTheUpdateField(self, arg0):
        r"""
        SetMeshSizeForTheUpdateField(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayUI4 const &

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4_SetMeshSizeForTheUpdateField(self, arg0)
    __swig_destroy__ = _itkBSplineExponentialDiffeomorphicTransformPython.delete_itkBSplineExponentialDiffeomorphicTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineExponentialDiffeomorphicTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineExponentialDiffeomorphicTransformD4

        Create a new object of the class itkBSplineExponentialDiffeomorphicTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineExponentialDiffeomorphicTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineExponentialDiffeomorphicTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineExponentialDiffeomorphicTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineExponentialDiffeomorphicTransformD4 in _itkBSplineExponentialDiffeomorphicTransformPython:
_itkBSplineExponentialDiffeomorphicTransformPython.itkBSplineExponentialDiffeomorphicTransformD4_swigregister(itkBSplineExponentialDiffeomorphicTransformD4)

