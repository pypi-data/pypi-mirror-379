# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBoundedReciprocalImageFilterPython
else:
    import _itkBoundedReciprocalImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkUnaryGeneratorImageFilterPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython

def itkBoundedReciprocalImageFilterID2ID2_New():
    return itkBoundedReciprocalImageFilterID2ID2.New()

class itkBoundedReciprocalImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterID2ID2_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterID2ID2_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterID2ID2

        Create a new object of the class itkBoundedReciprocalImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterID2ID2 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_swigregister(itkBoundedReciprocalImageFilterID2ID2)

def itkBoundedReciprocalImageFilterID3ID3_New():
    return itkBoundedReciprocalImageFilterID3ID3.New()

class itkBoundedReciprocalImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterID3ID3_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterID3ID3_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterID3ID3

        Create a new object of the class itkBoundedReciprocalImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterID3ID3 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_swigregister(itkBoundedReciprocalImageFilterID3ID3)

def itkBoundedReciprocalImageFilterID4ID4_New():
    return itkBoundedReciprocalImageFilterID4ID4.New()

class itkBoundedReciprocalImageFilterID4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID4ID4):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterID4ID4_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterID4ID4_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID4ID4_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID4ID4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterID4ID4

        Create a new object of the class itkBoundedReciprocalImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterID4ID4 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID4ID4_swigregister(itkBoundedReciprocalImageFilterID4ID4)

def itkBoundedReciprocalImageFilterIF2IF2_New():
    return itkBoundedReciprocalImageFilterIF2IF2.New()

class itkBoundedReciprocalImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterIF2IF2_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterIF2IF2_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIF2IF2

        Create a new object of the class itkBoundedReciprocalImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIF2IF2 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_swigregister(itkBoundedReciprocalImageFilterIF2IF2)

def itkBoundedReciprocalImageFilterIF3IF3_New():
    return itkBoundedReciprocalImageFilterIF3IF3.New()

class itkBoundedReciprocalImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterIF3IF3_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterIF3IF3_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIF3IF3

        Create a new object of the class itkBoundedReciprocalImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIF3IF3 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_swigregister(itkBoundedReciprocalImageFilterIF3IF3)

def itkBoundedReciprocalImageFilterIF4IF4_New():
    return itkBoundedReciprocalImageFilterIF4IF4.New()

class itkBoundedReciprocalImageFilterIF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF4IF4):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterIF4IF4_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterIF4IF4_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF4IF4_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF4IF4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIF4IF4

        Create a new object of the class itkBoundedReciprocalImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIF4IF4 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF4IF4_swigregister(itkBoundedReciprocalImageFilterIF4IF4)

def itkBoundedReciprocalImageFilterISS2ISS2_New():
    return itkBoundedReciprocalImageFilterISS2ISS2.New()

class itkBoundedReciprocalImageFilterISS2ISS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterISS2ISS2_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterISS2ISS2_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterISS2ISS2

        Create a new object of the class itkBoundedReciprocalImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterISS2ISS2 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2_swigregister(itkBoundedReciprocalImageFilterISS2ISS2)

def itkBoundedReciprocalImageFilterISS3ISS3_New():
    return itkBoundedReciprocalImageFilterISS3ISS3.New()

class itkBoundedReciprocalImageFilterISS3ISS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterISS3ISS3_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterISS3ISS3_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterISS3ISS3

        Create a new object of the class itkBoundedReciprocalImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterISS3ISS3 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3_swigregister(itkBoundedReciprocalImageFilterISS3ISS3)

def itkBoundedReciprocalImageFilterISS4ISS4_New():
    return itkBoundedReciprocalImageFilterISS4ISS4.New()

class itkBoundedReciprocalImageFilterISS4ISS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS4ISS4):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterISS4ISS4_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterISS4ISS4_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS4ISS4_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS4ISS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS4ISS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterISS4ISS4

        Create a new object of the class itkBoundedReciprocalImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterISS4ISS4 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS4ISS4_swigregister(itkBoundedReciprocalImageFilterISS4ISS4)

def itkBoundedReciprocalImageFilterIUC2IUC2_New():
    return itkBoundedReciprocalImageFilterIUC2IUC2.New()

class itkBoundedReciprocalImageFilterIUC2IUC2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterIUC2IUC2_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterIUC2IUC2_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUC2IUC2

        Create a new object of the class itkBoundedReciprocalImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIUC2IUC2 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_swigregister(itkBoundedReciprocalImageFilterIUC2IUC2)

def itkBoundedReciprocalImageFilterIUC3IUC3_New():
    return itkBoundedReciprocalImageFilterIUC3IUC3.New()

class itkBoundedReciprocalImageFilterIUC3IUC3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterIUC3IUC3_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterIUC3IUC3_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUC3IUC3

        Create a new object of the class itkBoundedReciprocalImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIUC3IUC3 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_swigregister(itkBoundedReciprocalImageFilterIUC3IUC3)

def itkBoundedReciprocalImageFilterIUC4IUC4_New():
    return itkBoundedReciprocalImageFilterIUC4IUC4.New()

class itkBoundedReciprocalImageFilterIUC4IUC4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC4IUC4):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterIUC4IUC4_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterIUC4IUC4_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC4IUC4_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC4IUC4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC4IUC4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUC4IUC4

        Create a new object of the class itkBoundedReciprocalImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIUC4IUC4 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC4IUC4_swigregister(itkBoundedReciprocalImageFilterIUC4IUC4)

def itkBoundedReciprocalImageFilterIUS2IUS2_New():
    return itkBoundedReciprocalImageFilterIUS2IUS2.New()

class itkBoundedReciprocalImageFilterIUS2IUS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterIUS2IUS2_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterIUS2IUS2_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUS2IUS2

        Create a new object of the class itkBoundedReciprocalImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIUS2IUS2 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_swigregister(itkBoundedReciprocalImageFilterIUS2IUS2)

def itkBoundedReciprocalImageFilterIUS3IUS3_New():
    return itkBoundedReciprocalImageFilterIUS3IUS3.New()

class itkBoundedReciprocalImageFilterIUS3IUS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterIUS3IUS3_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterIUS3IUS3_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUS3IUS3

        Create a new object of the class itkBoundedReciprocalImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIUS3IUS3 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_swigregister(itkBoundedReciprocalImageFilterIUS3IUS3)

def itkBoundedReciprocalImageFilterIUS4IUS4_New():
    return itkBoundedReciprocalImageFilterIUS4IUS4.New()

class itkBoundedReciprocalImageFilterIUS4IUS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS4IUS4):
    r"""Proxy of C++ itkBoundedReciprocalImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundedReciprocalImageFilterIUS4IUS4_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundedReciprocalImageFilterIUS4IUS4_Pointer"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS4IUS4_Clone(self)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS4IUS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS4IUS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundedReciprocalImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUS4IUS4

        Create a new object of the class itkBoundedReciprocalImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIUS4IUS4 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS4IUS4_swigregister(itkBoundedReciprocalImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def bounded_reciprocal_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for BoundedReciprocalImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.BoundedReciprocalImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def bounded_reciprocal_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.BoundedReciprocalImageFilter
    bounded_reciprocal_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    bounded_reciprocal_image_filter.__doc__ = filter_object.__doc__



