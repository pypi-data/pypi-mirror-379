# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKConvolutionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkConvolutionImageFilterPython
else:
    import _itkConvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkConvolutionImageFilterBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageBoundaryConditionPython

def itkConvolutionImageFilterID2ID2_New():
    return itkConvolutionImageFilterID2ID2.New()

class itkConvolutionImageFilterID2ID2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseID2ID2):
    r"""Proxy of C++ itkConvolutionImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterID2ID2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterID2ID2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterID2ID2

        Create a new object of the class itkConvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterID2ID2 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2_swigregister(itkConvolutionImageFilterID2ID2)

def itkConvolutionImageFilterID3ID3_New():
    return itkConvolutionImageFilterID3ID3.New()

class itkConvolutionImageFilterID3ID3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseID3ID3):
    r"""Proxy of C++ itkConvolutionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterID3ID3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterID3ID3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterID3ID3

        Create a new object of the class itkConvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterID3ID3 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3_swigregister(itkConvolutionImageFilterID3ID3)

def itkConvolutionImageFilterID4ID4_New():
    return itkConvolutionImageFilterID4ID4.New()

class itkConvolutionImageFilterID4ID4(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseID4ID4):
    r"""Proxy of C++ itkConvolutionImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterID4ID4_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterID4ID4_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID4ID4_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterID4ID4

        Create a new object of the class itkConvolutionImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterID4ID4 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterID4ID4_swigregister(itkConvolutionImageFilterID4ID4)

def itkConvolutionImageFilterIF2IF2_New():
    return itkConvolutionImageFilterIF2IF2.New()

class itkConvolutionImageFilterIF2IF2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIF2IF2):
    r"""Proxy of C++ itkConvolutionImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterIF2IF2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterIF2IF2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIF2IF2

        Create a new object of the class itkConvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIF2IF2 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2_swigregister(itkConvolutionImageFilterIF2IF2)

def itkConvolutionImageFilterIF3IF3_New():
    return itkConvolutionImageFilterIF3IF3.New()

class itkConvolutionImageFilterIF3IF3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIF3IF3):
    r"""Proxy of C++ itkConvolutionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterIF3IF3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterIF3IF3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIF3IF3

        Create a new object of the class itkConvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIF3IF3 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3_swigregister(itkConvolutionImageFilterIF3IF3)

def itkConvolutionImageFilterIF4IF4_New():
    return itkConvolutionImageFilterIF4IF4.New()

class itkConvolutionImageFilterIF4IF4(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIF4IF4):
    r"""Proxy of C++ itkConvolutionImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterIF4IF4_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterIF4IF4_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF4IF4_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIF4IF4

        Create a new object of the class itkConvolutionImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIF4IF4 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIF4IF4_swigregister(itkConvolutionImageFilterIF4IF4)

def itkConvolutionImageFilterISS2ISS2_New():
    return itkConvolutionImageFilterISS2ISS2.New()

class itkConvolutionImageFilterISS2ISS2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseISS2ISS2):
    r"""Proxy of C++ itkConvolutionImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterISS2ISS2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterISS2ISS2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterISS2ISS2

        Create a new object of the class itkConvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterISS2ISS2 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2_swigregister(itkConvolutionImageFilterISS2ISS2)

def itkConvolutionImageFilterISS3ISS3_New():
    return itkConvolutionImageFilterISS3ISS3.New()

class itkConvolutionImageFilterISS3ISS3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseISS3ISS3):
    r"""Proxy of C++ itkConvolutionImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterISS3ISS3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterISS3ISS3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterISS3ISS3

        Create a new object of the class itkConvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterISS3ISS3 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3_swigregister(itkConvolutionImageFilterISS3ISS3)

def itkConvolutionImageFilterISS4ISS4_New():
    return itkConvolutionImageFilterISS4ISS4.New()

class itkConvolutionImageFilterISS4ISS4(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseISS4ISS4):
    r"""Proxy of C++ itkConvolutionImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterISS4ISS4_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterISS4ISS4_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS4ISS4_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterISS4ISS4

        Create a new object of the class itkConvolutionImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterISS4ISS4 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterISS4ISS4_swigregister(itkConvolutionImageFilterISS4ISS4)

def itkConvolutionImageFilterIUC2IUC2_New():
    return itkConvolutionImageFilterIUC2IUC2.New()

class itkConvolutionImageFilterIUC2IUC2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUC2IUC2):
    r"""Proxy of C++ itkConvolutionImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUC2IUC2

        Create a new object of the class itkConvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIUC2IUC2 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2_swigregister(itkConvolutionImageFilterIUC2IUC2)

def itkConvolutionImageFilterIUC3IUC3_New():
    return itkConvolutionImageFilterIUC3IUC3.New()

class itkConvolutionImageFilterIUC3IUC3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUC3IUC3):
    r"""Proxy of C++ itkConvolutionImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUC3IUC3

        Create a new object of the class itkConvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIUC3IUC3 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3_swigregister(itkConvolutionImageFilterIUC3IUC3)

def itkConvolutionImageFilterIUC4IUC4_New():
    return itkConvolutionImageFilterIUC4IUC4.New()

class itkConvolutionImageFilterIUC4IUC4(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUC4IUC4):
    r"""Proxy of C++ itkConvolutionImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterIUC4IUC4_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterIUC4IUC4_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC4IUC4_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUC4IUC4

        Create a new object of the class itkConvolutionImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIUC4IUC4 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC4IUC4_swigregister(itkConvolutionImageFilterIUC4IUC4)

def itkConvolutionImageFilterIUS2IUS2_New():
    return itkConvolutionImageFilterIUS2IUS2.New()

class itkConvolutionImageFilterIUS2IUS2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUS2IUS2):
    r"""Proxy of C++ itkConvolutionImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterIUS2IUS2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterIUS2IUS2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUS2IUS2

        Create a new object of the class itkConvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIUS2IUS2 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2_swigregister(itkConvolutionImageFilterIUS2IUS2)

def itkConvolutionImageFilterIUS3IUS3_New():
    return itkConvolutionImageFilterIUS3IUS3.New()

class itkConvolutionImageFilterIUS3IUS3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUS3IUS3):
    r"""Proxy of C++ itkConvolutionImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterIUS3IUS3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterIUS3IUS3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUS3IUS3

        Create a new object of the class itkConvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIUS3IUS3 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3_swigregister(itkConvolutionImageFilterIUS3IUS3)

def itkConvolutionImageFilterIUS4IUS4_New():
    return itkConvolutionImageFilterIUS4IUS4.New()

class itkConvolutionImageFilterIUS4IUS4(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUS4IUS4):
    r"""Proxy of C++ itkConvolutionImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConvolutionImageFilterIUS4IUS4_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConvolutionImageFilterIUS4IUS4_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS4IUS4_Clone(self)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConvolutionImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUS4IUS4

        Create a new object of the class itkConvolutionImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIUS4IUS4 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS4IUS4_swigregister(itkConvolutionImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def convolution_image_filter(*args: itkt.ImageLike,  boundary_condition: itkt.ImageBoundaryCondition=..., kernel_image: itkt.Image=..., normalize: bool=..., output_region_mode=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ConvolutionImageFilter"""
    import itk

    kwarg_typehints = { 'boundary_condition':boundary_condition,'kernel_image':kernel_image,'normalize':normalize,'output_region_mode':output_region_mode }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ConvolutionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def convolution_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKConvolution.ConvolutionImageFilter
    convolution_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    convolution_image_filter.__doc__ = filter_object.__doc__



