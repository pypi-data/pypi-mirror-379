# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKThresholdingPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkYenThresholdCalculatorPython
else:
    import _itkYenThresholdCalculatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkHistogramThresholdCalculatorPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkArrayPython
import itk.itkHistogramPython
import itk.itkSamplePython

def itkYenThresholdCalculatorHDD_New():
    return itkYenThresholdCalculatorHDD.New()

class itkYenThresholdCalculatorHDD(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDD):
    r"""Proxy of C++ itkYenThresholdCalculatorHDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkYenThresholdCalculatorHDD_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkYenThresholdCalculatorHDD_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDD_Clone(self)
    __swig_destroy__ = _itkYenThresholdCalculatorPython.delete_itkYenThresholdCalculatorHDD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkYenThresholdCalculatorHDD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkYenThresholdCalculatorHDD

        Create a new object of the class itkYenThresholdCalculatorHDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdCalculatorHDD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkYenThresholdCalculatorHDD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkYenThresholdCalculatorHDD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkYenThresholdCalculatorHDD in _itkYenThresholdCalculatorPython:
_itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDD_swigregister(itkYenThresholdCalculatorHDD)

def itkYenThresholdCalculatorHDF_New():
    return itkYenThresholdCalculatorHDF.New()

class itkYenThresholdCalculatorHDF(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF):
    r"""Proxy of C++ itkYenThresholdCalculatorHDF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkYenThresholdCalculatorHDF_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkYenThresholdCalculatorHDF_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDF_Clone(self)
    __swig_destroy__ = _itkYenThresholdCalculatorPython.delete_itkYenThresholdCalculatorHDF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkYenThresholdCalculatorHDF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkYenThresholdCalculatorHDF

        Create a new object of the class itkYenThresholdCalculatorHDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdCalculatorHDF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkYenThresholdCalculatorHDF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkYenThresholdCalculatorHDF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkYenThresholdCalculatorHDF in _itkYenThresholdCalculatorPython:
_itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDF_swigregister(itkYenThresholdCalculatorHDF)

def itkYenThresholdCalculatorHDSS_New():
    return itkYenThresholdCalculatorHDSS.New()

class itkYenThresholdCalculatorHDSS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS):
    r"""Proxy of C++ itkYenThresholdCalculatorHDSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkYenThresholdCalculatorHDSS_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkYenThresholdCalculatorHDSS_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDSS_Clone(self)
    __swig_destroy__ = _itkYenThresholdCalculatorPython.delete_itkYenThresholdCalculatorHDSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkYenThresholdCalculatorHDSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkYenThresholdCalculatorHDSS

        Create a new object of the class itkYenThresholdCalculatorHDSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdCalculatorHDSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkYenThresholdCalculatorHDSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkYenThresholdCalculatorHDSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkYenThresholdCalculatorHDSS in _itkYenThresholdCalculatorPython:
_itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDSS_swigregister(itkYenThresholdCalculatorHDSS)

def itkYenThresholdCalculatorHDUC_New():
    return itkYenThresholdCalculatorHDUC.New()

class itkYenThresholdCalculatorHDUC(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC):
    r"""Proxy of C++ itkYenThresholdCalculatorHDUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkYenThresholdCalculatorHDUC_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkYenThresholdCalculatorHDUC_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDUC_Clone(self)
    __swig_destroy__ = _itkYenThresholdCalculatorPython.delete_itkYenThresholdCalculatorHDUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkYenThresholdCalculatorHDUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkYenThresholdCalculatorHDUC

        Create a new object of the class itkYenThresholdCalculatorHDUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdCalculatorHDUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkYenThresholdCalculatorHDUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkYenThresholdCalculatorHDUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkYenThresholdCalculatorHDUC in _itkYenThresholdCalculatorPython:
_itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDUC_swigregister(itkYenThresholdCalculatorHDUC)

def itkYenThresholdCalculatorHDUS_New():
    return itkYenThresholdCalculatorHDUS.New()

class itkYenThresholdCalculatorHDUS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS):
    r"""Proxy of C++ itkYenThresholdCalculatorHDUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkYenThresholdCalculatorHDUS_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkYenThresholdCalculatorHDUS_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDUS_Clone(self)
    __swig_destroy__ = _itkYenThresholdCalculatorPython.delete_itkYenThresholdCalculatorHDUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkYenThresholdCalculatorHDUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkYenThresholdCalculatorHDUS

        Create a new object of the class itkYenThresholdCalculatorHDUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdCalculatorHDUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkYenThresholdCalculatorHDUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkYenThresholdCalculatorHDUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkYenThresholdCalculatorHDUS in _itkYenThresholdCalculatorPython:
_itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHDUS_swigregister(itkYenThresholdCalculatorHDUS)

def itkYenThresholdCalculatorHFD_New():
    return itkYenThresholdCalculatorHFD.New()

class itkYenThresholdCalculatorHFD(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFD):
    r"""Proxy of C++ itkYenThresholdCalculatorHFD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkYenThresholdCalculatorHFD_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkYenThresholdCalculatorHFD_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFD_Clone(self)
    __swig_destroy__ = _itkYenThresholdCalculatorPython.delete_itkYenThresholdCalculatorHFD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkYenThresholdCalculatorHFD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkYenThresholdCalculatorHFD

        Create a new object of the class itkYenThresholdCalculatorHFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdCalculatorHFD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkYenThresholdCalculatorHFD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkYenThresholdCalculatorHFD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkYenThresholdCalculatorHFD in _itkYenThresholdCalculatorPython:
_itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFD_swigregister(itkYenThresholdCalculatorHFD)

def itkYenThresholdCalculatorHFF_New():
    return itkYenThresholdCalculatorHFF.New()

class itkYenThresholdCalculatorHFF(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF):
    r"""Proxy of C++ itkYenThresholdCalculatorHFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkYenThresholdCalculatorHFF_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkYenThresholdCalculatorHFF_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFF_Clone(self)
    __swig_destroy__ = _itkYenThresholdCalculatorPython.delete_itkYenThresholdCalculatorHFF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkYenThresholdCalculatorHFF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkYenThresholdCalculatorHFF

        Create a new object of the class itkYenThresholdCalculatorHFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdCalculatorHFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkYenThresholdCalculatorHFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkYenThresholdCalculatorHFF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkYenThresholdCalculatorHFF in _itkYenThresholdCalculatorPython:
_itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFF_swigregister(itkYenThresholdCalculatorHFF)

def itkYenThresholdCalculatorHFSS_New():
    return itkYenThresholdCalculatorHFSS.New()

class itkYenThresholdCalculatorHFSS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS):
    r"""Proxy of C++ itkYenThresholdCalculatorHFSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkYenThresholdCalculatorHFSS_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkYenThresholdCalculatorHFSS_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFSS_Clone(self)
    __swig_destroy__ = _itkYenThresholdCalculatorPython.delete_itkYenThresholdCalculatorHFSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkYenThresholdCalculatorHFSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkYenThresholdCalculatorHFSS

        Create a new object of the class itkYenThresholdCalculatorHFSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdCalculatorHFSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkYenThresholdCalculatorHFSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkYenThresholdCalculatorHFSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkYenThresholdCalculatorHFSS in _itkYenThresholdCalculatorPython:
_itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFSS_swigregister(itkYenThresholdCalculatorHFSS)

def itkYenThresholdCalculatorHFUC_New():
    return itkYenThresholdCalculatorHFUC.New()

class itkYenThresholdCalculatorHFUC(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC):
    r"""Proxy of C++ itkYenThresholdCalculatorHFUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkYenThresholdCalculatorHFUC_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkYenThresholdCalculatorHFUC_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFUC_Clone(self)
    __swig_destroy__ = _itkYenThresholdCalculatorPython.delete_itkYenThresholdCalculatorHFUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkYenThresholdCalculatorHFUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkYenThresholdCalculatorHFUC

        Create a new object of the class itkYenThresholdCalculatorHFUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdCalculatorHFUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkYenThresholdCalculatorHFUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkYenThresholdCalculatorHFUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkYenThresholdCalculatorHFUC in _itkYenThresholdCalculatorPython:
_itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFUC_swigregister(itkYenThresholdCalculatorHFUC)

def itkYenThresholdCalculatorHFUS_New():
    return itkYenThresholdCalculatorHFUS.New()

class itkYenThresholdCalculatorHFUS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS):
    r"""Proxy of C++ itkYenThresholdCalculatorHFUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkYenThresholdCalculatorHFUS_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkYenThresholdCalculatorHFUS_Pointer"""
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFUS_Clone(self)
    __swig_destroy__ = _itkYenThresholdCalculatorPython.delete_itkYenThresholdCalculatorHFUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkYenThresholdCalculatorHFUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkYenThresholdCalculatorHFUS

        Create a new object of the class itkYenThresholdCalculatorHFUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdCalculatorHFUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkYenThresholdCalculatorHFUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkYenThresholdCalculatorHFUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkYenThresholdCalculatorHFUS in _itkYenThresholdCalculatorPython:
_itkYenThresholdCalculatorPython.itkYenThresholdCalculatorHFUS_swigregister(itkYenThresholdCalculatorHFUS)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def yen_threshold_calculator(*args, **kwargs):
    """Functional interface for YenThresholdCalculator"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.YenThresholdCalculator.New(*args, **kwargs)

    return instance.__internal_call__()

def yen_threshold_calculator_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKThresholding.YenThresholdCalculator
    yen_threshold_calculator.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    yen_threshold_calculator.__doc__ = filter_object.__doc__



