# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDisplacementFieldPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGaussianExponentialDiffeomorphicTransformPython
else:
    import _itkGaussianExponentialDiffeomorphicTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkArrayPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkConstantVelocityFieldTransformPython
import itk.itkOptimizerParametersPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkDisplacementFieldTransformPython
import itk.itkVectorImagePython

def itkGaussianExponentialDiffeomorphicTransformD2_New():
    return itkGaussianExponentialDiffeomorphicTransformD2.New()

class itkGaussianExponentialDiffeomorphicTransformD2(itk.itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2):
    r"""Proxy of C++ itkGaussianExponentialDiffeomorphicTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianExponentialDiffeomorphicTransformD2_Pointer"""
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianExponentialDiffeomorphicTransformD2_Pointer"""
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD2_Clone(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD2_UpdateTransformParameters(self, update, factor)

    def GaussianSmoothConstantVelocityField(self, arg0, arg1):
        r"""
        GaussianSmoothConstantVelocityField(self, arg0, arg1) -> itkImageVD22_Pointer

        Parameters
        ----------
        arg0: itkImageVD22 *
        arg1: double

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD2_GaussianSmoothConstantVelocityField(self, arg0, arg1)

    def SetGaussianSmoothingVarianceForTheConstantVelocityField(self, _arg):
        r"""
        SetGaussianSmoothingVarianceForTheConstantVelocityField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD2_SetGaussianSmoothingVarianceForTheConstantVelocityField(self, _arg)

    def GetGaussianSmoothingVarianceForTheConstantVelocityField(self):
        r"""GetGaussianSmoothingVarianceForTheConstantVelocityField(self) -> double"""
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD2_GetGaussianSmoothingVarianceForTheConstantVelocityField(self)

    def SetGaussianSmoothingVarianceForTheUpdateField(self, _arg):
        r"""
        SetGaussianSmoothingVarianceForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD2_SetGaussianSmoothingVarianceForTheUpdateField(self, _arg)

    def GetGaussianSmoothingVarianceForTheUpdateField(self):
        r"""GetGaussianSmoothingVarianceForTheUpdateField(self) -> double"""
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD2_GetGaussianSmoothingVarianceForTheUpdateField(self)
    __swig_destroy__ = _itkGaussianExponentialDiffeomorphicTransformPython.delete_itkGaussianExponentialDiffeomorphicTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianExponentialDiffeomorphicTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianExponentialDiffeomorphicTransformD2

        Create a new object of the class itkGaussianExponentialDiffeomorphicTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianExponentialDiffeomorphicTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianExponentialDiffeomorphicTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianExponentialDiffeomorphicTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianExponentialDiffeomorphicTransformD2 in _itkGaussianExponentialDiffeomorphicTransformPython:
_itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD2_swigregister(itkGaussianExponentialDiffeomorphicTransformD2)

def itkGaussianExponentialDiffeomorphicTransformD3_New():
    return itkGaussianExponentialDiffeomorphicTransformD3.New()

class itkGaussianExponentialDiffeomorphicTransformD3(itk.itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3):
    r"""Proxy of C++ itkGaussianExponentialDiffeomorphicTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianExponentialDiffeomorphicTransformD3_Pointer"""
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianExponentialDiffeomorphicTransformD3_Pointer"""
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD3_Clone(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD3_UpdateTransformParameters(self, update, factor)

    def GaussianSmoothConstantVelocityField(self, arg0, arg1):
        r"""
        GaussianSmoothConstantVelocityField(self, arg0, arg1) -> itkImageVD33_Pointer

        Parameters
        ----------
        arg0: itkImageVD33 *
        arg1: double

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD3_GaussianSmoothConstantVelocityField(self, arg0, arg1)

    def SetGaussianSmoothingVarianceForTheConstantVelocityField(self, _arg):
        r"""
        SetGaussianSmoothingVarianceForTheConstantVelocityField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD3_SetGaussianSmoothingVarianceForTheConstantVelocityField(self, _arg)

    def GetGaussianSmoothingVarianceForTheConstantVelocityField(self):
        r"""GetGaussianSmoothingVarianceForTheConstantVelocityField(self) -> double"""
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD3_GetGaussianSmoothingVarianceForTheConstantVelocityField(self)

    def SetGaussianSmoothingVarianceForTheUpdateField(self, _arg):
        r"""
        SetGaussianSmoothingVarianceForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD3_SetGaussianSmoothingVarianceForTheUpdateField(self, _arg)

    def GetGaussianSmoothingVarianceForTheUpdateField(self):
        r"""GetGaussianSmoothingVarianceForTheUpdateField(self) -> double"""
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD3_GetGaussianSmoothingVarianceForTheUpdateField(self)
    __swig_destroy__ = _itkGaussianExponentialDiffeomorphicTransformPython.delete_itkGaussianExponentialDiffeomorphicTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianExponentialDiffeomorphicTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianExponentialDiffeomorphicTransformD3

        Create a new object of the class itkGaussianExponentialDiffeomorphicTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianExponentialDiffeomorphicTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianExponentialDiffeomorphicTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianExponentialDiffeomorphicTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianExponentialDiffeomorphicTransformD3 in _itkGaussianExponentialDiffeomorphicTransformPython:
_itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD3_swigregister(itkGaussianExponentialDiffeomorphicTransformD3)

def itkGaussianExponentialDiffeomorphicTransformD4_New():
    return itkGaussianExponentialDiffeomorphicTransformD4.New()

class itkGaussianExponentialDiffeomorphicTransformD4(itk.itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4):
    r"""Proxy of C++ itkGaussianExponentialDiffeomorphicTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianExponentialDiffeomorphicTransformD4_Pointer"""
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianExponentialDiffeomorphicTransformD4_Pointer"""
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD4_Clone(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD4_UpdateTransformParameters(self, update, factor)

    def GaussianSmoothConstantVelocityField(self, arg0, arg1):
        r"""
        GaussianSmoothConstantVelocityField(self, arg0, arg1) -> itkImageVD44_Pointer

        Parameters
        ----------
        arg0: itkImageVD44 *
        arg1: double

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD4_GaussianSmoothConstantVelocityField(self, arg0, arg1)

    def SetGaussianSmoothingVarianceForTheConstantVelocityField(self, _arg):
        r"""
        SetGaussianSmoothingVarianceForTheConstantVelocityField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD4_SetGaussianSmoothingVarianceForTheConstantVelocityField(self, _arg)

    def GetGaussianSmoothingVarianceForTheConstantVelocityField(self):
        r"""GetGaussianSmoothingVarianceForTheConstantVelocityField(self) -> double"""
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD4_GetGaussianSmoothingVarianceForTheConstantVelocityField(self)

    def SetGaussianSmoothingVarianceForTheUpdateField(self, _arg):
        r"""
        SetGaussianSmoothingVarianceForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD4_SetGaussianSmoothingVarianceForTheUpdateField(self, _arg)

    def GetGaussianSmoothingVarianceForTheUpdateField(self):
        r"""GetGaussianSmoothingVarianceForTheUpdateField(self) -> double"""
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD4_GetGaussianSmoothingVarianceForTheUpdateField(self)
    __swig_destroy__ = _itkGaussianExponentialDiffeomorphicTransformPython.delete_itkGaussianExponentialDiffeomorphicTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianExponentialDiffeomorphicTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianExponentialDiffeomorphicTransformD4

        Create a new object of the class itkGaussianExponentialDiffeomorphicTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianExponentialDiffeomorphicTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianExponentialDiffeomorphicTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianExponentialDiffeomorphicTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianExponentialDiffeomorphicTransformD4 in _itkGaussianExponentialDiffeomorphicTransformPython:
_itkGaussianExponentialDiffeomorphicTransformPython.itkGaussianExponentialDiffeomorphicTransformD4_swigregister(itkGaussianExponentialDiffeomorphicTransformD4)

