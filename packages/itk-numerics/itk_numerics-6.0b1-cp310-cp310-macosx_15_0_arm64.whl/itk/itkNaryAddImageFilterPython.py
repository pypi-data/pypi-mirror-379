# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNaryAddImageFilterPython
else:
    import _itkNaryAddImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterAPython

def itkNaryAddImageFilterID2ID2_Superclass_New():
    return itkNaryAddImageFilterID2ID2_Superclass.New()

class itkNaryAddImageFilterID2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkNaryAddImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterID2ID2_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterID2ID2_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< double,double > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< double,double > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterID2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterID2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterID2ID2_Superclass

        Create a new object of the class itkNaryAddImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterID2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterID2ID2_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Superclass_swigregister(itkNaryAddImageFilterID2ID2_Superclass)

def itkNaryAddImageFilterID3ID3_Superclass_New():
    return itkNaryAddImageFilterID3ID3_Superclass.New()

class itkNaryAddImageFilterID3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkNaryAddImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterID3ID3_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterID3ID3_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< double,double > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< double,double > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterID3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterID3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterID3ID3_Superclass

        Create a new object of the class itkNaryAddImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterID3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterID3ID3_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Superclass_swigregister(itkNaryAddImageFilterID3ID3_Superclass)

def itkNaryAddImageFilterID4ID4_Superclass_New():
    return itkNaryAddImageFilterID4ID4_Superclass.New()

class itkNaryAddImageFilterID4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4ID4):
    r"""Proxy of C++ itkNaryAddImageFilterID4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterID4ID4_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterID4ID4_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< double,double > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< double,double > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterID4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterID4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterID4ID4_Superclass

        Create a new object of the class itkNaryAddImageFilterID4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterID4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterID4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterID4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterID4ID4_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4_Superclass_swigregister(itkNaryAddImageFilterID4ID4_Superclass)

def itkNaryAddImageFilterIF2IF2_Superclass_New():
    return itkNaryAddImageFilterIF2IF2_Superclass.New()

class itkNaryAddImageFilterIF2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkNaryAddImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIF2IF2_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIF2IF2_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< float,float > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< float,float > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIF2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIF2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIF2IF2_Superclass

        Create a new object of the class itkNaryAddImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIF2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIF2IF2_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Superclass_swigregister(itkNaryAddImageFilterIF2IF2_Superclass)

def itkNaryAddImageFilterIF3IF3_Superclass_New():
    return itkNaryAddImageFilterIF3IF3_Superclass.New()

class itkNaryAddImageFilterIF3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkNaryAddImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIF3IF3_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIF3IF3_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< float,float > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< float,float > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIF3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIF3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIF3IF3_Superclass

        Create a new object of the class itkNaryAddImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIF3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIF3IF3_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Superclass_swigregister(itkNaryAddImageFilterIF3IF3_Superclass)

def itkNaryAddImageFilterIF4IF4_Superclass_New():
    return itkNaryAddImageFilterIF4IF4_Superclass.New()

class itkNaryAddImageFilterIF4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IF4):
    r"""Proxy of C++ itkNaryAddImageFilterIF4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIF4IF4_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIF4IF4_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< float,float > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< float,float > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIF4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIF4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIF4IF4_Superclass

        Create a new object of the class itkNaryAddImageFilterIF4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIF4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIF4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIF4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIF4IF4_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4_Superclass_swigregister(itkNaryAddImageFilterIF4IF4_Superclass)

def itkNaryAddImageFilterISS2ISS2_Superclass_New():
    return itkNaryAddImageFilterISS2ISS2_Superclass.New()

class itkNaryAddImageFilterISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkNaryAddImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< short,short > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< short,short > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterISS2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterISS2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterISS2ISS2_Superclass

        Create a new object of the class itkNaryAddImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterISS2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterISS2ISS2_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Superclass_swigregister(itkNaryAddImageFilterISS2ISS2_Superclass)

def itkNaryAddImageFilterISS3ISS3_Superclass_New():
    return itkNaryAddImageFilterISS3ISS3_Superclass.New()

class itkNaryAddImageFilterISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkNaryAddImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< short,short > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< short,short > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterISS3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterISS3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterISS3ISS3_Superclass

        Create a new object of the class itkNaryAddImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterISS3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterISS3ISS3_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Superclass_swigregister(itkNaryAddImageFilterISS3ISS3_Superclass)

def itkNaryAddImageFilterISS4ISS4_Superclass_New():
    return itkNaryAddImageFilterISS4ISS4_Superclass.New()

class itkNaryAddImageFilterISS4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4ISS4):
    r"""Proxy of C++ itkNaryAddImageFilterISS4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< short,short > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< short,short > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterISS4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterISS4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterISS4ISS4_Superclass

        Create a new object of the class itkNaryAddImageFilterISS4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterISS4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterISS4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterISS4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterISS4ISS4_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4_Superclass_swigregister(itkNaryAddImageFilterISS4ISS4_Superclass)

def itkNaryAddImageFilterIUC2IUC2_Superclass_New():
    return itkNaryAddImageFilterIUC2IUC2_Superclass.New()

class itkNaryAddImageFilterIUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkNaryAddImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< unsigned char,unsigned char > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< unsigned char,unsigned char > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUC2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIUC2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkNaryAddImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUC2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUC2IUC2_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Superclass_swigregister(itkNaryAddImageFilterIUC2IUC2_Superclass)

def itkNaryAddImageFilterIUC3IUC3_Superclass_New():
    return itkNaryAddImageFilterIUC3IUC3_Superclass.New()

class itkNaryAddImageFilterIUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkNaryAddImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< unsigned char,unsigned char > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< unsigned char,unsigned char > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUC3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIUC3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkNaryAddImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUC3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUC3IUC3_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Superclass_swigregister(itkNaryAddImageFilterIUC3IUC3_Superclass)

def itkNaryAddImageFilterIUC4IUC4_Superclass_New():
    return itkNaryAddImageFilterIUC4IUC4_Superclass.New()

class itkNaryAddImageFilterIUC4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4IUC4):
    r"""Proxy of C++ itkNaryAddImageFilterIUC4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< unsigned char,unsigned char > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< unsigned char,unsigned char > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUC4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIUC4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUC4IUC4_Superclass

        Create a new object of the class itkNaryAddImageFilterIUC4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUC4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUC4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUC4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUC4IUC4_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4_Superclass_swigregister(itkNaryAddImageFilterIUC4IUC4_Superclass)

def itkNaryAddImageFilterIUS2IUS2_Superclass_New():
    return itkNaryAddImageFilterIUS2IUS2_Superclass.New()

class itkNaryAddImageFilterIUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkNaryAddImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< unsigned short,unsigned short > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< unsigned short,unsigned short > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUS2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIUS2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkNaryAddImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUS2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUS2IUS2_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Superclass_swigregister(itkNaryAddImageFilterIUS2IUS2_Superclass)

def itkNaryAddImageFilterIUS3IUS3_Superclass_New():
    return itkNaryAddImageFilterIUS3IUS3_Superclass.New()

class itkNaryAddImageFilterIUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkNaryAddImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< unsigned short,unsigned short > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< unsigned short,unsigned short > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUS3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIUS3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkNaryAddImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUS3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUS3IUS3_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Superclass_swigregister(itkNaryAddImageFilterIUS3IUS3_Superclass)

def itkNaryAddImageFilterIUS4IUS4_Superclass_New():
    return itkNaryAddImageFilterIUS4IUS4_Superclass.New()

class itkNaryAddImageFilterIUS4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4IUS4):
    r"""Proxy of C++ itkNaryAddImageFilterIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4_Superclass_Clone(self)

    def GetFunctor(self):
        r"""GetFunctor(self) -> itk::Functor::Add1< unsigned short,unsigned short > &"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4_Superclass_GetFunctor(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Add1< unsigned short,unsigned short > &

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4_Superclass_SetFunctor(self, functor)
    SameDimensionCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4_Superclass_SameDimensionCheck
    
    OutputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4_Superclass_OutputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUS4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIUS4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUS4IUS4_Superclass

        Create a new object of the class itkNaryAddImageFilterIUS4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUS4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUS4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUS4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUS4IUS4_Superclass in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4_Superclass_swigregister(itkNaryAddImageFilterIUS4IUS4_Superclass)

def itkNaryAddImageFilterID2ID2_New():
    return itkNaryAddImageFilterID2ID2.New()

class itkNaryAddImageFilterID2ID2(itkNaryAddImageFilterID2ID2_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterID2ID2_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterID2ID2_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterID2ID2

        Create a new object of the class itkNaryAddImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterID2ID2 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterID2ID2_swigregister(itkNaryAddImageFilterID2ID2)

def itkNaryAddImageFilterID3ID3_New():
    return itkNaryAddImageFilterID3ID3.New()

class itkNaryAddImageFilterID3ID3(itkNaryAddImageFilterID3ID3_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterID3ID3_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterID3ID3_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterID3ID3

        Create a new object of the class itkNaryAddImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterID3ID3 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterID3ID3_swigregister(itkNaryAddImageFilterID3ID3)

def itkNaryAddImageFilterID4ID4_New():
    return itkNaryAddImageFilterID4ID4.New()

class itkNaryAddImageFilterID4ID4(itkNaryAddImageFilterID4ID4_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterID4ID4_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterID4ID4_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterID4ID4

        Create a new object of the class itkNaryAddImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterID4ID4 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterID4ID4_swigregister(itkNaryAddImageFilterID4ID4)

def itkNaryAddImageFilterIF2IF2_New():
    return itkNaryAddImageFilterIF2IF2.New()

class itkNaryAddImageFilterIF2IF2(itkNaryAddImageFilterIF2IF2_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIF2IF2_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIF2IF2_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIF2IF2

        Create a new object of the class itkNaryAddImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIF2IF2 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF2IF2_swigregister(itkNaryAddImageFilterIF2IF2)

def itkNaryAddImageFilterIF3IF3_New():
    return itkNaryAddImageFilterIF3IF3.New()

class itkNaryAddImageFilterIF3IF3(itkNaryAddImageFilterIF3IF3_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIF3IF3_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIF3IF3_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIF3IF3

        Create a new object of the class itkNaryAddImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIF3IF3 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF3IF3_swigregister(itkNaryAddImageFilterIF3IF3)

def itkNaryAddImageFilterIF4IF4_New():
    return itkNaryAddImageFilterIF4IF4.New()

class itkNaryAddImageFilterIF4IF4(itkNaryAddImageFilterIF4IF4_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIF4IF4_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIF4IF4_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIF4IF4

        Create a new object of the class itkNaryAddImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIF4IF4 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIF4IF4_swigregister(itkNaryAddImageFilterIF4IF4)

def itkNaryAddImageFilterISS2ISS2_New():
    return itkNaryAddImageFilterISS2ISS2.New()

class itkNaryAddImageFilterISS2ISS2(itkNaryAddImageFilterISS2ISS2_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterISS2ISS2_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterISS2ISS2_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterISS2ISS2

        Create a new object of the class itkNaryAddImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterISS2ISS2 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS2ISS2_swigregister(itkNaryAddImageFilterISS2ISS2)

def itkNaryAddImageFilterISS3ISS3_New():
    return itkNaryAddImageFilterISS3ISS3.New()

class itkNaryAddImageFilterISS3ISS3(itkNaryAddImageFilterISS3ISS3_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterISS3ISS3_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterISS3ISS3_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterISS3ISS3

        Create a new object of the class itkNaryAddImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterISS3ISS3 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS3ISS3_swigregister(itkNaryAddImageFilterISS3ISS3)

def itkNaryAddImageFilterISS4ISS4_New():
    return itkNaryAddImageFilterISS4ISS4.New()

class itkNaryAddImageFilterISS4ISS4(itkNaryAddImageFilterISS4ISS4_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterISS4ISS4_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterISS4ISS4_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterISS4ISS4

        Create a new object of the class itkNaryAddImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterISS4ISS4 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterISS4ISS4_swigregister(itkNaryAddImageFilterISS4ISS4)

def itkNaryAddImageFilterIUC2IUC2_New():
    return itkNaryAddImageFilterIUC2IUC2.New()

class itkNaryAddImageFilterIUC2IUC2(itkNaryAddImageFilterIUC2IUC2_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIUC2IUC2_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIUC2IUC2_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUC2IUC2

        Create a new object of the class itkNaryAddImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUC2IUC2 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC2IUC2_swigregister(itkNaryAddImageFilterIUC2IUC2)

def itkNaryAddImageFilterIUC3IUC3_New():
    return itkNaryAddImageFilterIUC3IUC3.New()

class itkNaryAddImageFilterIUC3IUC3(itkNaryAddImageFilterIUC3IUC3_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIUC3IUC3_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIUC3IUC3_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUC3IUC3

        Create a new object of the class itkNaryAddImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUC3IUC3 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC3IUC3_swigregister(itkNaryAddImageFilterIUC3IUC3)

def itkNaryAddImageFilterIUC4IUC4_New():
    return itkNaryAddImageFilterIUC4IUC4.New()

class itkNaryAddImageFilterIUC4IUC4(itkNaryAddImageFilterIUC4IUC4_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIUC4IUC4_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIUC4IUC4_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUC4IUC4

        Create a new object of the class itkNaryAddImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUC4IUC4 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUC4IUC4_swigregister(itkNaryAddImageFilterIUC4IUC4)

def itkNaryAddImageFilterIUS2IUS2_New():
    return itkNaryAddImageFilterIUS2IUS2.New()

class itkNaryAddImageFilterIUS2IUS2(itkNaryAddImageFilterIUS2IUS2_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIUS2IUS2_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIUS2IUS2_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUS2IUS2

        Create a new object of the class itkNaryAddImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUS2IUS2 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS2IUS2_swigregister(itkNaryAddImageFilterIUS2IUS2)

def itkNaryAddImageFilterIUS3IUS3_New():
    return itkNaryAddImageFilterIUS3IUS3.New()

class itkNaryAddImageFilterIUS3IUS3(itkNaryAddImageFilterIUS3IUS3_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIUS3IUS3_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIUS3IUS3_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUS3IUS3

        Create a new object of the class itkNaryAddImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUS3IUS3 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS3IUS3_swigregister(itkNaryAddImageFilterIUS3IUS3)

def itkNaryAddImageFilterIUS4IUS4_New():
    return itkNaryAddImageFilterIUS4IUS4.New()

class itkNaryAddImageFilterIUS4IUS4(itkNaryAddImageFilterIUS4IUS4_Superclass):
    r"""Proxy of C++ itkNaryAddImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNaryAddImageFilterIUS4IUS4_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNaryAddImageFilterIUS4IUS4_Pointer"""
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4_Clone(self)
    InputConvertibleToOutputCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4_InputConvertibleToOutputCheck
    
    InputHasZeroCheck = _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4_InputHasZeroCheck
    
    __swig_destroy__ = _itkNaryAddImageFilterPython.delete_itkNaryAddImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNaryAddImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNaryAddImageFilterIUS4IUS4

        Create a new object of the class itkNaryAddImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNaryAddImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNaryAddImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNaryAddImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNaryAddImageFilterIUS4IUS4 in _itkNaryAddImageFilterPython:
_itkNaryAddImageFilterPython.itkNaryAddImageFilterIUS4IUS4_swigregister(itkNaryAddImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def nary_add_image_filter(*args: itkt.ImageLike,  functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for NaryAddImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.NaryAddImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def nary_add_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.NaryAddImageFilter
    nary_add_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    nary_add_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def nary_functor_image_filter(*args: itkt.ImageLike,  functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for NaryFunctorImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.NaryFunctorImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def nary_functor_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.NaryFunctorImageFilter
    nary_functor_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    nary_functor_image_filter.__doc__ = filter_object.__doc__



