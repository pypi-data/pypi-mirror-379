# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkWeightedAddImageFilterPython
else:
    import _itkWeightedAddImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkBinaryGeneratorImageFilterPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkWeightedAddImageFilterID2ID2ID2_New():
    return itkWeightedAddImageFilterID2ID2ID2.New()

class itkWeightedAddImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""Proxy of C++ itkWeightedAddImageFilterID2ID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterID2ID2ID2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterID2ID2ID2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterID2ID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterID2ID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterID2ID2ID2

        Create a new object of the class itkWeightedAddImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterID2ID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterID2ID2ID2 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_swigregister(itkWeightedAddImageFilterID2ID2ID2)

def itkWeightedAddImageFilterID3ID3ID3_New():
    return itkWeightedAddImageFilterID3ID3ID3.New()

class itkWeightedAddImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""Proxy of C++ itkWeightedAddImageFilterID3ID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterID3ID3ID3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterID3ID3ID3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterID3ID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterID3ID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterID3ID3ID3

        Create a new object of the class itkWeightedAddImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterID3ID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterID3ID3ID3 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_swigregister(itkWeightedAddImageFilterID3ID3ID3)

def itkWeightedAddImageFilterID4ID4ID4_New():
    return itkWeightedAddImageFilterID4ID4ID4.New()

class itkWeightedAddImageFilterID4ID4ID4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID4ID4ID4):
    r"""Proxy of C++ itkWeightedAddImageFilterID4ID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterID4ID4ID4_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID4ID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterID4ID4ID4_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID4ID4ID4_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID4ID4ID4_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID4ID4ID4_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID4ID4ID4_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID4ID4ID4_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID4ID4ID4_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterID4ID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterID4ID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID4ID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterID4ID4ID4

        Create a new object of the class itkWeightedAddImageFilterID4ID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterID4ID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterID4ID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterID4ID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterID4ID4ID4 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID4ID4ID4_swigregister(itkWeightedAddImageFilterID4ID4ID4)

def itkWeightedAddImageFilterIF2IF2IF2_New():
    return itkWeightedAddImageFilterIF2IF2IF2.New()

class itkWeightedAddImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""Proxy of C++ itkWeightedAddImageFilterIF2IF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterIF2IF2IF2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterIF2IF2IF2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIF2IF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterIF2IF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIF2IF2IF2

        Create a new object of the class itkWeightedAddImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterIF2IF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterIF2IF2IF2 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_swigregister(itkWeightedAddImageFilterIF2IF2IF2)

def itkWeightedAddImageFilterIF3IF3IF3_New():
    return itkWeightedAddImageFilterIF3IF3IF3.New()

class itkWeightedAddImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""Proxy of C++ itkWeightedAddImageFilterIF3IF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterIF3IF3IF3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterIF3IF3IF3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIF3IF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterIF3IF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIF3IF3IF3

        Create a new object of the class itkWeightedAddImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterIF3IF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterIF3IF3IF3 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_swigregister(itkWeightedAddImageFilterIF3IF3IF3)

def itkWeightedAddImageFilterIF4IF4IF4_New():
    return itkWeightedAddImageFilterIF4IF4IF4.New()

class itkWeightedAddImageFilterIF4IF4IF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF4IF4IF4):
    r"""Proxy of C++ itkWeightedAddImageFilterIF4IF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterIF4IF4IF4_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF4IF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterIF4IF4IF4_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF4IF4IF4_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF4IF4IF4_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF4IF4IF4_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF4IF4IF4_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF4IF4IF4_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF4IF4IF4_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIF4IF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterIF4IF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF4IF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIF4IF4IF4

        Create a new object of the class itkWeightedAddImageFilterIF4IF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIF4IF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIF4IF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterIF4IF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterIF4IF4IF4 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF4IF4IF4_swigregister(itkWeightedAddImageFilterIF4IF4IF4)

def itkWeightedAddImageFilterISS2ISS2ISS2_New():
    return itkWeightedAddImageFilterISS2ISS2ISS2.New()

class itkWeightedAddImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""Proxy of C++ itkWeightedAddImageFilterISS2ISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterISS2ISS2ISS2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterISS2ISS2ISS2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterISS2ISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterISS2ISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterISS2ISS2ISS2

        Create a new object of the class itkWeightedAddImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterISS2ISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterISS2ISS2ISS2 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_swigregister(itkWeightedAddImageFilterISS2ISS2ISS2)

def itkWeightedAddImageFilterISS3ISS3ISS3_New():
    return itkWeightedAddImageFilterISS3ISS3ISS3.New()

class itkWeightedAddImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""Proxy of C++ itkWeightedAddImageFilterISS3ISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterISS3ISS3ISS3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterISS3ISS3ISS3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterISS3ISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterISS3ISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterISS3ISS3ISS3

        Create a new object of the class itkWeightedAddImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterISS3ISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterISS3ISS3ISS3 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_swigregister(itkWeightedAddImageFilterISS3ISS3ISS3)

def itkWeightedAddImageFilterISS4ISS4ISS4_New():
    return itkWeightedAddImageFilterISS4ISS4ISS4.New()

class itkWeightedAddImageFilterISS4ISS4ISS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS4ISS4ISS4):
    r"""Proxy of C++ itkWeightedAddImageFilterISS4ISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterISS4ISS4ISS4_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS4ISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterISS4ISS4ISS4_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS4ISS4ISS4_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS4ISS4ISS4_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS4ISS4ISS4_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS4ISS4ISS4_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS4ISS4ISS4_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS4ISS4ISS4_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterISS4ISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterISS4ISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS4ISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterISS4ISS4ISS4

        Create a new object of the class itkWeightedAddImageFilterISS4ISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterISS4ISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterISS4ISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterISS4ISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterISS4ISS4ISS4 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS4ISS4ISS4_swigregister(itkWeightedAddImageFilterISS4ISS4ISS4)

def itkWeightedAddImageFilterIUC2IUC2IUC2_New():
    return itkWeightedAddImageFilterIUC2IUC2IUC2.New()

class itkWeightedAddImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""Proxy of C++ itkWeightedAddImageFilterIUC2IUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIUC2IUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterIUC2IUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIUC2IUC2IUC2

        Create a new object of the class itkWeightedAddImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterIUC2IUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterIUC2IUC2IUC2 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_swigregister(itkWeightedAddImageFilterIUC2IUC2IUC2)

def itkWeightedAddImageFilterIUC3IUC3IUC3_New():
    return itkWeightedAddImageFilterIUC3IUC3IUC3.New()

class itkWeightedAddImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""Proxy of C++ itkWeightedAddImageFilterIUC3IUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIUC3IUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterIUC3IUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIUC3IUC3IUC3

        Create a new object of the class itkWeightedAddImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterIUC3IUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterIUC3IUC3IUC3 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_swigregister(itkWeightedAddImageFilterIUC3IUC3IUC3)

def itkWeightedAddImageFilterIUC4IUC4IUC4_New():
    return itkWeightedAddImageFilterIUC4IUC4IUC4.New()

class itkWeightedAddImageFilterIUC4IUC4IUC4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC4IUC4IUC4):
    r"""Proxy of C++ itkWeightedAddImageFilterIUC4IUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC4IUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC4IUC4IUC4_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC4IUC4IUC4_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC4IUC4IUC4_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC4IUC4IUC4_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC4IUC4IUC4_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC4IUC4IUC4_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIUC4IUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterIUC4IUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC4IUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIUC4IUC4IUC4

        Create a new object of the class itkWeightedAddImageFilterIUC4IUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIUC4IUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIUC4IUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterIUC4IUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterIUC4IUC4IUC4 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC4IUC4IUC4_swigregister(itkWeightedAddImageFilterIUC4IUC4IUC4)

def itkWeightedAddImageFilterIUS2IUS2IUS2_New():
    return itkWeightedAddImageFilterIUS2IUS2IUS2.New()

class itkWeightedAddImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""Proxy of C++ itkWeightedAddImageFilterIUS2IUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIUS2IUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterIUS2IUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIUS2IUS2IUS2

        Create a new object of the class itkWeightedAddImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterIUS2IUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterIUS2IUS2IUS2 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_swigregister(itkWeightedAddImageFilterIUS2IUS2IUS2)

def itkWeightedAddImageFilterIUS3IUS3IUS3_New():
    return itkWeightedAddImageFilterIUS3IUS3IUS3.New()

class itkWeightedAddImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""Proxy of C++ itkWeightedAddImageFilterIUS3IUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIUS3IUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterIUS3IUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIUS3IUS3IUS3

        Create a new object of the class itkWeightedAddImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterIUS3IUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterIUS3IUS3IUS3 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_swigregister(itkWeightedAddImageFilterIUS3IUS3IUS3)

def itkWeightedAddImageFilterIUS4IUS4IUS4_New():
    return itkWeightedAddImageFilterIUS4IUS4IUS4.New()

class itkWeightedAddImageFilterIUS4IUS4IUS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS4IUS4IUS4):
    r"""Proxy of C++ itkWeightedAddImageFilterIUS4IUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWeightedAddImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS4IUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWeightedAddImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS4IUS4IUS4_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS4IUS4IUS4_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS4IUS4IUS4_GetAlpha(self)
    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS4IUS4IUS4_Input1HasNumericTraitsCheck
    
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS4IUS4IUS4_Input1RealTypeMultiplyCheck
    
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS4IUS4IUS4_Input2RealTypeMultiplyCheck
    
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIUS4IUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWeightedAddImageFilterIUS4IUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS4IUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIUS4IUS4IUS4

        Create a new object of the class itkWeightedAddImageFilterIUS4IUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIUS4IUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIUS4IUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWeightedAddImageFilterIUS4IUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWeightedAddImageFilterIUS4IUS4IUS4 in _itkWeightedAddImageFilterPython:
_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS4IUS4IUS4_swigregister(itkWeightedAddImageFilterIUS4IUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def weighted_add_image_filter(*args: itkt.ImageLike,  alpha: float=..., constant1: float=..., constant2: float=..., constant: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for WeightedAddImageFilter"""
    import itk

    kwarg_typehints = { 'alpha':alpha,'constant1':constant1,'constant2':constant2,'constant':constant }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.WeightedAddImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def weighted_add_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.WeightedAddImageFilter
    weighted_add_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    weighted_add_image_filter.__doc__ = filter_object.__doc__



