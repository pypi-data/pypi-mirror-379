# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKSpatialObjectsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDTITubeSpatialObjectPointPython
else:
    import _itkDTITubeSpatialObjectPointPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkTubeSpatialObjectPointPython
import itk.itkSpatialObjectPointPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkSpatialObjectBasePython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkAffineTransformPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
class vectoritkDTITubeSpatialObjectPoint3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkDTITubeSpatialObjectPoint3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkDTITubeSpatialObjectPoint3 >::size_type"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkDTITubeSpatialObjectPoint3

        Parameters
        ----------
        i: std::vector< itkDTITubeSpatialObjectPoint3 >::difference_type
        j: std::vector< itkDTITubeSpatialObjectPoint3 >::difference_type

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkDTITubeSpatialObjectPoint3 >::difference_type
        j: std::vector< itkDTITubeSpatialObjectPoint3 >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkDTITubeSpatialObjectPoint3 >::difference_type
        j: std::vector< itkDTITubeSpatialObjectPoint3 >::difference_type
        v: std::vector< itkDTITubeSpatialObjectPoint3,std::allocator< itkDTITubeSpatialObjectPoint3 > > const &

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkDTITubeSpatialObjectPoint3 >::difference_type
        j: std::vector< itkDTITubeSpatialObjectPoint3 >::difference_type

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkDTITubeSpatialObjectPoint3 >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkDTITubeSpatialObjectPoint3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> itkDTITubeSpatialObjectPoint3

        Parameters
        ----------
        i: std::vector< itkDTITubeSpatialObjectPoint3 >::difference_type

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkDTITubeSpatialObjectPoint3,std::allocator< itkDTITubeSpatialObjectPoint3 > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkDTITubeSpatialObjectPoint3 >::difference_type
        x: std::vector< itkDTITubeSpatialObjectPoint3 >::value_type const &

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> itkDTITubeSpatialObjectPoint3"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkDTITubeSpatialObjectPoint3 >::value_type const &

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkDTITubeSpatialObjectPoint3 >::size_type"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkDTITubeSpatialObjectPoint3 > &

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkDTITubeSpatialObjectPoint3 >::iterator"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkDTITubeSpatialObjectPoint3 >::iterator"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkDTITubeSpatialObjectPoint3 >::reverse_iterator"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkDTITubeSpatialObjectPoint3 >::reverse_iterator"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkDTITubeSpatialObjectPoint3 >::allocator_type"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkDTITubeSpatialObjectPoint3 >::iterator

        Parameters
        ----------
        pos: std::vector< itkDTITubeSpatialObjectPoint3 >::iterator

        erase(self, first, last) -> std::vector< itkDTITubeSpatialObjectPoint3 >::iterator

        Parameters
        ----------
        first: std::vector< itkDTITubeSpatialObjectPoint3 >::iterator
        last: std::vector< itkDTITubeSpatialObjectPoint3 >::iterator

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkDTITubeSpatialObjectPoint3
        __init__(self, other) -> vectoritkDTITubeSpatialObjectPoint3

        Parameters
        ----------
        other: std::vector< itkDTITubeSpatialObjectPoint3 > const &

        __init__(self, size) -> vectoritkDTITubeSpatialObjectPoint3

        Parameters
        ----------
        size: std::vector< itkDTITubeSpatialObjectPoint3 >::size_type

        __init__(self, size, value) -> vectoritkDTITubeSpatialObjectPoint3

        Parameters
        ----------
        size: std::vector< itkDTITubeSpatialObjectPoint3 >::size_type
        value: std::vector< itkDTITubeSpatialObjectPoint3 >::value_type const &

        """
        _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_swiginit(self, _itkDTITubeSpatialObjectPointPython.new_vectoritkDTITubeSpatialObjectPoint3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkDTITubeSpatialObjectPoint3 >::value_type const &

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_push_back(self, x)

    def front(self):
        r"""front(self) -> itkDTITubeSpatialObjectPoint3"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_front(self)

    def back(self):
        r"""back(self) -> itkDTITubeSpatialObjectPoint3"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkDTITubeSpatialObjectPoint3 >::size_type
        x: std::vector< itkDTITubeSpatialObjectPoint3 >::value_type const &

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkDTITubeSpatialObjectPoint3 >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkDTITubeSpatialObjectPoint3 >::size_type
        x: std::vector< itkDTITubeSpatialObjectPoint3 >::value_type const &

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkDTITubeSpatialObjectPoint3 >::iterator

        Parameters
        ----------
        pos: std::vector< itkDTITubeSpatialObjectPoint3 >::iterator
        x: std::vector< itkDTITubeSpatialObjectPoint3 >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkDTITubeSpatialObjectPoint3 >::iterator
        n: std::vector< itkDTITubeSpatialObjectPoint3 >::size_type
        x: std::vector< itkDTITubeSpatialObjectPoint3 >::value_type const &

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkDTITubeSpatialObjectPoint3 >::size_type

        """
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkDTITubeSpatialObjectPoint3 >::size_type"""
        return _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_capacity(self)
    __swig_destroy__ = _itkDTITubeSpatialObjectPointPython.delete_vectoritkDTITubeSpatialObjectPoint3

# Register vectoritkDTITubeSpatialObjectPoint3 in _itkDTITubeSpatialObjectPointPython:
_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_swigregister(vectoritkDTITubeSpatialObjectPoint3)
class itkDTITubeSpatialObjectPoint3(itk.itkTubeSpatialObjectPointPython.itkTubeSpatialObjectPoint3):
    r"""Proxy of C++ itkDTITubeSpatialObjectPoint3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, arg0) -> itkDTITubeSpatialObjectPoint3

        Parameters
        ----------
        arg0: itkDTITubeSpatialObjectPoint3 const &

        __init__(self) -> itkDTITubeSpatialObjectPoint3
        """
        _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_swiginit(self, _itkDTITubeSpatialObjectPointPython.new_itkDTITubeSpatialObjectPoint3(*args))
    __swig_destroy__ = _itkDTITubeSpatialObjectPointPython.delete_itkDTITubeSpatialObjectPoint3

    def SetTensorMatrix(self, *args):
        r"""
        SetTensorMatrix(self, matrix)

        Parameters
        ----------
        matrix: itkDiffusionTensor3DD const &

        SetTensorMatrix(self, matrix)

        Parameters
        ----------
        matrix: itkDiffusionTensor3DF const &

        SetTensorMatrix(self, matrix)

        Parameters
        ----------
        matrix: float const *

        """
        return _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_SetTensorMatrix(self, *args)

    def GetTensorMatrix(self):
        r"""GetTensorMatrix(self) -> float const *"""
        return _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_GetTensorMatrix(self)

    def AddField(self, *args):
        r"""
        AddField(self, name, value)

        Parameters
        ----------
        name: char const *
        value: float

        AddField(self, name, value)

        Parameters
        ----------
        name: enum itkDTITubeSpatialObjectPointEnums::DTITubeSpatialObjectPointField
        value: float

        """
        return _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_AddField(self, *args)

    def SetField(self, *args):
        r"""
        SetField(self, name, value)

        Parameters
        ----------
        name: enum itkDTITubeSpatialObjectPointEnums::DTITubeSpatialObjectPointField
        value: float

        SetField(self, name, value)

        Parameters
        ----------
        name: char const *
        value: float

        """
        return _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_SetField(self, *args)

    def GetFields(self):
        r"""GetFields(self) -> std::vector< std::pair< std::string,float >,std::allocator< std::pair< std::string,float > > > const &"""
        return _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_GetFields(self)

    def GetField(self, *args):
        r"""
        GetField(self, name) -> float

        Parameters
        ----------
        name: char const *

        GetField(self, name) -> float

        Parameters
        ----------
        name: enum itkDTITubeSpatialObjectPointEnums::DTITubeSpatialObjectPointField

        """
        return _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_GetField(self, *args)

# Register itkDTITubeSpatialObjectPoint3 in _itkDTITubeSpatialObjectPointPython:
_itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_swigregister(itkDTITubeSpatialObjectPoint3)
class itkDTITubeSpatialObjectPointEnums(object):
    r"""Proxy of C++ itkDTITubeSpatialObjectPointEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DTITubeSpatialObjectPointField_FA = _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPointEnums_DTITubeSpatialObjectPointField_FA
    
    DTITubeSpatialObjectPointField_ADC = _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPointEnums_DTITubeSpatialObjectPointField_ADC
    
    DTITubeSpatialObjectPointField_GA = _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPointEnums_DTITubeSpatialObjectPointField_GA
    

    def __init__(self, *args):
        r"""
        __init__(self) -> itkDTITubeSpatialObjectPointEnums
        __init__(self, arg0) -> itkDTITubeSpatialObjectPointEnums

        Parameters
        ----------
        arg0: itkDTITubeSpatialObjectPointEnums const &

        """
        _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPointEnums_swiginit(self, _itkDTITubeSpatialObjectPointPython.new_itkDTITubeSpatialObjectPointEnums(*args))
    __swig_destroy__ = _itkDTITubeSpatialObjectPointPython.delete_itkDTITubeSpatialObjectPointEnums

# Register itkDTITubeSpatialObjectPointEnums in _itkDTITubeSpatialObjectPointPython:
_itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPointEnums_swigregister(itkDTITubeSpatialObjectPointEnums)

