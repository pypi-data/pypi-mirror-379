# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKSmoothingPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRecursiveGaussianImageFilterPython
else:
    import _itkRecursiveGaussianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkRecursiveSeparableImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.pyBasePython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterAPython
class itkRecursiveGaussianImageFilterEnums(object):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GaussianOrder_ZeroOrder = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_GaussianOrder_ZeroOrder
    
    GaussianOrder_FirstOrder = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_GaussianOrder_FirstOrder
    
    GaussianOrder_SecondOrder = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_GaussianOrder_SecondOrder
    

    def __init__(self, *args):
        r"""
        __init__(self) -> itkRecursiveGaussianImageFilterEnums
        __init__(self, arg0) -> itkRecursiveGaussianImageFilterEnums

        Parameters
        ----------
        arg0: itkRecursiveGaussianImageFilterEnums const &

        """
        _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_swiginit(self, _itkRecursiveGaussianImageFilterPython.new_itkRecursiveGaussianImageFilterEnums(*args))
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterEnums

# Register itkRecursiveGaussianImageFilterEnums in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_swigregister(itkRecursiveGaussianImageFilterEnums)

def itkRecursiveGaussianImageFilterID2ID2_New():
    return itkRecursiveGaussianImageFilterID2ID2.New()

class itkRecursiveGaussianImageFilterID2ID2(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID2ID2):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterID2ID2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterID2ID2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterID2ID2

        Create a new object of the class itkRecursiveGaussianImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterID2ID2 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_swigregister(itkRecursiveGaussianImageFilterID2ID2)

def itkRecursiveGaussianImageFilterID3ID3_New():
    return itkRecursiveGaussianImageFilterID3ID3.New()

class itkRecursiveGaussianImageFilterID3ID3(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID3ID3):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterID3ID3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterID3ID3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterID3ID3

        Create a new object of the class itkRecursiveGaussianImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterID3ID3 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_swigregister(itkRecursiveGaussianImageFilterID3ID3)

def itkRecursiveGaussianImageFilterID4ID4_New():
    return itkRecursiveGaussianImageFilterID4ID4.New()

class itkRecursiveGaussianImageFilterID4ID4(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID4ID4):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterID4ID4_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterID4ID4_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterID4ID4

        Create a new object of the class itkRecursiveGaussianImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterID4ID4 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID4ID4_swigregister(itkRecursiveGaussianImageFilterID4ID4)

def itkRecursiveGaussianImageFilterIF2IF2_New():
    return itkRecursiveGaussianImageFilterIF2IF2.New()

class itkRecursiveGaussianImageFilterIF2IF2(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF2IF2):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterIF2IF2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterIF2IF2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIF2IF2

        Create a new object of the class itkRecursiveGaussianImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterIF2IF2 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_swigregister(itkRecursiveGaussianImageFilterIF2IF2)

def itkRecursiveGaussianImageFilterIF3IF3_New():
    return itkRecursiveGaussianImageFilterIF3IF3.New()

class itkRecursiveGaussianImageFilterIF3IF3(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF3IF3):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterIF3IF3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterIF3IF3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIF3IF3

        Create a new object of the class itkRecursiveGaussianImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterIF3IF3 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_swigregister(itkRecursiveGaussianImageFilterIF3IF3)

def itkRecursiveGaussianImageFilterIF4IF4_New():
    return itkRecursiveGaussianImageFilterIF4IF4.New()

class itkRecursiveGaussianImageFilterIF4IF4(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF4IF4):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterIF4IF4_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterIF4IF4_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIF4IF4

        Create a new object of the class itkRecursiveGaussianImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterIF4IF4 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF4IF4_swigregister(itkRecursiveGaussianImageFilterIF4IF4)

def itkRecursiveGaussianImageFilterISS2ISS2_New():
    return itkRecursiveGaussianImageFilterISS2ISS2.New()

class itkRecursiveGaussianImageFilterISS2ISS2(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS2ISS2):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterISS2ISS2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterISS2ISS2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterISS2ISS2

        Create a new object of the class itkRecursiveGaussianImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterISS2ISS2 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_swigregister(itkRecursiveGaussianImageFilterISS2ISS2)

def itkRecursiveGaussianImageFilterISS3ISS3_New():
    return itkRecursiveGaussianImageFilterISS3ISS3.New()

class itkRecursiveGaussianImageFilterISS3ISS3(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS3ISS3):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterISS3ISS3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterISS3ISS3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterISS3ISS3

        Create a new object of the class itkRecursiveGaussianImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterISS3ISS3 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_swigregister(itkRecursiveGaussianImageFilterISS3ISS3)

def itkRecursiveGaussianImageFilterISS4ISS4_New():
    return itkRecursiveGaussianImageFilterISS4ISS4.New()

class itkRecursiveGaussianImageFilterISS4ISS4(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS4ISS4):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterISS4ISS4_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterISS4ISS4_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterISS4ISS4

        Create a new object of the class itkRecursiveGaussianImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterISS4ISS4 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS4ISS4_swigregister(itkRecursiveGaussianImageFilterISS4ISS4)

def itkRecursiveGaussianImageFilterIUC2IUC2_New():
    return itkRecursiveGaussianImageFilterIUC2IUC2.New()

class itkRecursiveGaussianImageFilterIUC2IUC2(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC2IUC2):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterIUC2IUC2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterIUC2IUC2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIUC2IUC2

        Create a new object of the class itkRecursiveGaussianImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterIUC2IUC2 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_swigregister(itkRecursiveGaussianImageFilterIUC2IUC2)

def itkRecursiveGaussianImageFilterIUC3IUC3_New():
    return itkRecursiveGaussianImageFilterIUC3IUC3.New()

class itkRecursiveGaussianImageFilterIUC3IUC3(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC3IUC3):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterIUC3IUC3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterIUC3IUC3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIUC3IUC3

        Create a new object of the class itkRecursiveGaussianImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterIUC3IUC3 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_swigregister(itkRecursiveGaussianImageFilterIUC3IUC3)

def itkRecursiveGaussianImageFilterIUC4IUC4_New():
    return itkRecursiveGaussianImageFilterIUC4IUC4.New()

class itkRecursiveGaussianImageFilterIUC4IUC4(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC4IUC4):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterIUC4IUC4_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterIUC4IUC4_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIUC4IUC4

        Create a new object of the class itkRecursiveGaussianImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterIUC4IUC4 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC4IUC4_swigregister(itkRecursiveGaussianImageFilterIUC4IUC4)

def itkRecursiveGaussianImageFilterIUS2IUS2_New():
    return itkRecursiveGaussianImageFilterIUS2IUS2.New()

class itkRecursiveGaussianImageFilterIUS2IUS2(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS2IUS2):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterIUS2IUS2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterIUS2IUS2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIUS2IUS2

        Create a new object of the class itkRecursiveGaussianImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterIUS2IUS2 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_swigregister(itkRecursiveGaussianImageFilterIUS2IUS2)

def itkRecursiveGaussianImageFilterIUS3IUS3_New():
    return itkRecursiveGaussianImageFilterIUS3IUS3.New()

class itkRecursiveGaussianImageFilterIUS3IUS3(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS3IUS3):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterIUS3IUS3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterIUS3IUS3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIUS3IUS3

        Create a new object of the class itkRecursiveGaussianImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterIUS3IUS3 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_swigregister(itkRecursiveGaussianImageFilterIUS3IUS3)

def itkRecursiveGaussianImageFilterIUS4IUS4_New():
    return itkRecursiveGaussianImageFilterIUS4IUS4.New()

class itkRecursiveGaussianImageFilterIUS4IUS4(itk.itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS4IUS4):
    r"""Proxy of C++ itkRecursiveGaussianImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveGaussianImageFilterIUS4IUS4_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveGaussianImageFilterIUS4IUS4_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_Clone(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_GetSigma(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_SetSigma(self, _arg)

    def SetNormalizeAcrossScale(self, _arg):
        r"""
        SetNormalizeAcrossScale(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_SetNormalizeAcrossScale(self, _arg)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_NormalizeAcrossScaleOff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkRecursiveGaussianImageFilterEnums::GaussianOrder

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_GetOrder(self)

    def SetZeroOrder(self):
        r"""SetZeroOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_SetZeroOrder(self)

    def SetFirstOrder(self):
        r"""SetFirstOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_SetFirstOrder(self)

    def SetSecondOrder(self):
        r"""SetSecondOrder(self)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_SetSecondOrder(self)
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveGaussianImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIUS4IUS4

        Create a new object of the class itkRecursiveGaussianImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveGaussianImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveGaussianImageFilterIUS4IUS4 in _itkRecursiveGaussianImageFilterPython:
_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS4IUS4_swigregister(itkRecursiveGaussianImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def recursive_gaussian_image_filter(*args: itkt.ImageLike,  sigma: float=..., normalize_across_scale: bool=..., order=..., direction: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for RecursiveGaussianImageFilter"""
    import itk

    kwarg_typehints = { 'sigma':sigma,'normalize_across_scale':normalize_across_scale,'order':order,'direction':direction }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.RecursiveGaussianImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def recursive_gaussian_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKSmoothing.RecursiveGaussianImageFilter
    recursive_gaussian_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    recursive_gaussian_image_filter.__doc__ = filter_object.__doc__



