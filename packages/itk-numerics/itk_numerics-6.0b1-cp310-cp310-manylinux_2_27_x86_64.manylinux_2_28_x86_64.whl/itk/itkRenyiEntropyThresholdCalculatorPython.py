# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKThresholdingPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRenyiEntropyThresholdCalculatorPython
else:
    import _itkRenyiEntropyThresholdCalculatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkHistogramPython
import itk.itkSamplePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkArrayPython
import itk.itkHistogramThresholdCalculatorPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython

def itkRenyiEntropyThresholdCalculatorHDD_New():
    return itkRenyiEntropyThresholdCalculatorHDD.New()

class itkRenyiEntropyThresholdCalculatorHDD(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDD):
    r"""Proxy of C++ itkRenyiEntropyThresholdCalculatorHDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRenyiEntropyThresholdCalculatorHDD_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRenyiEntropyThresholdCalculatorHDD_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDD_Clone(self)
    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHDD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRenyiEntropyThresholdCalculatorHDD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHDD

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHDD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHDD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRenyiEntropyThresholdCalculatorHDD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRenyiEntropyThresholdCalculatorHDD in _itkRenyiEntropyThresholdCalculatorPython:
_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDD_swigregister(itkRenyiEntropyThresholdCalculatorHDD)

def itkRenyiEntropyThresholdCalculatorHDF_New():
    return itkRenyiEntropyThresholdCalculatorHDF.New()

class itkRenyiEntropyThresholdCalculatorHDF(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF):
    r"""Proxy of C++ itkRenyiEntropyThresholdCalculatorHDF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRenyiEntropyThresholdCalculatorHDF_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRenyiEntropyThresholdCalculatorHDF_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDF_Clone(self)
    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHDF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRenyiEntropyThresholdCalculatorHDF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHDF

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHDF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHDF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRenyiEntropyThresholdCalculatorHDF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRenyiEntropyThresholdCalculatorHDF in _itkRenyiEntropyThresholdCalculatorPython:
_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDF_swigregister(itkRenyiEntropyThresholdCalculatorHDF)

def itkRenyiEntropyThresholdCalculatorHDSS_New():
    return itkRenyiEntropyThresholdCalculatorHDSS.New()

class itkRenyiEntropyThresholdCalculatorHDSS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS):
    r"""Proxy of C++ itkRenyiEntropyThresholdCalculatorHDSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRenyiEntropyThresholdCalculatorHDSS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRenyiEntropyThresholdCalculatorHDSS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDSS_Clone(self)
    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHDSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRenyiEntropyThresholdCalculatorHDSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHDSS

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHDSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHDSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHDSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRenyiEntropyThresholdCalculatorHDSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRenyiEntropyThresholdCalculatorHDSS in _itkRenyiEntropyThresholdCalculatorPython:
_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDSS_swigregister(itkRenyiEntropyThresholdCalculatorHDSS)

def itkRenyiEntropyThresholdCalculatorHDUC_New():
    return itkRenyiEntropyThresholdCalculatorHDUC.New()

class itkRenyiEntropyThresholdCalculatorHDUC(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC):
    r"""Proxy of C++ itkRenyiEntropyThresholdCalculatorHDUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRenyiEntropyThresholdCalculatorHDUC_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRenyiEntropyThresholdCalculatorHDUC_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUC_Clone(self)
    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHDUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRenyiEntropyThresholdCalculatorHDUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHDUC

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHDUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHDUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHDUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRenyiEntropyThresholdCalculatorHDUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRenyiEntropyThresholdCalculatorHDUC in _itkRenyiEntropyThresholdCalculatorPython:
_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUC_swigregister(itkRenyiEntropyThresholdCalculatorHDUC)

def itkRenyiEntropyThresholdCalculatorHDUS_New():
    return itkRenyiEntropyThresholdCalculatorHDUS.New()

class itkRenyiEntropyThresholdCalculatorHDUS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS):
    r"""Proxy of C++ itkRenyiEntropyThresholdCalculatorHDUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRenyiEntropyThresholdCalculatorHDUS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRenyiEntropyThresholdCalculatorHDUS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUS_Clone(self)
    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHDUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRenyiEntropyThresholdCalculatorHDUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHDUS

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHDUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHDUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHDUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRenyiEntropyThresholdCalculatorHDUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRenyiEntropyThresholdCalculatorHDUS in _itkRenyiEntropyThresholdCalculatorPython:
_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUS_swigregister(itkRenyiEntropyThresholdCalculatorHDUS)

def itkRenyiEntropyThresholdCalculatorHFD_New():
    return itkRenyiEntropyThresholdCalculatorHFD.New()

class itkRenyiEntropyThresholdCalculatorHFD(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFD):
    r"""Proxy of C++ itkRenyiEntropyThresholdCalculatorHFD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRenyiEntropyThresholdCalculatorHFD_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRenyiEntropyThresholdCalculatorHFD_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFD_Clone(self)
    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHFD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRenyiEntropyThresholdCalculatorHFD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHFD

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHFD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHFD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRenyiEntropyThresholdCalculatorHFD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRenyiEntropyThresholdCalculatorHFD in _itkRenyiEntropyThresholdCalculatorPython:
_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFD_swigregister(itkRenyiEntropyThresholdCalculatorHFD)

def itkRenyiEntropyThresholdCalculatorHFF_New():
    return itkRenyiEntropyThresholdCalculatorHFF.New()

class itkRenyiEntropyThresholdCalculatorHFF(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF):
    r"""Proxy of C++ itkRenyiEntropyThresholdCalculatorHFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRenyiEntropyThresholdCalculatorHFF_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRenyiEntropyThresholdCalculatorHFF_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFF_Clone(self)
    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHFF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRenyiEntropyThresholdCalculatorHFF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHFF

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRenyiEntropyThresholdCalculatorHFF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRenyiEntropyThresholdCalculatorHFF in _itkRenyiEntropyThresholdCalculatorPython:
_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFF_swigregister(itkRenyiEntropyThresholdCalculatorHFF)

def itkRenyiEntropyThresholdCalculatorHFSS_New():
    return itkRenyiEntropyThresholdCalculatorHFSS.New()

class itkRenyiEntropyThresholdCalculatorHFSS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS):
    r"""Proxy of C++ itkRenyiEntropyThresholdCalculatorHFSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRenyiEntropyThresholdCalculatorHFSS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRenyiEntropyThresholdCalculatorHFSS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFSS_Clone(self)
    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHFSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRenyiEntropyThresholdCalculatorHFSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHFSS

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHFSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHFSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHFSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRenyiEntropyThresholdCalculatorHFSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRenyiEntropyThresholdCalculatorHFSS in _itkRenyiEntropyThresholdCalculatorPython:
_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFSS_swigregister(itkRenyiEntropyThresholdCalculatorHFSS)

def itkRenyiEntropyThresholdCalculatorHFUC_New():
    return itkRenyiEntropyThresholdCalculatorHFUC.New()

class itkRenyiEntropyThresholdCalculatorHFUC(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC):
    r"""Proxy of C++ itkRenyiEntropyThresholdCalculatorHFUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRenyiEntropyThresholdCalculatorHFUC_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRenyiEntropyThresholdCalculatorHFUC_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUC_Clone(self)
    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHFUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRenyiEntropyThresholdCalculatorHFUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHFUC

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHFUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHFUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHFUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRenyiEntropyThresholdCalculatorHFUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRenyiEntropyThresholdCalculatorHFUC in _itkRenyiEntropyThresholdCalculatorPython:
_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUC_swigregister(itkRenyiEntropyThresholdCalculatorHFUC)

def itkRenyiEntropyThresholdCalculatorHFUS_New():
    return itkRenyiEntropyThresholdCalculatorHFUS.New()

class itkRenyiEntropyThresholdCalculatorHFUS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS):
    r"""Proxy of C++ itkRenyiEntropyThresholdCalculatorHFUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRenyiEntropyThresholdCalculatorHFUS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRenyiEntropyThresholdCalculatorHFUS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUS_Clone(self)
    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHFUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRenyiEntropyThresholdCalculatorHFUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHFUS

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHFUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHFUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHFUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRenyiEntropyThresholdCalculatorHFUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRenyiEntropyThresholdCalculatorHFUS in _itkRenyiEntropyThresholdCalculatorPython:
_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUS_swigregister(itkRenyiEntropyThresholdCalculatorHFUS)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def renyi_entropy_threshold_calculator(*args, **kwargs):
    """Functional interface for RenyiEntropyThresholdCalculator"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.RenyiEntropyThresholdCalculator.New(*args, **kwargs)

    return instance.__internal_call__()

def renyi_entropy_threshold_calculator_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKThresholding.RenyiEntropyThresholdCalculator
    renyi_entropy_threshold_calculator.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    renyi_entropy_threshold_calculator.__doc__ = filter_object.__doc__



