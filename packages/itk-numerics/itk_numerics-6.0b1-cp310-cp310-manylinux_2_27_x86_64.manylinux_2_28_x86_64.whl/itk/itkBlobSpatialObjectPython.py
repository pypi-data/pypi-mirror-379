# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKSpatialObjectsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBlobSpatialObjectPython
else:
    import _itkBlobSpatialObjectPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkPointBasedSpatialObjectPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkSpatialObjectPointPython
import itk.itkSpatialObjectBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkVariableLengthVectorPython
import itk.itkTransformBasePython
import itk.itkBoundingBoxPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkMapContainerPython

def itkBlobSpatialObject2_New():
    return itkBlobSpatialObject2.New()

class itkBlobSpatialObject2(itk.itkPointBasedSpatialObjectPython.itkPointBasedSpatialObject2):
    r"""Proxy of C++ itkBlobSpatialObject2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBlobSpatialObject2_Pointer"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBlobSpatialObject2_Pointer"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject2_Clone(self)
    __swig_destroy__ = _itkBlobSpatialObjectPython.delete_itkBlobSpatialObject2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBlobSpatialObject2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBlobSpatialObject2

        Create a new object of the class itkBlobSpatialObject2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlobSpatialObject2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlobSpatialObject2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlobSpatialObject2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlobSpatialObject2 in _itkBlobSpatialObjectPython:
_itkBlobSpatialObjectPython.itkBlobSpatialObject2_swigregister(itkBlobSpatialObject2)

def itkBlobSpatialObject3_New():
    return itkBlobSpatialObject3.New()

class itkBlobSpatialObject3(itk.itkPointBasedSpatialObjectPython.itkPointBasedSpatialObject3):
    r"""Proxy of C++ itkBlobSpatialObject3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBlobSpatialObject3_Pointer"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBlobSpatialObject3_Pointer"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject3_Clone(self)
    __swig_destroy__ = _itkBlobSpatialObjectPython.delete_itkBlobSpatialObject3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBlobSpatialObject3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBlobSpatialObject3

        Create a new object of the class itkBlobSpatialObject3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlobSpatialObject3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlobSpatialObject3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlobSpatialObject3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlobSpatialObject3 in _itkBlobSpatialObjectPython:
_itkBlobSpatialObjectPython.itkBlobSpatialObject3_swigregister(itkBlobSpatialObject3)

def itkBlobSpatialObject4_New():
    return itkBlobSpatialObject4.New()

class itkBlobSpatialObject4(itk.itkPointBasedSpatialObjectPython.itkPointBasedSpatialObject4):
    r"""Proxy of C++ itkBlobSpatialObject4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBlobSpatialObject4_Pointer"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBlobSpatialObject4_Pointer"""
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject4_Clone(self)
    __swig_destroy__ = _itkBlobSpatialObjectPython.delete_itkBlobSpatialObject4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBlobSpatialObject4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBlobSpatialObjectPython.itkBlobSpatialObject4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBlobSpatialObject4

        Create a new object of the class itkBlobSpatialObject4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlobSpatialObject4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlobSpatialObject4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlobSpatialObject4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlobSpatialObject4 in _itkBlobSpatialObjectPython:
_itkBlobSpatialObjectPython.itkBlobSpatialObject4_swigregister(itkBlobSpatialObject4)

