# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKSmoothingPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSmoothingRecursiveGaussianImageFilterPython
else:
    import _itkSmoothingRecursiveGaussianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageToImageFilterCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterAPython

def itkSmoothingRecursiveGaussianImageFilterID2ID2_New():
    return itkSmoothingRecursiveGaussianImageFilterID2ID2.New()

class itkSmoothingRecursiveGaussianImageFilterID2ID2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterID2ID2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterID2ID2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD2 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD2"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterID2ID2

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterID2ID2 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_swigregister(itkSmoothingRecursiveGaussianImageFilterID2ID2)

def itkSmoothingRecursiveGaussianImageFilterID3ID3_New():
    return itkSmoothingRecursiveGaussianImageFilterID3ID3.New()

class itkSmoothingRecursiveGaussianImageFilterID3ID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterID3ID3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterID3ID3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD3 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD3"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterID3ID3

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterID3ID3 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_swigregister(itkSmoothingRecursiveGaussianImageFilterID3ID3)

def itkSmoothingRecursiveGaussianImageFilterID4ID4_New():
    return itkSmoothingRecursiveGaussianImageFilterID4ID4.New()

class itkSmoothingRecursiveGaussianImageFilterID4ID4(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4ID4):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterID4ID4_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterID4ID4_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID4ID4_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD4 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID4ID4_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID4ID4_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD4"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID4ID4_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID4ID4_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID4ID4_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID4ID4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID4ID4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID4ID4_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterID4ID4

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterID4ID4 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID4ID4_swigregister(itkSmoothingRecursiveGaussianImageFilterID4ID4)

def itkSmoothingRecursiveGaussianImageFilterIF2IF2_New():
    return itkSmoothingRecursiveGaussianImageFilterIF2IF2.New()

class itkSmoothingRecursiveGaussianImageFilterIF2IF2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIF2IF2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterIF2IF2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD2 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD2"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIF2IF2

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterIF2IF2 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_swigregister(itkSmoothingRecursiveGaussianImageFilterIF2IF2)

def itkSmoothingRecursiveGaussianImageFilterIF3IF3_New():
    return itkSmoothingRecursiveGaussianImageFilterIF3IF3.New()

class itkSmoothingRecursiveGaussianImageFilterIF3IF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIF3IF3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterIF3IF3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD3 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD3"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIF3IF3

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterIF3IF3 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_swigregister(itkSmoothingRecursiveGaussianImageFilterIF3IF3)

def itkSmoothingRecursiveGaussianImageFilterIF4IF4_New():
    return itkSmoothingRecursiveGaussianImageFilterIF4IF4.New()

class itkSmoothingRecursiveGaussianImageFilterIF4IF4(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IF4):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIF4IF4_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterIF4IF4_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF4IF4_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD4 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF4IF4_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF4IF4_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD4"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF4IF4_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF4IF4_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF4IF4_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF4IF4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF4IF4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF4IF4_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIF4IF4

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterIF4IF4 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF4IF4_swigregister(itkSmoothingRecursiveGaussianImageFilterIF4IF4)

def itkSmoothingRecursiveGaussianImageFilterISS2ISS2_New():
    return itkSmoothingRecursiveGaussianImageFilterISS2ISS2.New()

class itkSmoothingRecursiveGaussianImageFilterISS2ISS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterISS2ISS2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterISS2ISS2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD2 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD2"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterISS2ISS2

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterISS2ISS2 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_swigregister(itkSmoothingRecursiveGaussianImageFilterISS2ISS2)

def itkSmoothingRecursiveGaussianImageFilterISS3ISS3_New():
    return itkSmoothingRecursiveGaussianImageFilterISS3ISS3.New()

class itkSmoothingRecursiveGaussianImageFilterISS3ISS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterISS3ISS3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterISS3ISS3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD3 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD3"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterISS3ISS3

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterISS3ISS3 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_swigregister(itkSmoothingRecursiveGaussianImageFilterISS3ISS3)

def itkSmoothingRecursiveGaussianImageFilterISS4ISS4_New():
    return itkSmoothingRecursiveGaussianImageFilterISS4ISS4.New()

class itkSmoothingRecursiveGaussianImageFilterISS4ISS4(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4ISS4):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterISS4ISS4_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterISS4ISS4_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS4ISS4_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD4 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS4ISS4_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS4ISS4_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD4"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS4ISS4_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS4ISS4_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS4ISS4_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS4ISS4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS4ISS4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS4ISS4_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterISS4ISS4

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterISS4ISS4 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS4ISS4_swigregister(itkSmoothingRecursiveGaussianImageFilterISS4ISS4)

def itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_New():
    return itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.New()

class itkSmoothingRecursiveGaussianImageFilterIUC2IUC2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD2 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD2"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIUC2IUC2

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_swigregister(itkSmoothingRecursiveGaussianImageFilterIUC2IUC2)

def itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_New():
    return itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.New()

class itkSmoothingRecursiveGaussianImageFilterIUC3IUC3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD3 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD3"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIUC3IUC3

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_swigregister(itkSmoothingRecursiveGaussianImageFilterIUC3IUC3)

def itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_New():
    return itkSmoothingRecursiveGaussianImageFilterIUC4IUC4.New()

class itkSmoothingRecursiveGaussianImageFilterIUC4IUC4(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4IUC4):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD4 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD4"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIUC4IUC4

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterIUC4IUC4 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC4IUC4_swigregister(itkSmoothingRecursiveGaussianImageFilterIUC4IUC4)

def itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_New():
    return itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.New()

class itkSmoothingRecursiveGaussianImageFilterIUS2IUS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD2 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD2"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIUS2IUS2

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_swigregister(itkSmoothingRecursiveGaussianImageFilterIUS2IUS2)

def itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_New():
    return itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.New()

class itkSmoothingRecursiveGaussianImageFilterIUS3IUS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD3 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD3"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIUS3IUS3

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_swigregister(itkSmoothingRecursiveGaussianImageFilterIUS3IUS3)

def itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_New():
    return itkSmoothingRecursiveGaussianImageFilterIUS4IUS4.New()

class itkSmoothingRecursiveGaussianImageFilterIUS4IUS4(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4IUS4):
    r"""Proxy of C++ itkSmoothingRecursiveGaussianImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_Clone(self)

    def SetSigmaArray(self, sigma):
        r"""
        SetSigmaArray(self, sigma)

        Parameters
        ----------
        sigma: itkFixedArrayD4 const &

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_SetSigmaArray(self, sigma)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_SetSigma(self, sigma)

    def GetSigmaArray(self):
        r"""GetSigmaArray(self) -> itkFixedArrayD4"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_GetSigmaArray(self)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_NormalizeAcrossScaleOff(self)
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingRecursiveGaussianImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIUS4IUS4

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveGaussianImageFilterIUS4IUS4 in _itkSmoothingRecursiveGaussianImageFilterPython:
_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS4IUS4_swigregister(itkSmoothingRecursiveGaussianImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def smoothing_recursive_gaussian_image_filter(*args: itkt.ImageLike,  sigma_array: Sequence[float]=..., sigma: float=..., normalize_across_scale: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SmoothingRecursiveGaussianImageFilter"""
    import itk

    kwarg_typehints = { 'sigma_array':sigma_array,'sigma':sigma,'normalize_across_scale':normalize_across_scale }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SmoothingRecursiveGaussianImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def smoothing_recursive_gaussian_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKSmoothing.SmoothingRecursiveGaussianImageFilter
    smoothing_recursive_gaussian_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    smoothing_recursive_gaussian_image_filter.__doc__ = filter_object.__doc__



