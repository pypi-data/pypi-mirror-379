# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDisplacementFieldPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDisplacementFieldJacobianDeterminantFilterPython
else:
    import _itkDisplacementFieldJacobianDeterminantFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkSizePython
import itk.itkImageToImageFilterBPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageToImageFilterCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkDisplacementFieldJacobianDeterminantFilterIVF22D_New():
    return itkDisplacementFieldJacobianDeterminantFilterIVF22D.New()

class itkDisplacementFieldJacobianDeterminantFilterIVF22D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2):
    r"""Proxy of C++ itkDisplacementFieldJacobianDeterminantFilterIVF22D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF22D_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDisplacementFieldJacobianDeterminantFilterIVF22D_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, arg0):
        r"""
        SetUseImageSpacing(self, arg0)

        Parameters
        ----------
        arg0: bool

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_SetUseImageSpacing(self, arg0)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_SetUseImageSpacingOff(self)

    def SetDerivativeWeights(self, arg0):
        r"""
        SetDerivativeWeights(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayD2 const &

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_SetDerivativeWeights(self, arg0)

    def GetDerivativeWeights(self):
        r"""GetDerivativeWeights(self) -> itkFixedArrayD2"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_GetDerivativeWeights(self)
    __swig_destroy__ = _itkDisplacementFieldJacobianDeterminantFilterPython.delete_itkDisplacementFieldJacobianDeterminantFilterIVF22D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF22D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldJacobianDeterminantFilterIVF22D

        Create a new object of the class itkDisplacementFieldJacobianDeterminantFilterIVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldJacobianDeterminantFilterIVF22D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldJacobianDeterminantFilterIVF22D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDisplacementFieldJacobianDeterminantFilterIVF22D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDisplacementFieldJacobianDeterminantFilterIVF22D in _itkDisplacementFieldJacobianDeterminantFilterPython:
_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_swigregister(itkDisplacementFieldJacobianDeterminantFilterIVF22D)

def itkDisplacementFieldJacobianDeterminantFilterIVF22F_New():
    return itkDisplacementFieldJacobianDeterminantFilterIVF22F.New()

class itkDisplacementFieldJacobianDeterminantFilterIVF22F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2):
    r"""Proxy of C++ itkDisplacementFieldJacobianDeterminantFilterIVF22F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF22F_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDisplacementFieldJacobianDeterminantFilterIVF22F_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, arg0):
        r"""
        SetUseImageSpacing(self, arg0)

        Parameters
        ----------
        arg0: bool

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_SetUseImageSpacing(self, arg0)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_SetUseImageSpacingOff(self)

    def SetDerivativeWeights(self, arg0):
        r"""
        SetDerivativeWeights(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayF2 const &

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_SetDerivativeWeights(self, arg0)

    def GetDerivativeWeights(self):
        r"""GetDerivativeWeights(self) -> itkFixedArrayF2"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_GetDerivativeWeights(self)
    __swig_destroy__ = _itkDisplacementFieldJacobianDeterminantFilterPython.delete_itkDisplacementFieldJacobianDeterminantFilterIVF22F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF22F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldJacobianDeterminantFilterIVF22F

        Create a new object of the class itkDisplacementFieldJacobianDeterminantFilterIVF22F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldJacobianDeterminantFilterIVF22F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldJacobianDeterminantFilterIVF22F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDisplacementFieldJacobianDeterminantFilterIVF22F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDisplacementFieldJacobianDeterminantFilterIVF22F in _itkDisplacementFieldJacobianDeterminantFilterPython:
_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_swigregister(itkDisplacementFieldJacobianDeterminantFilterIVF22F)

def itkDisplacementFieldJacobianDeterminantFilterIVF33D_New():
    return itkDisplacementFieldJacobianDeterminantFilterIVF33D.New()

class itkDisplacementFieldJacobianDeterminantFilterIVF33D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3):
    r"""Proxy of C++ itkDisplacementFieldJacobianDeterminantFilterIVF33D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF33D_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDisplacementFieldJacobianDeterminantFilterIVF33D_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, arg0):
        r"""
        SetUseImageSpacing(self, arg0)

        Parameters
        ----------
        arg0: bool

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_SetUseImageSpacing(self, arg0)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_SetUseImageSpacingOff(self)

    def SetDerivativeWeights(self, arg0):
        r"""
        SetDerivativeWeights(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayD3 const &

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_SetDerivativeWeights(self, arg0)

    def GetDerivativeWeights(self):
        r"""GetDerivativeWeights(self) -> itkFixedArrayD3"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_GetDerivativeWeights(self)
    __swig_destroy__ = _itkDisplacementFieldJacobianDeterminantFilterPython.delete_itkDisplacementFieldJacobianDeterminantFilterIVF33D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF33D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldJacobianDeterminantFilterIVF33D

        Create a new object of the class itkDisplacementFieldJacobianDeterminantFilterIVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldJacobianDeterminantFilterIVF33D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldJacobianDeterminantFilterIVF33D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDisplacementFieldJacobianDeterminantFilterIVF33D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDisplacementFieldJacobianDeterminantFilterIVF33D in _itkDisplacementFieldJacobianDeterminantFilterPython:
_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_swigregister(itkDisplacementFieldJacobianDeterminantFilterIVF33D)

def itkDisplacementFieldJacobianDeterminantFilterIVF33F_New():
    return itkDisplacementFieldJacobianDeterminantFilterIVF33F.New()

class itkDisplacementFieldJacobianDeterminantFilterIVF33F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3):
    r"""Proxy of C++ itkDisplacementFieldJacobianDeterminantFilterIVF33F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF33F_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDisplacementFieldJacobianDeterminantFilterIVF33F_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, arg0):
        r"""
        SetUseImageSpacing(self, arg0)

        Parameters
        ----------
        arg0: bool

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_SetUseImageSpacing(self, arg0)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_SetUseImageSpacingOff(self)

    def SetDerivativeWeights(self, arg0):
        r"""
        SetDerivativeWeights(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayF3 const &

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_SetDerivativeWeights(self, arg0)

    def GetDerivativeWeights(self):
        r"""GetDerivativeWeights(self) -> itkFixedArrayF3"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_GetDerivativeWeights(self)
    __swig_destroy__ = _itkDisplacementFieldJacobianDeterminantFilterPython.delete_itkDisplacementFieldJacobianDeterminantFilterIVF33F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF33F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldJacobianDeterminantFilterIVF33F

        Create a new object of the class itkDisplacementFieldJacobianDeterminantFilterIVF33F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldJacobianDeterminantFilterIVF33F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldJacobianDeterminantFilterIVF33F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDisplacementFieldJacobianDeterminantFilterIVF33F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDisplacementFieldJacobianDeterminantFilterIVF33F in _itkDisplacementFieldJacobianDeterminantFilterPython:
_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_swigregister(itkDisplacementFieldJacobianDeterminantFilterIVF33F)

def itkDisplacementFieldJacobianDeterminantFilterIVF44D_New():
    return itkDisplacementFieldJacobianDeterminantFilterIVF44D.New()

class itkDisplacementFieldJacobianDeterminantFilterIVF44D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF44ID4):
    r"""Proxy of C++ itkDisplacementFieldJacobianDeterminantFilterIVF44D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF44D_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDisplacementFieldJacobianDeterminantFilterIVF44D_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44D_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44D_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, arg0):
        r"""
        SetUseImageSpacing(self, arg0)

        Parameters
        ----------
        arg0: bool

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44D_SetUseImageSpacing(self, arg0)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44D_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44D_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44D_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44D_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44D_SetUseImageSpacingOff(self)

    def SetDerivativeWeights(self, arg0):
        r"""
        SetDerivativeWeights(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayD4 const &

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44D_SetDerivativeWeights(self, arg0)

    def GetDerivativeWeights(self):
        r"""GetDerivativeWeights(self) -> itkFixedArrayD4"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44D_GetDerivativeWeights(self)
    __swig_destroy__ = _itkDisplacementFieldJacobianDeterminantFilterPython.delete_itkDisplacementFieldJacobianDeterminantFilterIVF44D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF44D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldJacobianDeterminantFilterIVF44D

        Create a new object of the class itkDisplacementFieldJacobianDeterminantFilterIVF44D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldJacobianDeterminantFilterIVF44D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldJacobianDeterminantFilterIVF44D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDisplacementFieldJacobianDeterminantFilterIVF44D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDisplacementFieldJacobianDeterminantFilterIVF44D in _itkDisplacementFieldJacobianDeterminantFilterPython:
_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44D_swigregister(itkDisplacementFieldJacobianDeterminantFilterIVF44D)

def itkDisplacementFieldJacobianDeterminantFilterIVF44F_New():
    return itkDisplacementFieldJacobianDeterminantFilterIVF44F.New()

class itkDisplacementFieldJacobianDeterminantFilterIVF44F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF44IF4):
    r"""Proxy of C++ itkDisplacementFieldJacobianDeterminantFilterIVF44F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF44F_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDisplacementFieldJacobianDeterminantFilterIVF44F_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44F_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44F_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, arg0):
        r"""
        SetUseImageSpacing(self, arg0)

        Parameters
        ----------
        arg0: bool

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44F_SetUseImageSpacing(self, arg0)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44F_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44F_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44F_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44F_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44F_SetUseImageSpacingOff(self)

    def SetDerivativeWeights(self, arg0):
        r"""
        SetDerivativeWeights(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayF4 const &

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44F_SetDerivativeWeights(self, arg0)

    def GetDerivativeWeights(self):
        r"""GetDerivativeWeights(self) -> itkFixedArrayF4"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44F_GetDerivativeWeights(self)
    __swig_destroy__ = _itkDisplacementFieldJacobianDeterminantFilterPython.delete_itkDisplacementFieldJacobianDeterminantFilterIVF44F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF44F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldJacobianDeterminantFilterIVF44F

        Create a new object of the class itkDisplacementFieldJacobianDeterminantFilterIVF44F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldJacobianDeterminantFilterIVF44F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldJacobianDeterminantFilterIVF44F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDisplacementFieldJacobianDeterminantFilterIVF44F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDisplacementFieldJacobianDeterminantFilterIVF44F in _itkDisplacementFieldJacobianDeterminantFilterPython:
_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF44F_swigregister(itkDisplacementFieldJacobianDeterminantFilterIVF44F)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def displacement_field_jacobian_determinant_filter(*args: itkt.ImageLike,  use_image_spacing: bool=..., derivative_weights: Sequence[float]=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for DisplacementFieldJacobianDeterminantFilter"""
    import itk

    kwarg_typehints = { 'use_image_spacing':use_image_spacing,'derivative_weights':derivative_weights }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.DisplacementFieldJacobianDeterminantFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def displacement_field_jacobian_determinant_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKDisplacementField.DisplacementFieldJacobianDeterminantFilter
    displacement_field_jacobian_determinant_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    displacement_field_jacobian_determinant_filter.__doc__ = filter_object.__doc__



