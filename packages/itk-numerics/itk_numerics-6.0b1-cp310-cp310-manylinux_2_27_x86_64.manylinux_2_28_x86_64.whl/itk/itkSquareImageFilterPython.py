# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSquareImageFilterPython
else:
    import _itkSquareImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkUnaryGeneratorImageFilterPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageToImageFilterCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython

def itkSquareImageFilterID2ID2_New():
    return itkSquareImageFilterID2ID2.New()

class itkSquareImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""Proxy of C++ itkSquareImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterID2ID2_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterID2ID2_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterID2ID2_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterID2ID2_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterID2ID2_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterID2ID2

        Create a new object of the class itkSquareImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterID2ID2 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterID2ID2_swigregister(itkSquareImageFilterID2ID2)

def itkSquareImageFilterID3ID3_New():
    return itkSquareImageFilterID3ID3.New()

class itkSquareImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""Proxy of C++ itkSquareImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterID3ID3_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterID3ID3_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterID3ID3_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterID3ID3_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterID3ID3_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterID3ID3

        Create a new object of the class itkSquareImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterID3ID3 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterID3ID3_swigregister(itkSquareImageFilterID3ID3)

def itkSquareImageFilterID4ID4_New():
    return itkSquareImageFilterID4ID4.New()

class itkSquareImageFilterID4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID4ID4):
    r"""Proxy of C++ itkSquareImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterID4ID4_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterID4ID4_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterID4ID4_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterID4ID4_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterID4ID4_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterID4ID4

        Create a new object of the class itkSquareImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterID4ID4 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterID4ID4_swigregister(itkSquareImageFilterID4ID4)

def itkSquareImageFilterIF2IF2_New():
    return itkSquareImageFilterIF2IF2.New()

class itkSquareImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""Proxy of C++ itkSquareImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterIF2IF2_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterIF2IF2_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIF2IF2_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterIF2IF2_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterIF2IF2

        Create a new object of the class itkSquareImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterIF2IF2 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterIF2IF2_swigregister(itkSquareImageFilterIF2IF2)

def itkSquareImageFilterIF3IF3_New():
    return itkSquareImageFilterIF3IF3.New()

class itkSquareImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""Proxy of C++ itkSquareImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterIF3IF3_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterIF3IF3_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIF3IF3_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterIF3IF3_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterIF3IF3

        Create a new object of the class itkSquareImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterIF3IF3 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterIF3IF3_swigregister(itkSquareImageFilterIF3IF3)

def itkSquareImageFilterIF4IF4_New():
    return itkSquareImageFilterIF4IF4.New()

class itkSquareImageFilterIF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF4IF4):
    r"""Proxy of C++ itkSquareImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterIF4IF4_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterIF4IF4_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIF4IF4_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterIF4IF4_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterIF4IF4_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterIF4IF4

        Create a new object of the class itkSquareImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterIF4IF4 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterIF4IF4_swigregister(itkSquareImageFilterIF4IF4)

def itkSquareImageFilterISS2ISS2_New():
    return itkSquareImageFilterISS2ISS2.New()

class itkSquareImageFilterISS2ISS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    r"""Proxy of C++ itkSquareImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterISS2ISS2_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterISS2ISS2_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterISS2ISS2_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterISS2ISS2_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterISS2ISS2

        Create a new object of the class itkSquareImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterISS2ISS2 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterISS2ISS2_swigregister(itkSquareImageFilterISS2ISS2)

def itkSquareImageFilterISS3ISS3_New():
    return itkSquareImageFilterISS3ISS3.New()

class itkSquareImageFilterISS3ISS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    r"""Proxy of C++ itkSquareImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterISS3ISS3_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterISS3ISS3_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterISS3ISS3_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterISS3ISS3_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterISS3ISS3

        Create a new object of the class itkSquareImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterISS3ISS3 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterISS3ISS3_swigregister(itkSquareImageFilterISS3ISS3)

def itkSquareImageFilterISS4ISS4_New():
    return itkSquareImageFilterISS4ISS4.New()

class itkSquareImageFilterISS4ISS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS4ISS4):
    r"""Proxy of C++ itkSquareImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterISS4ISS4_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterISS4ISS4_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterISS4ISS4_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterISS4ISS4_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterISS4ISS4

        Create a new object of the class itkSquareImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterISS4ISS4 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterISS4ISS4_swigregister(itkSquareImageFilterISS4ISS4)

def itkSquareImageFilterIUC2IUC2_New():
    return itkSquareImageFilterIUC2IUC2.New()

class itkSquareImageFilterIUC2IUC2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    r"""Proxy of C++ itkSquareImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterIUC2IUC2_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterIUC2IUC2_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIUC2IUC2_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterIUC2IUC2_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterIUC2IUC2

        Create a new object of the class itkSquareImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterIUC2IUC2 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterIUC2IUC2_swigregister(itkSquareImageFilterIUC2IUC2)

def itkSquareImageFilterIUC3IUC3_New():
    return itkSquareImageFilterIUC3IUC3.New()

class itkSquareImageFilterIUC3IUC3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    r"""Proxy of C++ itkSquareImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterIUC3IUC3_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterIUC3IUC3_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIUC3IUC3_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterIUC3IUC3_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterIUC3IUC3

        Create a new object of the class itkSquareImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterIUC3IUC3 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterIUC3IUC3_swigregister(itkSquareImageFilterIUC3IUC3)

def itkSquareImageFilterIUC4IUC4_New():
    return itkSquareImageFilterIUC4IUC4.New()

class itkSquareImageFilterIUC4IUC4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC4IUC4):
    r"""Proxy of C++ itkSquareImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterIUC4IUC4_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterIUC4IUC4_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIUC4IUC4_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterIUC4IUC4_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterIUC4IUC4_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterIUC4IUC4

        Create a new object of the class itkSquareImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterIUC4IUC4 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterIUC4IUC4_swigregister(itkSquareImageFilterIUC4IUC4)

def itkSquareImageFilterIUS2IUS2_New():
    return itkSquareImageFilterIUS2IUS2.New()

class itkSquareImageFilterIUS2IUS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    r"""Proxy of C++ itkSquareImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterIUS2IUS2_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterIUS2IUS2_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIUS2IUS2_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterIUS2IUS2_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterIUS2IUS2

        Create a new object of the class itkSquareImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterIUS2IUS2 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterIUS2IUS2_swigregister(itkSquareImageFilterIUS2IUS2)

def itkSquareImageFilterIUS3IUS3_New():
    return itkSquareImageFilterIUS3IUS3.New()

class itkSquareImageFilterIUS3IUS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    r"""Proxy of C++ itkSquareImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterIUS3IUS3_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterIUS3IUS3_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIUS3IUS3_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterIUS3IUS3_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterIUS3IUS3

        Create a new object of the class itkSquareImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterIUS3IUS3 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterIUS3IUS3_swigregister(itkSquareImageFilterIUS3IUS3)

def itkSquareImageFilterIUS4IUS4_New():
    return itkSquareImageFilterIUS4IUS4.New()

class itkSquareImageFilterIUS4IUS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS4IUS4):
    r"""Proxy of C++ itkSquareImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquareImageFilterIUS4IUS4_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquareImageFilterIUS4IUS4_Pointer"""
        return _itkSquareImageFilterPython.itkSquareImageFilterIUS4IUS4_Clone(self)
    InputHasNumericTraitsCheck = _itkSquareImageFilterPython.itkSquareImageFilterIUS4IUS4_InputHasNumericTraitsCheck
    
    RealTypeMultiplyOperatorCheck = _itkSquareImageFilterPython.itkSquareImageFilterIUS4IUS4_RealTypeMultiplyOperatorCheck
    
    __swig_destroy__ = _itkSquareImageFilterPython.delete_itkSquareImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquareImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquareImageFilterPython.itkSquareImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquareImageFilterIUS4IUS4

        Create a new object of the class itkSquareImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquareImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquareImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquareImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquareImageFilterIUS4IUS4 in _itkSquareImageFilterPython:
_itkSquareImageFilterPython.itkSquareImageFilterIUS4IUS4_swigregister(itkSquareImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def square_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SquareImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SquareImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def square_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.SquareImageFilter
    square_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    square_image_filter.__doc__ = filter_object.__doc__



