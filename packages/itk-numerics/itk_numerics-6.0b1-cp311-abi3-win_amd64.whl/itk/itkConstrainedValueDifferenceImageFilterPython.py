# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkConstrainedValueDifferenceImageFilterPython
else:
    import _itkConstrainedValueDifferenceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkBinaryGeneratorImageFilterPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkConstrainedValueDifferenceImageFilterID2ID2ID2_New():
    return itkConstrainedValueDifferenceImageFilterID2ID2ID2.New()

class itkConstrainedValueDifferenceImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterID2ID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterID2ID2ID2_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterID2ID2ID2_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterID2ID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterID2ID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterID2ID2ID2

        Create a new object of the class itkConstrainedValueDifferenceImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterID2ID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterID2ID2ID2 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID2ID2ID2_swigregister(itkConstrainedValueDifferenceImageFilterID2ID2ID2)

def itkConstrainedValueDifferenceImageFilterID3ID3ID3_New():
    return itkConstrainedValueDifferenceImageFilterID3ID3ID3.New()

class itkConstrainedValueDifferenceImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterID3ID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterID3ID3ID3_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterID3ID3ID3_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterID3ID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterID3ID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterID3ID3ID3

        Create a new object of the class itkConstrainedValueDifferenceImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterID3ID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterID3ID3ID3 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID3ID3ID3_swigregister(itkConstrainedValueDifferenceImageFilterID3ID3ID3)

def itkConstrainedValueDifferenceImageFilterID4ID4ID4_New():
    return itkConstrainedValueDifferenceImageFilterID4ID4ID4.New()

class itkConstrainedValueDifferenceImageFilterID4ID4ID4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID4ID4ID4):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterID4ID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterID4ID4ID4_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID4ID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterID4ID4ID4_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID4ID4ID4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID4ID4ID4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID4ID4ID4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID4ID4ID4_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID4ID4ID4_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterID4ID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterID4ID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID4ID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterID4ID4ID4

        Create a new object of the class itkConstrainedValueDifferenceImageFilterID4ID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterID4ID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterID4ID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterID4ID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterID4ID4ID4 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterID4ID4ID4_swigregister(itkConstrainedValueDifferenceImageFilterID4ID4ID4)

def itkConstrainedValueDifferenceImageFilterIF2IF2IF2_New():
    return itkConstrainedValueDifferenceImageFilterIF2IF2IF2.New()

class itkConstrainedValueDifferenceImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterIF2IF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterIF2IF2IF2_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterIF2IF2IF2_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIF2IF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterIF2IF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIF2IF2IF2

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIF2IF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIF2IF2IF2 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF2IF2IF2_swigregister(itkConstrainedValueDifferenceImageFilterIF2IF2IF2)

def itkConstrainedValueDifferenceImageFilterIF3IF3IF3_New():
    return itkConstrainedValueDifferenceImageFilterIF3IF3IF3.New()

class itkConstrainedValueDifferenceImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterIF3IF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterIF3IF3IF3_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterIF3IF3IF3_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIF3IF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterIF3IF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIF3IF3IF3

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIF3IF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIF3IF3IF3 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF3IF3IF3_swigregister(itkConstrainedValueDifferenceImageFilterIF3IF3IF3)

def itkConstrainedValueDifferenceImageFilterIF4IF4IF4_New():
    return itkConstrainedValueDifferenceImageFilterIF4IF4IF4.New()

class itkConstrainedValueDifferenceImageFilterIF4IF4IF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF4IF4IF4):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterIF4IF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterIF4IF4IF4_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF4IF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterIF4IF4IF4_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF4IF4IF4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF4IF4IF4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF4IF4IF4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF4IF4IF4_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF4IF4IF4_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIF4IF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterIF4IF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF4IF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIF4IF4IF4

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIF4IF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIF4IF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIF4IF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIF4IF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIF4IF4IF4 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIF4IF4IF4_swigregister(itkConstrainedValueDifferenceImageFilterIF4IF4IF4)

def itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_New():
    return itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2.New()

class itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2

        Create a new object of the class itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2_swigregister(itkConstrainedValueDifferenceImageFilterISS2ISS2ISS2)

def itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_New():
    return itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3.New()

class itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3

        Create a new object of the class itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3_swigregister(itkConstrainedValueDifferenceImageFilterISS3ISS3ISS3)

def itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4_New():
    return itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4.New()

class itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS4ISS4ISS4):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4

        Create a new object of the class itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4_swigregister(itkConstrainedValueDifferenceImageFilterISS4ISS4ISS4)

def itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_New():
    return itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2.New()

class itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2_swigregister(itkConstrainedValueDifferenceImageFilterIUC2IUC2IUC2)

def itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_New():
    return itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3.New()

class itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3_swigregister(itkConstrainedValueDifferenceImageFilterIUC3IUC3IUC3)

def itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4_New():
    return itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4.New()

class itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC4IUC4IUC4):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4_swigregister(itkConstrainedValueDifferenceImageFilterIUC4IUC4IUC4)

def itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_New():
    return itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2.New()

class itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2_swigregister(itkConstrainedValueDifferenceImageFilterIUS2IUS2IUS2)

def itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_New():
    return itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3.New()

class itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3_swigregister(itkConstrainedValueDifferenceImageFilterIUS3IUS3IUS3)

def itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4_New():
    return itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4.New()

class itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS4IUS4IUS4):
    r"""Proxy of C++ itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4_DoubleConvertibleToOutputCheck
    
    DoubleGreaterThanOutputCheck = _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4_DoubleGreaterThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueDifferenceImageFilterPython.delete_itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4

        Create a new object of the class itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4 in _itkConstrainedValueDifferenceImageFilterPython:
_itkConstrainedValueDifferenceImageFilterPython.itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4_swigregister(itkConstrainedValueDifferenceImageFilterIUS4IUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def constrained_value_difference_image_filter(*args: itkt.ImageLike,  constant1: float=..., constant2: float=..., constant: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ConstrainedValueDifferenceImageFilter"""
    import itk

    kwarg_typehints = { 'constant1':constant1,'constant2':constant2,'constant':constant }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ConstrainedValueDifferenceImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def constrained_value_difference_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.ConstrainedValueDifferenceImageFilter
    constrained_value_difference_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    constrained_value_difference_image_filter.__doc__ = filter_object.__doc__



