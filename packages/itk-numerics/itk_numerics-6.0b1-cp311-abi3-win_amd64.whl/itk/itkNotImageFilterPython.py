# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNotImageFilterPython
else:
    import _itkNotImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterAPython

def itkNotImageFilterID2ID2_Superclass_New():
    return itkNotImageFilterID2ID2_Superclass.New()

class itkNotImageFilterID2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkNotImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterID2ID2_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterID2ID2_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< double >
        GetFunctor(self) -> itk::Functor::NOT< double > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< double > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterID2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterID2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterID2ID2_Superclass

        Create a new object of the class itkNotImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterID2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterID2ID2_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass_swigregister(itkNotImageFilterID2ID2_Superclass)

def itkNotImageFilterID3ID3_Superclass_New():
    return itkNotImageFilterID3ID3_Superclass.New()

class itkNotImageFilterID3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkNotImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterID3ID3_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterID3ID3_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< double >
        GetFunctor(self) -> itk::Functor::NOT< double > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< double > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterID3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterID3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterID3ID3_Superclass

        Create a new object of the class itkNotImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterID3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterID3ID3_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass_swigregister(itkNotImageFilterID3ID3_Superclass)

def itkNotImageFilterID4ID4_Superclass_New():
    return itkNotImageFilterID4ID4_Superclass.New()

class itkNotImageFilterID4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4ID4):
    r"""Proxy of C++ itkNotImageFilterID4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterID4ID4_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterID4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterID4ID4_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterID4ID4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< double >
        GetFunctor(self) -> itk::Functor::NOT< double > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterID4ID4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< double > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterID4ID4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterID4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterID4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterID4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterID4ID4_Superclass

        Create a new object of the class itkNotImageFilterID4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterID4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterID4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterID4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterID4ID4_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterID4ID4_Superclass_swigregister(itkNotImageFilterID4ID4_Superclass)

def itkNotImageFilterIF2IF2_Superclass_New():
    return itkNotImageFilterIF2IF2_Superclass.New()

class itkNotImageFilterIF2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkNotImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIF2IF2_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIF2IF2_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< float >
        GetFunctor(self) -> itk::Functor::NOT< float > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< float > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIF2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIF2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIF2IF2_Superclass

        Create a new object of the class itkNotImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIF2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIF2IF2_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass_swigregister(itkNotImageFilterIF2IF2_Superclass)

def itkNotImageFilterIF3IF3_Superclass_New():
    return itkNotImageFilterIF3IF3_Superclass.New()

class itkNotImageFilterIF3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkNotImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIF3IF3_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIF3IF3_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< float >
        GetFunctor(self) -> itk::Functor::NOT< float > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< float > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIF3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIF3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIF3IF3_Superclass

        Create a new object of the class itkNotImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIF3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIF3IF3_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass_swigregister(itkNotImageFilterIF3IF3_Superclass)

def itkNotImageFilterIF4IF4_Superclass_New():
    return itkNotImageFilterIF4IF4_Superclass.New()

class itkNotImageFilterIF4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IF4):
    r"""Proxy of C++ itkNotImageFilterIF4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIF4IF4_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIF4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIF4IF4_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIF4IF4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< float >
        GetFunctor(self) -> itk::Functor::NOT< float > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterIF4IF4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< float > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF4IF4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIF4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIF4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIF4IF4_Superclass

        Create a new object of the class itkNotImageFilterIF4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIF4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIF4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIF4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIF4IF4_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIF4IF4_Superclass_swigregister(itkNotImageFilterIF4IF4_Superclass)

def itkNotImageFilterISS2ISS2_Superclass_New():
    return itkNotImageFilterISS2ISS2_Superclass.New()

class itkNotImageFilterISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkNotImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< short >
        GetFunctor(self) -> itk::Functor::NOT< short > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< short > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterISS2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterISS2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterISS2ISS2_Superclass

        Create a new object of the class itkNotImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterISS2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterISS2ISS2_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass_swigregister(itkNotImageFilterISS2ISS2_Superclass)

def itkNotImageFilterISS3ISS3_Superclass_New():
    return itkNotImageFilterISS3ISS3_Superclass.New()

class itkNotImageFilterISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkNotImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< short >
        GetFunctor(self) -> itk::Functor::NOT< short > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< short > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterISS3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterISS3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterISS3ISS3_Superclass

        Create a new object of the class itkNotImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterISS3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterISS3ISS3_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass_swigregister(itkNotImageFilterISS3ISS3_Superclass)

def itkNotImageFilterISS4ISS4_Superclass_New():
    return itkNotImageFilterISS4ISS4_Superclass.New()

class itkNotImageFilterISS4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4ISS4):
    r"""Proxy of C++ itkNotImageFilterISS4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< short >
        GetFunctor(self) -> itk::Functor::NOT< short > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< short > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterISS4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterISS4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterISS4ISS4_Superclass

        Create a new object of the class itkNotImageFilterISS4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterISS4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterISS4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterISS4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterISS4ISS4_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterISS4ISS4_Superclass_swigregister(itkNotImageFilterISS4ISS4_Superclass)

def itkNotImageFilterIUC2IUC2_Superclass_New():
    return itkNotImageFilterIUC2IUC2_Superclass.New()

class itkNotImageFilterIUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkNotImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< unsigned char >
        GetFunctor(self) -> itk::Functor::NOT< unsigned char > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< unsigned char > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUC2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIUC2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkNotImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUC2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUC2IUC2_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass_swigregister(itkNotImageFilterIUC2IUC2_Superclass)

def itkNotImageFilterIUC3IUC3_Superclass_New():
    return itkNotImageFilterIUC3IUC3_Superclass.New()

class itkNotImageFilterIUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkNotImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< unsigned char >
        GetFunctor(self) -> itk::Functor::NOT< unsigned char > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< unsigned char > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUC3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIUC3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkNotImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUC3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUC3IUC3_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass_swigregister(itkNotImageFilterIUC3IUC3_Superclass)

def itkNotImageFilterIUC4IUC4_Superclass_New():
    return itkNotImageFilterIUC4IUC4_Superclass.New()

class itkNotImageFilterIUC4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4IUC4):
    r"""Proxy of C++ itkNotImageFilterIUC4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< unsigned char >
        GetFunctor(self) -> itk::Functor::NOT< unsigned char > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< unsigned char > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUC4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIUC4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUC4IUC4_Superclass

        Create a new object of the class itkNotImageFilterIUC4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUC4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUC4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUC4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUC4IUC4_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_Superclass_swigregister(itkNotImageFilterIUC4IUC4_Superclass)

def itkNotImageFilterIUS2IUS2_Superclass_New():
    return itkNotImageFilterIUS2IUS2_Superclass.New()

class itkNotImageFilterIUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkNotImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< unsigned short >
        GetFunctor(self) -> itk::Functor::NOT< unsigned short > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< unsigned short > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUS2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIUS2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkNotImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUS2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUS2IUS2_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass_swigregister(itkNotImageFilterIUS2IUS2_Superclass)

def itkNotImageFilterIUS3IUS3_Superclass_New():
    return itkNotImageFilterIUS3IUS3_Superclass.New()

class itkNotImageFilterIUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkNotImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< unsigned short >
        GetFunctor(self) -> itk::Functor::NOT< unsigned short > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< unsigned short > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUS3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIUS3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkNotImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUS3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUS3IUS3_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass_swigregister(itkNotImageFilterIUS3IUS3_Superclass)

def itkNotImageFilterIUS4IUS4_Superclass_New():
    return itkNotImageFilterIUS4IUS4_Superclass.New()

class itkNotImageFilterIUS4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4IUS4):
    r"""Proxy of C++ itkNotImageFilterIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::NOT< unsigned short >
        GetFunctor(self) -> itk::Functor::NOT< unsigned short > const &
        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::NOT< unsigned short > const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUS4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIUS4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUS4IUS4_Superclass

        Create a new object of the class itkNotImageFilterIUS4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUS4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUS4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUS4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUS4IUS4_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_Superclass_swigregister(itkNotImageFilterIUS4IUS4_Superclass)

def itkNotImageFilterID2ID2_New():
    return itkNotImageFilterID2ID2.New()

class itkNotImageFilterID2ID2(itkNotImageFilterID2ID2_Superclass):
    r"""Proxy of C++ itkNotImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterID2ID2_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterID2ID2_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterID2ID2_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: double const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterID2ID2_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> double"""
        return _itkNotImageFilterPython.itkNotImageFilterID2ID2_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: double const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterID2ID2_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> double"""
        return _itkNotImageFilterPython.itkNotImageFilterID2ID2_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterID2ID2_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterID2ID2_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterID2ID2_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterID2ID2

        Create a new object of the class itkNotImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterID2ID2 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterID2ID2_swigregister(itkNotImageFilterID2ID2)

def itkNotImageFilterID3ID3_New():
    return itkNotImageFilterID3ID3.New()

class itkNotImageFilterID3ID3(itkNotImageFilterID3ID3_Superclass):
    r"""Proxy of C++ itkNotImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterID3ID3_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterID3ID3_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterID3ID3_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: double const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterID3ID3_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> double"""
        return _itkNotImageFilterPython.itkNotImageFilterID3ID3_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: double const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterID3ID3_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> double"""
        return _itkNotImageFilterPython.itkNotImageFilterID3ID3_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterID3ID3_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterID3ID3_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterID3ID3_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterID3ID3

        Create a new object of the class itkNotImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterID3ID3 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterID3ID3_swigregister(itkNotImageFilterID3ID3)

def itkNotImageFilterID4ID4_New():
    return itkNotImageFilterID4ID4.New()

class itkNotImageFilterID4ID4(itkNotImageFilterID4ID4_Superclass):
    r"""Proxy of C++ itkNotImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterID4ID4_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterID4ID4_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterID4ID4_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: double const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterID4ID4_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> double"""
        return _itkNotImageFilterPython.itkNotImageFilterID4ID4_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: double const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterID4ID4_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> double"""
        return _itkNotImageFilterPython.itkNotImageFilterID4ID4_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterID4ID4_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterID4ID4_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterID4ID4_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterID4ID4

        Create a new object of the class itkNotImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterID4ID4 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterID4ID4_swigregister(itkNotImageFilterID4ID4)

def itkNotImageFilterIF2IF2_New():
    return itkNotImageFilterIF2IF2.New()

class itkNotImageFilterIF2IF2(itkNotImageFilterIF2IF2_Superclass):
    r"""Proxy of C++ itkNotImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIF2IF2_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIF2IF2_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIF2IF2_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: float const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF2IF2_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> float"""
        return _itkNotImageFilterPython.itkNotImageFilterIF2IF2_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: float const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF2IF2_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> float"""
        return _itkNotImageFilterPython.itkNotImageFilterIF2IF2_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIF2IF2_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIF2IF2_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIF2IF2

        Create a new object of the class itkNotImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIF2IF2 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIF2IF2_swigregister(itkNotImageFilterIF2IF2)

def itkNotImageFilterIF3IF3_New():
    return itkNotImageFilterIF3IF3.New()

class itkNotImageFilterIF3IF3(itkNotImageFilterIF3IF3_Superclass):
    r"""Proxy of C++ itkNotImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIF3IF3_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIF3IF3_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIF3IF3_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: float const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF3IF3_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> float"""
        return _itkNotImageFilterPython.itkNotImageFilterIF3IF3_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: float const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF3IF3_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> float"""
        return _itkNotImageFilterPython.itkNotImageFilterIF3IF3_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIF3IF3_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIF3IF3_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIF3IF3

        Create a new object of the class itkNotImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIF3IF3 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIF3IF3_swigregister(itkNotImageFilterIF3IF3)

def itkNotImageFilterIF4IF4_New():
    return itkNotImageFilterIF4IF4.New()

class itkNotImageFilterIF4IF4(itkNotImageFilterIF4IF4_Superclass):
    r"""Proxy of C++ itkNotImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIF4IF4_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIF4IF4_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIF4IF4_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: float const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF4IF4_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> float"""
        return _itkNotImageFilterPython.itkNotImageFilterIF4IF4_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: float const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF4IF4_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> float"""
        return _itkNotImageFilterPython.itkNotImageFilterIF4IF4_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIF4IF4_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIF4IF4_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIF4IF4_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIF4IF4

        Create a new object of the class itkNotImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIF4IF4 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIF4IF4_swigregister(itkNotImageFilterIF4IF4)

def itkNotImageFilterISS2ISS2_New():
    return itkNotImageFilterISS2ISS2.New()

class itkNotImageFilterISS2ISS2(itkNotImageFilterISS2ISS2_Superclass):
    r"""Proxy of C++ itkNotImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterISS2ISS2_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterISS2ISS2_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: short const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> short"""
        return _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: short const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> short"""
        return _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterISS2ISS2

        Create a new object of the class itkNotImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterISS2ISS2 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_swigregister(itkNotImageFilterISS2ISS2)

def itkNotImageFilterISS3ISS3_New():
    return itkNotImageFilterISS3ISS3.New()

class itkNotImageFilterISS3ISS3(itkNotImageFilterISS3ISS3_Superclass):
    r"""Proxy of C++ itkNotImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterISS3ISS3_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterISS3ISS3_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: short const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> short"""
        return _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: short const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> short"""
        return _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterISS3ISS3

        Create a new object of the class itkNotImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterISS3ISS3 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_swigregister(itkNotImageFilterISS3ISS3)

def itkNotImageFilterISS4ISS4_New():
    return itkNotImageFilterISS4ISS4.New()

class itkNotImageFilterISS4ISS4(itkNotImageFilterISS4ISS4_Superclass):
    r"""Proxy of C++ itkNotImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterISS4ISS4_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterISS4ISS4_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: short const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> short"""
        return _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: short const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> short"""
        return _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterISS4ISS4

        Create a new object of the class itkNotImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterISS4ISS4 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterISS4ISS4_swigregister(itkNotImageFilterISS4ISS4)

def itkNotImageFilterIUC2IUC2_New():
    return itkNotImageFilterIUC2IUC2.New()

class itkNotImageFilterIUC2IUC2(itkNotImageFilterIUC2IUC2_Superclass):
    r"""Proxy of C++ itkNotImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIUC2IUC2_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIUC2IUC2_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: unsigned char const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned char"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: unsigned char const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> unsigned char"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUC2IUC2

        Create a new object of the class itkNotImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUC2IUC2 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_swigregister(itkNotImageFilterIUC2IUC2)

def itkNotImageFilterIUC3IUC3_New():
    return itkNotImageFilterIUC3IUC3.New()

class itkNotImageFilterIUC3IUC3(itkNotImageFilterIUC3IUC3_Superclass):
    r"""Proxy of C++ itkNotImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIUC3IUC3_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIUC3IUC3_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: unsigned char const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned char"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: unsigned char const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> unsigned char"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUC3IUC3

        Create a new object of the class itkNotImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUC3IUC3 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_swigregister(itkNotImageFilterIUC3IUC3)

def itkNotImageFilterIUC4IUC4_New():
    return itkNotImageFilterIUC4IUC4.New()

class itkNotImageFilterIUC4IUC4(itkNotImageFilterIUC4IUC4_Superclass):
    r"""Proxy of C++ itkNotImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIUC4IUC4_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIUC4IUC4_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: unsigned char const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned char"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: unsigned char const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> unsigned char"""
        return _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUC4IUC4

        Create a new object of the class itkNotImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUC4IUC4 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUC4IUC4_swigregister(itkNotImageFilterIUC4IUC4)

def itkNotImageFilterIUS2IUS2_New():
    return itkNotImageFilterIUS2IUS2.New()

class itkNotImageFilterIUS2IUS2(itkNotImageFilterIUS2IUS2_Superclass):
    r"""Proxy of C++ itkNotImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIUS2IUS2_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIUS2IUS2_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: unsigned short const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned short"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: unsigned short const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> unsigned short"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUS2IUS2

        Create a new object of the class itkNotImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUS2IUS2 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_swigregister(itkNotImageFilterIUS2IUS2)

def itkNotImageFilterIUS3IUS3_New():
    return itkNotImageFilterIUS3IUS3.New()

class itkNotImageFilterIUS3IUS3(itkNotImageFilterIUS3IUS3_Superclass):
    r"""Proxy of C++ itkNotImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIUS3IUS3_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIUS3IUS3_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: unsigned short const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned short"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: unsigned short const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> unsigned short"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUS3IUS3

        Create a new object of the class itkNotImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUS3IUS3 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_swigregister(itkNotImageFilterIUS3IUS3)

def itkNotImageFilterIUS4IUS4_New():
    return itkNotImageFilterIUS4IUS4.New()

class itkNotImageFilterIUS4IUS4(itkNotImageFilterIUS4IUS4_Superclass):
    r"""Proxy of C++ itkNotImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNotImageFilterIUS4IUS4_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNotImageFilterIUS4IUS4_Pointer"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_Clone(self)

    def SetBackgroundValue(self, backgroundValue):
        r"""
        SetBackgroundValue(self, backgroundValue)

        Parameters
        ----------
        backgroundValue: unsigned short const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_SetBackgroundValue(self, backgroundValue)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned short"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_GetBackgroundValue(self)

    def SetForegroundValue(self, foregroundValue):
        r"""
        SetForegroundValue(self, foregroundValue)

        Parameters
        ----------
        foregroundValue: unsigned short const &

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_SetForegroundValue(self, foregroundValue)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> unsigned short"""
        return _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_GetForegroundValue(self)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNotImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUS4IUS4

        Create a new object of the class itkNotImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUS4IUS4 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUS4IUS4_swigregister(itkNotImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def not_image_filter(*args: itkt.ImageLike,  background_value: int=..., foreground_value: int=..., functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for NotImageFilter"""
    import itk

    kwarg_typehints = { 'background_value':background_value,'foreground_value':foreground_value,'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.NotImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def not_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.NotImageFilter
    not_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    not_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def unary_functor_image_filter(*args: itkt.ImageLike,  functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for UnaryFunctorImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.UnaryFunctorImageFilter
    unary_functor_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    unary_functor_image_filter.__doc__ = filter_object.__doc__



