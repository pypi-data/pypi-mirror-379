# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKSpatialObjectsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMetaConverterBasePython
else:
    import _itkMetaConverterBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkSpatialObjectBasePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkAffineTransformPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkBoundingBoxPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkMapContainerPython
class itkMetaConverterBase2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMetaConverterBase2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetMetaIOVersion(self, _arg):
        r"""
        SetMetaIOVersion(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase2_SetMetaIOVersion(self, _arg)

    def GetMetaIOVersion(self):
        r"""GetMetaIOVersion(self) -> unsigned int"""
        return _itkMetaConverterBasePython.itkMetaConverterBase2_GetMetaIOVersion(self)

    def ReadMeta(self, name):
        r"""
        ReadMeta(self, name) -> itkSpatialObject2_Pointer

        Parameters
        ----------
        name: char const *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase2_ReadMeta(self, name)

    def WriteMeta(self, spatialObject, name):
        r"""
        WriteMeta(self, spatialObject, name) -> bool

        Parameters
        ----------
        spatialObject: itkSpatialObject2 const *
        name: char const *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase2_WriteMeta(self, spatialObject, name)

    def MetaObjectToSpatialObjectBase(self, mo, rval):
        r"""
        MetaObjectToSpatialObjectBase(self, mo, rval)

        Parameters
        ----------
        mo: MetaObject const *
        rval: itkSpatialObject2_Pointer

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase2_MetaObjectToSpatialObjectBase(self, mo, rval)

    def SpatialObjectToMetaObjectBase(self, spatialObject, mo):
        r"""
        SpatialObjectToMetaObjectBase(self, spatialObject, mo)

        Parameters
        ----------
        spatialObject: itkSpatialObject2_ConstPointer
        mo: MetaObject *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase2_SpatialObjectToMetaObjectBase(self, spatialObject, mo)

    def MetaObjectToSpatialObject(self, mo):
        r"""
        MetaObjectToSpatialObject(self, mo) -> itkSpatialObject2_Pointer

        Parameters
        ----------
        mo: MetaObject const *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase2_MetaObjectToSpatialObject(self, mo)

    def SpatialObjectToMetaObject(self, spatialObject):
        r"""
        SpatialObjectToMetaObject(self, spatialObject) -> MetaObject *

        Parameters
        ----------
        spatialObject: itkSpatialObject2 const *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase2_SpatialObjectToMetaObject(self, spatialObject)

    def SetWriteImagesInSeparateFile(self, _arg):
        r"""
        SetWriteImagesInSeparateFile(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase2_SetWriteImagesInSeparateFile(self, _arg)

    def GetWriteImagesInSeparateFile(self):
        r"""GetWriteImagesInSeparateFile(self) -> bool"""
        return _itkMetaConverterBasePython.itkMetaConverterBase2_GetWriteImagesInSeparateFile(self)

    def WriteImagesInSeparateFileOn(self):
        r"""WriteImagesInSeparateFileOn(self)"""
        return _itkMetaConverterBasePython.itkMetaConverterBase2_WriteImagesInSeparateFileOn(self)

    def WriteImagesInSeparateFileOff(self):
        r"""WriteImagesInSeparateFileOff(self)"""
        return _itkMetaConverterBasePython.itkMetaConverterBase2_WriteImagesInSeparateFileOff(self)

# Register itkMetaConverterBase2 in _itkMetaConverterBasePython:
_itkMetaConverterBasePython.itkMetaConverterBase2_swigregister(itkMetaConverterBase2)
class itkMetaConverterBase3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMetaConverterBase3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetMetaIOVersion(self, _arg):
        r"""
        SetMetaIOVersion(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase3_SetMetaIOVersion(self, _arg)

    def GetMetaIOVersion(self):
        r"""GetMetaIOVersion(self) -> unsigned int"""
        return _itkMetaConverterBasePython.itkMetaConverterBase3_GetMetaIOVersion(self)

    def ReadMeta(self, name):
        r"""
        ReadMeta(self, name) -> itkSpatialObject3_Pointer

        Parameters
        ----------
        name: char const *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase3_ReadMeta(self, name)

    def WriteMeta(self, spatialObject, name):
        r"""
        WriteMeta(self, spatialObject, name) -> bool

        Parameters
        ----------
        spatialObject: itkSpatialObject3 const *
        name: char const *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase3_WriteMeta(self, spatialObject, name)

    def MetaObjectToSpatialObjectBase(self, mo, rval):
        r"""
        MetaObjectToSpatialObjectBase(self, mo, rval)

        Parameters
        ----------
        mo: MetaObject const *
        rval: itkSpatialObject3_Pointer

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase3_MetaObjectToSpatialObjectBase(self, mo, rval)

    def SpatialObjectToMetaObjectBase(self, spatialObject, mo):
        r"""
        SpatialObjectToMetaObjectBase(self, spatialObject, mo)

        Parameters
        ----------
        spatialObject: itkSpatialObject3_ConstPointer
        mo: MetaObject *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase3_SpatialObjectToMetaObjectBase(self, spatialObject, mo)

    def MetaObjectToSpatialObject(self, mo):
        r"""
        MetaObjectToSpatialObject(self, mo) -> itkSpatialObject3_Pointer

        Parameters
        ----------
        mo: MetaObject const *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase3_MetaObjectToSpatialObject(self, mo)

    def SpatialObjectToMetaObject(self, spatialObject):
        r"""
        SpatialObjectToMetaObject(self, spatialObject) -> MetaObject *

        Parameters
        ----------
        spatialObject: itkSpatialObject3 const *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase3_SpatialObjectToMetaObject(self, spatialObject)

    def SetWriteImagesInSeparateFile(self, _arg):
        r"""
        SetWriteImagesInSeparateFile(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase3_SetWriteImagesInSeparateFile(self, _arg)

    def GetWriteImagesInSeparateFile(self):
        r"""GetWriteImagesInSeparateFile(self) -> bool"""
        return _itkMetaConverterBasePython.itkMetaConverterBase3_GetWriteImagesInSeparateFile(self)

    def WriteImagesInSeparateFileOn(self):
        r"""WriteImagesInSeparateFileOn(self)"""
        return _itkMetaConverterBasePython.itkMetaConverterBase3_WriteImagesInSeparateFileOn(self)

    def WriteImagesInSeparateFileOff(self):
        r"""WriteImagesInSeparateFileOff(self)"""
        return _itkMetaConverterBasePython.itkMetaConverterBase3_WriteImagesInSeparateFileOff(self)

# Register itkMetaConverterBase3 in _itkMetaConverterBasePython:
_itkMetaConverterBasePython.itkMetaConverterBase3_swigregister(itkMetaConverterBase3)
class itkMetaConverterBase4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMetaConverterBase4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetMetaIOVersion(self, _arg):
        r"""
        SetMetaIOVersion(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase4_SetMetaIOVersion(self, _arg)

    def GetMetaIOVersion(self):
        r"""GetMetaIOVersion(self) -> unsigned int"""
        return _itkMetaConverterBasePython.itkMetaConverterBase4_GetMetaIOVersion(self)

    def ReadMeta(self, name):
        r"""
        ReadMeta(self, name) -> itkSpatialObject4_Pointer

        Parameters
        ----------
        name: char const *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase4_ReadMeta(self, name)

    def WriteMeta(self, spatialObject, name):
        r"""
        WriteMeta(self, spatialObject, name) -> bool

        Parameters
        ----------
        spatialObject: itkSpatialObject4 const *
        name: char const *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase4_WriteMeta(self, spatialObject, name)

    def MetaObjectToSpatialObjectBase(self, mo, rval):
        r"""
        MetaObjectToSpatialObjectBase(self, mo, rval)

        Parameters
        ----------
        mo: MetaObject const *
        rval: itkSpatialObject4_Pointer

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase4_MetaObjectToSpatialObjectBase(self, mo, rval)

    def SpatialObjectToMetaObjectBase(self, spatialObject, mo):
        r"""
        SpatialObjectToMetaObjectBase(self, spatialObject, mo)

        Parameters
        ----------
        spatialObject: itkSpatialObject4_ConstPointer
        mo: MetaObject *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase4_SpatialObjectToMetaObjectBase(self, spatialObject, mo)

    def MetaObjectToSpatialObject(self, mo):
        r"""
        MetaObjectToSpatialObject(self, mo) -> itkSpatialObject4_Pointer

        Parameters
        ----------
        mo: MetaObject const *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase4_MetaObjectToSpatialObject(self, mo)

    def SpatialObjectToMetaObject(self, spatialObject):
        r"""
        SpatialObjectToMetaObject(self, spatialObject) -> MetaObject *

        Parameters
        ----------
        spatialObject: itkSpatialObject4 const *

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase4_SpatialObjectToMetaObject(self, spatialObject)

    def SetWriteImagesInSeparateFile(self, _arg):
        r"""
        SetWriteImagesInSeparateFile(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMetaConverterBasePython.itkMetaConverterBase4_SetWriteImagesInSeparateFile(self, _arg)

    def GetWriteImagesInSeparateFile(self):
        r"""GetWriteImagesInSeparateFile(self) -> bool"""
        return _itkMetaConverterBasePython.itkMetaConverterBase4_GetWriteImagesInSeparateFile(self)

    def WriteImagesInSeparateFileOn(self):
        r"""WriteImagesInSeparateFileOn(self)"""
        return _itkMetaConverterBasePython.itkMetaConverterBase4_WriteImagesInSeparateFileOn(self)

    def WriteImagesInSeparateFileOff(self):
        r"""WriteImagesInSeparateFileOff(self)"""
        return _itkMetaConverterBasePython.itkMetaConverterBase4_WriteImagesInSeparateFileOff(self)

# Register itkMetaConverterBase4 in _itkMetaConverterBasePython:
_itkMetaConverterBasePython.itkMetaConverterBase4_swigregister(itkMetaConverterBase4)

