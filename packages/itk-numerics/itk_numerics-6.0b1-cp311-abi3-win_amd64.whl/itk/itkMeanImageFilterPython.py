# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKSmoothingPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMeanImageFilterPython
else:
    import _itkMeanImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkBoxImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkMeanImageFilterID2ID2_New():
    return itkMeanImageFilterID2ID2.New()

class itkMeanImageFilterID2ID2(itk.itkBoxImageFilterPython.itkBoxImageFilterID2ID2):
    r"""Proxy of C++ itkMeanImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterID2ID2_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterID2ID2_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterID2ID2_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterID2ID2

        Create a new object of the class itkMeanImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterID2ID2 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterID2ID2_swigregister(itkMeanImageFilterID2ID2)

def itkMeanImageFilterID3ID3_New():
    return itkMeanImageFilterID3ID3.New()

class itkMeanImageFilterID3ID3(itk.itkBoxImageFilterPython.itkBoxImageFilterID3ID3):
    r"""Proxy of C++ itkMeanImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterID3ID3_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterID3ID3_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterID3ID3_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterID3ID3

        Create a new object of the class itkMeanImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterID3ID3 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterID3ID3_swigregister(itkMeanImageFilterID3ID3)

def itkMeanImageFilterID4ID4_New():
    return itkMeanImageFilterID4ID4.New()

class itkMeanImageFilterID4ID4(itk.itkBoxImageFilterPython.itkBoxImageFilterID4ID4):
    r"""Proxy of C++ itkMeanImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterID4ID4_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterID4ID4_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterID4ID4_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterID4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterID4ID4

        Create a new object of the class itkMeanImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterID4ID4 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterID4ID4_swigregister(itkMeanImageFilterID4ID4)

def itkMeanImageFilterIF2IF2_New():
    return itkMeanImageFilterIF2IF2.New()

class itkMeanImageFilterIF2IF2(itk.itkBoxImageFilterPython.itkBoxImageFilterIF2IF2):
    r"""Proxy of C++ itkMeanImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterIF2IF2_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterIF2IF2_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIF2IF2_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterIF2IF2

        Create a new object of the class itkMeanImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterIF2IF2 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterIF2IF2_swigregister(itkMeanImageFilterIF2IF2)

def itkMeanImageFilterIF3IF3_New():
    return itkMeanImageFilterIF3IF3.New()

class itkMeanImageFilterIF3IF3(itk.itkBoxImageFilterPython.itkBoxImageFilterIF3IF3):
    r"""Proxy of C++ itkMeanImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterIF3IF3_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterIF3IF3_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIF3IF3_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterIF3IF3

        Create a new object of the class itkMeanImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterIF3IF3 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterIF3IF3_swigregister(itkMeanImageFilterIF3IF3)

def itkMeanImageFilterIF4IF4_New():
    return itkMeanImageFilterIF4IF4.New()

class itkMeanImageFilterIF4IF4(itk.itkBoxImageFilterPython.itkBoxImageFilterIF4IF4):
    r"""Proxy of C++ itkMeanImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterIF4IF4_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterIF4IF4_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIF4IF4_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterIF4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterIF4IF4

        Create a new object of the class itkMeanImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterIF4IF4 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterIF4IF4_swigregister(itkMeanImageFilterIF4IF4)

def itkMeanImageFilterISS2ISS2_New():
    return itkMeanImageFilterISS2ISS2.New()

class itkMeanImageFilterISS2ISS2(itk.itkBoxImageFilterPython.itkBoxImageFilterISS2ISS2):
    r"""Proxy of C++ itkMeanImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterISS2ISS2_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterISS2ISS2_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterISS2ISS2_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterISS2ISS2

        Create a new object of the class itkMeanImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterISS2ISS2 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterISS2ISS2_swigregister(itkMeanImageFilterISS2ISS2)

def itkMeanImageFilterISS3ISS3_New():
    return itkMeanImageFilterISS3ISS3.New()

class itkMeanImageFilterISS3ISS3(itk.itkBoxImageFilterPython.itkBoxImageFilterISS3ISS3):
    r"""Proxy of C++ itkMeanImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterISS3ISS3_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterISS3ISS3_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterISS3ISS3_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterISS3ISS3

        Create a new object of the class itkMeanImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterISS3ISS3 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterISS3ISS3_swigregister(itkMeanImageFilterISS3ISS3)

def itkMeanImageFilterISS4ISS4_New():
    return itkMeanImageFilterISS4ISS4.New()

class itkMeanImageFilterISS4ISS4(itk.itkBoxImageFilterPython.itkBoxImageFilterISS4ISS4):
    r"""Proxy of C++ itkMeanImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterISS4ISS4_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterISS4ISS4_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterISS4ISS4_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterISS4ISS4

        Create a new object of the class itkMeanImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterISS4ISS4 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterISS4ISS4_swigregister(itkMeanImageFilterISS4ISS4)

def itkMeanImageFilterIUC2IUC2_New():
    return itkMeanImageFilterIUC2IUC2.New()

class itkMeanImageFilterIUC2IUC2(itk.itkBoxImageFilterPython.itkBoxImageFilterIUC2IUC2):
    r"""Proxy of C++ itkMeanImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterIUC2IUC2_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterIUC2IUC2_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIUC2IUC2_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterIUC2IUC2

        Create a new object of the class itkMeanImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterIUC2IUC2 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterIUC2IUC2_swigregister(itkMeanImageFilterIUC2IUC2)

def itkMeanImageFilterIUC3IUC3_New():
    return itkMeanImageFilterIUC3IUC3.New()

class itkMeanImageFilterIUC3IUC3(itk.itkBoxImageFilterPython.itkBoxImageFilterIUC3IUC3):
    r"""Proxy of C++ itkMeanImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterIUC3IUC3_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterIUC3IUC3_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIUC3IUC3_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterIUC3IUC3

        Create a new object of the class itkMeanImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterIUC3IUC3 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterIUC3IUC3_swigregister(itkMeanImageFilterIUC3IUC3)

def itkMeanImageFilterIUC4IUC4_New():
    return itkMeanImageFilterIUC4IUC4.New()

class itkMeanImageFilterIUC4IUC4(itk.itkBoxImageFilterPython.itkBoxImageFilterIUC4IUC4):
    r"""Proxy of C++ itkMeanImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterIUC4IUC4_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterIUC4IUC4_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIUC4IUC4_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterIUC4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterIUC4IUC4

        Create a new object of the class itkMeanImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterIUC4IUC4 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterIUC4IUC4_swigregister(itkMeanImageFilterIUC4IUC4)

def itkMeanImageFilterIUS2IUS2_New():
    return itkMeanImageFilterIUS2IUS2.New()

class itkMeanImageFilterIUS2IUS2(itk.itkBoxImageFilterPython.itkBoxImageFilterIUS2IUS2):
    r"""Proxy of C++ itkMeanImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterIUS2IUS2_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterIUS2IUS2_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIUS2IUS2_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterIUS2IUS2

        Create a new object of the class itkMeanImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterIUS2IUS2 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterIUS2IUS2_swigregister(itkMeanImageFilterIUS2IUS2)

def itkMeanImageFilterIUS3IUS3_New():
    return itkMeanImageFilterIUS3IUS3.New()

class itkMeanImageFilterIUS3IUS3(itk.itkBoxImageFilterPython.itkBoxImageFilterIUS3IUS3):
    r"""Proxy of C++ itkMeanImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterIUS3IUS3_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterIUS3IUS3_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIUS3IUS3_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterIUS3IUS3

        Create a new object of the class itkMeanImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterIUS3IUS3 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterIUS3IUS3_swigregister(itkMeanImageFilterIUS3IUS3)

def itkMeanImageFilterIUS4IUS4_New():
    return itkMeanImageFilterIUS4IUS4.New()

class itkMeanImageFilterIUS4IUS4(itk.itkBoxImageFilterPython.itkBoxImageFilterIUS4IUS4):
    r"""Proxy of C++ itkMeanImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanImageFilterIUS4IUS4_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanImageFilterIUS4IUS4_Pointer"""
        return _itkMeanImageFilterPython.itkMeanImageFilterIUS4IUS4_Clone(self)
    InputHasNumericTraitsCheck = _itkMeanImageFilterPython.itkMeanImageFilterIUS4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMeanImageFilterPython.delete_itkMeanImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanImageFilterPython.itkMeanImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanImageFilterIUS4IUS4

        Create a new object of the class itkMeanImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanImageFilterIUS4IUS4 in _itkMeanImageFilterPython:
_itkMeanImageFilterPython.itkMeanImageFilterIUS4IUS4_swigregister(itkMeanImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def mean_image_filter(*args: itkt.ImageLike,  radius: Union[int, Sequence[int]]=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for MeanImageFilter"""
    import itk

    kwarg_typehints = { 'radius':radius }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MeanImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def mean_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKSmoothing.MeanImageFilter
    mean_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    mean_image_filter.__doc__ = filter_object.__doc__



