# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkModulusImageFilterPython
else:
    import _itkModulusImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkBinaryGeneratorImageFilterPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkModulusImageFilterISS2ISS2_New():
    return itkModulusImageFilterISS2ISS2.New()

class itkModulusImageFilterISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""Proxy of C++ itkModulusImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkModulusImageFilterISS2ISS2_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkModulusImageFilterISS2ISS2_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2_Clone(self)

    def SetDividend(self, _arg):
        r"""
        SetDividend(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2_SetDividend(self, _arg)

    def GetDividend(self):
        r"""GetDividend(self) -> short const &"""
        return _itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2_GetDividend(self)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkModulusImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterISS2ISS2

        Create a new object of the class itkModulusImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterISS2ISS2 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterISS2ISS2_swigregister(itkModulusImageFilterISS2ISS2)

def itkModulusImageFilterISS3ISS3_New():
    return itkModulusImageFilterISS3ISS3.New()

class itkModulusImageFilterISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""Proxy of C++ itkModulusImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkModulusImageFilterISS3ISS3_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkModulusImageFilterISS3ISS3_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3_Clone(self)

    def SetDividend(self, _arg):
        r"""
        SetDividend(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3_SetDividend(self, _arg)

    def GetDividend(self):
        r"""GetDividend(self) -> short const &"""
        return _itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3_GetDividend(self)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkModulusImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterISS3ISS3

        Create a new object of the class itkModulusImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterISS3ISS3 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterISS3ISS3_swigregister(itkModulusImageFilterISS3ISS3)

def itkModulusImageFilterISS4ISS4_New():
    return itkModulusImageFilterISS4ISS4.New()

class itkModulusImageFilterISS4ISS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS4ISS4ISS4):
    r"""Proxy of C++ itkModulusImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkModulusImageFilterISS4ISS4_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkModulusImageFilterISS4ISS4_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterISS4ISS4_Clone(self)

    def SetDividend(self, _arg):
        r"""
        SetDividend(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterISS4ISS4_SetDividend(self, _arg)

    def GetDividend(self):
        r"""GetDividend(self) -> short const &"""
        return _itkModulusImageFilterPython.itkModulusImageFilterISS4ISS4_GetDividend(self)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkModulusImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterISS4ISS4

        Create a new object of the class itkModulusImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterISS4ISS4 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterISS4ISS4_swigregister(itkModulusImageFilterISS4ISS4)

def itkModulusImageFilterIUC2IUC2_New():
    return itkModulusImageFilterIUC2IUC2.New()

class itkModulusImageFilterIUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""Proxy of C++ itkModulusImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkModulusImageFilterIUC2IUC2_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkModulusImageFilterIUC2IUC2_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2_Clone(self)

    def SetDividend(self, _arg):
        r"""
        SetDividend(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2_SetDividend(self, _arg)

    def GetDividend(self):
        r"""GetDividend(self) -> unsigned char const &"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2_GetDividend(self)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkModulusImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterIUC2IUC2

        Create a new object of the class itkModulusImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterIUC2IUC2 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterIUC2IUC2_swigregister(itkModulusImageFilterIUC2IUC2)

def itkModulusImageFilterIUC3IUC3_New():
    return itkModulusImageFilterIUC3IUC3.New()

class itkModulusImageFilterIUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""Proxy of C++ itkModulusImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkModulusImageFilterIUC3IUC3_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkModulusImageFilterIUC3IUC3_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3_Clone(self)

    def SetDividend(self, _arg):
        r"""
        SetDividend(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3_SetDividend(self, _arg)

    def GetDividend(self):
        r"""GetDividend(self) -> unsigned char const &"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3_GetDividend(self)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkModulusImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterIUC3IUC3

        Create a new object of the class itkModulusImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterIUC3IUC3 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterIUC3IUC3_swigregister(itkModulusImageFilterIUC3IUC3)

def itkModulusImageFilterIUC4IUC4_New():
    return itkModulusImageFilterIUC4IUC4.New()

class itkModulusImageFilterIUC4IUC4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC4IUC4IUC4):
    r"""Proxy of C++ itkModulusImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkModulusImageFilterIUC4IUC4_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkModulusImageFilterIUC4IUC4_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC4IUC4_Clone(self)

    def SetDividend(self, _arg):
        r"""
        SetDividend(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC4IUC4_SetDividend(self, _arg)

    def GetDividend(self):
        r"""GetDividend(self) -> unsigned char const &"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC4IUC4_GetDividend(self)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterIUC4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkModulusImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterIUC4IUC4

        Create a new object of the class itkModulusImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterIUC4IUC4 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterIUC4IUC4_swigregister(itkModulusImageFilterIUC4IUC4)

def itkModulusImageFilterIUS2IUS2_New():
    return itkModulusImageFilterIUS2IUS2.New()

class itkModulusImageFilterIUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""Proxy of C++ itkModulusImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkModulusImageFilterIUS2IUS2_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkModulusImageFilterIUS2IUS2_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2_Clone(self)

    def SetDividend(self, _arg):
        r"""
        SetDividend(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2_SetDividend(self, _arg)

    def GetDividend(self):
        r"""GetDividend(self) -> unsigned short const &"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2_GetDividend(self)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkModulusImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterIUS2IUS2

        Create a new object of the class itkModulusImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterIUS2IUS2 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterIUS2IUS2_swigregister(itkModulusImageFilterIUS2IUS2)

def itkModulusImageFilterIUS3IUS3_New():
    return itkModulusImageFilterIUS3IUS3.New()

class itkModulusImageFilterIUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""Proxy of C++ itkModulusImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkModulusImageFilterIUS3IUS3_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkModulusImageFilterIUS3IUS3_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3_Clone(self)

    def SetDividend(self, _arg):
        r"""
        SetDividend(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3_SetDividend(self, _arg)

    def GetDividend(self):
        r"""GetDividend(self) -> unsigned short const &"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3_GetDividend(self)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkModulusImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterIUS3IUS3

        Create a new object of the class itkModulusImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterIUS3IUS3 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterIUS3IUS3_swigregister(itkModulusImageFilterIUS3IUS3)

def itkModulusImageFilterIUS4IUS4_New():
    return itkModulusImageFilterIUS4IUS4.New()

class itkModulusImageFilterIUS4IUS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS4IUS4IUS4):
    r"""Proxy of C++ itkModulusImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkModulusImageFilterIUS4IUS4_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkModulusImageFilterIUS4IUS4_Pointer"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS4IUS4_Clone(self)

    def SetDividend(self, _arg):
        r"""
        SetDividend(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS4IUS4_SetDividend(self, _arg)

    def GetDividend(self):
        r"""GetDividend(self) -> unsigned short const &"""
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS4IUS4_GetDividend(self)
    InputHasNumericTraitsCheck = _itkModulusImageFilterPython.itkModulusImageFilterIUS4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkModulusImageFilterPython.delete_itkModulusImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkModulusImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkModulusImageFilterPython.itkModulusImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkModulusImageFilterIUS4IUS4

        Create a new object of the class itkModulusImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkModulusImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkModulusImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkModulusImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkModulusImageFilterIUS4IUS4 in _itkModulusImageFilterPython:
_itkModulusImageFilterPython.itkModulusImageFilterIUS4IUS4_swigregister(itkModulusImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def modulus_image_filter(*args: itkt.ImageLike,  dividend: int=..., constant1: int=..., constant2: int=..., constant: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ModulusImageFilter"""
    import itk

    kwarg_typehints = { 'dividend':dividend,'constant1':constant1,'constant2':constant2,'constant':constant }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ModulusImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def modulus_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.ModulusImageFilter
    modulus_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    modulus_image_filter.__doc__ = filter_object.__doc__



