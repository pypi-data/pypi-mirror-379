# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSymmetricEigenAnalysisImageFilterPython
else:
    import _itkSymmetricEigenAnalysisImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
class itkSymmetricEigenAnalysisEnums(object):
    r"""Proxy of C++ itkSymmetricEigenAnalysisEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EigenValueOrder_OrderByValue = _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisEnums_EigenValueOrder_OrderByValue
    
    EigenValueOrder_OrderByMagnitude = _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisEnums_EigenValueOrder_OrderByMagnitude
    
    EigenValueOrder_DoNotOrder = _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisEnums_EigenValueOrder_DoNotOrder
    

    def __init__(self, *args):
        r"""
        __init__(self) -> itkSymmetricEigenAnalysisEnums
        __init__(self, arg0) -> itkSymmetricEigenAnalysisEnums

        Parameters
        ----------
        arg0: itkSymmetricEigenAnalysisEnums const &

        """
        _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisEnums_swiginit(self, _itkSymmetricEigenAnalysisImageFilterPython.new_itkSymmetricEigenAnalysisEnums(*args))
    __swig_destroy__ = _itkSymmetricEigenAnalysisImageFilterPython.delete_itkSymmetricEigenAnalysisEnums

# Register itkSymmetricEigenAnalysisEnums in _itkSymmetricEigenAnalysisImageFilterPython:
_itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisEnums_swigregister(itkSymmetricEigenAnalysisEnums)

def itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass_New():
    return itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass.New()

class itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterISSRTD22ICVD22):
    r"""Proxy of C++ itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass_Pointer"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass_Pointer"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::SymmetricEigenAnalysisFunction< itk::SymmetricSecondRankTensor< double,2 >,itk::CovariantVector< double,2 > >
        GetFunctor(self) -> itk::Functor::SymmetricEigenAnalysisFunction< itk::SymmetricSecondRankTensor< double,2 >,itk::CovariantVector< double,2 > > const &
        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::SymmetricEigenAnalysisFunction< itk::SymmetricSecondRankTensor< double,2 >,itk::CovariantVector< double,2 > > const &

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSymmetricEigenAnalysisImageFilterPython.delete_itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass

        Create a new object of the class itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass in _itkSymmetricEigenAnalysisImageFilterPython:
_itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass_swigregister(itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass)

def itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass_New():
    return itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass.New()

class itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterISSRTD33ICVD33):
    r"""Proxy of C++ itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass_Pointer"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass_Pointer"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::SymmetricEigenAnalysisFunction< itk::SymmetricSecondRankTensor< double >,itk::CovariantVector< double > >
        GetFunctor(self) -> itk::Functor::SymmetricEigenAnalysisFunction< itk::SymmetricSecondRankTensor< double >,itk::CovariantVector< double > > const &
        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::SymmetricEigenAnalysisFunction< itk::SymmetricSecondRankTensor< double >,itk::CovariantVector< double > > const &

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSymmetricEigenAnalysisImageFilterPython.delete_itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass

        Create a new object of the class itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass in _itkSymmetricEigenAnalysisImageFilterPython:
_itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass_swigregister(itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass)

def itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass_New():
    return itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass.New()

class itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterISSRTD44ICVD44):
    r"""Proxy of C++ itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass_Pointer"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass_Pointer"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::SymmetricEigenAnalysisFunction< itk::SymmetricSecondRankTensor< double,4 >,itk::CovariantVector< double,4 > >
        GetFunctor(self) -> itk::Functor::SymmetricEigenAnalysisFunction< itk::SymmetricSecondRankTensor< double,4 >,itk::CovariantVector< double,4 > > const &
        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::SymmetricEigenAnalysisFunction< itk::SymmetricSecondRankTensor< double,4 >,itk::CovariantVector< double,4 > > const &

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSymmetricEigenAnalysisImageFilterPython.delete_itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass

        Create a new object of the class itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass in _itkSymmetricEigenAnalysisImageFilterPython:
_itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass_swigregister(itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass)

def itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_New():
    return itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22.New()

class itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22(itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Superclass):
    r"""Proxy of C++ itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def OrderEigenValuesBy(self, order):
        r"""
        OrderEigenValuesBy(self, order)

        Parameters
        ----------
        order: enum itkSymmetricEigenAnalysisEnums::EigenValueOrder

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_OrderEigenValuesBy(self, order)

    def SetOrderEigenValuesBy(self, order):
        r"""
        SetOrderEigenValuesBy(self, order)

        Parameters
        ----------
        order: enum itkSymmetricEigenAnalysisEnums::EigenValueOrder

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_SetOrderEigenValuesBy(self, order)

    def GetOrderEigenValuesBy(self):
        r"""GetOrderEigenValuesBy(self) -> itkSymmetricEigenAnalysisEnums::EigenValueOrder"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_GetOrderEigenValuesBy(self)

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Pointer"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Pointer"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_Clone(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_PrintSelf(self, os, indent)

    def SetDimension(self, p):
        r"""
        SetDimension(self, p)

        Parameters
        ----------
        p: unsigned int

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_SetDimension(self, p)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_GetDimension(self)
    InputHasNumericTraitsCheck = _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSymmetricEigenAnalysisImageFilterPython.delete_itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22

        Create a new object of the class itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22 in _itkSymmetricEigenAnalysisImageFilterPython:
_itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22_swigregister(itkSymmetricEigenAnalysisImageFilterISSRTD22ICVD22)

def itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_New():
    return itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33.New()

class itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33(itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Superclass):
    r"""Proxy of C++ itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def OrderEigenValuesBy(self, order):
        r"""
        OrderEigenValuesBy(self, order)

        Parameters
        ----------
        order: enum itkSymmetricEigenAnalysisEnums::EigenValueOrder

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_OrderEigenValuesBy(self, order)

    def SetOrderEigenValuesBy(self, order):
        r"""
        SetOrderEigenValuesBy(self, order)

        Parameters
        ----------
        order: enum itkSymmetricEigenAnalysisEnums::EigenValueOrder

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_SetOrderEigenValuesBy(self, order)

    def GetOrderEigenValuesBy(self):
        r"""GetOrderEigenValuesBy(self) -> itkSymmetricEigenAnalysisEnums::EigenValueOrder"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_GetOrderEigenValuesBy(self)

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Pointer"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Pointer"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_Clone(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_PrintSelf(self, os, indent)

    def SetDimension(self, p):
        r"""
        SetDimension(self, p)

        Parameters
        ----------
        p: unsigned int

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_SetDimension(self, p)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_GetDimension(self)
    InputHasNumericTraitsCheck = _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSymmetricEigenAnalysisImageFilterPython.delete_itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33

        Create a new object of the class itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33 in _itkSymmetricEigenAnalysisImageFilterPython:
_itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33_swigregister(itkSymmetricEigenAnalysisImageFilterISSRTD33ICVD33)

def itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_New():
    return itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44.New()

class itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44(itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Superclass):
    r"""Proxy of C++ itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def OrderEigenValuesBy(self, order):
        r"""
        OrderEigenValuesBy(self, order)

        Parameters
        ----------
        order: enum itkSymmetricEigenAnalysisEnums::EigenValueOrder

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_OrderEigenValuesBy(self, order)

    def SetOrderEigenValuesBy(self, order):
        r"""
        SetOrderEigenValuesBy(self, order)

        Parameters
        ----------
        order: enum itkSymmetricEigenAnalysisEnums::EigenValueOrder

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_SetOrderEigenValuesBy(self, order)

    def GetOrderEigenValuesBy(self):
        r"""GetOrderEigenValuesBy(self) -> itkSymmetricEigenAnalysisEnums::EigenValueOrder"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_GetOrderEigenValuesBy(self)

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Pointer"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Pointer"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_Clone(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_PrintSelf(self, os, indent)

    def SetDimension(self, p):
        r"""
        SetDimension(self, p)

        Parameters
        ----------
        p: unsigned int

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_SetDimension(self, p)

    def GetDimension(self):
        r"""GetDimension(self) -> unsigned int"""
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_GetDimension(self)
    InputHasNumericTraitsCheck = _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSymmetricEigenAnalysisImageFilterPython.delete_itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44

        Create a new object of the class itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44 in _itkSymmetricEigenAnalysisImageFilterPython:
_itkSymmetricEigenAnalysisImageFilterPython.itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44_swigregister(itkSymmetricEigenAnalysisImageFilterISSRTD44ICVD44)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def symmetric_eigen_analysis_image_filter(*args: itkt.ImageLike,  order_eigen_values_by=..., dimension: int=..., functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SymmetricEigenAnalysisImageFilter"""
    import itk

    kwarg_typehints = { 'order_eigen_values_by':order_eigen_values_by,'dimension':dimension,'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SymmetricEigenAnalysisImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def symmetric_eigen_analysis_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.SymmetricEigenAnalysisImageFilter
    symmetric_eigen_analysis_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    symmetric_eigen_analysis_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def unary_functor_image_filter(*args: itkt.ImageLike,  functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for UnaryFunctorImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.UnaryFunctorImageFilter
    unary_functor_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    unary_functor_image_filter.__doc__ = filter_object.__doc__



