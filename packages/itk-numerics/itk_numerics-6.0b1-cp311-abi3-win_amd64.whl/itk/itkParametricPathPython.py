# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKPathPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkParametricPathPython
else:
    import _itkParametricPathPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkPathBasePython
import itk.itkContinuousIndexPython
class itkParametricPath2(itk.itkPathBasePython.itkPathDCID22):
    r"""Proxy of C++ itkParametricPath2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def EvaluateDerivative(self, input):
        r"""
        EvaluateDerivative(self, input) -> itkVectorD2

        Parameters
        ----------
        input: double const &

        """
        return _itkParametricPathPython.itkParametricPath2_EvaluateDerivative(self, input)

    def SetDefaultInputStepSize(self, _arg):
        r"""
        SetDefaultInputStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkParametricPathPython.itkParametricPath2_SetDefaultInputStepSize(self, _arg)

    def GetDefaultInputStepSize(self):
        r"""GetDefaultInputStepSize(self) -> double const &"""
        return _itkParametricPathPython.itkParametricPath2_GetDefaultInputStepSize(self)
    __swig_destroy__ = _itkParametricPathPython.delete_itkParametricPath2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParametricPath2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParametricPathPython.itkParametricPath2_cast(obj)

# Register itkParametricPath2 in _itkParametricPathPython:
_itkParametricPathPython.itkParametricPath2_swigregister(itkParametricPath2)
class itkParametricPath3(itk.itkPathBasePython.itkPathDCID33):
    r"""Proxy of C++ itkParametricPath3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def EvaluateDerivative(self, input):
        r"""
        EvaluateDerivative(self, input) -> itkVectorD3

        Parameters
        ----------
        input: double const &

        """
        return _itkParametricPathPython.itkParametricPath3_EvaluateDerivative(self, input)

    def SetDefaultInputStepSize(self, _arg):
        r"""
        SetDefaultInputStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkParametricPathPython.itkParametricPath3_SetDefaultInputStepSize(self, _arg)

    def GetDefaultInputStepSize(self):
        r"""GetDefaultInputStepSize(self) -> double const &"""
        return _itkParametricPathPython.itkParametricPath3_GetDefaultInputStepSize(self)
    __swig_destroy__ = _itkParametricPathPython.delete_itkParametricPath3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParametricPath3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParametricPathPython.itkParametricPath3_cast(obj)

# Register itkParametricPath3 in _itkParametricPathPython:
_itkParametricPathPython.itkParametricPath3_swigregister(itkParametricPath3)
class itkParametricPath4(itk.itkPathBasePython.itkPathDCID44):
    r"""Proxy of C++ itkParametricPath4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def EvaluateDerivative(self, input):
        r"""
        EvaluateDerivative(self, input) -> itkVectorD4

        Parameters
        ----------
        input: double const &

        """
        return _itkParametricPathPython.itkParametricPath4_EvaluateDerivative(self, input)

    def SetDefaultInputStepSize(self, _arg):
        r"""
        SetDefaultInputStepSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkParametricPathPython.itkParametricPath4_SetDefaultInputStepSize(self, _arg)

    def GetDefaultInputStepSize(self):
        r"""GetDefaultInputStepSize(self) -> double const &"""
        return _itkParametricPathPython.itkParametricPath4_GetDefaultInputStepSize(self)
    __swig_destroy__ = _itkParametricPathPython.delete_itkParametricPath4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParametricPath4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParametricPathPython.itkParametricPath4_cast(obj)

# Register itkParametricPath4 in _itkParametricPathPython:
_itkParametricPathPython.itkParametricPath4_swigregister(itkParametricPath4)

