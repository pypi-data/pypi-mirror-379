# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMagnitudeAndPhaseToComplexImageFilterPython
else:
    import _itkMagnitudeAndPhaseToComplexImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkBinaryGeneratorImageFilterPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2_New():
    return itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2.New()

class itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ICD2):
    r"""Proxy of C++ itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkMagnitudeAndPhaseToComplexImageFilterPython.delete_itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2

        Create a new object of the class itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2 in _itkMagnitudeAndPhaseToComplexImageFilterPython:
_itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2_swigregister(itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICD2)

def itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2_New():
    return itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2.New()

class itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ICF2):
    r"""Proxy of C++ itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkMagnitudeAndPhaseToComplexImageFilterPython.delete_itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2

        Create a new object of the class itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2 in _itkMagnitudeAndPhaseToComplexImageFilterPython:
_itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2_swigregister(itkMagnitudeAndPhaseToComplexImageFilterID2ID2ICF2)

def itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3_New():
    return itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3.New()

class itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ICD3):
    r"""Proxy of C++ itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkMagnitudeAndPhaseToComplexImageFilterPython.delete_itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3

        Create a new object of the class itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3 in _itkMagnitudeAndPhaseToComplexImageFilterPython:
_itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3_swigregister(itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICD3)

def itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3_New():
    return itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3.New()

class itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ICF3):
    r"""Proxy of C++ itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkMagnitudeAndPhaseToComplexImageFilterPython.delete_itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3

        Create a new object of the class itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3 in _itkMagnitudeAndPhaseToComplexImageFilterPython:
_itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3_swigregister(itkMagnitudeAndPhaseToComplexImageFilterID3ID3ICF3)

def itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4_New():
    return itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4.New()

class itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID4ID4ICD4):
    r"""Proxy of C++ itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkMagnitudeAndPhaseToComplexImageFilterPython.delete_itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4

        Create a new object of the class itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4 in _itkMagnitudeAndPhaseToComplexImageFilterPython:
_itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4_swigregister(itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICD4)

def itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4_New():
    return itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4.New()

class itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID4ID4ICF4):
    r"""Proxy of C++ itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkMagnitudeAndPhaseToComplexImageFilterPython.delete_itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4

        Create a new object of the class itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4 in _itkMagnitudeAndPhaseToComplexImageFilterPython:
_itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4_swigregister(itkMagnitudeAndPhaseToComplexImageFilterID4ID4ICF4)

def itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2_New():
    return itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2.New()

class itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2ICD2):
    r"""Proxy of C++ itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkMagnitudeAndPhaseToComplexImageFilterPython.delete_itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2

        Create a new object of the class itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2 in _itkMagnitudeAndPhaseToComplexImageFilterPython:
_itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2_swigregister(itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICD2)

def itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2_New():
    return itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2.New()

class itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2ICF2):
    r"""Proxy of C++ itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkMagnitudeAndPhaseToComplexImageFilterPython.delete_itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2

        Create a new object of the class itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2 in _itkMagnitudeAndPhaseToComplexImageFilterPython:
_itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2_swigregister(itkMagnitudeAndPhaseToComplexImageFilterIF2IF2ICF2)

def itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3_New():
    return itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3.New()

class itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3ICD3):
    r"""Proxy of C++ itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkMagnitudeAndPhaseToComplexImageFilterPython.delete_itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3

        Create a new object of the class itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3 in _itkMagnitudeAndPhaseToComplexImageFilterPython:
_itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3_swigregister(itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICD3)

def itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3_New():
    return itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3.New()

class itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3ICF3):
    r"""Proxy of C++ itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkMagnitudeAndPhaseToComplexImageFilterPython.delete_itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3

        Create a new object of the class itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3 in _itkMagnitudeAndPhaseToComplexImageFilterPython:
_itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3_swigregister(itkMagnitudeAndPhaseToComplexImageFilterIF3IF3ICF3)

def itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4_New():
    return itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4.New()

class itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF4IF4ICD4):
    r"""Proxy of C++ itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkMagnitudeAndPhaseToComplexImageFilterPython.delete_itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4

        Create a new object of the class itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4 in _itkMagnitudeAndPhaseToComplexImageFilterPython:
_itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4_swigregister(itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICD4)

def itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4_New():
    return itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4.New()

class itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF4IF4ICF4):
    r"""Proxy of C++ itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4_Pointer"""
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkMagnitudeAndPhaseToComplexImageFilterPython.delete_itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4

        Create a new object of the class itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4 in _itkMagnitudeAndPhaseToComplexImageFilterPython:
_itkMagnitudeAndPhaseToComplexImageFilterPython.itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4_swigregister(itkMagnitudeAndPhaseToComplexImageFilterIF4IF4ICF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def magnitude_and_phase_to_complex_image_filter(*args: itkt.ImageLike,  constant1: float=..., constant2: float=..., constant: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for MagnitudeAndPhaseToComplexImageFilter"""
    import itk

    kwarg_typehints = { 'constant1':constant1,'constant2':constant2,'constant':constant }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MagnitudeAndPhaseToComplexImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def magnitude_and_phase_to_complex_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.MagnitudeAndPhaseToComplexImageFilter
    magnitude_and_phase_to_complex_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    magnitude_and_phase_to_complex_image_filter.__doc__ = filter_object.__doc__



