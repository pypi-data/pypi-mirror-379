# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLog10ImageFilterPython
else:
    import _itkLog10ImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkUnaryGeneratorImageFilterPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython

def itkLog10ImageFilterID2ID2_New():
    return itkLog10ImageFilterID2ID2.New()

class itkLog10ImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""Proxy of C++ itkLog10ImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterID2ID2_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterID2ID2_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterID2ID2_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterID2ID2

        Create a new object of the class itkLog10ImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterID2ID2 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterID2ID2_swigregister(itkLog10ImageFilterID2ID2)

def itkLog10ImageFilterID3ID3_New():
    return itkLog10ImageFilterID3ID3.New()

class itkLog10ImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""Proxy of C++ itkLog10ImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterID3ID3_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterID3ID3_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterID3ID3_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterID3ID3

        Create a new object of the class itkLog10ImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterID3ID3 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterID3ID3_swigregister(itkLog10ImageFilterID3ID3)

def itkLog10ImageFilterID4ID4_New():
    return itkLog10ImageFilterID4ID4.New()

class itkLog10ImageFilterID4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID4ID4):
    r"""Proxy of C++ itkLog10ImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterID4ID4_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterID4ID4_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterID4ID4_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterID4ID4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterID4ID4

        Create a new object of the class itkLog10ImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterID4ID4 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterID4ID4_swigregister(itkLog10ImageFilterID4ID4)

def itkLog10ImageFilterIF2IF2_New():
    return itkLog10ImageFilterIF2IF2.New()

class itkLog10ImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""Proxy of C++ itkLog10ImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterIF2IF2_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterIF2IF2_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIF2IF2_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterIF2IF2

        Create a new object of the class itkLog10ImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterIF2IF2 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterIF2IF2_swigregister(itkLog10ImageFilterIF2IF2)

def itkLog10ImageFilterIF3IF3_New():
    return itkLog10ImageFilterIF3IF3.New()

class itkLog10ImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""Proxy of C++ itkLog10ImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterIF3IF3_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterIF3IF3_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIF3IF3_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterIF3IF3

        Create a new object of the class itkLog10ImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterIF3IF3 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterIF3IF3_swigregister(itkLog10ImageFilterIF3IF3)

def itkLog10ImageFilterIF4IF4_New():
    return itkLog10ImageFilterIF4IF4.New()

class itkLog10ImageFilterIF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF4IF4):
    r"""Proxy of C++ itkLog10ImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterIF4IF4_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterIF4IF4_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIF4IF4_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIF4IF4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterIF4IF4

        Create a new object of the class itkLog10ImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterIF4IF4 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterIF4IF4_swigregister(itkLog10ImageFilterIF4IF4)

def itkLog10ImageFilterISS2ISS2_New():
    return itkLog10ImageFilterISS2ISS2.New()

class itkLog10ImageFilterISS2ISS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    r"""Proxy of C++ itkLog10ImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterISS2ISS2_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterISS2ISS2_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterISS2ISS2_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterISS2ISS2

        Create a new object of the class itkLog10ImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterISS2ISS2 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterISS2ISS2_swigregister(itkLog10ImageFilterISS2ISS2)

def itkLog10ImageFilterISS3ISS3_New():
    return itkLog10ImageFilterISS3ISS3.New()

class itkLog10ImageFilterISS3ISS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    r"""Proxy of C++ itkLog10ImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterISS3ISS3_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterISS3ISS3_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterISS3ISS3_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterISS3ISS3

        Create a new object of the class itkLog10ImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterISS3ISS3 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterISS3ISS3_swigregister(itkLog10ImageFilterISS3ISS3)

def itkLog10ImageFilterISS4ISS4_New():
    return itkLog10ImageFilterISS4ISS4.New()

class itkLog10ImageFilterISS4ISS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS4ISS4):
    r"""Proxy of C++ itkLog10ImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterISS4ISS4_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterISS4ISS4_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterISS4ISS4_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterISS4ISS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterISS4ISS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterISS4ISS4

        Create a new object of the class itkLog10ImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterISS4ISS4 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterISS4ISS4_swigregister(itkLog10ImageFilterISS4ISS4)

def itkLog10ImageFilterIUC2IUC2_New():
    return itkLog10ImageFilterIUC2IUC2.New()

class itkLog10ImageFilterIUC2IUC2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    r"""Proxy of C++ itkLog10ImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterIUC2IUC2_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterIUC2IUC2_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUC2IUC2_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterIUC2IUC2

        Create a new object of the class itkLog10ImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterIUC2IUC2 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterIUC2IUC2_swigregister(itkLog10ImageFilterIUC2IUC2)

def itkLog10ImageFilterIUC3IUC3_New():
    return itkLog10ImageFilterIUC3IUC3.New()

class itkLog10ImageFilterIUC3IUC3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    r"""Proxy of C++ itkLog10ImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterIUC3IUC3_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterIUC3IUC3_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUC3IUC3_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterIUC3IUC3

        Create a new object of the class itkLog10ImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterIUC3IUC3 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterIUC3IUC3_swigregister(itkLog10ImageFilterIUC3IUC3)

def itkLog10ImageFilterIUC4IUC4_New():
    return itkLog10ImageFilterIUC4IUC4.New()

class itkLog10ImageFilterIUC4IUC4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC4IUC4):
    r"""Proxy of C++ itkLog10ImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterIUC4IUC4_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterIUC4IUC4_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUC4IUC4_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIUC4IUC4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIUC4IUC4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterIUC4IUC4

        Create a new object of the class itkLog10ImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterIUC4IUC4 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterIUC4IUC4_swigregister(itkLog10ImageFilterIUC4IUC4)

def itkLog10ImageFilterIUS2IUS2_New():
    return itkLog10ImageFilterIUS2IUS2.New()

class itkLog10ImageFilterIUS2IUS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    r"""Proxy of C++ itkLog10ImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterIUS2IUS2_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterIUS2IUS2_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUS2IUS2_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterIUS2IUS2

        Create a new object of the class itkLog10ImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterIUS2IUS2 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterIUS2IUS2_swigregister(itkLog10ImageFilterIUS2IUS2)

def itkLog10ImageFilterIUS3IUS3_New():
    return itkLog10ImageFilterIUS3IUS3.New()

class itkLog10ImageFilterIUS3IUS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    r"""Proxy of C++ itkLog10ImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterIUS3IUS3_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterIUS3IUS3_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUS3IUS3_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterIUS3IUS3

        Create a new object of the class itkLog10ImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterIUS3IUS3 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterIUS3IUS3_swigregister(itkLog10ImageFilterIUS3IUS3)

def itkLog10ImageFilterIUS4IUS4_New():
    return itkLog10ImageFilterIUS4IUS4.New()

class itkLog10ImageFilterIUS4IUS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS4IUS4):
    r"""Proxy of C++ itkLog10ImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLog10ImageFilterIUS4IUS4_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLog10ImageFilterIUS4IUS4_Pointer"""
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUS4IUS4_Clone(self)
    InputConvertibleToDoubleCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIUS4IUS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLog10ImageFilterPython.itkLog10ImageFilterIUS4IUS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLog10ImageFilterPython.delete_itkLog10ImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLog10ImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLog10ImageFilterPython.itkLog10ImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLog10ImageFilterIUS4IUS4

        Create a new object of the class itkLog10ImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLog10ImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLog10ImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLog10ImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLog10ImageFilterIUS4IUS4 in _itkLog10ImageFilterPython:
_itkLog10ImageFilterPython.itkLog10ImageFilterIUS4IUS4_swigregister(itkLog10ImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def log10_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for Log10ImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.Log10ImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def log10_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.Log10ImageFilter
    log10_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    log10_image_filter.__doc__ = filter_object.__doc__



