# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkComplexToRealImageFilterPython
else:
    import _itkComplexToRealImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkUnaryGeneratorImageFilterPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython

def itkComplexToRealImageFilterICD2ID2_New():
    return itkComplexToRealImageFilterICD2ID2.New()

class itkComplexToRealImageFilterICD2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICD2ID2):
    r"""Proxy of C++ itkComplexToRealImageFilterICD2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToRealImageFilterICD2ID2_Pointer"""
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToRealImageFilterICD2ID2_Pointer"""
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD2ID2_Clone(self)
    InputConvertibleToOutputCheck = _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkComplexToRealImageFilterPython.delete_itkComplexToRealImageFilterICD2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToRealImageFilterICD2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToRealImageFilterICD2ID2

        Create a new object of the class itkComplexToRealImageFilterICD2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToRealImageFilterICD2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToRealImageFilterICD2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToRealImageFilterICD2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToRealImageFilterICD2ID2 in _itkComplexToRealImageFilterPython:
_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD2ID2_swigregister(itkComplexToRealImageFilterICD2ID2)

def itkComplexToRealImageFilterICD3ID3_New():
    return itkComplexToRealImageFilterICD3ID3.New()

class itkComplexToRealImageFilterICD3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICD3ID3):
    r"""Proxy of C++ itkComplexToRealImageFilterICD3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToRealImageFilterICD3ID3_Pointer"""
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToRealImageFilterICD3ID3_Pointer"""
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD3ID3_Clone(self)
    InputConvertibleToOutputCheck = _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkComplexToRealImageFilterPython.delete_itkComplexToRealImageFilterICD3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToRealImageFilterICD3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToRealImageFilterICD3ID3

        Create a new object of the class itkComplexToRealImageFilterICD3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToRealImageFilterICD3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToRealImageFilterICD3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToRealImageFilterICD3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToRealImageFilterICD3ID3 in _itkComplexToRealImageFilterPython:
_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD3ID3_swigregister(itkComplexToRealImageFilterICD3ID3)

def itkComplexToRealImageFilterICD4ID4_New():
    return itkComplexToRealImageFilterICD4ID4.New()

class itkComplexToRealImageFilterICD4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICD4ID4):
    r"""Proxy of C++ itkComplexToRealImageFilterICD4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToRealImageFilterICD4ID4_Pointer"""
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToRealImageFilterICD4ID4_Pointer"""
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD4ID4_Clone(self)
    InputConvertibleToOutputCheck = _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD4ID4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkComplexToRealImageFilterPython.delete_itkComplexToRealImageFilterICD4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToRealImageFilterICD4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToRealImageFilterICD4ID4

        Create a new object of the class itkComplexToRealImageFilterICD4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToRealImageFilterICD4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToRealImageFilterICD4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToRealImageFilterICD4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToRealImageFilterICD4ID4 in _itkComplexToRealImageFilterPython:
_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICD4ID4_swigregister(itkComplexToRealImageFilterICD4ID4)

def itkComplexToRealImageFilterICF2IF2_New():
    return itkComplexToRealImageFilterICF2IF2.New()

class itkComplexToRealImageFilterICF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IF2):
    r"""Proxy of C++ itkComplexToRealImageFilterICF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToRealImageFilterICF2IF2_Pointer"""
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToRealImageFilterICF2IF2_Pointer"""
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF2IF2_Clone(self)
    InputConvertibleToOutputCheck = _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkComplexToRealImageFilterPython.delete_itkComplexToRealImageFilterICF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToRealImageFilterICF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToRealImageFilterICF2IF2

        Create a new object of the class itkComplexToRealImageFilterICF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToRealImageFilterICF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToRealImageFilterICF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToRealImageFilterICF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToRealImageFilterICF2IF2 in _itkComplexToRealImageFilterPython:
_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF2IF2_swigregister(itkComplexToRealImageFilterICF2IF2)

def itkComplexToRealImageFilterICF3IF3_New():
    return itkComplexToRealImageFilterICF3IF3.New()

class itkComplexToRealImageFilterICF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IF3):
    r"""Proxy of C++ itkComplexToRealImageFilterICF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToRealImageFilterICF3IF3_Pointer"""
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToRealImageFilterICF3IF3_Pointer"""
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF3IF3_Clone(self)
    InputConvertibleToOutputCheck = _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkComplexToRealImageFilterPython.delete_itkComplexToRealImageFilterICF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToRealImageFilterICF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToRealImageFilterICF3IF3

        Create a new object of the class itkComplexToRealImageFilterICF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToRealImageFilterICF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToRealImageFilterICF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToRealImageFilterICF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToRealImageFilterICF3IF3 in _itkComplexToRealImageFilterPython:
_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF3IF3_swigregister(itkComplexToRealImageFilterICF3IF3)

def itkComplexToRealImageFilterICF4IF4_New():
    return itkComplexToRealImageFilterICF4IF4.New()

class itkComplexToRealImageFilterICF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF4IF4):
    r"""Proxy of C++ itkComplexToRealImageFilterICF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToRealImageFilterICF4IF4_Pointer"""
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToRealImageFilterICF4IF4_Pointer"""
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF4IF4_Clone(self)
    InputConvertibleToOutputCheck = _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF4IF4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkComplexToRealImageFilterPython.delete_itkComplexToRealImageFilterICF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToRealImageFilterICF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToRealImageFilterICF4IF4

        Create a new object of the class itkComplexToRealImageFilterICF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToRealImageFilterICF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToRealImageFilterICF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToRealImageFilterICF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToRealImageFilterICF4IF4 in _itkComplexToRealImageFilterPython:
_itkComplexToRealImageFilterPython.itkComplexToRealImageFilterICF4IF4_swigregister(itkComplexToRealImageFilterICF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def complex_to_real_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ComplexToRealImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ComplexToRealImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def complex_to_real_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.ComplexToRealImageFilter
    complex_to_real_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    complex_to_real_image_filter.__doc__ = filter_object.__doc__



