# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMinimumImageFilterPython
else:
    import _itkMinimumImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkBinaryGeneratorImageFilterPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkMinimumImageFilterID2ID2ID2_New():
    return itkMinimumImageFilterID2ID2ID2.New()

class itkMinimumImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""Proxy of C++ itkMinimumImageFilterID2ID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterID2ID2ID2_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterID2ID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterID2ID2ID2_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterID2ID2ID2_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterID2ID2ID2_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterID2ID2ID2_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterID2ID2ID2_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterID2ID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterID2ID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterID2ID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterID2ID2ID2

        Create a new object of the class itkMinimumImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterID2ID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterID2ID2ID2 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterID2ID2ID2_swigregister(itkMinimumImageFilterID2ID2ID2)

def itkMinimumImageFilterID3ID3ID3_New():
    return itkMinimumImageFilterID3ID3ID3.New()

class itkMinimumImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""Proxy of C++ itkMinimumImageFilterID3ID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterID3ID3ID3_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterID3ID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterID3ID3ID3_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterID3ID3ID3_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterID3ID3ID3_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterID3ID3ID3_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterID3ID3ID3_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterID3ID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterID3ID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterID3ID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterID3ID3ID3

        Create a new object of the class itkMinimumImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterID3ID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterID3ID3ID3 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterID3ID3ID3_swigregister(itkMinimumImageFilterID3ID3ID3)

def itkMinimumImageFilterID4ID4ID4_New():
    return itkMinimumImageFilterID4ID4ID4.New()

class itkMinimumImageFilterID4ID4ID4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID4ID4ID4):
    r"""Proxy of C++ itkMinimumImageFilterID4ID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterID4ID4ID4_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterID4ID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterID4ID4ID4_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterID4ID4ID4_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterID4ID4ID4_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterID4ID4ID4_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterID4ID4ID4_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterID4ID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterID4ID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterID4ID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterID4ID4ID4

        Create a new object of the class itkMinimumImageFilterID4ID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterID4ID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterID4ID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterID4ID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterID4ID4ID4 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterID4ID4ID4_swigregister(itkMinimumImageFilterID4ID4ID4)

def itkMinimumImageFilterIF2IF2IF2_New():
    return itkMinimumImageFilterIF2IF2IF2.New()

class itkMinimumImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""Proxy of C++ itkMinimumImageFilterIF2IF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterIF2IF2IF2_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIF2IF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterIF2IF2IF2_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIF2IF2IF2_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIF2IF2IF2_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterIF2IF2IF2_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIF2IF2IF2_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterIF2IF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterIF2IF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIF2IF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterIF2IF2IF2

        Create a new object of the class itkMinimumImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterIF2IF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterIF2IF2IF2 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterIF2IF2IF2_swigregister(itkMinimumImageFilterIF2IF2IF2)

def itkMinimumImageFilterIF3IF3IF3_New():
    return itkMinimumImageFilterIF3IF3IF3.New()

class itkMinimumImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""Proxy of C++ itkMinimumImageFilterIF3IF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterIF3IF3IF3_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIF3IF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterIF3IF3IF3_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIF3IF3IF3_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIF3IF3IF3_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterIF3IF3IF3_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIF3IF3IF3_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterIF3IF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterIF3IF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIF3IF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterIF3IF3IF3

        Create a new object of the class itkMinimumImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterIF3IF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterIF3IF3IF3 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterIF3IF3IF3_swigregister(itkMinimumImageFilterIF3IF3IF3)

def itkMinimumImageFilterIF4IF4IF4_New():
    return itkMinimumImageFilterIF4IF4IF4.New()

class itkMinimumImageFilterIF4IF4IF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF4IF4IF4):
    r"""Proxy of C++ itkMinimumImageFilterIF4IF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterIF4IF4IF4_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIF4IF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterIF4IF4IF4_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIF4IF4IF4_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIF4IF4IF4_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterIF4IF4IF4_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIF4IF4IF4_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterIF4IF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterIF4IF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIF4IF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterIF4IF4IF4

        Create a new object of the class itkMinimumImageFilterIF4IF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterIF4IF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterIF4IF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterIF4IF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterIF4IF4IF4 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterIF4IF4IF4_swigregister(itkMinimumImageFilterIF4IF4IF4)

def itkMinimumImageFilterISS2ISS2ISS2_New():
    return itkMinimumImageFilterISS2ISS2ISS2.New()

class itkMinimumImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""Proxy of C++ itkMinimumImageFilterISS2ISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterISS2ISS2ISS2_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterISS2ISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterISS2ISS2ISS2_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterISS2ISS2ISS2_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterISS2ISS2ISS2_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterISS2ISS2ISS2_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterISS2ISS2ISS2_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterISS2ISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterISS2ISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterISS2ISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterISS2ISS2ISS2

        Create a new object of the class itkMinimumImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterISS2ISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterISS2ISS2ISS2 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterISS2ISS2ISS2_swigregister(itkMinimumImageFilterISS2ISS2ISS2)

def itkMinimumImageFilterISS3ISS3ISS3_New():
    return itkMinimumImageFilterISS3ISS3ISS3.New()

class itkMinimumImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""Proxy of C++ itkMinimumImageFilterISS3ISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterISS3ISS3ISS3_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterISS3ISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterISS3ISS3ISS3_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterISS3ISS3ISS3_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterISS3ISS3ISS3_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterISS3ISS3ISS3_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterISS3ISS3ISS3_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterISS3ISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterISS3ISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterISS3ISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterISS3ISS3ISS3

        Create a new object of the class itkMinimumImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterISS3ISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterISS3ISS3ISS3 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterISS3ISS3ISS3_swigregister(itkMinimumImageFilterISS3ISS3ISS3)

def itkMinimumImageFilterISS4ISS4ISS4_New():
    return itkMinimumImageFilterISS4ISS4ISS4.New()

class itkMinimumImageFilterISS4ISS4ISS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS4ISS4ISS4):
    r"""Proxy of C++ itkMinimumImageFilterISS4ISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterISS4ISS4ISS4_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterISS4ISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterISS4ISS4ISS4_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterISS4ISS4ISS4_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterISS4ISS4ISS4_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterISS4ISS4ISS4_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterISS4ISS4ISS4_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterISS4ISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterISS4ISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterISS4ISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterISS4ISS4ISS4

        Create a new object of the class itkMinimumImageFilterISS4ISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterISS4ISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterISS4ISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterISS4ISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterISS4ISS4ISS4 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterISS4ISS4ISS4_swigregister(itkMinimumImageFilterISS4ISS4ISS4)

def itkMinimumImageFilterIUC2IUC2IUC2_New():
    return itkMinimumImageFilterIUC2IUC2IUC2.New()

class itkMinimumImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""Proxy of C++ itkMinimumImageFilterIUC2IUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUC2IUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUC2IUC2IUC2_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIUC2IUC2IUC2_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterIUC2IUC2IUC2_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIUC2IUC2IUC2_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterIUC2IUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterIUC2IUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUC2IUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterIUC2IUC2IUC2

        Create a new object of the class itkMinimumImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterIUC2IUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterIUC2IUC2IUC2 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterIUC2IUC2IUC2_swigregister(itkMinimumImageFilterIUC2IUC2IUC2)

def itkMinimumImageFilterIUC3IUC3IUC3_New():
    return itkMinimumImageFilterIUC3IUC3IUC3.New()

class itkMinimumImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""Proxy of C++ itkMinimumImageFilterIUC3IUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUC3IUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUC3IUC3IUC3_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIUC3IUC3IUC3_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterIUC3IUC3IUC3_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIUC3IUC3IUC3_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterIUC3IUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterIUC3IUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUC3IUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterIUC3IUC3IUC3

        Create a new object of the class itkMinimumImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterIUC3IUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterIUC3IUC3IUC3 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterIUC3IUC3IUC3_swigregister(itkMinimumImageFilterIUC3IUC3IUC3)

def itkMinimumImageFilterIUC4IUC4IUC4_New():
    return itkMinimumImageFilterIUC4IUC4IUC4.New()

class itkMinimumImageFilterIUC4IUC4IUC4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC4IUC4IUC4):
    r"""Proxy of C++ itkMinimumImageFilterIUC4IUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUC4IUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUC4IUC4IUC4_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIUC4IUC4IUC4_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterIUC4IUC4IUC4_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIUC4IUC4IUC4_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterIUC4IUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterIUC4IUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUC4IUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterIUC4IUC4IUC4

        Create a new object of the class itkMinimumImageFilterIUC4IUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterIUC4IUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterIUC4IUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterIUC4IUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterIUC4IUC4IUC4 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterIUC4IUC4IUC4_swigregister(itkMinimumImageFilterIUC4IUC4IUC4)

def itkMinimumImageFilterIUS2IUS2IUS2_New():
    return itkMinimumImageFilterIUS2IUS2IUS2.New()

class itkMinimumImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""Proxy of C++ itkMinimumImageFilterIUS2IUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUS2IUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUS2IUS2IUS2_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIUS2IUS2IUS2_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterIUS2IUS2IUS2_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIUS2IUS2IUS2_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterIUS2IUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterIUS2IUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUS2IUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterIUS2IUS2IUS2

        Create a new object of the class itkMinimumImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterIUS2IUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterIUS2IUS2IUS2 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterIUS2IUS2IUS2_swigregister(itkMinimumImageFilterIUS2IUS2IUS2)

def itkMinimumImageFilterIUS3IUS3IUS3_New():
    return itkMinimumImageFilterIUS3IUS3IUS3.New()

class itkMinimumImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""Proxy of C++ itkMinimumImageFilterIUS3IUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUS3IUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUS3IUS3IUS3_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIUS3IUS3IUS3_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterIUS3IUS3IUS3_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIUS3IUS3IUS3_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterIUS3IUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterIUS3IUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUS3IUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterIUS3IUS3IUS3

        Create a new object of the class itkMinimumImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterIUS3IUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterIUS3IUS3IUS3 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterIUS3IUS3IUS3_swigregister(itkMinimumImageFilterIUS3IUS3IUS3)

def itkMinimumImageFilterIUS4IUS4IUS4_New():
    return itkMinimumImageFilterIUS4IUS4IUS4.New()

class itkMinimumImageFilterIUS4IUS4IUS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS4IUS4IUS4):
    r"""Proxy of C++ itkMinimumImageFilterIUS4IUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUS4IUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUS4IUS4IUS4_Clone(self)
    Input1ConvertibleToInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIUS4IUS4IUS4_Input1ConvertibleToInput2Check
    
    Input2ConvertibleToOutputCheck = _itkMinimumImageFilterPython.itkMinimumImageFilterIUS4IUS4IUS4_Input2ConvertibleToOutputCheck
    
    Input1LessThanInput2Check = _itkMinimumImageFilterPython.itkMinimumImageFilterIUS4IUS4IUS4_Input1LessThanInput2Check
    
    __swig_destroy__ = _itkMinimumImageFilterPython.delete_itkMinimumImageFilterIUS4IUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumImageFilterIUS4IUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumImageFilterPython.itkMinimumImageFilterIUS4IUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumImageFilterIUS4IUS4IUS4

        Create a new object of the class itkMinimumImageFilterIUS4IUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumImageFilterIUS4IUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumImageFilterIUS4IUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumImageFilterIUS4IUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumImageFilterIUS4IUS4IUS4 in _itkMinimumImageFilterPython:
_itkMinimumImageFilterPython.itkMinimumImageFilterIUS4IUS4IUS4_swigregister(itkMinimumImageFilterIUS4IUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def minimum_image_filter(*args: itkt.ImageLike,  constant1: int=..., constant2: int=..., constant: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for MinimumImageFilter"""
    import itk

    kwarg_typehints = { 'constant1':constant1,'constant2':constant2,'constant':constant }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MinimumImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def minimum_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.MinimumImageFilter
    minimum_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    minimum_image_filter.__doc__ = filter_object.__doc__



