# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageSourcesPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGaborImageSourcePython
else:
    import _itkGaborImageSourcePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkGenerateImageSourcePython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkGaborImageSourceID2_New():
    return itkGaborImageSourceID2.New()

class itkGaborImageSourceID2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID2):
    r"""Proxy of C++ itkGaborImageSourceID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceID2_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceID2_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID2_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD2"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID2_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID2_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD2"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID2_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID2_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID2_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID2_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID2_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID2_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID2_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceID2

        Create a new object of the class itkGaborImageSourceID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceID2 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceID2_swigregister(itkGaborImageSourceID2)

def itkGaborImageSourceID3_New():
    return itkGaborImageSourceID3.New()

class itkGaborImageSourceID3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID3):
    r"""Proxy of C++ itkGaborImageSourceID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceID3_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceID3_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID3_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD3"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID3_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID3_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD3"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID3_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID3_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID3_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID3_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID3_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID3_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID3_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceID3

        Create a new object of the class itkGaborImageSourceID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceID3 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceID3_swigregister(itkGaborImageSourceID3)

def itkGaborImageSourceID4_New():
    return itkGaborImageSourceID4.New()

class itkGaborImageSourceID4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID4):
    r"""Proxy of C++ itkGaborImageSourceID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceID4_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceID4_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID4_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD4"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID4_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID4_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD4"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID4_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID4_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID4_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID4_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID4_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID4_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceID4_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceID4

        Create a new object of the class itkGaborImageSourceID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceID4 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceID4_swigregister(itkGaborImageSourceID4)

def itkGaborImageSourceIF2_New():
    return itkGaborImageSourceIF2.New()

class itkGaborImageSourceIF2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF2):
    r"""Proxy of C++ itkGaborImageSourceIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceIF2_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceIF2_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF2_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD2"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF2_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF2_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD2"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF2_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF2_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF2_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF2_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF2_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF2_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF2_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIF2

        Create a new object of the class itkGaborImageSourceIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIF2 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIF2_swigregister(itkGaborImageSourceIF2)

def itkGaborImageSourceIF3_New():
    return itkGaborImageSourceIF3.New()

class itkGaborImageSourceIF3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF3):
    r"""Proxy of C++ itkGaborImageSourceIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceIF3_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceIF3_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF3_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD3"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF3_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF3_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD3"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF3_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF3_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF3_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF3_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF3_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF3_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF3_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIF3

        Create a new object of the class itkGaborImageSourceIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIF3 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIF3_swigregister(itkGaborImageSourceIF3)

def itkGaborImageSourceIF4_New():
    return itkGaborImageSourceIF4.New()

class itkGaborImageSourceIF4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF4):
    r"""Proxy of C++ itkGaborImageSourceIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceIF4_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceIF4_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF4_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD4"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF4_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF4_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD4"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF4_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF4_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF4_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF4_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF4_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF4_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIF4_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIF4

        Create a new object of the class itkGaborImageSourceIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIF4 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIF4_swigregister(itkGaborImageSourceIF4)

def itkGaborImageSourceISS2_New():
    return itkGaborImageSourceISS2.New()

class itkGaborImageSourceISS2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISS2):
    r"""Proxy of C++ itkGaborImageSourceISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceISS2_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceISS2_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS2_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD2"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS2_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS2_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD2"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS2_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS2_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS2_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS2_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS2_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS2_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS2_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceISS2

        Create a new object of the class itkGaborImageSourceISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceISS2 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceISS2_swigregister(itkGaborImageSourceISS2)

def itkGaborImageSourceISS3_New():
    return itkGaborImageSourceISS3.New()

class itkGaborImageSourceISS3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISS3):
    r"""Proxy of C++ itkGaborImageSourceISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceISS3_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceISS3_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS3_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD3"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS3_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS3_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD3"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS3_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS3_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS3_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS3_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS3_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS3_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS3_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceISS3

        Create a new object of the class itkGaborImageSourceISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceISS3 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceISS3_swigregister(itkGaborImageSourceISS3)

def itkGaborImageSourceISS4_New():
    return itkGaborImageSourceISS4.New()

class itkGaborImageSourceISS4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISS4):
    r"""Proxy of C++ itkGaborImageSourceISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceISS4_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceISS4_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS4_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD4"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS4_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS4_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD4"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS4_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS4_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS4_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS4_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS4_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS4_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceISS4_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceISS4

        Create a new object of the class itkGaborImageSourceISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceISS4 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceISS4_swigregister(itkGaborImageSourceISS4)

def itkGaborImageSourceIUC2_New():
    return itkGaborImageSourceIUC2.New()

class itkGaborImageSourceIUC2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIUC2):
    r"""Proxy of C++ itkGaborImageSourceIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceIUC2_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceIUC2_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC2_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD2"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC2_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC2_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD2"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC2_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC2_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC2_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC2_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC2_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC2_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC2_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIUC2

        Create a new object of the class itkGaborImageSourceIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIUC2 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIUC2_swigregister(itkGaborImageSourceIUC2)

def itkGaborImageSourceIUC3_New():
    return itkGaborImageSourceIUC3.New()

class itkGaborImageSourceIUC3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIUC3):
    r"""Proxy of C++ itkGaborImageSourceIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceIUC3_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceIUC3_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC3_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD3"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC3_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC3_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD3"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC3_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC3_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC3_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC3_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC3_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC3_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC3_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIUC3

        Create a new object of the class itkGaborImageSourceIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIUC3 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIUC3_swigregister(itkGaborImageSourceIUC3)

def itkGaborImageSourceIUC4_New():
    return itkGaborImageSourceIUC4.New()

class itkGaborImageSourceIUC4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIUC4):
    r"""Proxy of C++ itkGaborImageSourceIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceIUC4_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceIUC4_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC4_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD4"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC4_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC4_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD4"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC4_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC4_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC4_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC4_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC4_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC4_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC4_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIUC4

        Create a new object of the class itkGaborImageSourceIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIUC4 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIUC4_swigregister(itkGaborImageSourceIUC4)

def itkGaborImageSourceIUS2_New():
    return itkGaborImageSourceIUS2.New()

class itkGaborImageSourceIUS2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIUS2):
    r"""Proxy of C++ itkGaborImageSourceIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceIUS2_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceIUS2_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS2_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD2"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS2_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS2_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD2"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS2_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS2_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS2_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS2_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS2_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS2_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS2_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIUS2

        Create a new object of the class itkGaborImageSourceIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIUS2 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIUS2_swigregister(itkGaborImageSourceIUS2)

def itkGaborImageSourceIUS3_New():
    return itkGaborImageSourceIUS3.New()

class itkGaborImageSourceIUS3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIUS3):
    r"""Proxy of C++ itkGaborImageSourceIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceIUS3_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceIUS3_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS3_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD3"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS3_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS3_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD3"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS3_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS3_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS3_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS3_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS3_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS3_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS3_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIUS3

        Create a new object of the class itkGaborImageSourceIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIUS3 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIUS3_swigregister(itkGaborImageSourceIUS3)

def itkGaborImageSourceIUS4_New():
    return itkGaborImageSourceIUS4.New()

class itkGaborImageSourceIUS4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIUS4):
    r"""Proxy of C++ itkGaborImageSourceIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaborImageSourceIUS4_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaborImageSourceIUS4_Pointer"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS4_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD4"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS4_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS4_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD4"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS4_GetMean(self)

    def SetFrequency(self, _arg):
        r"""
        SetFrequency(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS4_SetFrequency(self, _arg)

    def GetFrequency(self):
        r"""GetFrequency(self) -> double const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS4_GetFrequency(self)

    def SetCalculateImaginaryPart(self, _arg):
        r"""
        SetCalculateImaginaryPart(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS4_SetCalculateImaginaryPart(self, _arg)

    def GetCalculateImaginaryPart(self):
        r"""GetCalculateImaginaryPart(self) -> bool const &"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS4_GetCalculateImaginaryPart(self)

    def CalculateImaginaryPartOn(self):
        r"""CalculateImaginaryPartOn(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS4_CalculateImaginaryPartOn(self)

    def CalculateImaginaryPartOff(self):
        r"""CalculateImaginaryPartOff(self)"""
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS4_CalculateImaginaryPartOff(self)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaborImageSourceIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaborImageSourcePython.itkGaborImageSourceIUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIUS4

        Create a new object of the class itkGaborImageSourceIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIUS4 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIUS4_swigregister(itkGaborImageSourceIUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def gabor_image_source(*args,  sigma: Sequence[float]=..., mean: Sequence[float]=..., frequency: float=..., calculate_imaginary_part: bool=..., use_reference_image: bool=..., size: Sequence[int]=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., direction=..., start_index: Sequence[int]=..., output_parameters_from_image: itkt.ImageBase=..., reference_image: itkt.ImageBase=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for GaborImageSource"""
    import itk

    kwarg_typehints = { 'sigma':sigma,'mean':mean,'frequency':frequency,'calculate_imaginary_part':calculate_imaginary_part,'use_reference_image':use_reference_image,'size':size,'spacing':spacing,'origin':origin,'direction':direction,'start_index':start_index,'output_parameters_from_image':output_parameters_from_image,'reference_image':reference_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.GaborImageSource.New(*args, **kwargs)

    return instance.__internal_call__()

def gabor_image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageSources.GaborImageSource
    gabor_image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    gabor_image_source.__doc__ = filter_object.__doc__



