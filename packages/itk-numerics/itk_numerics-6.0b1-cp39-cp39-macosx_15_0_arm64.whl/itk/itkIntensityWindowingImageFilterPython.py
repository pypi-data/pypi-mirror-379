# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkIntensityWindowingImageFilterPython
else:
    import _itkIntensityWindowingImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterBPython

def itkIntensityWindowingImageFilterID2ID2_Superclass_New():
    return itkIntensityWindowingImageFilterID2ID2_Superclass.New()

class itkIntensityWindowingImageFilterID2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID2ID2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID2ID2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID2ID2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID2ID2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_Superclass_swigregister(itkIntensityWindowingImageFilterID2ID2_Superclass)

def itkIntensityWindowingImageFilterID2IF2_Superclass_New():
    return itkIntensityWindowingImageFilterID2IF2_Superclass.New()

class itkIntensityWindowingImageFilterID2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IF2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID2IF2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID2IF2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID2IF2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID2IF2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_Superclass_swigregister(itkIntensityWindowingImageFilterID2IF2_Superclass)

def itkIntensityWindowingImageFilterID2ISS2_Superclass_New():
    return itkIntensityWindowingImageFilterID2ISS2_Superclass.New()

class itkIntensityWindowingImageFilterID2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ISS2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID2ISS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID2ISS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID2ISS2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID2ISS2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_Superclass_swigregister(itkIntensityWindowingImageFilterID2ISS2_Superclass)

def itkIntensityWindowingImageFilterID2IUC2_Superclass_New():
    return itkIntensityWindowingImageFilterID2IUC2_Superclass.New()

class itkIntensityWindowingImageFilterID2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUC2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID2IUC2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID2IUC2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID2IUC2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID2IUC2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_Superclass_swigregister(itkIntensityWindowingImageFilterID2IUC2_Superclass)

def itkIntensityWindowingImageFilterID2IUS2_Superclass_New():
    return itkIntensityWindowingImageFilterID2IUS2_Superclass.New()

class itkIntensityWindowingImageFilterID2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUS2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID2IUS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID2IUS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID2IUS2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID2IUS2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_Superclass_swigregister(itkIntensityWindowingImageFilterID2IUS2_Superclass)

def itkIntensityWindowingImageFilterID3ID3_Superclass_New():
    return itkIntensityWindowingImageFilterID3ID3_Superclass.New()

class itkIntensityWindowingImageFilterID3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID3ID3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID3ID3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID3ID3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID3ID3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_Superclass_swigregister(itkIntensityWindowingImageFilterID3ID3_Superclass)

def itkIntensityWindowingImageFilterID3IF3_Superclass_New():
    return itkIntensityWindowingImageFilterID3IF3_Superclass.New()

class itkIntensityWindowingImageFilterID3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IF3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID3IF3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID3IF3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID3IF3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID3IF3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_Superclass_swigregister(itkIntensityWindowingImageFilterID3IF3_Superclass)

def itkIntensityWindowingImageFilterID3ISS3_Superclass_New():
    return itkIntensityWindowingImageFilterID3ISS3_Superclass.New()

class itkIntensityWindowingImageFilterID3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ISS3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID3ISS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID3ISS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID3ISS3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID3ISS3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_Superclass_swigregister(itkIntensityWindowingImageFilterID3ISS3_Superclass)

def itkIntensityWindowingImageFilterID3IUC3_Superclass_New():
    return itkIntensityWindowingImageFilterID3IUC3_Superclass.New()

class itkIntensityWindowingImageFilterID3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUC3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID3IUC3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID3IUC3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID3IUC3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID3IUC3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_Superclass_swigregister(itkIntensityWindowingImageFilterID3IUC3_Superclass)

def itkIntensityWindowingImageFilterID3IUS3_Superclass_New():
    return itkIntensityWindowingImageFilterID3IUS3_Superclass.New()

class itkIntensityWindowingImageFilterID3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUS3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID3IUS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID3IUS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID3IUS3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID3IUS3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_Superclass_swigregister(itkIntensityWindowingImageFilterID3IUS3_Superclass)

def itkIntensityWindowingImageFilterID4ID4_Superclass_New():
    return itkIntensityWindowingImageFilterID4ID4_Superclass.New()

class itkIntensityWindowingImageFilterID4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4ID4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID4ID4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID4ID4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID4ID4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID4ID4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_Superclass_swigregister(itkIntensityWindowingImageFilterID4ID4_Superclass)

def itkIntensityWindowingImageFilterID4IF4_Superclass_New():
    return itkIntensityWindowingImageFilterID4IF4_Superclass.New()

class itkIntensityWindowingImageFilterID4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4IF4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID4IF4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID4IF4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID4IF4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID4IF4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_Superclass_swigregister(itkIntensityWindowingImageFilterID4IF4_Superclass)

def itkIntensityWindowingImageFilterID4ISS4_Superclass_New():
    return itkIntensityWindowingImageFilterID4ISS4_Superclass.New()

class itkIntensityWindowingImageFilterID4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4ISS4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID4ISS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID4ISS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID4ISS4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID4ISS4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_Superclass_swigregister(itkIntensityWindowingImageFilterID4ISS4_Superclass)

def itkIntensityWindowingImageFilterID4IUC4_Superclass_New():
    return itkIntensityWindowingImageFilterID4IUC4_Superclass.New()

class itkIntensityWindowingImageFilterID4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4IUC4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID4IUC4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID4IUC4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID4IUC4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID4IUC4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_Superclass_swigregister(itkIntensityWindowingImageFilterID4IUC4_Superclass)

def itkIntensityWindowingImageFilterID4IUS4_Superclass_New():
    return itkIntensityWindowingImageFilterID4IUS4_Superclass.New()

class itkIntensityWindowingImageFilterID4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4IUS4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID4IUS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID4IUS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< double,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< double,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID4IUS4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterID4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID4IUS4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_Superclass_swigregister(itkIntensityWindowingImageFilterID4IUS4_Superclass)

def itkIntensityWindowingImageFilterIF2ID2_Superclass_New():
    return itkIntensityWindowingImageFilterIF2ID2_Superclass.New()

class itkIntensityWindowingImageFilterIF2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ID2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF2ID2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF2ID2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF2ID2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF2ID2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_Superclass_swigregister(itkIntensityWindowingImageFilterIF2ID2_Superclass)

def itkIntensityWindowingImageFilterIF2IF2_Superclass_New():
    return itkIntensityWindowingImageFilterIF2IF2_Superclass.New()

class itkIntensityWindowingImageFilterIF2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF2IF2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF2IF2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF2IF2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF2IF2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_Superclass_swigregister(itkIntensityWindowingImageFilterIF2IF2_Superclass)

def itkIntensityWindowingImageFilterIF2ISS2_Superclass_New():
    return itkIntensityWindowingImageFilterIF2ISS2_Superclass.New()

class itkIntensityWindowingImageFilterIF2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ISS2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF2ISS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF2ISS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF2ISS2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF2ISS2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_Superclass_swigregister(itkIntensityWindowingImageFilterIF2ISS2_Superclass)

def itkIntensityWindowingImageFilterIF2IUC2_Superclass_New():
    return itkIntensityWindowingImageFilterIF2IUC2_Superclass.New()

class itkIntensityWindowingImageFilterIF2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUC2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF2IUC2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF2IUC2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF2IUC2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF2IUC2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_Superclass_swigregister(itkIntensityWindowingImageFilterIF2IUC2_Superclass)

def itkIntensityWindowingImageFilterIF2IUS2_Superclass_New():
    return itkIntensityWindowingImageFilterIF2IUS2_Superclass.New()

class itkIntensityWindowingImageFilterIF2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUS2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF2IUS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF2IUS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF2IUS2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF2IUS2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_Superclass_swigregister(itkIntensityWindowingImageFilterIF2IUS2_Superclass)

def itkIntensityWindowingImageFilterIF3ID3_Superclass_New():
    return itkIntensityWindowingImageFilterIF3ID3_Superclass.New()

class itkIntensityWindowingImageFilterIF3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ID3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF3ID3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF3ID3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF3ID3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF3ID3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_Superclass_swigregister(itkIntensityWindowingImageFilterIF3ID3_Superclass)

def itkIntensityWindowingImageFilterIF3IF3_Superclass_New():
    return itkIntensityWindowingImageFilterIF3IF3_Superclass.New()

class itkIntensityWindowingImageFilterIF3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF3IF3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF3IF3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF3IF3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF3IF3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_Superclass_swigregister(itkIntensityWindowingImageFilterIF3IF3_Superclass)

def itkIntensityWindowingImageFilterIF3ISS3_Superclass_New():
    return itkIntensityWindowingImageFilterIF3ISS3_Superclass.New()

class itkIntensityWindowingImageFilterIF3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ISS3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF3ISS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF3ISS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF3ISS3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF3ISS3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_Superclass_swigregister(itkIntensityWindowingImageFilterIF3ISS3_Superclass)

def itkIntensityWindowingImageFilterIF3IUC3_Superclass_New():
    return itkIntensityWindowingImageFilterIF3IUC3_Superclass.New()

class itkIntensityWindowingImageFilterIF3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUC3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF3IUC3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF3IUC3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF3IUC3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF3IUC3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_Superclass_swigregister(itkIntensityWindowingImageFilterIF3IUC3_Superclass)

def itkIntensityWindowingImageFilterIF3IUS3_Superclass_New():
    return itkIntensityWindowingImageFilterIF3IUS3_Superclass.New()

class itkIntensityWindowingImageFilterIF3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUS3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF3IUS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF3IUS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF3IUS3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF3IUS3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_Superclass_swigregister(itkIntensityWindowingImageFilterIF3IUS3_Superclass)

def itkIntensityWindowingImageFilterIF4ID4_Superclass_New():
    return itkIntensityWindowingImageFilterIF4ID4_Superclass.New()

class itkIntensityWindowingImageFilterIF4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4ID4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF4ID4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF4ID4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF4ID4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF4ID4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_Superclass_swigregister(itkIntensityWindowingImageFilterIF4ID4_Superclass)

def itkIntensityWindowingImageFilterIF4IF4_Superclass_New():
    return itkIntensityWindowingImageFilterIF4IF4_Superclass.New()

class itkIntensityWindowingImageFilterIF4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IF4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF4IF4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF4IF4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF4IF4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF4IF4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_Superclass_swigregister(itkIntensityWindowingImageFilterIF4IF4_Superclass)

def itkIntensityWindowingImageFilterIF4ISS4_Superclass_New():
    return itkIntensityWindowingImageFilterIF4ISS4_Superclass.New()

class itkIntensityWindowingImageFilterIF4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4ISS4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF4ISS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF4ISS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF4ISS4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF4ISS4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_Superclass_swigregister(itkIntensityWindowingImageFilterIF4ISS4_Superclass)

def itkIntensityWindowingImageFilterIF4IUC4_Superclass_New():
    return itkIntensityWindowingImageFilterIF4IUC4_Superclass.New()

class itkIntensityWindowingImageFilterIF4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IUC4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF4IUC4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF4IUC4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF4IUC4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF4IUC4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_Superclass_swigregister(itkIntensityWindowingImageFilterIF4IUC4_Superclass)

def itkIntensityWindowingImageFilterIF4IUS4_Superclass_New():
    return itkIntensityWindowingImageFilterIF4IUS4_Superclass.New()

class itkIntensityWindowingImageFilterIF4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IUS4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF4IUS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF4IUS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< float,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< float,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF4IUS4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIF4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF4IUS4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_Superclass_swigregister(itkIntensityWindowingImageFilterIF4IUS4_Superclass)

def itkIntensityWindowingImageFilterISS2ID2_Superclass_New():
    return itkIntensityWindowingImageFilterISS2ID2_Superclass.New()

class itkIntensityWindowingImageFilterISS2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ID2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS2ID2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS2ID2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS2ID2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS2ID2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_Superclass_swigregister(itkIntensityWindowingImageFilterISS2ID2_Superclass)

def itkIntensityWindowingImageFilterISS2IF2_Superclass_New():
    return itkIntensityWindowingImageFilterISS2IF2_Superclass.New()

class itkIntensityWindowingImageFilterISS2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IF2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS2IF2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS2IF2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS2IF2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS2IF2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_Superclass_swigregister(itkIntensityWindowingImageFilterISS2IF2_Superclass)

def itkIntensityWindowingImageFilterISS2ISS2_Superclass_New():
    return itkIntensityWindowingImageFilterISS2ISS2_Superclass.New()

class itkIntensityWindowingImageFilterISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS2ISS2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS2ISS2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_Superclass_swigregister(itkIntensityWindowingImageFilterISS2ISS2_Superclass)

def itkIntensityWindowingImageFilterISS2IUC2_Superclass_New():
    return itkIntensityWindowingImageFilterISS2IUC2_Superclass.New()

class itkIntensityWindowingImageFilterISS2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUC2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS2IUC2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS2IUC2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS2IUC2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS2IUC2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_Superclass_swigregister(itkIntensityWindowingImageFilterISS2IUC2_Superclass)

def itkIntensityWindowingImageFilterISS2IUS2_Superclass_New():
    return itkIntensityWindowingImageFilterISS2IUS2_Superclass.New()

class itkIntensityWindowingImageFilterISS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUS2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS2IUS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS2IUS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS2IUS2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS2IUS2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_Superclass_swigregister(itkIntensityWindowingImageFilterISS2IUS2_Superclass)

def itkIntensityWindowingImageFilterISS3ID3_Superclass_New():
    return itkIntensityWindowingImageFilterISS3ID3_Superclass.New()

class itkIntensityWindowingImageFilterISS3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ID3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS3ID3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS3ID3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS3ID3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS3ID3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_Superclass_swigregister(itkIntensityWindowingImageFilterISS3ID3_Superclass)

def itkIntensityWindowingImageFilterISS3IF3_Superclass_New():
    return itkIntensityWindowingImageFilterISS3IF3_Superclass.New()

class itkIntensityWindowingImageFilterISS3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IF3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS3IF3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS3IF3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS3IF3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS3IF3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_Superclass_swigregister(itkIntensityWindowingImageFilterISS3IF3_Superclass)

def itkIntensityWindowingImageFilterISS3ISS3_Superclass_New():
    return itkIntensityWindowingImageFilterISS3ISS3_Superclass.New()

class itkIntensityWindowingImageFilterISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS3ISS3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS3ISS3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_Superclass_swigregister(itkIntensityWindowingImageFilterISS3ISS3_Superclass)

def itkIntensityWindowingImageFilterISS3IUC3_Superclass_New():
    return itkIntensityWindowingImageFilterISS3IUC3_Superclass.New()

class itkIntensityWindowingImageFilterISS3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUC3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS3IUC3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS3IUC3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS3IUC3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS3IUC3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_Superclass_swigregister(itkIntensityWindowingImageFilterISS3IUC3_Superclass)

def itkIntensityWindowingImageFilterISS3IUS3_Superclass_New():
    return itkIntensityWindowingImageFilterISS3IUS3_Superclass.New()

class itkIntensityWindowingImageFilterISS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUS3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS3IUS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS3IUS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS3IUS3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS3IUS3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_Superclass_swigregister(itkIntensityWindowingImageFilterISS3IUS3_Superclass)

def itkIntensityWindowingImageFilterISS4ID4_Superclass_New():
    return itkIntensityWindowingImageFilterISS4ID4_Superclass.New()

class itkIntensityWindowingImageFilterISS4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4ID4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS4ID4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS4ID4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS4ID4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS4ID4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_Superclass_swigregister(itkIntensityWindowingImageFilterISS4ID4_Superclass)

def itkIntensityWindowingImageFilterISS4IF4_Superclass_New():
    return itkIntensityWindowingImageFilterISS4IF4_Superclass.New()

class itkIntensityWindowingImageFilterISS4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4IF4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS4IF4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS4IF4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS4IF4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS4IF4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_Superclass_swigregister(itkIntensityWindowingImageFilterISS4IF4_Superclass)

def itkIntensityWindowingImageFilterISS4ISS4_Superclass_New():
    return itkIntensityWindowingImageFilterISS4ISS4_Superclass.New()

class itkIntensityWindowingImageFilterISS4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4ISS4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS4ISS4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS4ISS4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_Superclass_swigregister(itkIntensityWindowingImageFilterISS4ISS4_Superclass)

def itkIntensityWindowingImageFilterISS4IUC4_Superclass_New():
    return itkIntensityWindowingImageFilterISS4IUC4_Superclass.New()

class itkIntensityWindowingImageFilterISS4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4IUC4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS4IUC4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS4IUC4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS4IUC4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS4IUC4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_Superclass_swigregister(itkIntensityWindowingImageFilterISS4IUC4_Superclass)

def itkIntensityWindowingImageFilterISS4IUS4_Superclass_New():
    return itkIntensityWindowingImageFilterISS4IUS4_Superclass.New()

class itkIntensityWindowingImageFilterISS4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4IUS4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS4IUS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS4IUS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< short,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< short,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS4IUS4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterISS4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS4IUS4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_Superclass_swigregister(itkIntensityWindowingImageFilterISS4IUS4_Superclass)

def itkIntensityWindowingImageFilterIUC2ID2_Superclass_New():
    return itkIntensityWindowingImageFilterIUC2ID2_Superclass.New()

class itkIntensityWindowingImageFilterIUC2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ID2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC2ID2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC2ID2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC2ID2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC2ID2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_Superclass_swigregister(itkIntensityWindowingImageFilterIUC2ID2_Superclass)

def itkIntensityWindowingImageFilterIUC2IF2_Superclass_New():
    return itkIntensityWindowingImageFilterIUC2IF2_Superclass.New()

class itkIntensityWindowingImageFilterIUC2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IF2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC2IF2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC2IF2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC2IF2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC2IF2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_Superclass_swigregister(itkIntensityWindowingImageFilterIUC2IF2_Superclass)

def itkIntensityWindowingImageFilterIUC2ISS2_Superclass_New():
    return itkIntensityWindowingImageFilterIUC2ISS2_Superclass.New()

class itkIntensityWindowingImageFilterIUC2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ISS2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC2ISS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC2ISS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC2ISS2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC2ISS2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_Superclass_swigregister(itkIntensityWindowingImageFilterIUC2ISS2_Superclass)

def itkIntensityWindowingImageFilterIUC2IUC2_Superclass_New():
    return itkIntensityWindowingImageFilterIUC2IUC2_Superclass.New()

class itkIntensityWindowingImageFilterIUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC2IUC2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_Superclass_swigregister(itkIntensityWindowingImageFilterIUC2IUC2_Superclass)

def itkIntensityWindowingImageFilterIUC2IUS2_Superclass_New():
    return itkIntensityWindowingImageFilterIUC2IUS2_Superclass.New()

class itkIntensityWindowingImageFilterIUC2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUS2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC2IUS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC2IUS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC2IUS2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC2IUS2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_Superclass_swigregister(itkIntensityWindowingImageFilterIUC2IUS2_Superclass)

def itkIntensityWindowingImageFilterIUC3ID3_Superclass_New():
    return itkIntensityWindowingImageFilterIUC3ID3_Superclass.New()

class itkIntensityWindowingImageFilterIUC3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ID3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC3ID3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC3ID3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC3ID3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC3ID3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_Superclass_swigregister(itkIntensityWindowingImageFilterIUC3ID3_Superclass)

def itkIntensityWindowingImageFilterIUC3IF3_Superclass_New():
    return itkIntensityWindowingImageFilterIUC3IF3_Superclass.New()

class itkIntensityWindowingImageFilterIUC3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IF3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC3IF3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC3IF3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC3IF3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC3IF3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_Superclass_swigregister(itkIntensityWindowingImageFilterIUC3IF3_Superclass)

def itkIntensityWindowingImageFilterIUC3ISS3_Superclass_New():
    return itkIntensityWindowingImageFilterIUC3ISS3_Superclass.New()

class itkIntensityWindowingImageFilterIUC3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ISS3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC3ISS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC3ISS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC3ISS3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC3ISS3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_Superclass_swigregister(itkIntensityWindowingImageFilterIUC3ISS3_Superclass)

def itkIntensityWindowingImageFilterIUC3IUC3_Superclass_New():
    return itkIntensityWindowingImageFilterIUC3IUC3_Superclass.New()

class itkIntensityWindowingImageFilterIUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC3IUC3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_Superclass_swigregister(itkIntensityWindowingImageFilterIUC3IUC3_Superclass)

def itkIntensityWindowingImageFilterIUC3IUS3_Superclass_New():
    return itkIntensityWindowingImageFilterIUC3IUS3_Superclass.New()

class itkIntensityWindowingImageFilterIUC3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUS3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC3IUS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC3IUS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC3IUS3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC3IUS3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_Superclass_swigregister(itkIntensityWindowingImageFilterIUC3IUS3_Superclass)

def itkIntensityWindowingImageFilterIUC4ID4_Superclass_New():
    return itkIntensityWindowingImageFilterIUC4ID4_Superclass.New()

class itkIntensityWindowingImageFilterIUC4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4ID4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC4ID4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC4ID4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC4ID4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC4ID4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_Superclass_swigregister(itkIntensityWindowingImageFilterIUC4ID4_Superclass)

def itkIntensityWindowingImageFilterIUC4IF4_Superclass_New():
    return itkIntensityWindowingImageFilterIUC4IF4_Superclass.New()

class itkIntensityWindowingImageFilterIUC4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4IF4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC4IF4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC4IF4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC4IF4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC4IF4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_Superclass_swigregister(itkIntensityWindowingImageFilterIUC4IF4_Superclass)

def itkIntensityWindowingImageFilterIUC4ISS4_Superclass_New():
    return itkIntensityWindowingImageFilterIUC4ISS4_Superclass.New()

class itkIntensityWindowingImageFilterIUC4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4ISS4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC4ISS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC4ISS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC4ISS4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC4ISS4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_Superclass_swigregister(itkIntensityWindowingImageFilterIUC4ISS4_Superclass)

def itkIntensityWindowingImageFilterIUC4IUC4_Superclass_New():
    return itkIntensityWindowingImageFilterIUC4IUC4_Superclass.New()

class itkIntensityWindowingImageFilterIUC4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4IUC4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC4IUC4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC4IUC4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_Superclass_swigregister(itkIntensityWindowingImageFilterIUC4IUC4_Superclass)

def itkIntensityWindowingImageFilterIUC4IUS4_Superclass_New():
    return itkIntensityWindowingImageFilterIUC4IUS4_Superclass.New()

class itkIntensityWindowingImageFilterIUC4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4IUS4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC4IUS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC4IUS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned char,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned char,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC4IUS4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUC4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC4IUS4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_Superclass_swigregister(itkIntensityWindowingImageFilterIUC4IUS4_Superclass)

def itkIntensityWindowingImageFilterIUS2ID2_Superclass_New():
    return itkIntensityWindowingImageFilterIUS2ID2_Superclass.New()

class itkIntensityWindowingImageFilterIUS2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ID2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS2ID2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS2ID2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS2ID2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS2ID2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_Superclass_swigregister(itkIntensityWindowingImageFilterIUS2ID2_Superclass)

def itkIntensityWindowingImageFilterIUS2IF2_Superclass_New():
    return itkIntensityWindowingImageFilterIUS2IF2_Superclass.New()

class itkIntensityWindowingImageFilterIUS2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IF2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS2IF2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS2IF2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS2IF2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS2IF2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_Superclass_swigregister(itkIntensityWindowingImageFilterIUS2IF2_Superclass)

def itkIntensityWindowingImageFilterIUS2ISS2_Superclass_New():
    return itkIntensityWindowingImageFilterIUS2ISS2_Superclass.New()

class itkIntensityWindowingImageFilterIUS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ISS2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS2ISS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS2ISS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS2ISS2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS2ISS2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_Superclass_swigregister(itkIntensityWindowingImageFilterIUS2ISS2_Superclass)

def itkIntensityWindowingImageFilterIUS2IUC2_Superclass_New():
    return itkIntensityWindowingImageFilterIUS2IUC2_Superclass.New()

class itkIntensityWindowingImageFilterIUS2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUC2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS2IUC2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS2IUC2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS2IUC2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS2IUC2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_Superclass_swigregister(itkIntensityWindowingImageFilterIUS2IUC2_Superclass)

def itkIntensityWindowingImageFilterIUS2IUS2_Superclass_New():
    return itkIntensityWindowingImageFilterIUS2IUS2_Superclass.New()

class itkIntensityWindowingImageFilterIUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS2IUS2_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_Superclass_swigregister(itkIntensityWindowingImageFilterIUS2IUS2_Superclass)

def itkIntensityWindowingImageFilterIUS3ID3_Superclass_New():
    return itkIntensityWindowingImageFilterIUS3ID3_Superclass.New()

class itkIntensityWindowingImageFilterIUS3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ID3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS3ID3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS3ID3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS3ID3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS3ID3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_Superclass_swigregister(itkIntensityWindowingImageFilterIUS3ID3_Superclass)

def itkIntensityWindowingImageFilterIUS3IF3_Superclass_New():
    return itkIntensityWindowingImageFilterIUS3IF3_Superclass.New()

class itkIntensityWindowingImageFilterIUS3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IF3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS3IF3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS3IF3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS3IF3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS3IF3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_Superclass_swigregister(itkIntensityWindowingImageFilterIUS3IF3_Superclass)

def itkIntensityWindowingImageFilterIUS3ISS3_Superclass_New():
    return itkIntensityWindowingImageFilterIUS3ISS3_Superclass.New()

class itkIntensityWindowingImageFilterIUS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ISS3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS3ISS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS3ISS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS3ISS3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS3ISS3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_Superclass_swigregister(itkIntensityWindowingImageFilterIUS3ISS3_Superclass)

def itkIntensityWindowingImageFilterIUS3IUC3_Superclass_New():
    return itkIntensityWindowingImageFilterIUS3IUC3_Superclass.New()

class itkIntensityWindowingImageFilterIUS3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUC3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS3IUC3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS3IUC3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS3IUC3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS3IUC3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_Superclass_swigregister(itkIntensityWindowingImageFilterIUS3IUC3_Superclass)

def itkIntensityWindowingImageFilterIUS3IUS3_Superclass_New():
    return itkIntensityWindowingImageFilterIUS3IUS3_Superclass.New()

class itkIntensityWindowingImageFilterIUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS3IUS3_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_Superclass_swigregister(itkIntensityWindowingImageFilterIUS3IUS3_Superclass)

def itkIntensityWindowingImageFilterIUS4ID4_Superclass_New():
    return itkIntensityWindowingImageFilterIUS4ID4_Superclass.New()

class itkIntensityWindowingImageFilterIUS4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4ID4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS4ID4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS4ID4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,double >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,double > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,double > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS4ID4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS4ID4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_Superclass_swigregister(itkIntensityWindowingImageFilterIUS4ID4_Superclass)

def itkIntensityWindowingImageFilterIUS4IF4_Superclass_New():
    return itkIntensityWindowingImageFilterIUS4IF4_Superclass.New()

class itkIntensityWindowingImageFilterIUS4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4IF4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS4IF4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS4IF4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,float >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,float > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,float > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS4IF4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS4IF4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_Superclass_swigregister(itkIntensityWindowingImageFilterIUS4IF4_Superclass)

def itkIntensityWindowingImageFilterIUS4ISS4_Superclass_New():
    return itkIntensityWindowingImageFilterIUS4ISS4_Superclass.New()

class itkIntensityWindowingImageFilterIUS4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4ISS4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS4ISS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS4ISS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS4ISS4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS4ISS4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_Superclass_swigregister(itkIntensityWindowingImageFilterIUS4ISS4_Superclass)

def itkIntensityWindowingImageFilterIUS4IUC4_Superclass_New():
    return itkIntensityWindowingImageFilterIUS4IUC4_Superclass.New()

class itkIntensityWindowingImageFilterIUS4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4IUC4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS4IUC4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS4IUC4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,unsigned char >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,unsigned char > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,unsigned char > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS4IUC4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS4IUC4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_Superclass_swigregister(itkIntensityWindowingImageFilterIUS4IUC4_Superclass)

def itkIntensityWindowingImageFilterIUS4IUS4_Superclass_New():
    return itkIntensityWindowingImageFilterIUS4IUS4_Superclass.New()

class itkIntensityWindowingImageFilterIUS4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4IUS4):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,unsigned short >
        GetFunctor(self) -> itk::Functor::IntensityWindowingTransform< unsigned short,unsigned short > const &
        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::IntensityWindowingTransform< unsigned short,unsigned short > const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS4IUS4_Superclass

        Create a new object of the class itkIntensityWindowingImageFilterIUS4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS4IUS4_Superclass in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_Superclass_swigregister(itkIntensityWindowingImageFilterIUS4IUS4_Superclass)

def itkIntensityWindowingImageFilterID2ID2_New():
    return itkIntensityWindowingImageFilterID2ID2.New()

class itkIntensityWindowingImageFilterID2ID2(itkIntensityWindowingImageFilterID2ID2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID2ID2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID2ID2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID2ID2

        Create a new object of the class itkIntensityWindowingImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID2ID2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ID2_swigregister(itkIntensityWindowingImageFilterID2ID2)

def itkIntensityWindowingImageFilterID2IF2_New():
    return itkIntensityWindowingImageFilterID2IF2.New()

class itkIntensityWindowingImageFilterID2IF2(itkIntensityWindowingImageFilterID2IF2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID2IF2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID2IF2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID2IF2

        Create a new object of the class itkIntensityWindowingImageFilterID2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID2IF2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IF2_swigregister(itkIntensityWindowingImageFilterID2IF2)

def itkIntensityWindowingImageFilterID2ISS2_New():
    return itkIntensityWindowingImageFilterID2ISS2.New()

class itkIntensityWindowingImageFilterID2ISS2(itkIntensityWindowingImageFilterID2ISS2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID2ISS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID2ISS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID2ISS2

        Create a new object of the class itkIntensityWindowingImageFilterID2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID2ISS2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2ISS2_swigregister(itkIntensityWindowingImageFilterID2ISS2)

def itkIntensityWindowingImageFilterID2IUC2_New():
    return itkIntensityWindowingImageFilterID2IUC2.New()

class itkIntensityWindowingImageFilterID2IUC2(itkIntensityWindowingImageFilterID2IUC2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID2IUC2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID2IUC2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID2IUC2

        Create a new object of the class itkIntensityWindowingImageFilterID2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID2IUC2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUC2_swigregister(itkIntensityWindowingImageFilterID2IUC2)

def itkIntensityWindowingImageFilterID2IUS2_New():
    return itkIntensityWindowingImageFilterID2IUS2.New()

class itkIntensityWindowingImageFilterID2IUS2(itkIntensityWindowingImageFilterID2IUS2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID2IUS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID2IUS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID2IUS2

        Create a new object of the class itkIntensityWindowingImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID2IUS2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID2IUS2_swigregister(itkIntensityWindowingImageFilterID2IUS2)

def itkIntensityWindowingImageFilterID3ID3_New():
    return itkIntensityWindowingImageFilterID3ID3.New()

class itkIntensityWindowingImageFilterID3ID3(itkIntensityWindowingImageFilterID3ID3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID3ID3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID3ID3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID3ID3

        Create a new object of the class itkIntensityWindowingImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID3ID3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ID3_swigregister(itkIntensityWindowingImageFilterID3ID3)

def itkIntensityWindowingImageFilterID3IF3_New():
    return itkIntensityWindowingImageFilterID3IF3.New()

class itkIntensityWindowingImageFilterID3IF3(itkIntensityWindowingImageFilterID3IF3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID3IF3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID3IF3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID3IF3

        Create a new object of the class itkIntensityWindowingImageFilterID3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID3IF3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IF3_swigregister(itkIntensityWindowingImageFilterID3IF3)

def itkIntensityWindowingImageFilterID3ISS3_New():
    return itkIntensityWindowingImageFilterID3ISS3.New()

class itkIntensityWindowingImageFilterID3ISS3(itkIntensityWindowingImageFilterID3ISS3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID3ISS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID3ISS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID3ISS3

        Create a new object of the class itkIntensityWindowingImageFilterID3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID3ISS3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3ISS3_swigregister(itkIntensityWindowingImageFilterID3ISS3)

def itkIntensityWindowingImageFilterID3IUC3_New():
    return itkIntensityWindowingImageFilterID3IUC3.New()

class itkIntensityWindowingImageFilterID3IUC3(itkIntensityWindowingImageFilterID3IUC3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID3IUC3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID3IUC3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID3IUC3

        Create a new object of the class itkIntensityWindowingImageFilterID3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID3IUC3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUC3_swigregister(itkIntensityWindowingImageFilterID3IUC3)

def itkIntensityWindowingImageFilterID3IUS3_New():
    return itkIntensityWindowingImageFilterID3IUS3.New()

class itkIntensityWindowingImageFilterID3IUS3(itkIntensityWindowingImageFilterID3IUS3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID3IUS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID3IUS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID3IUS3

        Create a new object of the class itkIntensityWindowingImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID3IUS3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID3IUS3_swigregister(itkIntensityWindowingImageFilterID3IUS3)

def itkIntensityWindowingImageFilterID4ID4_New():
    return itkIntensityWindowingImageFilterID4ID4.New()

class itkIntensityWindowingImageFilterID4ID4(itkIntensityWindowingImageFilterID4ID4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID4ID4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID4ID4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID4ID4

        Create a new object of the class itkIntensityWindowingImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID4ID4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ID4_swigregister(itkIntensityWindowingImageFilterID4ID4)

def itkIntensityWindowingImageFilterID4IF4_New():
    return itkIntensityWindowingImageFilterID4IF4.New()

class itkIntensityWindowingImageFilterID4IF4(itkIntensityWindowingImageFilterID4IF4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID4IF4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID4IF4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID4IF4

        Create a new object of the class itkIntensityWindowingImageFilterID4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID4IF4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IF4_swigregister(itkIntensityWindowingImageFilterID4IF4)

def itkIntensityWindowingImageFilterID4ISS4_New():
    return itkIntensityWindowingImageFilterID4ISS4.New()

class itkIntensityWindowingImageFilterID4ISS4(itkIntensityWindowingImageFilterID4ISS4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID4ISS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID4ISS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID4ISS4

        Create a new object of the class itkIntensityWindowingImageFilterID4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID4ISS4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4ISS4_swigregister(itkIntensityWindowingImageFilterID4ISS4)

def itkIntensityWindowingImageFilterID4IUC4_New():
    return itkIntensityWindowingImageFilterID4IUC4.New()

class itkIntensityWindowingImageFilterID4IUC4(itkIntensityWindowingImageFilterID4IUC4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID4IUC4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID4IUC4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID4IUC4

        Create a new object of the class itkIntensityWindowingImageFilterID4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID4IUC4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUC4_swigregister(itkIntensityWindowingImageFilterID4IUC4)

def itkIntensityWindowingImageFilterID4IUS4_New():
    return itkIntensityWindowingImageFilterID4IUS4.New()

class itkIntensityWindowingImageFilterID4IUS4(itkIntensityWindowingImageFilterID4IUS4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterID4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterID4IUS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterID4IUS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: double const &
        level: double const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> double"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterID4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterID4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterID4IUS4

        Create a new object of the class itkIntensityWindowingImageFilterID4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterID4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterID4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterID4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterID4IUS4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterID4IUS4_swigregister(itkIntensityWindowingImageFilterID4IUS4)

def itkIntensityWindowingImageFilterIF2ID2_New():
    return itkIntensityWindowingImageFilterIF2ID2.New()

class itkIntensityWindowingImageFilterIF2ID2(itkIntensityWindowingImageFilterIF2ID2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF2ID2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF2ID2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF2ID2

        Create a new object of the class itkIntensityWindowingImageFilterIF2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF2ID2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ID2_swigregister(itkIntensityWindowingImageFilterIF2ID2)

def itkIntensityWindowingImageFilterIF2IF2_New():
    return itkIntensityWindowingImageFilterIF2IF2.New()

class itkIntensityWindowingImageFilterIF2IF2(itkIntensityWindowingImageFilterIF2IF2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF2IF2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF2IF2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF2IF2

        Create a new object of the class itkIntensityWindowingImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF2IF2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IF2_swigregister(itkIntensityWindowingImageFilterIF2IF2)

def itkIntensityWindowingImageFilterIF2ISS2_New():
    return itkIntensityWindowingImageFilterIF2ISS2.New()

class itkIntensityWindowingImageFilterIF2ISS2(itkIntensityWindowingImageFilterIF2ISS2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF2ISS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF2ISS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF2ISS2

        Create a new object of the class itkIntensityWindowingImageFilterIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF2ISS2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2ISS2_swigregister(itkIntensityWindowingImageFilterIF2ISS2)

def itkIntensityWindowingImageFilterIF2IUC2_New():
    return itkIntensityWindowingImageFilterIF2IUC2.New()

class itkIntensityWindowingImageFilterIF2IUC2(itkIntensityWindowingImageFilterIF2IUC2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF2IUC2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF2IUC2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF2IUC2

        Create a new object of the class itkIntensityWindowingImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF2IUC2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUC2_swigregister(itkIntensityWindowingImageFilterIF2IUC2)

def itkIntensityWindowingImageFilterIF2IUS2_New():
    return itkIntensityWindowingImageFilterIF2IUS2.New()

class itkIntensityWindowingImageFilterIF2IUS2(itkIntensityWindowingImageFilterIF2IUS2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF2IUS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF2IUS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF2IUS2

        Create a new object of the class itkIntensityWindowingImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF2IUS2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF2IUS2_swigregister(itkIntensityWindowingImageFilterIF2IUS2)

def itkIntensityWindowingImageFilterIF3ID3_New():
    return itkIntensityWindowingImageFilterIF3ID3.New()

class itkIntensityWindowingImageFilterIF3ID3(itkIntensityWindowingImageFilterIF3ID3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF3ID3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF3ID3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF3ID3

        Create a new object of the class itkIntensityWindowingImageFilterIF3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF3ID3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ID3_swigregister(itkIntensityWindowingImageFilterIF3ID3)

def itkIntensityWindowingImageFilterIF3IF3_New():
    return itkIntensityWindowingImageFilterIF3IF3.New()

class itkIntensityWindowingImageFilterIF3IF3(itkIntensityWindowingImageFilterIF3IF3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF3IF3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF3IF3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF3IF3

        Create a new object of the class itkIntensityWindowingImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF3IF3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IF3_swigregister(itkIntensityWindowingImageFilterIF3IF3)

def itkIntensityWindowingImageFilterIF3ISS3_New():
    return itkIntensityWindowingImageFilterIF3ISS3.New()

class itkIntensityWindowingImageFilterIF3ISS3(itkIntensityWindowingImageFilterIF3ISS3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF3ISS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF3ISS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF3ISS3

        Create a new object of the class itkIntensityWindowingImageFilterIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF3ISS3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3ISS3_swigregister(itkIntensityWindowingImageFilterIF3ISS3)

def itkIntensityWindowingImageFilterIF3IUC3_New():
    return itkIntensityWindowingImageFilterIF3IUC3.New()

class itkIntensityWindowingImageFilterIF3IUC3(itkIntensityWindowingImageFilterIF3IUC3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF3IUC3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF3IUC3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF3IUC3

        Create a new object of the class itkIntensityWindowingImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF3IUC3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUC3_swigregister(itkIntensityWindowingImageFilterIF3IUC3)

def itkIntensityWindowingImageFilterIF3IUS3_New():
    return itkIntensityWindowingImageFilterIF3IUS3.New()

class itkIntensityWindowingImageFilterIF3IUS3(itkIntensityWindowingImageFilterIF3IUS3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF3IUS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF3IUS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF3IUS3

        Create a new object of the class itkIntensityWindowingImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF3IUS3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF3IUS3_swigregister(itkIntensityWindowingImageFilterIF3IUS3)

def itkIntensityWindowingImageFilterIF4ID4_New():
    return itkIntensityWindowingImageFilterIF4ID4.New()

class itkIntensityWindowingImageFilterIF4ID4(itkIntensityWindowingImageFilterIF4ID4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF4ID4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF4ID4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF4ID4

        Create a new object of the class itkIntensityWindowingImageFilterIF4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF4ID4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ID4_swigregister(itkIntensityWindowingImageFilterIF4ID4)

def itkIntensityWindowingImageFilterIF4IF4_New():
    return itkIntensityWindowingImageFilterIF4IF4.New()

class itkIntensityWindowingImageFilterIF4IF4(itkIntensityWindowingImageFilterIF4IF4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF4IF4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF4IF4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF4IF4

        Create a new object of the class itkIntensityWindowingImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF4IF4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IF4_swigregister(itkIntensityWindowingImageFilterIF4IF4)

def itkIntensityWindowingImageFilterIF4ISS4_New():
    return itkIntensityWindowingImageFilterIF4ISS4.New()

class itkIntensityWindowingImageFilterIF4ISS4(itkIntensityWindowingImageFilterIF4ISS4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF4ISS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF4ISS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF4ISS4

        Create a new object of the class itkIntensityWindowingImageFilterIF4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF4ISS4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4ISS4_swigregister(itkIntensityWindowingImageFilterIF4ISS4)

def itkIntensityWindowingImageFilterIF4IUC4_New():
    return itkIntensityWindowingImageFilterIF4IUC4.New()

class itkIntensityWindowingImageFilterIF4IUC4(itkIntensityWindowingImageFilterIF4IUC4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF4IUC4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF4IUC4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF4IUC4

        Create a new object of the class itkIntensityWindowingImageFilterIF4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF4IUC4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUC4_swigregister(itkIntensityWindowingImageFilterIF4IUC4)

def itkIntensityWindowingImageFilterIF4IUS4_New():
    return itkIntensityWindowingImageFilterIF4IUS4.New()

class itkIntensityWindowingImageFilterIF4IUS4(itkIntensityWindowingImageFilterIF4IUS4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIF4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIF4IUS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIF4IUS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: float const &
        level: float const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> float"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIF4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIF4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIF4IUS4

        Create a new object of the class itkIntensityWindowingImageFilterIF4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIF4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIF4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIF4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIF4IUS4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIF4IUS4_swigregister(itkIntensityWindowingImageFilterIF4IUS4)

def itkIntensityWindowingImageFilterISS2ID2_New():
    return itkIntensityWindowingImageFilterISS2ID2.New()

class itkIntensityWindowingImageFilterISS2ID2(itkIntensityWindowingImageFilterISS2ID2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS2ID2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS2ID2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS2ID2

        Create a new object of the class itkIntensityWindowingImageFilterISS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS2ID2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ID2_swigregister(itkIntensityWindowingImageFilterISS2ID2)

def itkIntensityWindowingImageFilterISS2IF2_New():
    return itkIntensityWindowingImageFilterISS2IF2.New()

class itkIntensityWindowingImageFilterISS2IF2(itkIntensityWindowingImageFilterISS2IF2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS2IF2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS2IF2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS2IF2

        Create a new object of the class itkIntensityWindowingImageFilterISS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS2IF2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IF2_swigregister(itkIntensityWindowingImageFilterISS2IF2)

def itkIntensityWindowingImageFilterISS2ISS2_New():
    return itkIntensityWindowingImageFilterISS2ISS2.New()

class itkIntensityWindowingImageFilterISS2ISS2(itkIntensityWindowingImageFilterISS2ISS2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS2ISS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS2ISS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS2ISS2

        Create a new object of the class itkIntensityWindowingImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS2ISS2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2ISS2_swigregister(itkIntensityWindowingImageFilterISS2ISS2)

def itkIntensityWindowingImageFilterISS2IUC2_New():
    return itkIntensityWindowingImageFilterISS2IUC2.New()

class itkIntensityWindowingImageFilterISS2IUC2(itkIntensityWindowingImageFilterISS2IUC2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS2IUC2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS2IUC2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS2IUC2

        Create a new object of the class itkIntensityWindowingImageFilterISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS2IUC2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUC2_swigregister(itkIntensityWindowingImageFilterISS2IUC2)

def itkIntensityWindowingImageFilterISS2IUS2_New():
    return itkIntensityWindowingImageFilterISS2IUS2.New()

class itkIntensityWindowingImageFilterISS2IUS2(itkIntensityWindowingImageFilterISS2IUS2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS2IUS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS2IUS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS2IUS2

        Create a new object of the class itkIntensityWindowingImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS2IUS2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS2IUS2_swigregister(itkIntensityWindowingImageFilterISS2IUS2)

def itkIntensityWindowingImageFilterISS3ID3_New():
    return itkIntensityWindowingImageFilterISS3ID3.New()

class itkIntensityWindowingImageFilterISS3ID3(itkIntensityWindowingImageFilterISS3ID3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS3ID3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS3ID3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS3ID3

        Create a new object of the class itkIntensityWindowingImageFilterISS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS3ID3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ID3_swigregister(itkIntensityWindowingImageFilterISS3ID3)

def itkIntensityWindowingImageFilterISS3IF3_New():
    return itkIntensityWindowingImageFilterISS3IF3.New()

class itkIntensityWindowingImageFilterISS3IF3(itkIntensityWindowingImageFilterISS3IF3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS3IF3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS3IF3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS3IF3

        Create a new object of the class itkIntensityWindowingImageFilterISS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS3IF3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IF3_swigregister(itkIntensityWindowingImageFilterISS3IF3)

def itkIntensityWindowingImageFilterISS3ISS3_New():
    return itkIntensityWindowingImageFilterISS3ISS3.New()

class itkIntensityWindowingImageFilterISS3ISS3(itkIntensityWindowingImageFilterISS3ISS3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS3ISS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS3ISS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS3ISS3

        Create a new object of the class itkIntensityWindowingImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS3ISS3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3ISS3_swigregister(itkIntensityWindowingImageFilterISS3ISS3)

def itkIntensityWindowingImageFilterISS3IUC3_New():
    return itkIntensityWindowingImageFilterISS3IUC3.New()

class itkIntensityWindowingImageFilterISS3IUC3(itkIntensityWindowingImageFilterISS3IUC3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS3IUC3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS3IUC3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS3IUC3

        Create a new object of the class itkIntensityWindowingImageFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS3IUC3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUC3_swigregister(itkIntensityWindowingImageFilterISS3IUC3)

def itkIntensityWindowingImageFilterISS3IUS3_New():
    return itkIntensityWindowingImageFilterISS3IUS3.New()

class itkIntensityWindowingImageFilterISS3IUS3(itkIntensityWindowingImageFilterISS3IUS3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS3IUS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS3IUS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS3IUS3

        Create a new object of the class itkIntensityWindowingImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS3IUS3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS3IUS3_swigregister(itkIntensityWindowingImageFilterISS3IUS3)

def itkIntensityWindowingImageFilterISS4ID4_New():
    return itkIntensityWindowingImageFilterISS4ID4.New()

class itkIntensityWindowingImageFilterISS4ID4(itkIntensityWindowingImageFilterISS4ID4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS4ID4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS4ID4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS4ID4

        Create a new object of the class itkIntensityWindowingImageFilterISS4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS4ID4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ID4_swigregister(itkIntensityWindowingImageFilterISS4ID4)

def itkIntensityWindowingImageFilterISS4IF4_New():
    return itkIntensityWindowingImageFilterISS4IF4.New()

class itkIntensityWindowingImageFilterISS4IF4(itkIntensityWindowingImageFilterISS4IF4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS4IF4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS4IF4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS4IF4

        Create a new object of the class itkIntensityWindowingImageFilterISS4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS4IF4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IF4_swigregister(itkIntensityWindowingImageFilterISS4IF4)

def itkIntensityWindowingImageFilterISS4ISS4_New():
    return itkIntensityWindowingImageFilterISS4ISS4.New()

class itkIntensityWindowingImageFilterISS4ISS4(itkIntensityWindowingImageFilterISS4ISS4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS4ISS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS4ISS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS4ISS4

        Create a new object of the class itkIntensityWindowingImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS4ISS4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4ISS4_swigregister(itkIntensityWindowingImageFilterISS4ISS4)

def itkIntensityWindowingImageFilterISS4IUC4_New():
    return itkIntensityWindowingImageFilterISS4IUC4.New()

class itkIntensityWindowingImageFilterISS4IUC4(itkIntensityWindowingImageFilterISS4IUC4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS4IUC4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS4IUC4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS4IUC4

        Create a new object of the class itkIntensityWindowingImageFilterISS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS4IUC4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUC4_swigregister(itkIntensityWindowingImageFilterISS4IUC4)

def itkIntensityWindowingImageFilterISS4IUS4_New():
    return itkIntensityWindowingImageFilterISS4IUS4.New()

class itkIntensityWindowingImageFilterISS4IUS4(itkIntensityWindowingImageFilterISS4IUS4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterISS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterISS4IUS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterISS4IUS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: short const &
        level: short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterISS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterISS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterISS4IUS4

        Create a new object of the class itkIntensityWindowingImageFilterISS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterISS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterISS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterISS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterISS4IUS4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterISS4IUS4_swigregister(itkIntensityWindowingImageFilterISS4IUS4)

def itkIntensityWindowingImageFilterIUC2ID2_New():
    return itkIntensityWindowingImageFilterIUC2ID2.New()

class itkIntensityWindowingImageFilterIUC2ID2(itkIntensityWindowingImageFilterIUC2ID2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC2ID2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC2ID2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC2ID2

        Create a new object of the class itkIntensityWindowingImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC2ID2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ID2_swigregister(itkIntensityWindowingImageFilterIUC2ID2)

def itkIntensityWindowingImageFilterIUC2IF2_New():
    return itkIntensityWindowingImageFilterIUC2IF2.New()

class itkIntensityWindowingImageFilterIUC2IF2(itkIntensityWindowingImageFilterIUC2IF2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC2IF2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC2IF2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC2IF2

        Create a new object of the class itkIntensityWindowingImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC2IF2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IF2_swigregister(itkIntensityWindowingImageFilterIUC2IF2)

def itkIntensityWindowingImageFilterIUC2ISS2_New():
    return itkIntensityWindowingImageFilterIUC2ISS2.New()

class itkIntensityWindowingImageFilterIUC2ISS2(itkIntensityWindowingImageFilterIUC2ISS2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC2ISS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC2ISS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC2ISS2

        Create a new object of the class itkIntensityWindowingImageFilterIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC2ISS2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2ISS2_swigregister(itkIntensityWindowingImageFilterIUC2ISS2)

def itkIntensityWindowingImageFilterIUC2IUC2_New():
    return itkIntensityWindowingImageFilterIUC2IUC2.New()

class itkIntensityWindowingImageFilterIUC2IUC2(itkIntensityWindowingImageFilterIUC2IUC2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC2IUC2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC2IUC2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC2IUC2

        Create a new object of the class itkIntensityWindowingImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC2IUC2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUC2_swigregister(itkIntensityWindowingImageFilterIUC2IUC2)

def itkIntensityWindowingImageFilterIUC2IUS2_New():
    return itkIntensityWindowingImageFilterIUC2IUS2.New()

class itkIntensityWindowingImageFilterIUC2IUS2(itkIntensityWindowingImageFilterIUC2IUS2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC2IUS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC2IUS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC2IUS2

        Create a new object of the class itkIntensityWindowingImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC2IUS2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC2IUS2_swigregister(itkIntensityWindowingImageFilterIUC2IUS2)

def itkIntensityWindowingImageFilterIUC3ID3_New():
    return itkIntensityWindowingImageFilterIUC3ID3.New()

class itkIntensityWindowingImageFilterIUC3ID3(itkIntensityWindowingImageFilterIUC3ID3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC3ID3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC3ID3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC3ID3

        Create a new object of the class itkIntensityWindowingImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC3ID3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ID3_swigregister(itkIntensityWindowingImageFilterIUC3ID3)

def itkIntensityWindowingImageFilterIUC3IF3_New():
    return itkIntensityWindowingImageFilterIUC3IF3.New()

class itkIntensityWindowingImageFilterIUC3IF3(itkIntensityWindowingImageFilterIUC3IF3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC3IF3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC3IF3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC3IF3

        Create a new object of the class itkIntensityWindowingImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC3IF3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IF3_swigregister(itkIntensityWindowingImageFilterIUC3IF3)

def itkIntensityWindowingImageFilterIUC3ISS3_New():
    return itkIntensityWindowingImageFilterIUC3ISS3.New()

class itkIntensityWindowingImageFilterIUC3ISS3(itkIntensityWindowingImageFilterIUC3ISS3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC3ISS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC3ISS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC3ISS3

        Create a new object of the class itkIntensityWindowingImageFilterIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC3ISS3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3ISS3_swigregister(itkIntensityWindowingImageFilterIUC3ISS3)

def itkIntensityWindowingImageFilterIUC3IUC3_New():
    return itkIntensityWindowingImageFilterIUC3IUC3.New()

class itkIntensityWindowingImageFilterIUC3IUC3(itkIntensityWindowingImageFilterIUC3IUC3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC3IUC3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC3IUC3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC3IUC3

        Create a new object of the class itkIntensityWindowingImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC3IUC3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUC3_swigregister(itkIntensityWindowingImageFilterIUC3IUC3)

def itkIntensityWindowingImageFilterIUC3IUS3_New():
    return itkIntensityWindowingImageFilterIUC3IUS3.New()

class itkIntensityWindowingImageFilterIUC3IUS3(itkIntensityWindowingImageFilterIUC3IUS3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC3IUS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC3IUS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC3IUS3

        Create a new object of the class itkIntensityWindowingImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC3IUS3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC3IUS3_swigregister(itkIntensityWindowingImageFilterIUC3IUS3)

def itkIntensityWindowingImageFilterIUC4ID4_New():
    return itkIntensityWindowingImageFilterIUC4ID4.New()

class itkIntensityWindowingImageFilterIUC4ID4(itkIntensityWindowingImageFilterIUC4ID4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC4ID4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC4ID4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC4ID4

        Create a new object of the class itkIntensityWindowingImageFilterIUC4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC4ID4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ID4_swigregister(itkIntensityWindowingImageFilterIUC4ID4)

def itkIntensityWindowingImageFilterIUC4IF4_New():
    return itkIntensityWindowingImageFilterIUC4IF4.New()

class itkIntensityWindowingImageFilterIUC4IF4(itkIntensityWindowingImageFilterIUC4IF4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC4IF4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC4IF4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC4IF4

        Create a new object of the class itkIntensityWindowingImageFilterIUC4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC4IF4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IF4_swigregister(itkIntensityWindowingImageFilterIUC4IF4)

def itkIntensityWindowingImageFilterIUC4ISS4_New():
    return itkIntensityWindowingImageFilterIUC4ISS4.New()

class itkIntensityWindowingImageFilterIUC4ISS4(itkIntensityWindowingImageFilterIUC4ISS4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC4ISS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC4ISS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC4ISS4

        Create a new object of the class itkIntensityWindowingImageFilterIUC4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC4ISS4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4ISS4_swigregister(itkIntensityWindowingImageFilterIUC4ISS4)

def itkIntensityWindowingImageFilterIUC4IUC4_New():
    return itkIntensityWindowingImageFilterIUC4IUC4.New()

class itkIntensityWindowingImageFilterIUC4IUC4(itkIntensityWindowingImageFilterIUC4IUC4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC4IUC4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC4IUC4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC4IUC4

        Create a new object of the class itkIntensityWindowingImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC4IUC4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUC4_swigregister(itkIntensityWindowingImageFilterIUC4IUC4)

def itkIntensityWindowingImageFilterIUC4IUS4_New():
    return itkIntensityWindowingImageFilterIUC4IUS4.New()

class itkIntensityWindowingImageFilterIUC4IUS4(itkIntensityWindowingImageFilterIUC4IUS4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUC4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUC4IUS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUC4IUS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned char const &
        level: unsigned char const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned char"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUC4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUC4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUC4IUS4

        Create a new object of the class itkIntensityWindowingImageFilterIUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUC4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUC4IUS4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUC4IUS4_swigregister(itkIntensityWindowingImageFilterIUC4IUS4)

def itkIntensityWindowingImageFilterIUS2ID2_New():
    return itkIntensityWindowingImageFilterIUS2ID2.New()

class itkIntensityWindowingImageFilterIUS2ID2(itkIntensityWindowingImageFilterIUS2ID2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS2ID2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS2ID2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS2ID2

        Create a new object of the class itkIntensityWindowingImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS2ID2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ID2_swigregister(itkIntensityWindowingImageFilterIUS2ID2)

def itkIntensityWindowingImageFilterIUS2IF2_New():
    return itkIntensityWindowingImageFilterIUS2IF2.New()

class itkIntensityWindowingImageFilterIUS2IF2(itkIntensityWindowingImageFilterIUS2IF2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS2IF2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS2IF2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS2IF2

        Create a new object of the class itkIntensityWindowingImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS2IF2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IF2_swigregister(itkIntensityWindowingImageFilterIUS2IF2)

def itkIntensityWindowingImageFilterIUS2ISS2_New():
    return itkIntensityWindowingImageFilterIUS2ISS2.New()

class itkIntensityWindowingImageFilterIUS2ISS2(itkIntensityWindowingImageFilterIUS2ISS2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS2ISS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS2ISS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS2ISS2

        Create a new object of the class itkIntensityWindowingImageFilterIUS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS2ISS2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2ISS2_swigregister(itkIntensityWindowingImageFilterIUS2ISS2)

def itkIntensityWindowingImageFilterIUS2IUC2_New():
    return itkIntensityWindowingImageFilterIUS2IUC2.New()

class itkIntensityWindowingImageFilterIUS2IUC2(itkIntensityWindowingImageFilterIUS2IUC2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS2IUC2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS2IUC2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS2IUC2

        Create a new object of the class itkIntensityWindowingImageFilterIUS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS2IUC2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUC2_swigregister(itkIntensityWindowingImageFilterIUS2IUC2)

def itkIntensityWindowingImageFilterIUS2IUS2_New():
    return itkIntensityWindowingImageFilterIUS2IUS2.New()

class itkIntensityWindowingImageFilterIUS2IUS2(itkIntensityWindowingImageFilterIUS2IUS2_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS2IUS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS2IUS2_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS2IUS2

        Create a new object of the class itkIntensityWindowingImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS2IUS2 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS2IUS2_swigregister(itkIntensityWindowingImageFilterIUS2IUS2)

def itkIntensityWindowingImageFilterIUS3ID3_New():
    return itkIntensityWindowingImageFilterIUS3ID3.New()

class itkIntensityWindowingImageFilterIUS3ID3(itkIntensityWindowingImageFilterIUS3ID3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS3ID3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS3ID3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS3ID3

        Create a new object of the class itkIntensityWindowingImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS3ID3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ID3_swigregister(itkIntensityWindowingImageFilterIUS3ID3)

def itkIntensityWindowingImageFilterIUS3IF3_New():
    return itkIntensityWindowingImageFilterIUS3IF3.New()

class itkIntensityWindowingImageFilterIUS3IF3(itkIntensityWindowingImageFilterIUS3IF3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS3IF3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS3IF3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS3IF3

        Create a new object of the class itkIntensityWindowingImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS3IF3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IF3_swigregister(itkIntensityWindowingImageFilterIUS3IF3)

def itkIntensityWindowingImageFilterIUS3ISS3_New():
    return itkIntensityWindowingImageFilterIUS3ISS3.New()

class itkIntensityWindowingImageFilterIUS3ISS3(itkIntensityWindowingImageFilterIUS3ISS3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS3ISS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS3ISS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS3ISS3

        Create a new object of the class itkIntensityWindowingImageFilterIUS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS3ISS3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3ISS3_swigregister(itkIntensityWindowingImageFilterIUS3ISS3)

def itkIntensityWindowingImageFilterIUS3IUC3_New():
    return itkIntensityWindowingImageFilterIUS3IUC3.New()

class itkIntensityWindowingImageFilterIUS3IUC3(itkIntensityWindowingImageFilterIUS3IUC3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS3IUC3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS3IUC3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS3IUC3

        Create a new object of the class itkIntensityWindowingImageFilterIUS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS3IUC3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUC3_swigregister(itkIntensityWindowingImageFilterIUS3IUC3)

def itkIntensityWindowingImageFilterIUS3IUS3_New():
    return itkIntensityWindowingImageFilterIUS3IUS3.New()

class itkIntensityWindowingImageFilterIUS3IUS3(itkIntensityWindowingImageFilterIUS3IUS3_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS3IUS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS3IUS3_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS3IUS3

        Create a new object of the class itkIntensityWindowingImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS3IUS3 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS3IUS3_swigregister(itkIntensityWindowingImageFilterIUS3IUS3)

def itkIntensityWindowingImageFilterIUS4ID4_New():
    return itkIntensityWindowingImageFilterIUS4ID4.New()

class itkIntensityWindowingImageFilterIUS4ID4(itkIntensityWindowingImageFilterIUS4ID4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS4ID4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS4ID4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS4ID4

        Create a new object of the class itkIntensityWindowingImageFilterIUS4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS4ID4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ID4_swigregister(itkIntensityWindowingImageFilterIUS4ID4)

def itkIntensityWindowingImageFilterIUS4IF4_New():
    return itkIntensityWindowingImageFilterIUS4IF4.New()

class itkIntensityWindowingImageFilterIUS4IF4(itkIntensityWindowingImageFilterIUS4IF4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS4IF4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS4IF4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS4IF4

        Create a new object of the class itkIntensityWindowingImageFilterIUS4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS4IF4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IF4_swigregister(itkIntensityWindowingImageFilterIUS4IF4)

def itkIntensityWindowingImageFilterIUS4ISS4_New():
    return itkIntensityWindowingImageFilterIUS4ISS4.New()

class itkIntensityWindowingImageFilterIUS4ISS4(itkIntensityWindowingImageFilterIUS4ISS4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS4ISS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS4ISS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS4ISS4

        Create a new object of the class itkIntensityWindowingImageFilterIUS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS4ISS4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4ISS4_swigregister(itkIntensityWindowingImageFilterIUS4ISS4)

def itkIntensityWindowingImageFilterIUS4IUC4_New():
    return itkIntensityWindowingImageFilterIUS4IUC4.New()

class itkIntensityWindowingImageFilterIUS4IUC4(itkIntensityWindowingImageFilterIUS4IUC4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS4IUC4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS4IUC4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS4IUC4

        Create a new object of the class itkIntensityWindowingImageFilterIUS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS4IUC4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUC4_swigregister(itkIntensityWindowingImageFilterIUS4IUC4)

def itkIntensityWindowingImageFilterIUS4IUS4_New():
    return itkIntensityWindowingImageFilterIUS4IUS4.New()

class itkIntensityWindowingImageFilterIUS4IUS4(itkIntensityWindowingImageFilterIUS4IUS4_Superclass):
    r"""Proxy of C++ itkIntensityWindowingImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntensityWindowingImageFilterIUS4IUS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntensityWindowingImageFilterIUS4IUS4_Pointer"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_Clone(self)

    def SetOutputMinimum(self, _arg):
        r"""
        SetOutputMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_SetOutputMinimum(self, _arg)

    def SetOutputMaximum(self, _arg):
        r"""
        SetOutputMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_SetOutputMaximum(self, _arg)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_GetOutputMinimum(self)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_GetOutputMaximum(self)

    def SetWindowMinimum(self, _arg):
        r"""
        SetWindowMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_SetWindowMinimum(self, _arg)

    def SetWindowMaximum(self, _arg):
        r"""
        SetWindowMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_SetWindowMaximum(self, _arg)

    def GetWindowMinimum(self):
        r"""GetWindowMinimum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_GetWindowMinimum(self)

    def GetWindowMaximum(self):
        r"""GetWindowMaximum(self) -> unsigned short const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_GetWindowMaximum(self)

    def SetWindowLevel(self, window, level):
        r"""
        SetWindowLevel(self, window, level)

        Parameters
        ----------
        window: unsigned short const &
        level: unsigned short const &

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_SetWindowLevel(self, window, level)

    def GetWindow(self):
        r"""GetWindow(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_GetWindow(self)

    def GetLevel(self):
        r"""GetLevel(self) -> unsigned short"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_GetLevel(self)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_GetScale(self)

    def GetShift(self):
        r"""GetShift(self) -> double const &"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_GetShift(self)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_BeforeThreadedGenerateData(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_PrintSelf(self, os, indent)
    InputHasNumericTraitsCheck = _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIntensityWindowingImageFilterPython.delete_itkIntensityWindowingImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntensityWindowingImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntensityWindowingImageFilterIUS4IUS4

        Create a new object of the class itkIntensityWindowingImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntensityWindowingImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntensityWindowingImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntensityWindowingImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntensityWindowingImageFilterIUS4IUS4 in _itkIntensityWindowingImageFilterPython:
_itkIntensityWindowingImageFilterPython.itkIntensityWindowingImageFilterIUS4IUS4_swigregister(itkIntensityWindowingImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def unary_functor_image_filter(*args: itkt.ImageLike,  functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for UnaryFunctorImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.UnaryFunctorImageFilter
    unary_functor_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    unary_functor_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def intensity_windowing_image_filter(*args: itkt.ImageLike,  output_minimum: int=..., output_maximum: int=..., window_minimum: float=..., window_maximum: float=..., window_level: float=..., functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for IntensityWindowingImageFilter"""
    import itk

    kwarg_typehints = { 'output_minimum':output_minimum,'output_maximum':output_maximum,'window_minimum':window_minimum,'window_maximum':window_maximum,'window_level':window_level,'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.IntensityWindowingImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def intensity_windowing_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.IntensityWindowingImageFilter
    intensity_windowing_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    intensity_windowing_image_filter.__doc__ = filter_object.__doc__



