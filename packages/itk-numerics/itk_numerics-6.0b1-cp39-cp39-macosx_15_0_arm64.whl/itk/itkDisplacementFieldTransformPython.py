# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDisplacementFieldPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDisplacementFieldTransformPython
else:
    import _itkDisplacementFieldTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkOptimizerParametersPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkArrayPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython

def itkDisplacementFieldTransformD2_New():
    return itkDisplacementFieldTransformD2.New()

class itkDisplacementFieldTransformD2(itk.itkTransformBasePython.itkTransformD22):
    r"""Proxy of C++ itkDisplacementFieldTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDisplacementFieldTransformD2_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDisplacementFieldTransformD2_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_Clone(self)

    def SetDisplacementField(self, *args):
        r"""
        SetDisplacementField(self, field)

        Parameters
        ----------
        field: itkImageVD22 *

        SetDisplacementField(self, field)

        Parameters
        ----------
        field: itkVectorImageD2 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetDisplacementField(self, *args)

    def GetModifiableDisplacementField(self):
        r"""GetModifiableDisplacementField(self) -> itkImageVD22"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetModifiableDisplacementField(self)

    def GetDisplacementField(self, *args):
        r"""
        GetDisplacementField(self) -> itkImageVD22
        GetDisplacementField(self) -> itkImageVD22
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetDisplacementField(self, *args)

    def SetInverseDisplacementField(self, inverseField):
        r"""
        SetInverseDisplacementField(self, inverseField)

        Parameters
        ----------
        inverseField: itkImageVD22 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetInverseDisplacementField(self, inverseField)

    def GetModifiableInverseDisplacementField(self):
        r"""GetModifiableInverseDisplacementField(self) -> itkImageVD22"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetModifiableInverseDisplacementField(self)

    def GetInverseDisplacementField(self, *args):
        r"""
        GetInverseDisplacementField(self) -> itkImageVD22
        GetInverseDisplacementField(self) -> itkImageVD22
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInverseDisplacementField(self, *args)

    def SetInterpolator(self, interpolator):
        r"""
        SetInterpolator(self, interpolator)

        Parameters
        ----------
        interpolator: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 > > > *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetInterpolator(self, interpolator)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 > > > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 > > > const
        GetInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 > > > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInterpolator(self, *args)

    def SetInverseInterpolator(self, interpolator):
        r"""
        SetInverseInterpolator(self, interpolator)

        Parameters
        ----------
        interpolator: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 > > > *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetInverseInterpolator(self, interpolator)

    def GetModifiableInverseInterpolator(self):
        r"""GetModifiableInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 > > > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetModifiableInverseInterpolator(self)

    def GetInverseInterpolator(self, *args):
        r"""
        GetInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 > > > const
        GetInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 > > > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInverseInterpolator(self, *args)

    def GetDisplacementFieldSetTime(self):
        r"""GetDisplacementFieldSetTime(self) -> unsigned long const &"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetDisplacementFieldSetTime(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: itkVectorD2 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,2 > const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_TransformVector(self, *args)

    def TransformDiffusionTensor(self, *args):
        r"""
        TransformDiffusionTensor(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_TransformDiffusionTensor(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD2

        Parameters
        ----------
        arg0: itkCovariantVectorD2 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_TransformCovariantVector(self, *args)

    def ComputeJacobianWithRespectToParameters(self, *args):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, j)

        Parameters
        ----------
        arg0: itkPointD2 const &
        j: itkArray2DD &

        ComputeJacobianWithRespectToParameters(self, arg0, j)

        Parameters
        ----------
        arg0: itkIndex2 const &
        j: itkArray2DD &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_ComputeJacobianWithRespectToParameters(self, *args)

    def ComputeJacobianWithRespectToPosition(self, *args):
        r"""
        ComputeJacobianWithRespectToPosition(self, point, jacobian)

        Parameters
        ----------
        point: itkPointD2 const &
        jacobian: vnl_matrix_fixedD_2_2 &

        ComputeJacobianWithRespectToPosition(self, index, jacobian)

        Parameters
        ----------
        index: itkIndex2 const &
        jacobian: vnl_matrix_fixedD_2_2 &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_ComputeJacobianWithRespectToPosition(self, *args)

    def GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args):
        r"""
        GetInverseJacobianOfForwardFieldWithRespectToPosition(self, point, jacobian, useSVD=False)

        Parameters
        ----------
        point: itkPointD2 const &
        jacobian: vnl_matrix_fixedD_2_2 &
        useSVD: bool

        GetInverseJacobianOfForwardFieldWithRespectToPosition(self, index, jacobian, useSVD=False)

        Parameters
        ----------
        index: itkIndex2 const &
        jacobian: vnl_matrix_fixedD_2_2 &
        useSVD: bool

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkDisplacementFieldTransformD2 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInverse(self, inverse)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetIdentity(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkDisplacementFieldTransformPython.delete_itkDisplacementFieldTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDisplacementFieldTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldTransformD2

        Create a new object of the class itkDisplacementFieldTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDisplacementFieldTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDisplacementFieldTransformD2 in _itkDisplacementFieldTransformPython:
_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_swigregister(itkDisplacementFieldTransformD2)

def itkDisplacementFieldTransformD3_New():
    return itkDisplacementFieldTransformD3.New()

class itkDisplacementFieldTransformD3(itk.itkTransformBasePython.itkTransformD33):
    r"""Proxy of C++ itkDisplacementFieldTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDisplacementFieldTransformD3_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDisplacementFieldTransformD3_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_Clone(self)

    def SetDisplacementField(self, *args):
        r"""
        SetDisplacementField(self, field)

        Parameters
        ----------
        field: itkImageVD33 *

        SetDisplacementField(self, field)

        Parameters
        ----------
        field: itkVectorImageD3 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetDisplacementField(self, *args)

    def GetModifiableDisplacementField(self):
        r"""GetModifiableDisplacementField(self) -> itkImageVD33"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetModifiableDisplacementField(self)

    def GetDisplacementField(self, *args):
        r"""
        GetDisplacementField(self) -> itkImageVD33
        GetDisplacementField(self) -> itkImageVD33
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetDisplacementField(self, *args)

    def SetInverseDisplacementField(self, inverseField):
        r"""
        SetInverseDisplacementField(self, inverseField)

        Parameters
        ----------
        inverseField: itkImageVD33 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetInverseDisplacementField(self, inverseField)

    def GetModifiableInverseDisplacementField(self):
        r"""GetModifiableInverseDisplacementField(self) -> itkImageVD33"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetModifiableInverseDisplacementField(self)

    def GetInverseDisplacementField(self, *args):
        r"""
        GetInverseDisplacementField(self) -> itkImageVD33
        GetInverseDisplacementField(self) -> itkImageVD33
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInverseDisplacementField(self, *args)

    def SetInterpolator(self, interpolator):
        r"""
        SetInterpolator(self, interpolator)

        Parameters
        ----------
        interpolator: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,3 > > *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetInterpolator(self, interpolator)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,3 > > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,3 > > const
        GetInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,3 > > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInterpolator(self, *args)

    def SetInverseInterpolator(self, interpolator):
        r"""
        SetInverseInterpolator(self, interpolator)

        Parameters
        ----------
        interpolator: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,3 > > *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetInverseInterpolator(self, interpolator)

    def GetModifiableInverseInterpolator(self):
        r"""GetModifiableInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,3 > > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetModifiableInverseInterpolator(self)

    def GetInverseInterpolator(self, *args):
        r"""
        GetInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,3 > > const
        GetInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,3 > > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInverseInterpolator(self, *args)

    def GetDisplacementFieldSetTime(self):
        r"""GetDisplacementFieldSetTime(self) -> unsigned long const &"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetDisplacementFieldSetTime(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: itkVectorD3 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,3 > const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_TransformVector(self, *args)

    def TransformDiffusionTensor(self, *args):
        r"""
        TransformDiffusionTensor(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_TransformDiffusionTensor(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD3

        Parameters
        ----------
        arg0: itkCovariantVectorD3 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_TransformCovariantVector(self, *args)

    def ComputeJacobianWithRespectToParameters(self, *args):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, j)

        Parameters
        ----------
        arg0: itkPointD3 const &
        j: itkArray2DD &

        ComputeJacobianWithRespectToParameters(self, arg0, j)

        Parameters
        ----------
        arg0: itkIndex3 const &
        j: itkArray2DD &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_ComputeJacobianWithRespectToParameters(self, *args)

    def ComputeJacobianWithRespectToPosition(self, *args):
        r"""
        ComputeJacobianWithRespectToPosition(self, point, jacobian)

        Parameters
        ----------
        point: itkPointD3 const &
        jacobian: vnl_matrix_fixedD_3_3 &

        ComputeJacobianWithRespectToPosition(self, index, jacobian)

        Parameters
        ----------
        index: itkIndex3 const &
        jacobian: vnl_matrix_fixedD_3_3 &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_ComputeJacobianWithRespectToPosition(self, *args)

    def GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args):
        r"""
        GetInverseJacobianOfForwardFieldWithRespectToPosition(self, point, jacobian, useSVD=False)

        Parameters
        ----------
        point: itkPointD3 const &
        jacobian: vnl_matrix_fixedD_3_3 &
        useSVD: bool

        GetInverseJacobianOfForwardFieldWithRespectToPosition(self, index, jacobian, useSVD=False)

        Parameters
        ----------
        index: itkIndex3 const &
        jacobian: vnl_matrix_fixedD_3_3 &
        useSVD: bool

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkDisplacementFieldTransformD3 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInverse(self, inverse)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetIdentity(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkDisplacementFieldTransformPython.delete_itkDisplacementFieldTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDisplacementFieldTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldTransformD3

        Create a new object of the class itkDisplacementFieldTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDisplacementFieldTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDisplacementFieldTransformD3 in _itkDisplacementFieldTransformPython:
_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_swigregister(itkDisplacementFieldTransformD3)

def itkDisplacementFieldTransformD4_New():
    return itkDisplacementFieldTransformD4.New()

class itkDisplacementFieldTransformD4(itk.itkTransformBasePython.itkTransformD44):
    r"""Proxy of C++ itkDisplacementFieldTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDisplacementFieldTransformD4_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDisplacementFieldTransformD4_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_Clone(self)

    def SetDisplacementField(self, *args):
        r"""
        SetDisplacementField(self, field)

        Parameters
        ----------
        field: itkImageVD44 *

        SetDisplacementField(self, field)

        Parameters
        ----------
        field: itkVectorImageD4 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_SetDisplacementField(self, *args)

    def GetModifiableDisplacementField(self):
        r"""GetModifiableDisplacementField(self) -> itkImageVD44"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_GetModifiableDisplacementField(self)

    def GetDisplacementField(self, *args):
        r"""
        GetDisplacementField(self) -> itkImageVD44
        GetDisplacementField(self) -> itkImageVD44
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_GetDisplacementField(self, *args)

    def SetInverseDisplacementField(self, inverseField):
        r"""
        SetInverseDisplacementField(self, inverseField)

        Parameters
        ----------
        inverseField: itkImageVD44 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_SetInverseDisplacementField(self, inverseField)

    def GetModifiableInverseDisplacementField(self):
        r"""GetModifiableInverseDisplacementField(self) -> itkImageVD44"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_GetModifiableInverseDisplacementField(self)

    def GetInverseDisplacementField(self, *args):
        r"""
        GetInverseDisplacementField(self) -> itkImageVD44
        GetInverseDisplacementField(self) -> itkImageVD44
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_GetInverseDisplacementField(self, *args)

    def SetInterpolator(self, interpolator):
        r"""
        SetInterpolator(self, interpolator)

        Parameters
        ----------
        interpolator: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,4 > > *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_SetInterpolator(self, interpolator)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,4 > > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,4 > > const
        GetInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,4 > > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_GetInterpolator(self, *args)

    def SetInverseInterpolator(self, interpolator):
        r"""
        SetInverseInterpolator(self, interpolator)

        Parameters
        ----------
        interpolator: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,4 > > *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_SetInverseInterpolator(self, interpolator)

    def GetModifiableInverseInterpolator(self):
        r"""GetModifiableInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,4 > > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_GetModifiableInverseInterpolator(self)

    def GetInverseInterpolator(self, *args):
        r"""
        GetInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,4 > > const
        GetInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,4 > > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_GetInverseInterpolator(self, *args)

    def GetDisplacementFieldSetTime(self):
        r"""GetDisplacementFieldSetTime(self) -> unsigned long const &"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_GetDisplacementFieldSetTime(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: itkVectorD4 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformVector(self, arg0) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< double,4 > const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_TransformVector(self, *args)

    def TransformDiffusionTensor(self, *args):
        r"""
        TransformDiffusionTensor(self, arg0) -> itkDiffusionTensor3DD

        Parameters
        ----------
        arg0: itkDiffusionTensor3DD const &

        TransformDiffusionTensor(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_TransformDiffusionTensor(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD4

        Parameters
        ----------
        arg0: itkCovariantVectorD4 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_TransformCovariantVector(self, *args)

    def ComputeJacobianWithRespectToParameters(self, *args):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, j)

        Parameters
        ----------
        arg0: itkPointD4 const &
        j: itkArray2DD &

        ComputeJacobianWithRespectToParameters(self, arg0, j)

        Parameters
        ----------
        arg0: itkIndex4 const &
        j: itkArray2DD &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_ComputeJacobianWithRespectToParameters(self, *args)

    def ComputeJacobianWithRespectToPosition(self, *args):
        r"""
        ComputeJacobianWithRespectToPosition(self, point, jacobian)

        Parameters
        ----------
        point: itkPointD4 const &
        jacobian: vnl_matrix_fixedD_4_4 &

        ComputeJacobianWithRespectToPosition(self, index, jacobian)

        Parameters
        ----------
        index: itkIndex4 const &
        jacobian: vnl_matrix_fixedD_4_4 &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_ComputeJacobianWithRespectToPosition(self, *args)

    def GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args):
        r"""
        GetInverseJacobianOfForwardFieldWithRespectToPosition(self, point, jacobian, useSVD=False)

        Parameters
        ----------
        point: itkPointD4 const &
        jacobian: vnl_matrix_fixedD_4_4 &
        useSVD: bool

        GetInverseJacobianOfForwardFieldWithRespectToPosition(self, index, jacobian, useSVD=False)

        Parameters
        ----------
        index: itkIndex4 const &
        jacobian: vnl_matrix_fixedD_4_4 &
        useSVD: bool

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkDisplacementFieldTransformD4 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_GetInverse(self, inverse)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_SetIdentity(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkDisplacementFieldTransformPython.delete_itkDisplacementFieldTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDisplacementFieldTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldTransformD4

        Create a new object of the class itkDisplacementFieldTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDisplacementFieldTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDisplacementFieldTransformD4 in _itkDisplacementFieldTransformPython:
_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4_swigregister(itkDisplacementFieldTransformD4)

def itkDisplacementFieldTransformF2_New():
    return itkDisplacementFieldTransformF2.New()

class itkDisplacementFieldTransformF2(itk.itkTransformBasePython.itkTransformF22):
    r"""Proxy of C++ itkDisplacementFieldTransformF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDisplacementFieldTransformF2_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDisplacementFieldTransformF2_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_Clone(self)

    def SetDisplacementField(self, *args):
        r"""
        SetDisplacementField(self, field)

        Parameters
        ----------
        field: itkImageVF22 *

        SetDisplacementField(self, field)

        Parameters
        ----------
        field: itkVectorImageF2 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_SetDisplacementField(self, *args)

    def GetModifiableDisplacementField(self):
        r"""GetModifiableDisplacementField(self) -> itkImageVF22"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_GetModifiableDisplacementField(self)

    def GetDisplacementField(self, *args):
        r"""
        GetDisplacementField(self) -> itkImageVF22
        GetDisplacementField(self) -> itkImageVF22
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_GetDisplacementField(self, *args)

    def SetInverseDisplacementField(self, inverseField):
        r"""
        SetInverseDisplacementField(self, inverseField)

        Parameters
        ----------
        inverseField: itkImageVF22 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_SetInverseDisplacementField(self, inverseField)

    def GetModifiableInverseDisplacementField(self):
        r"""GetModifiableInverseDisplacementField(self) -> itkImageVF22"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_GetModifiableInverseDisplacementField(self)

    def GetInverseDisplacementField(self, *args):
        r"""
        GetInverseDisplacementField(self) -> itkImageVF22
        GetInverseDisplacementField(self) -> itkImageVF22
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_GetInverseDisplacementField(self, *args)

    def SetInterpolator(self, interpolator):
        r"""
        SetInterpolator(self, interpolator)

        Parameters
        ----------
        interpolator: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,2 > >,float > *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_SetInterpolator(self, interpolator)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,2 > >,float > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,2 > >,float > const
        GetInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,2 > >,float > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_GetInterpolator(self, *args)

    def SetInverseInterpolator(self, interpolator):
        r"""
        SetInverseInterpolator(self, interpolator)

        Parameters
        ----------
        interpolator: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,2 > >,float > *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_SetInverseInterpolator(self, interpolator)

    def GetModifiableInverseInterpolator(self):
        r"""GetModifiableInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,2 > >,float > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_GetModifiableInverseInterpolator(self)

    def GetInverseInterpolator(self, *args):
        r"""
        GetInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,2 > >,float > const
        GetInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,2 > >,float > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_GetInverseInterpolator(self, *args)

    def GetDisplacementFieldSetTime(self):
        r"""GetDisplacementFieldSetTime(self) -> unsigned long const &"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_GetDisplacementFieldSetTime(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: itkVectorF2 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,2 > const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_TransformVector(self, *args)

    def TransformDiffusionTensor(self, *args):
        r"""
        TransformDiffusionTensor(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_TransformDiffusionTensor(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF2

        Parameters
        ----------
        arg0: itkCovariantVectorF2 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_TransformCovariantVector(self, *args)

    def ComputeJacobianWithRespectToParameters(self, *args):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, j)

        Parameters
        ----------
        arg0: itkPointF2 const &
        j: itkArray2DF &

        ComputeJacobianWithRespectToParameters(self, arg0, j)

        Parameters
        ----------
        arg0: itkIndex2 const &
        j: itkArray2DF &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_ComputeJacobianWithRespectToParameters(self, *args)

    def ComputeJacobianWithRespectToPosition(self, *args):
        r"""
        ComputeJacobianWithRespectToPosition(self, point, jacobian)

        Parameters
        ----------
        point: itkPointF2 const &
        jacobian: vnl_matrix_fixedF_2_2 &

        ComputeJacobianWithRespectToPosition(self, index, jacobian)

        Parameters
        ----------
        index: itkIndex2 const &
        jacobian: vnl_matrix_fixedF_2_2 &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_ComputeJacobianWithRespectToPosition(self, *args)

    def GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args):
        r"""
        GetInverseJacobianOfForwardFieldWithRespectToPosition(self, point, jacobian, useSVD=False)

        Parameters
        ----------
        point: itkPointF2 const &
        jacobian: vnl_matrix_fixedF_2_2 &
        useSVD: bool

        GetInverseJacobianOfForwardFieldWithRespectToPosition(self, index, jacobian, useSVD=False)

        Parameters
        ----------
        index: itkIndex2 const &
        jacobian: vnl_matrix_fixedF_2_2 &
        useSVD: bool

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkDisplacementFieldTransformF2 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_GetInverse(self, inverse)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_SetIdentity(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkDisplacementFieldTransformPython.delete_itkDisplacementFieldTransformF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDisplacementFieldTransformF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldTransformF2

        Create a new object of the class itkDisplacementFieldTransformF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldTransformF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldTransformF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDisplacementFieldTransformF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDisplacementFieldTransformF2 in _itkDisplacementFieldTransformPython:
_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF2_swigregister(itkDisplacementFieldTransformF2)

def itkDisplacementFieldTransformF3_New():
    return itkDisplacementFieldTransformF3.New()

class itkDisplacementFieldTransformF3(itk.itkTransformBasePython.itkTransformF33):
    r"""Proxy of C++ itkDisplacementFieldTransformF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDisplacementFieldTransformF3_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDisplacementFieldTransformF3_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_Clone(self)

    def SetDisplacementField(self, *args):
        r"""
        SetDisplacementField(self, field)

        Parameters
        ----------
        field: itkImageVF33 *

        SetDisplacementField(self, field)

        Parameters
        ----------
        field: itkVectorImageF3 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_SetDisplacementField(self, *args)

    def GetModifiableDisplacementField(self):
        r"""GetModifiableDisplacementField(self) -> itkImageVF33"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_GetModifiableDisplacementField(self)

    def GetDisplacementField(self, *args):
        r"""
        GetDisplacementField(self) -> itkImageVF33
        GetDisplacementField(self) -> itkImageVF33
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_GetDisplacementField(self, *args)

    def SetInverseDisplacementField(self, inverseField):
        r"""
        SetInverseDisplacementField(self, inverseField)

        Parameters
        ----------
        inverseField: itkImageVF33 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_SetInverseDisplacementField(self, inverseField)

    def GetModifiableInverseDisplacementField(self):
        r"""GetModifiableInverseDisplacementField(self) -> itkImageVF33"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_GetModifiableInverseDisplacementField(self)

    def GetInverseDisplacementField(self, *args):
        r"""
        GetInverseDisplacementField(self) -> itkImageVF33
        GetInverseDisplacementField(self) -> itkImageVF33
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_GetInverseDisplacementField(self, *args)

    def SetInterpolator(self, interpolator):
        r"""
        SetInterpolator(self, interpolator)

        Parameters
        ----------
        interpolator: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float >,3 >,float > *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_SetInterpolator(self, interpolator)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float >,3 >,float > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float >,3 >,float > const
        GetInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float >,3 >,float > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_GetInterpolator(self, *args)

    def SetInverseInterpolator(self, interpolator):
        r"""
        SetInverseInterpolator(self, interpolator)

        Parameters
        ----------
        interpolator: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float >,3 >,float > *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_SetInverseInterpolator(self, interpolator)

    def GetModifiableInverseInterpolator(self):
        r"""GetModifiableInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float >,3 >,float > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_GetModifiableInverseInterpolator(self)

    def GetInverseInterpolator(self, *args):
        r"""
        GetInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float >,3 >,float > const
        GetInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float >,3 >,float > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_GetInverseInterpolator(self, *args)

    def GetDisplacementFieldSetTime(self):
        r"""GetDisplacementFieldSetTime(self) -> unsigned long const &"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_GetDisplacementFieldSetTime(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: itkVectorF3 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,3 > const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_TransformVector(self, *args)

    def TransformDiffusionTensor(self, *args):
        r"""
        TransformDiffusionTensor(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_TransformDiffusionTensor(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF3

        Parameters
        ----------
        arg0: itkCovariantVectorF3 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_TransformCovariantVector(self, *args)

    def ComputeJacobianWithRespectToParameters(self, *args):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, j)

        Parameters
        ----------
        arg0: itkPointF3 const &
        j: itkArray2DF &

        ComputeJacobianWithRespectToParameters(self, arg0, j)

        Parameters
        ----------
        arg0: itkIndex3 const &
        j: itkArray2DF &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_ComputeJacobianWithRespectToParameters(self, *args)

    def ComputeJacobianWithRespectToPosition(self, *args):
        r"""
        ComputeJacobianWithRespectToPosition(self, point, jacobian)

        Parameters
        ----------
        point: itkPointF3 const &
        jacobian: vnl_matrix_fixedF_3_3 &

        ComputeJacobianWithRespectToPosition(self, index, jacobian)

        Parameters
        ----------
        index: itkIndex3 const &
        jacobian: vnl_matrix_fixedF_3_3 &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_ComputeJacobianWithRespectToPosition(self, *args)

    def GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args):
        r"""
        GetInverseJacobianOfForwardFieldWithRespectToPosition(self, point, jacobian, useSVD=False)

        Parameters
        ----------
        point: itkPointF3 const &
        jacobian: vnl_matrix_fixedF_3_3 &
        useSVD: bool

        GetInverseJacobianOfForwardFieldWithRespectToPosition(self, index, jacobian, useSVD=False)

        Parameters
        ----------
        index: itkIndex3 const &
        jacobian: vnl_matrix_fixedF_3_3 &
        useSVD: bool

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkDisplacementFieldTransformF3 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_GetInverse(self, inverse)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_SetIdentity(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkDisplacementFieldTransformPython.delete_itkDisplacementFieldTransformF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDisplacementFieldTransformF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldTransformF3

        Create a new object of the class itkDisplacementFieldTransformF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldTransformF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldTransformF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDisplacementFieldTransformF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDisplacementFieldTransformF3 in _itkDisplacementFieldTransformPython:
_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF3_swigregister(itkDisplacementFieldTransformF3)

def itkDisplacementFieldTransformF4_New():
    return itkDisplacementFieldTransformF4.New()

class itkDisplacementFieldTransformF4(itk.itkTransformBasePython.itkTransformF44):
    r"""Proxy of C++ itkDisplacementFieldTransformF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDisplacementFieldTransformF4_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDisplacementFieldTransformF4_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_Clone(self)

    def SetDisplacementField(self, *args):
        r"""
        SetDisplacementField(self, field)

        Parameters
        ----------
        field: itkImageVF44 *

        SetDisplacementField(self, field)

        Parameters
        ----------
        field: itkVectorImageF4 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_SetDisplacementField(self, *args)

    def GetModifiableDisplacementField(self):
        r"""GetModifiableDisplacementField(self) -> itkImageVF44"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_GetModifiableDisplacementField(self)

    def GetDisplacementField(self, *args):
        r"""
        GetDisplacementField(self) -> itkImageVF44
        GetDisplacementField(self) -> itkImageVF44
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_GetDisplacementField(self, *args)

    def SetInverseDisplacementField(self, inverseField):
        r"""
        SetInverseDisplacementField(self, inverseField)

        Parameters
        ----------
        inverseField: itkImageVF44 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_SetInverseDisplacementField(self, inverseField)

    def GetModifiableInverseDisplacementField(self):
        r"""GetModifiableInverseDisplacementField(self) -> itkImageVF44"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_GetModifiableInverseDisplacementField(self)

    def GetInverseDisplacementField(self, *args):
        r"""
        GetInverseDisplacementField(self) -> itkImageVF44
        GetInverseDisplacementField(self) -> itkImageVF44
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_GetInverseDisplacementField(self, *args)

    def SetInterpolator(self, interpolator):
        r"""
        SetInterpolator(self, interpolator)

        Parameters
        ----------
        interpolator: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,4 >,4 >,float > *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_SetInterpolator(self, interpolator)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,4 >,4 >,float > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,4 >,4 >,float > const
        GetInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,4 >,4 >,float > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_GetInterpolator(self, *args)

    def SetInverseInterpolator(self, interpolator):
        r"""
        SetInverseInterpolator(self, interpolator)

        Parameters
        ----------
        interpolator: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,4 >,4 >,float > *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_SetInverseInterpolator(self, interpolator)

    def GetModifiableInverseInterpolator(self):
        r"""GetModifiableInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,4 >,4 >,float > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_GetModifiableInverseInterpolator(self)

    def GetInverseInterpolator(self, *args):
        r"""
        GetInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,4 >,4 >,float > const
        GetInverseInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< float,4 >,4 >,float > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_GetInverseInterpolator(self, *args)

    def GetDisplacementFieldSetTime(self):
        r"""GetDisplacementFieldSetTime(self) -> unsigned long const &"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_GetDisplacementFieldSetTime(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: itkVectorF4 const &

        TransformVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformVector(self, arg0) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        arg0: vnl_vector_fixed< float,4 > const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_TransformVector(self, *args)

    def TransformDiffusionTensor(self, *args):
        r"""
        TransformDiffusionTensor(self, arg0) -> itkDiffusionTensor3DF

        Parameters
        ----------
        arg0: itkDiffusionTensor3DF const &

        TransformDiffusionTensor(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_TransformDiffusionTensor(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF4

        Parameters
        ----------
        arg0: itkCovariantVectorF4 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_TransformCovariantVector(self, *args)

    def ComputeJacobianWithRespectToParameters(self, *args):
        r"""
        ComputeJacobianWithRespectToParameters(self, arg0, j)

        Parameters
        ----------
        arg0: itkPointF4 const &
        j: itkArray2DF &

        ComputeJacobianWithRespectToParameters(self, arg0, j)

        Parameters
        ----------
        arg0: itkIndex4 const &
        j: itkArray2DF &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_ComputeJacobianWithRespectToParameters(self, *args)

    def ComputeJacobianWithRespectToPosition(self, *args):
        r"""
        ComputeJacobianWithRespectToPosition(self, point, jacobian)

        Parameters
        ----------
        point: itkPointF4 const &
        jacobian: vnl_matrix_fixedF_4_4 &

        ComputeJacobianWithRespectToPosition(self, index, jacobian)

        Parameters
        ----------
        index: itkIndex4 const &
        jacobian: vnl_matrix_fixedF_4_4 &

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_ComputeJacobianWithRespectToPosition(self, *args)

    def GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args):
        r"""
        GetInverseJacobianOfForwardFieldWithRespectToPosition(self, point, jacobian, useSVD=False)

        Parameters
        ----------
        point: itkPointF4 const &
        jacobian: vnl_matrix_fixedF_4_4 &
        useSVD: bool

        GetInverseJacobianOfForwardFieldWithRespectToPosition(self, index, jacobian, useSVD=False)

        Parameters
        ----------
        index: itkIndex4 const &
        jacobian: vnl_matrix_fixedF_4_4 &
        useSVD: bool

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkDisplacementFieldTransformF4 *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_GetInverse(self, inverse)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_SetIdentity(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkDisplacementFieldTransformPython.delete_itkDisplacementFieldTransformF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDisplacementFieldTransformF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldTransformF4

        Create a new object of the class itkDisplacementFieldTransformF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldTransformF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldTransformF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDisplacementFieldTransformF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDisplacementFieldTransformF4 in _itkDisplacementFieldTransformPython:
_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformF4_swigregister(itkDisplacementFieldTransformF4)

