# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDisplacementFieldPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVelocityFieldTransformPython
else:
    import _itkVelocityFieldTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkOptimizerParametersPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkArrayPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkDisplacementFieldTransformPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython

def itkVelocityFieldTransformD2_New():
    return itkVelocityFieldTransformD2.New()

class itkVelocityFieldTransformD2(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2):
    r"""Proxy of C++ itkVelocityFieldTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVelocityFieldTransformD2_Pointer"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVelocityFieldTransformD2_Pointer"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_Clone(self)

    def SetVelocityField(self, arg0):
        r"""
        SetVelocityField(self, arg0)

        Parameters
        ----------
        arg0: itkImageVD23 *

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_SetVelocityField(self, arg0)

    def GetModifiableVelocityField(self):
        r"""GetModifiableVelocityField(self) -> itkImageVD23"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetModifiableVelocityField(self)

    def GetVelocityField(self, *args):
        r"""
        GetVelocityField(self) -> itkImageVD23
        GetVelocityField(self) -> itkImageVD23
        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetVelocityField(self, *args)

    def SetVelocityFieldInterpolator(self, arg0):
        r"""
        SetVelocityFieldInterpolator(self, arg0)

        Parameters
        ----------
        arg0: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,3 > > *

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_SetVelocityFieldInterpolator(self, arg0)

    def GetModifiableVelocityFieldInterpolator(self):
        r"""GetModifiableVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,3 > > *"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetModifiableVelocityFieldInterpolator(self)

    def GetVelocityFieldInterpolator(self, *args):
        r"""
        GetVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,3 > > const
        GetVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,3 > > *
        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetVelocityFieldInterpolator(self, *args)

    def GetVelocityFieldSetTime(self):
        r"""GetVelocityFieldSetTime(self) -> unsigned long const &"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetVelocityFieldSetTime(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkVelocityFieldTransformD2 *

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetInverse(self, inverse)

    def IntegrateVelocityField(self):
        r"""IntegrateVelocityField(self)"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_IntegrateVelocityField(self)

    def SetLowerTimeBound(self, _arg):
        r"""
        SetLowerTimeBound(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_SetLowerTimeBound(self, _arg)

    def GetLowerTimeBound(self):
        r"""GetLowerTimeBound(self) -> double"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetLowerTimeBound(self)

    def SetUpperTimeBound(self, _arg):
        r"""
        SetUpperTimeBound(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_SetUpperTimeBound(self, _arg)

    def GetUpperTimeBound(self):
        r"""GetUpperTimeBound(self) -> double"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetUpperTimeBound(self)

    def SetNumberOfIntegrationSteps(self, _arg):
        r"""
        SetNumberOfIntegrationSteps(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_SetNumberOfIntegrationSteps(self, _arg)

    def GetNumberOfIntegrationSteps(self):
        r"""GetNumberOfIntegrationSteps(self) -> unsigned int"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_GetNumberOfIntegrationSteps(self)
    __swig_destroy__ = _itkVelocityFieldTransformPython.delete_itkVelocityFieldTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVelocityFieldTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVelocityFieldTransformD2

        Create a new object of the class itkVelocityFieldTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVelocityFieldTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVelocityFieldTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVelocityFieldTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVelocityFieldTransformD2 in _itkVelocityFieldTransformPython:
_itkVelocityFieldTransformPython.itkVelocityFieldTransformD2_swigregister(itkVelocityFieldTransformD2)

def itkVelocityFieldTransformD3_New():
    return itkVelocityFieldTransformD3.New()

class itkVelocityFieldTransformD3(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3):
    r"""Proxy of C++ itkVelocityFieldTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVelocityFieldTransformD3_Pointer"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVelocityFieldTransformD3_Pointer"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_Clone(self)

    def SetVelocityField(self, arg0):
        r"""
        SetVelocityField(self, arg0)

        Parameters
        ----------
        arg0: itkImageVD34 *

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_SetVelocityField(self, arg0)

    def GetModifiableVelocityField(self):
        r"""GetModifiableVelocityField(self) -> itkImageVD34"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetModifiableVelocityField(self)

    def GetVelocityField(self, *args):
        r"""
        GetVelocityField(self) -> itkImageVD34
        GetVelocityField(self) -> itkImageVD34
        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetVelocityField(self, *args)

    def SetVelocityFieldInterpolator(self, arg0):
        r"""
        SetVelocityFieldInterpolator(self, arg0)

        Parameters
        ----------
        arg0: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,4 > > *

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_SetVelocityFieldInterpolator(self, arg0)

    def GetModifiableVelocityFieldInterpolator(self):
        r"""GetModifiableVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,4 > > *"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetModifiableVelocityFieldInterpolator(self)

    def GetVelocityFieldInterpolator(self, *args):
        r"""
        GetVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,4 > > const
        GetVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,4 > > *
        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetVelocityFieldInterpolator(self, *args)

    def GetVelocityFieldSetTime(self):
        r"""GetVelocityFieldSetTime(self) -> unsigned long const &"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetVelocityFieldSetTime(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkVelocityFieldTransformD3 *

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetInverse(self, inverse)

    def IntegrateVelocityField(self):
        r"""IntegrateVelocityField(self)"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_IntegrateVelocityField(self)

    def SetLowerTimeBound(self, _arg):
        r"""
        SetLowerTimeBound(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_SetLowerTimeBound(self, _arg)

    def GetLowerTimeBound(self):
        r"""GetLowerTimeBound(self) -> double"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetLowerTimeBound(self)

    def SetUpperTimeBound(self, _arg):
        r"""
        SetUpperTimeBound(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_SetUpperTimeBound(self, _arg)

    def GetUpperTimeBound(self):
        r"""GetUpperTimeBound(self) -> double"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetUpperTimeBound(self)

    def SetNumberOfIntegrationSteps(self, _arg):
        r"""
        SetNumberOfIntegrationSteps(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_SetNumberOfIntegrationSteps(self, _arg)

    def GetNumberOfIntegrationSteps(self):
        r"""GetNumberOfIntegrationSteps(self) -> unsigned int"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_GetNumberOfIntegrationSteps(self)
    __swig_destroy__ = _itkVelocityFieldTransformPython.delete_itkVelocityFieldTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVelocityFieldTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVelocityFieldTransformD3

        Create a new object of the class itkVelocityFieldTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVelocityFieldTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVelocityFieldTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVelocityFieldTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVelocityFieldTransformD3 in _itkVelocityFieldTransformPython:
_itkVelocityFieldTransformPython.itkVelocityFieldTransformD3_swigregister(itkVelocityFieldTransformD3)

def itkVelocityFieldTransformD4_New():
    return itkVelocityFieldTransformD4.New()

class itkVelocityFieldTransformD4(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4):
    r"""Proxy of C++ itkVelocityFieldTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVelocityFieldTransformD4_Pointer"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVelocityFieldTransformD4_Pointer"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_Clone(self)

    def SetVelocityField(self, arg0):
        r"""
        SetVelocityField(self, arg0)

        Parameters
        ----------
        arg0: itkImageVD45 *

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_SetVelocityField(self, arg0)

    def GetModifiableVelocityField(self):
        r"""GetModifiableVelocityField(self) -> itkImageVD45"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_GetModifiableVelocityField(self)

    def GetVelocityField(self, *args):
        r"""
        GetVelocityField(self) -> itkImageVD45
        GetVelocityField(self) -> itkImageVD45
        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_GetVelocityField(self, *args)

    def SetVelocityFieldInterpolator(self, arg0):
        r"""
        SetVelocityFieldInterpolator(self, arg0)

        Parameters
        ----------
        arg0: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,5 > > *

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_SetVelocityFieldInterpolator(self, arg0)

    def GetModifiableVelocityFieldInterpolator(self):
        r"""GetModifiableVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,5 > > *"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_GetModifiableVelocityFieldInterpolator(self)

    def GetVelocityFieldInterpolator(self, *args):
        r"""
        GetVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,5 > > const
        GetVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,5 > > *
        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_GetVelocityFieldInterpolator(self, *args)

    def GetVelocityFieldSetTime(self):
        r"""GetVelocityFieldSetTime(self) -> unsigned long const &"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_GetVelocityFieldSetTime(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkVelocityFieldTransformD4 *

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_GetInverse(self, inverse)

    def IntegrateVelocityField(self):
        r"""IntegrateVelocityField(self)"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_IntegrateVelocityField(self)

    def SetLowerTimeBound(self, _arg):
        r"""
        SetLowerTimeBound(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_SetLowerTimeBound(self, _arg)

    def GetLowerTimeBound(self):
        r"""GetLowerTimeBound(self) -> double"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_GetLowerTimeBound(self)

    def SetUpperTimeBound(self, _arg):
        r"""
        SetUpperTimeBound(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_SetUpperTimeBound(self, _arg)

    def GetUpperTimeBound(self):
        r"""GetUpperTimeBound(self) -> double"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_GetUpperTimeBound(self)

    def SetNumberOfIntegrationSteps(self, _arg):
        r"""
        SetNumberOfIntegrationSteps(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_SetNumberOfIntegrationSteps(self, _arg)

    def GetNumberOfIntegrationSteps(self):
        r"""GetNumberOfIntegrationSteps(self) -> unsigned int"""
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_GetNumberOfIntegrationSteps(self)
    __swig_destroy__ = _itkVelocityFieldTransformPython.delete_itkVelocityFieldTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVelocityFieldTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVelocityFieldTransformD4

        Create a new object of the class itkVelocityFieldTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVelocityFieldTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVelocityFieldTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVelocityFieldTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVelocityFieldTransformD4 in _itkVelocityFieldTransformPython:
_itkVelocityFieldTransformPython.itkVelocityFieldTransformD4_swigregister(itkVelocityFieldTransformD4)

