# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCurvatureFlowPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBinaryMinMaxCurvatureFlowImageFilterPython
else:
    import _itkBinaryMinMaxCurvatureFlowImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkMinMaxCurvatureFlowImageFilterPython
import itk.itkCurvatureFlowImageFilterPython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterBPython

def itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_New():
    return itkBinaryMinMaxCurvatureFlowImageFilterID2ID2.New()

class itkBinaryMinMaxCurvatureFlowImageFilterID2ID2(itk.itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2):
    r"""Proxy of C++ itkBinaryMinMaxCurvatureFlowImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Clone(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_GetThreshold(self)
    InputConvertibleToOutputCheck = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.delete_itkBinaryMinMaxCurvatureFlowImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMinMaxCurvatureFlowImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMinMaxCurvatureFlowImageFilterID2ID2

        Create a new object of the class itkBinaryMinMaxCurvatureFlowImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMinMaxCurvatureFlowImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMinMaxCurvatureFlowImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMinMaxCurvatureFlowImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMinMaxCurvatureFlowImageFilterID2ID2 in _itkBinaryMinMaxCurvatureFlowImageFilterPython:
_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_swigregister(itkBinaryMinMaxCurvatureFlowImageFilterID2ID2)

def itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_New():
    return itkBinaryMinMaxCurvatureFlowImageFilterID3ID3.New()

class itkBinaryMinMaxCurvatureFlowImageFilterID3ID3(itk.itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3):
    r"""Proxy of C++ itkBinaryMinMaxCurvatureFlowImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Clone(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_GetThreshold(self)
    InputConvertibleToOutputCheck = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.delete_itkBinaryMinMaxCurvatureFlowImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMinMaxCurvatureFlowImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMinMaxCurvatureFlowImageFilterID3ID3

        Create a new object of the class itkBinaryMinMaxCurvatureFlowImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMinMaxCurvatureFlowImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMinMaxCurvatureFlowImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMinMaxCurvatureFlowImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMinMaxCurvatureFlowImageFilterID3ID3 in _itkBinaryMinMaxCurvatureFlowImageFilterPython:
_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_swigregister(itkBinaryMinMaxCurvatureFlowImageFilterID3ID3)

def itkBinaryMinMaxCurvatureFlowImageFilterID4ID4_New():
    return itkBinaryMinMaxCurvatureFlowImageFilterID4ID4.New()

class itkBinaryMinMaxCurvatureFlowImageFilterID4ID4(itk.itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID4ID4):
    r"""Proxy of C++ itkBinaryMinMaxCurvatureFlowImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMinMaxCurvatureFlowImageFilterID4ID4_Pointer"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMinMaxCurvatureFlowImageFilterID4ID4_Pointer"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID4ID4_Clone(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID4ID4_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID4ID4_GetThreshold(self)
    InputConvertibleToOutputCheck = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID4ID4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.delete_itkBinaryMinMaxCurvatureFlowImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMinMaxCurvatureFlowImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMinMaxCurvatureFlowImageFilterID4ID4

        Create a new object of the class itkBinaryMinMaxCurvatureFlowImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMinMaxCurvatureFlowImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMinMaxCurvatureFlowImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMinMaxCurvatureFlowImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMinMaxCurvatureFlowImageFilterID4ID4 in _itkBinaryMinMaxCurvatureFlowImageFilterPython:
_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterID4ID4_swigregister(itkBinaryMinMaxCurvatureFlowImageFilterID4ID4)

def itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_New():
    return itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2.New()

class itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2(itk.itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2):
    r"""Proxy of C++ itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Clone(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_GetThreshold(self)
    InputConvertibleToOutputCheck = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.delete_itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2

        Create a new object of the class itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2 in _itkBinaryMinMaxCurvatureFlowImageFilterPython:
_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_swigregister(itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2)

def itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_New():
    return itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3.New()

class itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3(itk.itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3):
    r"""Proxy of C++ itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Clone(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_GetThreshold(self)
    InputConvertibleToOutputCheck = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.delete_itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3

        Create a new object of the class itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3 in _itkBinaryMinMaxCurvatureFlowImageFilterPython:
_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_swigregister(itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3)

def itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4_New():
    return itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4.New()

class itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4(itk.itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF4IF4):
    r"""Proxy of C++ itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4_Pointer"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4_Pointer"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4_Clone(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4_GetThreshold(self)
    InputConvertibleToOutputCheck = _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMinMaxCurvatureFlowImageFilterPython.delete_itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4

        Create a new object of the class itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4 in _itkBinaryMinMaxCurvatureFlowImageFilterPython:
_itkBinaryMinMaxCurvatureFlowImageFilterPython.itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4_swigregister(itkBinaryMinMaxCurvatureFlowImageFilterIF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def binary_min_max_curvature_flow_image_filter(*args: itkt.ImageLike,  threshold: float=..., stencil_radius: int=..., time_step: float=..., difference_function=..., number_of_iterations: int=..., use_image_spacing: bool=..., maximum_rms_error: float=..., rms_change: float=..., manual_reinitialization: bool=..., is_initialized: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for BinaryMinMaxCurvatureFlowImageFilter"""
    import itk

    kwarg_typehints = { 'threshold':threshold,'stencil_radius':stencil_radius,'time_step':time_step,'difference_function':difference_function,'number_of_iterations':number_of_iterations,'use_image_spacing':use_image_spacing,'maximum_rms_error':maximum_rms_error,'rms_change':rms_change,'manual_reinitialization':manual_reinitialization,'is_initialized':is_initialized }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.BinaryMinMaxCurvatureFlowImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def binary_min_max_curvature_flow_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKCurvatureFlow.BinaryMinMaxCurvatureFlowImageFilter
    binary_min_max_curvature_flow_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    binary_min_max_curvature_flow_image_filter.__doc__ = filter_object.__doc__



