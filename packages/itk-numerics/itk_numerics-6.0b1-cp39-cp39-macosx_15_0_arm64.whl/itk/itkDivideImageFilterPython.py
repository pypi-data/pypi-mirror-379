# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDivideImageFilterPython
else:
    import _itkDivideImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkBinaryGeneratorImageFilterPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython

def itkDivideImageFilterICD2ICD2ICD2_New():
    return itkDivideImageFilterICD2ICD2ICD2.New()

class itkDivideImageFilterICD2ICD2ICD2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICD2ICD2ICD2):
    r"""Proxy of C++ itkDivideImageFilterICD2ICD2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterICD2ICD2ICD2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICD2ICD2ICD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterICD2ICD2ICD2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICD2ICD2ICD2_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICD2ICD2ICD2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICD2ICD2ICD2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICD2ICD2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterICD2ICD2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICD2ICD2ICD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICD2ICD2ICD2

        Create a new object of the class itkDivideImageFilterICD2ICD2ICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICD2ICD2ICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICD2ICD2ICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterICD2ICD2ICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICD2ICD2ICD2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICD2ICD2ICD2_swigregister(itkDivideImageFilterICD2ICD2ICD2)

def itkDivideImageFilterICD2ID2ICD2_New():
    return itkDivideImageFilterICD2ID2ICD2.New()

class itkDivideImageFilterICD2ID2ICD2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICD2ID2ICD2):
    r"""Proxy of C++ itkDivideImageFilterICD2ID2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterICD2ID2ICD2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICD2ID2ICD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterICD2ID2ICD2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICD2ID2ICD2_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICD2ID2ICD2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICD2ID2ICD2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICD2ID2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterICD2ID2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICD2ID2ICD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICD2ID2ICD2

        Create a new object of the class itkDivideImageFilterICD2ID2ICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICD2ID2ICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICD2ID2ICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterICD2ID2ICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICD2ID2ICD2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICD2ID2ICD2_swigregister(itkDivideImageFilterICD2ID2ICD2)

def itkDivideImageFilterICD3ICD3ICD3_New():
    return itkDivideImageFilterICD3ICD3ICD3.New()

class itkDivideImageFilterICD3ICD3ICD3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICD3ICD3ICD3):
    r"""Proxy of C++ itkDivideImageFilterICD3ICD3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterICD3ICD3ICD3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICD3ICD3ICD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterICD3ICD3ICD3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICD3ICD3ICD3_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICD3ICD3ICD3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICD3ICD3ICD3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICD3ICD3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterICD3ICD3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICD3ICD3ICD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICD3ICD3ICD3

        Create a new object of the class itkDivideImageFilterICD3ICD3ICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICD3ICD3ICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICD3ICD3ICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterICD3ICD3ICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICD3ICD3ICD3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICD3ICD3ICD3_swigregister(itkDivideImageFilterICD3ICD3ICD3)

def itkDivideImageFilterICD3ID3ICD3_New():
    return itkDivideImageFilterICD3ID3ICD3.New()

class itkDivideImageFilterICD3ID3ICD3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICD3ID3ICD3):
    r"""Proxy of C++ itkDivideImageFilterICD3ID3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterICD3ID3ICD3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICD3ID3ICD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterICD3ID3ICD3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICD3ID3ICD3_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICD3ID3ICD3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICD3ID3ICD3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICD3ID3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterICD3ID3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICD3ID3ICD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICD3ID3ICD3

        Create a new object of the class itkDivideImageFilterICD3ID3ICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICD3ID3ICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICD3ID3ICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterICD3ID3ICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICD3ID3ICD3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICD3ID3ICD3_swigregister(itkDivideImageFilterICD3ID3ICD3)

def itkDivideImageFilterICD4ICD4ICD4_New():
    return itkDivideImageFilterICD4ICD4ICD4.New()

class itkDivideImageFilterICD4ICD4ICD4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICD4ICD4ICD4):
    r"""Proxy of C++ itkDivideImageFilterICD4ICD4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterICD4ICD4ICD4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICD4ICD4ICD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterICD4ICD4ICD4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICD4ICD4ICD4_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICD4ICD4ICD4_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICD4ICD4ICD4_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICD4ICD4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterICD4ICD4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICD4ICD4ICD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICD4ICD4ICD4

        Create a new object of the class itkDivideImageFilterICD4ICD4ICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICD4ICD4ICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICD4ICD4ICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterICD4ICD4ICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICD4ICD4ICD4 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICD4ICD4ICD4_swigregister(itkDivideImageFilterICD4ICD4ICD4)

def itkDivideImageFilterICD4ID4ICD4_New():
    return itkDivideImageFilterICD4ID4ICD4.New()

class itkDivideImageFilterICD4ID4ICD4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICD4ID4ICD4):
    r"""Proxy of C++ itkDivideImageFilterICD4ID4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterICD4ID4ICD4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICD4ID4ICD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterICD4ID4ICD4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICD4ID4ICD4_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICD4ID4ICD4_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICD4ID4ICD4_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICD4ID4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterICD4ID4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICD4ID4ICD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICD4ID4ICD4

        Create a new object of the class itkDivideImageFilterICD4ID4ICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICD4ID4ICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICD4ID4ICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterICD4ID4ICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICD4ID4ICD4 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICD4ID4ICD4_swigregister(itkDivideImageFilterICD4ID4ICD4)

def itkDivideImageFilterICF2ICF2ICF2_New():
    return itkDivideImageFilterICF2ICF2ICF2.New()

class itkDivideImageFilterICF2ICF2ICF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF2ICF2ICF2):
    r"""Proxy of C++ itkDivideImageFilterICF2ICF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterICF2ICF2ICF2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterICF2ICF2ICF2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF2ICF2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterICF2ICF2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF2ICF2ICF2

        Create a new object of the class itkDivideImageFilterICF2ICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF2ICF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF2ICF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterICF2ICF2ICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICF2ICF2ICF2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_swigregister(itkDivideImageFilterICF2ICF2ICF2)

def itkDivideImageFilterICF2IF2ICF2_New():
    return itkDivideImageFilterICF2IF2ICF2.New()

class itkDivideImageFilterICF2IF2ICF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF2IF2ICF2):
    r"""Proxy of C++ itkDivideImageFilterICF2IF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterICF2IF2ICF2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterICF2IF2ICF2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF2IF2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterICF2IF2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF2IF2ICF2

        Create a new object of the class itkDivideImageFilterICF2IF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF2IF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF2IF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterICF2IF2ICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICF2IF2ICF2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_swigregister(itkDivideImageFilterICF2IF2ICF2)

def itkDivideImageFilterICF3ICF3ICF3_New():
    return itkDivideImageFilterICF3ICF3ICF3.New()

class itkDivideImageFilterICF3ICF3ICF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF3ICF3ICF3):
    r"""Proxy of C++ itkDivideImageFilterICF3ICF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterICF3ICF3ICF3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterICF3ICF3ICF3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF3ICF3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterICF3ICF3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF3ICF3ICF3

        Create a new object of the class itkDivideImageFilterICF3ICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF3ICF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF3ICF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterICF3ICF3ICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICF3ICF3ICF3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_swigregister(itkDivideImageFilterICF3ICF3ICF3)

def itkDivideImageFilterICF3IF3ICF3_New():
    return itkDivideImageFilterICF3IF3ICF3.New()

class itkDivideImageFilterICF3IF3ICF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF3IF3ICF3):
    r"""Proxy of C++ itkDivideImageFilterICF3IF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterICF3IF3ICF3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterICF3IF3ICF3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF3IF3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterICF3IF3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF3IF3ICF3

        Create a new object of the class itkDivideImageFilterICF3IF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF3IF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF3IF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterICF3IF3ICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICF3IF3ICF3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_swigregister(itkDivideImageFilterICF3IF3ICF3)

def itkDivideImageFilterICF4ICF4ICF4_New():
    return itkDivideImageFilterICF4ICF4ICF4.New()

class itkDivideImageFilterICF4ICF4ICF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF4ICF4ICF4):
    r"""Proxy of C++ itkDivideImageFilterICF4ICF4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterICF4ICF4ICF4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF4ICF4ICF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterICF4ICF4ICF4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF4ICF4ICF4_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF4ICF4ICF4_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF4ICF4ICF4_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF4ICF4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterICF4ICF4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICF4ICF4ICF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF4ICF4ICF4

        Create a new object of the class itkDivideImageFilterICF4ICF4ICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF4ICF4ICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF4ICF4ICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterICF4ICF4ICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICF4ICF4ICF4 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICF4ICF4ICF4_swigregister(itkDivideImageFilterICF4ICF4ICF4)

def itkDivideImageFilterICF4IF4ICF4_New():
    return itkDivideImageFilterICF4IF4ICF4.New()

class itkDivideImageFilterICF4IF4ICF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF4IF4ICF4):
    r"""Proxy of C++ itkDivideImageFilterICF4IF4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterICF4IF4ICF4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF4IF4ICF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterICF4IF4ICF4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF4IF4ICF4_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF4IF4ICF4_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF4IF4ICF4_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF4IF4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterICF4IF4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICF4IF4ICF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF4IF4ICF4

        Create a new object of the class itkDivideImageFilterICF4IF4ICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF4IF4ICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF4IF4ICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterICF4IF4ICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICF4IF4ICF4 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICF4IF4ICF4_swigregister(itkDivideImageFilterICF4IF4ICF4)

def itkDivideImageFilterID2ID2ID2_New():
    return itkDivideImageFilterID2ID2ID2.New()

class itkDivideImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""Proxy of C++ itkDivideImageFilterID2ID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterID2ID2ID2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterID2ID2ID2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterID2ID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterID2ID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterID2ID2ID2

        Create a new object of the class itkDivideImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterID2ID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterID2ID2ID2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_swigregister(itkDivideImageFilterID2ID2ID2)

def itkDivideImageFilterID3ID3ID3_New():
    return itkDivideImageFilterID3ID3ID3.New()

class itkDivideImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""Proxy of C++ itkDivideImageFilterID3ID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterID3ID3ID3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterID3ID3ID3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterID3ID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterID3ID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterID3ID3ID3

        Create a new object of the class itkDivideImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterID3ID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterID3ID3ID3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_swigregister(itkDivideImageFilterID3ID3ID3)

def itkDivideImageFilterID4ID4ID4_New():
    return itkDivideImageFilterID4ID4ID4.New()

class itkDivideImageFilterID4ID4ID4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID4ID4ID4):
    r"""Proxy of C++ itkDivideImageFilterID4ID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterID4ID4ID4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID4ID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterID4ID4ID4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID4ID4ID4_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterID4ID4ID4_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterID4ID4ID4_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterID4ID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterID4ID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterID4ID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterID4ID4ID4

        Create a new object of the class itkDivideImageFilterID4ID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterID4ID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterID4ID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterID4ID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterID4ID4ID4 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterID4ID4ID4_swigregister(itkDivideImageFilterID4ID4ID4)

def itkDivideImageFilterIF2IF2IF2_New():
    return itkDivideImageFilterIF2IF2IF2.New()

class itkDivideImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""Proxy of C++ itkDivideImageFilterIF2IF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterIF2IF2IF2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterIF2IF2IF2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIF2IF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterIF2IF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIF2IF2IF2

        Create a new object of the class itkDivideImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterIF2IF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIF2IF2IF2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_swigregister(itkDivideImageFilterIF2IF2IF2)

def itkDivideImageFilterIF3IF3IF3_New():
    return itkDivideImageFilterIF3IF3IF3.New()

class itkDivideImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""Proxy of C++ itkDivideImageFilterIF3IF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterIF3IF3IF3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterIF3IF3IF3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIF3IF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterIF3IF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIF3IF3IF3

        Create a new object of the class itkDivideImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterIF3IF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIF3IF3IF3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_swigregister(itkDivideImageFilterIF3IF3IF3)

def itkDivideImageFilterIF4IF4IF4_New():
    return itkDivideImageFilterIF4IF4IF4.New()

class itkDivideImageFilterIF4IF4IF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF4IF4IF4):
    r"""Proxy of C++ itkDivideImageFilterIF4IF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterIF4IF4IF4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF4IF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterIF4IF4IF4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF4IF4IF4_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIF4IF4IF4_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIF4IF4IF4_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIF4IF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterIF4IF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIF4IF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIF4IF4IF4

        Create a new object of the class itkDivideImageFilterIF4IF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIF4IF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIF4IF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterIF4IF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIF4IF4IF4 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIF4IF4IF4_swigregister(itkDivideImageFilterIF4IF4IF4)

def itkDivideImageFilterISS2ISS2ISS2_New():
    return itkDivideImageFilterISS2ISS2ISS2.New()

class itkDivideImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""Proxy of C++ itkDivideImageFilterISS2ISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterISS2ISS2ISS2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterISS2ISS2ISS2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterISS2ISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterISS2ISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterISS2ISS2ISS2

        Create a new object of the class itkDivideImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterISS2ISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterISS2ISS2ISS2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_swigregister(itkDivideImageFilterISS2ISS2ISS2)

def itkDivideImageFilterISS3ISS3ISS3_New():
    return itkDivideImageFilterISS3ISS3ISS3.New()

class itkDivideImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""Proxy of C++ itkDivideImageFilterISS3ISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterISS3ISS3ISS3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterISS3ISS3ISS3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterISS3ISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterISS3ISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterISS3ISS3ISS3

        Create a new object of the class itkDivideImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterISS3ISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterISS3ISS3ISS3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_swigregister(itkDivideImageFilterISS3ISS3ISS3)

def itkDivideImageFilterISS4ISS4ISS4_New():
    return itkDivideImageFilterISS4ISS4ISS4.New()

class itkDivideImageFilterISS4ISS4ISS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS4ISS4ISS4):
    r"""Proxy of C++ itkDivideImageFilterISS4ISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterISS4ISS4ISS4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterISS4ISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterISS4ISS4ISS4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterISS4ISS4ISS4_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterISS4ISS4ISS4_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterISS4ISS4ISS4_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterISS4ISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterISS4ISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterISS4ISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterISS4ISS4ISS4

        Create a new object of the class itkDivideImageFilterISS4ISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterISS4ISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterISS4ISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterISS4ISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterISS4ISS4ISS4 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterISS4ISS4ISS4_swigregister(itkDivideImageFilterISS4ISS4ISS4)

def itkDivideImageFilterIUC2IUC2IUC2_New():
    return itkDivideImageFilterIUC2IUC2IUC2.New()

class itkDivideImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""Proxy of C++ itkDivideImageFilterIUC2IUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUC2IUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterIUC2IUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUC2IUC2IUC2

        Create a new object of the class itkDivideImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterIUC2IUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIUC2IUC2IUC2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_swigregister(itkDivideImageFilterIUC2IUC2IUC2)

def itkDivideImageFilterIUC3IUC3IUC3_New():
    return itkDivideImageFilterIUC3IUC3IUC3.New()

class itkDivideImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""Proxy of C++ itkDivideImageFilterIUC3IUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUC3IUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterIUC3IUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUC3IUC3IUC3

        Create a new object of the class itkDivideImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterIUC3IUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIUC3IUC3IUC3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_swigregister(itkDivideImageFilterIUC3IUC3IUC3)

def itkDivideImageFilterIUC4IUC4IUC4_New():
    return itkDivideImageFilterIUC4IUC4IUC4.New()

class itkDivideImageFilterIUC4IUC4IUC4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC4IUC4IUC4):
    r"""Proxy of C++ itkDivideImageFilterIUC4IUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC4IUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC4IUC4IUC4_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUC4IUC4IUC4_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUC4IUC4IUC4_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUC4IUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterIUC4IUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC4IUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUC4IUC4IUC4

        Create a new object of the class itkDivideImageFilterIUC4IUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUC4IUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUC4IUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterIUC4IUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIUC4IUC4IUC4 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIUC4IUC4IUC4_swigregister(itkDivideImageFilterIUC4IUC4IUC4)

def itkDivideImageFilterIUS2IUS2IUS2_New():
    return itkDivideImageFilterIUS2IUS2IUS2.New()

class itkDivideImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""Proxy of C++ itkDivideImageFilterIUS2IUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUS2IUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterIUS2IUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUS2IUS2IUS2

        Create a new object of the class itkDivideImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterIUS2IUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIUS2IUS2IUS2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_swigregister(itkDivideImageFilterIUS2IUS2IUS2)

def itkDivideImageFilterIUS3IUS3IUS3_New():
    return itkDivideImageFilterIUS3IUS3IUS3.New()

class itkDivideImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""Proxy of C++ itkDivideImageFilterIUS3IUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUS3IUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterIUS3IUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUS3IUS3IUS3

        Create a new object of the class itkDivideImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterIUS3IUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIUS3IUS3IUS3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_swigregister(itkDivideImageFilterIUS3IUS3IUS3)

def itkDivideImageFilterIUS4IUS4IUS4_New():
    return itkDivideImageFilterIUS4IUS4IUS4.New()

class itkDivideImageFilterIUS4IUS4IUS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS4IUS4IUS4):
    r"""Proxy of C++ itkDivideImageFilterIUS4IUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDivideImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS4IUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDivideImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS4IUS4IUS4_Clone(self)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUS4IUS4IUS4_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUS4IUS4IUS4_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUS4IUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDivideImageFilterIUS4IUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS4IUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUS4IUS4IUS4

        Create a new object of the class itkDivideImageFilterIUS4IUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUS4IUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUS4IUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDivideImageFilterIUS4IUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIUS4IUS4IUS4 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIUS4IUS4IUS4_swigregister(itkDivideImageFilterIUS4IUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def divide_image_filter(*args: itkt.ImageLike,  constant1: int=..., constant2: int=..., constant: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for DivideImageFilter"""
    import itk

    kwarg_typehints = { 'constant1':constant1,'constant2':constant2,'constant':constant }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.DivideImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def divide_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.DivideImageFilter
    divide_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    divide_image_filter.__doc__ = filter_object.__doc__



