# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDisplacementFieldPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkConstantVelocityFieldTransformPython
else:
    import _itkConstantVelocityFieldTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkOptimizerParametersPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkArrayPython
import itk.itkTransformBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkDisplacementFieldTransformPython
import itk.itkVectorImagePython

def itkConstantVelocityFieldTransformD2_New():
    return itkConstantVelocityFieldTransformD2.New()

class itkConstantVelocityFieldTransformD2(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2):
    r"""Proxy of C++ itkConstantVelocityFieldTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstantVelocityFieldTransformD2_Pointer"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstantVelocityFieldTransformD2_Pointer"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_Clone(self)

    def SetConstantVelocityField(self, arg0):
        r"""
        SetConstantVelocityField(self, arg0)

        Parameters
        ----------
        arg0: itkImageVD22 *

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_SetConstantVelocityField(self, arg0)

    def GetModifiableConstantVelocityField(self):
        r"""GetModifiableConstantVelocityField(self) -> itkImageVD22"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_GetModifiableConstantVelocityField(self)

    def GetConstantVelocityField(self, *args):
        r"""
        GetConstantVelocityField(self) -> itkImageVD22
        GetConstantVelocityField(self) -> itkImageVD22
        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_GetConstantVelocityField(self, *args)

    def SetConstantVelocityFieldInterpolator(self, arg0):
        r"""
        SetConstantVelocityFieldInterpolator(self, arg0)

        Parameters
        ----------
        arg0: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 > > > *

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_SetConstantVelocityFieldInterpolator(self, arg0)

    def GetModifiableConstantVelocityFieldInterpolator(self):
        r"""GetModifiableConstantVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 > > > *"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_GetModifiableConstantVelocityFieldInterpolator(self)

    def GetConstantVelocityFieldInterpolator(self, *args):
        r"""
        GetConstantVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 > > > const
        GetConstantVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 > > > *
        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_GetConstantVelocityFieldInterpolator(self, *args)

    def GetConstantVelocityFieldSetTime(self):
        r"""GetConstantVelocityFieldSetTime(self) -> unsigned long const &"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_GetConstantVelocityFieldSetTime(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkConstantVelocityFieldTransformD2 *

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_GetInverse(self, inverse)

    def IntegrateVelocityField(self):
        r"""IntegrateVelocityField(self)"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_IntegrateVelocityField(self)

    def SetCalculateNumberOfIntegrationStepsAutomatically(self, _arg):
        r"""
        SetCalculateNumberOfIntegrationStepsAutomatically(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_SetCalculateNumberOfIntegrationStepsAutomatically(self, _arg)

    def GetCalculateNumberOfIntegrationStepsAutomatically(self):
        r"""GetCalculateNumberOfIntegrationStepsAutomatically(self) -> bool"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_GetCalculateNumberOfIntegrationStepsAutomatically(self)

    def CalculateNumberOfIntegrationStepsAutomaticallyOn(self):
        r"""CalculateNumberOfIntegrationStepsAutomaticallyOn(self)"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_CalculateNumberOfIntegrationStepsAutomaticallyOn(self)

    def CalculateNumberOfIntegrationStepsAutomaticallyOff(self):
        r"""CalculateNumberOfIntegrationStepsAutomaticallyOff(self)"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_CalculateNumberOfIntegrationStepsAutomaticallyOff(self)

    def SetLowerTimeBound(self, _arg):
        r"""
        SetLowerTimeBound(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_SetLowerTimeBound(self, _arg)

    def GetLowerTimeBound(self):
        r"""GetLowerTimeBound(self) -> double"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_GetLowerTimeBound(self)

    def SetUpperTimeBound(self, _arg):
        r"""
        SetUpperTimeBound(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_SetUpperTimeBound(self, _arg)

    def GetUpperTimeBound(self):
        r"""GetUpperTimeBound(self) -> double"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_GetUpperTimeBound(self)

    def SetNumberOfIntegrationSteps(self, _arg):
        r"""
        SetNumberOfIntegrationSteps(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_SetNumberOfIntegrationSteps(self, _arg)

    def GetNumberOfIntegrationSteps(self):
        r"""GetNumberOfIntegrationSteps(self) -> unsigned int"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_GetNumberOfIntegrationSteps(self)
    __swig_destroy__ = _itkConstantVelocityFieldTransformPython.delete_itkConstantVelocityFieldTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstantVelocityFieldTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstantVelocityFieldTransformD2

        Create a new object of the class itkConstantVelocityFieldTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstantVelocityFieldTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstantVelocityFieldTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstantVelocityFieldTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstantVelocityFieldTransformD2 in _itkConstantVelocityFieldTransformPython:
_itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD2_swigregister(itkConstantVelocityFieldTransformD2)

def itkConstantVelocityFieldTransformD3_New():
    return itkConstantVelocityFieldTransformD3.New()

class itkConstantVelocityFieldTransformD3(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3):
    r"""Proxy of C++ itkConstantVelocityFieldTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstantVelocityFieldTransformD3_Pointer"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstantVelocityFieldTransformD3_Pointer"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_Clone(self)

    def SetConstantVelocityField(self, arg0):
        r"""
        SetConstantVelocityField(self, arg0)

        Parameters
        ----------
        arg0: itkImageVD33 *

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_SetConstantVelocityField(self, arg0)

    def GetModifiableConstantVelocityField(self):
        r"""GetModifiableConstantVelocityField(self) -> itkImageVD33"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_GetModifiableConstantVelocityField(self)

    def GetConstantVelocityField(self, *args):
        r"""
        GetConstantVelocityField(self) -> itkImageVD33
        GetConstantVelocityField(self) -> itkImageVD33
        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_GetConstantVelocityField(self, *args)

    def SetConstantVelocityFieldInterpolator(self, arg0):
        r"""
        SetConstantVelocityFieldInterpolator(self, arg0)

        Parameters
        ----------
        arg0: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,3 > > *

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_SetConstantVelocityFieldInterpolator(self, arg0)

    def GetModifiableConstantVelocityFieldInterpolator(self):
        r"""GetModifiableConstantVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,3 > > *"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_GetModifiableConstantVelocityFieldInterpolator(self)

    def GetConstantVelocityFieldInterpolator(self, *args):
        r"""
        GetConstantVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,3 > > const
        GetConstantVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double >,3 > > *
        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_GetConstantVelocityFieldInterpolator(self, *args)

    def GetConstantVelocityFieldSetTime(self):
        r"""GetConstantVelocityFieldSetTime(self) -> unsigned long const &"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_GetConstantVelocityFieldSetTime(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkConstantVelocityFieldTransformD3 *

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_GetInverse(self, inverse)

    def IntegrateVelocityField(self):
        r"""IntegrateVelocityField(self)"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_IntegrateVelocityField(self)

    def SetCalculateNumberOfIntegrationStepsAutomatically(self, _arg):
        r"""
        SetCalculateNumberOfIntegrationStepsAutomatically(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_SetCalculateNumberOfIntegrationStepsAutomatically(self, _arg)

    def GetCalculateNumberOfIntegrationStepsAutomatically(self):
        r"""GetCalculateNumberOfIntegrationStepsAutomatically(self) -> bool"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_GetCalculateNumberOfIntegrationStepsAutomatically(self)

    def CalculateNumberOfIntegrationStepsAutomaticallyOn(self):
        r"""CalculateNumberOfIntegrationStepsAutomaticallyOn(self)"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_CalculateNumberOfIntegrationStepsAutomaticallyOn(self)

    def CalculateNumberOfIntegrationStepsAutomaticallyOff(self):
        r"""CalculateNumberOfIntegrationStepsAutomaticallyOff(self)"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_CalculateNumberOfIntegrationStepsAutomaticallyOff(self)

    def SetLowerTimeBound(self, _arg):
        r"""
        SetLowerTimeBound(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_SetLowerTimeBound(self, _arg)

    def GetLowerTimeBound(self):
        r"""GetLowerTimeBound(self) -> double"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_GetLowerTimeBound(self)

    def SetUpperTimeBound(self, _arg):
        r"""
        SetUpperTimeBound(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_SetUpperTimeBound(self, _arg)

    def GetUpperTimeBound(self):
        r"""GetUpperTimeBound(self) -> double"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_GetUpperTimeBound(self)

    def SetNumberOfIntegrationSteps(self, _arg):
        r"""
        SetNumberOfIntegrationSteps(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_SetNumberOfIntegrationSteps(self, _arg)

    def GetNumberOfIntegrationSteps(self):
        r"""GetNumberOfIntegrationSteps(self) -> unsigned int"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_GetNumberOfIntegrationSteps(self)
    __swig_destroy__ = _itkConstantVelocityFieldTransformPython.delete_itkConstantVelocityFieldTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstantVelocityFieldTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstantVelocityFieldTransformD3

        Create a new object of the class itkConstantVelocityFieldTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstantVelocityFieldTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstantVelocityFieldTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstantVelocityFieldTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstantVelocityFieldTransformD3 in _itkConstantVelocityFieldTransformPython:
_itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD3_swigregister(itkConstantVelocityFieldTransformD3)

def itkConstantVelocityFieldTransformD4_New():
    return itkConstantVelocityFieldTransformD4.New()

class itkConstantVelocityFieldTransformD4(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4):
    r"""Proxy of C++ itkConstantVelocityFieldTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkConstantVelocityFieldTransformD4_Pointer"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkConstantVelocityFieldTransformD4_Pointer"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_Clone(self)

    def SetConstantVelocityField(self, arg0):
        r"""
        SetConstantVelocityField(self, arg0)

        Parameters
        ----------
        arg0: itkImageVD44 *

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_SetConstantVelocityField(self, arg0)

    def GetModifiableConstantVelocityField(self):
        r"""GetModifiableConstantVelocityField(self) -> itkImageVD44"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_GetModifiableConstantVelocityField(self)

    def GetConstantVelocityField(self, *args):
        r"""
        GetConstantVelocityField(self) -> itkImageVD44
        GetConstantVelocityField(self) -> itkImageVD44
        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_GetConstantVelocityField(self, *args)

    def SetConstantVelocityFieldInterpolator(self, arg0):
        r"""
        SetConstantVelocityFieldInterpolator(self, arg0)

        Parameters
        ----------
        arg0: itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,4 > > *

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_SetConstantVelocityFieldInterpolator(self, arg0)

    def GetModifiableConstantVelocityFieldInterpolator(self):
        r"""GetModifiableConstantVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,4 > > *"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_GetModifiableConstantVelocityFieldInterpolator(self)

    def GetConstantVelocityFieldInterpolator(self, *args):
        r"""
        GetConstantVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,4 > > const
        GetConstantVelocityFieldInterpolator(self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,4 >,4 > > *
        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_GetConstantVelocityFieldInterpolator(self, *args)

    def GetConstantVelocityFieldSetTime(self):
        r"""GetConstantVelocityFieldSetTime(self) -> unsigned long const &"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_GetConstantVelocityFieldSetTime(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkConstantVelocityFieldTransformD4 *

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_GetInverse(self, inverse)

    def IntegrateVelocityField(self):
        r"""IntegrateVelocityField(self)"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_IntegrateVelocityField(self)

    def SetCalculateNumberOfIntegrationStepsAutomatically(self, _arg):
        r"""
        SetCalculateNumberOfIntegrationStepsAutomatically(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_SetCalculateNumberOfIntegrationStepsAutomatically(self, _arg)

    def GetCalculateNumberOfIntegrationStepsAutomatically(self):
        r"""GetCalculateNumberOfIntegrationStepsAutomatically(self) -> bool"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_GetCalculateNumberOfIntegrationStepsAutomatically(self)

    def CalculateNumberOfIntegrationStepsAutomaticallyOn(self):
        r"""CalculateNumberOfIntegrationStepsAutomaticallyOn(self)"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_CalculateNumberOfIntegrationStepsAutomaticallyOn(self)

    def CalculateNumberOfIntegrationStepsAutomaticallyOff(self):
        r"""CalculateNumberOfIntegrationStepsAutomaticallyOff(self)"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_CalculateNumberOfIntegrationStepsAutomaticallyOff(self)

    def SetLowerTimeBound(self, _arg):
        r"""
        SetLowerTimeBound(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_SetLowerTimeBound(self, _arg)

    def GetLowerTimeBound(self):
        r"""GetLowerTimeBound(self) -> double"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_GetLowerTimeBound(self)

    def SetUpperTimeBound(self, _arg):
        r"""
        SetUpperTimeBound(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_SetUpperTimeBound(self, _arg)

    def GetUpperTimeBound(self):
        r"""GetUpperTimeBound(self) -> double"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_GetUpperTimeBound(self)

    def SetNumberOfIntegrationSteps(self, _arg):
        r"""
        SetNumberOfIntegrationSteps(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_SetNumberOfIntegrationSteps(self, _arg)

    def GetNumberOfIntegrationSteps(self):
        r"""GetNumberOfIntegrationSteps(self) -> unsigned int"""
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_GetNumberOfIntegrationSteps(self)
    __swig_destroy__ = _itkConstantVelocityFieldTransformPython.delete_itkConstantVelocityFieldTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkConstantVelocityFieldTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkConstantVelocityFieldTransformD4

        Create a new object of the class itkConstantVelocityFieldTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstantVelocityFieldTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstantVelocityFieldTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstantVelocityFieldTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstantVelocityFieldTransformD4 in _itkConstantVelocityFieldTransformPython:
_itkConstantVelocityFieldTransformPython.itkConstantVelocityFieldTransformD4_swigregister(itkConstantVelocityFieldTransformD4)

