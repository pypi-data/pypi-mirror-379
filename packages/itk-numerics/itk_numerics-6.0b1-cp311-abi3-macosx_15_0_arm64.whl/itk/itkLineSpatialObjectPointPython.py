# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKSpatialObjectsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLineSpatialObjectPointPython
else:
    import _itkLineSpatialObjectPointPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkSpatialObjectPointPython
import itk.itkSpatialObjectBasePython
import itk.itkBoundingBoxPython
import itk.itkVectorContainerPython
import itk.itkArrayPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkMapContainerPython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkTransformBasePython
class vectoritkLineSpatialObjectPoint2(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkLineSpatialObjectPoint2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkLineSpatialObjectPoint2 >::size_type"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkLineSpatialObjectPoint2

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint2 >::difference_type
        j: std::vector< itkLineSpatialObjectPoint2 >::difference_type

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint2 >::difference_type
        j: std::vector< itkLineSpatialObjectPoint2 >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint2 >::difference_type
        j: std::vector< itkLineSpatialObjectPoint2 >::difference_type
        v: std::vector< itkLineSpatialObjectPoint2,std::allocator< itkLineSpatialObjectPoint2 > > const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint2 >::difference_type
        j: std::vector< itkLineSpatialObjectPoint2 >::difference_type

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint2 >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkLineSpatialObjectPoint2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> itkLineSpatialObjectPoint2

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint2 >::difference_type

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkLineSpatialObjectPoint2,std::allocator< itkLineSpatialObjectPoint2 > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint2 >::difference_type
        x: std::vector< itkLineSpatialObjectPoint2 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> itkLineSpatialObjectPoint2"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkLineSpatialObjectPoint2 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkLineSpatialObjectPoint2 >::size_type"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkLineSpatialObjectPoint2 > &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkLineSpatialObjectPoint2 >::iterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkLineSpatialObjectPoint2 >::iterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkLineSpatialObjectPoint2 >::reverse_iterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkLineSpatialObjectPoint2 >::reverse_iterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkLineSpatialObjectPoint2 >::allocator_type"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkLineSpatialObjectPoint2 >::iterator

        Parameters
        ----------
        pos: std::vector< itkLineSpatialObjectPoint2 >::iterator

        erase(self, first, last) -> std::vector< itkLineSpatialObjectPoint2 >::iterator

        Parameters
        ----------
        first: std::vector< itkLineSpatialObjectPoint2 >::iterator
        last: std::vector< itkLineSpatialObjectPoint2 >::iterator

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkLineSpatialObjectPoint2
        __init__(self, other) -> vectoritkLineSpatialObjectPoint2

        Parameters
        ----------
        other: std::vector< itkLineSpatialObjectPoint2 > const &

        __init__(self, size) -> vectoritkLineSpatialObjectPoint2

        Parameters
        ----------
        size: std::vector< itkLineSpatialObjectPoint2 >::size_type

        __init__(self, size, value) -> vectoritkLineSpatialObjectPoint2

        Parameters
        ----------
        size: std::vector< itkLineSpatialObjectPoint2 >::size_type
        value: std::vector< itkLineSpatialObjectPoint2 >::value_type const &

        """
        _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_swiginit(self, _itkLineSpatialObjectPointPython.new_vectoritkLineSpatialObjectPoint2(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkLineSpatialObjectPoint2 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_push_back(self, x)

    def front(self):
        r"""front(self) -> itkLineSpatialObjectPoint2"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_front(self)

    def back(self):
        r"""back(self) -> itkLineSpatialObjectPoint2"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkLineSpatialObjectPoint2 >::size_type
        x: std::vector< itkLineSpatialObjectPoint2 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkLineSpatialObjectPoint2 >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkLineSpatialObjectPoint2 >::size_type
        x: std::vector< itkLineSpatialObjectPoint2 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkLineSpatialObjectPoint2 >::iterator

        Parameters
        ----------
        pos: std::vector< itkLineSpatialObjectPoint2 >::iterator
        x: std::vector< itkLineSpatialObjectPoint2 >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkLineSpatialObjectPoint2 >::iterator
        n: std::vector< itkLineSpatialObjectPoint2 >::size_type
        x: std::vector< itkLineSpatialObjectPoint2 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkLineSpatialObjectPoint2 >::size_type

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkLineSpatialObjectPoint2 >::size_type"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_capacity(self)
    __swig_destroy__ = _itkLineSpatialObjectPointPython.delete_vectoritkLineSpatialObjectPoint2

# Register vectoritkLineSpatialObjectPoint2 in _itkLineSpatialObjectPointPython:
_itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint2_swigregister(vectoritkLineSpatialObjectPoint2)
class vectoritkLineSpatialObjectPoint3(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkLineSpatialObjectPoint3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkLineSpatialObjectPoint3 >::size_type"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkLineSpatialObjectPoint3

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint3 >::difference_type
        j: std::vector< itkLineSpatialObjectPoint3 >::difference_type

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint3 >::difference_type
        j: std::vector< itkLineSpatialObjectPoint3 >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint3 >::difference_type
        j: std::vector< itkLineSpatialObjectPoint3 >::difference_type
        v: std::vector< itkLineSpatialObjectPoint3,std::allocator< itkLineSpatialObjectPoint3 > > const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint3 >::difference_type
        j: std::vector< itkLineSpatialObjectPoint3 >::difference_type

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint3 >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkLineSpatialObjectPoint3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> itkLineSpatialObjectPoint3

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint3 >::difference_type

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkLineSpatialObjectPoint3,std::allocator< itkLineSpatialObjectPoint3 > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint3 >::difference_type
        x: std::vector< itkLineSpatialObjectPoint3 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> itkLineSpatialObjectPoint3"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkLineSpatialObjectPoint3 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkLineSpatialObjectPoint3 >::size_type"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkLineSpatialObjectPoint3 > &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkLineSpatialObjectPoint3 >::iterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkLineSpatialObjectPoint3 >::iterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkLineSpatialObjectPoint3 >::reverse_iterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkLineSpatialObjectPoint3 >::reverse_iterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkLineSpatialObjectPoint3 >::allocator_type"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkLineSpatialObjectPoint3 >::iterator

        Parameters
        ----------
        pos: std::vector< itkLineSpatialObjectPoint3 >::iterator

        erase(self, first, last) -> std::vector< itkLineSpatialObjectPoint3 >::iterator

        Parameters
        ----------
        first: std::vector< itkLineSpatialObjectPoint3 >::iterator
        last: std::vector< itkLineSpatialObjectPoint3 >::iterator

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkLineSpatialObjectPoint3
        __init__(self, other) -> vectoritkLineSpatialObjectPoint3

        Parameters
        ----------
        other: std::vector< itkLineSpatialObjectPoint3 > const &

        __init__(self, size) -> vectoritkLineSpatialObjectPoint3

        Parameters
        ----------
        size: std::vector< itkLineSpatialObjectPoint3 >::size_type

        __init__(self, size, value) -> vectoritkLineSpatialObjectPoint3

        Parameters
        ----------
        size: std::vector< itkLineSpatialObjectPoint3 >::size_type
        value: std::vector< itkLineSpatialObjectPoint3 >::value_type const &

        """
        _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_swiginit(self, _itkLineSpatialObjectPointPython.new_vectoritkLineSpatialObjectPoint3(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkLineSpatialObjectPoint3 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_push_back(self, x)

    def front(self):
        r"""front(self) -> itkLineSpatialObjectPoint3"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_front(self)

    def back(self):
        r"""back(self) -> itkLineSpatialObjectPoint3"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkLineSpatialObjectPoint3 >::size_type
        x: std::vector< itkLineSpatialObjectPoint3 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkLineSpatialObjectPoint3 >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkLineSpatialObjectPoint3 >::size_type
        x: std::vector< itkLineSpatialObjectPoint3 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkLineSpatialObjectPoint3 >::iterator

        Parameters
        ----------
        pos: std::vector< itkLineSpatialObjectPoint3 >::iterator
        x: std::vector< itkLineSpatialObjectPoint3 >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkLineSpatialObjectPoint3 >::iterator
        n: std::vector< itkLineSpatialObjectPoint3 >::size_type
        x: std::vector< itkLineSpatialObjectPoint3 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkLineSpatialObjectPoint3 >::size_type

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkLineSpatialObjectPoint3 >::size_type"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_capacity(self)
    __swig_destroy__ = _itkLineSpatialObjectPointPython.delete_vectoritkLineSpatialObjectPoint3

# Register vectoritkLineSpatialObjectPoint3 in _itkLineSpatialObjectPointPython:
_itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint3_swigregister(vectoritkLineSpatialObjectPoint3)
class vectoritkLineSpatialObjectPoint4(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkLineSpatialObjectPoint4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkLineSpatialObjectPoint4 >::size_type"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkLineSpatialObjectPoint4

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint4 >::difference_type
        j: std::vector< itkLineSpatialObjectPoint4 >::difference_type

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint4 >::difference_type
        j: std::vector< itkLineSpatialObjectPoint4 >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint4 >::difference_type
        j: std::vector< itkLineSpatialObjectPoint4 >::difference_type
        v: std::vector< itkLineSpatialObjectPoint4,std::allocator< itkLineSpatialObjectPoint4 > > const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint4 >::difference_type
        j: std::vector< itkLineSpatialObjectPoint4 >::difference_type

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint4 >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkLineSpatialObjectPoint4

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> itkLineSpatialObjectPoint4

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint4 >::difference_type

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkLineSpatialObjectPoint4,std::allocator< itkLineSpatialObjectPoint4 > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkLineSpatialObjectPoint4 >::difference_type
        x: std::vector< itkLineSpatialObjectPoint4 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> itkLineSpatialObjectPoint4"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkLineSpatialObjectPoint4 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkLineSpatialObjectPoint4 >::size_type"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkLineSpatialObjectPoint4 > &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkLineSpatialObjectPoint4 >::iterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkLineSpatialObjectPoint4 >::iterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkLineSpatialObjectPoint4 >::reverse_iterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkLineSpatialObjectPoint4 >::reverse_iterator"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkLineSpatialObjectPoint4 >::allocator_type"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkLineSpatialObjectPoint4 >::iterator

        Parameters
        ----------
        pos: std::vector< itkLineSpatialObjectPoint4 >::iterator

        erase(self, first, last) -> std::vector< itkLineSpatialObjectPoint4 >::iterator

        Parameters
        ----------
        first: std::vector< itkLineSpatialObjectPoint4 >::iterator
        last: std::vector< itkLineSpatialObjectPoint4 >::iterator

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkLineSpatialObjectPoint4
        __init__(self, other) -> vectoritkLineSpatialObjectPoint4

        Parameters
        ----------
        other: std::vector< itkLineSpatialObjectPoint4 > const &

        __init__(self, size) -> vectoritkLineSpatialObjectPoint4

        Parameters
        ----------
        size: std::vector< itkLineSpatialObjectPoint4 >::size_type

        __init__(self, size, value) -> vectoritkLineSpatialObjectPoint4

        Parameters
        ----------
        size: std::vector< itkLineSpatialObjectPoint4 >::size_type
        value: std::vector< itkLineSpatialObjectPoint4 >::value_type const &

        """
        _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_swiginit(self, _itkLineSpatialObjectPointPython.new_vectoritkLineSpatialObjectPoint4(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkLineSpatialObjectPoint4 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_push_back(self, x)

    def front(self):
        r"""front(self) -> itkLineSpatialObjectPoint4"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_front(self)

    def back(self):
        r"""back(self) -> itkLineSpatialObjectPoint4"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkLineSpatialObjectPoint4 >::size_type
        x: std::vector< itkLineSpatialObjectPoint4 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkLineSpatialObjectPoint4 >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkLineSpatialObjectPoint4 >::size_type
        x: std::vector< itkLineSpatialObjectPoint4 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkLineSpatialObjectPoint4 >::iterator

        Parameters
        ----------
        pos: std::vector< itkLineSpatialObjectPoint4 >::iterator
        x: std::vector< itkLineSpatialObjectPoint4 >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkLineSpatialObjectPoint4 >::iterator
        n: std::vector< itkLineSpatialObjectPoint4 >::size_type
        x: std::vector< itkLineSpatialObjectPoint4 >::value_type const &

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkLineSpatialObjectPoint4 >::size_type

        """
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkLineSpatialObjectPoint4 >::size_type"""
        return _itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_capacity(self)
    __swig_destroy__ = _itkLineSpatialObjectPointPython.delete_vectoritkLineSpatialObjectPoint4

# Register vectoritkLineSpatialObjectPoint4 in _itkLineSpatialObjectPointPython:
_itkLineSpatialObjectPointPython.vectoritkLineSpatialObjectPoint4_swigregister(vectoritkLineSpatialObjectPoint4)
class itkLineSpatialObjectPoint2(itk.itkSpatialObjectPointPython.itkSpatialObjectPoint2):
    r"""Proxy of C++ itkLineSpatialObjectPoint2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, arg0) -> itkLineSpatialObjectPoint2

        Parameters
        ----------
        arg0: itkLineSpatialObjectPoint2 const &

        __init__(self) -> itkLineSpatialObjectPoint2
        """
        _itkLineSpatialObjectPointPython.itkLineSpatialObjectPoint2_swiginit(self, _itkLineSpatialObjectPointPython.new_itkLineSpatialObjectPoint2(*args))
    __swig_destroy__ = _itkLineSpatialObjectPointPython.delete_itkLineSpatialObjectPoint2

    def GetNormalInObjectSpace(self, index):
        r"""
        GetNormalInObjectSpace(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: unsigned int

        """
        return _itkLineSpatialObjectPointPython.itkLineSpatialObjectPoint2_GetNormalInObjectSpace(self, index)

    def SetNormalInObjectSpace(self, normal, index):
        r"""
        SetNormalInObjectSpace(self, normal, index)

        Parameters
        ----------
        normal: itkCovariantVectorD2 &
        index: unsigned int

        """
        return _itkLineSpatialObjectPointPython.itkLineSpatialObjectPoint2_SetNormalInObjectSpace(self, normal, index)

# Register itkLineSpatialObjectPoint2 in _itkLineSpatialObjectPointPython:
_itkLineSpatialObjectPointPython.itkLineSpatialObjectPoint2_swigregister(itkLineSpatialObjectPoint2)
class itkLineSpatialObjectPoint3(itk.itkSpatialObjectPointPython.itkSpatialObjectPoint3):
    r"""Proxy of C++ itkLineSpatialObjectPoint3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, arg0) -> itkLineSpatialObjectPoint3

        Parameters
        ----------
        arg0: itkLineSpatialObjectPoint3 const &

        __init__(self) -> itkLineSpatialObjectPoint3
        """
        _itkLineSpatialObjectPointPython.itkLineSpatialObjectPoint3_swiginit(self, _itkLineSpatialObjectPointPython.new_itkLineSpatialObjectPoint3(*args))
    __swig_destroy__ = _itkLineSpatialObjectPointPython.delete_itkLineSpatialObjectPoint3

    def GetNormalInObjectSpace(self, index):
        r"""
        GetNormalInObjectSpace(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: unsigned int

        """
        return _itkLineSpatialObjectPointPython.itkLineSpatialObjectPoint3_GetNormalInObjectSpace(self, index)

    def SetNormalInObjectSpace(self, normal, index):
        r"""
        SetNormalInObjectSpace(self, normal, index)

        Parameters
        ----------
        normal: itkCovariantVectorD3 &
        index: unsigned int

        """
        return _itkLineSpatialObjectPointPython.itkLineSpatialObjectPoint3_SetNormalInObjectSpace(self, normal, index)

# Register itkLineSpatialObjectPoint3 in _itkLineSpatialObjectPointPython:
_itkLineSpatialObjectPointPython.itkLineSpatialObjectPoint3_swigregister(itkLineSpatialObjectPoint3)
class itkLineSpatialObjectPoint4(itk.itkSpatialObjectPointPython.itkSpatialObjectPoint4):
    r"""Proxy of C++ itkLineSpatialObjectPoint4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, arg0) -> itkLineSpatialObjectPoint4

        Parameters
        ----------
        arg0: itkLineSpatialObjectPoint4 const &

        __init__(self) -> itkLineSpatialObjectPoint4
        """
        _itkLineSpatialObjectPointPython.itkLineSpatialObjectPoint4_swiginit(self, _itkLineSpatialObjectPointPython.new_itkLineSpatialObjectPoint4(*args))
    __swig_destroy__ = _itkLineSpatialObjectPointPython.delete_itkLineSpatialObjectPoint4

    def GetNormalInObjectSpace(self, index):
        r"""
        GetNormalInObjectSpace(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: unsigned int

        """
        return _itkLineSpatialObjectPointPython.itkLineSpatialObjectPoint4_GetNormalInObjectSpace(self, index)

    def SetNormalInObjectSpace(self, normal, index):
        r"""
        SetNormalInObjectSpace(self, normal, index)

        Parameters
        ----------
        normal: itkCovariantVectorD4 &
        index: unsigned int

        """
        return _itkLineSpatialObjectPointPython.itkLineSpatialObjectPoint4_SetNormalInObjectSpace(self, normal, index)

# Register itkLineSpatialObjectPoint4 in _itkLineSpatialObjectPointPython:
_itkLineSpatialObjectPointPython.itkLineSpatialObjectPoint4_swigregister(itkLineSpatialObjectPoint4)

