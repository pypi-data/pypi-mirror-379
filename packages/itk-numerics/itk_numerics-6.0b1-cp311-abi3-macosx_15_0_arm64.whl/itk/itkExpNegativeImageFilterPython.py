# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkExpNegativeImageFilterPython
else:
    import _itkExpNegativeImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkInPlaceImageFilterAPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def itkExpNegativeImageFilterID2ID2_Superclass_New():
    return itkExpNegativeImageFilterID2ID2_Superclass.New()

class itkExpNegativeImageFilterID2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkExpNegativeImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterID2ID2_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterID2ID2_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< double,double >
        GetFunctor(self) -> itk::Functor::ExpNegative< double,double > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< double,double > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterID2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterID2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterID2ID2_Superclass

        Create a new object of the class itkExpNegativeImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterID2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterID2ID2_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass_swigregister(itkExpNegativeImageFilterID2ID2_Superclass)

def itkExpNegativeImageFilterID3ID3_Superclass_New():
    return itkExpNegativeImageFilterID3ID3_Superclass.New()

class itkExpNegativeImageFilterID3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkExpNegativeImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterID3ID3_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterID3ID3_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< double,double >
        GetFunctor(self) -> itk::Functor::ExpNegative< double,double > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< double,double > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterID3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterID3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterID3ID3_Superclass

        Create a new object of the class itkExpNegativeImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterID3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterID3ID3_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass_swigregister(itkExpNegativeImageFilterID3ID3_Superclass)

def itkExpNegativeImageFilterID4ID4_Superclass_New():
    return itkExpNegativeImageFilterID4ID4_Superclass.New()

class itkExpNegativeImageFilterID4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4ID4):
    r"""Proxy of C++ itkExpNegativeImageFilterID4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterID4ID4_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterID4ID4_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< double,double >
        GetFunctor(self) -> itk::Functor::ExpNegative< double,double > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< double,double > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterID4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterID4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterID4ID4_Superclass

        Create a new object of the class itkExpNegativeImageFilterID4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterID4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterID4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterID4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterID4ID4_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4_Superclass_swigregister(itkExpNegativeImageFilterID4ID4_Superclass)

def itkExpNegativeImageFilterIF2IF2_Superclass_New():
    return itkExpNegativeImageFilterIF2IF2_Superclass.New()

class itkExpNegativeImageFilterIF2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkExpNegativeImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIF2IF2_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIF2IF2_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< float,float >
        GetFunctor(self) -> itk::Functor::ExpNegative< float,float > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< float,float > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIF2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIF2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIF2IF2_Superclass

        Create a new object of the class itkExpNegativeImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIF2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIF2IF2_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass_swigregister(itkExpNegativeImageFilterIF2IF2_Superclass)

def itkExpNegativeImageFilterIF3IF3_Superclass_New():
    return itkExpNegativeImageFilterIF3IF3_Superclass.New()

class itkExpNegativeImageFilterIF3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkExpNegativeImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIF3IF3_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIF3IF3_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< float,float >
        GetFunctor(self) -> itk::Functor::ExpNegative< float,float > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< float,float > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIF3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIF3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIF3IF3_Superclass

        Create a new object of the class itkExpNegativeImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIF3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIF3IF3_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass_swigregister(itkExpNegativeImageFilterIF3IF3_Superclass)

def itkExpNegativeImageFilterIF4IF4_Superclass_New():
    return itkExpNegativeImageFilterIF4IF4_Superclass.New()

class itkExpNegativeImageFilterIF4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IF4):
    r"""Proxy of C++ itkExpNegativeImageFilterIF4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIF4IF4_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIF4IF4_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< float,float >
        GetFunctor(self) -> itk::Functor::ExpNegative< float,float > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< float,float > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIF4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIF4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIF4IF4_Superclass

        Create a new object of the class itkExpNegativeImageFilterIF4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIF4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIF4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIF4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIF4IF4_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4_Superclass_swigregister(itkExpNegativeImageFilterIF4IF4_Superclass)

def itkExpNegativeImageFilterISS2ISS2_Superclass_New():
    return itkExpNegativeImageFilterISS2ISS2_Superclass.New()

class itkExpNegativeImageFilterISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkExpNegativeImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< short,short >
        GetFunctor(self) -> itk::Functor::ExpNegative< short,short > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< short,short > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterISS2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterISS2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterISS2ISS2_Superclass

        Create a new object of the class itkExpNegativeImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterISS2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterISS2ISS2_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass_swigregister(itkExpNegativeImageFilterISS2ISS2_Superclass)

def itkExpNegativeImageFilterISS3ISS3_Superclass_New():
    return itkExpNegativeImageFilterISS3ISS3_Superclass.New()

class itkExpNegativeImageFilterISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkExpNegativeImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< short,short >
        GetFunctor(self) -> itk::Functor::ExpNegative< short,short > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< short,short > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterISS3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterISS3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterISS3ISS3_Superclass

        Create a new object of the class itkExpNegativeImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterISS3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterISS3ISS3_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass_swigregister(itkExpNegativeImageFilterISS3ISS3_Superclass)

def itkExpNegativeImageFilterISS4ISS4_Superclass_New():
    return itkExpNegativeImageFilterISS4ISS4_Superclass.New()

class itkExpNegativeImageFilterISS4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4ISS4):
    r"""Proxy of C++ itkExpNegativeImageFilterISS4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< short,short >
        GetFunctor(self) -> itk::Functor::ExpNegative< short,short > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< short,short > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterISS4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterISS4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterISS4ISS4_Superclass

        Create a new object of the class itkExpNegativeImageFilterISS4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterISS4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterISS4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterISS4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterISS4ISS4_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4_Superclass_swigregister(itkExpNegativeImageFilterISS4ISS4_Superclass)

def itkExpNegativeImageFilterIUC2IUC2_Superclass_New():
    return itkExpNegativeImageFilterIUC2IUC2_Superclass.New()

class itkExpNegativeImageFilterIUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkExpNegativeImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< unsigned char,unsigned char >
        GetFunctor(self) -> itk::Functor::ExpNegative< unsigned char,unsigned char > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< unsigned char,unsigned char > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUC2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIUC2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkExpNegativeImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUC2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUC2IUC2_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass_swigregister(itkExpNegativeImageFilterIUC2IUC2_Superclass)

def itkExpNegativeImageFilterIUC3IUC3_Superclass_New():
    return itkExpNegativeImageFilterIUC3IUC3_Superclass.New()

class itkExpNegativeImageFilterIUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkExpNegativeImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< unsigned char,unsigned char >
        GetFunctor(self) -> itk::Functor::ExpNegative< unsigned char,unsigned char > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< unsigned char,unsigned char > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUC3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIUC3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkExpNegativeImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUC3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUC3IUC3_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass_swigregister(itkExpNegativeImageFilterIUC3IUC3_Superclass)

def itkExpNegativeImageFilterIUC4IUC4_Superclass_New():
    return itkExpNegativeImageFilterIUC4IUC4_Superclass.New()

class itkExpNegativeImageFilterIUC4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4IUC4):
    r"""Proxy of C++ itkExpNegativeImageFilterIUC4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< unsigned char,unsigned char >
        GetFunctor(self) -> itk::Functor::ExpNegative< unsigned char,unsigned char > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< unsigned char,unsigned char > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUC4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIUC4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUC4IUC4_Superclass

        Create a new object of the class itkExpNegativeImageFilterIUC4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUC4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUC4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUC4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUC4IUC4_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4_Superclass_swigregister(itkExpNegativeImageFilterIUC4IUC4_Superclass)

def itkExpNegativeImageFilterIUS2IUS2_Superclass_New():
    return itkExpNegativeImageFilterIUS2IUS2_Superclass.New()

class itkExpNegativeImageFilterIUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkExpNegativeImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< unsigned short,unsigned short >
        GetFunctor(self) -> itk::Functor::ExpNegative< unsigned short,unsigned short > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< unsigned short,unsigned short > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUS2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIUS2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkExpNegativeImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUS2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUS2IUS2_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass_swigregister(itkExpNegativeImageFilterIUS2IUS2_Superclass)

def itkExpNegativeImageFilterIUS3IUS3_Superclass_New():
    return itkExpNegativeImageFilterIUS3IUS3_Superclass.New()

class itkExpNegativeImageFilterIUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkExpNegativeImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< unsigned short,unsigned short >
        GetFunctor(self) -> itk::Functor::ExpNegative< unsigned short,unsigned short > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< unsigned short,unsigned short > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUS3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIUS3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkExpNegativeImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUS3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUS3IUS3_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass_swigregister(itkExpNegativeImageFilterIUS3IUS3_Superclass)

def itkExpNegativeImageFilterIUS4IUS4_Superclass_New():
    return itkExpNegativeImageFilterIUS4IUS4_Superclass.New()

class itkExpNegativeImageFilterIUS4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4IUS4):
    r"""Proxy of C++ itkExpNegativeImageFilterIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::ExpNegative< unsigned short,unsigned short >
        GetFunctor(self) -> itk::Functor::ExpNegative< unsigned short,unsigned short > const &
        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::ExpNegative< unsigned short,unsigned short > const &

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUS4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIUS4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUS4IUS4_Superclass

        Create a new object of the class itkExpNegativeImageFilterIUS4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUS4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUS4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUS4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUS4IUS4_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4_Superclass_swigregister(itkExpNegativeImageFilterIUS4IUS4_Superclass)

def itkExpNegativeImageFilterID2ID2_New():
    return itkExpNegativeImageFilterID2ID2.New()

class itkExpNegativeImageFilterID2ID2(itkExpNegativeImageFilterID2ID2_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterID2ID2_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterID2ID2_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterID2ID2

        Create a new object of the class itkExpNegativeImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterID2ID2 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_swigregister(itkExpNegativeImageFilterID2ID2)

def itkExpNegativeImageFilterID3ID3_New():
    return itkExpNegativeImageFilterID3ID3.New()

class itkExpNegativeImageFilterID3ID3(itkExpNegativeImageFilterID3ID3_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterID3ID3_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterID3ID3_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterID3ID3

        Create a new object of the class itkExpNegativeImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterID3ID3 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_swigregister(itkExpNegativeImageFilterID3ID3)

def itkExpNegativeImageFilterID4ID4_New():
    return itkExpNegativeImageFilterID4ID4.New()

class itkExpNegativeImageFilterID4ID4(itkExpNegativeImageFilterID4ID4_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterID4ID4_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterID4ID4_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterID4ID4

        Create a new object of the class itkExpNegativeImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterID4ID4 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID4ID4_swigregister(itkExpNegativeImageFilterID4ID4)

def itkExpNegativeImageFilterIF2IF2_New():
    return itkExpNegativeImageFilterIF2IF2.New()

class itkExpNegativeImageFilterIF2IF2(itkExpNegativeImageFilterIF2IF2_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIF2IF2_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIF2IF2_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIF2IF2

        Create a new object of the class itkExpNegativeImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIF2IF2 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_swigregister(itkExpNegativeImageFilterIF2IF2)

def itkExpNegativeImageFilterIF3IF3_New():
    return itkExpNegativeImageFilterIF3IF3.New()

class itkExpNegativeImageFilterIF3IF3(itkExpNegativeImageFilterIF3IF3_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIF3IF3_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIF3IF3_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIF3IF3

        Create a new object of the class itkExpNegativeImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIF3IF3 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_swigregister(itkExpNegativeImageFilterIF3IF3)

def itkExpNegativeImageFilterIF4IF4_New():
    return itkExpNegativeImageFilterIF4IF4.New()

class itkExpNegativeImageFilterIF4IF4(itkExpNegativeImageFilterIF4IF4_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIF4IF4_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIF4IF4_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIF4IF4

        Create a new object of the class itkExpNegativeImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIF4IF4 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF4IF4_swigregister(itkExpNegativeImageFilterIF4IF4)

def itkExpNegativeImageFilterISS2ISS2_New():
    return itkExpNegativeImageFilterISS2ISS2.New()

class itkExpNegativeImageFilterISS2ISS2(itkExpNegativeImageFilterISS2ISS2_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterISS2ISS2_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterISS2ISS2_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterISS2ISS2

        Create a new object of the class itkExpNegativeImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterISS2ISS2 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_swigregister(itkExpNegativeImageFilterISS2ISS2)

def itkExpNegativeImageFilterISS3ISS3_New():
    return itkExpNegativeImageFilterISS3ISS3.New()

class itkExpNegativeImageFilterISS3ISS3(itkExpNegativeImageFilterISS3ISS3_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterISS3ISS3_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterISS3ISS3_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterISS3ISS3

        Create a new object of the class itkExpNegativeImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterISS3ISS3 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_swigregister(itkExpNegativeImageFilterISS3ISS3)

def itkExpNegativeImageFilterISS4ISS4_New():
    return itkExpNegativeImageFilterISS4ISS4.New()

class itkExpNegativeImageFilterISS4ISS4(itkExpNegativeImageFilterISS4ISS4_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterISS4ISS4_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterISS4ISS4_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterISS4ISS4

        Create a new object of the class itkExpNegativeImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterISS4ISS4 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS4ISS4_swigregister(itkExpNegativeImageFilterISS4ISS4)

def itkExpNegativeImageFilterIUC2IUC2_New():
    return itkExpNegativeImageFilterIUC2IUC2.New()

class itkExpNegativeImageFilterIUC2IUC2(itkExpNegativeImageFilterIUC2IUC2_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIUC2IUC2_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIUC2IUC2_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUC2IUC2

        Create a new object of the class itkExpNegativeImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUC2IUC2 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_swigregister(itkExpNegativeImageFilterIUC2IUC2)

def itkExpNegativeImageFilterIUC3IUC3_New():
    return itkExpNegativeImageFilterIUC3IUC3.New()

class itkExpNegativeImageFilterIUC3IUC3(itkExpNegativeImageFilterIUC3IUC3_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIUC3IUC3_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIUC3IUC3_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUC3IUC3

        Create a new object of the class itkExpNegativeImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUC3IUC3 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_swigregister(itkExpNegativeImageFilterIUC3IUC3)

def itkExpNegativeImageFilterIUC4IUC4_New():
    return itkExpNegativeImageFilterIUC4IUC4.New()

class itkExpNegativeImageFilterIUC4IUC4(itkExpNegativeImageFilterIUC4IUC4_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIUC4IUC4_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIUC4IUC4_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUC4IUC4

        Create a new object of the class itkExpNegativeImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUC4IUC4 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC4IUC4_swigregister(itkExpNegativeImageFilterIUC4IUC4)

def itkExpNegativeImageFilterIUS2IUS2_New():
    return itkExpNegativeImageFilterIUS2IUS2.New()

class itkExpNegativeImageFilterIUS2IUS2(itkExpNegativeImageFilterIUS2IUS2_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIUS2IUS2_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIUS2IUS2_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUS2IUS2

        Create a new object of the class itkExpNegativeImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUS2IUS2 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_swigregister(itkExpNegativeImageFilterIUS2IUS2)

def itkExpNegativeImageFilterIUS3IUS3_New():
    return itkExpNegativeImageFilterIUS3IUS3.New()

class itkExpNegativeImageFilterIUS3IUS3(itkExpNegativeImageFilterIUS3IUS3_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIUS3IUS3_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIUS3IUS3_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUS3IUS3

        Create a new object of the class itkExpNegativeImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUS3IUS3 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_swigregister(itkExpNegativeImageFilterIUS3IUS3)

def itkExpNegativeImageFilterIUS4IUS4_New():
    return itkExpNegativeImageFilterIUS4IUS4.New()

class itkExpNegativeImageFilterIUS4IUS4(itkExpNegativeImageFilterIUS4IUS4_Superclass):
    r"""Proxy of C++ itkExpNegativeImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpNegativeImageFilterIUS4IUS4_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpNegativeImageFilterIUS4IUS4_Pointer"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4_Clone(self)

    def SetFactor(self, factor):
        r"""
        SetFactor(self, factor)

        Parameters
        ----------
        factor: double

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4_SetFactor(self, factor)

    def GetFactor(self):
        r"""GetFactor(self) -> double"""
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4_GetFactor(self)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpNegativeImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUS4IUS4

        Create a new object of the class itkExpNegativeImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUS4IUS4 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS4IUS4_swigregister(itkExpNegativeImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def unary_functor_image_filter(*args: itkt.ImageLike,  functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for UnaryFunctorImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.UnaryFunctorImageFilter
    unary_functor_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    unary_functor_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def exp_negative_image_filter(*args: itkt.ImageLike,  factor: float=..., functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ExpNegativeImageFilter"""
    import itk

    kwarg_typehints = { 'factor':factor,'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ExpNegativeImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def exp_negative_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.ExpNegativeImageFilter
    exp_negative_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    exp_negative_image_filter.__doc__ = filter_object.__doc__



