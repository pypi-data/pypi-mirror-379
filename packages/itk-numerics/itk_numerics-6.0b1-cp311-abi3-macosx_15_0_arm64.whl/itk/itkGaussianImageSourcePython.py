# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageSourcesPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGaussianImageSourcePython
else:
    import _itkGaussianImageSourcePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkParametricImageSourcePython
import itk.itkArrayPython
import itk.itkGenerateImageSourcePython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkGaussianImageSourceID2_New():
    return itkGaussianImageSourceID2.New()

class itkGaussianImageSourceID2(itk.itkParametricImageSourcePython.itkParametricImageSourceID2):
    r"""Proxy of C++ itkGaussianImageSourceID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceID2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceID2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID2_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID2_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID2_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID2_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID2_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID2_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID2_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID2_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID2_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID2_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceID2

        Create a new object of the class itkGaussianImageSourceID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceID2 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceID2_swigregister(itkGaussianImageSourceID2)

def itkGaussianImageSourceID3_New():
    return itkGaussianImageSourceID3.New()

class itkGaussianImageSourceID3(itk.itkParametricImageSourcePython.itkParametricImageSourceID3):
    r"""Proxy of C++ itkGaussianImageSourceID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceID3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceID3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID3_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID3_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID3_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID3_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID3_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID3_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID3_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID3_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID3_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID3_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceID3

        Create a new object of the class itkGaussianImageSourceID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceID3 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceID3_swigregister(itkGaussianImageSourceID3)

def itkGaussianImageSourceID4_New():
    return itkGaussianImageSourceID4.New()

class itkGaussianImageSourceID4(itk.itkParametricImageSourcePython.itkParametricImageSourceID4):
    r"""Proxy of C++ itkGaussianImageSourceID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceID4_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceID4_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID4_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID4_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID4_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID4_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID4_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID4_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID4_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD4"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID4_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID4_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD4"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID4_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceID4

        Create a new object of the class itkGaussianImageSourceID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceID4 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceID4_swigregister(itkGaussianImageSourceID4)

def itkGaussianImageSourceIF2_New():
    return itkGaussianImageSourceIF2.New()

class itkGaussianImageSourceIF2(itk.itkParametricImageSourcePython.itkParametricImageSourceIF2):
    r"""Proxy of C++ itkGaussianImageSourceIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceIF2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceIF2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIF2

        Create a new object of the class itkGaussianImageSourceIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceIF2 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceIF2_swigregister(itkGaussianImageSourceIF2)

def itkGaussianImageSourceIF3_New():
    return itkGaussianImageSourceIF3.New()

class itkGaussianImageSourceIF3(itk.itkParametricImageSourcePython.itkParametricImageSourceIF3):
    r"""Proxy of C++ itkGaussianImageSourceIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceIF3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceIF3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIF3

        Create a new object of the class itkGaussianImageSourceIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceIF3 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceIF3_swigregister(itkGaussianImageSourceIF3)

def itkGaussianImageSourceIF4_New():
    return itkGaussianImageSourceIF4.New()

class itkGaussianImageSourceIF4(itk.itkParametricImageSourcePython.itkParametricImageSourceIF4):
    r"""Proxy of C++ itkGaussianImageSourceIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceIF4_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceIF4_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF4_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF4_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF4_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF4_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF4_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF4_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF4_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD4"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF4_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF4_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD4"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF4_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIF4

        Create a new object of the class itkGaussianImageSourceIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceIF4 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceIF4_swigregister(itkGaussianImageSourceIF4)

def itkGaussianImageSourceISS2_New():
    return itkGaussianImageSourceISS2.New()

class itkGaussianImageSourceISS2(itk.itkParametricImageSourcePython.itkParametricImageSourceISS2):
    r"""Proxy of C++ itkGaussianImageSourceISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceISS2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceISS2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceISS2

        Create a new object of the class itkGaussianImageSourceISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceISS2 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceISS2_swigregister(itkGaussianImageSourceISS2)

def itkGaussianImageSourceISS3_New():
    return itkGaussianImageSourceISS3.New()

class itkGaussianImageSourceISS3(itk.itkParametricImageSourcePython.itkParametricImageSourceISS3):
    r"""Proxy of C++ itkGaussianImageSourceISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceISS3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceISS3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceISS3

        Create a new object of the class itkGaussianImageSourceISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceISS3 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceISS3_swigregister(itkGaussianImageSourceISS3)

def itkGaussianImageSourceISS4_New():
    return itkGaussianImageSourceISS4.New()

class itkGaussianImageSourceISS4(itk.itkParametricImageSourcePython.itkParametricImageSourceISS4):
    r"""Proxy of C++ itkGaussianImageSourceISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceISS4_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceISS4_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS4_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS4_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS4_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS4_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS4_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS4_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS4_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD4"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS4_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS4_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD4"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS4_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceISS4

        Create a new object of the class itkGaussianImageSourceISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceISS4 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceISS4_swigregister(itkGaussianImageSourceISS4)

def itkGaussianImageSourceIUC2_New():
    return itkGaussianImageSourceIUC2.New()

class itkGaussianImageSourceIUC2(itk.itkParametricImageSourcePython.itkParametricImageSourceIUC2):
    r"""Proxy of C++ itkGaussianImageSourceIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceIUC2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceIUC2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIUC2

        Create a new object of the class itkGaussianImageSourceIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceIUC2 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_swigregister(itkGaussianImageSourceIUC2)

def itkGaussianImageSourceIUC3_New():
    return itkGaussianImageSourceIUC3.New()

class itkGaussianImageSourceIUC3(itk.itkParametricImageSourcePython.itkParametricImageSourceIUC3):
    r"""Proxy of C++ itkGaussianImageSourceIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceIUC3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceIUC3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIUC3

        Create a new object of the class itkGaussianImageSourceIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceIUC3 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_swigregister(itkGaussianImageSourceIUC3)

def itkGaussianImageSourceIUC4_New():
    return itkGaussianImageSourceIUC4.New()

class itkGaussianImageSourceIUC4(itk.itkParametricImageSourcePython.itkParametricImageSourceIUC4):
    r"""Proxy of C++ itkGaussianImageSourceIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceIUC4_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceIUC4_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC4_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC4_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC4_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC4_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC4_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC4_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC4_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD4"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC4_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC4_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD4"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC4_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIUC4

        Create a new object of the class itkGaussianImageSourceIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceIUC4 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceIUC4_swigregister(itkGaussianImageSourceIUC4)

def itkGaussianImageSourceIUS2_New():
    return itkGaussianImageSourceIUS2.New()

class itkGaussianImageSourceIUS2(itk.itkParametricImageSourcePython.itkParametricImageSourceIUS2):
    r"""Proxy of C++ itkGaussianImageSourceIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceIUS2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceIUS2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS2_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS2_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS2_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS2_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS2_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS2_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS2_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS2_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS2_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS2_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIUS2

        Create a new object of the class itkGaussianImageSourceIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceIUS2 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceIUS2_swigregister(itkGaussianImageSourceIUS2)

def itkGaussianImageSourceIUS3_New():
    return itkGaussianImageSourceIUS3.New()

class itkGaussianImageSourceIUS3(itk.itkParametricImageSourcePython.itkParametricImageSourceIUS3):
    r"""Proxy of C++ itkGaussianImageSourceIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceIUS3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceIUS3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS3_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS3_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS3_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS3_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS3_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS3_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS3_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS3_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS3_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS3_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIUS3

        Create a new object of the class itkGaussianImageSourceIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceIUS3 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceIUS3_swigregister(itkGaussianImageSourceIUS3)

def itkGaussianImageSourceIUS4_New():
    return itkGaussianImageSourceIUS4.New()

class itkGaussianImageSourceIUS4(itk.itkParametricImageSourcePython.itkParametricImageSourceIUS4):
    r"""Proxy of C++ itkGaussianImageSourceIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianImageSourceIUS4_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianImageSourceIUS4_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS4_Clone(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS4_SetScale(self, _arg)

    def GetScale(self):
        r"""GetScale(self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS4_GetScale(self)

    def SetNormalized(self, _arg):
        r"""
        SetNormalized(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS4_SetNormalized(self, _arg)

    def GetNormalized(self):
        r"""GetNormalized(self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS4_GetNormalized(self)

    def NormalizedOn(self):
        r"""NormalizedOn(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS4_NormalizedOn(self)

    def NormalizedOff(self):
        r"""NormalizedOff(self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS4_NormalizedOff(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> itkFixedArrayD4"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS4_GetSigma(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS4_SetMean(self, _arg)

    def GetMean(self):
        r"""GetMean(self) -> itkFixedArrayD4"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS4_GetMean(self)
    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianImageSourceIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIUS4

        Create a new object of the class itkGaussianImageSourceIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceIUS4 in _itkGaussianImageSourcePython:
_itkGaussianImageSourcePython.itkGaussianImageSourceIUS4_swigregister(itkGaussianImageSourceIUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def gaussian_image_source(*args,  scale: float=..., normalized: bool=..., sigma: Sequence[float]=..., mean: Sequence[float]=..., parameters: Union[Sequence[float], Sequence[float]]=..., use_reference_image: bool=..., size: Sequence[int]=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., direction=..., start_index: Sequence[int]=..., output_parameters_from_image: itkt.ImageBase=..., reference_image: itkt.ImageBase=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for GaussianImageSource"""
    import itk

    kwarg_typehints = { 'scale':scale,'normalized':normalized,'sigma':sigma,'mean':mean,'parameters':parameters,'use_reference_image':use_reference_image,'size':size,'spacing':spacing,'origin':origin,'direction':direction,'start_index':start_index,'output_parameters_from_image':output_parameters_from_image,'reference_image':reference_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.GaussianImageSource.New(*args, **kwargs)

    return instance.__internal_call__()

def gaussian_image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageSources.GaussianImageSource
    gaussian_image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    gaussian_image_source.__doc__ = filter_object.__doc__



