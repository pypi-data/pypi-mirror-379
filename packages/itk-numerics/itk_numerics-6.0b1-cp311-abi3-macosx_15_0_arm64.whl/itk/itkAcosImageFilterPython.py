# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAcosImageFilterPython
else:
    import _itkAcosImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkUnaryGeneratorImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython

def itkAcosImageFilterID2ID2_New():
    return itkAcosImageFilterID2ID2.New()

class itkAcosImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""Proxy of C++ itkAcosImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterID2ID2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterID2ID2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterID2ID2_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterID2ID2_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterID2ID2

        Create a new object of the class itkAcosImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterID2ID2 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterID2ID2_swigregister(itkAcosImageFilterID2ID2)

def itkAcosImageFilterID3ID3_New():
    return itkAcosImageFilterID3ID3.New()

class itkAcosImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""Proxy of C++ itkAcosImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterID3ID3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterID3ID3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterID3ID3_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterID3ID3_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterID3ID3

        Create a new object of the class itkAcosImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterID3ID3 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterID3ID3_swigregister(itkAcosImageFilterID3ID3)

def itkAcosImageFilterID4ID4_New():
    return itkAcosImageFilterID4ID4.New()

class itkAcosImageFilterID4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID4ID4):
    r"""Proxy of C++ itkAcosImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterID4ID4_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterID4ID4_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterID4ID4_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterID4ID4_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterID4ID4

        Create a new object of the class itkAcosImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterID4ID4 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterID4ID4_swigregister(itkAcosImageFilterID4ID4)

def itkAcosImageFilterIF2IF2_New():
    return itkAcosImageFilterIF2IF2.New()

class itkAcosImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""Proxy of C++ itkAcosImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterIF2IF2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterIF2IF2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIF2IF2_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIF2IF2_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIF2IF2

        Create a new object of the class itkAcosImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterIF2IF2 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterIF2IF2_swigregister(itkAcosImageFilterIF2IF2)

def itkAcosImageFilterIF3IF3_New():
    return itkAcosImageFilterIF3IF3.New()

class itkAcosImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""Proxy of C++ itkAcosImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterIF3IF3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterIF3IF3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIF3IF3_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIF3IF3_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIF3IF3

        Create a new object of the class itkAcosImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterIF3IF3 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterIF3IF3_swigregister(itkAcosImageFilterIF3IF3)

def itkAcosImageFilterIF4IF4_New():
    return itkAcosImageFilterIF4IF4.New()

class itkAcosImageFilterIF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF4IF4):
    r"""Proxy of C++ itkAcosImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterIF4IF4_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterIF4IF4_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIF4IF4_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIF4IF4_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIF4IF4

        Create a new object of the class itkAcosImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterIF4IF4 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterIF4IF4_swigregister(itkAcosImageFilterIF4IF4)

def itkAcosImageFilterISS2ISS2_New():
    return itkAcosImageFilterISS2ISS2.New()

class itkAcosImageFilterISS2ISS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    r"""Proxy of C++ itkAcosImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterISS2ISS2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterISS2ISS2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterISS2ISS2

        Create a new object of the class itkAcosImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterISS2ISS2 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterISS2ISS2_swigregister(itkAcosImageFilterISS2ISS2)

def itkAcosImageFilterISS3ISS3_New():
    return itkAcosImageFilterISS3ISS3.New()

class itkAcosImageFilterISS3ISS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    r"""Proxy of C++ itkAcosImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterISS3ISS3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterISS3ISS3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterISS3ISS3

        Create a new object of the class itkAcosImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterISS3ISS3 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterISS3ISS3_swigregister(itkAcosImageFilterISS3ISS3)

def itkAcosImageFilterISS4ISS4_New():
    return itkAcosImageFilterISS4ISS4.New()

class itkAcosImageFilterISS4ISS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS4ISS4):
    r"""Proxy of C++ itkAcosImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterISS4ISS4_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterISS4ISS4_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterISS4ISS4_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterISS4ISS4_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterISS4ISS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterISS4ISS4

        Create a new object of the class itkAcosImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterISS4ISS4 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterISS4ISS4_swigregister(itkAcosImageFilterISS4ISS4)

def itkAcosImageFilterIUC2IUC2_New():
    return itkAcosImageFilterIUC2IUC2.New()

class itkAcosImageFilterIUC2IUC2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    r"""Proxy of C++ itkAcosImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterIUC2IUC2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterIUC2IUC2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIUC2IUC2

        Create a new object of the class itkAcosImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterIUC2IUC2 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterIUC2IUC2_swigregister(itkAcosImageFilterIUC2IUC2)

def itkAcosImageFilterIUC3IUC3_New():
    return itkAcosImageFilterIUC3IUC3.New()

class itkAcosImageFilterIUC3IUC3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    r"""Proxy of C++ itkAcosImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterIUC3IUC3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterIUC3IUC3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIUC3IUC3

        Create a new object of the class itkAcosImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterIUC3IUC3 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterIUC3IUC3_swigregister(itkAcosImageFilterIUC3IUC3)

def itkAcosImageFilterIUC4IUC4_New():
    return itkAcosImageFilterIUC4IUC4.New()

class itkAcosImageFilterIUC4IUC4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC4IUC4):
    r"""Proxy of C++ itkAcosImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterIUC4IUC4_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterIUC4IUC4_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC4IUC4_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUC4IUC4_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUC4IUC4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIUC4IUC4

        Create a new object of the class itkAcosImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterIUC4IUC4 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterIUC4IUC4_swigregister(itkAcosImageFilterIUC4IUC4)

def itkAcosImageFilterIUS2IUS2_New():
    return itkAcosImageFilterIUS2IUS2.New()

class itkAcosImageFilterIUS2IUS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    r"""Proxy of C++ itkAcosImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterIUS2IUS2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterIUS2IUS2_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIUS2IUS2

        Create a new object of the class itkAcosImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterIUS2IUS2 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterIUS2IUS2_swigregister(itkAcosImageFilterIUS2IUS2)

def itkAcosImageFilterIUS3IUS3_New():
    return itkAcosImageFilterIUS3IUS3.New()

class itkAcosImageFilterIUS3IUS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    r"""Proxy of C++ itkAcosImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterIUS3IUS3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterIUS3IUS3_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIUS3IUS3

        Create a new object of the class itkAcosImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterIUS3IUS3 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterIUS3IUS3_swigregister(itkAcosImageFilterIUS3IUS3)

def itkAcosImageFilterIUS4IUS4_New():
    return itkAcosImageFilterIUS4IUS4.New()

class itkAcosImageFilterIUS4IUS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS4IUS4):
    r"""Proxy of C++ itkAcosImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAcosImageFilterIUS4IUS4_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAcosImageFilterIUS4IUS4_Pointer"""
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS4IUS4_Clone(self)
    InputCovertibleToDoubleCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUS4IUS4_InputCovertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAcosImageFilterPython.itkAcosImageFilterIUS4IUS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAcosImageFilterPython.delete_itkAcosImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAcosImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAcosImageFilterPython.itkAcosImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAcosImageFilterIUS4IUS4

        Create a new object of the class itkAcosImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAcosImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAcosImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAcosImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAcosImageFilterIUS4IUS4 in _itkAcosImageFilterPython:
_itkAcosImageFilterPython.itkAcosImageFilterIUS4IUS4_swigregister(itkAcosImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def acos_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for AcosImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.AcosImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def acos_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.AcosImageFilter
    acos_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    acos_image_filter.__doc__ = filter_object.__doc__



