# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAbsImageFilterPython
else:
    import _itkAbsImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkUnaryGeneratorImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython

def itkAbsImageFilterID2ID2_New():
    return itkAbsImageFilterID2ID2.New()

class itkAbsImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""Proxy of C++ itkAbsImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterID2ID2_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterID2ID2_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterID2ID2_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterID2ID2_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterID2ID2_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterID2ID2

        Create a new object of the class itkAbsImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterID2ID2 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterID2ID2_swigregister(itkAbsImageFilterID2ID2)

def itkAbsImageFilterID3ID3_New():
    return itkAbsImageFilterID3ID3.New()

class itkAbsImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""Proxy of C++ itkAbsImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterID3ID3_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterID3ID3_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterID3ID3_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterID3ID3_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterID3ID3_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterID3ID3

        Create a new object of the class itkAbsImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterID3ID3 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterID3ID3_swigregister(itkAbsImageFilterID3ID3)

def itkAbsImageFilterID4ID4_New():
    return itkAbsImageFilterID4ID4.New()

class itkAbsImageFilterID4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID4ID4):
    r"""Proxy of C++ itkAbsImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterID4ID4_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterID4ID4_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterID4ID4_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterID4ID4_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterID4ID4_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterID4ID4

        Create a new object of the class itkAbsImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterID4ID4 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterID4ID4_swigregister(itkAbsImageFilterID4ID4)

def itkAbsImageFilterIF2IF2_New():
    return itkAbsImageFilterIF2IF2.New()

class itkAbsImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""Proxy of C++ itkAbsImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterIF2IF2_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterIF2IF2_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIF2IF2_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterIF2IF2_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterIF2IF2_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterIF2IF2

        Create a new object of the class itkAbsImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterIF2IF2 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterIF2IF2_swigregister(itkAbsImageFilterIF2IF2)

def itkAbsImageFilterIF3IF3_New():
    return itkAbsImageFilterIF3IF3.New()

class itkAbsImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""Proxy of C++ itkAbsImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterIF3IF3_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterIF3IF3_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIF3IF3_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterIF3IF3_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterIF3IF3_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterIF3IF3

        Create a new object of the class itkAbsImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterIF3IF3 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterIF3IF3_swigregister(itkAbsImageFilterIF3IF3)

def itkAbsImageFilterIF4IF4_New():
    return itkAbsImageFilterIF4IF4.New()

class itkAbsImageFilterIF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF4IF4):
    r"""Proxy of C++ itkAbsImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterIF4IF4_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterIF4IF4_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIF4IF4_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterIF4IF4_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterIF4IF4_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterIF4IF4

        Create a new object of the class itkAbsImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterIF4IF4 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterIF4IF4_swigregister(itkAbsImageFilterIF4IF4)

def itkAbsImageFilterISS2ISS2_New():
    return itkAbsImageFilterISS2ISS2.New()

class itkAbsImageFilterISS2ISS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    r"""Proxy of C++ itkAbsImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterISS2ISS2_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterISS2ISS2_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterISS2ISS2_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterISS2ISS2_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterISS2ISS2_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterISS2ISS2

        Create a new object of the class itkAbsImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterISS2ISS2 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterISS2ISS2_swigregister(itkAbsImageFilterISS2ISS2)

def itkAbsImageFilterISS3ISS3_New():
    return itkAbsImageFilterISS3ISS3.New()

class itkAbsImageFilterISS3ISS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    r"""Proxy of C++ itkAbsImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterISS3ISS3_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterISS3ISS3_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterISS3ISS3_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterISS3ISS3_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterISS3ISS3_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterISS3ISS3

        Create a new object of the class itkAbsImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterISS3ISS3 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterISS3ISS3_swigregister(itkAbsImageFilterISS3ISS3)

def itkAbsImageFilterISS4ISS4_New():
    return itkAbsImageFilterISS4ISS4.New()

class itkAbsImageFilterISS4ISS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS4ISS4):
    r"""Proxy of C++ itkAbsImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterISS4ISS4_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterISS4ISS4_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterISS4ISS4_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterISS4ISS4_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterISS4ISS4_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterISS4ISS4

        Create a new object of the class itkAbsImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterISS4ISS4 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterISS4ISS4_swigregister(itkAbsImageFilterISS4ISS4)

def itkAbsImageFilterIUC2IUC2_New():
    return itkAbsImageFilterIUC2IUC2.New()

class itkAbsImageFilterIUC2IUC2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    r"""Proxy of C++ itkAbsImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterIUC2IUC2_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterIUC2IUC2_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIUC2IUC2_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterIUC2IUC2_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterIUC2IUC2_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterIUC2IUC2

        Create a new object of the class itkAbsImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterIUC2IUC2 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterIUC2IUC2_swigregister(itkAbsImageFilterIUC2IUC2)

def itkAbsImageFilterIUC3IUC3_New():
    return itkAbsImageFilterIUC3IUC3.New()

class itkAbsImageFilterIUC3IUC3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    r"""Proxy of C++ itkAbsImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterIUC3IUC3_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterIUC3IUC3_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIUC3IUC3_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterIUC3IUC3_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterIUC3IUC3_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterIUC3IUC3

        Create a new object of the class itkAbsImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterIUC3IUC3 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterIUC3IUC3_swigregister(itkAbsImageFilterIUC3IUC3)

def itkAbsImageFilterIUC4IUC4_New():
    return itkAbsImageFilterIUC4IUC4.New()

class itkAbsImageFilterIUC4IUC4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC4IUC4):
    r"""Proxy of C++ itkAbsImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterIUC4IUC4_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterIUC4IUC4_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIUC4IUC4_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterIUC4IUC4_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterIUC4IUC4_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterIUC4IUC4

        Create a new object of the class itkAbsImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterIUC4IUC4 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterIUC4IUC4_swigregister(itkAbsImageFilterIUC4IUC4)

def itkAbsImageFilterIUS2IUS2_New():
    return itkAbsImageFilterIUS2IUS2.New()

class itkAbsImageFilterIUS2IUS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    r"""Proxy of C++ itkAbsImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterIUS2IUS2_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterIUS2IUS2_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIUS2IUS2_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterIUS2IUS2_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterIUS2IUS2_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterIUS2IUS2

        Create a new object of the class itkAbsImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterIUS2IUS2 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterIUS2IUS2_swigregister(itkAbsImageFilterIUS2IUS2)

def itkAbsImageFilterIUS3IUS3_New():
    return itkAbsImageFilterIUS3IUS3.New()

class itkAbsImageFilterIUS3IUS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    r"""Proxy of C++ itkAbsImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterIUS3IUS3_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterIUS3IUS3_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIUS3IUS3_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterIUS3IUS3_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterIUS3IUS3_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterIUS3IUS3

        Create a new object of the class itkAbsImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterIUS3IUS3 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterIUS3IUS3_swigregister(itkAbsImageFilterIUS3IUS3)

def itkAbsImageFilterIUS4IUS4_New():
    return itkAbsImageFilterIUS4IUS4.New()

class itkAbsImageFilterIUS4IUS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS4IUS4):
    r"""Proxy of C++ itkAbsImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAbsImageFilterIUS4IUS4_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAbsImageFilterIUS4IUS4_Pointer"""
        return _itkAbsImageFilterPython.itkAbsImageFilterIUS4IUS4_Clone(self)
    ConvertibleCheck = _itkAbsImageFilterPython.itkAbsImageFilterIUS4IUS4_ConvertibleCheck
    
    InputGreaterThanIntCheck = _itkAbsImageFilterPython.itkAbsImageFilterIUS4IUS4_InputGreaterThanIntCheck
    
    __swig_destroy__ = _itkAbsImageFilterPython.delete_itkAbsImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAbsImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAbsImageFilterPython.itkAbsImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAbsImageFilterIUS4IUS4

        Create a new object of the class itkAbsImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsImageFilterIUS4IUS4 in _itkAbsImageFilterPython:
_itkAbsImageFilterPython.itkAbsImageFilterIUS4IUS4_swigregister(itkAbsImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def abs_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for AbsImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.AbsImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def abs_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.AbsImageFilter
    abs_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    abs_image_filter.__doc__ = filter_object.__doc__



