# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAddImageFilterPython
else:
    import _itkAddImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkBinaryGeneratorImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython
import itk.itkInPlaceImageFilterBPython

def itkAddImageFilterID2ID2ID2_New():
    return itkAddImageFilterID2ID2ID2.New()

class itkAddImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""Proxy of C++ itkAddImageFilterID2ID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterID2ID2ID2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterID2ID2ID2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterID2ID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterID2ID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterID2ID2ID2

        Create a new object of the class itkAddImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterID2ID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterID2ID2ID2 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_swigregister(itkAddImageFilterID2ID2ID2)

def itkAddImageFilterID3ID3ID3_New():
    return itkAddImageFilterID3ID3ID3.New()

class itkAddImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""Proxy of C++ itkAddImageFilterID3ID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterID3ID3ID3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterID3ID3ID3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterID3ID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterID3ID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterID3ID3ID3

        Create a new object of the class itkAddImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterID3ID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterID3ID3ID3 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_swigregister(itkAddImageFilterID3ID3ID3)

def itkAddImageFilterID4ID4ID4_New():
    return itkAddImageFilterID4ID4ID4.New()

class itkAddImageFilterID4ID4ID4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID4ID4ID4):
    r"""Proxy of C++ itkAddImageFilterID4ID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterID4ID4ID4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterID4ID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterID4ID4ID4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterID4ID4ID4_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterID4ID4ID4_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterID4ID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterID4ID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterID4ID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterID4ID4ID4

        Create a new object of the class itkAddImageFilterID4ID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterID4ID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterID4ID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterID4ID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterID4ID4ID4 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterID4ID4ID4_swigregister(itkAddImageFilterID4ID4ID4)

def itkAddImageFilterIF2IF2IF2_New():
    return itkAddImageFilterIF2IF2IF2.New()

class itkAddImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""Proxy of C++ itkAddImageFilterIF2IF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIF2IF2IF2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIF2IF2IF2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIF2IF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIF2IF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIF2IF2IF2

        Create a new object of the class itkAddImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIF2IF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIF2IF2IF2 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_swigregister(itkAddImageFilterIF2IF2IF2)

def itkAddImageFilterIF3IF3IF3_New():
    return itkAddImageFilterIF3IF3IF3.New()

class itkAddImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""Proxy of C++ itkAddImageFilterIF3IF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIF3IF3IF3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIF3IF3IF3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIF3IF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIF3IF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIF3IF3IF3

        Create a new object of the class itkAddImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIF3IF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIF3IF3IF3 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_swigregister(itkAddImageFilterIF3IF3IF3)

def itkAddImageFilterIF4IF4IF4_New():
    return itkAddImageFilterIF4IF4IF4.New()

class itkAddImageFilterIF4IF4IF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF4IF4IF4):
    r"""Proxy of C++ itkAddImageFilterIF4IF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIF4IF4IF4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIF4IF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIF4IF4IF4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIF4IF4IF4_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIF4IF4IF4_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIF4IF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIF4IF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIF4IF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIF4IF4IF4

        Create a new object of the class itkAddImageFilterIF4IF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIF4IF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIF4IF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIF4IF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIF4IF4IF4 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIF4IF4IF4_swigregister(itkAddImageFilterIF4IF4IF4)

def itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2_New():
    return itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2.New()

class itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIRGBAUC2IRGBAUC2IRGBAUC2):
    r"""Proxy of C++ itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2

        Create a new object of the class itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2_swigregister(itkAddImageFilterIRGBAUC2IRGBAUC2IRGBAUC2)

def itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3_New():
    return itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3.New()

class itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIRGBAUC3IRGBAUC3IRGBAUC3):
    r"""Proxy of C++ itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3

        Create a new object of the class itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3_swigregister(itkAddImageFilterIRGBAUC3IRGBAUC3IRGBAUC3)

def itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4_New():
    return itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4.New()

class itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIRGBAUC4IRGBAUC4IRGBAUC4):
    r"""Proxy of C++ itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4

        Create a new object of the class itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4_swigregister(itkAddImageFilterIRGBAUC4IRGBAUC4IRGBAUC4)

def itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2_New():
    return itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2.New()

class itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIRGBUC2IRGBUC2IRGBUC2):
    r"""Proxy of C++ itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2

        Create a new object of the class itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2_swigregister(itkAddImageFilterIRGBUC2IRGBUC2IRGBUC2)

def itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3_New():
    return itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3.New()

class itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIRGBUC3IRGBUC3IRGBUC3):
    r"""Proxy of C++ itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3

        Create a new object of the class itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3_swigregister(itkAddImageFilterIRGBUC3IRGBUC3IRGBUC3)

def itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4_New():
    return itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4.New()

class itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIRGBUC4IRGBUC4IRGBUC4):
    r"""Proxy of C++ itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4

        Create a new object of the class itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4_swigregister(itkAddImageFilterIRGBUC4IRGBUC4IRGBUC4)

def itkAddImageFilterISS2ISS2ISS2_New():
    return itkAddImageFilterISS2ISS2ISS2.New()

class itkAddImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""Proxy of C++ itkAddImageFilterISS2ISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterISS2ISS2ISS2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterISS2ISS2ISS2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterISS2ISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterISS2ISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterISS2ISS2ISS2

        Create a new object of the class itkAddImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterISS2ISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterISS2ISS2ISS2 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_swigregister(itkAddImageFilterISS2ISS2ISS2)

def itkAddImageFilterISS3ISS3ISS3_New():
    return itkAddImageFilterISS3ISS3ISS3.New()

class itkAddImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""Proxy of C++ itkAddImageFilterISS3ISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterISS3ISS3ISS3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterISS3ISS3ISS3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterISS3ISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterISS3ISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterISS3ISS3ISS3

        Create a new object of the class itkAddImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterISS3ISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterISS3ISS3ISS3 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_swigregister(itkAddImageFilterISS3ISS3ISS3)

def itkAddImageFilterISS4ISS4ISS4_New():
    return itkAddImageFilterISS4ISS4ISS4.New()

class itkAddImageFilterISS4ISS4ISS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS4ISS4ISS4):
    r"""Proxy of C++ itkAddImageFilterISS4ISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterISS4ISS4ISS4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterISS4ISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterISS4ISS4ISS4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterISS4ISS4ISS4_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterISS4ISS4ISS4_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterISS4ISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterISS4ISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterISS4ISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterISS4ISS4ISS4

        Create a new object of the class itkAddImageFilterISS4ISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterISS4ISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterISS4ISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterISS4ISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterISS4ISS4ISS4 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterISS4ISS4ISS4_swigregister(itkAddImageFilterISS4ISS4ISS4)

def itkAddImageFilterIUC2IUC2IUC2_New():
    return itkAddImageFilterIUC2IUC2IUC2.New()

class itkAddImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""Proxy of C++ itkAddImageFilterIUC2IUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUC2IUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIUC2IUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUC2IUC2IUC2

        Create a new object of the class itkAddImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIUC2IUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIUC2IUC2IUC2 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_swigregister(itkAddImageFilterIUC2IUC2IUC2)

def itkAddImageFilterIUC3IUC3IUC3_New():
    return itkAddImageFilterIUC3IUC3IUC3.New()

class itkAddImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""Proxy of C++ itkAddImageFilterIUC3IUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUC3IUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIUC3IUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUC3IUC3IUC3

        Create a new object of the class itkAddImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIUC3IUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIUC3IUC3IUC3 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_swigregister(itkAddImageFilterIUC3IUC3IUC3)

def itkAddImageFilterIUC4IUC4IUC4_New():
    return itkAddImageFilterIUC4IUC4IUC4.New()

class itkAddImageFilterIUC4IUC4IUC4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC4IUC4IUC4):
    r"""Proxy of C++ itkAddImageFilterIUC4IUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUC4IUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUC4IUC4IUC4_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUC4IUC4IUC4_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUC4IUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIUC4IUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIUC4IUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUC4IUC4IUC4

        Create a new object of the class itkAddImageFilterIUC4IUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUC4IUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUC4IUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIUC4IUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIUC4IUC4IUC4 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIUC4IUC4IUC4_swigregister(itkAddImageFilterIUC4IUC4IUC4)

def itkAddImageFilterIUS2IUS2IUS2_New():
    return itkAddImageFilterIUS2IUS2IUS2.New()

class itkAddImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""Proxy of C++ itkAddImageFilterIUS2IUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUS2IUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIUS2IUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUS2IUS2IUS2

        Create a new object of the class itkAddImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIUS2IUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIUS2IUS2IUS2 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_swigregister(itkAddImageFilterIUS2IUS2IUS2)

def itkAddImageFilterIUS3IUS3IUS3_New():
    return itkAddImageFilterIUS3IUS3IUS3.New()

class itkAddImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""Proxy of C++ itkAddImageFilterIUS3IUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUS3IUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIUS3IUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUS3IUS3IUS3

        Create a new object of the class itkAddImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIUS3IUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIUS3IUS3IUS3 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_swigregister(itkAddImageFilterIUS3IUS3IUS3)

def itkAddImageFilterIUS4IUS4IUS4_New():
    return itkAddImageFilterIUS4IUS4IUS4.New()

class itkAddImageFilterIUS4IUS4IUS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS4IUS4IUS4):
    r"""Proxy of C++ itkAddImageFilterIUS4IUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAddImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUS4IUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAddImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUS4IUS4IUS4_Clone(self)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUS4IUS4IUS4_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUS4IUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAddImageFilterIUS4IUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAddImageFilterPython.itkAddImageFilterIUS4IUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUS4IUS4IUS4

        Create a new object of the class itkAddImageFilterIUS4IUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUS4IUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUS4IUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIUS4IUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIUS4IUS4IUS4 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIUS4IUS4IUS4_swigregister(itkAddImageFilterIUS4IUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def add_image_filter(*args: itkt.ImageLike,  constant1: float=..., constant2: float=..., constant: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for AddImageFilter"""
    import itk

    kwarg_typehints = { 'constant1':constant1,'constant2':constant2,'constant':constant }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.AddImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def add_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.AddImageFilter
    add_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    add_image_filter.__doc__ = filter_object.__doc__



