# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDisplacementFieldPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTimeVaryingVelocityFieldTransformPython
else:
    import _itkTimeVaryingVelocityFieldTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkVelocityFieldTransformPython
import itk.itkOptimizerParametersPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkArrayPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkDisplacementFieldTransformPython
import itk.itkVectorImagePython

def itkTimeVaryingVelocityFieldTransformD2_New():
    return itkTimeVaryingVelocityFieldTransformD2.New()

class itkTimeVaryingVelocityFieldTransformD2(itk.itkVelocityFieldTransformPython.itkVelocityFieldTransformD2):
    r"""Proxy of C++ itkTimeVaryingVelocityFieldTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTimeVaryingVelocityFieldTransformD2_Pointer"""
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTimeVaryingVelocityFieldTransformD2_Pointer"""
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD2_Clone(self)

    def GetModifiableTimeVaryingVelocityField(self):
        r"""GetModifiableTimeVaryingVelocityField(self) -> itkImageVD23"""
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD2_GetModifiableTimeVaryingVelocityField(self)

    def GetTimeVaryingVelocityField(self):
        r"""GetTimeVaryingVelocityField(self) -> itkImageVD23"""
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD2_GetTimeVaryingVelocityField(self)

    def SetTimeVaryingVelocityField(self, field):
        r"""
        SetTimeVaryingVelocityField(self, field)

        Parameters
        ----------
        field: itkImageVD23 *

        """
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD2_SetTimeVaryingVelocityField(self, field)
    __swig_destroy__ = _itkTimeVaryingVelocityFieldTransformPython.delete_itkTimeVaryingVelocityFieldTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTimeVaryingVelocityFieldTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTimeVaryingVelocityFieldTransformD2

        Create a new object of the class itkTimeVaryingVelocityFieldTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeVaryingVelocityFieldTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeVaryingVelocityFieldTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeVaryingVelocityFieldTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeVaryingVelocityFieldTransformD2 in _itkTimeVaryingVelocityFieldTransformPython:
_itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD2_swigregister(itkTimeVaryingVelocityFieldTransformD2)

def itkTimeVaryingVelocityFieldTransformD3_New():
    return itkTimeVaryingVelocityFieldTransformD3.New()

class itkTimeVaryingVelocityFieldTransformD3(itk.itkVelocityFieldTransformPython.itkVelocityFieldTransformD3):
    r"""Proxy of C++ itkTimeVaryingVelocityFieldTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTimeVaryingVelocityFieldTransformD3_Pointer"""
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTimeVaryingVelocityFieldTransformD3_Pointer"""
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD3_Clone(self)

    def GetModifiableTimeVaryingVelocityField(self):
        r"""GetModifiableTimeVaryingVelocityField(self) -> itkImageVD34"""
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD3_GetModifiableTimeVaryingVelocityField(self)

    def GetTimeVaryingVelocityField(self):
        r"""GetTimeVaryingVelocityField(self) -> itkImageVD34"""
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD3_GetTimeVaryingVelocityField(self)

    def SetTimeVaryingVelocityField(self, field):
        r"""
        SetTimeVaryingVelocityField(self, field)

        Parameters
        ----------
        field: itkImageVD34 *

        """
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD3_SetTimeVaryingVelocityField(self, field)
    __swig_destroy__ = _itkTimeVaryingVelocityFieldTransformPython.delete_itkTimeVaryingVelocityFieldTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTimeVaryingVelocityFieldTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTimeVaryingVelocityFieldTransformD3

        Create a new object of the class itkTimeVaryingVelocityFieldTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeVaryingVelocityFieldTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeVaryingVelocityFieldTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeVaryingVelocityFieldTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeVaryingVelocityFieldTransformD3 in _itkTimeVaryingVelocityFieldTransformPython:
_itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD3_swigregister(itkTimeVaryingVelocityFieldTransformD3)

def itkTimeVaryingVelocityFieldTransformD4_New():
    return itkTimeVaryingVelocityFieldTransformD4.New()

class itkTimeVaryingVelocityFieldTransformD4(itk.itkVelocityFieldTransformPython.itkVelocityFieldTransformD4):
    r"""Proxy of C++ itkTimeVaryingVelocityFieldTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTimeVaryingVelocityFieldTransformD4_Pointer"""
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTimeVaryingVelocityFieldTransformD4_Pointer"""
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD4_Clone(self)

    def GetModifiableTimeVaryingVelocityField(self):
        r"""GetModifiableTimeVaryingVelocityField(self) -> itkImageVD45"""
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD4_GetModifiableTimeVaryingVelocityField(self)

    def GetTimeVaryingVelocityField(self):
        r"""GetTimeVaryingVelocityField(self) -> itkImageVD45"""
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD4_GetTimeVaryingVelocityField(self)

    def SetTimeVaryingVelocityField(self, field):
        r"""
        SetTimeVaryingVelocityField(self, field)

        Parameters
        ----------
        field: itkImageVD45 *

        """
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD4_SetTimeVaryingVelocityField(self, field)
    __swig_destroy__ = _itkTimeVaryingVelocityFieldTransformPython.delete_itkTimeVaryingVelocityFieldTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTimeVaryingVelocityFieldTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTimeVaryingVelocityFieldTransformD4

        Create a new object of the class itkTimeVaryingVelocityFieldTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeVaryingVelocityFieldTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeVaryingVelocityFieldTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeVaryingVelocityFieldTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeVaryingVelocityFieldTransformD4 in _itkTimeVaryingVelocityFieldTransformPython:
_itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD4_swigregister(itkTimeVaryingVelocityFieldTransformD4)

