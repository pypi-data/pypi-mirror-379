# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMultiplyImageFilterPython
else:
    import _itkMultiplyImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkBinaryGeneratorImageFilterPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkMultiplyImageFilterICD2ICD2ICD2_New():
    return itkMultiplyImageFilterICD2ICD2ICD2.New()

class itkMultiplyImageFilterICD2ICD2ICD2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICD2ICD2ICD2):
    r"""Proxy of C++ itkMultiplyImageFilterICD2ICD2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterICD2ICD2ICD2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD2ICD2ICD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterICD2ICD2ICD2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD2ICD2ICD2_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD2ICD2ICD2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICD2ICD2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterICD2ICD2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD2ICD2ICD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICD2ICD2ICD2

        Create a new object of the class itkMultiplyImageFilterICD2ICD2ICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICD2ICD2ICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICD2ICD2ICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICD2ICD2ICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICD2ICD2ICD2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICD2ICD2ICD2_swigregister(itkMultiplyImageFilterICD2ICD2ICD2)

def itkMultiplyImageFilterICD2ID2ICD2_New():
    return itkMultiplyImageFilterICD2ID2ICD2.New()

class itkMultiplyImageFilterICD2ID2ICD2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICD2ID2ICD2):
    r"""Proxy of C++ itkMultiplyImageFilterICD2ID2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterICD2ID2ICD2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD2ID2ICD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterICD2ID2ICD2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD2ID2ICD2_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD2ID2ICD2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICD2ID2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterICD2ID2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD2ID2ICD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICD2ID2ICD2

        Create a new object of the class itkMultiplyImageFilterICD2ID2ICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICD2ID2ICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICD2ID2ICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICD2ID2ICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICD2ID2ICD2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICD2ID2ICD2_swigregister(itkMultiplyImageFilterICD2ID2ICD2)

def itkMultiplyImageFilterICD3ICD3ICD3_New():
    return itkMultiplyImageFilterICD3ICD3ICD3.New()

class itkMultiplyImageFilterICD3ICD3ICD3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICD3ICD3ICD3):
    r"""Proxy of C++ itkMultiplyImageFilterICD3ICD3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterICD3ICD3ICD3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD3ICD3ICD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterICD3ICD3ICD3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD3ICD3ICD3_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD3ICD3ICD3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICD3ICD3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterICD3ICD3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD3ICD3ICD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICD3ICD3ICD3

        Create a new object of the class itkMultiplyImageFilterICD3ICD3ICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICD3ICD3ICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICD3ICD3ICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICD3ICD3ICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICD3ICD3ICD3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICD3ICD3ICD3_swigregister(itkMultiplyImageFilterICD3ICD3ICD3)

def itkMultiplyImageFilterICD3ID3ICD3_New():
    return itkMultiplyImageFilterICD3ID3ICD3.New()

class itkMultiplyImageFilterICD3ID3ICD3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICD3ID3ICD3):
    r"""Proxy of C++ itkMultiplyImageFilterICD3ID3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterICD3ID3ICD3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD3ID3ICD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterICD3ID3ICD3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD3ID3ICD3_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD3ID3ICD3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICD3ID3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterICD3ID3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD3ID3ICD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICD3ID3ICD3

        Create a new object of the class itkMultiplyImageFilterICD3ID3ICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICD3ID3ICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICD3ID3ICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICD3ID3ICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICD3ID3ICD3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICD3ID3ICD3_swigregister(itkMultiplyImageFilterICD3ID3ICD3)

def itkMultiplyImageFilterICD4ICD4ICD4_New():
    return itkMultiplyImageFilterICD4ICD4ICD4.New()

class itkMultiplyImageFilterICD4ICD4ICD4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICD4ICD4ICD4):
    r"""Proxy of C++ itkMultiplyImageFilterICD4ICD4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterICD4ICD4ICD4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD4ICD4ICD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterICD4ICD4ICD4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD4ICD4ICD4_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD4ICD4ICD4_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICD4ICD4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterICD4ICD4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD4ICD4ICD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICD4ICD4ICD4

        Create a new object of the class itkMultiplyImageFilterICD4ICD4ICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICD4ICD4ICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICD4ICD4ICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICD4ICD4ICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICD4ICD4ICD4 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICD4ICD4ICD4_swigregister(itkMultiplyImageFilterICD4ICD4ICD4)

def itkMultiplyImageFilterICD4ID4ICD4_New():
    return itkMultiplyImageFilterICD4ID4ICD4.New()

class itkMultiplyImageFilterICD4ID4ICD4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICD4ID4ICD4):
    r"""Proxy of C++ itkMultiplyImageFilterICD4ID4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterICD4ID4ICD4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD4ID4ICD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterICD4ID4ICD4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD4ID4ICD4_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD4ID4ICD4_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICD4ID4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterICD4ID4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICD4ID4ICD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICD4ID4ICD4

        Create a new object of the class itkMultiplyImageFilterICD4ID4ICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICD4ID4ICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICD4ID4ICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICD4ID4ICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICD4ID4ICD4 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICD4ID4ICD4_swigregister(itkMultiplyImageFilterICD4ID4ICD4)

def itkMultiplyImageFilterICF2ICF2ICF2_New():
    return itkMultiplyImageFilterICF2ICF2ICF2.New()

class itkMultiplyImageFilterICF2ICF2ICF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF2ICF2ICF2):
    r"""Proxy of C++ itkMultiplyImageFilterICF2ICF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterICF2ICF2ICF2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterICF2ICF2ICF2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF2ICF2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterICF2ICF2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF2ICF2ICF2

        Create a new object of the class itkMultiplyImageFilterICF2ICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF2ICF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF2ICF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICF2ICF2ICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICF2ICF2ICF2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_swigregister(itkMultiplyImageFilterICF2ICF2ICF2)

def itkMultiplyImageFilterICF2IF2ICF2_New():
    return itkMultiplyImageFilterICF2IF2ICF2.New()

class itkMultiplyImageFilterICF2IF2ICF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF2IF2ICF2):
    r"""Proxy of C++ itkMultiplyImageFilterICF2IF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterICF2IF2ICF2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterICF2IF2ICF2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF2IF2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterICF2IF2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF2IF2ICF2

        Create a new object of the class itkMultiplyImageFilterICF2IF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF2IF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF2IF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICF2IF2ICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICF2IF2ICF2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_swigregister(itkMultiplyImageFilterICF2IF2ICF2)

def itkMultiplyImageFilterICF3ICF3ICF3_New():
    return itkMultiplyImageFilterICF3ICF3ICF3.New()

class itkMultiplyImageFilterICF3ICF3ICF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF3ICF3ICF3):
    r"""Proxy of C++ itkMultiplyImageFilterICF3ICF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterICF3ICF3ICF3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterICF3ICF3ICF3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF3ICF3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterICF3ICF3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF3ICF3ICF3

        Create a new object of the class itkMultiplyImageFilterICF3ICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF3ICF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF3ICF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICF3ICF3ICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICF3ICF3ICF3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_swigregister(itkMultiplyImageFilterICF3ICF3ICF3)

def itkMultiplyImageFilterICF3IF3ICF3_New():
    return itkMultiplyImageFilterICF3IF3ICF3.New()

class itkMultiplyImageFilterICF3IF3ICF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF3IF3ICF3):
    r"""Proxy of C++ itkMultiplyImageFilterICF3IF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterICF3IF3ICF3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterICF3IF3ICF3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF3IF3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterICF3IF3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF3IF3ICF3

        Create a new object of the class itkMultiplyImageFilterICF3IF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF3IF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF3IF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICF3IF3ICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICF3IF3ICF3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_swigregister(itkMultiplyImageFilterICF3IF3ICF3)

def itkMultiplyImageFilterICF4ICF4ICF4_New():
    return itkMultiplyImageFilterICF4ICF4ICF4.New()

class itkMultiplyImageFilterICF4ICF4ICF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF4ICF4ICF4):
    r"""Proxy of C++ itkMultiplyImageFilterICF4ICF4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterICF4ICF4ICF4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF4ICF4ICF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterICF4ICF4ICF4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF4ICF4ICF4_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF4ICF4ICF4_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF4ICF4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterICF4ICF4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF4ICF4ICF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF4ICF4ICF4

        Create a new object of the class itkMultiplyImageFilterICF4ICF4ICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF4ICF4ICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF4ICF4ICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICF4ICF4ICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICF4ICF4ICF4 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF4ICF4ICF4_swigregister(itkMultiplyImageFilterICF4ICF4ICF4)

def itkMultiplyImageFilterICF4IF4ICF4_New():
    return itkMultiplyImageFilterICF4IF4ICF4.New()

class itkMultiplyImageFilterICF4IF4ICF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF4IF4ICF4):
    r"""Proxy of C++ itkMultiplyImageFilterICF4IF4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterICF4IF4ICF4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF4IF4ICF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterICF4IF4ICF4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF4IF4ICF4_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF4IF4ICF4_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF4IF4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterICF4IF4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF4IF4ICF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF4IF4ICF4

        Create a new object of the class itkMultiplyImageFilterICF4IF4ICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF4IF4ICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF4IF4ICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICF4IF4ICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICF4IF4ICF4 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF4IF4ICF4_swigregister(itkMultiplyImageFilterICF4IF4ICF4)

def itkMultiplyImageFilterID2ID2ID2_New():
    return itkMultiplyImageFilterID2ID2ID2.New()

class itkMultiplyImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""Proxy of C++ itkMultiplyImageFilterID2ID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterID2ID2ID2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterID2ID2ID2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterID2ID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterID2ID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterID2ID2ID2

        Create a new object of the class itkMultiplyImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterID2ID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterID2ID2ID2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_swigregister(itkMultiplyImageFilterID2ID2ID2)

def itkMultiplyImageFilterID3ID3ID3_New():
    return itkMultiplyImageFilterID3ID3ID3.New()

class itkMultiplyImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""Proxy of C++ itkMultiplyImageFilterID3ID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterID3ID3ID3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterID3ID3ID3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterID3ID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterID3ID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterID3ID3ID3

        Create a new object of the class itkMultiplyImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterID3ID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterID3ID3ID3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_swigregister(itkMultiplyImageFilterID3ID3ID3)

def itkMultiplyImageFilterID4ID4ID4_New():
    return itkMultiplyImageFilterID4ID4ID4.New()

class itkMultiplyImageFilterID4ID4ID4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID4ID4ID4):
    r"""Proxy of C++ itkMultiplyImageFilterID4ID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterID4ID4ID4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID4ID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterID4ID4ID4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID4ID4ID4_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterID4ID4ID4_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterID4ID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterID4ID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID4ID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterID4ID4ID4

        Create a new object of the class itkMultiplyImageFilterID4ID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterID4ID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterID4ID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterID4ID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterID4ID4ID4 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterID4ID4ID4_swigregister(itkMultiplyImageFilterID4ID4ID4)

def itkMultiplyImageFilterIF2IF2IF2_New():
    return itkMultiplyImageFilterIF2IF2IF2.New()

class itkMultiplyImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""Proxy of C++ itkMultiplyImageFilterIF2IF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterIF2IF2IF2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterIF2IF2IF2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIF2IF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterIF2IF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIF2IF2IF2

        Create a new object of the class itkMultiplyImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIF2IF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIF2IF2IF2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_swigregister(itkMultiplyImageFilterIF2IF2IF2)

def itkMultiplyImageFilterIF3IF3IF3_New():
    return itkMultiplyImageFilterIF3IF3IF3.New()

class itkMultiplyImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""Proxy of C++ itkMultiplyImageFilterIF3IF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterIF3IF3IF3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterIF3IF3IF3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIF3IF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterIF3IF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIF3IF3IF3

        Create a new object of the class itkMultiplyImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIF3IF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIF3IF3IF3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_swigregister(itkMultiplyImageFilterIF3IF3IF3)

def itkMultiplyImageFilterIF4IF4IF4_New():
    return itkMultiplyImageFilterIF4IF4IF4.New()

class itkMultiplyImageFilterIF4IF4IF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF4IF4IF4):
    r"""Proxy of C++ itkMultiplyImageFilterIF4IF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterIF4IF4IF4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF4IF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterIF4IF4IF4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF4IF4IF4_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF4IF4IF4_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIF4IF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterIF4IF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF4IF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIF4IF4IF4

        Create a new object of the class itkMultiplyImageFilterIF4IF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIF4IF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIF4IF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIF4IF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIF4IF4IF4 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIF4IF4IF4_swigregister(itkMultiplyImageFilterIF4IF4IF4)

def itkMultiplyImageFilterISS2ISS2ISS2_New():
    return itkMultiplyImageFilterISS2ISS2ISS2.New()

class itkMultiplyImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""Proxy of C++ itkMultiplyImageFilterISS2ISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterISS2ISS2ISS2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterISS2ISS2ISS2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterISS2ISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterISS2ISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterISS2ISS2ISS2

        Create a new object of the class itkMultiplyImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterISS2ISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterISS2ISS2ISS2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_swigregister(itkMultiplyImageFilterISS2ISS2ISS2)

def itkMultiplyImageFilterISS3ISS3ISS3_New():
    return itkMultiplyImageFilterISS3ISS3ISS3.New()

class itkMultiplyImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""Proxy of C++ itkMultiplyImageFilterISS3ISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterISS3ISS3ISS3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterISS3ISS3ISS3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterISS3ISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterISS3ISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterISS3ISS3ISS3

        Create a new object of the class itkMultiplyImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterISS3ISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterISS3ISS3ISS3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_swigregister(itkMultiplyImageFilterISS3ISS3ISS3)

def itkMultiplyImageFilterISS4ISS4ISS4_New():
    return itkMultiplyImageFilterISS4ISS4ISS4.New()

class itkMultiplyImageFilterISS4ISS4ISS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS4ISS4ISS4):
    r"""Proxy of C++ itkMultiplyImageFilterISS4ISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterISS4ISS4ISS4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS4ISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterISS4ISS4ISS4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS4ISS4ISS4_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS4ISS4ISS4_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterISS4ISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterISS4ISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS4ISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterISS4ISS4ISS4

        Create a new object of the class itkMultiplyImageFilterISS4ISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterISS4ISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterISS4ISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterISS4ISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterISS4ISS4ISS4 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterISS4ISS4ISS4_swigregister(itkMultiplyImageFilterISS4ISS4ISS4)

def itkMultiplyImageFilterIUC2IUC2IUC2_New():
    return itkMultiplyImageFilterIUC2IUC2IUC2.New()

class itkMultiplyImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""Proxy of C++ itkMultiplyImageFilterIUC2IUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUC2IUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterIUC2IUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUC2IUC2IUC2

        Create a new object of the class itkMultiplyImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIUC2IUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIUC2IUC2IUC2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_swigregister(itkMultiplyImageFilterIUC2IUC2IUC2)

def itkMultiplyImageFilterIUC3IUC3IUC3_New():
    return itkMultiplyImageFilterIUC3IUC3IUC3.New()

class itkMultiplyImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""Proxy of C++ itkMultiplyImageFilterIUC3IUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUC3IUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterIUC3IUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUC3IUC3IUC3

        Create a new object of the class itkMultiplyImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIUC3IUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIUC3IUC3IUC3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_swigregister(itkMultiplyImageFilterIUC3IUC3IUC3)

def itkMultiplyImageFilterIUC4IUC4IUC4_New():
    return itkMultiplyImageFilterIUC4IUC4IUC4.New()

class itkMultiplyImageFilterIUC4IUC4IUC4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC4IUC4IUC4):
    r"""Proxy of C++ itkMultiplyImageFilterIUC4IUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC4IUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC4IUC4IUC4_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC4IUC4IUC4_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUC4IUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterIUC4IUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC4IUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUC4IUC4IUC4

        Create a new object of the class itkMultiplyImageFilterIUC4IUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUC4IUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUC4IUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIUC4IUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIUC4IUC4IUC4 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC4IUC4IUC4_swigregister(itkMultiplyImageFilterIUC4IUC4IUC4)

def itkMultiplyImageFilterIUS2IUS2IUS2_New():
    return itkMultiplyImageFilterIUS2IUS2IUS2.New()

class itkMultiplyImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""Proxy of C++ itkMultiplyImageFilterIUS2IUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUS2IUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterIUS2IUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUS2IUS2IUS2

        Create a new object of the class itkMultiplyImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIUS2IUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIUS2IUS2IUS2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_swigregister(itkMultiplyImageFilterIUS2IUS2IUS2)

def itkMultiplyImageFilterIUS3IUS3IUS3_New():
    return itkMultiplyImageFilterIUS3IUS3IUS3.New()

class itkMultiplyImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""Proxy of C++ itkMultiplyImageFilterIUS3IUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUS3IUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterIUS3IUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUS3IUS3IUS3

        Create a new object of the class itkMultiplyImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIUS3IUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIUS3IUS3IUS3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_swigregister(itkMultiplyImageFilterIUS3IUS3IUS3)

def itkMultiplyImageFilterIUS4IUS4IUS4_New():
    return itkMultiplyImageFilterIUS4IUS4IUS4.New()

class itkMultiplyImageFilterIUS4IUS4IUS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS4IUS4IUS4):
    r"""Proxy of C++ itkMultiplyImageFilterIUS4IUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiplyImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS4IUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiplyImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS4IUS4IUS4_Clone(self)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS4IUS4IUS4_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUS4IUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiplyImageFilterIUS4IUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS4IUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUS4IUS4IUS4

        Create a new object of the class itkMultiplyImageFilterIUS4IUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUS4IUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUS4IUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIUS4IUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIUS4IUS4IUS4 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS4IUS4IUS4_swigregister(itkMultiplyImageFilterIUS4IUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def multiply_image_filter(*args: itkt.ImageLike,  constant1: float=..., constant2: float=..., constant: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for MultiplyImageFilter"""
    import itk

    kwarg_typehints = { 'constant1':constant1,'constant2':constant2,'constant':constant }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MultiplyImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def multiply_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.MultiplyImageFilter
    multiply_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    multiply_image_filter.__doc__ = filter_object.__doc__



