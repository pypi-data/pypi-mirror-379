# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBinaryMagnitudeImageFilterPython
else:
    import _itkBinaryMagnitudeImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkBinaryGeneratorImageFilterPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkBinaryMagnitudeImageFilterID2ID2ID2_New():
    return itkBinaryMagnitudeImageFilterID2ID2ID2.New()

class itkBinaryMagnitudeImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterID2ID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterID2ID2ID2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterID2ID2ID2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterID2ID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterID2ID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterID2ID2ID2

        Create a new object of the class itkBinaryMagnitudeImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterID2ID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterID2ID2ID2 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_swigregister(itkBinaryMagnitudeImageFilterID2ID2ID2)

def itkBinaryMagnitudeImageFilterID3ID3ID3_New():
    return itkBinaryMagnitudeImageFilterID3ID3ID3.New()

class itkBinaryMagnitudeImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterID3ID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterID3ID3ID3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterID3ID3ID3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterID3ID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterID3ID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterID3ID3ID3

        Create a new object of the class itkBinaryMagnitudeImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterID3ID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterID3ID3ID3 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_swigregister(itkBinaryMagnitudeImageFilterID3ID3ID3)

def itkBinaryMagnitudeImageFilterID4ID4ID4_New():
    return itkBinaryMagnitudeImageFilterID4ID4ID4.New()

class itkBinaryMagnitudeImageFilterID4ID4ID4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID4ID4ID4):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterID4ID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterID4ID4ID4_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID4ID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterID4ID4ID4_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID4ID4ID4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID4ID4ID4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID4ID4ID4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID4ID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterID4ID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterID4ID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID4ID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterID4ID4ID4

        Create a new object of the class itkBinaryMagnitudeImageFilterID4ID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterID4ID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterID4ID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterID4ID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterID4ID4ID4 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID4ID4ID4_swigregister(itkBinaryMagnitudeImageFilterID4ID4ID4)

def itkBinaryMagnitudeImageFilterIF2IF2IF2_New():
    return itkBinaryMagnitudeImageFilterIF2IF2IF2.New()

class itkBinaryMagnitudeImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterIF2IF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterIF2IF2IF2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterIF2IF2IF2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIF2IF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterIF2IF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIF2IF2IF2

        Create a new object of the class itkBinaryMagnitudeImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterIF2IF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterIF2IF2IF2 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_swigregister(itkBinaryMagnitudeImageFilterIF2IF2IF2)

def itkBinaryMagnitudeImageFilterIF3IF3IF3_New():
    return itkBinaryMagnitudeImageFilterIF3IF3IF3.New()

class itkBinaryMagnitudeImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterIF3IF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterIF3IF3IF3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterIF3IF3IF3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIF3IF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterIF3IF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIF3IF3IF3

        Create a new object of the class itkBinaryMagnitudeImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterIF3IF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterIF3IF3IF3 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_swigregister(itkBinaryMagnitudeImageFilterIF3IF3IF3)

def itkBinaryMagnitudeImageFilterIF4IF4IF4_New():
    return itkBinaryMagnitudeImageFilterIF4IF4IF4.New()

class itkBinaryMagnitudeImageFilterIF4IF4IF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF4IF4IF4):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterIF4IF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterIF4IF4IF4_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF4IF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterIF4IF4IF4_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF4IF4IF4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF4IF4IF4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF4IF4IF4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF4IF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIF4IF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterIF4IF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF4IF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIF4IF4IF4

        Create a new object of the class itkBinaryMagnitudeImageFilterIF4IF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIF4IF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIF4IF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterIF4IF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterIF4IF4IF4 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF4IF4IF4_swigregister(itkBinaryMagnitudeImageFilterIF4IF4IF4)

def itkBinaryMagnitudeImageFilterISS2ISS2ISS2_New():
    return itkBinaryMagnitudeImageFilterISS2ISS2ISS2.New()

class itkBinaryMagnitudeImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterISS2ISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterISS2ISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterISS2ISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterISS2ISS2ISS2

        Create a new object of the class itkBinaryMagnitudeImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterISS2ISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterISS2ISS2ISS2 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_swigregister(itkBinaryMagnitudeImageFilterISS2ISS2ISS2)

def itkBinaryMagnitudeImageFilterISS3ISS3ISS3_New():
    return itkBinaryMagnitudeImageFilterISS3ISS3ISS3.New()

class itkBinaryMagnitudeImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterISS3ISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterISS3ISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterISS3ISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterISS3ISS3ISS3

        Create a new object of the class itkBinaryMagnitudeImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterISS3ISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterISS3ISS3ISS3 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_swigregister(itkBinaryMagnitudeImageFilterISS3ISS3ISS3)

def itkBinaryMagnitudeImageFilterISS4ISS4ISS4_New():
    return itkBinaryMagnitudeImageFilterISS4ISS4ISS4.New()

class itkBinaryMagnitudeImageFilterISS4ISS4ISS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS4ISS4ISS4):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterISS4ISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterISS4ISS4ISS4_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS4ISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterISS4ISS4ISS4_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS4ISS4ISS4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS4ISS4ISS4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS4ISS4ISS4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS4ISS4ISS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterISS4ISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterISS4ISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS4ISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterISS4ISS4ISS4

        Create a new object of the class itkBinaryMagnitudeImageFilterISS4ISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterISS4ISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterISS4ISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterISS4ISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterISS4ISS4ISS4 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS4ISS4ISS4_swigregister(itkBinaryMagnitudeImageFilterISS4ISS4ISS4)

def itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_New():
    return itkBinaryMagnitudeImageFilterIUC2IUC2IUC2.New()

class itkBinaryMagnitudeImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterIUC2IUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIUC2IUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterIUC2IUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIUC2IUC2IUC2

        Create a new object of the class itkBinaryMagnitudeImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterIUC2IUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterIUC2IUC2IUC2 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_swigregister(itkBinaryMagnitudeImageFilterIUC2IUC2IUC2)

def itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_New():
    return itkBinaryMagnitudeImageFilterIUC3IUC3IUC3.New()

class itkBinaryMagnitudeImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterIUC3IUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIUC3IUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterIUC3IUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIUC3IUC3IUC3

        Create a new object of the class itkBinaryMagnitudeImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterIUC3IUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterIUC3IUC3IUC3 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_swigregister(itkBinaryMagnitudeImageFilterIUC3IUC3IUC3)

def itkBinaryMagnitudeImageFilterIUC4IUC4IUC4_New():
    return itkBinaryMagnitudeImageFilterIUC4IUC4IUC4.New()

class itkBinaryMagnitudeImageFilterIUC4IUC4IUC4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC4IUC4IUC4):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterIUC4IUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC4IUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC4IUC4IUC4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC4IUC4IUC4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC4IUC4IUC4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC4IUC4IUC4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIUC4IUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterIUC4IUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC4IUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIUC4IUC4IUC4

        Create a new object of the class itkBinaryMagnitudeImageFilterIUC4IUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIUC4IUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIUC4IUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterIUC4IUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterIUC4IUC4IUC4 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC4IUC4IUC4_swigregister(itkBinaryMagnitudeImageFilterIUC4IUC4IUC4)

def itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_New():
    return itkBinaryMagnitudeImageFilterIUS2IUS2IUS2.New()

class itkBinaryMagnitudeImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterIUS2IUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIUS2IUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterIUS2IUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIUS2IUS2IUS2

        Create a new object of the class itkBinaryMagnitudeImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterIUS2IUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterIUS2IUS2IUS2 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_swigregister(itkBinaryMagnitudeImageFilterIUS2IUS2IUS2)

def itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_New():
    return itkBinaryMagnitudeImageFilterIUS3IUS3IUS3.New()

class itkBinaryMagnitudeImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterIUS3IUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIUS3IUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterIUS3IUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIUS3IUS3IUS3

        Create a new object of the class itkBinaryMagnitudeImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterIUS3IUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterIUS3IUS3IUS3 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_swigregister(itkBinaryMagnitudeImageFilterIUS3IUS3IUS3)

def itkBinaryMagnitudeImageFilterIUS4IUS4IUS4_New():
    return itkBinaryMagnitudeImageFilterIUS4IUS4IUS4.New()

class itkBinaryMagnitudeImageFilterIUS4IUS4IUS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS4IUS4IUS4):
    r"""Proxy of C++ itkBinaryMagnitudeImageFilterIUS4IUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryMagnitudeImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS4IUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryMagnitudeImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS4IUS4IUS4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS4IUS4IUS4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS4IUS4IUS4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS4IUS4IUS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIUS4IUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryMagnitudeImageFilterIUS4IUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS4IUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIUS4IUS4IUS4

        Create a new object of the class itkBinaryMagnitudeImageFilterIUS4IUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIUS4IUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIUS4IUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMagnitudeImageFilterIUS4IUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMagnitudeImageFilterIUS4IUS4IUS4 in _itkBinaryMagnitudeImageFilterPython:
_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS4IUS4IUS4_swigregister(itkBinaryMagnitudeImageFilterIUS4IUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def binary_magnitude_image_filter(*args: itkt.ImageLike,  constant1: int=..., constant2: int=..., constant: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for BinaryMagnitudeImageFilter"""
    import itk

    kwarg_typehints = { 'constant1':constant1,'constant2':constant2,'constant':constant }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.BinaryMagnitudeImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def binary_magnitude_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.BinaryMagnitudeImageFilter
    binary_magnitude_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    binary_magnitude_image_filter.__doc__ = filter_object.__doc__



