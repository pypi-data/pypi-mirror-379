# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDisplacementFieldPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython
else:
    import _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArrayPython
import itk.itkDisplacementFieldTransformPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkVariableLengthVectorPython
import itk.itkVectorImagePython
import itk.itkDiffusionTensor3DPython
import itk.itkTransformBasePython

def itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_New():
    return itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2.New()

class itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2):
    r"""Proxy of C++ itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_Pointer"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_Pointer"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_Clone(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_UpdateTransformParameters(self, update, factor)

    def SetSplineOrder(self, _arg):
        r"""
        SetSplineOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_SetSplineOrder(self, _arg)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_GetSplineOrder(self)

    def SetNumberOfControlPointsForTheUpdateField(self, _arg):
        r"""
        SetNumberOfControlPointsForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayUI2

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_SetNumberOfControlPointsForTheUpdateField(self, _arg)

    def GetNumberOfControlPointsForTheUpdateField(self):
        r"""GetNumberOfControlPointsForTheUpdateField(self) -> itkFixedArrayUI2"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_GetNumberOfControlPointsForTheUpdateField(self)

    def SetMeshSizeForTheUpdateField(self, arg0):
        r"""
        SetMeshSizeForTheUpdateField(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayUI2 const &

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_SetMeshSizeForTheUpdateField(self, arg0)

    def SetNumberOfControlPointsForTheTotalField(self, _arg):
        r"""
        SetNumberOfControlPointsForTheTotalField(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayUI2

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_SetNumberOfControlPointsForTheTotalField(self, _arg)

    def GetNumberOfControlPointsForTheTotalField(self):
        r"""GetNumberOfControlPointsForTheTotalField(self) -> itkFixedArrayUI2"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_GetNumberOfControlPointsForTheTotalField(self)

    def SetMeshSizeForTheTotalField(self, arg0):
        r"""
        SetMeshSizeForTheTotalField(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayUI2 const &

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_SetMeshSizeForTheTotalField(self, arg0)

    def EnforceStationaryBoundaryOn(self):
        r"""EnforceStationaryBoundaryOn(self)"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_EnforceStationaryBoundaryOn(self)

    def EnforceStationaryBoundaryOff(self):
        r"""EnforceStationaryBoundaryOff(self)"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_EnforceStationaryBoundaryOff(self)

    def SetEnforceStationaryBoundary(self, _arg):
        r"""
        SetEnforceStationaryBoundary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_SetEnforceStationaryBoundary(self, _arg)

    def GetEnforceStationaryBoundary(self):
        r"""GetEnforceStationaryBoundary(self) -> bool"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_GetEnforceStationaryBoundary(self)
    __swig_destroy__ = _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.delete_itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2

        Create a new object of the class itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2 in _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython:
_itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2_swigregister(itkBSplineSmoothingOnUpdateDisplacementFieldTransformD2)

def itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_New():
    return itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3.New()

class itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3):
    r"""Proxy of C++ itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_Pointer"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_Pointer"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_Clone(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_UpdateTransformParameters(self, update, factor)

    def SetSplineOrder(self, _arg):
        r"""
        SetSplineOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_SetSplineOrder(self, _arg)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_GetSplineOrder(self)

    def SetNumberOfControlPointsForTheUpdateField(self, _arg):
        r"""
        SetNumberOfControlPointsForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayUI3

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_SetNumberOfControlPointsForTheUpdateField(self, _arg)

    def GetNumberOfControlPointsForTheUpdateField(self):
        r"""GetNumberOfControlPointsForTheUpdateField(self) -> itkFixedArrayUI3"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_GetNumberOfControlPointsForTheUpdateField(self)

    def SetMeshSizeForTheUpdateField(self, arg0):
        r"""
        SetMeshSizeForTheUpdateField(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayUI3 const &

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_SetMeshSizeForTheUpdateField(self, arg0)

    def SetNumberOfControlPointsForTheTotalField(self, _arg):
        r"""
        SetNumberOfControlPointsForTheTotalField(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayUI3

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_SetNumberOfControlPointsForTheTotalField(self, _arg)

    def GetNumberOfControlPointsForTheTotalField(self):
        r"""GetNumberOfControlPointsForTheTotalField(self) -> itkFixedArrayUI3"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_GetNumberOfControlPointsForTheTotalField(self)

    def SetMeshSizeForTheTotalField(self, arg0):
        r"""
        SetMeshSizeForTheTotalField(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayUI3 const &

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_SetMeshSizeForTheTotalField(self, arg0)

    def EnforceStationaryBoundaryOn(self):
        r"""EnforceStationaryBoundaryOn(self)"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_EnforceStationaryBoundaryOn(self)

    def EnforceStationaryBoundaryOff(self):
        r"""EnforceStationaryBoundaryOff(self)"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_EnforceStationaryBoundaryOff(self)

    def SetEnforceStationaryBoundary(self, _arg):
        r"""
        SetEnforceStationaryBoundary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_SetEnforceStationaryBoundary(self, _arg)

    def GetEnforceStationaryBoundary(self):
        r"""GetEnforceStationaryBoundary(self) -> bool"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_GetEnforceStationaryBoundary(self)
    __swig_destroy__ = _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.delete_itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3

        Create a new object of the class itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3 in _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython:
_itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3_swigregister(itkBSplineSmoothingOnUpdateDisplacementFieldTransformD3)

def itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_New():
    return itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4.New()

class itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4):
    r"""Proxy of C++ itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_Pointer"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_Pointer"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_Clone(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_UpdateTransformParameters(self, update, factor)

    def SetSplineOrder(self, _arg):
        r"""
        SetSplineOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_SetSplineOrder(self, _arg)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_GetSplineOrder(self)

    def SetNumberOfControlPointsForTheUpdateField(self, _arg):
        r"""
        SetNumberOfControlPointsForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayUI4

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_SetNumberOfControlPointsForTheUpdateField(self, _arg)

    def GetNumberOfControlPointsForTheUpdateField(self):
        r"""GetNumberOfControlPointsForTheUpdateField(self) -> itkFixedArrayUI4"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_GetNumberOfControlPointsForTheUpdateField(self)

    def SetMeshSizeForTheUpdateField(self, arg0):
        r"""
        SetMeshSizeForTheUpdateField(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayUI4 const &

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_SetMeshSizeForTheUpdateField(self, arg0)

    def SetNumberOfControlPointsForTheTotalField(self, _arg):
        r"""
        SetNumberOfControlPointsForTheTotalField(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayUI4

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_SetNumberOfControlPointsForTheTotalField(self, _arg)

    def GetNumberOfControlPointsForTheTotalField(self):
        r"""GetNumberOfControlPointsForTheTotalField(self) -> itkFixedArrayUI4"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_GetNumberOfControlPointsForTheTotalField(self)

    def SetMeshSizeForTheTotalField(self, arg0):
        r"""
        SetMeshSizeForTheTotalField(self, arg0)

        Parameters
        ----------
        arg0: itkFixedArrayUI4 const &

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_SetMeshSizeForTheTotalField(self, arg0)

    def EnforceStationaryBoundaryOn(self):
        r"""EnforceStationaryBoundaryOn(self)"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_EnforceStationaryBoundaryOn(self)

    def EnforceStationaryBoundaryOff(self):
        r"""EnforceStationaryBoundaryOff(self)"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_EnforceStationaryBoundaryOff(self)

    def SetEnforceStationaryBoundary(self, _arg):
        r"""
        SetEnforceStationaryBoundary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_SetEnforceStationaryBoundary(self, _arg)

    def GetEnforceStationaryBoundary(self):
        r"""GetEnforceStationaryBoundary(self) -> bool"""
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_GetEnforceStationaryBoundary(self)
    __swig_destroy__ = _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.delete_itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4

        Create a new object of the class itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4 in _itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython:
_itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython.itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4_swigregister(itkBSplineSmoothingOnUpdateDisplacementFieldTransformD4)

