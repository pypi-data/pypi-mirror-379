# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKThresholdingPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLiThresholdCalculatorPython
else:
    import _itkLiThresholdCalculatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkHistogramThresholdCalculatorPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkArrayPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkHistogramPython
import itk.itkSamplePython

def itkLiThresholdCalculatorHDD_New():
    return itkLiThresholdCalculatorHDD.New()

class itkLiThresholdCalculatorHDD(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDD):
    r"""Proxy of C++ itkLiThresholdCalculatorHDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLiThresholdCalculatorHDD_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLiThresholdCalculatorHDD_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDD_Clone(self)
    __swig_destroy__ = _itkLiThresholdCalculatorPython.delete_itkLiThresholdCalculatorHDD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLiThresholdCalculatorHDD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLiThresholdCalculatorHDD

        Create a new object of the class itkLiThresholdCalculatorHDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLiThresholdCalculatorHDD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLiThresholdCalculatorHDD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLiThresholdCalculatorHDD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLiThresholdCalculatorHDD in _itkLiThresholdCalculatorPython:
_itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDD_swigregister(itkLiThresholdCalculatorHDD)

def itkLiThresholdCalculatorHDF_New():
    return itkLiThresholdCalculatorHDF.New()

class itkLiThresholdCalculatorHDF(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF):
    r"""Proxy of C++ itkLiThresholdCalculatorHDF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLiThresholdCalculatorHDF_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLiThresholdCalculatorHDF_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDF_Clone(self)
    __swig_destroy__ = _itkLiThresholdCalculatorPython.delete_itkLiThresholdCalculatorHDF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLiThresholdCalculatorHDF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLiThresholdCalculatorHDF

        Create a new object of the class itkLiThresholdCalculatorHDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLiThresholdCalculatorHDF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLiThresholdCalculatorHDF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLiThresholdCalculatorHDF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLiThresholdCalculatorHDF in _itkLiThresholdCalculatorPython:
_itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDF_swigregister(itkLiThresholdCalculatorHDF)

def itkLiThresholdCalculatorHDSS_New():
    return itkLiThresholdCalculatorHDSS.New()

class itkLiThresholdCalculatorHDSS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS):
    r"""Proxy of C++ itkLiThresholdCalculatorHDSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLiThresholdCalculatorHDSS_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLiThresholdCalculatorHDSS_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDSS_Clone(self)
    __swig_destroy__ = _itkLiThresholdCalculatorPython.delete_itkLiThresholdCalculatorHDSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLiThresholdCalculatorHDSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLiThresholdCalculatorHDSS

        Create a new object of the class itkLiThresholdCalculatorHDSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLiThresholdCalculatorHDSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLiThresholdCalculatorHDSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLiThresholdCalculatorHDSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLiThresholdCalculatorHDSS in _itkLiThresholdCalculatorPython:
_itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDSS_swigregister(itkLiThresholdCalculatorHDSS)

def itkLiThresholdCalculatorHDUC_New():
    return itkLiThresholdCalculatorHDUC.New()

class itkLiThresholdCalculatorHDUC(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC):
    r"""Proxy of C++ itkLiThresholdCalculatorHDUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLiThresholdCalculatorHDUC_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLiThresholdCalculatorHDUC_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDUC_Clone(self)
    __swig_destroy__ = _itkLiThresholdCalculatorPython.delete_itkLiThresholdCalculatorHDUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLiThresholdCalculatorHDUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLiThresholdCalculatorHDUC

        Create a new object of the class itkLiThresholdCalculatorHDUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLiThresholdCalculatorHDUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLiThresholdCalculatorHDUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLiThresholdCalculatorHDUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLiThresholdCalculatorHDUC in _itkLiThresholdCalculatorPython:
_itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDUC_swigregister(itkLiThresholdCalculatorHDUC)

def itkLiThresholdCalculatorHDUS_New():
    return itkLiThresholdCalculatorHDUS.New()

class itkLiThresholdCalculatorHDUS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS):
    r"""Proxy of C++ itkLiThresholdCalculatorHDUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLiThresholdCalculatorHDUS_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLiThresholdCalculatorHDUS_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDUS_Clone(self)
    __swig_destroy__ = _itkLiThresholdCalculatorPython.delete_itkLiThresholdCalculatorHDUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLiThresholdCalculatorHDUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLiThresholdCalculatorHDUS

        Create a new object of the class itkLiThresholdCalculatorHDUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLiThresholdCalculatorHDUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLiThresholdCalculatorHDUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLiThresholdCalculatorHDUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLiThresholdCalculatorHDUS in _itkLiThresholdCalculatorPython:
_itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHDUS_swigregister(itkLiThresholdCalculatorHDUS)

def itkLiThresholdCalculatorHFD_New():
    return itkLiThresholdCalculatorHFD.New()

class itkLiThresholdCalculatorHFD(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFD):
    r"""Proxy of C++ itkLiThresholdCalculatorHFD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLiThresholdCalculatorHFD_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLiThresholdCalculatorHFD_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFD_Clone(self)
    __swig_destroy__ = _itkLiThresholdCalculatorPython.delete_itkLiThresholdCalculatorHFD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLiThresholdCalculatorHFD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLiThresholdCalculatorHFD

        Create a new object of the class itkLiThresholdCalculatorHFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLiThresholdCalculatorHFD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLiThresholdCalculatorHFD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLiThresholdCalculatorHFD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLiThresholdCalculatorHFD in _itkLiThresholdCalculatorPython:
_itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFD_swigregister(itkLiThresholdCalculatorHFD)

def itkLiThresholdCalculatorHFF_New():
    return itkLiThresholdCalculatorHFF.New()

class itkLiThresholdCalculatorHFF(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF):
    r"""Proxy of C++ itkLiThresholdCalculatorHFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLiThresholdCalculatorHFF_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLiThresholdCalculatorHFF_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFF_Clone(self)
    __swig_destroy__ = _itkLiThresholdCalculatorPython.delete_itkLiThresholdCalculatorHFF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLiThresholdCalculatorHFF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLiThresholdCalculatorHFF

        Create a new object of the class itkLiThresholdCalculatorHFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLiThresholdCalculatorHFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLiThresholdCalculatorHFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLiThresholdCalculatorHFF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLiThresholdCalculatorHFF in _itkLiThresholdCalculatorPython:
_itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFF_swigregister(itkLiThresholdCalculatorHFF)

def itkLiThresholdCalculatorHFSS_New():
    return itkLiThresholdCalculatorHFSS.New()

class itkLiThresholdCalculatorHFSS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS):
    r"""Proxy of C++ itkLiThresholdCalculatorHFSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLiThresholdCalculatorHFSS_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLiThresholdCalculatorHFSS_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFSS_Clone(self)
    __swig_destroy__ = _itkLiThresholdCalculatorPython.delete_itkLiThresholdCalculatorHFSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLiThresholdCalculatorHFSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLiThresholdCalculatorHFSS

        Create a new object of the class itkLiThresholdCalculatorHFSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLiThresholdCalculatorHFSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLiThresholdCalculatorHFSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLiThresholdCalculatorHFSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLiThresholdCalculatorHFSS in _itkLiThresholdCalculatorPython:
_itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFSS_swigregister(itkLiThresholdCalculatorHFSS)

def itkLiThresholdCalculatorHFUC_New():
    return itkLiThresholdCalculatorHFUC.New()

class itkLiThresholdCalculatorHFUC(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC):
    r"""Proxy of C++ itkLiThresholdCalculatorHFUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLiThresholdCalculatorHFUC_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLiThresholdCalculatorHFUC_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFUC_Clone(self)
    __swig_destroy__ = _itkLiThresholdCalculatorPython.delete_itkLiThresholdCalculatorHFUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLiThresholdCalculatorHFUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLiThresholdCalculatorHFUC

        Create a new object of the class itkLiThresholdCalculatorHFUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLiThresholdCalculatorHFUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLiThresholdCalculatorHFUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLiThresholdCalculatorHFUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLiThresholdCalculatorHFUC in _itkLiThresholdCalculatorPython:
_itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFUC_swigregister(itkLiThresholdCalculatorHFUC)

def itkLiThresholdCalculatorHFUS_New():
    return itkLiThresholdCalculatorHFUS.New()

class itkLiThresholdCalculatorHFUS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS):
    r"""Proxy of C++ itkLiThresholdCalculatorHFUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLiThresholdCalculatorHFUS_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLiThresholdCalculatorHFUS_Pointer"""
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFUS_Clone(self)
    __swig_destroy__ = _itkLiThresholdCalculatorPython.delete_itkLiThresholdCalculatorHFUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLiThresholdCalculatorHFUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLiThresholdCalculatorHFUS

        Create a new object of the class itkLiThresholdCalculatorHFUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLiThresholdCalculatorHFUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLiThresholdCalculatorHFUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLiThresholdCalculatorHFUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLiThresholdCalculatorHFUS in _itkLiThresholdCalculatorPython:
_itkLiThresholdCalculatorPython.itkLiThresholdCalculatorHFUS_swigregister(itkLiThresholdCalculatorHFUS)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def li_threshold_calculator(*args, **kwargs):
    """Functional interface for LiThresholdCalculator"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.LiThresholdCalculator.New(*args, **kwargs)

    return instance.__internal_call__()

def li_threshold_calculator_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKThresholding.LiThresholdCalculator
    li_threshold_calculator.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    li_threshold_calculator.__doc__ = filter_object.__doc__



