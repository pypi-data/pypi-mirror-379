# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageComposePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkJoinSeriesImageFilterPython
else:
    import _itkJoinSeriesImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterBPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkJoinSeriesImageFilterID2ID3_New():
    return itkJoinSeriesImageFilterID2ID3.New()

class itkJoinSeriesImageFilterID2ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ID3):
    r"""Proxy of C++ itkJoinSeriesImageFilterID2ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterID2ID3_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterID2ID3_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterID2ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterID2ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterID2ID3

        Create a new object of the class itkJoinSeriesImageFilterID2ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterID2ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterID2ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterID2ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterID2ID3 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID3_swigregister(itkJoinSeriesImageFilterID2ID3)

def itkJoinSeriesImageFilterID2ID4_New():
    return itkJoinSeriesImageFilterID2ID4.New()

class itkJoinSeriesImageFilterID2ID4(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ID4):
    r"""Proxy of C++ itkJoinSeriesImageFilterID2ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterID2ID4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterID2ID4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID4_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID4_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID4_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID4_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID4_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterID2ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterID2ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterID2ID4

        Create a new object of the class itkJoinSeriesImageFilterID2ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterID2ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterID2ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterID2ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterID2ID4 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID2ID4_swigregister(itkJoinSeriesImageFilterID2ID4)

def itkJoinSeriesImageFilterID3ID4_New():
    return itkJoinSeriesImageFilterID3ID4.New()

class itkJoinSeriesImageFilterID3ID4(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ID4):
    r"""Proxy of C++ itkJoinSeriesImageFilterID3ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterID3ID4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID3ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterID3ID4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID3ID4_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID3ID4_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID3ID4_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID3ID4_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID3ID4_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID3ID4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterID3ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterID3ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID3ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterID3ID4

        Create a new object of the class itkJoinSeriesImageFilterID3ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterID3ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterID3ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterID3ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterID3ID4 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterID3ID4_swigregister(itkJoinSeriesImageFilterID3ID4)

def itkJoinSeriesImageFilterIF2IF3_New():
    return itkJoinSeriesImageFilterIF2IF3.New()

class itkJoinSeriesImageFilterIF2IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3):
    r"""Proxy of C++ itkJoinSeriesImageFilterIF2IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterIF2IF3_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterIF2IF3_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterIF2IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterIF2IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterIF2IF3

        Create a new object of the class itkJoinSeriesImageFilterIF2IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterIF2IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterIF2IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterIF2IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterIF2IF3 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF3_swigregister(itkJoinSeriesImageFilterIF2IF3)

def itkJoinSeriesImageFilterIF2IF4_New():
    return itkJoinSeriesImageFilterIF2IF4.New()

class itkJoinSeriesImageFilterIF2IF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2IF4):
    r"""Proxy of C++ itkJoinSeriesImageFilterIF2IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterIF2IF4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterIF2IF4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF4_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF4_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF4_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF4_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF4_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterIF2IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterIF2IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterIF2IF4

        Create a new object of the class itkJoinSeriesImageFilterIF2IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterIF2IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterIF2IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterIF2IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterIF2IF4 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF2IF4_swigregister(itkJoinSeriesImageFilterIF2IF4)

def itkJoinSeriesImageFilterIF3IF4_New():
    return itkJoinSeriesImageFilterIF3IF4.New()

class itkJoinSeriesImageFilterIF3IF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3IF4):
    r"""Proxy of C++ itkJoinSeriesImageFilterIF3IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterIF3IF4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF3IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterIF3IF4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF3IF4_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF3IF4_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF3IF4_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF3IF4_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF3IF4_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF3IF4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterIF3IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterIF3IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF3IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterIF3IF4

        Create a new object of the class itkJoinSeriesImageFilterIF3IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterIF3IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterIF3IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterIF3IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterIF3IF4 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIF3IF4_swigregister(itkJoinSeriesImageFilterIF3IF4)

def itkJoinSeriesImageFilterISS2ISS3_New():
    return itkJoinSeriesImageFilterISS2ISS3.New()

class itkJoinSeriesImageFilterISS2ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3):
    r"""Proxy of C++ itkJoinSeriesImageFilterISS2ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterISS2ISS3_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterISS2ISS3_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterISS2ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterISS2ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterISS2ISS3

        Create a new object of the class itkJoinSeriesImageFilterISS2ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterISS2ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterISS2ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterISS2ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterISS2ISS3 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS3_swigregister(itkJoinSeriesImageFilterISS2ISS3)

def itkJoinSeriesImageFilterISS2ISS4_New():
    return itkJoinSeriesImageFilterISS2ISS4.New()

class itkJoinSeriesImageFilterISS2ISS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS4):
    r"""Proxy of C++ itkJoinSeriesImageFilterISS2ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterISS2ISS4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterISS2ISS4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS4_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS4_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS4_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS4_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS4_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterISS2ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterISS2ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterISS2ISS4

        Create a new object of the class itkJoinSeriesImageFilterISS2ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterISS2ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterISS2ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterISS2ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterISS2ISS4 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS2ISS4_swigregister(itkJoinSeriesImageFilterISS2ISS4)

def itkJoinSeriesImageFilterISS3ISS4_New():
    return itkJoinSeriesImageFilterISS3ISS4.New()

class itkJoinSeriesImageFilterISS3ISS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS4):
    r"""Proxy of C++ itkJoinSeriesImageFilterISS3ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterISS3ISS4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS3ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterISS3ISS4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS3ISS4_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS3ISS4_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS3ISS4_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS3ISS4_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS3ISS4_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS3ISS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterISS3ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterISS3ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS3ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterISS3ISS4

        Create a new object of the class itkJoinSeriesImageFilterISS3ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterISS3ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterISS3ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterISS3ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterISS3ISS4 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterISS3ISS4_swigregister(itkJoinSeriesImageFilterISS3ISS4)

def itkJoinSeriesImageFilterIUC2IUC3_New():
    return itkJoinSeriesImageFilterIUC2IUC3.New()

class itkJoinSeriesImageFilterIUC2IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3):
    r"""Proxy of C++ itkJoinSeriesImageFilterIUC2IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterIUC2IUC3_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterIUC2IUC3_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterIUC2IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterIUC2IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterIUC2IUC3

        Create a new object of the class itkJoinSeriesImageFilterIUC2IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterIUC2IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterIUC2IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterIUC2IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterIUC2IUC3 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC3_swigregister(itkJoinSeriesImageFilterIUC2IUC3)

def itkJoinSeriesImageFilterIUC2IUC4_New():
    return itkJoinSeriesImageFilterIUC2IUC4.New()

class itkJoinSeriesImageFilterIUC2IUC4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC4):
    r"""Proxy of C++ itkJoinSeriesImageFilterIUC2IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterIUC2IUC4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterIUC2IUC4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC4_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC4_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC4_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC4_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC4_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterIUC2IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterIUC2IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterIUC2IUC4

        Create a new object of the class itkJoinSeriesImageFilterIUC2IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterIUC2IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterIUC2IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterIUC2IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterIUC2IUC4 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC2IUC4_swigregister(itkJoinSeriesImageFilterIUC2IUC4)

def itkJoinSeriesImageFilterIUC3IUC4_New():
    return itkJoinSeriesImageFilterIUC3IUC4.New()

class itkJoinSeriesImageFilterIUC3IUC4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC4):
    r"""Proxy of C++ itkJoinSeriesImageFilterIUC3IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterIUC3IUC4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC3IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterIUC3IUC4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC3IUC4_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC3IUC4_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC3IUC4_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC3IUC4_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC3IUC4_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC3IUC4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterIUC3IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterIUC3IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC3IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterIUC3IUC4

        Create a new object of the class itkJoinSeriesImageFilterIUC3IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterIUC3IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterIUC3IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterIUC3IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterIUC3IUC4 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUC3IUC4_swigregister(itkJoinSeriesImageFilterIUC3IUC4)

def itkJoinSeriesImageFilterIUS2IUS3_New():
    return itkJoinSeriesImageFilterIUS2IUS3.New()

class itkJoinSeriesImageFilterIUS2IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3):
    r"""Proxy of C++ itkJoinSeriesImageFilterIUS2IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterIUS2IUS3_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterIUS2IUS3_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterIUS2IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterIUS2IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterIUS2IUS3

        Create a new object of the class itkJoinSeriesImageFilterIUS2IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterIUS2IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterIUS2IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterIUS2IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterIUS2IUS3 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS3_swigregister(itkJoinSeriesImageFilterIUS2IUS3)

def itkJoinSeriesImageFilterIUS2IUS4_New():
    return itkJoinSeriesImageFilterIUS2IUS4.New()

class itkJoinSeriesImageFilterIUS2IUS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS4):
    r"""Proxy of C++ itkJoinSeriesImageFilterIUS2IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterIUS2IUS4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterIUS2IUS4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS4_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS4_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS4_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS4_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS4_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterIUS2IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterIUS2IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterIUS2IUS4

        Create a new object of the class itkJoinSeriesImageFilterIUS2IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterIUS2IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterIUS2IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterIUS2IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterIUS2IUS4 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS2IUS4_swigregister(itkJoinSeriesImageFilterIUS2IUS4)

def itkJoinSeriesImageFilterIUS3IUS4_New():
    return itkJoinSeriesImageFilterIUS3IUS4.New()

class itkJoinSeriesImageFilterIUS3IUS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS4):
    r"""Proxy of C++ itkJoinSeriesImageFilterIUS3IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkJoinSeriesImageFilterIUS3IUS4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS3IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkJoinSeriesImageFilterIUS3IUS4_Pointer"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS3IUS4_Clone(self)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS3IUS4_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS3IUS4_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS3IUS4_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double"""
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS3IUS4_GetOrigin(self)
    InputConvertibleToOutputCheck = _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS3IUS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkJoinSeriesImageFilterPython.delete_itkJoinSeriesImageFilterIUS3IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkJoinSeriesImageFilterIUS3IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS3IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkJoinSeriesImageFilterIUS3IUS4

        Create a new object of the class itkJoinSeriesImageFilterIUS3IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJoinSeriesImageFilterIUS3IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJoinSeriesImageFilterIUS3IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJoinSeriesImageFilterIUS3IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJoinSeriesImageFilterIUS3IUS4 in _itkJoinSeriesImageFilterPython:
_itkJoinSeriesImageFilterPython.itkJoinSeriesImageFilterIUS3IUS4_swigregister(itkJoinSeriesImageFilterIUS3IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def join_series_image_filter(*args: itkt.ImageLike,  spacing: float=..., origin: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for JoinSeriesImageFilter"""
    import itk

    kwarg_typehints = { 'spacing':spacing,'origin':origin }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.JoinSeriesImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def join_series_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageCompose.JoinSeriesImageFilter
    join_series_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    join_series_image_filter.__doc__ = filter_object.__doc__



