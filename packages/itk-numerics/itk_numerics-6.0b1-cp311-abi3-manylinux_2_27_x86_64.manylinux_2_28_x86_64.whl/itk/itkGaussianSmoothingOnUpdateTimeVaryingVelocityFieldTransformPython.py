# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDisplacementFieldPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython
else:
    import _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkArrayPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkTimeVaryingVelocityFieldTransformPython
import itk.itkVelocityFieldTransformPython
import itk.itkOptimizerParametersPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkDisplacementFieldTransformPython
import itk.itkVectorImagePython

def itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_New():
    return itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2.New()

class itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2(itk.itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD2):
    r"""Proxy of C++ itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_Pointer"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_Pointer"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_Clone(self)

    def SetGaussianSpatialSmoothingVarianceForTheUpdateField(self, _arg):
        r"""
        SetGaussianSpatialSmoothingVarianceForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_SetGaussianSpatialSmoothingVarianceForTheUpdateField(self, _arg)

    def GetGaussianSpatialSmoothingVarianceForTheUpdateField(self):
        r"""GetGaussianSpatialSmoothingVarianceForTheUpdateField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_GetGaussianSpatialSmoothingVarianceForTheUpdateField(self)

    def SetGaussianTemporalSmoothingVarianceForTheUpdateField(self, _arg):
        r"""
        SetGaussianTemporalSmoothingVarianceForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_SetGaussianTemporalSmoothingVarianceForTheUpdateField(self, _arg)

    def GetGaussianTemporalSmoothingVarianceForTheUpdateField(self):
        r"""GetGaussianTemporalSmoothingVarianceForTheUpdateField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_GetGaussianTemporalSmoothingVarianceForTheUpdateField(self)

    def SetGaussianSpatialSmoothingVarianceForTheTotalField(self, _arg):
        r"""
        SetGaussianSpatialSmoothingVarianceForTheTotalField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_SetGaussianSpatialSmoothingVarianceForTheTotalField(self, _arg)

    def GetGaussianSpatialSmoothingVarianceForTheTotalField(self):
        r"""GetGaussianSpatialSmoothingVarianceForTheTotalField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_GetGaussianSpatialSmoothingVarianceForTheTotalField(self)

    def SetGaussianTemporalSmoothingVarianceForTheTotalField(self, _arg):
        r"""
        SetGaussianTemporalSmoothingVarianceForTheTotalField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_SetGaussianTemporalSmoothingVarianceForTheTotalField(self, _arg)

    def GetGaussianTemporalSmoothingVarianceForTheTotalField(self):
        r"""GetGaussianTemporalSmoothingVarianceForTheTotalField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_GetGaussianTemporalSmoothingVarianceForTheTotalField(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_UpdateTransformParameters(self, update, factor)

    def GaussianSmoothTimeVaryingVelocityField(self, arg0, arg1, arg2):
        r"""
        GaussianSmoothTimeVaryingVelocityField(self, arg0, arg1, arg2) -> itkImageVD23_Pointer

        Parameters
        ----------
        arg0: itkImageVD23 *
        arg1: double
        arg2: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_GaussianSmoothTimeVaryingVelocityField(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.delete_itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2

        Create a new object of the class itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2 in _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython:
_itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2_swigregister(itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD2)

def itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_New():
    return itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3.New()

class itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3(itk.itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD3):
    r"""Proxy of C++ itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_Pointer"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_Pointer"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_Clone(self)

    def SetGaussianSpatialSmoothingVarianceForTheUpdateField(self, _arg):
        r"""
        SetGaussianSpatialSmoothingVarianceForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_SetGaussianSpatialSmoothingVarianceForTheUpdateField(self, _arg)

    def GetGaussianSpatialSmoothingVarianceForTheUpdateField(self):
        r"""GetGaussianSpatialSmoothingVarianceForTheUpdateField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_GetGaussianSpatialSmoothingVarianceForTheUpdateField(self)

    def SetGaussianTemporalSmoothingVarianceForTheUpdateField(self, _arg):
        r"""
        SetGaussianTemporalSmoothingVarianceForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_SetGaussianTemporalSmoothingVarianceForTheUpdateField(self, _arg)

    def GetGaussianTemporalSmoothingVarianceForTheUpdateField(self):
        r"""GetGaussianTemporalSmoothingVarianceForTheUpdateField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_GetGaussianTemporalSmoothingVarianceForTheUpdateField(self)

    def SetGaussianSpatialSmoothingVarianceForTheTotalField(self, _arg):
        r"""
        SetGaussianSpatialSmoothingVarianceForTheTotalField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_SetGaussianSpatialSmoothingVarianceForTheTotalField(self, _arg)

    def GetGaussianSpatialSmoothingVarianceForTheTotalField(self):
        r"""GetGaussianSpatialSmoothingVarianceForTheTotalField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_GetGaussianSpatialSmoothingVarianceForTheTotalField(self)

    def SetGaussianTemporalSmoothingVarianceForTheTotalField(self, _arg):
        r"""
        SetGaussianTemporalSmoothingVarianceForTheTotalField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_SetGaussianTemporalSmoothingVarianceForTheTotalField(self, _arg)

    def GetGaussianTemporalSmoothingVarianceForTheTotalField(self):
        r"""GetGaussianTemporalSmoothingVarianceForTheTotalField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_GetGaussianTemporalSmoothingVarianceForTheTotalField(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_UpdateTransformParameters(self, update, factor)

    def GaussianSmoothTimeVaryingVelocityField(self, arg0, arg1, arg2):
        r"""
        GaussianSmoothTimeVaryingVelocityField(self, arg0, arg1, arg2) -> itkImageVD34_Pointer

        Parameters
        ----------
        arg0: itkImageVD34 *
        arg1: double
        arg2: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_GaussianSmoothTimeVaryingVelocityField(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.delete_itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3

        Create a new object of the class itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3 in _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython:
_itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3_swigregister(itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD3)

def itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_New():
    return itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4.New()

class itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4(itk.itkTimeVaryingVelocityFieldTransformPython.itkTimeVaryingVelocityFieldTransformD4):
    r"""Proxy of C++ itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_Pointer"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_Pointer"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_Clone(self)

    def SetGaussianSpatialSmoothingVarianceForTheUpdateField(self, _arg):
        r"""
        SetGaussianSpatialSmoothingVarianceForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_SetGaussianSpatialSmoothingVarianceForTheUpdateField(self, _arg)

    def GetGaussianSpatialSmoothingVarianceForTheUpdateField(self):
        r"""GetGaussianSpatialSmoothingVarianceForTheUpdateField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_GetGaussianSpatialSmoothingVarianceForTheUpdateField(self)

    def SetGaussianTemporalSmoothingVarianceForTheUpdateField(self, _arg):
        r"""
        SetGaussianTemporalSmoothingVarianceForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_SetGaussianTemporalSmoothingVarianceForTheUpdateField(self, _arg)

    def GetGaussianTemporalSmoothingVarianceForTheUpdateField(self):
        r"""GetGaussianTemporalSmoothingVarianceForTheUpdateField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_GetGaussianTemporalSmoothingVarianceForTheUpdateField(self)

    def SetGaussianSpatialSmoothingVarianceForTheTotalField(self, _arg):
        r"""
        SetGaussianSpatialSmoothingVarianceForTheTotalField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_SetGaussianSpatialSmoothingVarianceForTheTotalField(self, _arg)

    def GetGaussianSpatialSmoothingVarianceForTheTotalField(self):
        r"""GetGaussianSpatialSmoothingVarianceForTheTotalField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_GetGaussianSpatialSmoothingVarianceForTheTotalField(self)

    def SetGaussianTemporalSmoothingVarianceForTheTotalField(self, _arg):
        r"""
        SetGaussianTemporalSmoothingVarianceForTheTotalField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_SetGaussianTemporalSmoothingVarianceForTheTotalField(self, _arg)

    def GetGaussianTemporalSmoothingVarianceForTheTotalField(self):
        r"""GetGaussianTemporalSmoothingVarianceForTheTotalField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_GetGaussianTemporalSmoothingVarianceForTheTotalField(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_UpdateTransformParameters(self, update, factor)

    def GaussianSmoothTimeVaryingVelocityField(self, arg0, arg1, arg2):
        r"""
        GaussianSmoothTimeVaryingVelocityField(self, arg0, arg1, arg2) -> itkImageVD45_Pointer

        Parameters
        ----------
        arg0: itkImageVD45 *
        arg1: double
        arg2: double

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_GaussianSmoothTimeVaryingVelocityField(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.delete_itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4

        Create a new object of the class itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4 in _itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython:
_itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4_swigregister(itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformD4)

