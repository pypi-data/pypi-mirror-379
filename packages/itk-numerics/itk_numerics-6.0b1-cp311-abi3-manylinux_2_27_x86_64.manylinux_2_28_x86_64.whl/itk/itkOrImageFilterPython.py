# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkOrImageFilterPython
else:
    import _itkOrImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkBinaryGeneratorImageFilterPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkOrImageFilterISS2ISS2ISS2_New():
    return itkOrImageFilterISS2ISS2ISS2.New()

class itkOrImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""Proxy of C++ itkOrImageFilterISS2ISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrImageFilterISS2ISS2ISS2_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterISS2ISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrImageFilterISS2ISS2ISS2_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterISS2ISS2ISS2_Clone(self)
    Input1Input2OutputBitwiseOperatorsCheck = _itkOrImageFilterPython.itkOrImageFilterISS2ISS2ISS2_Input1Input2OutputBitwiseOperatorsCheck
    
    __swig_destroy__ = _itkOrImageFilterPython.delete_itkOrImageFilterISS2ISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrImageFilterISS2ISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrImageFilterPython.itkOrImageFilterISS2ISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrImageFilterISS2ISS2ISS2

        Create a new object of the class itkOrImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrImageFilterISS2ISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrImageFilterISS2ISS2ISS2 in _itkOrImageFilterPython:
_itkOrImageFilterPython.itkOrImageFilterISS2ISS2ISS2_swigregister(itkOrImageFilterISS2ISS2ISS2)

def itkOrImageFilterISS3ISS3ISS3_New():
    return itkOrImageFilterISS3ISS3ISS3.New()

class itkOrImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""Proxy of C++ itkOrImageFilterISS3ISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrImageFilterISS3ISS3ISS3_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterISS3ISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrImageFilterISS3ISS3ISS3_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterISS3ISS3ISS3_Clone(self)
    Input1Input2OutputBitwiseOperatorsCheck = _itkOrImageFilterPython.itkOrImageFilterISS3ISS3ISS3_Input1Input2OutputBitwiseOperatorsCheck
    
    __swig_destroy__ = _itkOrImageFilterPython.delete_itkOrImageFilterISS3ISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrImageFilterISS3ISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrImageFilterPython.itkOrImageFilterISS3ISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrImageFilterISS3ISS3ISS3

        Create a new object of the class itkOrImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrImageFilterISS3ISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrImageFilterISS3ISS3ISS3 in _itkOrImageFilterPython:
_itkOrImageFilterPython.itkOrImageFilterISS3ISS3ISS3_swigregister(itkOrImageFilterISS3ISS3ISS3)

def itkOrImageFilterISS4ISS4ISS4_New():
    return itkOrImageFilterISS4ISS4ISS4.New()

class itkOrImageFilterISS4ISS4ISS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS4ISS4ISS4):
    r"""Proxy of C++ itkOrImageFilterISS4ISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrImageFilterISS4ISS4ISS4_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterISS4ISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrImageFilterISS4ISS4ISS4_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterISS4ISS4ISS4_Clone(self)
    Input1Input2OutputBitwiseOperatorsCheck = _itkOrImageFilterPython.itkOrImageFilterISS4ISS4ISS4_Input1Input2OutputBitwiseOperatorsCheck
    
    __swig_destroy__ = _itkOrImageFilterPython.delete_itkOrImageFilterISS4ISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrImageFilterISS4ISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrImageFilterPython.itkOrImageFilterISS4ISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrImageFilterISS4ISS4ISS4

        Create a new object of the class itkOrImageFilterISS4ISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrImageFilterISS4ISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrImageFilterISS4ISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrImageFilterISS4ISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrImageFilterISS4ISS4ISS4 in _itkOrImageFilterPython:
_itkOrImageFilterPython.itkOrImageFilterISS4ISS4ISS4_swigregister(itkOrImageFilterISS4ISS4ISS4)

def itkOrImageFilterIUC2IUC2IUC2_New():
    return itkOrImageFilterIUC2IUC2IUC2.New()

class itkOrImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""Proxy of C++ itkOrImageFilterIUC2IUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterIUC2IUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterIUC2IUC2IUC2_Clone(self)
    Input1Input2OutputBitwiseOperatorsCheck = _itkOrImageFilterPython.itkOrImageFilterIUC2IUC2IUC2_Input1Input2OutputBitwiseOperatorsCheck
    
    __swig_destroy__ = _itkOrImageFilterPython.delete_itkOrImageFilterIUC2IUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrImageFilterIUC2IUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrImageFilterPython.itkOrImageFilterIUC2IUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrImageFilterIUC2IUC2IUC2

        Create a new object of the class itkOrImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrImageFilterIUC2IUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrImageFilterIUC2IUC2IUC2 in _itkOrImageFilterPython:
_itkOrImageFilterPython.itkOrImageFilterIUC2IUC2IUC2_swigregister(itkOrImageFilterIUC2IUC2IUC2)

def itkOrImageFilterIUC3IUC3IUC3_New():
    return itkOrImageFilterIUC3IUC3IUC3.New()

class itkOrImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""Proxy of C++ itkOrImageFilterIUC3IUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterIUC3IUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterIUC3IUC3IUC3_Clone(self)
    Input1Input2OutputBitwiseOperatorsCheck = _itkOrImageFilterPython.itkOrImageFilterIUC3IUC3IUC3_Input1Input2OutputBitwiseOperatorsCheck
    
    __swig_destroy__ = _itkOrImageFilterPython.delete_itkOrImageFilterIUC3IUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrImageFilterIUC3IUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrImageFilterPython.itkOrImageFilterIUC3IUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrImageFilterIUC3IUC3IUC3

        Create a new object of the class itkOrImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrImageFilterIUC3IUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrImageFilterIUC3IUC3IUC3 in _itkOrImageFilterPython:
_itkOrImageFilterPython.itkOrImageFilterIUC3IUC3IUC3_swigregister(itkOrImageFilterIUC3IUC3IUC3)

def itkOrImageFilterIUC4IUC4IUC4_New():
    return itkOrImageFilterIUC4IUC4IUC4.New()

class itkOrImageFilterIUC4IUC4IUC4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC4IUC4IUC4):
    r"""Proxy of C++ itkOrImageFilterIUC4IUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterIUC4IUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterIUC4IUC4IUC4_Clone(self)
    Input1Input2OutputBitwiseOperatorsCheck = _itkOrImageFilterPython.itkOrImageFilterIUC4IUC4IUC4_Input1Input2OutputBitwiseOperatorsCheck
    
    __swig_destroy__ = _itkOrImageFilterPython.delete_itkOrImageFilterIUC4IUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrImageFilterIUC4IUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrImageFilterPython.itkOrImageFilterIUC4IUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrImageFilterIUC4IUC4IUC4

        Create a new object of the class itkOrImageFilterIUC4IUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrImageFilterIUC4IUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrImageFilterIUC4IUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrImageFilterIUC4IUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrImageFilterIUC4IUC4IUC4 in _itkOrImageFilterPython:
_itkOrImageFilterPython.itkOrImageFilterIUC4IUC4IUC4_swigregister(itkOrImageFilterIUC4IUC4IUC4)

def itkOrImageFilterIUS2IUS2IUS2_New():
    return itkOrImageFilterIUS2IUS2IUS2.New()

class itkOrImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""Proxy of C++ itkOrImageFilterIUS2IUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterIUS2IUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterIUS2IUS2IUS2_Clone(self)
    Input1Input2OutputBitwiseOperatorsCheck = _itkOrImageFilterPython.itkOrImageFilterIUS2IUS2IUS2_Input1Input2OutputBitwiseOperatorsCheck
    
    __swig_destroy__ = _itkOrImageFilterPython.delete_itkOrImageFilterIUS2IUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrImageFilterIUS2IUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrImageFilterPython.itkOrImageFilterIUS2IUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrImageFilterIUS2IUS2IUS2

        Create a new object of the class itkOrImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrImageFilterIUS2IUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrImageFilterIUS2IUS2IUS2 in _itkOrImageFilterPython:
_itkOrImageFilterPython.itkOrImageFilterIUS2IUS2IUS2_swigregister(itkOrImageFilterIUS2IUS2IUS2)

def itkOrImageFilterIUS3IUS3IUS3_New():
    return itkOrImageFilterIUS3IUS3IUS3.New()

class itkOrImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""Proxy of C++ itkOrImageFilterIUS3IUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterIUS3IUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterIUS3IUS3IUS3_Clone(self)
    Input1Input2OutputBitwiseOperatorsCheck = _itkOrImageFilterPython.itkOrImageFilterIUS3IUS3IUS3_Input1Input2OutputBitwiseOperatorsCheck
    
    __swig_destroy__ = _itkOrImageFilterPython.delete_itkOrImageFilterIUS3IUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrImageFilterIUS3IUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrImageFilterPython.itkOrImageFilterIUS3IUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrImageFilterIUS3IUS3IUS3

        Create a new object of the class itkOrImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrImageFilterIUS3IUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrImageFilterIUS3IUS3IUS3 in _itkOrImageFilterPython:
_itkOrImageFilterPython.itkOrImageFilterIUS3IUS3IUS3_swigregister(itkOrImageFilterIUS3IUS3IUS3)

def itkOrImageFilterIUS4IUS4IUS4_New():
    return itkOrImageFilterIUS4IUS4IUS4.New()

class itkOrImageFilterIUS4IUS4IUS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS4IUS4IUS4):
    r"""Proxy of C++ itkOrImageFilterIUS4IUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterIUS4IUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkOrImageFilterPython.itkOrImageFilterIUS4IUS4IUS4_Clone(self)
    Input1Input2OutputBitwiseOperatorsCheck = _itkOrImageFilterPython.itkOrImageFilterIUS4IUS4IUS4_Input1Input2OutputBitwiseOperatorsCheck
    
    __swig_destroy__ = _itkOrImageFilterPython.delete_itkOrImageFilterIUS4IUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrImageFilterIUS4IUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrImageFilterPython.itkOrImageFilterIUS4IUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrImageFilterIUS4IUS4IUS4

        Create a new object of the class itkOrImageFilterIUS4IUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrImageFilterIUS4IUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrImageFilterIUS4IUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrImageFilterIUS4IUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrImageFilterIUS4IUS4IUS4 in _itkOrImageFilterPython:
_itkOrImageFilterPython.itkOrImageFilterIUS4IUS4IUS4_swigregister(itkOrImageFilterIUS4IUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def or_image_filter(*args: itkt.ImageLike,  constant1: int=..., constant2: int=..., constant: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for OrImageFilter"""
    import itk

    kwarg_typehints = { 'constant1':constant1,'constant2':constant2,'constant':constant }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.OrImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def or_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.OrImageFilter
    or_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    or_image_filter.__doc__ = filter_object.__doc__



