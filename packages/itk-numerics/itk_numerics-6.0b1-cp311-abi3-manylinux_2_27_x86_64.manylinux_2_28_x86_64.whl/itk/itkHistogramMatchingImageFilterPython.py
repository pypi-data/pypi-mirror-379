# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHistogramMatchingImageFilterPython
else:
    import _itkHistogramMatchingImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkHistogramPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkSamplePython
import itk.itkFixedArrayPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkHistogramMatchingImageFilterID2ID2_New():
    return itkHistogramMatchingImageFilterID2ID2.New()

class itkHistogramMatchingImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkHistogramMatchingImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramMatchingImageFilterID2ID2_Pointer"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramMatchingImageFilterID2ID2_Pointer"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_Clone(self)

    def SetSourceImage(self, _arg):
        r"""
        SetSourceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD2 const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_SetSourceImage(self, _arg)

    def GetSourceImage(self):
        r"""GetSourceImage(self) -> itkImageD2"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GetSourceImage(self)

    def SetReferenceImage(self, _arg):
        r"""
        SetReferenceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD2 const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_SetReferenceImage(self, _arg)

    def GetReferenceImage(self):
        r"""GetReferenceImage(self) -> itkImageD2"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GetReferenceImage(self)

    def SetReferenceHistogram(self, _arg):
        r"""
        SetReferenceHistogram(self, _arg)

        Parameters
        ----------
        _arg: itkHistogramD const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_SetReferenceHistogram(self, _arg)

    def GetReferenceHistogram(self):
        r"""GetReferenceHistogram(self) -> itkHistogramD"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GetReferenceHistogram(self)

    def SetNumberOfHistogramLevels(self, _arg):
        r"""
        SetNumberOfHistogramLevels(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_SetNumberOfHistogramLevels(self, _arg)

    def GetNumberOfHistogramLevels(self):
        r"""GetNumberOfHistogramLevels(self) -> unsigned long"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GetNumberOfHistogramLevels(self)

    def SetNumberOfMatchPoints(self, _arg):
        r"""
        SetNumberOfMatchPoints(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_SetNumberOfMatchPoints(self, _arg)

    def GetNumberOfMatchPoints(self):
        r"""GetNumberOfMatchPoints(self) -> unsigned long"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GetNumberOfMatchPoints(self)

    def SetThresholdAtMeanIntensity(self, _arg):
        r"""
        SetThresholdAtMeanIntensity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_SetThresholdAtMeanIntensity(self, _arg)

    def GetThresholdAtMeanIntensity(self):
        r"""GetThresholdAtMeanIntensity(self) -> bool"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GetThresholdAtMeanIntensity(self)

    def ThresholdAtMeanIntensityOn(self):
        r"""ThresholdAtMeanIntensityOn(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_ThresholdAtMeanIntensityOn(self)

    def ThresholdAtMeanIntensityOff(self):
        r"""ThresholdAtMeanIntensityOff(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_ThresholdAtMeanIntensityOff(self)

    def SetGenerateReferenceHistogramFromImage(self, _arg):
        r"""
        SetGenerateReferenceHistogramFromImage(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_SetGenerateReferenceHistogramFromImage(self, _arg)

    def GetGenerateReferenceHistogramFromImage(self):
        r"""GetGenerateReferenceHistogramFromImage(self) -> bool"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GetGenerateReferenceHistogramFromImage(self)

    def GenerateReferenceHistogramFromImageOn(self):
        r"""GenerateReferenceHistogramFromImageOn(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GenerateReferenceHistogramFromImageOn(self)

    def GenerateReferenceHistogramFromImageOff(self):
        r"""GenerateReferenceHistogramFromImageOff(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GenerateReferenceHistogramFromImageOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GenerateInputRequestedRegion(self)

    def GetModifiableSourceHistogram(self):
        r"""GetModifiableSourceHistogram(self) -> itkHistogramD"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GetModifiableSourceHistogram(self)

    def GetSourceHistogram(self, *args):
        r"""
        GetSourceHistogram(self) -> itkHistogramD
        GetSourceHistogram(self) -> itkHistogramD
        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GetSourceHistogram(self, *args)

    def GetModifiableOutputHistogram(self):
        r"""GetModifiableOutputHistogram(self) -> itkHistogramD"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GetModifiableOutputHistogram(self)

    def GetOutputHistogram(self, *args):
        r"""
        GetOutputHistogram(self) -> itkHistogramD
        GetOutputHistogram(self) -> itkHistogramD
        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_GetOutputHistogram(self, *args)
    IntConvertibleToInputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_IntConvertibleToInputCheck
    
    SameDimensionCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_SameDimensionCheck
    
    DoubleConvertibleToInputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_DoubleConvertibleToInputCheck
    
    DoubleConvertibleToOutputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToDoubleCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    OutputConvertibleToDoubleCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_OutputConvertibleToDoubleCheck
    
    SameTypeCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_SameTypeCheck
    
    __swig_destroy__ = _itkHistogramMatchingImageFilterPython.delete_itkHistogramMatchingImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramMatchingImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramMatchingImageFilterID2ID2

        Create a new object of the class itkHistogramMatchingImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramMatchingImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramMatchingImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramMatchingImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramMatchingImageFilterID2ID2 in _itkHistogramMatchingImageFilterPython:
_itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID2ID2_swigregister(itkHistogramMatchingImageFilterID2ID2)

def itkHistogramMatchingImageFilterID3ID3_New():
    return itkHistogramMatchingImageFilterID3ID3.New()

class itkHistogramMatchingImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkHistogramMatchingImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramMatchingImageFilterID3ID3_Pointer"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramMatchingImageFilterID3ID3_Pointer"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_Clone(self)

    def SetSourceImage(self, _arg):
        r"""
        SetSourceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD3 const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_SetSourceImage(self, _arg)

    def GetSourceImage(self):
        r"""GetSourceImage(self) -> itkImageD3"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GetSourceImage(self)

    def SetReferenceImage(self, _arg):
        r"""
        SetReferenceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD3 const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_SetReferenceImage(self, _arg)

    def GetReferenceImage(self):
        r"""GetReferenceImage(self) -> itkImageD3"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GetReferenceImage(self)

    def SetReferenceHistogram(self, _arg):
        r"""
        SetReferenceHistogram(self, _arg)

        Parameters
        ----------
        _arg: itkHistogramD const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_SetReferenceHistogram(self, _arg)

    def GetReferenceHistogram(self):
        r"""GetReferenceHistogram(self) -> itkHistogramD"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GetReferenceHistogram(self)

    def SetNumberOfHistogramLevels(self, _arg):
        r"""
        SetNumberOfHistogramLevels(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_SetNumberOfHistogramLevels(self, _arg)

    def GetNumberOfHistogramLevels(self):
        r"""GetNumberOfHistogramLevels(self) -> unsigned long"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GetNumberOfHistogramLevels(self)

    def SetNumberOfMatchPoints(self, _arg):
        r"""
        SetNumberOfMatchPoints(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_SetNumberOfMatchPoints(self, _arg)

    def GetNumberOfMatchPoints(self):
        r"""GetNumberOfMatchPoints(self) -> unsigned long"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GetNumberOfMatchPoints(self)

    def SetThresholdAtMeanIntensity(self, _arg):
        r"""
        SetThresholdAtMeanIntensity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_SetThresholdAtMeanIntensity(self, _arg)

    def GetThresholdAtMeanIntensity(self):
        r"""GetThresholdAtMeanIntensity(self) -> bool"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GetThresholdAtMeanIntensity(self)

    def ThresholdAtMeanIntensityOn(self):
        r"""ThresholdAtMeanIntensityOn(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_ThresholdAtMeanIntensityOn(self)

    def ThresholdAtMeanIntensityOff(self):
        r"""ThresholdAtMeanIntensityOff(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_ThresholdAtMeanIntensityOff(self)

    def SetGenerateReferenceHistogramFromImage(self, _arg):
        r"""
        SetGenerateReferenceHistogramFromImage(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_SetGenerateReferenceHistogramFromImage(self, _arg)

    def GetGenerateReferenceHistogramFromImage(self):
        r"""GetGenerateReferenceHistogramFromImage(self) -> bool"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GetGenerateReferenceHistogramFromImage(self)

    def GenerateReferenceHistogramFromImageOn(self):
        r"""GenerateReferenceHistogramFromImageOn(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GenerateReferenceHistogramFromImageOn(self)

    def GenerateReferenceHistogramFromImageOff(self):
        r"""GenerateReferenceHistogramFromImageOff(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GenerateReferenceHistogramFromImageOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GenerateInputRequestedRegion(self)

    def GetModifiableSourceHistogram(self):
        r"""GetModifiableSourceHistogram(self) -> itkHistogramD"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GetModifiableSourceHistogram(self)

    def GetSourceHistogram(self, *args):
        r"""
        GetSourceHistogram(self) -> itkHistogramD
        GetSourceHistogram(self) -> itkHistogramD
        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GetSourceHistogram(self, *args)

    def GetModifiableOutputHistogram(self):
        r"""GetModifiableOutputHistogram(self) -> itkHistogramD"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GetModifiableOutputHistogram(self)

    def GetOutputHistogram(self, *args):
        r"""
        GetOutputHistogram(self) -> itkHistogramD
        GetOutputHistogram(self) -> itkHistogramD
        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_GetOutputHistogram(self, *args)
    IntConvertibleToInputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_IntConvertibleToInputCheck
    
    SameDimensionCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_SameDimensionCheck
    
    DoubleConvertibleToInputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_DoubleConvertibleToInputCheck
    
    DoubleConvertibleToOutputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToDoubleCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    OutputConvertibleToDoubleCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_OutputConvertibleToDoubleCheck
    
    SameTypeCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_SameTypeCheck
    
    __swig_destroy__ = _itkHistogramMatchingImageFilterPython.delete_itkHistogramMatchingImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramMatchingImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramMatchingImageFilterID3ID3

        Create a new object of the class itkHistogramMatchingImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramMatchingImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramMatchingImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramMatchingImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramMatchingImageFilterID3ID3 in _itkHistogramMatchingImageFilterPython:
_itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID3ID3_swigregister(itkHistogramMatchingImageFilterID3ID3)

def itkHistogramMatchingImageFilterID4ID4_New():
    return itkHistogramMatchingImageFilterID4ID4.New()

class itkHistogramMatchingImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkHistogramMatchingImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramMatchingImageFilterID4ID4_Pointer"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramMatchingImageFilterID4ID4_Pointer"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_Clone(self)

    def SetSourceImage(self, _arg):
        r"""
        SetSourceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD4 const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_SetSourceImage(self, _arg)

    def GetSourceImage(self):
        r"""GetSourceImage(self) -> itkImageD4"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GetSourceImage(self)

    def SetReferenceImage(self, _arg):
        r"""
        SetReferenceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD4 const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_SetReferenceImage(self, _arg)

    def GetReferenceImage(self):
        r"""GetReferenceImage(self) -> itkImageD4"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GetReferenceImage(self)

    def SetReferenceHistogram(self, _arg):
        r"""
        SetReferenceHistogram(self, _arg)

        Parameters
        ----------
        _arg: itkHistogramD const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_SetReferenceHistogram(self, _arg)

    def GetReferenceHistogram(self):
        r"""GetReferenceHistogram(self) -> itkHistogramD"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GetReferenceHistogram(self)

    def SetNumberOfHistogramLevels(self, _arg):
        r"""
        SetNumberOfHistogramLevels(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_SetNumberOfHistogramLevels(self, _arg)

    def GetNumberOfHistogramLevels(self):
        r"""GetNumberOfHistogramLevels(self) -> unsigned long"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GetNumberOfHistogramLevels(self)

    def SetNumberOfMatchPoints(self, _arg):
        r"""
        SetNumberOfMatchPoints(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_SetNumberOfMatchPoints(self, _arg)

    def GetNumberOfMatchPoints(self):
        r"""GetNumberOfMatchPoints(self) -> unsigned long"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GetNumberOfMatchPoints(self)

    def SetThresholdAtMeanIntensity(self, _arg):
        r"""
        SetThresholdAtMeanIntensity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_SetThresholdAtMeanIntensity(self, _arg)

    def GetThresholdAtMeanIntensity(self):
        r"""GetThresholdAtMeanIntensity(self) -> bool"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GetThresholdAtMeanIntensity(self)

    def ThresholdAtMeanIntensityOn(self):
        r"""ThresholdAtMeanIntensityOn(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_ThresholdAtMeanIntensityOn(self)

    def ThresholdAtMeanIntensityOff(self):
        r"""ThresholdAtMeanIntensityOff(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_ThresholdAtMeanIntensityOff(self)

    def SetGenerateReferenceHistogramFromImage(self, _arg):
        r"""
        SetGenerateReferenceHistogramFromImage(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_SetGenerateReferenceHistogramFromImage(self, _arg)

    def GetGenerateReferenceHistogramFromImage(self):
        r"""GetGenerateReferenceHistogramFromImage(self) -> bool"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GetGenerateReferenceHistogramFromImage(self)

    def GenerateReferenceHistogramFromImageOn(self):
        r"""GenerateReferenceHistogramFromImageOn(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GenerateReferenceHistogramFromImageOn(self)

    def GenerateReferenceHistogramFromImageOff(self):
        r"""GenerateReferenceHistogramFromImageOff(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GenerateReferenceHistogramFromImageOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GenerateInputRequestedRegion(self)

    def GetModifiableSourceHistogram(self):
        r"""GetModifiableSourceHistogram(self) -> itkHistogramD"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GetModifiableSourceHistogram(self)

    def GetSourceHistogram(self, *args):
        r"""
        GetSourceHistogram(self) -> itkHistogramD
        GetSourceHistogram(self) -> itkHistogramD
        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GetSourceHistogram(self, *args)

    def GetModifiableOutputHistogram(self):
        r"""GetModifiableOutputHistogram(self) -> itkHistogramD"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GetModifiableOutputHistogram(self)

    def GetOutputHistogram(self, *args):
        r"""
        GetOutputHistogram(self) -> itkHistogramD
        GetOutputHistogram(self) -> itkHistogramD
        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_GetOutputHistogram(self, *args)
    IntConvertibleToInputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_IntConvertibleToInputCheck
    
    SameDimensionCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_SameDimensionCheck
    
    DoubleConvertibleToInputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_DoubleConvertibleToInputCheck
    
    DoubleConvertibleToOutputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    InputConvertibleToDoubleCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_InputConvertibleToDoubleCheck
    
    OutputConvertibleToDoubleCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_OutputConvertibleToDoubleCheck
    
    SameTypeCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_SameTypeCheck
    
    __swig_destroy__ = _itkHistogramMatchingImageFilterPython.delete_itkHistogramMatchingImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramMatchingImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramMatchingImageFilterID4ID4

        Create a new object of the class itkHistogramMatchingImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramMatchingImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramMatchingImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramMatchingImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramMatchingImageFilterID4ID4 in _itkHistogramMatchingImageFilterPython:
_itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterID4ID4_swigregister(itkHistogramMatchingImageFilterID4ID4)

def itkHistogramMatchingImageFilterIF2IF2_New():
    return itkHistogramMatchingImageFilterIF2IF2.New()

class itkHistogramMatchingImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkHistogramMatchingImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramMatchingImageFilterIF2IF2_Pointer"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramMatchingImageFilterIF2IF2_Pointer"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_Clone(self)

    def SetSourceImage(self, _arg):
        r"""
        SetSourceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF2 const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_SetSourceImage(self, _arg)

    def GetSourceImage(self):
        r"""GetSourceImage(self) -> itkImageF2"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GetSourceImage(self)

    def SetReferenceImage(self, _arg):
        r"""
        SetReferenceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF2 const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_SetReferenceImage(self, _arg)

    def GetReferenceImage(self):
        r"""GetReferenceImage(self) -> itkImageF2"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GetReferenceImage(self)

    def SetReferenceHistogram(self, _arg):
        r"""
        SetReferenceHistogram(self, _arg)

        Parameters
        ----------
        _arg: itkHistogramF const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_SetReferenceHistogram(self, _arg)

    def GetReferenceHistogram(self):
        r"""GetReferenceHistogram(self) -> itkHistogramF"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GetReferenceHistogram(self)

    def SetNumberOfHistogramLevels(self, _arg):
        r"""
        SetNumberOfHistogramLevels(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_SetNumberOfHistogramLevels(self, _arg)

    def GetNumberOfHistogramLevels(self):
        r"""GetNumberOfHistogramLevels(self) -> unsigned long"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GetNumberOfHistogramLevels(self)

    def SetNumberOfMatchPoints(self, _arg):
        r"""
        SetNumberOfMatchPoints(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_SetNumberOfMatchPoints(self, _arg)

    def GetNumberOfMatchPoints(self):
        r"""GetNumberOfMatchPoints(self) -> unsigned long"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GetNumberOfMatchPoints(self)

    def SetThresholdAtMeanIntensity(self, _arg):
        r"""
        SetThresholdAtMeanIntensity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_SetThresholdAtMeanIntensity(self, _arg)

    def GetThresholdAtMeanIntensity(self):
        r"""GetThresholdAtMeanIntensity(self) -> bool"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GetThresholdAtMeanIntensity(self)

    def ThresholdAtMeanIntensityOn(self):
        r"""ThresholdAtMeanIntensityOn(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_ThresholdAtMeanIntensityOn(self)

    def ThresholdAtMeanIntensityOff(self):
        r"""ThresholdAtMeanIntensityOff(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_ThresholdAtMeanIntensityOff(self)

    def SetGenerateReferenceHistogramFromImage(self, _arg):
        r"""
        SetGenerateReferenceHistogramFromImage(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_SetGenerateReferenceHistogramFromImage(self, _arg)

    def GetGenerateReferenceHistogramFromImage(self):
        r"""GetGenerateReferenceHistogramFromImage(self) -> bool"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GetGenerateReferenceHistogramFromImage(self)

    def GenerateReferenceHistogramFromImageOn(self):
        r"""GenerateReferenceHistogramFromImageOn(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GenerateReferenceHistogramFromImageOn(self)

    def GenerateReferenceHistogramFromImageOff(self):
        r"""GenerateReferenceHistogramFromImageOff(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GenerateReferenceHistogramFromImageOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GenerateInputRequestedRegion(self)

    def GetModifiableSourceHistogram(self):
        r"""GetModifiableSourceHistogram(self) -> itkHistogramF"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GetModifiableSourceHistogram(self)

    def GetSourceHistogram(self, *args):
        r"""
        GetSourceHistogram(self) -> itkHistogramF
        GetSourceHistogram(self) -> itkHistogramF
        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GetSourceHistogram(self, *args)

    def GetModifiableOutputHistogram(self):
        r"""GetModifiableOutputHistogram(self) -> itkHistogramF"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GetModifiableOutputHistogram(self)

    def GetOutputHistogram(self, *args):
        r"""
        GetOutputHistogram(self) -> itkHistogramF
        GetOutputHistogram(self) -> itkHistogramF
        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_GetOutputHistogram(self, *args)
    IntConvertibleToInputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_IntConvertibleToInputCheck
    
    SameDimensionCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_SameDimensionCheck
    
    DoubleConvertibleToInputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_DoubleConvertibleToInputCheck
    
    DoubleConvertibleToOutputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToDoubleCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    OutputConvertibleToDoubleCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_OutputConvertibleToDoubleCheck
    
    SameTypeCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_SameTypeCheck
    
    __swig_destroy__ = _itkHistogramMatchingImageFilterPython.delete_itkHistogramMatchingImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramMatchingImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramMatchingImageFilterIF2IF2

        Create a new object of the class itkHistogramMatchingImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramMatchingImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramMatchingImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramMatchingImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramMatchingImageFilterIF2IF2 in _itkHistogramMatchingImageFilterPython:
_itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF2IF2_swigregister(itkHistogramMatchingImageFilterIF2IF2)

def itkHistogramMatchingImageFilterIF3IF3_New():
    return itkHistogramMatchingImageFilterIF3IF3.New()

class itkHistogramMatchingImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkHistogramMatchingImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramMatchingImageFilterIF3IF3_Pointer"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramMatchingImageFilterIF3IF3_Pointer"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_Clone(self)

    def SetSourceImage(self, _arg):
        r"""
        SetSourceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF3 const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_SetSourceImage(self, _arg)

    def GetSourceImage(self):
        r"""GetSourceImage(self) -> itkImageF3"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GetSourceImage(self)

    def SetReferenceImage(self, _arg):
        r"""
        SetReferenceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF3 const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_SetReferenceImage(self, _arg)

    def GetReferenceImage(self):
        r"""GetReferenceImage(self) -> itkImageF3"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GetReferenceImage(self)

    def SetReferenceHistogram(self, _arg):
        r"""
        SetReferenceHistogram(self, _arg)

        Parameters
        ----------
        _arg: itkHistogramF const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_SetReferenceHistogram(self, _arg)

    def GetReferenceHistogram(self):
        r"""GetReferenceHistogram(self) -> itkHistogramF"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GetReferenceHistogram(self)

    def SetNumberOfHistogramLevels(self, _arg):
        r"""
        SetNumberOfHistogramLevels(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_SetNumberOfHistogramLevels(self, _arg)

    def GetNumberOfHistogramLevels(self):
        r"""GetNumberOfHistogramLevels(self) -> unsigned long"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GetNumberOfHistogramLevels(self)

    def SetNumberOfMatchPoints(self, _arg):
        r"""
        SetNumberOfMatchPoints(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_SetNumberOfMatchPoints(self, _arg)

    def GetNumberOfMatchPoints(self):
        r"""GetNumberOfMatchPoints(self) -> unsigned long"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GetNumberOfMatchPoints(self)

    def SetThresholdAtMeanIntensity(self, _arg):
        r"""
        SetThresholdAtMeanIntensity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_SetThresholdAtMeanIntensity(self, _arg)

    def GetThresholdAtMeanIntensity(self):
        r"""GetThresholdAtMeanIntensity(self) -> bool"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GetThresholdAtMeanIntensity(self)

    def ThresholdAtMeanIntensityOn(self):
        r"""ThresholdAtMeanIntensityOn(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_ThresholdAtMeanIntensityOn(self)

    def ThresholdAtMeanIntensityOff(self):
        r"""ThresholdAtMeanIntensityOff(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_ThresholdAtMeanIntensityOff(self)

    def SetGenerateReferenceHistogramFromImage(self, _arg):
        r"""
        SetGenerateReferenceHistogramFromImage(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_SetGenerateReferenceHistogramFromImage(self, _arg)

    def GetGenerateReferenceHistogramFromImage(self):
        r"""GetGenerateReferenceHistogramFromImage(self) -> bool"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GetGenerateReferenceHistogramFromImage(self)

    def GenerateReferenceHistogramFromImageOn(self):
        r"""GenerateReferenceHistogramFromImageOn(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GenerateReferenceHistogramFromImageOn(self)

    def GenerateReferenceHistogramFromImageOff(self):
        r"""GenerateReferenceHistogramFromImageOff(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GenerateReferenceHistogramFromImageOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GenerateInputRequestedRegion(self)

    def GetModifiableSourceHistogram(self):
        r"""GetModifiableSourceHistogram(self) -> itkHistogramF"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GetModifiableSourceHistogram(self)

    def GetSourceHistogram(self, *args):
        r"""
        GetSourceHistogram(self) -> itkHistogramF
        GetSourceHistogram(self) -> itkHistogramF
        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GetSourceHistogram(self, *args)

    def GetModifiableOutputHistogram(self):
        r"""GetModifiableOutputHistogram(self) -> itkHistogramF"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GetModifiableOutputHistogram(self)

    def GetOutputHistogram(self, *args):
        r"""
        GetOutputHistogram(self) -> itkHistogramF
        GetOutputHistogram(self) -> itkHistogramF
        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_GetOutputHistogram(self, *args)
    IntConvertibleToInputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_IntConvertibleToInputCheck
    
    SameDimensionCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_SameDimensionCheck
    
    DoubleConvertibleToInputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_DoubleConvertibleToInputCheck
    
    DoubleConvertibleToOutputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToDoubleCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    OutputConvertibleToDoubleCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_OutputConvertibleToDoubleCheck
    
    SameTypeCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_SameTypeCheck
    
    __swig_destroy__ = _itkHistogramMatchingImageFilterPython.delete_itkHistogramMatchingImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramMatchingImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramMatchingImageFilterIF3IF3

        Create a new object of the class itkHistogramMatchingImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramMatchingImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramMatchingImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramMatchingImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramMatchingImageFilterIF3IF3 in _itkHistogramMatchingImageFilterPython:
_itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF3IF3_swigregister(itkHistogramMatchingImageFilterIF3IF3)

def itkHistogramMatchingImageFilterIF4IF4_New():
    return itkHistogramMatchingImageFilterIF4IF4.New()

class itkHistogramMatchingImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkHistogramMatchingImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramMatchingImageFilterIF4IF4_Pointer"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramMatchingImageFilterIF4IF4_Pointer"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_Clone(self)

    def SetSourceImage(self, _arg):
        r"""
        SetSourceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF4 const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_SetSourceImage(self, _arg)

    def GetSourceImage(self):
        r"""GetSourceImage(self) -> itkImageF4"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GetSourceImage(self)

    def SetReferenceImage(self, _arg):
        r"""
        SetReferenceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF4 const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_SetReferenceImage(self, _arg)

    def GetReferenceImage(self):
        r"""GetReferenceImage(self) -> itkImageF4"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GetReferenceImage(self)

    def SetReferenceHistogram(self, _arg):
        r"""
        SetReferenceHistogram(self, _arg)

        Parameters
        ----------
        _arg: itkHistogramF const *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_SetReferenceHistogram(self, _arg)

    def GetReferenceHistogram(self):
        r"""GetReferenceHistogram(self) -> itkHistogramF"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GetReferenceHistogram(self)

    def SetNumberOfHistogramLevels(self, _arg):
        r"""
        SetNumberOfHistogramLevels(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_SetNumberOfHistogramLevels(self, _arg)

    def GetNumberOfHistogramLevels(self):
        r"""GetNumberOfHistogramLevels(self) -> unsigned long"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GetNumberOfHistogramLevels(self)

    def SetNumberOfMatchPoints(self, _arg):
        r"""
        SetNumberOfMatchPoints(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_SetNumberOfMatchPoints(self, _arg)

    def GetNumberOfMatchPoints(self):
        r"""GetNumberOfMatchPoints(self) -> unsigned long"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GetNumberOfMatchPoints(self)

    def SetThresholdAtMeanIntensity(self, _arg):
        r"""
        SetThresholdAtMeanIntensity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_SetThresholdAtMeanIntensity(self, _arg)

    def GetThresholdAtMeanIntensity(self):
        r"""GetThresholdAtMeanIntensity(self) -> bool"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GetThresholdAtMeanIntensity(self)

    def ThresholdAtMeanIntensityOn(self):
        r"""ThresholdAtMeanIntensityOn(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_ThresholdAtMeanIntensityOn(self)

    def ThresholdAtMeanIntensityOff(self):
        r"""ThresholdAtMeanIntensityOff(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_ThresholdAtMeanIntensityOff(self)

    def SetGenerateReferenceHistogramFromImage(self, _arg):
        r"""
        SetGenerateReferenceHistogramFromImage(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_SetGenerateReferenceHistogramFromImage(self, _arg)

    def GetGenerateReferenceHistogramFromImage(self):
        r"""GetGenerateReferenceHistogramFromImage(self) -> bool"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GetGenerateReferenceHistogramFromImage(self)

    def GenerateReferenceHistogramFromImageOn(self):
        r"""GenerateReferenceHistogramFromImageOn(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GenerateReferenceHistogramFromImageOn(self)

    def GenerateReferenceHistogramFromImageOff(self):
        r"""GenerateReferenceHistogramFromImageOff(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GenerateReferenceHistogramFromImageOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GenerateInputRequestedRegion(self)

    def GetModifiableSourceHistogram(self):
        r"""GetModifiableSourceHistogram(self) -> itkHistogramF"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GetModifiableSourceHistogram(self)

    def GetSourceHistogram(self, *args):
        r"""
        GetSourceHistogram(self) -> itkHistogramF
        GetSourceHistogram(self) -> itkHistogramF
        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GetSourceHistogram(self, *args)

    def GetModifiableOutputHistogram(self):
        r"""GetModifiableOutputHistogram(self) -> itkHistogramF"""
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GetModifiableOutputHistogram(self)

    def GetOutputHistogram(self, *args):
        r"""
        GetOutputHistogram(self) -> itkHistogramF
        GetOutputHistogram(self) -> itkHistogramF
        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_GetOutputHistogram(self, *args)
    IntConvertibleToInputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_IntConvertibleToInputCheck
    
    SameDimensionCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_SameDimensionCheck
    
    DoubleConvertibleToInputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_DoubleConvertibleToInputCheck
    
    DoubleConvertibleToOutputCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    InputConvertibleToDoubleCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_InputConvertibleToDoubleCheck
    
    OutputConvertibleToDoubleCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_OutputConvertibleToDoubleCheck
    
    SameTypeCheck = _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_SameTypeCheck
    
    __swig_destroy__ = _itkHistogramMatchingImageFilterPython.delete_itkHistogramMatchingImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramMatchingImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramMatchingImageFilterIF4IF4

        Create a new object of the class itkHistogramMatchingImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramMatchingImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramMatchingImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramMatchingImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramMatchingImageFilterIF4IF4 in _itkHistogramMatchingImageFilterPython:
_itkHistogramMatchingImageFilterPython.itkHistogramMatchingImageFilterIF4IF4_swigregister(itkHistogramMatchingImageFilterIF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def histogram_matching_image_filter(*args: itkt.ImageLike,  source_image: itkt.Image=..., reference_image: itkt.Image=..., reference_histogram=..., number_of_histogram_levels: int=..., number_of_match_points: int=..., threshold_at_mean_intensity: bool=..., generate_reference_histogram_from_image: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for HistogramMatchingImageFilter"""
    import itk

    kwarg_typehints = { 'source_image':source_image,'reference_image':reference_image,'reference_histogram':reference_histogram,'number_of_histogram_levels':number_of_histogram_levels,'number_of_match_points':number_of_match_points,'threshold_at_mean_intensity':threshold_at_mean_intensity,'generate_reference_histogram_from_image':generate_reference_histogram_from_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HistogramMatchingImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def histogram_matching_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.HistogramMatchingImageFilter
    histogram_matching_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    histogram_matching_image_filter.__doc__ = filter_object.__doc__



