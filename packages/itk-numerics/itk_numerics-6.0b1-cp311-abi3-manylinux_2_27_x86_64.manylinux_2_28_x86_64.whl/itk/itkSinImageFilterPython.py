# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSinImageFilterPython
else:
    import _itkSinImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkUnaryGeneratorImageFilterPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython

def itkSinImageFilterID2ID2_New():
    return itkSinImageFilterID2ID2.New()

class itkSinImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""Proxy of C++ itkSinImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSinImageFilterID2ID2_Pointer"""
        return _itkSinImageFilterPython.itkSinImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSinImageFilterID2ID2_Pointer"""
        return _itkSinImageFilterPython.itkSinImageFilterID2ID2_Clone(self)
    InputConvertibleToDoubleCheck = _itkSinImageFilterPython.itkSinImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSinImageFilterPython.itkSinImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSinImageFilterPython.delete_itkSinImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSinImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSinImageFilterPython.itkSinImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSinImageFilterID2ID2

        Create a new object of the class itkSinImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinImageFilterID2ID2 in _itkSinImageFilterPython:
_itkSinImageFilterPython.itkSinImageFilterID2ID2_swigregister(itkSinImageFilterID2ID2)

def itkSinImageFilterID3ID3_New():
    return itkSinImageFilterID3ID3.New()

class itkSinImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""Proxy of C++ itkSinImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSinImageFilterID3ID3_Pointer"""
        return _itkSinImageFilterPython.itkSinImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSinImageFilterID3ID3_Pointer"""
        return _itkSinImageFilterPython.itkSinImageFilterID3ID3_Clone(self)
    InputConvertibleToDoubleCheck = _itkSinImageFilterPython.itkSinImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSinImageFilterPython.itkSinImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSinImageFilterPython.delete_itkSinImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSinImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSinImageFilterPython.itkSinImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSinImageFilterID3ID3

        Create a new object of the class itkSinImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinImageFilterID3ID3 in _itkSinImageFilterPython:
_itkSinImageFilterPython.itkSinImageFilterID3ID3_swigregister(itkSinImageFilterID3ID3)

def itkSinImageFilterID4ID4_New():
    return itkSinImageFilterID4ID4.New()

class itkSinImageFilterID4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID4ID4):
    r"""Proxy of C++ itkSinImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSinImageFilterID4ID4_Pointer"""
        return _itkSinImageFilterPython.itkSinImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSinImageFilterID4ID4_Pointer"""
        return _itkSinImageFilterPython.itkSinImageFilterID4ID4_Clone(self)
    InputConvertibleToDoubleCheck = _itkSinImageFilterPython.itkSinImageFilterID4ID4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSinImageFilterPython.itkSinImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSinImageFilterPython.delete_itkSinImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSinImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSinImageFilterPython.itkSinImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSinImageFilterID4ID4

        Create a new object of the class itkSinImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinImageFilterID4ID4 in _itkSinImageFilterPython:
_itkSinImageFilterPython.itkSinImageFilterID4ID4_swigregister(itkSinImageFilterID4ID4)

def itkSinImageFilterIF2IF2_New():
    return itkSinImageFilterIF2IF2.New()

class itkSinImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""Proxy of C++ itkSinImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSinImageFilterIF2IF2_Pointer"""
        return _itkSinImageFilterPython.itkSinImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSinImageFilterIF2IF2_Pointer"""
        return _itkSinImageFilterPython.itkSinImageFilterIF2IF2_Clone(self)
    InputConvertibleToDoubleCheck = _itkSinImageFilterPython.itkSinImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSinImageFilterPython.itkSinImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSinImageFilterPython.delete_itkSinImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSinImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSinImageFilterPython.itkSinImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSinImageFilterIF2IF2

        Create a new object of the class itkSinImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinImageFilterIF2IF2 in _itkSinImageFilterPython:
_itkSinImageFilterPython.itkSinImageFilterIF2IF2_swigregister(itkSinImageFilterIF2IF2)

def itkSinImageFilterIF3IF3_New():
    return itkSinImageFilterIF3IF3.New()

class itkSinImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""Proxy of C++ itkSinImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSinImageFilterIF3IF3_Pointer"""
        return _itkSinImageFilterPython.itkSinImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSinImageFilterIF3IF3_Pointer"""
        return _itkSinImageFilterPython.itkSinImageFilterIF3IF3_Clone(self)
    InputConvertibleToDoubleCheck = _itkSinImageFilterPython.itkSinImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSinImageFilterPython.itkSinImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSinImageFilterPython.delete_itkSinImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSinImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSinImageFilterPython.itkSinImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSinImageFilterIF3IF3

        Create a new object of the class itkSinImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinImageFilterIF3IF3 in _itkSinImageFilterPython:
_itkSinImageFilterPython.itkSinImageFilterIF3IF3_swigregister(itkSinImageFilterIF3IF3)

def itkSinImageFilterIF4IF4_New():
    return itkSinImageFilterIF4IF4.New()

class itkSinImageFilterIF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF4IF4):
    r"""Proxy of C++ itkSinImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSinImageFilterIF4IF4_Pointer"""
        return _itkSinImageFilterPython.itkSinImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSinImageFilterIF4IF4_Pointer"""
        return _itkSinImageFilterPython.itkSinImageFilterIF4IF4_Clone(self)
    InputConvertibleToDoubleCheck = _itkSinImageFilterPython.itkSinImageFilterIF4IF4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSinImageFilterPython.itkSinImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSinImageFilterPython.delete_itkSinImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSinImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSinImageFilterPython.itkSinImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSinImageFilterIF4IF4

        Create a new object of the class itkSinImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinImageFilterIF4IF4 in _itkSinImageFilterPython:
_itkSinImageFilterPython.itkSinImageFilterIF4IF4_swigregister(itkSinImageFilterIF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def sin_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SinImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SinImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def sin_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.SinImageFilter
    sin_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    sin_image_filter.__doc__ = filter_object.__doc__



