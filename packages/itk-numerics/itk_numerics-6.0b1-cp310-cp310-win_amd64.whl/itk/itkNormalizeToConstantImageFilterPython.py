# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNormalizeToConstantImageFilterPython
else:
    import _itkNormalizeToConstantImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterAPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkNormalizeToConstantImageFilterID2ID2_New():
    return itkNormalizeToConstantImageFilterID2ID2.New()

class itkNormalizeToConstantImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterID2ID2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterID2ID2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterID2ID2

        Create a new object of the class itkNormalizeToConstantImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterID2ID2 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_swigregister(itkNormalizeToConstantImageFilterID2ID2)

def itkNormalizeToConstantImageFilterID3ID3_New():
    return itkNormalizeToConstantImageFilterID3ID3.New()

class itkNormalizeToConstantImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterID3ID3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterID3ID3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterID3ID3

        Create a new object of the class itkNormalizeToConstantImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterID3ID3 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_swigregister(itkNormalizeToConstantImageFilterID3ID3)

def itkNormalizeToConstantImageFilterID4ID4_New():
    return itkNormalizeToConstantImageFilterID4ID4.New()

class itkNormalizeToConstantImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterID4ID4_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterID4ID4_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID4ID4_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID4ID4_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID4ID4_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID4ID4_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterID4ID4

        Create a new object of the class itkNormalizeToConstantImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterID4ID4 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID4ID4_swigregister(itkNormalizeToConstantImageFilterID4ID4)

def itkNormalizeToConstantImageFilterIF2IF2_New():
    return itkNormalizeToConstantImageFilterIF2IF2.New()

class itkNormalizeToConstantImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterIF2IF2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterIF2IF2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIF2IF2

        Create a new object of the class itkNormalizeToConstantImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIF2IF2 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_swigregister(itkNormalizeToConstantImageFilterIF2IF2)

def itkNormalizeToConstantImageFilterIF3IF3_New():
    return itkNormalizeToConstantImageFilterIF3IF3.New()

class itkNormalizeToConstantImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterIF3IF3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterIF3IF3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIF3IF3

        Create a new object of the class itkNormalizeToConstantImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIF3IF3 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_swigregister(itkNormalizeToConstantImageFilterIF3IF3)

def itkNormalizeToConstantImageFilterIF4IF4_New():
    return itkNormalizeToConstantImageFilterIF4IF4.New()

class itkNormalizeToConstantImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterIF4IF4_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterIF4IF4_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF4IF4_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF4IF4_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF4IF4_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF4IF4_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIF4IF4

        Create a new object of the class itkNormalizeToConstantImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIF4IF4 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF4IF4_swigregister(itkNormalizeToConstantImageFilterIF4IF4)

def itkNormalizeToConstantImageFilterISS2ISS2_New():
    return itkNormalizeToConstantImageFilterISS2ISS2.New()

class itkNormalizeToConstantImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterISS2ISS2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterISS2ISS2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterISS2ISS2

        Create a new object of the class itkNormalizeToConstantImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterISS2ISS2 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_swigregister(itkNormalizeToConstantImageFilterISS2ISS2)

def itkNormalizeToConstantImageFilterISS3ISS3_New():
    return itkNormalizeToConstantImageFilterISS3ISS3.New()

class itkNormalizeToConstantImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterISS3ISS3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterISS3ISS3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterISS3ISS3

        Create a new object of the class itkNormalizeToConstantImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterISS3ISS3 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_swigregister(itkNormalizeToConstantImageFilterISS3ISS3)

def itkNormalizeToConstantImageFilterISS4ISS4_New():
    return itkNormalizeToConstantImageFilterISS4ISS4.New()

class itkNormalizeToConstantImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterISS4ISS4_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterISS4ISS4_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS4ISS4_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS4ISS4_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS4ISS4_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS4ISS4_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterISS4ISS4

        Create a new object of the class itkNormalizeToConstantImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterISS4ISS4 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS4ISS4_swigregister(itkNormalizeToConstantImageFilterISS4ISS4)

def itkNormalizeToConstantImageFilterIUC2IUC2_New():
    return itkNormalizeToConstantImageFilterIUC2IUC2.New()

class itkNormalizeToConstantImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterIUC2IUC2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterIUC2IUC2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUC2IUC2

        Create a new object of the class itkNormalizeToConstantImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIUC2IUC2 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_swigregister(itkNormalizeToConstantImageFilterIUC2IUC2)

def itkNormalizeToConstantImageFilterIUC3IUC3_New():
    return itkNormalizeToConstantImageFilterIUC3IUC3.New()

class itkNormalizeToConstantImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterIUC3IUC3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterIUC3IUC3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUC3IUC3

        Create a new object of the class itkNormalizeToConstantImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIUC3IUC3 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_swigregister(itkNormalizeToConstantImageFilterIUC3IUC3)

def itkNormalizeToConstantImageFilterIUC4IUC4_New():
    return itkNormalizeToConstantImageFilterIUC4IUC4.New()

class itkNormalizeToConstantImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterIUC4IUC4_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterIUC4IUC4_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC4IUC4_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC4IUC4_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC4IUC4_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC4IUC4_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUC4IUC4

        Create a new object of the class itkNormalizeToConstantImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIUC4IUC4 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC4IUC4_swigregister(itkNormalizeToConstantImageFilterIUC4IUC4)

def itkNormalizeToConstantImageFilterIUS2IUS2_New():
    return itkNormalizeToConstantImageFilterIUS2IUS2.New()

class itkNormalizeToConstantImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterIUS2IUS2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterIUS2IUS2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUS2IUS2

        Create a new object of the class itkNormalizeToConstantImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIUS2IUS2 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_swigregister(itkNormalizeToConstantImageFilterIUS2IUS2)

def itkNormalizeToConstantImageFilterIUS3IUS3_New():
    return itkNormalizeToConstantImageFilterIUS3IUS3.New()

class itkNormalizeToConstantImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterIUS3IUS3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterIUS3IUS3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUS3IUS3

        Create a new object of the class itkNormalizeToConstantImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIUS3IUS3 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_swigregister(itkNormalizeToConstantImageFilterIUS3IUS3)

def itkNormalizeToConstantImageFilterIUS4IUS4_New():
    return itkNormalizeToConstantImageFilterIUS4IUS4.New()

class itkNormalizeToConstantImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkNormalizeToConstantImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeToConstantImageFilterIUS4IUS4_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeToConstantImageFilterIUS4IUS4_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS4IUS4_Clone(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS4IUS4_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS4IUS4_GetConstant(self)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS4IUS4_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeToConstantImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUS4IUS4

        Create a new object of the class itkNormalizeToConstantImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIUS4IUS4 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS4IUS4_swigregister(itkNormalizeToConstantImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def normalize_to_constant_image_filter(*args: itkt.ImageLike,  constant: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for NormalizeToConstantImageFilter"""
    import itk

    kwarg_typehints = { 'constant':constant }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.NormalizeToConstantImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def normalize_to_constant_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.NormalizeToConstantImageFilter
    normalize_to_constant_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    normalize_to_constant_image_filter.__doc__ = filter_object.__doc__



