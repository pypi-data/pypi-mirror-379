# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKPathPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPathToImageFilterPython
else:
    import _itkPathToImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPolyLineParametricPathPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkArrayPython
import itk.itkParametricPathPython
import itk.itkPathBasePython

def itkPathToImageFilterPLPP2ID2_New():
    return itkPathToImageFilterPLPP2ID2.New()

class itkPathToImageFilterPLPP2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkPathToImageFilterPLPP2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP2ID2_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP2ID2_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath2 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath2 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath2
        GetInput(self, idx) -> itkPolyLineParametricPath2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> double"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> double"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize2"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP2ID2

        Create a new object of the class itkPathToImageFilterPLPP2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP2ID2 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ID2_swigregister(itkPathToImageFilterPLPP2ID2)

def itkPathToImageFilterPLPP2IF2_New():
    return itkPathToImageFilterPLPP2IF2.New()

class itkPathToImageFilterPLPP2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkPathToImageFilterPLPP2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP2IF2_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP2IF2_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath2 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath2 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath2
        GetInput(self, idx) -> itkPolyLineParametricPath2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> float"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> float"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize2"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP2IF2

        Create a new object of the class itkPathToImageFilterPLPP2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP2IF2 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IF2_swigregister(itkPathToImageFilterPLPP2IF2)

def itkPathToImageFilterPLPP2ISS2_New():
    return itkPathToImageFilterPLPP2ISS2.New()

class itkPathToImageFilterPLPP2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkPathToImageFilterPLPP2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP2ISS2_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP2ISS2_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath2 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath2 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath2
        GetInput(self, idx) -> itkPolyLineParametricPath2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> short"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> short"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize2"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP2ISS2

        Create a new object of the class itkPathToImageFilterPLPP2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP2ISS2 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP2ISS2_swigregister(itkPathToImageFilterPLPP2ISS2)

def itkPathToImageFilterPLPP2IUC2_New():
    return itkPathToImageFilterPLPP2IUC2.New()

class itkPathToImageFilterPLPP2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkPathToImageFilterPLPP2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP2IUC2_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP2IUC2_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath2 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath2 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath2
        GetInput(self, idx) -> itkPolyLineParametricPath2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> unsigned char"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned char"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize2"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP2IUC2

        Create a new object of the class itkPathToImageFilterPLPP2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP2IUC2 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUC2_swigregister(itkPathToImageFilterPLPP2IUC2)

def itkPathToImageFilterPLPP2IUS2_New():
    return itkPathToImageFilterPLPP2IUS2.New()

class itkPathToImageFilterPLPP2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkPathToImageFilterPLPP2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP2IUS2_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP2IUS2_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath2 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath2 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath2
        GetInput(self, idx) -> itkPolyLineParametricPath2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> unsigned short"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned short"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize2"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP2IUS2

        Create a new object of the class itkPathToImageFilterPLPP2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP2IUS2 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP2IUS2_swigregister(itkPathToImageFilterPLPP2IUS2)

def itkPathToImageFilterPLPP3ID3_New():
    return itkPathToImageFilterPLPP3ID3.New()

class itkPathToImageFilterPLPP3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkPathToImageFilterPLPP3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP3ID3_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP3ID3_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath3 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath3 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath3
        GetInput(self, idx) -> itkPolyLineParametricPath3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> double"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> double"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP3ID3

        Create a new object of the class itkPathToImageFilterPLPP3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP3ID3 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ID3_swigregister(itkPathToImageFilterPLPP3ID3)

def itkPathToImageFilterPLPP3IF3_New():
    return itkPathToImageFilterPLPP3IF3.New()

class itkPathToImageFilterPLPP3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkPathToImageFilterPLPP3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP3IF3_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP3IF3_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath3 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath3 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath3
        GetInput(self, idx) -> itkPolyLineParametricPath3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> float"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> float"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP3IF3

        Create a new object of the class itkPathToImageFilterPLPP3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP3IF3 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IF3_swigregister(itkPathToImageFilterPLPP3IF3)

def itkPathToImageFilterPLPP3ISS3_New():
    return itkPathToImageFilterPLPP3ISS3.New()

class itkPathToImageFilterPLPP3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkPathToImageFilterPLPP3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP3ISS3_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP3ISS3_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath3 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath3 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath3
        GetInput(self, idx) -> itkPolyLineParametricPath3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> short"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> short"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP3ISS3

        Create a new object of the class itkPathToImageFilterPLPP3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP3ISS3 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP3ISS3_swigregister(itkPathToImageFilterPLPP3ISS3)

def itkPathToImageFilterPLPP3IUC3_New():
    return itkPathToImageFilterPLPP3IUC3.New()

class itkPathToImageFilterPLPP3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkPathToImageFilterPLPP3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP3IUC3_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP3IUC3_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath3 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath3 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath3
        GetInput(self, idx) -> itkPolyLineParametricPath3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> unsigned char"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned char"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP3IUC3

        Create a new object of the class itkPathToImageFilterPLPP3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP3IUC3 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUC3_swigregister(itkPathToImageFilterPLPP3IUC3)

def itkPathToImageFilterPLPP3IUS3_New():
    return itkPathToImageFilterPLPP3IUS3.New()

class itkPathToImageFilterPLPP3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkPathToImageFilterPLPP3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP3IUS3_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP3IUS3_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath3 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath3 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath3
        GetInput(self, idx) -> itkPolyLineParametricPath3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> unsigned short"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned short"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP3IUS3

        Create a new object of the class itkPathToImageFilterPLPP3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP3IUS3 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP3IUS3_swigregister(itkPathToImageFilterPLPP3IUS3)

def itkPathToImageFilterPLPP4ID4_New():
    return itkPathToImageFilterPLPP4ID4.New()

class itkPathToImageFilterPLPP4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkPathToImageFilterPLPP4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP4ID4_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP4ID4_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath4 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath4 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath4
        GetInput(self, idx) -> itkPolyLineParametricPath4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> double"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> double"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize4"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP4ID4

        Create a new object of the class itkPathToImageFilterPLPP4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP4ID4 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP4ID4_swigregister(itkPathToImageFilterPLPP4ID4)

def itkPathToImageFilterPLPP4IF4_New():
    return itkPathToImageFilterPLPP4IF4.New()

class itkPathToImageFilterPLPP4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkPathToImageFilterPLPP4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP4IF4_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP4IF4_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath4 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath4 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath4
        GetInput(self, idx) -> itkPolyLineParametricPath4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> float"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> float"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize4"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP4IF4

        Create a new object of the class itkPathToImageFilterPLPP4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP4IF4 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP4IF4_swigregister(itkPathToImageFilterPLPP4IF4)

def itkPathToImageFilterPLPP4ISS4_New():
    return itkPathToImageFilterPLPP4ISS4.New()

class itkPathToImageFilterPLPP4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkPathToImageFilterPLPP4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP4ISS4_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP4ISS4_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath4 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath4 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath4
        GetInput(self, idx) -> itkPolyLineParametricPath4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> short"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> short"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize4"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP4ISS4

        Create a new object of the class itkPathToImageFilterPLPP4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP4ISS4 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP4ISS4_swigregister(itkPathToImageFilterPLPP4ISS4)

def itkPathToImageFilterPLPP4IUC4_New():
    return itkPathToImageFilterPLPP4IUC4.New()

class itkPathToImageFilterPLPP4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkPathToImageFilterPLPP4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP4IUC4_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP4IUC4_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath4 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath4 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath4
        GetInput(self, idx) -> itkPolyLineParametricPath4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> unsigned char"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned char"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize4"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP4IUC4

        Create a new object of the class itkPathToImageFilterPLPP4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP4IUC4 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUC4_swigregister(itkPathToImageFilterPLPP4IUC4)

def itkPathToImageFilterPLPP4IUS4_New():
    return itkPathToImageFilterPLPP4IUS4.New()

class itkPathToImageFilterPLPP4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkPathToImageFilterPLPP4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPathToImageFilterPLPP4IUS4_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPathToImageFilterPLPP4IUS4_Pointer"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_Clone(self)

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyLineParametricPath4 const *

        SetInput(self, arg0, path)

        Parameters
        ----------
        arg0: unsigned int
        path: itkPolyLineParametricPath4 const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyLineParametricPath4
        GetInput(self, idx) -> itkPolyLineParametricPath4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_GetInput(self, *args)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_GetSpacing(self)

    def SetPathValue(self, _arg):
        r"""
        SetPathValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_SetPathValue(self, _arg)

    def GetPathValue(self):
        r"""GetPathValue(self) -> unsigned short"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_GetPathValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned short"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_GetBackgroundValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> double const *"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_GetOrigin(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize4"""
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_GetSize(self)
    __swig_destroy__ = _itkPathToImageFilterPython.delete_itkPathToImageFilterPLPP4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathToImageFilterPLPP4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPathToImageFilterPLPP4IUS4

        Create a new object of the class itkPathToImageFilterPLPP4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathToImageFilterPLPP4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathToImageFilterPLPP4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathToImageFilterPLPP4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathToImageFilterPLPP4IUS4 in _itkPathToImageFilterPython:
_itkPathToImageFilterPython.itkPathToImageFilterPLPP4IUS4_swigregister(itkPathToImageFilterPLPP4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def path_to_image_filter(*args,  spacing=..., path_value: int=..., background_value: int=..., origin=..., size: Sequence[int]=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for PathToImageFilter"""
    import itk

    kwarg_typehints = { 'spacing':spacing,'path_value':path_value,'background_value':background_value,'origin':origin,'size':size }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.PathToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def path_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKPath.PathToImageFilter
    path_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    path_to_image_filter.__doc__ = filter_object.__doc__



