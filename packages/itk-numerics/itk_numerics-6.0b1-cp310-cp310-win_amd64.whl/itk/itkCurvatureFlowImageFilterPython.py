# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCurvatureFlowPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCurvatureFlowImageFilterPython
else:
    import _itkCurvatureFlowImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def itkCurvatureFlowImageFilterID2ID2_New():
    return itkCurvatureFlowImageFilterID2ID2.New()

class itkCurvatureFlowImageFilterID2ID2(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID2ID2):
    r"""Proxy of C++ itkCurvatureFlowImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCurvatureFlowImageFilterID2ID2_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCurvatureFlowImageFilterID2ID2_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_Clone(self)

    def SetTimeStep(self, _arg):
        r"""
        SetTimeStep(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_SetTimeStep(self, _arg)

    def GetTimeStep(self):
        r"""GetTimeStep(self) -> double"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_GetTimeStep(self)
    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_OutputConvertibleToDoubleCheck
    
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_OutputDivisionOperatorsCheck
    
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_DoubleOutputMultiplyOperatorCheck
    
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_IntOutputMultiplyOperatorCheck
    
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_OutputLessThanDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCurvatureFlowImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterID2ID2

        Create a new object of the class itkCurvatureFlowImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCurvatureFlowImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCurvatureFlowImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCurvatureFlowImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCurvatureFlowImageFilterID2ID2 in _itkCurvatureFlowImageFilterPython:
_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_swigregister(itkCurvatureFlowImageFilterID2ID2)

def itkCurvatureFlowImageFilterID3ID3_New():
    return itkCurvatureFlowImageFilterID3ID3.New()

class itkCurvatureFlowImageFilterID3ID3(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID3ID3):
    r"""Proxy of C++ itkCurvatureFlowImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCurvatureFlowImageFilterID3ID3_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCurvatureFlowImageFilterID3ID3_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_Clone(self)

    def SetTimeStep(self, _arg):
        r"""
        SetTimeStep(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_SetTimeStep(self, _arg)

    def GetTimeStep(self):
        r"""GetTimeStep(self) -> double"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_GetTimeStep(self)
    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_OutputConvertibleToDoubleCheck
    
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_OutputDivisionOperatorsCheck
    
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_DoubleOutputMultiplyOperatorCheck
    
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_IntOutputMultiplyOperatorCheck
    
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_OutputLessThanDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCurvatureFlowImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterID3ID3

        Create a new object of the class itkCurvatureFlowImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCurvatureFlowImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCurvatureFlowImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCurvatureFlowImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCurvatureFlowImageFilterID3ID3 in _itkCurvatureFlowImageFilterPython:
_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_swigregister(itkCurvatureFlowImageFilterID3ID3)

def itkCurvatureFlowImageFilterID4ID4_New():
    return itkCurvatureFlowImageFilterID4ID4.New()

class itkCurvatureFlowImageFilterID4ID4(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID4ID4):
    r"""Proxy of C++ itkCurvatureFlowImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCurvatureFlowImageFilterID4ID4_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCurvatureFlowImageFilterID4ID4_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID4ID4_Clone(self)

    def SetTimeStep(self, _arg):
        r"""
        SetTimeStep(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID4ID4_SetTimeStep(self, _arg)

    def GetTimeStep(self):
        r"""GetTimeStep(self) -> double"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID4ID4_GetTimeStep(self)
    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID4ID4_OutputConvertibleToDoubleCheck
    
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID4ID4_OutputDivisionOperatorsCheck
    
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID4ID4_DoubleOutputMultiplyOperatorCheck
    
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID4ID4_IntOutputMultiplyOperatorCheck
    
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID4ID4_OutputLessThanDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID4ID4_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCurvatureFlowImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterID4ID4

        Create a new object of the class itkCurvatureFlowImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCurvatureFlowImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCurvatureFlowImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCurvatureFlowImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCurvatureFlowImageFilterID4ID4 in _itkCurvatureFlowImageFilterPython:
_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID4ID4_swigregister(itkCurvatureFlowImageFilterID4ID4)

def itkCurvatureFlowImageFilterIF2IF2_New():
    return itkCurvatureFlowImageFilterIF2IF2.New()

class itkCurvatureFlowImageFilterIF2IF2(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2):
    r"""Proxy of C++ itkCurvatureFlowImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCurvatureFlowImageFilterIF2IF2_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCurvatureFlowImageFilterIF2IF2_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_Clone(self)

    def SetTimeStep(self, _arg):
        r"""
        SetTimeStep(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_SetTimeStep(self, _arg)

    def GetTimeStep(self):
        r"""GetTimeStep(self) -> double"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_GetTimeStep(self)
    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_OutputConvertibleToDoubleCheck
    
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_OutputDivisionOperatorsCheck
    
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_DoubleOutputMultiplyOperatorCheck
    
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_IntOutputMultiplyOperatorCheck
    
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_OutputLessThanDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCurvatureFlowImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterIF2IF2

        Create a new object of the class itkCurvatureFlowImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCurvatureFlowImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCurvatureFlowImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCurvatureFlowImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCurvatureFlowImageFilterIF2IF2 in _itkCurvatureFlowImageFilterPython:
_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_swigregister(itkCurvatureFlowImageFilterIF2IF2)

def itkCurvatureFlowImageFilterIF3IF3_New():
    return itkCurvatureFlowImageFilterIF3IF3.New()

class itkCurvatureFlowImageFilterIF3IF3(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3):
    r"""Proxy of C++ itkCurvatureFlowImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCurvatureFlowImageFilterIF3IF3_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCurvatureFlowImageFilterIF3IF3_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_Clone(self)

    def SetTimeStep(self, _arg):
        r"""
        SetTimeStep(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_SetTimeStep(self, _arg)

    def GetTimeStep(self):
        r"""GetTimeStep(self) -> double"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_GetTimeStep(self)
    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_OutputConvertibleToDoubleCheck
    
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_OutputDivisionOperatorsCheck
    
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_DoubleOutputMultiplyOperatorCheck
    
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_IntOutputMultiplyOperatorCheck
    
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_OutputLessThanDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCurvatureFlowImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterIF3IF3

        Create a new object of the class itkCurvatureFlowImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCurvatureFlowImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCurvatureFlowImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCurvatureFlowImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCurvatureFlowImageFilterIF3IF3 in _itkCurvatureFlowImageFilterPython:
_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_swigregister(itkCurvatureFlowImageFilterIF3IF3)

def itkCurvatureFlowImageFilterIF4IF4_New():
    return itkCurvatureFlowImageFilterIF4IF4.New()

class itkCurvatureFlowImageFilterIF4IF4(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF4IF4):
    r"""Proxy of C++ itkCurvatureFlowImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCurvatureFlowImageFilterIF4IF4_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCurvatureFlowImageFilterIF4IF4_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF4IF4_Clone(self)

    def SetTimeStep(self, _arg):
        r"""
        SetTimeStep(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF4IF4_SetTimeStep(self, _arg)

    def GetTimeStep(self):
        r"""GetTimeStep(self) -> double"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF4IF4_GetTimeStep(self)
    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF4IF4_OutputConvertibleToDoubleCheck
    
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF4IF4_OutputDivisionOperatorsCheck
    
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF4IF4_DoubleOutputMultiplyOperatorCheck
    
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF4IF4_IntOutputMultiplyOperatorCheck
    
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF4IF4_OutputLessThanDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF4IF4_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCurvatureFlowImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterIF4IF4

        Create a new object of the class itkCurvatureFlowImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCurvatureFlowImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCurvatureFlowImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCurvatureFlowImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCurvatureFlowImageFilterIF4IF4 in _itkCurvatureFlowImageFilterPython:
_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF4IF4_swigregister(itkCurvatureFlowImageFilterIF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def curvature_flow_image_filter(*args: itkt.ImageLike,  time_step: float=..., difference_function=..., number_of_iterations: int=..., use_image_spacing: bool=..., maximum_rms_error: float=..., rms_change: float=..., manual_reinitialization: bool=..., is_initialized: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CurvatureFlowImageFilter"""
    import itk

    kwarg_typehints = { 'time_step':time_step,'difference_function':difference_function,'number_of_iterations':number_of_iterations,'use_image_spacing':use_image_spacing,'maximum_rms_error':maximum_rms_error,'rms_change':rms_change,'manual_reinitialization':manual_reinitialization,'is_initialized':is_initialized }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CurvatureFlowImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def curvature_flow_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKCurvatureFlow.CurvatureFlowImageFilter
    curvature_flow_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    curvature_flow_image_filter.__doc__ = filter_object.__doc__



