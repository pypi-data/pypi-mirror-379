# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkComplexToModulusImageFilterPython
else:
    import _itkComplexToModulusImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkUnaryGeneratorImageFilterPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython

def itkComplexToModulusImageFilterICD2ID2_New():
    return itkComplexToModulusImageFilterICD2ID2.New()

class itkComplexToModulusImageFilterICD2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICD2ID2):
    r"""Proxy of C++ itkComplexToModulusImageFilterICD2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToModulusImageFilterICD2ID2_Pointer"""
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToModulusImageFilterICD2ID2_Pointer"""
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD2ID2_Clone(self)
    InputMultiplyOperatorCheck = _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD2ID2_InputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkComplexToModulusImageFilterPython.delete_itkComplexToModulusImageFilterICD2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToModulusImageFilterICD2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToModulusImageFilterICD2ID2

        Create a new object of the class itkComplexToModulusImageFilterICD2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToModulusImageFilterICD2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToModulusImageFilterICD2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToModulusImageFilterICD2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToModulusImageFilterICD2ID2 in _itkComplexToModulusImageFilterPython:
_itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD2ID2_swigregister(itkComplexToModulusImageFilterICD2ID2)

def itkComplexToModulusImageFilterICD3ID3_New():
    return itkComplexToModulusImageFilterICD3ID3.New()

class itkComplexToModulusImageFilterICD3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICD3ID3):
    r"""Proxy of C++ itkComplexToModulusImageFilterICD3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToModulusImageFilterICD3ID3_Pointer"""
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToModulusImageFilterICD3ID3_Pointer"""
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD3ID3_Clone(self)
    InputMultiplyOperatorCheck = _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD3ID3_InputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkComplexToModulusImageFilterPython.delete_itkComplexToModulusImageFilterICD3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToModulusImageFilterICD3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToModulusImageFilterICD3ID3

        Create a new object of the class itkComplexToModulusImageFilterICD3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToModulusImageFilterICD3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToModulusImageFilterICD3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToModulusImageFilterICD3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToModulusImageFilterICD3ID3 in _itkComplexToModulusImageFilterPython:
_itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD3ID3_swigregister(itkComplexToModulusImageFilterICD3ID3)

def itkComplexToModulusImageFilterICD4ID4_New():
    return itkComplexToModulusImageFilterICD4ID4.New()

class itkComplexToModulusImageFilterICD4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICD4ID4):
    r"""Proxy of C++ itkComplexToModulusImageFilterICD4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToModulusImageFilterICD4ID4_Pointer"""
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToModulusImageFilterICD4ID4_Pointer"""
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD4ID4_Clone(self)
    InputMultiplyOperatorCheck = _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD4ID4_InputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkComplexToModulusImageFilterPython.delete_itkComplexToModulusImageFilterICD4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToModulusImageFilterICD4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToModulusImageFilterICD4ID4

        Create a new object of the class itkComplexToModulusImageFilterICD4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToModulusImageFilterICD4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToModulusImageFilterICD4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToModulusImageFilterICD4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToModulusImageFilterICD4ID4 in _itkComplexToModulusImageFilterPython:
_itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICD4ID4_swigregister(itkComplexToModulusImageFilterICD4ID4)

def itkComplexToModulusImageFilterICF2IF2_New():
    return itkComplexToModulusImageFilterICF2IF2.New()

class itkComplexToModulusImageFilterICF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IF2):
    r"""Proxy of C++ itkComplexToModulusImageFilterICF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToModulusImageFilterICF2IF2_Pointer"""
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToModulusImageFilterICF2IF2_Pointer"""
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF2IF2_Clone(self)
    InputMultiplyOperatorCheck = _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF2IF2_InputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkComplexToModulusImageFilterPython.delete_itkComplexToModulusImageFilterICF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToModulusImageFilterICF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToModulusImageFilterICF2IF2

        Create a new object of the class itkComplexToModulusImageFilterICF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToModulusImageFilterICF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToModulusImageFilterICF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToModulusImageFilterICF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToModulusImageFilterICF2IF2 in _itkComplexToModulusImageFilterPython:
_itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF2IF2_swigregister(itkComplexToModulusImageFilterICF2IF2)

def itkComplexToModulusImageFilterICF3IF3_New():
    return itkComplexToModulusImageFilterICF3IF3.New()

class itkComplexToModulusImageFilterICF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IF3):
    r"""Proxy of C++ itkComplexToModulusImageFilterICF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToModulusImageFilterICF3IF3_Pointer"""
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToModulusImageFilterICF3IF3_Pointer"""
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF3IF3_Clone(self)
    InputMultiplyOperatorCheck = _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF3IF3_InputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkComplexToModulusImageFilterPython.delete_itkComplexToModulusImageFilterICF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToModulusImageFilterICF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToModulusImageFilterICF3IF3

        Create a new object of the class itkComplexToModulusImageFilterICF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToModulusImageFilterICF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToModulusImageFilterICF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToModulusImageFilterICF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToModulusImageFilterICF3IF3 in _itkComplexToModulusImageFilterPython:
_itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF3IF3_swigregister(itkComplexToModulusImageFilterICF3IF3)

def itkComplexToModulusImageFilterICF4IF4_New():
    return itkComplexToModulusImageFilterICF4IF4.New()

class itkComplexToModulusImageFilterICF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF4IF4):
    r"""Proxy of C++ itkComplexToModulusImageFilterICF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToModulusImageFilterICF4IF4_Pointer"""
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToModulusImageFilterICF4IF4_Pointer"""
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF4IF4_Clone(self)
    InputMultiplyOperatorCheck = _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF4IF4_InputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkComplexToModulusImageFilterPython.delete_itkComplexToModulusImageFilterICF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToModulusImageFilterICF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToModulusImageFilterICF4IF4

        Create a new object of the class itkComplexToModulusImageFilterICF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToModulusImageFilterICF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToModulusImageFilterICF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToModulusImageFilterICF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToModulusImageFilterICF4IF4 in _itkComplexToModulusImageFilterPython:
_itkComplexToModulusImageFilterPython.itkComplexToModulusImageFilterICF4IF4_swigregister(itkComplexToModulusImageFilterICF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def complex_to_modulus_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ComplexToModulusImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ComplexToModulusImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def complex_to_modulus_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.ComplexToModulusImageFilter
    complex_to_modulus_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    complex_to_modulus_image_filter.__doc__ = filter_object.__doc__



