# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKThresholdingPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkKittlerIllingworthThresholdCalculatorPython
else:
    import _itkKittlerIllingworthThresholdCalculatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkHistogramThresholdCalculatorPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkArrayPython
import itk.itkRGBPixelPython
import itk.itkHistogramPython
import itk.itkSamplePython

def itkKittlerIllingworthThresholdCalculatorHDD_New():
    return itkKittlerIllingworthThresholdCalculatorHDD.New()

class itkKittlerIllingworthThresholdCalculatorHDD(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDD):
    r"""Proxy of C++ itkKittlerIllingworthThresholdCalculatorHDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKittlerIllingworthThresholdCalculatorHDD_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKittlerIllingworthThresholdCalculatorHDD_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDD_Clone(self)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHDD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKittlerIllingworthThresholdCalculatorHDD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHDD

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHDD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHDD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHDD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHDD in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDD_swigregister(itkKittlerIllingworthThresholdCalculatorHDD)

def itkKittlerIllingworthThresholdCalculatorHDF_New():
    return itkKittlerIllingworthThresholdCalculatorHDF.New()

class itkKittlerIllingworthThresholdCalculatorHDF(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF):
    r"""Proxy of C++ itkKittlerIllingworthThresholdCalculatorHDF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKittlerIllingworthThresholdCalculatorHDF_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKittlerIllingworthThresholdCalculatorHDF_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDF_Clone(self)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHDF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKittlerIllingworthThresholdCalculatorHDF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHDF

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHDF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHDF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHDF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHDF in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDF_swigregister(itkKittlerIllingworthThresholdCalculatorHDF)

def itkKittlerIllingworthThresholdCalculatorHDSS_New():
    return itkKittlerIllingworthThresholdCalculatorHDSS.New()

class itkKittlerIllingworthThresholdCalculatorHDSS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS):
    r"""Proxy of C++ itkKittlerIllingworthThresholdCalculatorHDSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKittlerIllingworthThresholdCalculatorHDSS_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKittlerIllingworthThresholdCalculatorHDSS_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDSS_Clone(self)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHDSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKittlerIllingworthThresholdCalculatorHDSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHDSS

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHDSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHDSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHDSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHDSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHDSS in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDSS_swigregister(itkKittlerIllingworthThresholdCalculatorHDSS)

def itkKittlerIllingworthThresholdCalculatorHDUC_New():
    return itkKittlerIllingworthThresholdCalculatorHDUC.New()

class itkKittlerIllingworthThresholdCalculatorHDUC(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC):
    r"""Proxy of C++ itkKittlerIllingworthThresholdCalculatorHDUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKittlerIllingworthThresholdCalculatorHDUC_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKittlerIllingworthThresholdCalculatorHDUC_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUC_Clone(self)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHDUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKittlerIllingworthThresholdCalculatorHDUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHDUC

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHDUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHDUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHDUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHDUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHDUC in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUC_swigregister(itkKittlerIllingworthThresholdCalculatorHDUC)

def itkKittlerIllingworthThresholdCalculatorHDUS_New():
    return itkKittlerIllingworthThresholdCalculatorHDUS.New()

class itkKittlerIllingworthThresholdCalculatorHDUS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS):
    r"""Proxy of C++ itkKittlerIllingworthThresholdCalculatorHDUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKittlerIllingworthThresholdCalculatorHDUS_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKittlerIllingworthThresholdCalculatorHDUS_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUS_Clone(self)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHDUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKittlerIllingworthThresholdCalculatorHDUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHDUS

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHDUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHDUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHDUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHDUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHDUS in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHDUS_swigregister(itkKittlerIllingworthThresholdCalculatorHDUS)

def itkKittlerIllingworthThresholdCalculatorHFD_New():
    return itkKittlerIllingworthThresholdCalculatorHFD.New()

class itkKittlerIllingworthThresholdCalculatorHFD(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFD):
    r"""Proxy of C++ itkKittlerIllingworthThresholdCalculatorHFD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKittlerIllingworthThresholdCalculatorHFD_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKittlerIllingworthThresholdCalculatorHFD_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFD_Clone(self)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHFD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKittlerIllingworthThresholdCalculatorHFD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHFD

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHFD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHFD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHFD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHFD in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFD_swigregister(itkKittlerIllingworthThresholdCalculatorHFD)

def itkKittlerIllingworthThresholdCalculatorHFF_New():
    return itkKittlerIllingworthThresholdCalculatorHFF.New()

class itkKittlerIllingworthThresholdCalculatorHFF(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF):
    r"""Proxy of C++ itkKittlerIllingworthThresholdCalculatorHFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKittlerIllingworthThresholdCalculatorHFF_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKittlerIllingworthThresholdCalculatorHFF_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFF_Clone(self)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHFF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKittlerIllingworthThresholdCalculatorHFF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHFF

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHFF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHFF in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFF_swigregister(itkKittlerIllingworthThresholdCalculatorHFF)

def itkKittlerIllingworthThresholdCalculatorHFSS_New():
    return itkKittlerIllingworthThresholdCalculatorHFSS.New()

class itkKittlerIllingworthThresholdCalculatorHFSS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS):
    r"""Proxy of C++ itkKittlerIllingworthThresholdCalculatorHFSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKittlerIllingworthThresholdCalculatorHFSS_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKittlerIllingworthThresholdCalculatorHFSS_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFSS_Clone(self)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHFSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKittlerIllingworthThresholdCalculatorHFSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHFSS

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHFSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHFSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHFSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHFSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHFSS in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFSS_swigregister(itkKittlerIllingworthThresholdCalculatorHFSS)

def itkKittlerIllingworthThresholdCalculatorHFUC_New():
    return itkKittlerIllingworthThresholdCalculatorHFUC.New()

class itkKittlerIllingworthThresholdCalculatorHFUC(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC):
    r"""Proxy of C++ itkKittlerIllingworthThresholdCalculatorHFUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKittlerIllingworthThresholdCalculatorHFUC_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKittlerIllingworthThresholdCalculatorHFUC_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUC_Clone(self)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHFUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKittlerIllingworthThresholdCalculatorHFUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHFUC

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHFUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHFUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHFUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHFUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHFUC in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUC_swigregister(itkKittlerIllingworthThresholdCalculatorHFUC)

def itkKittlerIllingworthThresholdCalculatorHFUS_New():
    return itkKittlerIllingworthThresholdCalculatorHFUS.New()

class itkKittlerIllingworthThresholdCalculatorHFUS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS):
    r"""Proxy of C++ itkKittlerIllingworthThresholdCalculatorHFUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKittlerIllingworthThresholdCalculatorHFUS_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKittlerIllingworthThresholdCalculatorHFUS_Pointer"""
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUS_Clone(self)
    __swig_destroy__ = _itkKittlerIllingworthThresholdCalculatorPython.delete_itkKittlerIllingworthThresholdCalculatorHFUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKittlerIllingworthThresholdCalculatorHFUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKittlerIllingworthThresholdCalculatorHFUS

        Create a new object of the class itkKittlerIllingworthThresholdCalculatorHFUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKittlerIllingworthThresholdCalculatorHFUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKittlerIllingworthThresholdCalculatorHFUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKittlerIllingworthThresholdCalculatorHFUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKittlerIllingworthThresholdCalculatorHFUS in _itkKittlerIllingworthThresholdCalculatorPython:
_itkKittlerIllingworthThresholdCalculatorPython.itkKittlerIllingworthThresholdCalculatorHFUS_swigregister(itkKittlerIllingworthThresholdCalculatorHFUS)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def kittler_illingworth_threshold_calculator(*args, **kwargs):
    """Functional interface for KittlerIllingworthThresholdCalculator"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.KittlerIllingworthThresholdCalculator.New(*args, **kwargs)

    return instance.__internal_call__()

def kittler_illingworth_threshold_calculator_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKThresholding.KittlerIllingworthThresholdCalculator
    kittler_illingworth_threshold_calculator.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    kittler_illingworth_threshold_calculator.__doc__ = filter_object.__doc__



