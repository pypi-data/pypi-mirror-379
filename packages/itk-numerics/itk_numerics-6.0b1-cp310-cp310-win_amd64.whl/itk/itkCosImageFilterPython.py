# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCosImageFilterPython
else:
    import _itkCosImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkUnaryGeneratorImageFilterPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython

def itkCosImageFilterID2ID2_New():
    return itkCosImageFilterID2ID2.New()

class itkCosImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""Proxy of C++ itkCosImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCosImageFilterID2ID2_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCosImageFilterID2ID2_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterID2ID2_Clone(self)
    InputConvertibleToDoubleCheck = _itkCosImageFilterPython.itkCosImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkCosImageFilterPython.itkCosImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkCosImageFilterPython.delete_itkCosImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCosImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCosImageFilterPython.itkCosImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCosImageFilterID2ID2

        Create a new object of the class itkCosImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCosImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCosImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCosImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCosImageFilterID2ID2 in _itkCosImageFilterPython:
_itkCosImageFilterPython.itkCosImageFilterID2ID2_swigregister(itkCosImageFilterID2ID2)

def itkCosImageFilterID3ID3_New():
    return itkCosImageFilterID3ID3.New()

class itkCosImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""Proxy of C++ itkCosImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCosImageFilterID3ID3_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCosImageFilterID3ID3_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterID3ID3_Clone(self)
    InputConvertibleToDoubleCheck = _itkCosImageFilterPython.itkCosImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkCosImageFilterPython.itkCosImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkCosImageFilterPython.delete_itkCosImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCosImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCosImageFilterPython.itkCosImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCosImageFilterID3ID3

        Create a new object of the class itkCosImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCosImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCosImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCosImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCosImageFilterID3ID3 in _itkCosImageFilterPython:
_itkCosImageFilterPython.itkCosImageFilterID3ID3_swigregister(itkCosImageFilterID3ID3)

def itkCosImageFilterID4ID4_New():
    return itkCosImageFilterID4ID4.New()

class itkCosImageFilterID4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID4ID4):
    r"""Proxy of C++ itkCosImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCosImageFilterID4ID4_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCosImageFilterID4ID4_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterID4ID4_Clone(self)
    InputConvertibleToDoubleCheck = _itkCosImageFilterPython.itkCosImageFilterID4ID4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkCosImageFilterPython.itkCosImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkCosImageFilterPython.delete_itkCosImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCosImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCosImageFilterPython.itkCosImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCosImageFilterID4ID4

        Create a new object of the class itkCosImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCosImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCosImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCosImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCosImageFilterID4ID4 in _itkCosImageFilterPython:
_itkCosImageFilterPython.itkCosImageFilterID4ID4_swigregister(itkCosImageFilterID4ID4)

def itkCosImageFilterIF2IF2_New():
    return itkCosImageFilterIF2IF2.New()

class itkCosImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""Proxy of C++ itkCosImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCosImageFilterIF2IF2_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCosImageFilterIF2IF2_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterIF2IF2_Clone(self)
    InputConvertibleToDoubleCheck = _itkCosImageFilterPython.itkCosImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkCosImageFilterPython.itkCosImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkCosImageFilterPython.delete_itkCosImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCosImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCosImageFilterPython.itkCosImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCosImageFilterIF2IF2

        Create a new object of the class itkCosImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCosImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCosImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCosImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCosImageFilterIF2IF2 in _itkCosImageFilterPython:
_itkCosImageFilterPython.itkCosImageFilterIF2IF2_swigregister(itkCosImageFilterIF2IF2)

def itkCosImageFilterIF3IF3_New():
    return itkCosImageFilterIF3IF3.New()

class itkCosImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""Proxy of C++ itkCosImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCosImageFilterIF3IF3_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCosImageFilterIF3IF3_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterIF3IF3_Clone(self)
    InputConvertibleToDoubleCheck = _itkCosImageFilterPython.itkCosImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkCosImageFilterPython.itkCosImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkCosImageFilterPython.delete_itkCosImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCosImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCosImageFilterPython.itkCosImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCosImageFilterIF3IF3

        Create a new object of the class itkCosImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCosImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCosImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCosImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCosImageFilterIF3IF3 in _itkCosImageFilterPython:
_itkCosImageFilterPython.itkCosImageFilterIF3IF3_swigregister(itkCosImageFilterIF3IF3)

def itkCosImageFilterIF4IF4_New():
    return itkCosImageFilterIF4IF4.New()

class itkCosImageFilterIF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF4IF4):
    r"""Proxy of C++ itkCosImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCosImageFilterIF4IF4_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCosImageFilterIF4IF4_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterIF4IF4_Clone(self)
    InputConvertibleToDoubleCheck = _itkCosImageFilterPython.itkCosImageFilterIF4IF4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkCosImageFilterPython.itkCosImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkCosImageFilterPython.delete_itkCosImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCosImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCosImageFilterPython.itkCosImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCosImageFilterIF4IF4

        Create a new object of the class itkCosImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCosImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCosImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCosImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCosImageFilterIF4IF4 in _itkCosImageFilterPython:
_itkCosImageFilterPython.itkCosImageFilterIF4IF4_swigregister(itkCosImageFilterIF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def cos_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CosImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CosImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def cos_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.CosImageFilter
    cos_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cos_image_filter.__doc__ = filter_object.__doc__



