# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKThresholdingPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkIntermodesThresholdImageFilterPython
else:
    import _itkIntermodesThresholdImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkHistogramThresholdImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkHistogramThresholdCalculatorPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkImageToHistogramFilterPython
import itk.itkImageSinkPython

def itkIntermodesThresholdImageFilterID2ISS2_New():
    return itkIntermodesThresholdImageFilterID2ISS2.New()

class itkIntermodesThresholdImageFilterID2ISS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID2ISS2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterID2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterID2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterID2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterID2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID2ISS2

        Create a new object of the class itkIntermodesThresholdImageFilterID2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID2ISS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2ISS2_swigregister(itkIntermodesThresholdImageFilterID2ISS2)

def itkIntermodesThresholdImageFilterID2IUC2_New():
    return itkIntermodesThresholdImageFilterID2IUC2.New()

class itkIntermodesThresholdImageFilterID2IUC2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID2IUC2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterID2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterID2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterID2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterID2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID2IUC2

        Create a new object of the class itkIntermodesThresholdImageFilterID2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID2IUC2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUC2_swigregister(itkIntermodesThresholdImageFilterID2IUC2)

def itkIntermodesThresholdImageFilterID2IUS2_New():
    return itkIntermodesThresholdImageFilterID2IUS2.New()

class itkIntermodesThresholdImageFilterID2IUS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID2IUS2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterID2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterID2IUS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterID2IUS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterID2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID2IUS2

        Create a new object of the class itkIntermodesThresholdImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID2IUS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID2IUS2_swigregister(itkIntermodesThresholdImageFilterID2IUS2)

def itkIntermodesThresholdImageFilterID3ISS3_New():
    return itkIntermodesThresholdImageFilterID3ISS3.New()

class itkIntermodesThresholdImageFilterID3ISS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID3ISS3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterID3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterID3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterID3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterID3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID3ISS3

        Create a new object of the class itkIntermodesThresholdImageFilterID3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID3ISS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3ISS3_swigregister(itkIntermodesThresholdImageFilterID3ISS3)

def itkIntermodesThresholdImageFilterID3IUC3_New():
    return itkIntermodesThresholdImageFilterID3IUC3.New()

class itkIntermodesThresholdImageFilterID3IUC3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID3IUC3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterID3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterID3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterID3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterID3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID3IUC3

        Create a new object of the class itkIntermodesThresholdImageFilterID3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID3IUC3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUC3_swigregister(itkIntermodesThresholdImageFilterID3IUC3)

def itkIntermodesThresholdImageFilterID3IUS3_New():
    return itkIntermodesThresholdImageFilterID3IUS3.New()

class itkIntermodesThresholdImageFilterID3IUS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID3IUS3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterID3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterID3IUS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterID3IUS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterID3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID3IUS3

        Create a new object of the class itkIntermodesThresholdImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID3IUS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID3IUS3_swigregister(itkIntermodesThresholdImageFilterID3IUS3)

def itkIntermodesThresholdImageFilterID4ISS4_New():
    return itkIntermodesThresholdImageFilterID4ISS4.New()

class itkIntermodesThresholdImageFilterID4ISS4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID4ISS4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterID4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterID4ISS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterID4ISS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4ISS4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4ISS4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4ISS4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4ISS4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4ISS4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4ISS4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4ISS4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterID4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID4ISS4

        Create a new object of the class itkIntermodesThresholdImageFilterID4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID4ISS4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4ISS4_swigregister(itkIntermodesThresholdImageFilterID4ISS4)

def itkIntermodesThresholdImageFilterID4IUC4_New():
    return itkIntermodesThresholdImageFilterID4IUC4.New()

class itkIntermodesThresholdImageFilterID4IUC4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID4IUC4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterID4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterID4IUC4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterID4IUC4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUC4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUC4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUC4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUC4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUC4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUC4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUC4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterID4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID4IUC4

        Create a new object of the class itkIntermodesThresholdImageFilterID4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID4IUC4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUC4_swigregister(itkIntermodesThresholdImageFilterID4IUC4)

def itkIntermodesThresholdImageFilterID4IUS4_New():
    return itkIntermodesThresholdImageFilterID4IUS4.New()

class itkIntermodesThresholdImageFilterID4IUS4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterID4IUS4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterID4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterID4IUS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterID4IUS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUS4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUS4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUS4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUS4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUS4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUS4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUS4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterID4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterID4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterID4IUS4

        Create a new object of the class itkIntermodesThresholdImageFilterID4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterID4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterID4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterID4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterID4IUS4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterID4IUS4_swigregister(itkIntermodesThresholdImageFilterID4IUS4)

def itkIntermodesThresholdImageFilterIF2ISS2_New():
    return itkIntermodesThresholdImageFilterIF2ISS2.New()

class itkIntermodesThresholdImageFilterIF2ISS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF2ISS2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIF2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIF2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIF2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIF2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF2ISS2

        Create a new object of the class itkIntermodesThresholdImageFilterIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF2ISS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_swigregister(itkIntermodesThresholdImageFilterIF2ISS2)

def itkIntermodesThresholdImageFilterIF2IUC2_New():
    return itkIntermodesThresholdImageFilterIF2IUC2.New()

class itkIntermodesThresholdImageFilterIF2IUC2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF2IUC2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIF2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIF2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIF2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIF2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF2IUC2

        Create a new object of the class itkIntermodesThresholdImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF2IUC2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_swigregister(itkIntermodesThresholdImageFilterIF2IUC2)

def itkIntermodesThresholdImageFilterIF2IUS2_New():
    return itkIntermodesThresholdImageFilterIF2IUS2.New()

class itkIntermodesThresholdImageFilterIF2IUS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF2IUS2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIF2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIF2IUS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIF2IUS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIF2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF2IUS2

        Create a new object of the class itkIntermodesThresholdImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF2IUS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUS2_swigregister(itkIntermodesThresholdImageFilterIF2IUS2)

def itkIntermodesThresholdImageFilterIF3ISS3_New():
    return itkIntermodesThresholdImageFilterIF3ISS3.New()

class itkIntermodesThresholdImageFilterIF3ISS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF3ISS3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIF3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIF3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIF3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIF3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF3ISS3

        Create a new object of the class itkIntermodesThresholdImageFilterIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF3ISS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_swigregister(itkIntermodesThresholdImageFilterIF3ISS3)

def itkIntermodesThresholdImageFilterIF3IUC3_New():
    return itkIntermodesThresholdImageFilterIF3IUC3.New()

class itkIntermodesThresholdImageFilterIF3IUC3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF3IUC3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIF3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIF3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIF3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIF3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF3IUC3

        Create a new object of the class itkIntermodesThresholdImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF3IUC3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_swigregister(itkIntermodesThresholdImageFilterIF3IUC3)

def itkIntermodesThresholdImageFilterIF3IUS3_New():
    return itkIntermodesThresholdImageFilterIF3IUS3.New()

class itkIntermodesThresholdImageFilterIF3IUS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF3IUS3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIF3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIF3IUS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIF3IUS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIF3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF3IUS3

        Create a new object of the class itkIntermodesThresholdImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF3IUS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUS3_swigregister(itkIntermodesThresholdImageFilterIF3IUS3)

def itkIntermodesThresholdImageFilterIF4ISS4_New():
    return itkIntermodesThresholdImageFilterIF4ISS4.New()

class itkIntermodesThresholdImageFilterIF4ISS4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF4ISS4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIF4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIF4ISS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIF4ISS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4ISS4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4ISS4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4ISS4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4ISS4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4ISS4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4ISS4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4ISS4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIF4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF4ISS4

        Create a new object of the class itkIntermodesThresholdImageFilterIF4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF4ISS4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4ISS4_swigregister(itkIntermodesThresholdImageFilterIF4ISS4)

def itkIntermodesThresholdImageFilterIF4IUC4_New():
    return itkIntermodesThresholdImageFilterIF4IUC4.New()

class itkIntermodesThresholdImageFilterIF4IUC4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF4IUC4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIF4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIF4IUC4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIF4IUC4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUC4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUC4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUC4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUC4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUC4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUC4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUC4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIF4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF4IUC4

        Create a new object of the class itkIntermodesThresholdImageFilterIF4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF4IUC4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUC4_swigregister(itkIntermodesThresholdImageFilterIF4IUC4)

def itkIntermodesThresholdImageFilterIF4IUS4_New():
    return itkIntermodesThresholdImageFilterIF4IUS4.New()

class itkIntermodesThresholdImageFilterIF4IUS4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF4IUS4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIF4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIF4IUS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIF4IUS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUS4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUS4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUS4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUS4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUS4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUS4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUS4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIF4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF4IUS4

        Create a new object of the class itkIntermodesThresholdImageFilterIF4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIF4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIF4IUS4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF4IUS4_swigregister(itkIntermodesThresholdImageFilterIF4IUS4)

def itkIntermodesThresholdImageFilterISS2ISS2_New():
    return itkIntermodesThresholdImageFilterISS2ISS2.New()

class itkIntermodesThresholdImageFilterISS2ISS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS2ISS2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterISS2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterISS2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS2ISS2

        Create a new object of the class itkIntermodesThresholdImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS2ISS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_swigregister(itkIntermodesThresholdImageFilterISS2ISS2)

def itkIntermodesThresholdImageFilterISS2IUC2_New():
    return itkIntermodesThresholdImageFilterISS2IUC2.New()

class itkIntermodesThresholdImageFilterISS2IUC2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS2IUC2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterISS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterISS2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterISS2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterISS2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS2IUC2

        Create a new object of the class itkIntermodesThresholdImageFilterISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS2IUC2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_swigregister(itkIntermodesThresholdImageFilterISS2IUC2)

def itkIntermodesThresholdImageFilterISS2IUS2_New():
    return itkIntermodesThresholdImageFilterISS2IUS2.New()

class itkIntermodesThresholdImageFilterISS2IUS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS2IUS2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterISS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterISS2IUS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterISS2IUS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterISS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS2IUS2

        Create a new object of the class itkIntermodesThresholdImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS2IUS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUS2_swigregister(itkIntermodesThresholdImageFilterISS2IUS2)

def itkIntermodesThresholdImageFilterISS3ISS3_New():
    return itkIntermodesThresholdImageFilterISS3ISS3.New()

class itkIntermodesThresholdImageFilterISS3ISS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS3ISS3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterISS3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterISS3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS3ISS3

        Create a new object of the class itkIntermodesThresholdImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS3ISS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_swigregister(itkIntermodesThresholdImageFilterISS3ISS3)

def itkIntermodesThresholdImageFilterISS3IUC3_New():
    return itkIntermodesThresholdImageFilterISS3IUC3.New()

class itkIntermodesThresholdImageFilterISS3IUC3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS3IUC3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterISS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterISS3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterISS3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterISS3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS3IUC3

        Create a new object of the class itkIntermodesThresholdImageFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS3IUC3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_swigregister(itkIntermodesThresholdImageFilterISS3IUC3)

def itkIntermodesThresholdImageFilterISS3IUS3_New():
    return itkIntermodesThresholdImageFilterISS3IUS3.New()

class itkIntermodesThresholdImageFilterISS3IUS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS3IUS3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterISS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterISS3IUS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterISS3IUS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterISS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS3IUS3

        Create a new object of the class itkIntermodesThresholdImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS3IUS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUS3_swigregister(itkIntermodesThresholdImageFilterISS3IUS3)

def itkIntermodesThresholdImageFilterISS4ISS4_New():
    return itkIntermodesThresholdImageFilterISS4ISS4.New()

class itkIntermodesThresholdImageFilterISS4ISS4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS4ISS4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterISS4ISS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterISS4ISS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4ISS4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4ISS4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4ISS4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4ISS4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4ISS4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4ISS4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4ISS4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS4ISS4

        Create a new object of the class itkIntermodesThresholdImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS4ISS4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4ISS4_swigregister(itkIntermodesThresholdImageFilterISS4ISS4)

def itkIntermodesThresholdImageFilterISS4IUC4_New():
    return itkIntermodesThresholdImageFilterISS4IUC4.New()

class itkIntermodesThresholdImageFilterISS4IUC4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS4IUC4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterISS4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterISS4IUC4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterISS4IUC4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUC4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUC4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUC4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUC4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUC4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUC4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUC4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterISS4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS4IUC4

        Create a new object of the class itkIntermodesThresholdImageFilterISS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS4IUC4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUC4_swigregister(itkIntermodesThresholdImageFilterISS4IUC4)

def itkIntermodesThresholdImageFilterISS4IUS4_New():
    return itkIntermodesThresholdImageFilterISS4IUS4.New()

class itkIntermodesThresholdImageFilterISS4IUS4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS4IUS4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterISS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterISS4IUS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterISS4IUS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUS4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUS4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUS4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUS4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUS4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUS4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUS4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterISS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS4IUS4

        Create a new object of the class itkIntermodesThresholdImageFilterISS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterISS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterISS4IUS4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS4IUS4_swigregister(itkIntermodesThresholdImageFilterISS4IUS4)

def itkIntermodesThresholdImageFilterIUC2ISS2_New():
    return itkIntermodesThresholdImageFilterIUC2ISS2.New()

class itkIntermodesThresholdImageFilterIUC2ISS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC2ISS2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUC2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUC2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUC2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUC2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC2ISS2

        Create a new object of the class itkIntermodesThresholdImageFilterIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC2ISS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_swigregister(itkIntermodesThresholdImageFilterIUC2ISS2)

def itkIntermodesThresholdImageFilterIUC2IUC2_New():
    return itkIntermodesThresholdImageFilterIUC2IUC2.New()

class itkIntermodesThresholdImageFilterIUC2IUC2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC2IUC2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUC2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUC2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC2IUC2

        Create a new object of the class itkIntermodesThresholdImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC2IUC2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_swigregister(itkIntermodesThresholdImageFilterIUC2IUC2)

def itkIntermodesThresholdImageFilterIUC2IUS2_New():
    return itkIntermodesThresholdImageFilterIUC2IUS2.New()

class itkIntermodesThresholdImageFilterIUC2IUS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC2IUS2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUC2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUC2IUS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUC2IUS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUC2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC2IUS2

        Create a new object of the class itkIntermodesThresholdImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC2IUS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUS2_swigregister(itkIntermodesThresholdImageFilterIUC2IUS2)

def itkIntermodesThresholdImageFilterIUC3ISS3_New():
    return itkIntermodesThresholdImageFilterIUC3ISS3.New()

class itkIntermodesThresholdImageFilterIUC3ISS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC3ISS3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUC3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUC3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUC3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUC3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC3ISS3

        Create a new object of the class itkIntermodesThresholdImageFilterIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC3ISS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_swigregister(itkIntermodesThresholdImageFilterIUC3ISS3)

def itkIntermodesThresholdImageFilterIUC3IUC3_New():
    return itkIntermodesThresholdImageFilterIUC3IUC3.New()

class itkIntermodesThresholdImageFilterIUC3IUC3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC3IUC3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUC3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUC3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC3IUC3

        Create a new object of the class itkIntermodesThresholdImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC3IUC3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_swigregister(itkIntermodesThresholdImageFilterIUC3IUC3)

def itkIntermodesThresholdImageFilterIUC3IUS3_New():
    return itkIntermodesThresholdImageFilterIUC3IUS3.New()

class itkIntermodesThresholdImageFilterIUC3IUS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC3IUS3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUC3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUC3IUS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUC3IUS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUC3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC3IUS3

        Create a new object of the class itkIntermodesThresholdImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC3IUS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUS3_swigregister(itkIntermodesThresholdImageFilterIUC3IUS3)

def itkIntermodesThresholdImageFilterIUC4ISS4_New():
    return itkIntermodesThresholdImageFilterIUC4ISS4.New()

class itkIntermodesThresholdImageFilterIUC4ISS4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC4ISS4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUC4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUC4ISS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUC4ISS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4ISS4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4ISS4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4ISS4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4ISS4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4ISS4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4ISS4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4ISS4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUC4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC4ISS4

        Create a new object of the class itkIntermodesThresholdImageFilterIUC4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC4ISS4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4ISS4_swigregister(itkIntermodesThresholdImageFilterIUC4ISS4)

def itkIntermodesThresholdImageFilterIUC4IUC4_New():
    return itkIntermodesThresholdImageFilterIUC4IUC4.New()

class itkIntermodesThresholdImageFilterIUC4IUC4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC4IUC4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUC4IUC4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUC4IUC4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUC4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUC4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUC4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUC4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUC4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUC4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUC4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC4IUC4

        Create a new object of the class itkIntermodesThresholdImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC4IUC4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUC4_swigregister(itkIntermodesThresholdImageFilterIUC4IUC4)

def itkIntermodesThresholdImageFilterIUC4IUS4_New():
    return itkIntermodesThresholdImageFilterIUC4IUS4.New()

class itkIntermodesThresholdImageFilterIUC4IUS4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC4IUS4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUC4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUC4IUS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUC4IUS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUS4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUS4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUS4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUS4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUS4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUS4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUS4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUC4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC4IUS4

        Create a new object of the class itkIntermodesThresholdImageFilterIUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUC4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUC4IUS4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC4IUS4_swigregister(itkIntermodesThresholdImageFilterIUC4IUS4)

def itkIntermodesThresholdImageFilterIUS2ISS2_New():
    return itkIntermodesThresholdImageFilterIUS2ISS2.New()

class itkIntermodesThresholdImageFilterIUS2ISS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS2ISS2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUS2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUS2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS2ISS2

        Create a new object of the class itkIntermodesThresholdImageFilterIUS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS2ISS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2ISS2_swigregister(itkIntermodesThresholdImageFilterIUS2ISS2)

def itkIntermodesThresholdImageFilterIUS2IUC2_New():
    return itkIntermodesThresholdImageFilterIUS2IUC2.New()

class itkIntermodesThresholdImageFilterIUS2IUC2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS2IUC2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUS2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUS2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUS2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS2IUC2

        Create a new object of the class itkIntermodesThresholdImageFilterIUS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS2IUC2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUC2_swigregister(itkIntermodesThresholdImageFilterIUS2IUC2)

def itkIntermodesThresholdImageFilterIUS2IUS2_New():
    return itkIntermodesThresholdImageFilterIUS2IUS2.New()

class itkIntermodesThresholdImageFilterIUS2IUS2(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS2IUS2):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUS2IUS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUS2IUS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS2IUS2

        Create a new object of the class itkIntermodesThresholdImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS2IUS2 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS2IUS2_swigregister(itkIntermodesThresholdImageFilterIUS2IUS2)

def itkIntermodesThresholdImageFilterIUS3ISS3_New():
    return itkIntermodesThresholdImageFilterIUS3ISS3.New()

class itkIntermodesThresholdImageFilterIUS3ISS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS3ISS3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUS3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUS3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS3ISS3

        Create a new object of the class itkIntermodesThresholdImageFilterIUS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS3ISS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3ISS3_swigregister(itkIntermodesThresholdImageFilterIUS3ISS3)

def itkIntermodesThresholdImageFilterIUS3IUC3_New():
    return itkIntermodesThresholdImageFilterIUS3IUC3.New()

class itkIntermodesThresholdImageFilterIUS3IUC3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS3IUC3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUS3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUS3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUS3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS3IUC3

        Create a new object of the class itkIntermodesThresholdImageFilterIUS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS3IUC3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUC3_swigregister(itkIntermodesThresholdImageFilterIUS3IUC3)

def itkIntermodesThresholdImageFilterIUS3IUS3_New():
    return itkIntermodesThresholdImageFilterIUS3IUS3.New()

class itkIntermodesThresholdImageFilterIUS3IUS3(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS3IUS3):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUS3IUS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUS3IUS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS3IUS3

        Create a new object of the class itkIntermodesThresholdImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS3IUS3 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS3IUS3_swigregister(itkIntermodesThresholdImageFilterIUS3IUS3)

def itkIntermodesThresholdImageFilterIUS4ISS4_New():
    return itkIntermodesThresholdImageFilterIUS4ISS4.New()

class itkIntermodesThresholdImageFilterIUS4ISS4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS4ISS4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUS4ISS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUS4ISS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4ISS4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4ISS4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4ISS4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4ISS4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4ISS4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4ISS4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4ISS4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS4ISS4

        Create a new object of the class itkIntermodesThresholdImageFilterIUS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS4ISS4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4ISS4_swigregister(itkIntermodesThresholdImageFilterIUS4ISS4)

def itkIntermodesThresholdImageFilterIUS4IUC4_New():
    return itkIntermodesThresholdImageFilterIUS4IUC4.New()

class itkIntermodesThresholdImageFilterIUS4IUC4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS4IUC4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUS4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUS4IUC4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUS4IUC4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUC4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUC4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUC4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUC4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUC4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUC4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUC4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUS4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS4IUC4

        Create a new object of the class itkIntermodesThresholdImageFilterIUS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS4IUC4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUC4_swigregister(itkIntermodesThresholdImageFilterIUS4IUC4)

def itkIntermodesThresholdImageFilterIUS4IUS4_New():
    return itkIntermodesThresholdImageFilterIUS4IUS4.New()

class itkIntermodesThresholdImageFilterIUS4IUS4(itk.itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUS4IUS4):
    r"""Proxy of C++ itkIntermodesThresholdImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIntermodesThresholdImageFilterIUS4IUS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIntermodesThresholdImageFilterIUS4IUS4_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUS4_Clone(self)

    def SetMaximumSmoothingIterations(self, _arg):
        r"""
        SetMaximumSmoothingIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned long long

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUS4_SetMaximumSmoothingIterations(self, _arg)

    def GetMaximumSmoothingIterations(self):
        r"""GetMaximumSmoothingIterations(self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUS4_GetMaximumSmoothingIterations(self)

    def SetUseInterMode(self, _arg):
        r"""
        SetUseInterMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUS4_SetUseInterMode(self, _arg)

    def GetUseInterMode(self):
        r"""GetUseInterMode(self) -> bool const &"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUS4_GetUseInterMode(self)

    def UseInterModeOn(self):
        r"""UseInterModeOn(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUS4_UseInterModeOn(self)

    def UseInterModeOff(self):
        r"""UseInterModeOff(self)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUS4_UseInterModeOff(self)
    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIntermodesThresholdImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUS4IUS4

        Create a new object of the class itkIntermodesThresholdImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIntermodesThresholdImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIntermodesThresholdImageFilterIUS4IUS4 in _itkIntermodesThresholdImageFilterPython:
_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUS4IUS4_swigregister(itkIntermodesThresholdImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def intermodes_threshold_image_filter(*args: itkt.ImageLike,  maximum_smoothing_iterations: int=..., use_inter_mode: bool=..., mask_image: itkt.Image=..., outside_value: int=..., inside_value: int=..., number_of_histogram_bins: int=..., auto_minimum_maximum: bool=..., mask_output: bool=..., mask_value: int=..., calculator=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for IntermodesThresholdImageFilter"""
    import itk

    kwarg_typehints = { 'maximum_smoothing_iterations':maximum_smoothing_iterations,'use_inter_mode':use_inter_mode,'mask_image':mask_image,'outside_value':outside_value,'inside_value':inside_value,'number_of_histogram_bins':number_of_histogram_bins,'auto_minimum_maximum':auto_minimum_maximum,'mask_output':mask_output,'mask_value':mask_value,'calculator':calculator }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.IntermodesThresholdImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def intermodes_threshold_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKThresholding.IntermodesThresholdImageFilter
    intermodes_threshold_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    intermodes_threshold_image_filter.__doc__ = filter_object.__doc__



