# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDisplacementFieldPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython
else:
    import _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkDisplacementFieldTransformPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkTransformBasePython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython

def itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2_New():
    return itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2.New()

class itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2):
    r"""Proxy of C++ itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2_Pointer"""
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2_Pointer"""
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2_Clone(self)

    def SetGaussianSmoothingVarianceForTheUpdateField(self, _arg):
        r"""
        SetGaussianSmoothingVarianceForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2_SetGaussianSmoothingVarianceForTheUpdateField(self, _arg)

    def GetGaussianSmoothingVarianceForTheUpdateField(self):
        r"""GetGaussianSmoothingVarianceForTheUpdateField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2_GetGaussianSmoothingVarianceForTheUpdateField(self)

    def SetGaussianSmoothingVarianceForTheTotalField(self, _arg):
        r"""
        SetGaussianSmoothingVarianceForTheTotalField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2_SetGaussianSmoothingVarianceForTheTotalField(self, _arg)

    def GetGaussianSmoothingVarianceForTheTotalField(self):
        r"""GetGaussianSmoothingVarianceForTheTotalField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2_GetGaussianSmoothingVarianceForTheTotalField(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2_UpdateTransformParameters(self, update, factor)

    def GaussianSmoothDisplacementField(self, arg0, arg1):
        r"""
        GaussianSmoothDisplacementField(self, arg0, arg1) -> itkImageVD22_Pointer

        Parameters
        ----------
        arg0: itkImageVD22 *
        arg1: double

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2_GaussianSmoothDisplacementField(self, arg0, arg1)
    __swig_destroy__ = _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.delete_itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2

        Create a new object of the class itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2 in _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython:
_itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2_swigregister(itkGaussianSmoothingOnUpdateDisplacementFieldTransformD2)

def itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3_New():
    return itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3.New()

class itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3):
    r"""Proxy of C++ itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3_Pointer"""
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3_Pointer"""
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3_Clone(self)

    def SetGaussianSmoothingVarianceForTheUpdateField(self, _arg):
        r"""
        SetGaussianSmoothingVarianceForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3_SetGaussianSmoothingVarianceForTheUpdateField(self, _arg)

    def GetGaussianSmoothingVarianceForTheUpdateField(self):
        r"""GetGaussianSmoothingVarianceForTheUpdateField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3_GetGaussianSmoothingVarianceForTheUpdateField(self)

    def SetGaussianSmoothingVarianceForTheTotalField(self, _arg):
        r"""
        SetGaussianSmoothingVarianceForTheTotalField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3_SetGaussianSmoothingVarianceForTheTotalField(self, _arg)

    def GetGaussianSmoothingVarianceForTheTotalField(self):
        r"""GetGaussianSmoothingVarianceForTheTotalField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3_GetGaussianSmoothingVarianceForTheTotalField(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3_UpdateTransformParameters(self, update, factor)

    def GaussianSmoothDisplacementField(self, arg0, arg1):
        r"""
        GaussianSmoothDisplacementField(self, arg0, arg1) -> itkImageVD33_Pointer

        Parameters
        ----------
        arg0: itkImageVD33 *
        arg1: double

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3_GaussianSmoothDisplacementField(self, arg0, arg1)
    __swig_destroy__ = _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.delete_itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3

        Create a new object of the class itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3 in _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython:
_itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3_swigregister(itkGaussianSmoothingOnUpdateDisplacementFieldTransformD3)

def itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4_New():
    return itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4.New()

class itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4(itk.itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD4):
    r"""Proxy of C++ itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4_Pointer"""
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4_Pointer"""
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4_Clone(self)

    def SetGaussianSmoothingVarianceForTheUpdateField(self, _arg):
        r"""
        SetGaussianSmoothingVarianceForTheUpdateField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4_SetGaussianSmoothingVarianceForTheUpdateField(self, _arg)

    def GetGaussianSmoothingVarianceForTheUpdateField(self):
        r"""GetGaussianSmoothingVarianceForTheUpdateField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4_GetGaussianSmoothingVarianceForTheUpdateField(self)

    def SetGaussianSmoothingVarianceForTheTotalField(self, _arg):
        r"""
        SetGaussianSmoothingVarianceForTheTotalField(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4_SetGaussianSmoothingVarianceForTheTotalField(self, _arg)

    def GetGaussianSmoothingVarianceForTheTotalField(self):
        r"""GetGaussianSmoothingVarianceForTheTotalField(self) -> double const &"""
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4_GetGaussianSmoothingVarianceForTheTotalField(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4_UpdateTransformParameters(self, update, factor)

    def GaussianSmoothDisplacementField(self, arg0, arg1):
        r"""
        GaussianSmoothDisplacementField(self, arg0, arg1) -> itkImageVD44_Pointer

        Parameters
        ----------
        arg0: itkImageVD44 *
        arg1: double

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4_GaussianSmoothDisplacementField(self, arg0, arg1)
    __swig_destroy__ = _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.delete_itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4

        Create a new object of the class itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4 in _itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython:
_itkGaussianSmoothingOnUpdateDisplacementFieldTransformPython.itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4_swigregister(itkGaussianSmoothingOnUpdateDisplacementFieldTransformD4)

