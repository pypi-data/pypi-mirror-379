# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKEigenPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkEigenAnalysis2DImageFilterPython
else:
    import _itkEigenAnalysis2DImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterAPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkEigenAnalysis2DImageFilterID2ID2IVF22_New():
    return itkEigenAnalysis2DImageFilterID2ID2IVF22.New()

class itkEigenAnalysis2DImageFilterID2ID2IVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkEigenAnalysis2DImageFilterID2ID2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkEigenAnalysis2DImageFilterID2ID2IVF22_Pointer"""
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterID2ID2IVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkEigenAnalysis2DImageFilterID2ID2IVF22_Pointer"""
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterID2ID2IVF22_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageD2 *

        """
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterID2ID2IVF22_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD2 *

        """
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterID2ID2IVF22_SetInput2(self, image)

    def SetInput3(self, image):
        r"""
        SetInput3(self, image)

        Parameters
        ----------
        image: itkImageD2 *

        """
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterID2ID2IVF22_SetInput3(self, image)

    def GetMaxEigenValue(self):
        r"""GetMaxEigenValue(self) -> itkImageD2"""
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterID2ID2IVF22_GetMaxEigenValue(self)

    def GetMinEigenValue(self):
        r"""GetMinEigenValue(self) -> itkImageD2"""
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterID2ID2IVF22_GetMinEigenValue(self)

    def GetMaxEigenVector(self):
        r"""GetMaxEigenVector(self) -> itkImageVF22"""
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterID2ID2IVF22_GetMaxEigenVector(self)
    VectorComponentHasNumericTraitsCheck = _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterID2ID2IVF22_VectorComponentHasNumericTraitsCheck
    
    __swig_destroy__ = _itkEigenAnalysis2DImageFilterPython.delete_itkEigenAnalysis2DImageFilterID2ID2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkEigenAnalysis2DImageFilterID2ID2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterID2ID2IVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkEigenAnalysis2DImageFilterID2ID2IVF22

        Create a new object of the class itkEigenAnalysis2DImageFilterID2ID2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkEigenAnalysis2DImageFilterID2ID2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkEigenAnalysis2DImageFilterID2ID2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkEigenAnalysis2DImageFilterID2ID2IVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkEigenAnalysis2DImageFilterID2ID2IVF22 in _itkEigenAnalysis2DImageFilterPython:
_itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterID2ID2IVF22_swigregister(itkEigenAnalysis2DImageFilterID2ID2IVF22)

def itkEigenAnalysis2DImageFilterIF2IF2IVF22_New():
    return itkEigenAnalysis2DImageFilterIF2IF2IVF22.New()

class itkEigenAnalysis2DImageFilterIF2IF2IVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkEigenAnalysis2DImageFilterIF2IF2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkEigenAnalysis2DImageFilterIF2IF2IVF22_Pointer"""
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterIF2IF2IVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkEigenAnalysis2DImageFilterIF2IF2IVF22_Pointer"""
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterIF2IF2IVF22_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageF2 *

        """
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterIF2IF2IVF22_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF2 *

        """
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterIF2IF2IVF22_SetInput2(self, image)

    def SetInput3(self, image):
        r"""
        SetInput3(self, image)

        Parameters
        ----------
        image: itkImageF2 *

        """
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterIF2IF2IVF22_SetInput3(self, image)

    def GetMaxEigenValue(self):
        r"""GetMaxEigenValue(self) -> itkImageF2"""
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterIF2IF2IVF22_GetMaxEigenValue(self)

    def GetMinEigenValue(self):
        r"""GetMinEigenValue(self) -> itkImageF2"""
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterIF2IF2IVF22_GetMinEigenValue(self)

    def GetMaxEigenVector(self):
        r"""GetMaxEigenVector(self) -> itkImageVF22"""
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterIF2IF2IVF22_GetMaxEigenVector(self)
    VectorComponentHasNumericTraitsCheck = _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterIF2IF2IVF22_VectorComponentHasNumericTraitsCheck
    
    __swig_destroy__ = _itkEigenAnalysis2DImageFilterPython.delete_itkEigenAnalysis2DImageFilterIF2IF2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkEigenAnalysis2DImageFilterIF2IF2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterIF2IF2IVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkEigenAnalysis2DImageFilterIF2IF2IVF22

        Create a new object of the class itkEigenAnalysis2DImageFilterIF2IF2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkEigenAnalysis2DImageFilterIF2IF2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkEigenAnalysis2DImageFilterIF2IF2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkEigenAnalysis2DImageFilterIF2IF2IVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkEigenAnalysis2DImageFilterIF2IF2IVF22 in _itkEigenAnalysis2DImageFilterPython:
_itkEigenAnalysis2DImageFilterPython.itkEigenAnalysis2DImageFilterIF2IF2IVF22_swigregister(itkEigenAnalysis2DImageFilterIF2IF2IVF22)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def eigen_analysis2_d_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for EigenAnalysis2DImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.EigenAnalysis2DImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def eigen_analysis2_d_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKEigen.EigenAnalysis2DImageFilter
    eigen_analysis2_d_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    eigen_analysis2_d_image_filter.__doc__ = filter_object.__doc__



