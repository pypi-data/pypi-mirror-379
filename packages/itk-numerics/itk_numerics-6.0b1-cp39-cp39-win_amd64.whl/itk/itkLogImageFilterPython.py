# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLogImageFilterPython
else:
    import _itkLogImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkUnaryGeneratorImageFilterPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterBPython
import itk.itkInPlaceImageFilterBPython

def itkLogImageFilterID2ID2_New():
    return itkLogImageFilterID2ID2.New()

class itkLogImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""Proxy of C++ itkLogImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterID2ID2_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterID2ID2_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterID2ID2_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterID2ID2

        Create a new object of the class itkLogImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterID2ID2 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterID2ID2_swigregister(itkLogImageFilterID2ID2)

def itkLogImageFilterID3ID3_New():
    return itkLogImageFilterID3ID3.New()

class itkLogImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""Proxy of C++ itkLogImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterID3ID3_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterID3ID3_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterID3ID3_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterID3ID3

        Create a new object of the class itkLogImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterID3ID3 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterID3ID3_swigregister(itkLogImageFilterID3ID3)

def itkLogImageFilterID4ID4_New():
    return itkLogImageFilterID4ID4.New()

class itkLogImageFilterID4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID4ID4):
    r"""Proxy of C++ itkLogImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterID4ID4_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterID4ID4_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterID4ID4_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterID4ID4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterID4ID4

        Create a new object of the class itkLogImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterID4ID4 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterID4ID4_swigregister(itkLogImageFilterID4ID4)

def itkLogImageFilterIF2IF2_New():
    return itkLogImageFilterIF2IF2.New()

class itkLogImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""Proxy of C++ itkLogImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterIF2IF2_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterIF2IF2_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIF2IF2_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIF2IF2

        Create a new object of the class itkLogImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIF2IF2 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIF2IF2_swigregister(itkLogImageFilterIF2IF2)

def itkLogImageFilterIF3IF3_New():
    return itkLogImageFilterIF3IF3.New()

class itkLogImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""Proxy of C++ itkLogImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterIF3IF3_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterIF3IF3_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIF3IF3_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIF3IF3

        Create a new object of the class itkLogImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIF3IF3 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIF3IF3_swigregister(itkLogImageFilterIF3IF3)

def itkLogImageFilterIF4IF4_New():
    return itkLogImageFilterIF4IF4.New()

class itkLogImageFilterIF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF4IF4):
    r"""Proxy of C++ itkLogImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterIF4IF4_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterIF4IF4_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIF4IF4_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIF4IF4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIF4IF4

        Create a new object of the class itkLogImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIF4IF4 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIF4IF4_swigregister(itkLogImageFilterIF4IF4)

def itkLogImageFilterISS2ISS2_New():
    return itkLogImageFilterISS2ISS2.New()

class itkLogImageFilterISS2ISS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    r"""Proxy of C++ itkLogImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterISS2ISS2_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterISS2ISS2_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterISS2ISS2_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterISS2ISS2

        Create a new object of the class itkLogImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterISS2ISS2 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterISS2ISS2_swigregister(itkLogImageFilterISS2ISS2)

def itkLogImageFilterISS3ISS3_New():
    return itkLogImageFilterISS3ISS3.New()

class itkLogImageFilterISS3ISS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    r"""Proxy of C++ itkLogImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterISS3ISS3_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterISS3ISS3_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterISS3ISS3_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterISS3ISS3

        Create a new object of the class itkLogImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterISS3ISS3 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterISS3ISS3_swigregister(itkLogImageFilterISS3ISS3)

def itkLogImageFilterISS4ISS4_New():
    return itkLogImageFilterISS4ISS4.New()

class itkLogImageFilterISS4ISS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS4ISS4):
    r"""Proxy of C++ itkLogImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterISS4ISS4_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterISS4ISS4_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterISS4ISS4_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterISS4ISS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterISS4ISS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterISS4ISS4

        Create a new object of the class itkLogImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterISS4ISS4 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterISS4ISS4_swigregister(itkLogImageFilterISS4ISS4)

def itkLogImageFilterIUC2IUC2_New():
    return itkLogImageFilterIUC2IUC2.New()

class itkLogImageFilterIUC2IUC2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    r"""Proxy of C++ itkLogImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterIUC2IUC2_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterIUC2IUC2_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIUC2IUC2_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIUC2IUC2

        Create a new object of the class itkLogImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIUC2IUC2 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIUC2IUC2_swigregister(itkLogImageFilterIUC2IUC2)

def itkLogImageFilterIUC3IUC3_New():
    return itkLogImageFilterIUC3IUC3.New()

class itkLogImageFilterIUC3IUC3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    r"""Proxy of C++ itkLogImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterIUC3IUC3_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterIUC3IUC3_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIUC3IUC3_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIUC3IUC3

        Create a new object of the class itkLogImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIUC3IUC3 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIUC3IUC3_swigregister(itkLogImageFilterIUC3IUC3)

def itkLogImageFilterIUC4IUC4_New():
    return itkLogImageFilterIUC4IUC4.New()

class itkLogImageFilterIUC4IUC4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC4IUC4):
    r"""Proxy of C++ itkLogImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterIUC4IUC4_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterIUC4IUC4_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIUC4IUC4_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIUC4IUC4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIUC4IUC4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIUC4IUC4

        Create a new object of the class itkLogImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIUC4IUC4 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIUC4IUC4_swigregister(itkLogImageFilterIUC4IUC4)

def itkLogImageFilterIUS2IUS2_New():
    return itkLogImageFilterIUS2IUS2.New()

class itkLogImageFilterIUS2IUS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    r"""Proxy of C++ itkLogImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterIUS2IUS2_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterIUS2IUS2_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIUS2IUS2_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIUS2IUS2

        Create a new object of the class itkLogImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIUS2IUS2 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIUS2IUS2_swigregister(itkLogImageFilterIUS2IUS2)

def itkLogImageFilterIUS3IUS3_New():
    return itkLogImageFilterIUS3IUS3.New()

class itkLogImageFilterIUS3IUS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    r"""Proxy of C++ itkLogImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterIUS3IUS3_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterIUS3IUS3_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIUS3IUS3_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIUS3IUS3

        Create a new object of the class itkLogImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIUS3IUS3 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIUS3IUS3_swigregister(itkLogImageFilterIUS3IUS3)

def itkLogImageFilterIUS4IUS4_New():
    return itkLogImageFilterIUS4IUS4.New()

class itkLogImageFilterIUS4IUS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS4IUS4):
    r"""Proxy of C++ itkLogImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogImageFilterIUS4IUS4_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogImageFilterIUS4IUS4_Pointer"""
        return _itkLogImageFilterPython.itkLogImageFilterIUS4IUS4_Clone(self)
    InputConvertibleToDoubleCheck = _itkLogImageFilterPython.itkLogImageFilterIUS4IUS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkLogImageFilterPython.itkLogImageFilterIUS4IUS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkLogImageFilterPython.delete_itkLogImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogImageFilterPython.itkLogImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogImageFilterIUS4IUS4

        Create a new object of the class itkLogImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogImageFilterIUS4IUS4 in _itkLogImageFilterPython:
_itkLogImageFilterPython.itkLogImageFilterIUS4IUS4_swigregister(itkLogImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def log_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for LogImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.LogImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def log_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.LogImageFilter
    log_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    log_image_filter.__doc__ = filter_object.__doc__



