# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNormalizeImageFilterPython
else:
    import _itkNormalizeImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkNormalizeImageFilterID2ID2_New():
    return itkNormalizeImageFilterID2ID2.New()

class itkNormalizeImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkNormalizeImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterID2ID2_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterID2ID2_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterID2ID2_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterID2ID2

        Create a new object of the class itkNormalizeImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterID2ID2 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterID2ID2_swigregister(itkNormalizeImageFilterID2ID2)

def itkNormalizeImageFilterID3ID3_New():
    return itkNormalizeImageFilterID3ID3.New()

class itkNormalizeImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkNormalizeImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterID3ID3_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterID3ID3_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterID3ID3_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterID3ID3

        Create a new object of the class itkNormalizeImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterID3ID3 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterID3ID3_swigregister(itkNormalizeImageFilterID3ID3)

def itkNormalizeImageFilterID4ID4_New():
    return itkNormalizeImageFilterID4ID4.New()

class itkNormalizeImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkNormalizeImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterID4ID4_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterID4ID4_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterID4ID4_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterID4ID4

        Create a new object of the class itkNormalizeImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterID4ID4 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterID4ID4_swigregister(itkNormalizeImageFilterID4ID4)

def itkNormalizeImageFilterIF2IF2_New():
    return itkNormalizeImageFilterIF2IF2.New()

class itkNormalizeImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkNormalizeImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterIF2IF2_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterIF2IF2_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIF2IF2_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIF2IF2

        Create a new object of the class itkNormalizeImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIF2IF2 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIF2IF2_swigregister(itkNormalizeImageFilterIF2IF2)

def itkNormalizeImageFilterIF3IF3_New():
    return itkNormalizeImageFilterIF3IF3.New()

class itkNormalizeImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkNormalizeImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterIF3IF3_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterIF3IF3_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIF3IF3_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIF3IF3

        Create a new object of the class itkNormalizeImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIF3IF3 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIF3IF3_swigregister(itkNormalizeImageFilterIF3IF3)

def itkNormalizeImageFilterIF4IF4_New():
    return itkNormalizeImageFilterIF4IF4.New()

class itkNormalizeImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkNormalizeImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterIF4IF4_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterIF4IF4_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIF4IF4_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIF4IF4

        Create a new object of the class itkNormalizeImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIF4IF4 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIF4IF4_swigregister(itkNormalizeImageFilterIF4IF4)

def itkNormalizeImageFilterISS2ISS2_New():
    return itkNormalizeImageFilterISS2ISS2.New()

class itkNormalizeImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkNormalizeImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterISS2ISS2_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterISS2ISS2_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterISS2ISS2_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterISS2ISS2

        Create a new object of the class itkNormalizeImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterISS2ISS2 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterISS2ISS2_swigregister(itkNormalizeImageFilterISS2ISS2)

def itkNormalizeImageFilterISS3ISS3_New():
    return itkNormalizeImageFilterISS3ISS3.New()

class itkNormalizeImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkNormalizeImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterISS3ISS3_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterISS3ISS3_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterISS3ISS3_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterISS3ISS3

        Create a new object of the class itkNormalizeImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterISS3ISS3 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterISS3ISS3_swigregister(itkNormalizeImageFilterISS3ISS3)

def itkNormalizeImageFilterISS4ISS4_New():
    return itkNormalizeImageFilterISS4ISS4.New()

class itkNormalizeImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkNormalizeImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterISS4ISS4_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterISS4ISS4_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterISS4ISS4_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterISS4ISS4

        Create a new object of the class itkNormalizeImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterISS4ISS4 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterISS4ISS4_swigregister(itkNormalizeImageFilterISS4ISS4)

def itkNormalizeImageFilterIUC2IUC2_New():
    return itkNormalizeImageFilterIUC2IUC2.New()

class itkNormalizeImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkNormalizeImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterIUC2IUC2_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterIUC2IUC2_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC2IUC2_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIUC2IUC2

        Create a new object of the class itkNormalizeImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIUC2IUC2 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC2IUC2_swigregister(itkNormalizeImageFilterIUC2IUC2)

def itkNormalizeImageFilterIUC3IUC3_New():
    return itkNormalizeImageFilterIUC3IUC3.New()

class itkNormalizeImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkNormalizeImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterIUC3IUC3_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterIUC3IUC3_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC3IUC3_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIUC3IUC3

        Create a new object of the class itkNormalizeImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIUC3IUC3 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC3IUC3_swigregister(itkNormalizeImageFilterIUC3IUC3)

def itkNormalizeImageFilterIUC4IUC4_New():
    return itkNormalizeImageFilterIUC4IUC4.New()

class itkNormalizeImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkNormalizeImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterIUC4IUC4_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterIUC4IUC4_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC4IUC4_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIUC4IUC4

        Create a new object of the class itkNormalizeImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIUC4IUC4 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUC4IUC4_swigregister(itkNormalizeImageFilterIUC4IUC4)

def itkNormalizeImageFilterIUS2IUS2_New():
    return itkNormalizeImageFilterIUS2IUS2.New()

class itkNormalizeImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkNormalizeImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterIUS2IUS2_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterIUS2IUS2_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS2IUS2_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIUS2IUS2

        Create a new object of the class itkNormalizeImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIUS2IUS2 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS2IUS2_swigregister(itkNormalizeImageFilterIUS2IUS2)

def itkNormalizeImageFilterIUS3IUS3_New():
    return itkNormalizeImageFilterIUS3IUS3.New()

class itkNormalizeImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkNormalizeImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterIUS3IUS3_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterIUS3IUS3_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS3IUS3_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIUS3IUS3

        Create a new object of the class itkNormalizeImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIUS3IUS3 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS3IUS3_swigregister(itkNormalizeImageFilterIUS3IUS3)

def itkNormalizeImageFilterIUS4IUS4_New():
    return itkNormalizeImageFilterIUS4IUS4.New()

class itkNormalizeImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkNormalizeImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNormalizeImageFilterIUS4IUS4_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNormalizeImageFilterIUS4IUS4_Pointer"""
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS4IUS4_Clone(self)
    __swig_destroy__ = _itkNormalizeImageFilterPython.delete_itkNormalizeImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNormalizeImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNormalizeImageFilterIUS4IUS4

        Create a new object of the class itkNormalizeImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeImageFilterIUS4IUS4 in _itkNormalizeImageFilterPython:
_itkNormalizeImageFilterPython.itkNormalizeImageFilterIUS4IUS4_swigregister(itkNormalizeImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def normalize_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for NormalizeImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.NormalizeImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def normalize_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.NormalizeImageFilter
    normalize_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    normalize_image_filter.__doc__ = filter_object.__doc__



