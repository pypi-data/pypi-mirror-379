# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKSpatialObjectsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkArrowSpatialObjectPython
else:
    import _itkArrowSpatialObjectPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSpatialObjectBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkArrayPython
import itk.itkContinuousIndexPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkOptimizerParametersPython
import itk.itkTransformBasePython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython

def itkArrowSpatialObject2_New():
    return itkArrowSpatialObject2.New()

class itkArrowSpatialObject2(itk.itkSpatialObjectBasePython.itkSpatialObject2):
    r"""Proxy of C++ itkArrowSpatialObject2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrowSpatialObject2_Pointer"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrowSpatialObject2_Pointer"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject2_Clone(self)

    def SetPositionInObjectSpace(self, _arg):
        r"""
        SetPositionInObjectSpace(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        """
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject2_SetPositionInObjectSpace(self, _arg)

    def GetPositionInObjectSpace(self):
        r"""GetPositionInObjectSpace(self) -> itkPointD2"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject2_GetPositionInObjectSpace(self)

    def SetDirectionInObjectSpace(self, _arg):
        r"""
        SetDirectionInObjectSpace(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD2

        """
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject2_SetDirectionInObjectSpace(self, _arg)

    def GetDirectionInObjectSpace(self):
        r"""GetDirectionInObjectSpace(self) -> itkVectorD2"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject2_GetDirectionInObjectSpace(self)

    def SetLengthInObjectSpace(self, _arg):
        r"""
        SetLengthInObjectSpace(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject2_SetLengthInObjectSpace(self, _arg)

    def GetLengthInObjectSpace(self):
        r"""GetLengthInObjectSpace(self) -> double const &"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject2_GetLengthInObjectSpace(self)

    def GetPositionInWorldSpace(self):
        r"""GetPositionInWorldSpace(self) -> itkPointD2"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject2_GetPositionInWorldSpace(self)

    def GetDirectionInWorldSpace(self):
        r"""GetDirectionInWorldSpace(self) -> itkVectorD2"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject2_GetDirectionInWorldSpace(self)

    def GetLengthInWorldSpace(self):
        r"""GetLengthInWorldSpace(self) -> double"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject2_GetLengthInWorldSpace(self)
    __swig_destroy__ = _itkArrowSpatialObjectPython.delete_itkArrowSpatialObject2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrowSpatialObject2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrowSpatialObject2

        Create a new object of the class itkArrowSpatialObject2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrowSpatialObject2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrowSpatialObject2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrowSpatialObject2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrowSpatialObject2 in _itkArrowSpatialObjectPython:
_itkArrowSpatialObjectPython.itkArrowSpatialObject2_swigregister(itkArrowSpatialObject2)

def itkArrowSpatialObject3_New():
    return itkArrowSpatialObject3.New()

class itkArrowSpatialObject3(itk.itkSpatialObjectBasePython.itkSpatialObject3):
    r"""Proxy of C++ itkArrowSpatialObject3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrowSpatialObject3_Pointer"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrowSpatialObject3_Pointer"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject3_Clone(self)

    def SetPositionInObjectSpace(self, _arg):
        r"""
        SetPositionInObjectSpace(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        """
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject3_SetPositionInObjectSpace(self, _arg)

    def GetPositionInObjectSpace(self):
        r"""GetPositionInObjectSpace(self) -> itkPointD3"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject3_GetPositionInObjectSpace(self)

    def SetDirectionInObjectSpace(self, _arg):
        r"""
        SetDirectionInObjectSpace(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        """
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject3_SetDirectionInObjectSpace(self, _arg)

    def GetDirectionInObjectSpace(self):
        r"""GetDirectionInObjectSpace(self) -> itkVectorD3"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject3_GetDirectionInObjectSpace(self)

    def SetLengthInObjectSpace(self, _arg):
        r"""
        SetLengthInObjectSpace(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject3_SetLengthInObjectSpace(self, _arg)

    def GetLengthInObjectSpace(self):
        r"""GetLengthInObjectSpace(self) -> double const &"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject3_GetLengthInObjectSpace(self)

    def GetPositionInWorldSpace(self):
        r"""GetPositionInWorldSpace(self) -> itkPointD3"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject3_GetPositionInWorldSpace(self)

    def GetDirectionInWorldSpace(self):
        r"""GetDirectionInWorldSpace(self) -> itkVectorD3"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject3_GetDirectionInWorldSpace(self)

    def GetLengthInWorldSpace(self):
        r"""GetLengthInWorldSpace(self) -> double"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject3_GetLengthInWorldSpace(self)
    __swig_destroy__ = _itkArrowSpatialObjectPython.delete_itkArrowSpatialObject3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrowSpatialObject3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrowSpatialObject3

        Create a new object of the class itkArrowSpatialObject3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrowSpatialObject3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrowSpatialObject3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrowSpatialObject3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrowSpatialObject3 in _itkArrowSpatialObjectPython:
_itkArrowSpatialObjectPython.itkArrowSpatialObject3_swigregister(itkArrowSpatialObject3)

def itkArrowSpatialObject4_New():
    return itkArrowSpatialObject4.New()

class itkArrowSpatialObject4(itk.itkSpatialObjectBasePython.itkSpatialObject4):
    r"""Proxy of C++ itkArrowSpatialObject4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrowSpatialObject4_Pointer"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrowSpatialObject4_Pointer"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject4_Clone(self)

    def SetPositionInObjectSpace(self, _arg):
        r"""
        SetPositionInObjectSpace(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        """
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject4_SetPositionInObjectSpace(self, _arg)

    def GetPositionInObjectSpace(self):
        r"""GetPositionInObjectSpace(self) -> itkPointD4"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject4_GetPositionInObjectSpace(self)

    def SetDirectionInObjectSpace(self, _arg):
        r"""
        SetDirectionInObjectSpace(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD4

        """
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject4_SetDirectionInObjectSpace(self, _arg)

    def GetDirectionInObjectSpace(self):
        r"""GetDirectionInObjectSpace(self) -> itkVectorD4"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject4_GetDirectionInObjectSpace(self)

    def SetLengthInObjectSpace(self, _arg):
        r"""
        SetLengthInObjectSpace(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject4_SetLengthInObjectSpace(self, _arg)

    def GetLengthInObjectSpace(self):
        r"""GetLengthInObjectSpace(self) -> double const &"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject4_GetLengthInObjectSpace(self)

    def GetPositionInWorldSpace(self):
        r"""GetPositionInWorldSpace(self) -> itkPointD4"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject4_GetPositionInWorldSpace(self)

    def GetDirectionInWorldSpace(self):
        r"""GetDirectionInWorldSpace(self) -> itkVectorD4"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject4_GetDirectionInWorldSpace(self)

    def GetLengthInWorldSpace(self):
        r"""GetLengthInWorldSpace(self) -> double"""
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject4_GetLengthInWorldSpace(self)
    __swig_destroy__ = _itkArrowSpatialObjectPython.delete_itkArrowSpatialObject4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrowSpatialObject4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrowSpatialObjectPython.itkArrowSpatialObject4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrowSpatialObject4

        Create a new object of the class itkArrowSpatialObject4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrowSpatialObject4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrowSpatialObject4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrowSpatialObject4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrowSpatialObject4 in _itkArrowSpatialObjectPython:
_itkArrowSpatialObjectPython.itkArrowSpatialObject4_swigregister(itkArrowSpatialObject4)

