# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkExpImageFilterPython
else:
    import _itkExpImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkUnaryGeneratorImageFilterPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterBPython
import itk.itkInPlaceImageFilterBPython

def itkExpImageFilterID2ID2_New():
    return itkExpImageFilterID2ID2.New()

class itkExpImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""Proxy of C++ itkExpImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterID2ID2_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterID2ID2_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterID2ID2_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterID2ID2

        Create a new object of the class itkExpImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterID2ID2 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterID2ID2_swigregister(itkExpImageFilterID2ID2)

def itkExpImageFilterID3ID3_New():
    return itkExpImageFilterID3ID3.New()

class itkExpImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""Proxy of C++ itkExpImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterID3ID3_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterID3ID3_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterID3ID3_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterID3ID3

        Create a new object of the class itkExpImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterID3ID3 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterID3ID3_swigregister(itkExpImageFilterID3ID3)

def itkExpImageFilterID4ID4_New():
    return itkExpImageFilterID4ID4.New()

class itkExpImageFilterID4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID4ID4):
    r"""Proxy of C++ itkExpImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterID4ID4_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterID4ID4_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterID4ID4_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterID4ID4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterID4ID4

        Create a new object of the class itkExpImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterID4ID4 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterID4ID4_swigregister(itkExpImageFilterID4ID4)

def itkExpImageFilterIF2IF2_New():
    return itkExpImageFilterIF2IF2.New()

class itkExpImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""Proxy of C++ itkExpImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterIF2IF2_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterIF2IF2_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIF2IF2_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterIF2IF2

        Create a new object of the class itkExpImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterIF2IF2 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterIF2IF2_swigregister(itkExpImageFilterIF2IF2)

def itkExpImageFilterIF3IF3_New():
    return itkExpImageFilterIF3IF3.New()

class itkExpImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""Proxy of C++ itkExpImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterIF3IF3_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterIF3IF3_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIF3IF3_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterIF3IF3

        Create a new object of the class itkExpImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterIF3IF3 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterIF3IF3_swigregister(itkExpImageFilterIF3IF3)

def itkExpImageFilterIF4IF4_New():
    return itkExpImageFilterIF4IF4.New()

class itkExpImageFilterIF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF4IF4):
    r"""Proxy of C++ itkExpImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterIF4IF4_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterIF4IF4_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIF4IF4_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterIF4IF4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterIF4IF4

        Create a new object of the class itkExpImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterIF4IF4 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterIF4IF4_swigregister(itkExpImageFilterIF4IF4)

def itkExpImageFilterISS2ISS2_New():
    return itkExpImageFilterISS2ISS2.New()

class itkExpImageFilterISS2ISS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    r"""Proxy of C++ itkExpImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterISS2ISS2_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterISS2ISS2_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterISS2ISS2_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterISS2ISS2

        Create a new object of the class itkExpImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterISS2ISS2 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterISS2ISS2_swigregister(itkExpImageFilterISS2ISS2)

def itkExpImageFilterISS3ISS3_New():
    return itkExpImageFilterISS3ISS3.New()

class itkExpImageFilterISS3ISS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    r"""Proxy of C++ itkExpImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterISS3ISS3_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterISS3ISS3_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterISS3ISS3_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterISS3ISS3

        Create a new object of the class itkExpImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterISS3ISS3 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterISS3ISS3_swigregister(itkExpImageFilterISS3ISS3)

def itkExpImageFilterISS4ISS4_New():
    return itkExpImageFilterISS4ISS4.New()

class itkExpImageFilterISS4ISS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS4ISS4):
    r"""Proxy of C++ itkExpImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterISS4ISS4_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterISS4ISS4_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterISS4ISS4_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterISS4ISS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterISS4ISS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterISS4ISS4

        Create a new object of the class itkExpImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterISS4ISS4 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterISS4ISS4_swigregister(itkExpImageFilterISS4ISS4)

def itkExpImageFilterIUC2IUC2_New():
    return itkExpImageFilterIUC2IUC2.New()

class itkExpImageFilterIUC2IUC2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    r"""Proxy of C++ itkExpImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterIUC2IUC2_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterIUC2IUC2_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIUC2IUC2_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterIUC2IUC2

        Create a new object of the class itkExpImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterIUC2IUC2 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterIUC2IUC2_swigregister(itkExpImageFilterIUC2IUC2)

def itkExpImageFilterIUC3IUC3_New():
    return itkExpImageFilterIUC3IUC3.New()

class itkExpImageFilterIUC3IUC3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    r"""Proxy of C++ itkExpImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterIUC3IUC3_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterIUC3IUC3_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIUC3IUC3_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterIUC3IUC3

        Create a new object of the class itkExpImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterIUC3IUC3 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterIUC3IUC3_swigregister(itkExpImageFilterIUC3IUC3)

def itkExpImageFilterIUC4IUC4_New():
    return itkExpImageFilterIUC4IUC4.New()

class itkExpImageFilterIUC4IUC4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC4IUC4):
    r"""Proxy of C++ itkExpImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterIUC4IUC4_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterIUC4IUC4_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIUC4IUC4_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterIUC4IUC4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterIUC4IUC4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterIUC4IUC4

        Create a new object of the class itkExpImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterIUC4IUC4 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterIUC4IUC4_swigregister(itkExpImageFilterIUC4IUC4)

def itkExpImageFilterIUS2IUS2_New():
    return itkExpImageFilterIUS2IUS2.New()

class itkExpImageFilterIUS2IUS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    r"""Proxy of C++ itkExpImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterIUS2IUS2_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterIUS2IUS2_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIUS2IUS2_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterIUS2IUS2

        Create a new object of the class itkExpImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterIUS2IUS2 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterIUS2IUS2_swigregister(itkExpImageFilterIUS2IUS2)

def itkExpImageFilterIUS3IUS3_New():
    return itkExpImageFilterIUS3IUS3.New()

class itkExpImageFilterIUS3IUS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    r"""Proxy of C++ itkExpImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterIUS3IUS3_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterIUS3IUS3_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIUS3IUS3_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterIUS3IUS3

        Create a new object of the class itkExpImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterIUS3IUS3 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterIUS3IUS3_swigregister(itkExpImageFilterIUS3IUS3)

def itkExpImageFilterIUS4IUS4_New():
    return itkExpImageFilterIUS4IUS4.New()

class itkExpImageFilterIUS4IUS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS4IUS4):
    r"""Proxy of C++ itkExpImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkExpImageFilterIUS4IUS4_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkExpImageFilterIUS4IUS4_Pointer"""
        return _itkExpImageFilterPython.itkExpImageFilterIUS4IUS4_Clone(self)
    InputConvertibleToDoubleCheck = _itkExpImageFilterPython.itkExpImageFilterIUS4IUS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpImageFilterPython.itkExpImageFilterIUS4IUS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpImageFilterPython.delete_itkExpImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkExpImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkExpImageFilterPython.itkExpImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkExpImageFilterIUS4IUS4

        Create a new object of the class itkExpImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpImageFilterIUS4IUS4 in _itkExpImageFilterPython:
_itkExpImageFilterPython.itkExpImageFilterIUS4IUS4_swigregister(itkExpImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def exp_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ExpImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ExpImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def exp_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.ExpImageFilter
    exp_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    exp_image_filter.__doc__ = filter_object.__doc__



