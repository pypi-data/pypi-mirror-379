# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageStatisticsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSumProjectionImageFilterPython
else:
    import _itkSumProjectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterBPython

def itkSumProjectionImageFilterID2ID2_Superclass_New():
    return itkSumProjectionImageFilterID2ID2_Superclass.New()

class itkSumProjectionImageFilterID2ID2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkSumProjectionImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterID2ID2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterID2ID2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID2ID2_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID2ID2_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID2ID2_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID2ID2_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterID2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterID2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterID2ID2_Superclass

        Create a new object of the class itkSumProjectionImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterID2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterID2ID2_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID2ID2_Superclass_swigregister(itkSumProjectionImageFilterID2ID2_Superclass)

def itkSumProjectionImageFilterID3ID2_Superclass_New():
    return itkSumProjectionImageFilterID3ID2_Superclass.New()

class itkSumProjectionImageFilterID3ID2_Superclass(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ID2):
    r"""Proxy of C++ itkSumProjectionImageFilterID3ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterID3ID2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterID3ID2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID2_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID2_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID2_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID2_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterID3ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterID3ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterID3ID2_Superclass

        Create a new object of the class itkSumProjectionImageFilterID3ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterID3ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterID3ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterID3ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterID3ID2_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID2_Superclass_swigregister(itkSumProjectionImageFilterID3ID2_Superclass)

def itkSumProjectionImageFilterID3ID3_Superclass_New():
    return itkSumProjectionImageFilterID3ID3_Superclass.New()

class itkSumProjectionImageFilterID3ID3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkSumProjectionImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterID3ID3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterID3ID3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID3_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID3_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID3_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID3_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterID3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterID3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterID3ID3_Superclass

        Create a new object of the class itkSumProjectionImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterID3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterID3ID3_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID3_Superclass_swigregister(itkSumProjectionImageFilterID3ID3_Superclass)

def itkSumProjectionImageFilterID4ID3_Superclass_New():
    return itkSumProjectionImageFilterID4ID3_Superclass.New()

class itkSumProjectionImageFilterID4ID3_Superclass(itk.itkImageToImageFilterBPython.itkImageToImageFilterID4ID3):
    r"""Proxy of C++ itkSumProjectionImageFilterID4ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterID4ID3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterID4ID3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID3_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID3_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID3_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID3_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterID4ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterID4ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterID4ID3_Superclass

        Create a new object of the class itkSumProjectionImageFilterID4ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterID4ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterID4ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterID4ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterID4ID3_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID3_Superclass_swigregister(itkSumProjectionImageFilterID4ID3_Superclass)

def itkSumProjectionImageFilterID4ID4_Superclass_New():
    return itkSumProjectionImageFilterID4ID4_Superclass.New()

class itkSumProjectionImageFilterID4ID4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkSumProjectionImageFilterID4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterID4ID4_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterID4ID4_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID4_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID4_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID4_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID4_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterID4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterID4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterID4ID4_Superclass

        Create a new object of the class itkSumProjectionImageFilterID4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterID4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterID4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterID4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterID4ID4_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID4_Superclass_swigregister(itkSumProjectionImageFilterID4ID4_Superclass)

def itkSumProjectionImageFilterIF2IF2_Superclass_New():
    return itkSumProjectionImageFilterIF2IF2_Superclass.New()

class itkSumProjectionImageFilterIF2IF2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkSumProjectionImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIF2IF2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIF2IF2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF2IF2_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF2IF2_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF2IF2_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF2IF2_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIF2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIF2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIF2IF2_Superclass

        Create a new object of the class itkSumProjectionImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIF2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIF2IF2_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF2IF2_Superclass_swigregister(itkSumProjectionImageFilterIF2IF2_Superclass)

def itkSumProjectionImageFilterIF3IF2_Superclass_New():
    return itkSumProjectionImageFilterIF3IF2_Superclass.New()

class itkSumProjectionImageFilterIF3IF2_Superclass(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2):
    r"""Proxy of C++ itkSumProjectionImageFilterIF3IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIF3IF2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIF3IF2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF2_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF2_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF2_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF2_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIF3IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIF3IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIF3IF2_Superclass

        Create a new object of the class itkSumProjectionImageFilterIF3IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIF3IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIF3IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIF3IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIF3IF2_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF2_Superclass_swigregister(itkSumProjectionImageFilterIF3IF2_Superclass)

def itkSumProjectionImageFilterIF3IF3_Superclass_New():
    return itkSumProjectionImageFilterIF3IF3_Superclass.New()

class itkSumProjectionImageFilterIF3IF3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkSumProjectionImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIF3IF3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIF3IF3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF3_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF3_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF3_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF3_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIF3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIF3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIF3IF3_Superclass

        Create a new object of the class itkSumProjectionImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIF3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIF3IF3_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF3_Superclass_swigregister(itkSumProjectionImageFilterIF3IF3_Superclass)

def itkSumProjectionImageFilterIF4IF3_Superclass_New():
    return itkSumProjectionImageFilterIF4IF3_Superclass.New()

class itkSumProjectionImageFilterIF4IF3_Superclass(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF4IF3):
    r"""Proxy of C++ itkSumProjectionImageFilterIF4IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIF4IF3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIF4IF3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF3_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF3_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF3_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF3_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIF4IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIF4IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIF4IF3_Superclass

        Create a new object of the class itkSumProjectionImageFilterIF4IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIF4IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIF4IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIF4IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIF4IF3_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF3_Superclass_swigregister(itkSumProjectionImageFilterIF4IF3_Superclass)

def itkSumProjectionImageFilterIF4IF4_Superclass_New():
    return itkSumProjectionImageFilterIF4IF4_Superclass.New()

class itkSumProjectionImageFilterIF4IF4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkSumProjectionImageFilterIF4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIF4IF4_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIF4IF4_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF4_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF4_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF4_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF4_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIF4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIF4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIF4IF4_Superclass

        Create a new object of the class itkSumProjectionImageFilterIF4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIF4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIF4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIF4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIF4IF4_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF4_Superclass_swigregister(itkSumProjectionImageFilterIF4IF4_Superclass)

def itkSumProjectionImageFilterISS2ISS2_Superclass_New():
    return itkSumProjectionImageFilterISS2ISS2_Superclass.New()

class itkSumProjectionImageFilterISS2ISS2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkSumProjectionImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS2ISS2_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS2ISS2_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS2ISS2_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS2ISS2_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterISS2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterISS2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterISS2ISS2_Superclass

        Create a new object of the class itkSumProjectionImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterISS2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterISS2ISS2_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS2ISS2_Superclass_swigregister(itkSumProjectionImageFilterISS2ISS2_Superclass)

def itkSumProjectionImageFilterISS3ISS2_Superclass_New():
    return itkSumProjectionImageFilterISS3ISS2_Superclass.New()

class itkSumProjectionImageFilterISS3ISS2_Superclass(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2):
    r"""Proxy of C++ itkSumProjectionImageFilterISS3ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterISS3ISS2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterISS3ISS2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS2_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS2_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS2_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS2_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterISS3ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterISS3ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterISS3ISS2_Superclass

        Create a new object of the class itkSumProjectionImageFilterISS3ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterISS3ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterISS3ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterISS3ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterISS3ISS2_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS2_Superclass_swigregister(itkSumProjectionImageFilterISS3ISS2_Superclass)

def itkSumProjectionImageFilterISS3ISS3_Superclass_New():
    return itkSumProjectionImageFilterISS3ISS3_Superclass.New()

class itkSumProjectionImageFilterISS3ISS3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkSumProjectionImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS3_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS3_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS3_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS3_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterISS3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterISS3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterISS3ISS3_Superclass

        Create a new object of the class itkSumProjectionImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterISS3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterISS3ISS3_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS3_Superclass_swigregister(itkSumProjectionImageFilterISS3ISS3_Superclass)

def itkSumProjectionImageFilterISS4ISS3_Superclass_New():
    return itkSumProjectionImageFilterISS4ISS3_Superclass.New()

class itkSumProjectionImageFilterISS4ISS3_Superclass(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS3):
    r"""Proxy of C++ itkSumProjectionImageFilterISS4ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterISS4ISS3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterISS4ISS3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS3_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS3_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS3_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS3_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterISS4ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterISS4ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterISS4ISS3_Superclass

        Create a new object of the class itkSumProjectionImageFilterISS4ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterISS4ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterISS4ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterISS4ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterISS4ISS3_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS3_Superclass_swigregister(itkSumProjectionImageFilterISS4ISS3_Superclass)

def itkSumProjectionImageFilterISS4ISS4_Superclass_New():
    return itkSumProjectionImageFilterISS4ISS4_Superclass.New()

class itkSumProjectionImageFilterISS4ISS4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkSumProjectionImageFilterISS4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS4_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS4_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS4_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS4_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterISS4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterISS4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterISS4ISS4_Superclass

        Create a new object of the class itkSumProjectionImageFilterISS4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterISS4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterISS4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterISS4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterISS4ISS4_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS4_Superclass_swigregister(itkSumProjectionImageFilterISS4ISS4_Superclass)

def itkSumProjectionImageFilterIUC2IUC2_Superclass_New():
    return itkSumProjectionImageFilterIUC2IUC2_Superclass.New()

class itkSumProjectionImageFilterIUC2IUC2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkSumProjectionImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC2IUC2_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC2IUC2_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC2IUC2_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC2IUC2_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUC2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUC2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkSumProjectionImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUC2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUC2IUC2_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC2IUC2_Superclass_swigregister(itkSumProjectionImageFilterIUC2IUC2_Superclass)

def itkSumProjectionImageFilterIUC3IUC2_Superclass_New():
    return itkSumProjectionImageFilterIUC3IUC2_Superclass.New()

class itkSumProjectionImageFilterIUC3IUC2_Superclass(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2):
    r"""Proxy of C++ itkSumProjectionImageFilterIUC3IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUC3IUC2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUC3IUC2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC2_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC2_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC2_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC2_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUC3IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUC3IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUC3IUC2_Superclass

        Create a new object of the class itkSumProjectionImageFilterIUC3IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUC3IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUC3IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUC3IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUC3IUC2_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC2_Superclass_swigregister(itkSumProjectionImageFilterIUC3IUC2_Superclass)

def itkSumProjectionImageFilterIUC3IUC3_Superclass_New():
    return itkSumProjectionImageFilterIUC3IUC3_Superclass.New()

class itkSumProjectionImageFilterIUC3IUC3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkSumProjectionImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC3_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC3_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC3_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC3_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUC3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUC3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkSumProjectionImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUC3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUC3IUC3_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC3_Superclass_swigregister(itkSumProjectionImageFilterIUC3IUC3_Superclass)

def itkSumProjectionImageFilterIUC4IUC3_Superclass_New():
    return itkSumProjectionImageFilterIUC4IUC3_Superclass.New()

class itkSumProjectionImageFilterIUC4IUC3_Superclass(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC3):
    r"""Proxy of C++ itkSumProjectionImageFilterIUC4IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUC4IUC3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUC4IUC3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC3_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC3_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC3_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC3_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUC4IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUC4IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUC4IUC3_Superclass

        Create a new object of the class itkSumProjectionImageFilterIUC4IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUC4IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUC4IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUC4IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUC4IUC3_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC3_Superclass_swigregister(itkSumProjectionImageFilterIUC4IUC3_Superclass)

def itkSumProjectionImageFilterIUC4IUC4_Superclass_New():
    return itkSumProjectionImageFilterIUC4IUC4_Superclass.New()

class itkSumProjectionImageFilterIUC4IUC4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkSumProjectionImageFilterIUC4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC4_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC4_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC4_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC4_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUC4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUC4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUC4IUC4_Superclass

        Create a new object of the class itkSumProjectionImageFilterIUC4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUC4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUC4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUC4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUC4IUC4_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC4_Superclass_swigregister(itkSumProjectionImageFilterIUC4IUC4_Superclass)

def itkSumProjectionImageFilterIUS2IUS2_Superclass_New():
    return itkSumProjectionImageFilterIUS2IUS2_Superclass.New()

class itkSumProjectionImageFilterIUS2IUS2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkSumProjectionImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS2IUS2_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS2IUS2_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS2IUS2_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS2IUS2_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUS2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUS2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkSumProjectionImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUS2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUS2IUS2_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS2IUS2_Superclass_swigregister(itkSumProjectionImageFilterIUS2IUS2_Superclass)

def itkSumProjectionImageFilterIUS3IUS2_Superclass_New():
    return itkSumProjectionImageFilterIUS3IUS2_Superclass.New()

class itkSumProjectionImageFilterIUS3IUS2_Superclass(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2):
    r"""Proxy of C++ itkSumProjectionImageFilterIUS3IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUS3IUS2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUS3IUS2_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS2_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS2_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS2_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS2_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUS3IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUS3IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUS3IUS2_Superclass

        Create a new object of the class itkSumProjectionImageFilterIUS3IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUS3IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUS3IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUS3IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUS3IUS2_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS2_Superclass_swigregister(itkSumProjectionImageFilterIUS3IUS2_Superclass)

def itkSumProjectionImageFilterIUS3IUS3_Superclass_New():
    return itkSumProjectionImageFilterIUS3IUS3_Superclass.New()

class itkSumProjectionImageFilterIUS3IUS3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkSumProjectionImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS3_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS3_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS3_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS3_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUS3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUS3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkSumProjectionImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUS3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUS3IUS3_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS3_Superclass_swigregister(itkSumProjectionImageFilterIUS3IUS3_Superclass)

def itkSumProjectionImageFilterIUS4IUS3_Superclass_New():
    return itkSumProjectionImageFilterIUS4IUS3_Superclass.New()

class itkSumProjectionImageFilterIUS4IUS3_Superclass(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS3):
    r"""Proxy of C++ itkSumProjectionImageFilterIUS4IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUS4IUS3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUS4IUS3_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS3_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS3_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS3_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS3_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUS4IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUS4IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUS4IUS3_Superclass

        Create a new object of the class itkSumProjectionImageFilterIUS4IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUS4IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUS4IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUS4IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUS4IUS3_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS3_Superclass_swigregister(itkSumProjectionImageFilterIUS4IUS3_Superclass)

def itkSumProjectionImageFilterIUS4IUS4_Superclass_New():
    return itkSumProjectionImageFilterIUS4IUS4_Superclass.New()

class itkSumProjectionImageFilterIUS4IUS4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkSumProjectionImageFilterIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS4_Superclass_Clone(self)
    ImageDimensionCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS4_Superclass_ImageDimensionCheck
    

    def SetProjectionDimension(self, _arg):
        r"""
        SetProjectionDimension(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS4_Superclass_SetProjectionDimension(self, _arg)

    def GetProjectionDimension(self):
        r"""GetProjectionDimension(self) -> unsigned int const &"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS4_Superclass_GetProjectionDimension(self)
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUS4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUS4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUS4IUS4_Superclass

        Create a new object of the class itkSumProjectionImageFilterIUS4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUS4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUS4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUS4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUS4IUS4_Superclass in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS4_Superclass_swigregister(itkSumProjectionImageFilterIUS4IUS4_Superclass)

def itkSumProjectionImageFilterID2ID2_New():
    return itkSumProjectionImageFilterID2ID2.New()

class itkSumProjectionImageFilterID2ID2(itkSumProjectionImageFilterID2ID2_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterID2ID2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterID2ID2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID2ID2_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID2ID2_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterID2ID2

        Create a new object of the class itkSumProjectionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterID2ID2 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID2ID2_swigregister(itkSumProjectionImageFilterID2ID2)

def itkSumProjectionImageFilterID3ID2_New():
    return itkSumProjectionImageFilterID3ID2.New()

class itkSumProjectionImageFilterID3ID2(itkSumProjectionImageFilterID3ID2_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterID3ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterID3ID2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterID3ID2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID2_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID2_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterID3ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterID3ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterID3ID2

        Create a new object of the class itkSumProjectionImageFilterID3ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterID3ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterID3ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterID3ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterID3ID2 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID2_swigregister(itkSumProjectionImageFilterID3ID2)

def itkSumProjectionImageFilterID3ID3_New():
    return itkSumProjectionImageFilterID3ID3.New()

class itkSumProjectionImageFilterID3ID3(itkSumProjectionImageFilterID3ID3_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterID3ID3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterID3ID3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID3_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID3_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterID3ID3

        Create a new object of the class itkSumProjectionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterID3ID3 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID3ID3_swigregister(itkSumProjectionImageFilterID3ID3)

def itkSumProjectionImageFilterID4ID3_New():
    return itkSumProjectionImageFilterID4ID3.New()

class itkSumProjectionImageFilterID4ID3(itkSumProjectionImageFilterID4ID3_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterID4ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterID4ID3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterID4ID3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID3_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID3_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterID4ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterID4ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterID4ID3

        Create a new object of the class itkSumProjectionImageFilterID4ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterID4ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterID4ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterID4ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterID4ID3 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID3_swigregister(itkSumProjectionImageFilterID4ID3)

def itkSumProjectionImageFilterID4ID4_New():
    return itkSumProjectionImageFilterID4ID4.New()

class itkSumProjectionImageFilterID4ID4(itkSumProjectionImageFilterID4ID4_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterID4ID4_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterID4ID4_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID4_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID4_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterID4ID4

        Create a new object of the class itkSumProjectionImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterID4ID4 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterID4ID4_swigregister(itkSumProjectionImageFilterID4ID4)

def itkSumProjectionImageFilterIF2IF2_New():
    return itkSumProjectionImageFilterIF2IF2.New()

class itkSumProjectionImageFilterIF2IF2(itkSumProjectionImageFilterIF2IF2_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIF2IF2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIF2IF2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF2IF2_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF2IF2_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIF2IF2

        Create a new object of the class itkSumProjectionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIF2IF2 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF2IF2_swigregister(itkSumProjectionImageFilterIF2IF2)

def itkSumProjectionImageFilterIF3IF2_New():
    return itkSumProjectionImageFilterIF3IF2.New()

class itkSumProjectionImageFilterIF3IF2(itkSumProjectionImageFilterIF3IF2_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIF3IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIF3IF2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIF3IF2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF2_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF2_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIF3IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIF3IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIF3IF2

        Create a new object of the class itkSumProjectionImageFilterIF3IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIF3IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIF3IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIF3IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIF3IF2 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF2_swigregister(itkSumProjectionImageFilterIF3IF2)

def itkSumProjectionImageFilterIF3IF3_New():
    return itkSumProjectionImageFilterIF3IF3.New()

class itkSumProjectionImageFilterIF3IF3(itkSumProjectionImageFilterIF3IF3_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIF3IF3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIF3IF3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF3_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF3_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIF3IF3

        Create a new object of the class itkSumProjectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIF3IF3 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF3IF3_swigregister(itkSumProjectionImageFilterIF3IF3)

def itkSumProjectionImageFilterIF4IF3_New():
    return itkSumProjectionImageFilterIF4IF3.New()

class itkSumProjectionImageFilterIF4IF3(itkSumProjectionImageFilterIF4IF3_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIF4IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIF4IF3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIF4IF3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF3_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF3_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIF4IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIF4IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIF4IF3

        Create a new object of the class itkSumProjectionImageFilterIF4IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIF4IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIF4IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIF4IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIF4IF3 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF3_swigregister(itkSumProjectionImageFilterIF4IF3)

def itkSumProjectionImageFilterIF4IF4_New():
    return itkSumProjectionImageFilterIF4IF4.New()

class itkSumProjectionImageFilterIF4IF4(itkSumProjectionImageFilterIF4IF4_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIF4IF4_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIF4IF4_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF4_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF4_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIF4IF4

        Create a new object of the class itkSumProjectionImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIF4IF4 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIF4IF4_swigregister(itkSumProjectionImageFilterIF4IF4)

def itkSumProjectionImageFilterISS2ISS2_New():
    return itkSumProjectionImageFilterISS2ISS2.New()

class itkSumProjectionImageFilterISS2ISS2(itkSumProjectionImageFilterISS2ISS2_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterISS2ISS2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterISS2ISS2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS2ISS2_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS2ISS2_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterISS2ISS2

        Create a new object of the class itkSumProjectionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterISS2ISS2 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS2ISS2_swigregister(itkSumProjectionImageFilterISS2ISS2)

def itkSumProjectionImageFilterISS3ISS2_New():
    return itkSumProjectionImageFilterISS3ISS2.New()

class itkSumProjectionImageFilterISS3ISS2(itkSumProjectionImageFilterISS3ISS2_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterISS3ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterISS3ISS2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterISS3ISS2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS2_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS2_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterISS3ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterISS3ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterISS3ISS2

        Create a new object of the class itkSumProjectionImageFilterISS3ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterISS3ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterISS3ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterISS3ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterISS3ISS2 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS2_swigregister(itkSumProjectionImageFilterISS3ISS2)

def itkSumProjectionImageFilterISS3ISS3_New():
    return itkSumProjectionImageFilterISS3ISS3.New()

class itkSumProjectionImageFilterISS3ISS3(itkSumProjectionImageFilterISS3ISS3_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterISS3ISS3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterISS3ISS3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS3_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS3_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterISS3ISS3

        Create a new object of the class itkSumProjectionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterISS3ISS3 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS3ISS3_swigregister(itkSumProjectionImageFilterISS3ISS3)

def itkSumProjectionImageFilterISS4ISS3_New():
    return itkSumProjectionImageFilterISS4ISS3.New()

class itkSumProjectionImageFilterISS4ISS3(itkSumProjectionImageFilterISS4ISS3_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterISS4ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterISS4ISS3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterISS4ISS3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS3_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS3_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterISS4ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterISS4ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterISS4ISS3

        Create a new object of the class itkSumProjectionImageFilterISS4ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterISS4ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterISS4ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterISS4ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterISS4ISS3 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS3_swigregister(itkSumProjectionImageFilterISS4ISS3)

def itkSumProjectionImageFilterISS4ISS4_New():
    return itkSumProjectionImageFilterISS4ISS4.New()

class itkSumProjectionImageFilterISS4ISS4(itkSumProjectionImageFilterISS4ISS4_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterISS4ISS4_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterISS4ISS4_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS4_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS4_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterISS4ISS4

        Create a new object of the class itkSumProjectionImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterISS4ISS4 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterISS4ISS4_swigregister(itkSumProjectionImageFilterISS4ISS4)

def itkSumProjectionImageFilterIUC2IUC2_New():
    return itkSumProjectionImageFilterIUC2IUC2.New()

class itkSumProjectionImageFilterIUC2IUC2(itkSumProjectionImageFilterIUC2IUC2_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUC2IUC2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUC2IUC2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC2IUC2_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC2IUC2_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUC2IUC2

        Create a new object of the class itkSumProjectionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUC2IUC2 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC2IUC2_swigregister(itkSumProjectionImageFilterIUC2IUC2)

def itkSumProjectionImageFilterIUC3IUC2_New():
    return itkSumProjectionImageFilterIUC3IUC2.New()

class itkSumProjectionImageFilterIUC3IUC2(itkSumProjectionImageFilterIUC3IUC2_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIUC3IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUC3IUC2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUC3IUC2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC2_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC2_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUC3IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUC3IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUC3IUC2

        Create a new object of the class itkSumProjectionImageFilterIUC3IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUC3IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUC3IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUC3IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUC3IUC2 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC2_swigregister(itkSumProjectionImageFilterIUC3IUC2)

def itkSumProjectionImageFilterIUC3IUC3_New():
    return itkSumProjectionImageFilterIUC3IUC3.New()

class itkSumProjectionImageFilterIUC3IUC3(itkSumProjectionImageFilterIUC3IUC3_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUC3IUC3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUC3IUC3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC3_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC3_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUC3IUC3

        Create a new object of the class itkSumProjectionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUC3IUC3 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC3IUC3_swigregister(itkSumProjectionImageFilterIUC3IUC3)

def itkSumProjectionImageFilterIUC4IUC3_New():
    return itkSumProjectionImageFilterIUC4IUC3.New()

class itkSumProjectionImageFilterIUC4IUC3(itkSumProjectionImageFilterIUC4IUC3_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIUC4IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUC4IUC3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUC4IUC3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC3_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC3_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUC4IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUC4IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUC4IUC3

        Create a new object of the class itkSumProjectionImageFilterIUC4IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUC4IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUC4IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUC4IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUC4IUC3 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC3_swigregister(itkSumProjectionImageFilterIUC4IUC3)

def itkSumProjectionImageFilterIUC4IUC4_New():
    return itkSumProjectionImageFilterIUC4IUC4.New()

class itkSumProjectionImageFilterIUC4IUC4(itkSumProjectionImageFilterIUC4IUC4_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUC4IUC4_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUC4IUC4_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC4_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC4_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUC4IUC4

        Create a new object of the class itkSumProjectionImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUC4IUC4 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUC4IUC4_swigregister(itkSumProjectionImageFilterIUC4IUC4)

def itkSumProjectionImageFilterIUS2IUS2_New():
    return itkSumProjectionImageFilterIUS2IUS2.New()

class itkSumProjectionImageFilterIUS2IUS2(itkSumProjectionImageFilterIUS2IUS2_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUS2IUS2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUS2IUS2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS2IUS2_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS2IUS2_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUS2IUS2

        Create a new object of the class itkSumProjectionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUS2IUS2 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS2IUS2_swigregister(itkSumProjectionImageFilterIUS2IUS2)

def itkSumProjectionImageFilterIUS3IUS2_New():
    return itkSumProjectionImageFilterIUS3IUS2.New()

class itkSumProjectionImageFilterIUS3IUS2(itkSumProjectionImageFilterIUS3IUS2_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIUS3IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUS3IUS2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUS3IUS2_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS2_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS2_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUS3IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUS3IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUS3IUS2

        Create a new object of the class itkSumProjectionImageFilterIUS3IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUS3IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUS3IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUS3IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUS3IUS2 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS2_swigregister(itkSumProjectionImageFilterIUS3IUS2)

def itkSumProjectionImageFilterIUS3IUS3_New():
    return itkSumProjectionImageFilterIUS3IUS3.New()

class itkSumProjectionImageFilterIUS3IUS3(itkSumProjectionImageFilterIUS3IUS3_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUS3IUS3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUS3IUS3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS3_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS3_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUS3IUS3

        Create a new object of the class itkSumProjectionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUS3IUS3 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS3IUS3_swigregister(itkSumProjectionImageFilterIUS3IUS3)

def itkSumProjectionImageFilterIUS4IUS3_New():
    return itkSumProjectionImageFilterIUS4IUS3.New()

class itkSumProjectionImageFilterIUS4IUS3(itkSumProjectionImageFilterIUS4IUS3_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIUS4IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUS4IUS3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUS4IUS3_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS3_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS3_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUS4IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUS4IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUS4IUS3

        Create a new object of the class itkSumProjectionImageFilterIUS4IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUS4IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUS4IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUS4IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUS4IUS3 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS3_swigregister(itkSumProjectionImageFilterIUS4IUS3)

def itkSumProjectionImageFilterIUS4IUS4_New():
    return itkSumProjectionImageFilterIUS4IUS4.New()

class itkSumProjectionImageFilterIUS4IUS4(itkSumProjectionImageFilterIUS4IUS4_Superclass):
    r"""Proxy of C++ itkSumProjectionImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSumProjectionImageFilterIUS4IUS4_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSumProjectionImageFilterIUS4IUS4_Pointer"""
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS4_Clone(self)
    InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS4_InputPixelToOutputPixelTypeGreaterAdditiveOperatorCheck
    
    InputHasNumericTraitsCheck = _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSumProjectionImageFilterPython.delete_itkSumProjectionImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSumProjectionImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSumProjectionImageFilterIUS4IUS4

        Create a new object of the class itkSumProjectionImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSumProjectionImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSumProjectionImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSumProjectionImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSumProjectionImageFilterIUS4IUS4 in _itkSumProjectionImageFilterPython:
_itkSumProjectionImageFilterPython.itkSumProjectionImageFilterIUS4IUS4_swigregister(itkSumProjectionImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def sum_projection_image_filter(*args: itkt.ImageLike,  projection_dimension: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SumProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'projection_dimension':projection_dimension }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SumProjectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def sum_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageStatistics.SumProjectionImageFilter
    sum_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    sum_projection_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def projection_image_filter(*args: itkt.ImageLike,  projection_dimension: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'projection_dimension':projection_dimension }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ProjectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageStatistics.ProjectionImageFilter
    projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    projection_image_filter.__doc__ = filter_object.__doc__



