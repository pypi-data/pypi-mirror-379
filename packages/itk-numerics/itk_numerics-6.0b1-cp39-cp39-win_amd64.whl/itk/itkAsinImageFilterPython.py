# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAsinImageFilterPython
else:
    import _itkAsinImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkUnaryGeneratorImageFilterPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterBPython
import itk.itkInPlaceImageFilterBPython

def itkAsinImageFilterID2ID2_New():
    return itkAsinImageFilterID2ID2.New()

class itkAsinImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""Proxy of C++ itkAsinImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterID2ID2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterID2ID2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterID2ID2_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterID2ID2

        Create a new object of the class itkAsinImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterID2ID2 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterID2ID2_swigregister(itkAsinImageFilterID2ID2)

def itkAsinImageFilterID3ID3_New():
    return itkAsinImageFilterID3ID3.New()

class itkAsinImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""Proxy of C++ itkAsinImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterID3ID3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterID3ID3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterID3ID3_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterID3ID3

        Create a new object of the class itkAsinImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterID3ID3 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterID3ID3_swigregister(itkAsinImageFilterID3ID3)

def itkAsinImageFilterID4ID4_New():
    return itkAsinImageFilterID4ID4.New()

class itkAsinImageFilterID4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID4ID4):
    r"""Proxy of C++ itkAsinImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterID4ID4_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterID4ID4_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterID4ID4_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterID4ID4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterID4ID4

        Create a new object of the class itkAsinImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterID4ID4 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterID4ID4_swigregister(itkAsinImageFilterID4ID4)

def itkAsinImageFilterIF2IF2_New():
    return itkAsinImageFilterIF2IF2.New()

class itkAsinImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""Proxy of C++ itkAsinImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterIF2IF2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterIF2IF2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIF2IF2

        Create a new object of the class itkAsinImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIF2IF2 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_swigregister(itkAsinImageFilterIF2IF2)

def itkAsinImageFilterIF3IF3_New():
    return itkAsinImageFilterIF3IF3.New()

class itkAsinImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""Proxy of C++ itkAsinImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterIF3IF3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterIF3IF3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIF3IF3

        Create a new object of the class itkAsinImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIF3IF3 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_swigregister(itkAsinImageFilterIF3IF3)

def itkAsinImageFilterIF4IF4_New():
    return itkAsinImageFilterIF4IF4.New()

class itkAsinImageFilterIF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF4IF4):
    r"""Proxy of C++ itkAsinImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterIF4IF4_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterIF4IF4_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF4IF4_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF4IF4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIF4IF4

        Create a new object of the class itkAsinImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIF4IF4 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIF4IF4_swigregister(itkAsinImageFilterIF4IF4)

def itkAsinImageFilterISS2ISS2_New():
    return itkAsinImageFilterISS2ISS2.New()

class itkAsinImageFilterISS2ISS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    r"""Proxy of C++ itkAsinImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterISS2ISS2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterISS2ISS2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterISS2ISS2

        Create a new object of the class itkAsinImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterISS2ISS2 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_swigregister(itkAsinImageFilterISS2ISS2)

def itkAsinImageFilterISS3ISS3_New():
    return itkAsinImageFilterISS3ISS3.New()

class itkAsinImageFilterISS3ISS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    r"""Proxy of C++ itkAsinImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterISS3ISS3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterISS3ISS3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterISS3ISS3

        Create a new object of the class itkAsinImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterISS3ISS3 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_swigregister(itkAsinImageFilterISS3ISS3)

def itkAsinImageFilterISS4ISS4_New():
    return itkAsinImageFilterISS4ISS4.New()

class itkAsinImageFilterISS4ISS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS4ISS4):
    r"""Proxy of C++ itkAsinImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterISS4ISS4_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterISS4ISS4_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS4ISS4_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS4ISS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS4ISS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterISS4ISS4

        Create a new object of the class itkAsinImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterISS4ISS4 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterISS4ISS4_swigregister(itkAsinImageFilterISS4ISS4)

def itkAsinImageFilterIUC2IUC2_New():
    return itkAsinImageFilterIUC2IUC2.New()

class itkAsinImageFilterIUC2IUC2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    r"""Proxy of C++ itkAsinImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterIUC2IUC2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterIUC2IUC2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUC2IUC2

        Create a new object of the class itkAsinImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIUC2IUC2 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_swigregister(itkAsinImageFilterIUC2IUC2)

def itkAsinImageFilterIUC3IUC3_New():
    return itkAsinImageFilterIUC3IUC3.New()

class itkAsinImageFilterIUC3IUC3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    r"""Proxy of C++ itkAsinImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterIUC3IUC3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterIUC3IUC3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUC3IUC3

        Create a new object of the class itkAsinImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIUC3IUC3 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_swigregister(itkAsinImageFilterIUC3IUC3)

def itkAsinImageFilterIUC4IUC4_New():
    return itkAsinImageFilterIUC4IUC4.New()

class itkAsinImageFilterIUC4IUC4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC4IUC4):
    r"""Proxy of C++ itkAsinImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterIUC4IUC4_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterIUC4IUC4_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC4IUC4_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC4IUC4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC4IUC4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUC4IUC4

        Create a new object of the class itkAsinImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIUC4IUC4 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIUC4IUC4_swigregister(itkAsinImageFilterIUC4IUC4)

def itkAsinImageFilterIUS2IUS2_New():
    return itkAsinImageFilterIUS2IUS2.New()

class itkAsinImageFilterIUS2IUS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    r"""Proxy of C++ itkAsinImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterIUS2IUS2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterIUS2IUS2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUS2IUS2

        Create a new object of the class itkAsinImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIUS2IUS2 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_swigregister(itkAsinImageFilterIUS2IUS2)

def itkAsinImageFilterIUS3IUS3_New():
    return itkAsinImageFilterIUS3IUS3.New()

class itkAsinImageFilterIUS3IUS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    r"""Proxy of C++ itkAsinImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterIUS3IUS3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterIUS3IUS3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUS3IUS3

        Create a new object of the class itkAsinImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIUS3IUS3 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_swigregister(itkAsinImageFilterIUS3IUS3)

def itkAsinImageFilterIUS4IUS4_New():
    return itkAsinImageFilterIUS4IUS4.New()

class itkAsinImageFilterIUS4IUS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS4IUS4):
    r"""Proxy of C++ itkAsinImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAsinImageFilterIUS4IUS4_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAsinImageFilterIUS4IUS4_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS4IUS4_Clone(self)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS4IUS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS4IUS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAsinImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUS4IUS4

        Create a new object of the class itkAsinImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIUS4IUS4 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIUS4IUS4_swigregister(itkAsinImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def asin_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for AsinImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.AsinImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def asin_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.AsinImageFilter
    asin_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    asin_image_filter.__doc__ = filter_object.__doc__



