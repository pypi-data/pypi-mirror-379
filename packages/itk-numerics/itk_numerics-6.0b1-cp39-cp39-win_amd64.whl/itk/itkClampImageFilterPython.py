# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkClampImageFilterPython
else:
    import _itkClampImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterBPython

def itkClampImageFilterID2ID2_Superclass_New():
    return itkClampImageFilterID2ID2_Superclass.New()

class itkClampImageFilterID2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkClampImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID2ID2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID2ID2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2ID2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double >
        GetFunctor(self) -> itk::Functor::Clamp< double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2ID2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID2ID2_Superclass

        Create a new object of the class itkClampImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID2ID2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID2ID2_Superclass_swigregister(itkClampImageFilterID2ID2_Superclass)

def itkClampImageFilterID2IF2_Superclass_New():
    return itkClampImageFilterID2IF2_Superclass.New()

class itkClampImageFilterID2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IF2):
    r"""Proxy of C++ itkClampImageFilterID2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID2IF2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID2IF2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IF2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double,float >
        GetFunctor(self) -> itk::Functor::Clamp< double,float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double,float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IF2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID2IF2_Superclass

        Create a new object of the class itkClampImageFilterID2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID2IF2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID2IF2_Superclass_swigregister(itkClampImageFilterID2IF2_Superclass)

def itkClampImageFilterID2ISS2_Superclass_New():
    return itkClampImageFilterID2ISS2_Superclass.New()

class itkClampImageFilterID2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ISS2):
    r"""Proxy of C++ itkClampImageFilterID2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID2ISS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID2ISS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2ISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double,short >
        GetFunctor(self) -> itk::Functor::Clamp< double,short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID2ISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double,short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2ISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID2ISS2_Superclass

        Create a new object of the class itkClampImageFilterID2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID2ISS2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID2ISS2_Superclass_swigregister(itkClampImageFilterID2ISS2_Superclass)

def itkClampImageFilterID2IUC2_Superclass_New():
    return itkClampImageFilterID2IUC2_Superclass.New()

class itkClampImageFilterID2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUC2):
    r"""Proxy of C++ itkClampImageFilterID2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID2IUC2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID2IUC2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double,unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< double,unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double,unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID2IUC2_Superclass

        Create a new object of the class itkClampImageFilterID2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID2IUC2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID2IUC2_Superclass_swigregister(itkClampImageFilterID2IUC2_Superclass)

def itkClampImageFilterID2IUS2_Superclass_New():
    return itkClampImageFilterID2IUS2_Superclass.New()

class itkClampImageFilterID2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUS2):
    r"""Proxy of C++ itkClampImageFilterID2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID2IUS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID2IUS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double,unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< double,unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double,unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID2IUS2_Superclass

        Create a new object of the class itkClampImageFilterID2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID2IUS2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID2IUS2_Superclass_swigregister(itkClampImageFilterID2IUS2_Superclass)

def itkClampImageFilterID3ID3_Superclass_New():
    return itkClampImageFilterID3ID3_Superclass.New()

class itkClampImageFilterID3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkClampImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID3ID3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID3ID3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3ID3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double >
        GetFunctor(self) -> itk::Functor::Clamp< double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3ID3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID3ID3_Superclass

        Create a new object of the class itkClampImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID3ID3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID3ID3_Superclass_swigregister(itkClampImageFilterID3ID3_Superclass)

def itkClampImageFilterID3IF3_Superclass_New():
    return itkClampImageFilterID3IF3_Superclass.New()

class itkClampImageFilterID3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IF3):
    r"""Proxy of C++ itkClampImageFilterID3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID3IF3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID3IF3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IF3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double,float >
        GetFunctor(self) -> itk::Functor::Clamp< double,float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double,float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IF3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID3IF3_Superclass

        Create a new object of the class itkClampImageFilterID3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID3IF3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID3IF3_Superclass_swigregister(itkClampImageFilterID3IF3_Superclass)

def itkClampImageFilterID3ISS3_Superclass_New():
    return itkClampImageFilterID3ISS3_Superclass.New()

class itkClampImageFilterID3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ISS3):
    r"""Proxy of C++ itkClampImageFilterID3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID3ISS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID3ISS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3ISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double,short >
        GetFunctor(self) -> itk::Functor::Clamp< double,short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID3ISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double,short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3ISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID3ISS3_Superclass

        Create a new object of the class itkClampImageFilterID3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID3ISS3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID3ISS3_Superclass_swigregister(itkClampImageFilterID3ISS3_Superclass)

def itkClampImageFilterID3IUC3_Superclass_New():
    return itkClampImageFilterID3IUC3_Superclass.New()

class itkClampImageFilterID3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUC3):
    r"""Proxy of C++ itkClampImageFilterID3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID3IUC3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID3IUC3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double,unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< double,unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double,unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID3IUC3_Superclass

        Create a new object of the class itkClampImageFilterID3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID3IUC3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID3IUC3_Superclass_swigregister(itkClampImageFilterID3IUC3_Superclass)

def itkClampImageFilterID3IUS3_Superclass_New():
    return itkClampImageFilterID3IUS3_Superclass.New()

class itkClampImageFilterID3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUS3):
    r"""Proxy of C++ itkClampImageFilterID3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID3IUS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID3IUS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double,unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< double,unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double,unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID3IUS3_Superclass

        Create a new object of the class itkClampImageFilterID3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID3IUS3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID3IUS3_Superclass_swigregister(itkClampImageFilterID3IUS3_Superclass)

def itkClampImageFilterID4ID4_Superclass_New():
    return itkClampImageFilterID4ID4_Superclass.New()

class itkClampImageFilterID4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4ID4):
    r"""Proxy of C++ itkClampImageFilterID4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID4ID4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID4ID4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4ID4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double >
        GetFunctor(self) -> itk::Functor::Clamp< double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID4ID4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4ID4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID4ID4_Superclass

        Create a new object of the class itkClampImageFilterID4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID4ID4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID4ID4_Superclass_swigregister(itkClampImageFilterID4ID4_Superclass)

def itkClampImageFilterID4IF4_Superclass_New():
    return itkClampImageFilterID4IF4_Superclass.New()

class itkClampImageFilterID4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4IF4):
    r"""Proxy of C++ itkClampImageFilterID4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID4IF4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID4IF4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IF4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double,float >
        GetFunctor(self) -> itk::Functor::Clamp< double,float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IF4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double,float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IF4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID4IF4_Superclass

        Create a new object of the class itkClampImageFilterID4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID4IF4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID4IF4_Superclass_swigregister(itkClampImageFilterID4IF4_Superclass)

def itkClampImageFilterID4ISS4_Superclass_New():
    return itkClampImageFilterID4ISS4_Superclass.New()

class itkClampImageFilterID4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4ISS4):
    r"""Proxy of C++ itkClampImageFilterID4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID4ISS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID4ISS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4ISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double,short >
        GetFunctor(self) -> itk::Functor::Clamp< double,short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID4ISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double,short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4ISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID4ISS4_Superclass

        Create a new object of the class itkClampImageFilterID4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID4ISS4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID4ISS4_Superclass_swigregister(itkClampImageFilterID4ISS4_Superclass)

def itkClampImageFilterID4IUC4_Superclass_New():
    return itkClampImageFilterID4IUC4_Superclass.New()

class itkClampImageFilterID4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4IUC4):
    r"""Proxy of C++ itkClampImageFilterID4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID4IUC4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID4IUC4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double,unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< double,unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double,unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID4IUC4_Superclass

        Create a new object of the class itkClampImageFilterID4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID4IUC4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID4IUC4_Superclass_swigregister(itkClampImageFilterID4IUC4_Superclass)

def itkClampImageFilterID4IUS4_Superclass_New():
    return itkClampImageFilterID4IUS4_Superclass.New()

class itkClampImageFilterID4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4IUS4):
    r"""Proxy of C++ itkClampImageFilterID4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID4IUS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID4IUS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< double,unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< double,unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< double,unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID4IUS4_Superclass

        Create a new object of the class itkClampImageFilterID4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID4IUS4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID4IUS4_Superclass_swigregister(itkClampImageFilterID4IUS4_Superclass)

def itkClampImageFilterIF2ID2_Superclass_New():
    return itkClampImageFilterIF2ID2_Superclass.New()

class itkClampImageFilterIF2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ID2):
    r"""Proxy of C++ itkClampImageFilterIF2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF2ID2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF2ID2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2ID2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float,double >
        GetFunctor(self) -> itk::Functor::Clamp< float,double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float,double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2ID2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF2ID2_Superclass

        Create a new object of the class itkClampImageFilterIF2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF2ID2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF2ID2_Superclass_swigregister(itkClampImageFilterIF2ID2_Superclass)

def itkClampImageFilterIF2IF2_Superclass_New():
    return itkClampImageFilterIF2IF2_Superclass.New()

class itkClampImageFilterIF2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkClampImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF2IF2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF2IF2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IF2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float >
        GetFunctor(self) -> itk::Functor::Clamp< float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IF2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF2IF2_Superclass

        Create a new object of the class itkClampImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF2IF2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF2IF2_Superclass_swigregister(itkClampImageFilterIF2IF2_Superclass)

def itkClampImageFilterIF2ISS2_Superclass_New():
    return itkClampImageFilterIF2ISS2_Superclass.New()

class itkClampImageFilterIF2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ISS2):
    r"""Proxy of C++ itkClampImageFilterIF2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF2ISS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF2ISS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2ISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float,short >
        GetFunctor(self) -> itk::Functor::Clamp< float,short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2ISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float,short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2ISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF2ISS2_Superclass

        Create a new object of the class itkClampImageFilterIF2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF2ISS2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF2ISS2_Superclass_swigregister(itkClampImageFilterIF2ISS2_Superclass)

def itkClampImageFilterIF2IUC2_Superclass_New():
    return itkClampImageFilterIF2IUC2_Superclass.New()

class itkClampImageFilterIF2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUC2):
    r"""Proxy of C++ itkClampImageFilterIF2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF2IUC2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF2IUC2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float,unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< float,unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float,unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF2IUC2_Superclass

        Create a new object of the class itkClampImageFilterIF2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF2IUC2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF2IUC2_Superclass_swigregister(itkClampImageFilterIF2IUC2_Superclass)

def itkClampImageFilterIF2IUS2_Superclass_New():
    return itkClampImageFilterIF2IUS2_Superclass.New()

class itkClampImageFilterIF2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUS2):
    r"""Proxy of C++ itkClampImageFilterIF2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF2IUS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF2IUS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float,unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< float,unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float,unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF2IUS2_Superclass

        Create a new object of the class itkClampImageFilterIF2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF2IUS2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF2IUS2_Superclass_swigregister(itkClampImageFilterIF2IUS2_Superclass)

def itkClampImageFilterIF3ID3_Superclass_New():
    return itkClampImageFilterIF3ID3_Superclass.New()

class itkClampImageFilterIF3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ID3):
    r"""Proxy of C++ itkClampImageFilterIF3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF3ID3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF3ID3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3ID3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float,double >
        GetFunctor(self) -> itk::Functor::Clamp< float,double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float,double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3ID3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF3ID3_Superclass

        Create a new object of the class itkClampImageFilterIF3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF3ID3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF3ID3_Superclass_swigregister(itkClampImageFilterIF3ID3_Superclass)

def itkClampImageFilterIF3IF3_Superclass_New():
    return itkClampImageFilterIF3IF3_Superclass.New()

class itkClampImageFilterIF3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkClampImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF3IF3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF3IF3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IF3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float >
        GetFunctor(self) -> itk::Functor::Clamp< float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IF3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF3IF3_Superclass

        Create a new object of the class itkClampImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF3IF3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF3IF3_Superclass_swigregister(itkClampImageFilterIF3IF3_Superclass)

def itkClampImageFilterIF3ISS3_Superclass_New():
    return itkClampImageFilterIF3ISS3_Superclass.New()

class itkClampImageFilterIF3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ISS3):
    r"""Proxy of C++ itkClampImageFilterIF3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF3ISS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF3ISS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3ISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float,short >
        GetFunctor(self) -> itk::Functor::Clamp< float,short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3ISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float,short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3ISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF3ISS3_Superclass

        Create a new object of the class itkClampImageFilterIF3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF3ISS3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF3ISS3_Superclass_swigregister(itkClampImageFilterIF3ISS3_Superclass)

def itkClampImageFilterIF3IUC3_Superclass_New():
    return itkClampImageFilterIF3IUC3_Superclass.New()

class itkClampImageFilterIF3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUC3):
    r"""Proxy of C++ itkClampImageFilterIF3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF3IUC3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF3IUC3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float,unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< float,unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float,unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF3IUC3_Superclass

        Create a new object of the class itkClampImageFilterIF3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF3IUC3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF3IUC3_Superclass_swigregister(itkClampImageFilterIF3IUC3_Superclass)

def itkClampImageFilterIF3IUS3_Superclass_New():
    return itkClampImageFilterIF3IUS3_Superclass.New()

class itkClampImageFilterIF3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUS3):
    r"""Proxy of C++ itkClampImageFilterIF3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF3IUS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF3IUS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float,unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< float,unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float,unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF3IUS3_Superclass

        Create a new object of the class itkClampImageFilterIF3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF3IUS3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF3IUS3_Superclass_swigregister(itkClampImageFilterIF3IUS3_Superclass)

def itkClampImageFilterIF4ID4_Superclass_New():
    return itkClampImageFilterIF4ID4_Superclass.New()

class itkClampImageFilterIF4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4ID4):
    r"""Proxy of C++ itkClampImageFilterIF4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF4ID4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF4ID4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4ID4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float,double >
        GetFunctor(self) -> itk::Functor::Clamp< float,double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4ID4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float,double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4ID4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF4ID4_Superclass

        Create a new object of the class itkClampImageFilterIF4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF4ID4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF4ID4_Superclass_swigregister(itkClampImageFilterIF4ID4_Superclass)

def itkClampImageFilterIF4IF4_Superclass_New():
    return itkClampImageFilterIF4IF4_Superclass.New()

class itkClampImageFilterIF4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IF4):
    r"""Proxy of C++ itkClampImageFilterIF4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF4IF4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF4IF4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IF4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float >
        GetFunctor(self) -> itk::Functor::Clamp< float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IF4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IF4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF4IF4_Superclass

        Create a new object of the class itkClampImageFilterIF4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF4IF4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF4IF4_Superclass_swigregister(itkClampImageFilterIF4IF4_Superclass)

def itkClampImageFilterIF4ISS4_Superclass_New():
    return itkClampImageFilterIF4ISS4_Superclass.New()

class itkClampImageFilterIF4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4ISS4):
    r"""Proxy of C++ itkClampImageFilterIF4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF4ISS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF4ISS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4ISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float,short >
        GetFunctor(self) -> itk::Functor::Clamp< float,short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4ISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float,short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4ISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF4ISS4_Superclass

        Create a new object of the class itkClampImageFilterIF4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF4ISS4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF4ISS4_Superclass_swigregister(itkClampImageFilterIF4ISS4_Superclass)

def itkClampImageFilterIF4IUC4_Superclass_New():
    return itkClampImageFilterIF4IUC4_Superclass.New()

class itkClampImageFilterIF4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IUC4):
    r"""Proxy of C++ itkClampImageFilterIF4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF4IUC4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF4IUC4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float,unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< float,unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float,unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF4IUC4_Superclass

        Create a new object of the class itkClampImageFilterIF4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF4IUC4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF4IUC4_Superclass_swigregister(itkClampImageFilterIF4IUC4_Superclass)

def itkClampImageFilterIF4IUS4_Superclass_New():
    return itkClampImageFilterIF4IUS4_Superclass.New()

class itkClampImageFilterIF4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IUS4):
    r"""Proxy of C++ itkClampImageFilterIF4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF4IUS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF4IUS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< float,unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< float,unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< float,unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF4IUS4_Superclass

        Create a new object of the class itkClampImageFilterIF4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF4IUS4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF4IUS4_Superclass_swigregister(itkClampImageFilterIF4IUS4_Superclass)

def itkClampImageFilterISS2ID2_Superclass_New():
    return itkClampImageFilterISS2ID2_Superclass.New()

class itkClampImageFilterISS2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ID2):
    r"""Proxy of C++ itkClampImageFilterISS2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS2ID2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS2ID2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2ID2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short,double >
        GetFunctor(self) -> itk::Functor::Clamp< short,double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short,double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2ID2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS2ID2_Superclass

        Create a new object of the class itkClampImageFilterISS2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS2ID2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS2ID2_Superclass_swigregister(itkClampImageFilterISS2ID2_Superclass)

def itkClampImageFilterISS2IF2_Superclass_New():
    return itkClampImageFilterISS2IF2_Superclass.New()

class itkClampImageFilterISS2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IF2):
    r"""Proxy of C++ itkClampImageFilterISS2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS2IF2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS2IF2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IF2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short,float >
        GetFunctor(self) -> itk::Functor::Clamp< short,float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short,float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IF2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS2IF2_Superclass

        Create a new object of the class itkClampImageFilterISS2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS2IF2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS2IF2_Superclass_swigregister(itkClampImageFilterISS2IF2_Superclass)

def itkClampImageFilterISS2ISS2_Superclass_New():
    return itkClampImageFilterISS2ISS2_Superclass.New()

class itkClampImageFilterISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkClampImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2ISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short >
        GetFunctor(self) -> itk::Functor::Clamp< short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2ISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2ISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS2ISS2_Superclass

        Create a new object of the class itkClampImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS2ISS2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS2ISS2_Superclass_swigregister(itkClampImageFilterISS2ISS2_Superclass)

def itkClampImageFilterISS2IUC2_Superclass_New():
    return itkClampImageFilterISS2IUC2_Superclass.New()

class itkClampImageFilterISS2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUC2):
    r"""Proxy of C++ itkClampImageFilterISS2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS2IUC2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS2IUC2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short,unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< short,unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short,unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS2IUC2_Superclass

        Create a new object of the class itkClampImageFilterISS2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS2IUC2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS2IUC2_Superclass_swigregister(itkClampImageFilterISS2IUC2_Superclass)

def itkClampImageFilterISS2IUS2_Superclass_New():
    return itkClampImageFilterISS2IUS2_Superclass.New()

class itkClampImageFilterISS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUS2):
    r"""Proxy of C++ itkClampImageFilterISS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS2IUS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS2IUS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short,unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< short,unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short,unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS2IUS2_Superclass

        Create a new object of the class itkClampImageFilterISS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS2IUS2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS2IUS2_Superclass_swigregister(itkClampImageFilterISS2IUS2_Superclass)

def itkClampImageFilterISS3ID3_Superclass_New():
    return itkClampImageFilterISS3ID3_Superclass.New()

class itkClampImageFilterISS3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ID3):
    r"""Proxy of C++ itkClampImageFilterISS3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS3ID3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS3ID3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3ID3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short,double >
        GetFunctor(self) -> itk::Functor::Clamp< short,double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short,double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3ID3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS3ID3_Superclass

        Create a new object of the class itkClampImageFilterISS3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS3ID3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS3ID3_Superclass_swigregister(itkClampImageFilterISS3ID3_Superclass)

def itkClampImageFilterISS3IF3_Superclass_New():
    return itkClampImageFilterISS3IF3_Superclass.New()

class itkClampImageFilterISS3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IF3):
    r"""Proxy of C++ itkClampImageFilterISS3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS3IF3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS3IF3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IF3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short,float >
        GetFunctor(self) -> itk::Functor::Clamp< short,float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short,float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IF3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS3IF3_Superclass

        Create a new object of the class itkClampImageFilterISS3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS3IF3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS3IF3_Superclass_swigregister(itkClampImageFilterISS3IF3_Superclass)

def itkClampImageFilterISS3ISS3_Superclass_New():
    return itkClampImageFilterISS3ISS3_Superclass.New()

class itkClampImageFilterISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkClampImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3ISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short >
        GetFunctor(self) -> itk::Functor::Clamp< short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3ISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3ISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS3ISS3_Superclass

        Create a new object of the class itkClampImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS3ISS3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS3ISS3_Superclass_swigregister(itkClampImageFilterISS3ISS3_Superclass)

def itkClampImageFilterISS3IUC3_Superclass_New():
    return itkClampImageFilterISS3IUC3_Superclass.New()

class itkClampImageFilterISS3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUC3):
    r"""Proxy of C++ itkClampImageFilterISS3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS3IUC3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS3IUC3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short,unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< short,unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short,unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS3IUC3_Superclass

        Create a new object of the class itkClampImageFilterISS3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS3IUC3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS3IUC3_Superclass_swigregister(itkClampImageFilterISS3IUC3_Superclass)

def itkClampImageFilterISS3IUS3_Superclass_New():
    return itkClampImageFilterISS3IUS3_Superclass.New()

class itkClampImageFilterISS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUS3):
    r"""Proxy of C++ itkClampImageFilterISS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS3IUS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS3IUS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short,unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< short,unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short,unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS3IUS3_Superclass

        Create a new object of the class itkClampImageFilterISS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS3IUS3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS3IUS3_Superclass_swigregister(itkClampImageFilterISS3IUS3_Superclass)

def itkClampImageFilterISS4ID4_Superclass_New():
    return itkClampImageFilterISS4ID4_Superclass.New()

class itkClampImageFilterISS4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4ID4):
    r"""Proxy of C++ itkClampImageFilterISS4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS4ID4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS4ID4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4ID4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short,double >
        GetFunctor(self) -> itk::Functor::Clamp< short,double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4ID4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short,double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4ID4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS4ID4_Superclass

        Create a new object of the class itkClampImageFilterISS4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS4ID4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS4ID4_Superclass_swigregister(itkClampImageFilterISS4ID4_Superclass)

def itkClampImageFilterISS4IF4_Superclass_New():
    return itkClampImageFilterISS4IF4_Superclass.New()

class itkClampImageFilterISS4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4IF4):
    r"""Proxy of C++ itkClampImageFilterISS4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS4IF4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS4IF4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IF4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short,float >
        GetFunctor(self) -> itk::Functor::Clamp< short,float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IF4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short,float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IF4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS4IF4_Superclass

        Create a new object of the class itkClampImageFilterISS4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS4IF4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS4IF4_Superclass_swigregister(itkClampImageFilterISS4IF4_Superclass)

def itkClampImageFilterISS4ISS4_Superclass_New():
    return itkClampImageFilterISS4ISS4_Superclass.New()

class itkClampImageFilterISS4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4ISS4):
    r"""Proxy of C++ itkClampImageFilterISS4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4ISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short >
        GetFunctor(self) -> itk::Functor::Clamp< short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4ISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4ISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS4ISS4_Superclass

        Create a new object of the class itkClampImageFilterISS4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS4ISS4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS4ISS4_Superclass_swigregister(itkClampImageFilterISS4ISS4_Superclass)

def itkClampImageFilterISS4IUC4_Superclass_New():
    return itkClampImageFilterISS4IUC4_Superclass.New()

class itkClampImageFilterISS4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4IUC4):
    r"""Proxy of C++ itkClampImageFilterISS4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS4IUC4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS4IUC4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short,unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< short,unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short,unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS4IUC4_Superclass

        Create a new object of the class itkClampImageFilterISS4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS4IUC4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS4IUC4_Superclass_swigregister(itkClampImageFilterISS4IUC4_Superclass)

def itkClampImageFilterISS4IUS4_Superclass_New():
    return itkClampImageFilterISS4IUS4_Superclass.New()

class itkClampImageFilterISS4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4IUS4):
    r"""Proxy of C++ itkClampImageFilterISS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS4IUS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS4IUS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< short,unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< short,unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< short,unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS4IUS4_Superclass

        Create a new object of the class itkClampImageFilterISS4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS4IUS4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS4IUS4_Superclass_swigregister(itkClampImageFilterISS4IUS4_Superclass)

def itkClampImageFilterIUC2ID2_Superclass_New():
    return itkClampImageFilterIUC2ID2_Superclass.New()

class itkClampImageFilterIUC2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ID2):
    r"""Proxy of C++ itkClampImageFilterIUC2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC2ID2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC2ID2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ID2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,double >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char,double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ID2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC2ID2_Superclass

        Create a new object of the class itkClampImageFilterIUC2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC2ID2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC2ID2_Superclass_swigregister(itkClampImageFilterIUC2ID2_Superclass)

def itkClampImageFilterIUC2IF2_Superclass_New():
    return itkClampImageFilterIUC2IF2_Superclass.New()

class itkClampImageFilterIUC2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IF2):
    r"""Proxy of C++ itkClampImageFilterIUC2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC2IF2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC2IF2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IF2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,float >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char,float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IF2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC2IF2_Superclass

        Create a new object of the class itkClampImageFilterIUC2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC2IF2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC2IF2_Superclass_swigregister(itkClampImageFilterIUC2IF2_Superclass)

def itkClampImageFilterIUC2ISS2_Superclass_New():
    return itkClampImageFilterIUC2ISS2_Superclass.New()

class itkClampImageFilterIUC2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ISS2):
    r"""Proxy of C++ itkClampImageFilterIUC2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC2ISS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC2ISS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,short >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char,short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC2ISS2_Superclass

        Create a new object of the class itkClampImageFilterIUC2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC2ISS2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC2ISS2_Superclass_swigregister(itkClampImageFilterIUC2ISS2_Superclass)

def itkClampImageFilterIUC2IUC2_Superclass_New():
    return itkClampImageFilterIUC2IUC2_Superclass.New()

class itkClampImageFilterIUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkClampImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkClampImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC2IUC2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC2IUC2_Superclass_swigregister(itkClampImageFilterIUC2IUC2_Superclass)

def itkClampImageFilterIUC2IUS2_Superclass_New():
    return itkClampImageFilterIUC2IUS2_Superclass.New()

class itkClampImageFilterIUC2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUS2):
    r"""Proxy of C++ itkClampImageFilterIUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC2IUS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC2IUS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char,unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC2IUS2_Superclass

        Create a new object of the class itkClampImageFilterIUC2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC2IUS2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC2IUS2_Superclass_swigregister(itkClampImageFilterIUC2IUS2_Superclass)

def itkClampImageFilterIUC3ID3_Superclass_New():
    return itkClampImageFilterIUC3ID3_Superclass.New()

class itkClampImageFilterIUC3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ID3):
    r"""Proxy of C++ itkClampImageFilterIUC3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC3ID3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC3ID3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ID3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,double >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char,double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ID3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC3ID3_Superclass

        Create a new object of the class itkClampImageFilterIUC3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC3ID3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC3ID3_Superclass_swigregister(itkClampImageFilterIUC3ID3_Superclass)

def itkClampImageFilterIUC3IF3_Superclass_New():
    return itkClampImageFilterIUC3IF3_Superclass.New()

class itkClampImageFilterIUC3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IF3):
    r"""Proxy of C++ itkClampImageFilterIUC3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC3IF3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC3IF3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IF3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,float >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char,float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IF3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC3IF3_Superclass

        Create a new object of the class itkClampImageFilterIUC3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC3IF3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC3IF3_Superclass_swigregister(itkClampImageFilterIUC3IF3_Superclass)

def itkClampImageFilterIUC3ISS3_Superclass_New():
    return itkClampImageFilterIUC3ISS3_Superclass.New()

class itkClampImageFilterIUC3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ISS3):
    r"""Proxy of C++ itkClampImageFilterIUC3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC3ISS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC3ISS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,short >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char,short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC3ISS3_Superclass

        Create a new object of the class itkClampImageFilterIUC3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC3ISS3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC3ISS3_Superclass_swigregister(itkClampImageFilterIUC3ISS3_Superclass)

def itkClampImageFilterIUC3IUC3_Superclass_New():
    return itkClampImageFilterIUC3IUC3_Superclass.New()

class itkClampImageFilterIUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkClampImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkClampImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC3IUC3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC3IUC3_Superclass_swigregister(itkClampImageFilterIUC3IUC3_Superclass)

def itkClampImageFilterIUC3IUS3_Superclass_New():
    return itkClampImageFilterIUC3IUS3_Superclass.New()

class itkClampImageFilterIUC3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUS3):
    r"""Proxy of C++ itkClampImageFilterIUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC3IUS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC3IUS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char,unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC3IUS3_Superclass

        Create a new object of the class itkClampImageFilterIUC3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC3IUS3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC3IUS3_Superclass_swigregister(itkClampImageFilterIUC3IUS3_Superclass)

def itkClampImageFilterIUC4ID4_Superclass_New():
    return itkClampImageFilterIUC4ID4_Superclass.New()

class itkClampImageFilterIUC4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4ID4):
    r"""Proxy of C++ itkClampImageFilterIUC4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC4ID4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC4ID4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ID4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,double >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ID4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char,double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ID4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC4ID4_Superclass

        Create a new object of the class itkClampImageFilterIUC4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC4ID4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC4ID4_Superclass_swigregister(itkClampImageFilterIUC4ID4_Superclass)

def itkClampImageFilterIUC4IF4_Superclass_New():
    return itkClampImageFilterIUC4IF4_Superclass.New()

class itkClampImageFilterIUC4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4IF4):
    r"""Proxy of C++ itkClampImageFilterIUC4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC4IF4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC4IF4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IF4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,float >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IF4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char,float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IF4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC4IF4_Superclass

        Create a new object of the class itkClampImageFilterIUC4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC4IF4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC4IF4_Superclass_swigregister(itkClampImageFilterIUC4IF4_Superclass)

def itkClampImageFilterIUC4ISS4_Superclass_New():
    return itkClampImageFilterIUC4ISS4_Superclass.New()

class itkClampImageFilterIUC4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4ISS4):
    r"""Proxy of C++ itkClampImageFilterIUC4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC4ISS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC4ISS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,short >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char,short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC4ISS4_Superclass

        Create a new object of the class itkClampImageFilterIUC4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC4ISS4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC4ISS4_Superclass_swigregister(itkClampImageFilterIUC4ISS4_Superclass)

def itkClampImageFilterIUC4IUC4_Superclass_New():
    return itkClampImageFilterIUC4IUC4_Superclass.New()

class itkClampImageFilterIUC4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4IUC4):
    r"""Proxy of C++ itkClampImageFilterIUC4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC4IUC4_Superclass

        Create a new object of the class itkClampImageFilterIUC4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC4IUC4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC4IUC4_Superclass_swigregister(itkClampImageFilterIUC4IUC4_Superclass)

def itkClampImageFilterIUC4IUS4_Superclass_New():
    return itkClampImageFilterIUC4IUS4_Superclass.New()

class itkClampImageFilterIUC4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4IUS4):
    r"""Proxy of C++ itkClampImageFilterIUC4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC4IUS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC4IUS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned char,unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned char,unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC4IUS4_Superclass

        Create a new object of the class itkClampImageFilterIUC4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC4IUS4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC4IUS4_Superclass_swigregister(itkClampImageFilterIUC4IUS4_Superclass)

def itkClampImageFilterIUS2ID2_Superclass_New():
    return itkClampImageFilterIUS2ID2_Superclass.New()

class itkClampImageFilterIUS2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ID2):
    r"""Proxy of C++ itkClampImageFilterIUS2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS2ID2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS2ID2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ID2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,double >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short,double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ID2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS2ID2_Superclass

        Create a new object of the class itkClampImageFilterIUS2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS2ID2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS2ID2_Superclass_swigregister(itkClampImageFilterIUS2ID2_Superclass)

def itkClampImageFilterIUS2IF2_Superclass_New():
    return itkClampImageFilterIUS2IF2_Superclass.New()

class itkClampImageFilterIUS2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IF2):
    r"""Proxy of C++ itkClampImageFilterIUS2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS2IF2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS2IF2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IF2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,float >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short,float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IF2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS2IF2_Superclass

        Create a new object of the class itkClampImageFilterIUS2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS2IF2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS2IF2_Superclass_swigregister(itkClampImageFilterIUS2IF2_Superclass)

def itkClampImageFilterIUS2ISS2_Superclass_New():
    return itkClampImageFilterIUS2ISS2_Superclass.New()

class itkClampImageFilterIUS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ISS2):
    r"""Proxy of C++ itkClampImageFilterIUS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS2ISS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS2ISS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,short >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short,short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS2ISS2_Superclass

        Create a new object of the class itkClampImageFilterIUS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS2ISS2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS2ISS2_Superclass_swigregister(itkClampImageFilterIUS2ISS2_Superclass)

def itkClampImageFilterIUS2IUC2_Superclass_New():
    return itkClampImageFilterIUS2IUC2_Superclass.New()

class itkClampImageFilterIUS2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUC2):
    r"""Proxy of C++ itkClampImageFilterIUS2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS2IUC2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS2IUC2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short,unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS2IUC2_Superclass

        Create a new object of the class itkClampImageFilterIUS2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS2IUC2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS2IUC2_Superclass_swigregister(itkClampImageFilterIUS2IUC2_Superclass)

def itkClampImageFilterIUS2IUS2_Superclass_New():
    return itkClampImageFilterIUS2IUS2_Superclass.New()

class itkClampImageFilterIUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkClampImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkClampImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS2IUS2_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS2IUS2_Superclass_swigregister(itkClampImageFilterIUS2IUS2_Superclass)

def itkClampImageFilterIUS3ID3_Superclass_New():
    return itkClampImageFilterIUS3ID3_Superclass.New()

class itkClampImageFilterIUS3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ID3):
    r"""Proxy of C++ itkClampImageFilterIUS3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS3ID3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS3ID3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ID3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,double >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short,double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ID3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS3ID3_Superclass

        Create a new object of the class itkClampImageFilterIUS3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS3ID3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS3ID3_Superclass_swigregister(itkClampImageFilterIUS3ID3_Superclass)

def itkClampImageFilterIUS3IF3_Superclass_New():
    return itkClampImageFilterIUS3IF3_Superclass.New()

class itkClampImageFilterIUS3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IF3):
    r"""Proxy of C++ itkClampImageFilterIUS3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS3IF3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS3IF3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IF3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,float >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short,float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IF3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS3IF3_Superclass

        Create a new object of the class itkClampImageFilterIUS3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS3IF3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS3IF3_Superclass_swigregister(itkClampImageFilterIUS3IF3_Superclass)

def itkClampImageFilterIUS3ISS3_Superclass_New():
    return itkClampImageFilterIUS3ISS3_Superclass.New()

class itkClampImageFilterIUS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ISS3):
    r"""Proxy of C++ itkClampImageFilterIUS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS3ISS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS3ISS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,short >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short,short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS3ISS3_Superclass

        Create a new object of the class itkClampImageFilterIUS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS3ISS3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS3ISS3_Superclass_swigregister(itkClampImageFilterIUS3ISS3_Superclass)

def itkClampImageFilterIUS3IUC3_Superclass_New():
    return itkClampImageFilterIUS3IUC3_Superclass.New()

class itkClampImageFilterIUS3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUC3):
    r"""Proxy of C++ itkClampImageFilterIUS3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS3IUC3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS3IUC3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short,unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS3IUC3_Superclass

        Create a new object of the class itkClampImageFilterIUS3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS3IUC3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS3IUC3_Superclass_swigregister(itkClampImageFilterIUS3IUC3_Superclass)

def itkClampImageFilterIUS3IUS3_Superclass_New():
    return itkClampImageFilterIUS3IUS3_Superclass.New()

class itkClampImageFilterIUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkClampImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkClampImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS3IUS3_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS3IUS3_Superclass_swigregister(itkClampImageFilterIUS3IUS3_Superclass)

def itkClampImageFilterIUS4ID4_Superclass_New():
    return itkClampImageFilterIUS4ID4_Superclass.New()

class itkClampImageFilterIUS4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4ID4):
    r"""Proxy of C++ itkClampImageFilterIUS4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS4ID4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS4ID4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ID4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,double >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,double > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ID4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short,double > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ID4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS4ID4_Superclass

        Create a new object of the class itkClampImageFilterIUS4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS4ID4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS4ID4_Superclass_swigregister(itkClampImageFilterIUS4ID4_Superclass)

def itkClampImageFilterIUS4IF4_Superclass_New():
    return itkClampImageFilterIUS4IF4_Superclass.New()

class itkClampImageFilterIUS4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4IF4):
    r"""Proxy of C++ itkClampImageFilterIUS4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS4IF4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS4IF4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IF4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,float >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,float > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IF4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short,float > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IF4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS4IF4_Superclass

        Create a new object of the class itkClampImageFilterIUS4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS4IF4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS4IF4_Superclass_swigregister(itkClampImageFilterIUS4IF4_Superclass)

def itkClampImageFilterIUS4ISS4_Superclass_New():
    return itkClampImageFilterIUS4ISS4_Superclass.New()

class itkClampImageFilterIUS4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4ISS4):
    r"""Proxy of C++ itkClampImageFilterIUS4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS4ISS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS4ISS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,short >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short,short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS4ISS4_Superclass

        Create a new object of the class itkClampImageFilterIUS4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS4ISS4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS4ISS4_Superclass_swigregister(itkClampImageFilterIUS4ISS4_Superclass)

def itkClampImageFilterIUS4IUC4_Superclass_New():
    return itkClampImageFilterIUS4IUC4_Superclass.New()

class itkClampImageFilterIUS4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4IUC4):
    r"""Proxy of C++ itkClampImageFilterIUS4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS4IUC4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS4IUC4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,unsigned char >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short,unsigned char > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short,unsigned char > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS4IUC4_Superclass

        Create a new object of the class itkClampImageFilterIUS4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS4IUC4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS4IUC4_Superclass_swigregister(itkClampImageFilterIUS4IUC4_Superclass)

def itkClampImageFilterIUS4IUS4_Superclass_New():
    return itkClampImageFilterIUS4IUS4_Superclass.New()

class itkClampImageFilterIUS4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4IUS4):
    r"""Proxy of C++ itkClampImageFilterIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short >
        GetFunctor(self) -> itk::Functor::Clamp< unsigned short > const &
        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Clamp< unsigned short > const &

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS4IUS4_Superclass

        Create a new object of the class itkClampImageFilterIUS4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS4IUS4_Superclass in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS4IUS4_Superclass_swigregister(itkClampImageFilterIUS4IUS4_Superclass)

def itkClampImageFilterID2ID2_New():
    return itkClampImageFilterID2ID2.New()

class itkClampImageFilterID2ID2(itkClampImageFilterID2ID2_Superclass):
    r"""Proxy of C++ itkClampImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID2ID2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID2ID2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2ID2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterID2ID2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterID2ID2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2ID2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID2ID2

        Create a new object of the class itkClampImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID2ID2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID2ID2_swigregister(itkClampImageFilterID2ID2)

def itkClampImageFilterID2IF2_New():
    return itkClampImageFilterID2IF2.New()

class itkClampImageFilterID2IF2(itkClampImageFilterID2IF2_Superclass):
    r"""Proxy of C++ itkClampImageFilterID2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID2IF2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID2IF2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IF2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IF2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IF2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IF2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID2IF2

        Create a new object of the class itkClampImageFilterID2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID2IF2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID2IF2_swigregister(itkClampImageFilterID2IF2)

def itkClampImageFilterID2ISS2_New():
    return itkClampImageFilterID2ISS2.New()

class itkClampImageFilterID2ISS2(itkClampImageFilterID2ISS2_Superclass):
    r"""Proxy of C++ itkClampImageFilterID2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID2ISS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID2ISS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2ISS2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterID2ISS2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterID2ISS2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2ISS2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID2ISS2

        Create a new object of the class itkClampImageFilterID2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID2ISS2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID2ISS2_swigregister(itkClampImageFilterID2ISS2)

def itkClampImageFilterID2IUC2_New():
    return itkClampImageFilterID2IUC2.New()

class itkClampImageFilterID2IUC2(itkClampImageFilterID2IUC2_Superclass):
    r"""Proxy of C++ itkClampImageFilterID2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID2IUC2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID2IUC2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IUC2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IUC2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IUC2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IUC2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID2IUC2

        Create a new object of the class itkClampImageFilterID2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID2IUC2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID2IUC2_swigregister(itkClampImageFilterID2IUC2)

def itkClampImageFilterID2IUS2_New():
    return itkClampImageFilterID2IUS2.New()

class itkClampImageFilterID2IUS2(itkClampImageFilterID2IUS2_Superclass):
    r"""Proxy of C++ itkClampImageFilterID2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID2IUS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID2IUS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IUS2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IUS2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterID2IUS2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IUS2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID2IUS2

        Create a new object of the class itkClampImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID2IUS2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID2IUS2_swigregister(itkClampImageFilterID2IUS2)

def itkClampImageFilterID3ID3_New():
    return itkClampImageFilterID3ID3.New()

class itkClampImageFilterID3ID3(itkClampImageFilterID3ID3_Superclass):
    r"""Proxy of C++ itkClampImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID3ID3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID3ID3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3ID3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterID3ID3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterID3ID3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3ID3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID3ID3

        Create a new object of the class itkClampImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID3ID3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID3ID3_swigregister(itkClampImageFilterID3ID3)

def itkClampImageFilterID3IF3_New():
    return itkClampImageFilterID3IF3.New()

class itkClampImageFilterID3IF3(itkClampImageFilterID3IF3_Superclass):
    r"""Proxy of C++ itkClampImageFilterID3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID3IF3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID3IF3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IF3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IF3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IF3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IF3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID3IF3

        Create a new object of the class itkClampImageFilterID3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID3IF3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID3IF3_swigregister(itkClampImageFilterID3IF3)

def itkClampImageFilterID3ISS3_New():
    return itkClampImageFilterID3ISS3.New()

class itkClampImageFilterID3ISS3(itkClampImageFilterID3ISS3_Superclass):
    r"""Proxy of C++ itkClampImageFilterID3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID3ISS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID3ISS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3ISS3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterID3ISS3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterID3ISS3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3ISS3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID3ISS3

        Create a new object of the class itkClampImageFilterID3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID3ISS3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID3ISS3_swigregister(itkClampImageFilterID3ISS3)

def itkClampImageFilterID3IUC3_New():
    return itkClampImageFilterID3IUC3.New()

class itkClampImageFilterID3IUC3(itkClampImageFilterID3IUC3_Superclass):
    r"""Proxy of C++ itkClampImageFilterID3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID3IUC3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID3IUC3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IUC3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IUC3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IUC3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IUC3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID3IUC3

        Create a new object of the class itkClampImageFilterID3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID3IUC3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID3IUC3_swigregister(itkClampImageFilterID3IUC3)

def itkClampImageFilterID3IUS3_New():
    return itkClampImageFilterID3IUS3.New()

class itkClampImageFilterID3IUS3(itkClampImageFilterID3IUS3_Superclass):
    r"""Proxy of C++ itkClampImageFilterID3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID3IUS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID3IUS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IUS3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IUS3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterID3IUS3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IUS3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID3IUS3

        Create a new object of the class itkClampImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID3IUS3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID3IUS3_swigregister(itkClampImageFilterID3IUS3)

def itkClampImageFilterID4ID4_New():
    return itkClampImageFilterID4ID4.New()

class itkClampImageFilterID4ID4(itkClampImageFilterID4ID4_Superclass):
    r"""Proxy of C++ itkClampImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID4ID4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID4ID4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4ID4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterID4ID4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterID4ID4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4ID4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID4ID4

        Create a new object of the class itkClampImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID4ID4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID4ID4_swigregister(itkClampImageFilterID4ID4)

def itkClampImageFilterID4IF4_New():
    return itkClampImageFilterID4IF4.New()

class itkClampImageFilterID4IF4(itkClampImageFilterID4IF4_Superclass):
    r"""Proxy of C++ itkClampImageFilterID4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID4IF4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID4IF4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IF4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IF4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IF4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IF4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID4IF4

        Create a new object of the class itkClampImageFilterID4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID4IF4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID4IF4_swigregister(itkClampImageFilterID4IF4)

def itkClampImageFilterID4ISS4_New():
    return itkClampImageFilterID4ISS4.New()

class itkClampImageFilterID4ISS4(itkClampImageFilterID4ISS4_Superclass):
    r"""Proxy of C++ itkClampImageFilterID4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID4ISS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID4ISS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4ISS4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterID4ISS4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterID4ISS4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4ISS4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID4ISS4

        Create a new object of the class itkClampImageFilterID4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID4ISS4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID4ISS4_swigregister(itkClampImageFilterID4ISS4)

def itkClampImageFilterID4IUC4_New():
    return itkClampImageFilterID4IUC4.New()

class itkClampImageFilterID4IUC4(itkClampImageFilterID4IUC4_Superclass):
    r"""Proxy of C++ itkClampImageFilterID4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID4IUC4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID4IUC4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IUC4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IUC4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IUC4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IUC4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID4IUC4

        Create a new object of the class itkClampImageFilterID4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID4IUC4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID4IUC4_swigregister(itkClampImageFilterID4IUC4)

def itkClampImageFilterID4IUS4_New():
    return itkClampImageFilterID4IUS4.New()

class itkClampImageFilterID4IUS4(itkClampImageFilterID4IUS4_Superclass):
    r"""Proxy of C++ itkClampImageFilterID4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterID4IUS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterID4IUS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IUS4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IUS4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterID4IUS4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IUS4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterID4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterID4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterID4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterID4IUS4

        Create a new object of the class itkClampImageFilterID4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterID4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterID4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterID4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterID4IUS4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterID4IUS4_swigregister(itkClampImageFilterID4IUS4)

def itkClampImageFilterIF2ID2_New():
    return itkClampImageFilterIF2ID2.New()

class itkClampImageFilterIF2ID2(itkClampImageFilterIF2ID2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF2ID2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF2ID2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2ID2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2ID2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2ID2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2ID2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF2ID2

        Create a new object of the class itkClampImageFilterIF2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF2ID2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF2ID2_swigregister(itkClampImageFilterIF2ID2)

def itkClampImageFilterIF2IF2_New():
    return itkClampImageFilterIF2IF2.New()

class itkClampImageFilterIF2IF2(itkClampImageFilterIF2IF2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF2IF2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF2IF2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IF2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IF2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IF2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IF2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF2IF2

        Create a new object of the class itkClampImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF2IF2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF2IF2_swigregister(itkClampImageFilterIF2IF2)

def itkClampImageFilterIF2ISS2_New():
    return itkClampImageFilterIF2ISS2.New()

class itkClampImageFilterIF2ISS2(itkClampImageFilterIF2ISS2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF2ISS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF2ISS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2ISS2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2ISS2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2ISS2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2ISS2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF2ISS2

        Create a new object of the class itkClampImageFilterIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF2ISS2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF2ISS2_swigregister(itkClampImageFilterIF2ISS2)

def itkClampImageFilterIF2IUC2_New():
    return itkClampImageFilterIF2IUC2.New()

class itkClampImageFilterIF2IUC2(itkClampImageFilterIF2IUC2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF2IUC2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF2IUC2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUC2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUC2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUC2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUC2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF2IUC2

        Create a new object of the class itkClampImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF2IUC2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF2IUC2_swigregister(itkClampImageFilterIF2IUC2)

def itkClampImageFilterIF2IUS2_New():
    return itkClampImageFilterIF2IUS2.New()

class itkClampImageFilterIF2IUS2(itkClampImageFilterIF2IUS2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF2IUS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF2IUS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUS2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUS2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUS2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUS2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF2IUS2

        Create a new object of the class itkClampImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF2IUS2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF2IUS2_swigregister(itkClampImageFilterIF2IUS2)

def itkClampImageFilterIF3ID3_New():
    return itkClampImageFilterIF3ID3.New()

class itkClampImageFilterIF3ID3(itkClampImageFilterIF3ID3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF3ID3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF3ID3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3ID3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3ID3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3ID3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3ID3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF3ID3

        Create a new object of the class itkClampImageFilterIF3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF3ID3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF3ID3_swigregister(itkClampImageFilterIF3ID3)

def itkClampImageFilterIF3IF3_New():
    return itkClampImageFilterIF3IF3.New()

class itkClampImageFilterIF3IF3(itkClampImageFilterIF3IF3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF3IF3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF3IF3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IF3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IF3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IF3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IF3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF3IF3

        Create a new object of the class itkClampImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF3IF3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF3IF3_swigregister(itkClampImageFilterIF3IF3)

def itkClampImageFilterIF3ISS3_New():
    return itkClampImageFilterIF3ISS3.New()

class itkClampImageFilterIF3ISS3(itkClampImageFilterIF3ISS3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF3ISS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF3ISS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3ISS3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3ISS3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3ISS3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3ISS3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF3ISS3

        Create a new object of the class itkClampImageFilterIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF3ISS3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF3ISS3_swigregister(itkClampImageFilterIF3ISS3)

def itkClampImageFilterIF3IUC3_New():
    return itkClampImageFilterIF3IUC3.New()

class itkClampImageFilterIF3IUC3(itkClampImageFilterIF3IUC3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF3IUC3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF3IUC3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUC3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUC3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUC3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUC3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF3IUC3

        Create a new object of the class itkClampImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF3IUC3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF3IUC3_swigregister(itkClampImageFilterIF3IUC3)

def itkClampImageFilterIF3IUS3_New():
    return itkClampImageFilterIF3IUS3.New()

class itkClampImageFilterIF3IUS3(itkClampImageFilterIF3IUS3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF3IUS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF3IUS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUS3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUS3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUS3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUS3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF3IUS3

        Create a new object of the class itkClampImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF3IUS3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF3IUS3_swigregister(itkClampImageFilterIF3IUS3)

def itkClampImageFilterIF4ID4_New():
    return itkClampImageFilterIF4ID4.New()

class itkClampImageFilterIF4ID4(itkClampImageFilterIF4ID4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF4ID4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF4ID4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4ID4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4ID4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4ID4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4ID4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF4ID4

        Create a new object of the class itkClampImageFilterIF4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF4ID4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF4ID4_swigregister(itkClampImageFilterIF4ID4)

def itkClampImageFilterIF4IF4_New():
    return itkClampImageFilterIF4IF4.New()

class itkClampImageFilterIF4IF4(itkClampImageFilterIF4IF4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF4IF4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF4IF4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IF4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IF4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IF4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IF4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF4IF4

        Create a new object of the class itkClampImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF4IF4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF4IF4_swigregister(itkClampImageFilterIF4IF4)

def itkClampImageFilterIF4ISS4_New():
    return itkClampImageFilterIF4ISS4.New()

class itkClampImageFilterIF4ISS4(itkClampImageFilterIF4ISS4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF4ISS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF4ISS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4ISS4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4ISS4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4ISS4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4ISS4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF4ISS4

        Create a new object of the class itkClampImageFilterIF4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF4ISS4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF4ISS4_swigregister(itkClampImageFilterIF4ISS4)

def itkClampImageFilterIF4IUC4_New():
    return itkClampImageFilterIF4IUC4.New()

class itkClampImageFilterIF4IUC4(itkClampImageFilterIF4IUC4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF4IUC4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF4IUC4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUC4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUC4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUC4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUC4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF4IUC4

        Create a new object of the class itkClampImageFilterIF4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF4IUC4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF4IUC4_swigregister(itkClampImageFilterIF4IUC4)

def itkClampImageFilterIF4IUS4_New():
    return itkClampImageFilterIF4IUS4.New()

class itkClampImageFilterIF4IUS4(itkClampImageFilterIF4IUS4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIF4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIF4IUS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIF4IUS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUS4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUS4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUS4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUS4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIF4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIF4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIF4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIF4IUS4

        Create a new object of the class itkClampImageFilterIF4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIF4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIF4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIF4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIF4IUS4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIF4IUS4_swigregister(itkClampImageFilterIF4IUS4)

def itkClampImageFilterISS2ID2_New():
    return itkClampImageFilterISS2ID2.New()

class itkClampImageFilterISS2ID2(itkClampImageFilterISS2ID2_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS2ID2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS2ID2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2ID2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2ID2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2ID2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2ID2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS2ID2

        Create a new object of the class itkClampImageFilterISS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS2ID2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS2ID2_swigregister(itkClampImageFilterISS2ID2)

def itkClampImageFilterISS2IF2_New():
    return itkClampImageFilterISS2IF2.New()

class itkClampImageFilterISS2IF2(itkClampImageFilterISS2IF2_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS2IF2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS2IF2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IF2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IF2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IF2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IF2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS2IF2

        Create a new object of the class itkClampImageFilterISS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS2IF2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS2IF2_swigregister(itkClampImageFilterISS2IF2)

def itkClampImageFilterISS2ISS2_New():
    return itkClampImageFilterISS2ISS2.New()

class itkClampImageFilterISS2ISS2(itkClampImageFilterISS2ISS2_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS2ISS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS2ISS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2ISS2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2ISS2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2ISS2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2ISS2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS2ISS2

        Create a new object of the class itkClampImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS2ISS2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS2ISS2_swigregister(itkClampImageFilterISS2ISS2)

def itkClampImageFilterISS2IUC2_New():
    return itkClampImageFilterISS2IUC2.New()

class itkClampImageFilterISS2IUC2(itkClampImageFilterISS2IUC2_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS2IUC2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS2IUC2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUC2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUC2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUC2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUC2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS2IUC2

        Create a new object of the class itkClampImageFilterISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS2IUC2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS2IUC2_swigregister(itkClampImageFilterISS2IUC2)

def itkClampImageFilterISS2IUS2_New():
    return itkClampImageFilterISS2IUS2.New()

class itkClampImageFilterISS2IUS2(itkClampImageFilterISS2IUS2_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS2IUS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS2IUS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUS2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUS2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUS2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUS2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS2IUS2

        Create a new object of the class itkClampImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS2IUS2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS2IUS2_swigregister(itkClampImageFilterISS2IUS2)

def itkClampImageFilterISS3ID3_New():
    return itkClampImageFilterISS3ID3.New()

class itkClampImageFilterISS3ID3(itkClampImageFilterISS3ID3_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS3ID3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS3ID3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3ID3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3ID3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3ID3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3ID3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS3ID3

        Create a new object of the class itkClampImageFilterISS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS3ID3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS3ID3_swigregister(itkClampImageFilterISS3ID3)

def itkClampImageFilterISS3IF3_New():
    return itkClampImageFilterISS3IF3.New()

class itkClampImageFilterISS3IF3(itkClampImageFilterISS3IF3_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS3IF3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS3IF3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IF3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IF3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IF3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IF3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS3IF3

        Create a new object of the class itkClampImageFilterISS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS3IF3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS3IF3_swigregister(itkClampImageFilterISS3IF3)

def itkClampImageFilterISS3ISS3_New():
    return itkClampImageFilterISS3ISS3.New()

class itkClampImageFilterISS3ISS3(itkClampImageFilterISS3ISS3_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS3ISS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS3ISS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3ISS3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3ISS3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3ISS3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3ISS3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS3ISS3

        Create a new object of the class itkClampImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS3ISS3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS3ISS3_swigregister(itkClampImageFilterISS3ISS3)

def itkClampImageFilterISS3IUC3_New():
    return itkClampImageFilterISS3IUC3.New()

class itkClampImageFilterISS3IUC3(itkClampImageFilterISS3IUC3_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS3IUC3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS3IUC3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUC3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUC3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUC3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUC3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS3IUC3

        Create a new object of the class itkClampImageFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS3IUC3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS3IUC3_swigregister(itkClampImageFilterISS3IUC3)

def itkClampImageFilterISS3IUS3_New():
    return itkClampImageFilterISS3IUS3.New()

class itkClampImageFilterISS3IUS3(itkClampImageFilterISS3IUS3_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS3IUS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS3IUS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUS3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUS3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUS3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUS3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS3IUS3

        Create a new object of the class itkClampImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS3IUS3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS3IUS3_swigregister(itkClampImageFilterISS3IUS3)

def itkClampImageFilterISS4ID4_New():
    return itkClampImageFilterISS4ID4.New()

class itkClampImageFilterISS4ID4(itkClampImageFilterISS4ID4_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS4ID4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS4ID4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4ID4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4ID4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4ID4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4ID4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS4ID4

        Create a new object of the class itkClampImageFilterISS4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS4ID4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS4ID4_swigregister(itkClampImageFilterISS4ID4)

def itkClampImageFilterISS4IF4_New():
    return itkClampImageFilterISS4IF4.New()

class itkClampImageFilterISS4IF4(itkClampImageFilterISS4IF4_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS4IF4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS4IF4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IF4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IF4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IF4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IF4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS4IF4

        Create a new object of the class itkClampImageFilterISS4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS4IF4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS4IF4_swigregister(itkClampImageFilterISS4IF4)

def itkClampImageFilterISS4ISS4_New():
    return itkClampImageFilterISS4ISS4.New()

class itkClampImageFilterISS4ISS4(itkClampImageFilterISS4ISS4_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS4ISS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS4ISS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4ISS4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4ISS4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4ISS4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4ISS4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS4ISS4

        Create a new object of the class itkClampImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS4ISS4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS4ISS4_swigregister(itkClampImageFilterISS4ISS4)

def itkClampImageFilterISS4IUC4_New():
    return itkClampImageFilterISS4IUC4.New()

class itkClampImageFilterISS4IUC4(itkClampImageFilterISS4IUC4_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS4IUC4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS4IUC4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUC4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUC4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUC4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUC4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS4IUC4

        Create a new object of the class itkClampImageFilterISS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS4IUC4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS4IUC4_swigregister(itkClampImageFilterISS4IUC4)

def itkClampImageFilterISS4IUS4_New():
    return itkClampImageFilterISS4IUS4.New()

class itkClampImageFilterISS4IUS4(itkClampImageFilterISS4IUS4_Superclass):
    r"""Proxy of C++ itkClampImageFilterISS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterISS4IUS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterISS4IUS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUS4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUS4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUS4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUS4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterISS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterISS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterISS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterISS4IUS4

        Create a new object of the class itkClampImageFilterISS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterISS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterISS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterISS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterISS4IUS4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterISS4IUS4_swigregister(itkClampImageFilterISS4IUS4)

def itkClampImageFilterIUC2ID2_New():
    return itkClampImageFilterIUC2ID2.New()

class itkClampImageFilterIUC2ID2(itkClampImageFilterIUC2ID2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC2ID2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC2ID2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ID2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ID2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ID2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ID2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC2ID2

        Create a new object of the class itkClampImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC2ID2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC2ID2_swigregister(itkClampImageFilterIUC2ID2)

def itkClampImageFilterIUC2IF2_New():
    return itkClampImageFilterIUC2IF2.New()

class itkClampImageFilterIUC2IF2(itkClampImageFilterIUC2IF2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC2IF2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC2IF2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IF2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IF2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IF2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IF2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC2IF2

        Create a new object of the class itkClampImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC2IF2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC2IF2_swigregister(itkClampImageFilterIUC2IF2)

def itkClampImageFilterIUC2ISS2_New():
    return itkClampImageFilterIUC2ISS2.New()

class itkClampImageFilterIUC2ISS2(itkClampImageFilterIUC2ISS2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC2ISS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC2ISS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ISS2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ISS2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ISS2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ISS2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC2ISS2

        Create a new object of the class itkClampImageFilterIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC2ISS2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC2ISS2_swigregister(itkClampImageFilterIUC2ISS2)

def itkClampImageFilterIUC2IUC2_New():
    return itkClampImageFilterIUC2IUC2.New()

class itkClampImageFilterIUC2IUC2(itkClampImageFilterIUC2IUC2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC2IUC2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC2IUC2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUC2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUC2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUC2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUC2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC2IUC2

        Create a new object of the class itkClampImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC2IUC2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC2IUC2_swigregister(itkClampImageFilterIUC2IUC2)

def itkClampImageFilterIUC2IUS2_New():
    return itkClampImageFilterIUC2IUS2.New()

class itkClampImageFilterIUC2IUS2(itkClampImageFilterIUC2IUS2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC2IUS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC2IUS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUS2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUS2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUS2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUS2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC2IUS2

        Create a new object of the class itkClampImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC2IUS2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC2IUS2_swigregister(itkClampImageFilterIUC2IUS2)

def itkClampImageFilterIUC3ID3_New():
    return itkClampImageFilterIUC3ID3.New()

class itkClampImageFilterIUC3ID3(itkClampImageFilterIUC3ID3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC3ID3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC3ID3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ID3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ID3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ID3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ID3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC3ID3

        Create a new object of the class itkClampImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC3ID3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC3ID3_swigregister(itkClampImageFilterIUC3ID3)

def itkClampImageFilterIUC3IF3_New():
    return itkClampImageFilterIUC3IF3.New()

class itkClampImageFilterIUC3IF3(itkClampImageFilterIUC3IF3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC3IF3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC3IF3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IF3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IF3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IF3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IF3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC3IF3

        Create a new object of the class itkClampImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC3IF3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC3IF3_swigregister(itkClampImageFilterIUC3IF3)

def itkClampImageFilterIUC3ISS3_New():
    return itkClampImageFilterIUC3ISS3.New()

class itkClampImageFilterIUC3ISS3(itkClampImageFilterIUC3ISS3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC3ISS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC3ISS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ISS3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ISS3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ISS3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ISS3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC3ISS3

        Create a new object of the class itkClampImageFilterIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC3ISS3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC3ISS3_swigregister(itkClampImageFilterIUC3ISS3)

def itkClampImageFilterIUC3IUC3_New():
    return itkClampImageFilterIUC3IUC3.New()

class itkClampImageFilterIUC3IUC3(itkClampImageFilterIUC3IUC3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC3IUC3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC3IUC3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUC3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUC3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUC3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUC3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC3IUC3

        Create a new object of the class itkClampImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC3IUC3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC3IUC3_swigregister(itkClampImageFilterIUC3IUC3)

def itkClampImageFilterIUC3IUS3_New():
    return itkClampImageFilterIUC3IUS3.New()

class itkClampImageFilterIUC3IUS3(itkClampImageFilterIUC3IUS3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC3IUS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC3IUS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUS3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUS3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUS3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUS3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC3IUS3

        Create a new object of the class itkClampImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC3IUS3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC3IUS3_swigregister(itkClampImageFilterIUC3IUS3)

def itkClampImageFilterIUC4ID4_New():
    return itkClampImageFilterIUC4ID4.New()

class itkClampImageFilterIUC4ID4(itkClampImageFilterIUC4ID4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC4ID4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC4ID4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ID4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ID4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ID4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ID4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC4ID4

        Create a new object of the class itkClampImageFilterIUC4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC4ID4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC4ID4_swigregister(itkClampImageFilterIUC4ID4)

def itkClampImageFilterIUC4IF4_New():
    return itkClampImageFilterIUC4IF4.New()

class itkClampImageFilterIUC4IF4(itkClampImageFilterIUC4IF4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC4IF4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC4IF4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IF4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IF4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IF4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IF4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC4IF4

        Create a new object of the class itkClampImageFilterIUC4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC4IF4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC4IF4_swigregister(itkClampImageFilterIUC4IF4)

def itkClampImageFilterIUC4ISS4_New():
    return itkClampImageFilterIUC4ISS4.New()

class itkClampImageFilterIUC4ISS4(itkClampImageFilterIUC4ISS4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC4ISS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC4ISS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ISS4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ISS4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ISS4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ISS4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC4ISS4

        Create a new object of the class itkClampImageFilterIUC4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC4ISS4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC4ISS4_swigregister(itkClampImageFilterIUC4ISS4)

def itkClampImageFilterIUC4IUC4_New():
    return itkClampImageFilterIUC4IUC4.New()

class itkClampImageFilterIUC4IUC4(itkClampImageFilterIUC4IUC4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC4IUC4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC4IUC4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUC4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUC4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUC4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUC4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC4IUC4

        Create a new object of the class itkClampImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC4IUC4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC4IUC4_swigregister(itkClampImageFilterIUC4IUC4)

def itkClampImageFilterIUC4IUS4_New():
    return itkClampImageFilterIUC4IUS4.New()

class itkClampImageFilterIUC4IUS4(itkClampImageFilterIUC4IUS4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUC4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUC4IUS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUC4IUS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUS4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUS4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUS4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUS4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUC4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUC4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUC4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUC4IUS4

        Create a new object of the class itkClampImageFilterIUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUC4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUC4IUS4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUC4IUS4_swigregister(itkClampImageFilterIUC4IUS4)

def itkClampImageFilterIUS2ID2_New():
    return itkClampImageFilterIUS2ID2.New()

class itkClampImageFilterIUS2ID2(itkClampImageFilterIUS2ID2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS2ID2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS2ID2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ID2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ID2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ID2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ID2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS2ID2

        Create a new object of the class itkClampImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS2ID2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS2ID2_swigregister(itkClampImageFilterIUS2ID2)

def itkClampImageFilterIUS2IF2_New():
    return itkClampImageFilterIUS2IF2.New()

class itkClampImageFilterIUS2IF2(itkClampImageFilterIUS2IF2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS2IF2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS2IF2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IF2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IF2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IF2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IF2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS2IF2

        Create a new object of the class itkClampImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS2IF2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS2IF2_swigregister(itkClampImageFilterIUS2IF2)

def itkClampImageFilterIUS2ISS2_New():
    return itkClampImageFilterIUS2ISS2.New()

class itkClampImageFilterIUS2ISS2(itkClampImageFilterIUS2ISS2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS2ISS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS2ISS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ISS2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ISS2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ISS2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ISS2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS2ISS2

        Create a new object of the class itkClampImageFilterIUS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS2ISS2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS2ISS2_swigregister(itkClampImageFilterIUS2ISS2)

def itkClampImageFilterIUS2IUC2_New():
    return itkClampImageFilterIUS2IUC2.New()

class itkClampImageFilterIUS2IUC2(itkClampImageFilterIUS2IUC2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS2IUC2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS2IUC2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUC2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUC2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUC2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUC2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS2IUC2

        Create a new object of the class itkClampImageFilterIUS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS2IUC2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS2IUC2_swigregister(itkClampImageFilterIUS2IUC2)

def itkClampImageFilterIUS2IUS2_New():
    return itkClampImageFilterIUS2IUS2.New()

class itkClampImageFilterIUS2IUS2(itkClampImageFilterIUS2IUS2_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS2IUS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS2IUS2_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUS2_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUS2_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUS2_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUS2_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS2IUS2

        Create a new object of the class itkClampImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS2IUS2 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS2IUS2_swigregister(itkClampImageFilterIUS2IUS2)

def itkClampImageFilterIUS3ID3_New():
    return itkClampImageFilterIUS3ID3.New()

class itkClampImageFilterIUS3ID3(itkClampImageFilterIUS3ID3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS3ID3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS3ID3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ID3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ID3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ID3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ID3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS3ID3

        Create a new object of the class itkClampImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS3ID3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS3ID3_swigregister(itkClampImageFilterIUS3ID3)

def itkClampImageFilterIUS3IF3_New():
    return itkClampImageFilterIUS3IF3.New()

class itkClampImageFilterIUS3IF3(itkClampImageFilterIUS3IF3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS3IF3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS3IF3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IF3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IF3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IF3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IF3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS3IF3

        Create a new object of the class itkClampImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS3IF3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS3IF3_swigregister(itkClampImageFilterIUS3IF3)

def itkClampImageFilterIUS3ISS3_New():
    return itkClampImageFilterIUS3ISS3.New()

class itkClampImageFilterIUS3ISS3(itkClampImageFilterIUS3ISS3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS3ISS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS3ISS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ISS3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ISS3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ISS3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ISS3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS3ISS3

        Create a new object of the class itkClampImageFilterIUS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS3ISS3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS3ISS3_swigregister(itkClampImageFilterIUS3ISS3)

def itkClampImageFilterIUS3IUC3_New():
    return itkClampImageFilterIUS3IUC3.New()

class itkClampImageFilterIUS3IUC3(itkClampImageFilterIUS3IUC3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS3IUC3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS3IUC3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUC3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUC3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUC3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUC3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS3IUC3

        Create a new object of the class itkClampImageFilterIUS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS3IUC3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS3IUC3_swigregister(itkClampImageFilterIUS3IUC3)

def itkClampImageFilterIUS3IUS3_New():
    return itkClampImageFilterIUS3IUS3.New()

class itkClampImageFilterIUS3IUS3(itkClampImageFilterIUS3IUS3_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS3IUS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS3IUS3_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUS3_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUS3_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUS3_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUS3_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS3IUS3

        Create a new object of the class itkClampImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS3IUS3 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS3IUS3_swigregister(itkClampImageFilterIUS3IUS3)

def itkClampImageFilterIUS4ID4_New():
    return itkClampImageFilterIUS4ID4.New()

class itkClampImageFilterIUS4ID4(itkClampImageFilterIUS4ID4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS4ID4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS4ID4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ID4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ID4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> double"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ID4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: double const
        upperBound: double const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ID4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS4ID4

        Create a new object of the class itkClampImageFilterIUS4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS4ID4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS4ID4_swigregister(itkClampImageFilterIUS4ID4)

def itkClampImageFilterIUS4IF4_New():
    return itkClampImageFilterIUS4IF4.New()

class itkClampImageFilterIUS4IF4(itkClampImageFilterIUS4IF4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS4IF4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS4IF4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IF4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IF4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> float"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IF4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: float const
        upperBound: float const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IF4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS4IF4

        Create a new object of the class itkClampImageFilterIUS4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS4IF4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS4IF4_swigregister(itkClampImageFilterIUS4IF4)

def itkClampImageFilterIUS4ISS4_New():
    return itkClampImageFilterIUS4ISS4.New()

class itkClampImageFilterIUS4ISS4(itkClampImageFilterIUS4ISS4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS4ISS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS4ISS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ISS4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ISS4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ISS4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: short const
        upperBound: short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ISS4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS4ISS4

        Create a new object of the class itkClampImageFilterIUS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS4ISS4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS4ISS4_swigregister(itkClampImageFilterIUS4ISS4)

def itkClampImageFilterIUS4IUC4_New():
    return itkClampImageFilterIUS4IUC4.New()

class itkClampImageFilterIUS4IUC4(itkClampImageFilterIUS4IUC4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS4IUC4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS4IUC4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUC4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUC4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned char"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUC4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned char const
        upperBound: unsigned char const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUC4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS4IUC4

        Create a new object of the class itkClampImageFilterIUS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS4IUC4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS4IUC4_swigregister(itkClampImageFilterIUS4IUC4)

def itkClampImageFilterIUS4IUS4_New():
    return itkClampImageFilterIUS4IUS4.New()

class itkClampImageFilterIUS4IUS4(itkClampImageFilterIUS4IUS4_Superclass):
    r"""Proxy of C++ itkClampImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkClampImageFilterIUS4IUS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkClampImageFilterIUS4IUS4_Pointer"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUS4_Clone(self)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUS4_GetLowerBound(self)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> unsigned short"""
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUS4_GetUpperBound(self)

    def SetBounds(self, lowerBound, upperBound):
        r"""
        SetBounds(self, lowerBound, upperBound)

        Parameters
        ----------
        lowerBound: unsigned short const
        upperBound: unsigned short const

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUS4_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _itkClampImageFilterPython.delete_itkClampImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkClampImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkClampImageFilterPython.itkClampImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkClampImageFilterIUS4IUS4

        Create a new object of the class itkClampImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkClampImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkClampImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkClampImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkClampImageFilterIUS4IUS4 in _itkClampImageFilterPython:
_itkClampImageFilterPython.itkClampImageFilterIUS4IUS4_swigregister(itkClampImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def clamp_image_filter(*args: itkt.ImageLike,  bounds: float=..., functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ClampImageFilter"""
    import itk

    kwarg_typehints = { 'bounds':bounds,'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ClampImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def clamp_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.ClampImageFilter
    clamp_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    clamp_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def unary_functor_image_filter(*args: itkt.ImageLike,  functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for UnaryFunctorImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.UnaryFunctorImageFilter
    unary_functor_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    unary_functor_image_filter.__doc__ = filter_object.__doc__



