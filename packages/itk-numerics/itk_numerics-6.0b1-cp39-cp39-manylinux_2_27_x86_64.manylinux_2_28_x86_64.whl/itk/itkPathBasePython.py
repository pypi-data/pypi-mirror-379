# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKPathPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPathBasePython
else:
    import _itkPathBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkContinuousIndexPython
class itkPathDCID22(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPathDCID22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def StartOfInput(self):
        r"""StartOfInput(self) -> double"""
        return _itkPathBasePython.itkPathDCID22_StartOfInput(self)

    def EndOfInput(self):
        r"""EndOfInput(self) -> double"""
        return _itkPathBasePython.itkPathDCID22_EndOfInput(self)

    def Evaluate(self, input):
        r"""
        Evaluate(self, input) -> itkContinuousIndexD2

        Parameters
        ----------
        input: double const &

        """
        return _itkPathBasePython.itkPathDCID22_Evaluate(self, input)

    def EvaluateToIndex(self, input):
        r"""
        EvaluateToIndex(self, input) -> itkIndex2

        Parameters
        ----------
        input: double const &

        """
        return _itkPathBasePython.itkPathDCID22_EvaluateToIndex(self, input)

    def IncrementInput(self, input):
        r"""
        IncrementInput(self, input) -> itkOffset2

        Parameters
        ----------
        input: double &

        """
        return _itkPathBasePython.itkPathDCID22_IncrementInput(self, input)
    __swig_destroy__ = _itkPathBasePython.delete_itkPathDCID22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathDCID22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathBasePython.itkPathDCID22_cast(obj)

# Register itkPathDCID22 in _itkPathBasePython:
_itkPathBasePython.itkPathDCID22_swigregister(itkPathDCID22)
class itkPathDCID33(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPathDCID33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def StartOfInput(self):
        r"""StartOfInput(self) -> double"""
        return _itkPathBasePython.itkPathDCID33_StartOfInput(self)

    def EndOfInput(self):
        r"""EndOfInput(self) -> double"""
        return _itkPathBasePython.itkPathDCID33_EndOfInput(self)

    def Evaluate(self, input):
        r"""
        Evaluate(self, input) -> itkContinuousIndexD3

        Parameters
        ----------
        input: double const &

        """
        return _itkPathBasePython.itkPathDCID33_Evaluate(self, input)

    def EvaluateToIndex(self, input):
        r"""
        EvaluateToIndex(self, input) -> itkIndex3

        Parameters
        ----------
        input: double const &

        """
        return _itkPathBasePython.itkPathDCID33_EvaluateToIndex(self, input)

    def IncrementInput(self, input):
        r"""
        IncrementInput(self, input) -> itkOffset3

        Parameters
        ----------
        input: double &

        """
        return _itkPathBasePython.itkPathDCID33_IncrementInput(self, input)
    __swig_destroy__ = _itkPathBasePython.delete_itkPathDCID33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathDCID33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathBasePython.itkPathDCID33_cast(obj)

# Register itkPathDCID33 in _itkPathBasePython:
_itkPathBasePython.itkPathDCID33_swigregister(itkPathDCID33)
class itkPathDCID44(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPathDCID44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def StartOfInput(self):
        r"""StartOfInput(self) -> double"""
        return _itkPathBasePython.itkPathDCID44_StartOfInput(self)

    def EndOfInput(self):
        r"""EndOfInput(self) -> double"""
        return _itkPathBasePython.itkPathDCID44_EndOfInput(self)

    def Evaluate(self, input):
        r"""
        Evaluate(self, input) -> itkContinuousIndexD4

        Parameters
        ----------
        input: double const &

        """
        return _itkPathBasePython.itkPathDCID44_Evaluate(self, input)

    def EvaluateToIndex(self, input):
        r"""
        EvaluateToIndex(self, input) -> itkIndex4

        Parameters
        ----------
        input: double const &

        """
        return _itkPathBasePython.itkPathDCID44_EvaluateToIndex(self, input)

    def IncrementInput(self, input):
        r"""
        IncrementInput(self, input) -> itkOffset4

        Parameters
        ----------
        input: double &

        """
        return _itkPathBasePython.itkPathDCID44_IncrementInput(self, input)
    __swig_destroy__ = _itkPathBasePython.delete_itkPathDCID44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPathDCID44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPathBasePython.itkPathDCID44_cast(obj)

# Register itkPathDCID44 in _itkPathBasePython:
_itkPathBasePython.itkPathDCID44_swigregister(itkPathDCID44)

