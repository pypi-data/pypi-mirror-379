# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSigmoidImageFilterPython
else:
    import _itkSigmoidImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkOffsetPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def itkSigmoidImageFilterID2ID2_Superclass_New():
    return itkSigmoidImageFilterID2ID2_Superclass.New()

class itkSigmoidImageFilterID2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkSigmoidImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterID2ID2_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterID2ID2_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< double,double >
        GetFunctor(self) -> itk::Functor::Sigmoid< double,double > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< double,double > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterID2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterID2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterID2ID2_Superclass

        Create a new object of the class itkSigmoidImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterID2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterID2ID2_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Superclass_swigregister(itkSigmoidImageFilterID2ID2_Superclass)

def itkSigmoidImageFilterID3ID3_Superclass_New():
    return itkSigmoidImageFilterID3ID3_Superclass.New()

class itkSigmoidImageFilterID3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkSigmoidImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterID3ID3_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterID3ID3_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< double,double >
        GetFunctor(self) -> itk::Functor::Sigmoid< double,double > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< double,double > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterID3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterID3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterID3ID3_Superclass

        Create a new object of the class itkSigmoidImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterID3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterID3ID3_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Superclass_swigregister(itkSigmoidImageFilterID3ID3_Superclass)

def itkSigmoidImageFilterID4ID4_Superclass_New():
    return itkSigmoidImageFilterID4ID4_Superclass.New()

class itkSigmoidImageFilterID4ID4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4ID4):
    r"""Proxy of C++ itkSigmoidImageFilterID4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterID4ID4_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterID4ID4_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< double,double >
        GetFunctor(self) -> itk::Functor::Sigmoid< double,double > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< double,double > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterID4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterID4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterID4ID4_Superclass

        Create a new object of the class itkSigmoidImageFilterID4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterID4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterID4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterID4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterID4ID4_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_Superclass_swigregister(itkSigmoidImageFilterID4ID4_Superclass)

def itkSigmoidImageFilterIF2IF2_Superclass_New():
    return itkSigmoidImageFilterIF2IF2_Superclass.New()

class itkSigmoidImageFilterIF2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkSigmoidImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIF2IF2_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIF2IF2_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< float,float >
        GetFunctor(self) -> itk::Functor::Sigmoid< float,float > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< float,float > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIF2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIF2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIF2IF2_Superclass

        Create a new object of the class itkSigmoidImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIF2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIF2IF2_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Superclass_swigregister(itkSigmoidImageFilterIF2IF2_Superclass)

def itkSigmoidImageFilterIF3IF3_Superclass_New():
    return itkSigmoidImageFilterIF3IF3_Superclass.New()

class itkSigmoidImageFilterIF3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkSigmoidImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIF3IF3_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIF3IF3_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< float,float >
        GetFunctor(self) -> itk::Functor::Sigmoid< float,float > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< float,float > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIF3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIF3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIF3IF3_Superclass

        Create a new object of the class itkSigmoidImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIF3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIF3IF3_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Superclass_swigregister(itkSigmoidImageFilterIF3IF3_Superclass)

def itkSigmoidImageFilterIF4IF4_Superclass_New():
    return itkSigmoidImageFilterIF4IF4_Superclass.New()

class itkSigmoidImageFilterIF4IF4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IF4):
    r"""Proxy of C++ itkSigmoidImageFilterIF4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIF4IF4_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIF4IF4_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< float,float >
        GetFunctor(self) -> itk::Functor::Sigmoid< float,float > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< float,float > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIF4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIF4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIF4IF4_Superclass

        Create a new object of the class itkSigmoidImageFilterIF4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIF4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIF4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIF4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIF4IF4_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_Superclass_swigregister(itkSigmoidImageFilterIF4IF4_Superclass)

def itkSigmoidImageFilterISS2ISS2_Superclass_New():
    return itkSigmoidImageFilterISS2ISS2_Superclass.New()

class itkSigmoidImageFilterISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkSigmoidImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< short,short >
        GetFunctor(self) -> itk::Functor::Sigmoid< short,short > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< short,short > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterISS2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterISS2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterISS2ISS2_Superclass

        Create a new object of the class itkSigmoidImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterISS2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterISS2ISS2_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Superclass_swigregister(itkSigmoidImageFilterISS2ISS2_Superclass)

def itkSigmoidImageFilterISS3ISS3_Superclass_New():
    return itkSigmoidImageFilterISS3ISS3_Superclass.New()

class itkSigmoidImageFilterISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkSigmoidImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< short,short >
        GetFunctor(self) -> itk::Functor::Sigmoid< short,short > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< short,short > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterISS3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterISS3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterISS3ISS3_Superclass

        Create a new object of the class itkSigmoidImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterISS3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterISS3ISS3_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Superclass_swigregister(itkSigmoidImageFilterISS3ISS3_Superclass)

def itkSigmoidImageFilterISS4ISS4_Superclass_New():
    return itkSigmoidImageFilterISS4ISS4_Superclass.New()

class itkSigmoidImageFilterISS4ISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4ISS4):
    r"""Proxy of C++ itkSigmoidImageFilterISS4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< short,short >
        GetFunctor(self) -> itk::Functor::Sigmoid< short,short > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< short,short > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterISS4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterISS4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterISS4ISS4_Superclass

        Create a new object of the class itkSigmoidImageFilterISS4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterISS4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterISS4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterISS4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterISS4ISS4_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_Superclass_swigregister(itkSigmoidImageFilterISS4ISS4_Superclass)

def itkSigmoidImageFilterIUC2IUC2_Superclass_New():
    return itkSigmoidImageFilterIUC2IUC2_Superclass.New()

class itkSigmoidImageFilterIUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkSigmoidImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< unsigned char,unsigned char >
        GetFunctor(self) -> itk::Functor::Sigmoid< unsigned char,unsigned char > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< unsigned char,unsigned char > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUC2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIUC2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkSigmoidImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUC2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUC2IUC2_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Superclass_swigregister(itkSigmoidImageFilterIUC2IUC2_Superclass)

def itkSigmoidImageFilterIUC3IUC3_Superclass_New():
    return itkSigmoidImageFilterIUC3IUC3_Superclass.New()

class itkSigmoidImageFilterIUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkSigmoidImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< unsigned char,unsigned char >
        GetFunctor(self) -> itk::Functor::Sigmoid< unsigned char,unsigned char > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< unsigned char,unsigned char > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUC3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIUC3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkSigmoidImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUC3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUC3IUC3_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Superclass_swigregister(itkSigmoidImageFilterIUC3IUC3_Superclass)

def itkSigmoidImageFilterIUC4IUC4_Superclass_New():
    return itkSigmoidImageFilterIUC4IUC4_Superclass.New()

class itkSigmoidImageFilterIUC4IUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4IUC4):
    r"""Proxy of C++ itkSigmoidImageFilterIUC4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< unsigned char,unsigned char >
        GetFunctor(self) -> itk::Functor::Sigmoid< unsigned char,unsigned char > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< unsigned char,unsigned char > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUC4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIUC4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUC4IUC4_Superclass

        Create a new object of the class itkSigmoidImageFilterIUC4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUC4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUC4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUC4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUC4IUC4_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_Superclass_swigregister(itkSigmoidImageFilterIUC4IUC4_Superclass)

def itkSigmoidImageFilterIUS2IUS2_Superclass_New():
    return itkSigmoidImageFilterIUS2IUS2_Superclass.New()

class itkSigmoidImageFilterIUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkSigmoidImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< unsigned short,unsigned short >
        GetFunctor(self) -> itk::Functor::Sigmoid< unsigned short,unsigned short > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< unsigned short,unsigned short > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUS2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIUS2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkSigmoidImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUS2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUS2IUS2_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Superclass_swigregister(itkSigmoidImageFilterIUS2IUS2_Superclass)

def itkSigmoidImageFilterIUS3IUS3_Superclass_New():
    return itkSigmoidImageFilterIUS3IUS3_Superclass.New()

class itkSigmoidImageFilterIUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkSigmoidImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< unsigned short,unsigned short >
        GetFunctor(self) -> itk::Functor::Sigmoid< unsigned short,unsigned short > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< unsigned short,unsigned short > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUS3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIUS3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkSigmoidImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUS3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUS3IUS3_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Superclass_swigregister(itkSigmoidImageFilterIUS3IUS3_Superclass)

def itkSigmoidImageFilterIUS4IUS4_Superclass_New():
    return itkSigmoidImageFilterIUS4IUS4_Superclass.New()

class itkSigmoidImageFilterIUS4IUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4IUS4):
    r"""Proxy of C++ itkSigmoidImageFilterIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::Sigmoid< unsigned short,unsigned short >
        GetFunctor(self) -> itk::Functor::Sigmoid< unsigned short,unsigned short > const &
        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::Sigmoid< unsigned short,unsigned short > const &

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUS4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIUS4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUS4IUS4_Superclass

        Create a new object of the class itkSigmoidImageFilterIUS4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUS4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUS4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUS4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUS4IUS4_Superclass in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_Superclass_swigregister(itkSigmoidImageFilterIUS4IUS4_Superclass)

def itkSigmoidImageFilterID2ID2_New():
    return itkSigmoidImageFilterID2ID2.New()

class itkSigmoidImageFilterID2ID2(itkSigmoidImageFilterID2ID2_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterID2ID2_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterID2ID2_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterID2ID2

        Create a new object of the class itkSigmoidImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterID2ID2 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterID2ID2_swigregister(itkSigmoidImageFilterID2ID2)

def itkSigmoidImageFilterID3ID3_New():
    return itkSigmoidImageFilterID3ID3.New()

class itkSigmoidImageFilterID3ID3(itkSigmoidImageFilterID3ID3_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterID3ID3_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterID3ID3_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterID3ID3

        Create a new object of the class itkSigmoidImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterID3ID3 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterID3ID3_swigregister(itkSigmoidImageFilterID3ID3)

def itkSigmoidImageFilterID4ID4_New():
    return itkSigmoidImageFilterID4ID4.New()

class itkSigmoidImageFilterID4ID4(itkSigmoidImageFilterID4ID4_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterID4ID4_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterID4ID4_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterID4ID4

        Create a new object of the class itkSigmoidImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterID4ID4 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterID4ID4_swigregister(itkSigmoidImageFilterID4ID4)

def itkSigmoidImageFilterIF2IF2_New():
    return itkSigmoidImageFilterIF2IF2.New()

class itkSigmoidImageFilterIF2IF2(itkSigmoidImageFilterIF2IF2_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIF2IF2_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIF2IF2_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: float

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: float

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIF2IF2

        Create a new object of the class itkSigmoidImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIF2IF2 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF2IF2_swigregister(itkSigmoidImageFilterIF2IF2)

def itkSigmoidImageFilterIF3IF3_New():
    return itkSigmoidImageFilterIF3IF3.New()

class itkSigmoidImageFilterIF3IF3(itkSigmoidImageFilterIF3IF3_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIF3IF3_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIF3IF3_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: float

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: float

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIF3IF3

        Create a new object of the class itkSigmoidImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIF3IF3 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF3IF3_swigregister(itkSigmoidImageFilterIF3IF3)

def itkSigmoidImageFilterIF4IF4_New():
    return itkSigmoidImageFilterIF4IF4.New()

class itkSigmoidImageFilterIF4IF4(itkSigmoidImageFilterIF4IF4_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIF4IF4_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIF4IF4_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: float

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> float"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: float

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> float"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIF4IF4

        Create a new object of the class itkSigmoidImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIF4IF4 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIF4IF4_swigregister(itkSigmoidImageFilterIF4IF4)

def itkSigmoidImageFilterISS2ISS2_New():
    return itkSigmoidImageFilterISS2ISS2.New()

class itkSigmoidImageFilterISS2ISS2(itkSigmoidImageFilterISS2ISS2_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterISS2ISS2_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterISS2ISS2_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: short

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: short

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterISS2ISS2

        Create a new object of the class itkSigmoidImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterISS2ISS2 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS2ISS2_swigregister(itkSigmoidImageFilterISS2ISS2)

def itkSigmoidImageFilterISS3ISS3_New():
    return itkSigmoidImageFilterISS3ISS3.New()

class itkSigmoidImageFilterISS3ISS3(itkSigmoidImageFilterISS3ISS3_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterISS3ISS3_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterISS3ISS3_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: short

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: short

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterISS3ISS3

        Create a new object of the class itkSigmoidImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterISS3ISS3 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS3ISS3_swigregister(itkSigmoidImageFilterISS3ISS3)

def itkSigmoidImageFilterISS4ISS4_New():
    return itkSigmoidImageFilterISS4ISS4.New()

class itkSigmoidImageFilterISS4ISS4(itkSigmoidImageFilterISS4ISS4_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterISS4ISS4_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterISS4ISS4_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: short

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> short"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: short

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> short"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterISS4ISS4

        Create a new object of the class itkSigmoidImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterISS4ISS4 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterISS4ISS4_swigregister(itkSigmoidImageFilterISS4ISS4)

def itkSigmoidImageFilterIUC2IUC2_New():
    return itkSigmoidImageFilterIUC2IUC2.New()

class itkSigmoidImageFilterIUC2IUC2(itkSigmoidImageFilterIUC2IUC2_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIUC2IUC2_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIUC2IUC2_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: unsigned char

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: unsigned char

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUC2IUC2

        Create a new object of the class itkSigmoidImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUC2IUC2 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC2IUC2_swigregister(itkSigmoidImageFilterIUC2IUC2)

def itkSigmoidImageFilterIUC3IUC3_New():
    return itkSigmoidImageFilterIUC3IUC3.New()

class itkSigmoidImageFilterIUC3IUC3(itkSigmoidImageFilterIUC3IUC3_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIUC3IUC3_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIUC3IUC3_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: unsigned char

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: unsigned char

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUC3IUC3

        Create a new object of the class itkSigmoidImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUC3IUC3 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC3IUC3_swigregister(itkSigmoidImageFilterIUC3IUC3)

def itkSigmoidImageFilterIUC4IUC4_New():
    return itkSigmoidImageFilterIUC4IUC4.New()

class itkSigmoidImageFilterIUC4IUC4(itkSigmoidImageFilterIUC4IUC4_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIUC4IUC4_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIUC4IUC4_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: unsigned char

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned char"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: unsigned char

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned char"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUC4IUC4

        Create a new object of the class itkSigmoidImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUC4IUC4 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUC4IUC4_swigregister(itkSigmoidImageFilterIUC4IUC4)

def itkSigmoidImageFilterIUS2IUS2_New():
    return itkSigmoidImageFilterIUS2IUS2.New()

class itkSigmoidImageFilterIUS2IUS2(itkSigmoidImageFilterIUS2IUS2_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIUS2IUS2_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIUS2IUS2_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: unsigned short

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: unsigned short

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUS2IUS2

        Create a new object of the class itkSigmoidImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUS2IUS2 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS2IUS2_swigregister(itkSigmoidImageFilterIUS2IUS2)

def itkSigmoidImageFilterIUS3IUS3_New():
    return itkSigmoidImageFilterIUS3IUS3.New()

class itkSigmoidImageFilterIUS3IUS3(itkSigmoidImageFilterIUS3IUS3_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIUS3IUS3_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIUS3IUS3_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: unsigned short

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: unsigned short

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUS3IUS3

        Create a new object of the class itkSigmoidImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUS3IUS3 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS3IUS3_swigregister(itkSigmoidImageFilterIUS3IUS3)

def itkSigmoidImageFilterIUS4IUS4_New():
    return itkSigmoidImageFilterIUS4IUS4.New()

class itkSigmoidImageFilterIUS4IUS4(itkSigmoidImageFilterIUS4IUS4_Superclass):
    r"""Proxy of C++ itkSigmoidImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSigmoidImageFilterIUS4IUS4_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSigmoidImageFilterIUS4IUS4_Pointer"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_Clone(self)

    def SetAlpha(self, alpha):
        r"""
        SetAlpha(self, alpha)

        Parameters
        ----------
        alpha: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_SetAlpha(self, alpha)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_GetAlpha(self)

    def SetBeta(self, beta):
        r"""
        SetBeta(self, beta)

        Parameters
        ----------
        beta: double

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_SetBeta(self, beta)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_GetBeta(self)

    def SetOutputMinimum(self, min):
        r"""
        SetOutputMinimum(self, min)

        Parameters
        ----------
        min: unsigned short

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_SetOutputMinimum(self, min)

    def GetOutputMinimum(self):
        r"""GetOutputMinimum(self) -> unsigned short"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_GetOutputMinimum(self)

    def SetOutputMaximum(self, max):
        r"""
        SetOutputMaximum(self, max)

        Parameters
        ----------
        max: unsigned short

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_SetOutputMaximum(self, max)

    def GetOutputMaximum(self):
        r"""GetOutputMaximum(self) -> unsigned short"""
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_GetOutputMaximum(self)
    InputConvertibleToDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_InputConvertibleToDoubleCheck
    
    OutputAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_OutputAdditiveOperatorsCheck
    
    DoubleConvertibleToOutputCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_DoubleConvertibleToOutputCheck
    
    OutputTimesDoubleCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_OutputTimesDoubleCheck
    
    OutputDoubleAdditiveOperatorsCheck = _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_OutputDoubleAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkSigmoidImageFilterPython.delete_itkSigmoidImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSigmoidImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSigmoidImageFilterIUS4IUS4

        Create a new object of the class itkSigmoidImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSigmoidImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSigmoidImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSigmoidImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSigmoidImageFilterIUS4IUS4 in _itkSigmoidImageFilterPython:
_itkSigmoidImageFilterPython.itkSigmoidImageFilterIUS4IUS4_swigregister(itkSigmoidImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def sigmoid_image_filter(*args: itkt.ImageLike,  alpha: float=..., beta: float=..., output_minimum: float=..., output_maximum: float=..., functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SigmoidImageFilter"""
    import itk

    kwarg_typehints = { 'alpha':alpha,'beta':beta,'output_minimum':output_minimum,'output_maximum':output_maximum,'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SigmoidImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def sigmoid_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.SigmoidImageFilter
    sigmoid_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    sigmoid_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def unary_functor_image_filter(*args: itkt.ImageLike,  functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for UnaryFunctorImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.UnaryFunctorImageFilter
    unary_functor_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    unary_functor_image_filter.__doc__ = filter_object.__doc__



