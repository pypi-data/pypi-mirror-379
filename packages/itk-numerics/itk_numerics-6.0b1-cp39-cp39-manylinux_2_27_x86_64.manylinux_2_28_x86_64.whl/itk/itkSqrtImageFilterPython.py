# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSqrtImageFilterPython
else:
    import _itkSqrtImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkUnaryGeneratorImageFilterPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython

def itkSqrtImageFilterID2ID2_New():
    return itkSqrtImageFilterID2ID2.New()

class itkSqrtImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""Proxy of C++ itkSqrtImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterID2ID2_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterID2ID2_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterID2ID2_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterID2ID2

        Create a new object of the class itkSqrtImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterID2ID2 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterID2ID2_swigregister(itkSqrtImageFilterID2ID2)

def itkSqrtImageFilterID3ID3_New():
    return itkSqrtImageFilterID3ID3.New()

class itkSqrtImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""Proxy of C++ itkSqrtImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterID3ID3_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterID3ID3_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterID3ID3_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterID3ID3

        Create a new object of the class itkSqrtImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterID3ID3 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterID3ID3_swigregister(itkSqrtImageFilterID3ID3)

def itkSqrtImageFilterID4ID4_New():
    return itkSqrtImageFilterID4ID4.New()

class itkSqrtImageFilterID4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID4ID4):
    r"""Proxy of C++ itkSqrtImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterID4ID4_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterID4ID4_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterID4ID4_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterID4ID4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterID4ID4

        Create a new object of the class itkSqrtImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterID4ID4 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterID4ID4_swigregister(itkSqrtImageFilterID4ID4)

def itkSqrtImageFilterIF2IF2_New():
    return itkSqrtImageFilterIF2IF2.New()

class itkSqrtImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""Proxy of C++ itkSqrtImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterIF2IF2_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterIF2IF2_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIF2IF2_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterIF2IF2

        Create a new object of the class itkSqrtImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterIF2IF2 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterIF2IF2_swigregister(itkSqrtImageFilterIF2IF2)

def itkSqrtImageFilterIF3IF3_New():
    return itkSqrtImageFilterIF3IF3.New()

class itkSqrtImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""Proxy of C++ itkSqrtImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterIF3IF3_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterIF3IF3_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIF3IF3_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterIF3IF3

        Create a new object of the class itkSqrtImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterIF3IF3 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterIF3IF3_swigregister(itkSqrtImageFilterIF3IF3)

def itkSqrtImageFilterIF4IF4_New():
    return itkSqrtImageFilterIF4IF4.New()

class itkSqrtImageFilterIF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF4IF4):
    r"""Proxy of C++ itkSqrtImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterIF4IF4_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterIF4IF4_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIF4IF4_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIF4IF4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterIF4IF4

        Create a new object of the class itkSqrtImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterIF4IF4 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterIF4IF4_swigregister(itkSqrtImageFilterIF4IF4)

def itkSqrtImageFilterISS2ISS2_New():
    return itkSqrtImageFilterISS2ISS2.New()

class itkSqrtImageFilterISS2ISS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    r"""Proxy of C++ itkSqrtImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterISS2ISS2_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterISS2ISS2_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterISS2ISS2_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterISS2ISS2

        Create a new object of the class itkSqrtImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterISS2ISS2 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterISS2ISS2_swigregister(itkSqrtImageFilterISS2ISS2)

def itkSqrtImageFilterISS3ISS3_New():
    return itkSqrtImageFilterISS3ISS3.New()

class itkSqrtImageFilterISS3ISS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    r"""Proxy of C++ itkSqrtImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterISS3ISS3_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterISS3ISS3_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterISS3ISS3_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterISS3ISS3

        Create a new object of the class itkSqrtImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterISS3ISS3 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterISS3ISS3_swigregister(itkSqrtImageFilterISS3ISS3)

def itkSqrtImageFilterISS4ISS4_New():
    return itkSqrtImageFilterISS4ISS4.New()

class itkSqrtImageFilterISS4ISS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS4ISS4):
    r"""Proxy of C++ itkSqrtImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterISS4ISS4_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterISS4ISS4_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterISS4ISS4_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterISS4ISS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterISS4ISS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterISS4ISS4

        Create a new object of the class itkSqrtImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterISS4ISS4 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterISS4ISS4_swigregister(itkSqrtImageFilterISS4ISS4)

def itkSqrtImageFilterIUC2IUC2_New():
    return itkSqrtImageFilterIUC2IUC2.New()

class itkSqrtImageFilterIUC2IUC2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    r"""Proxy of C++ itkSqrtImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterIUC2IUC2_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterIUC2IUC2_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUC2IUC2_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterIUC2IUC2

        Create a new object of the class itkSqrtImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterIUC2IUC2 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterIUC2IUC2_swigregister(itkSqrtImageFilterIUC2IUC2)

def itkSqrtImageFilterIUC3IUC3_New():
    return itkSqrtImageFilterIUC3IUC3.New()

class itkSqrtImageFilterIUC3IUC3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    r"""Proxy of C++ itkSqrtImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterIUC3IUC3_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterIUC3IUC3_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUC3IUC3_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterIUC3IUC3

        Create a new object of the class itkSqrtImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterIUC3IUC3 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterIUC3IUC3_swigregister(itkSqrtImageFilterIUC3IUC3)

def itkSqrtImageFilterIUC4IUC4_New():
    return itkSqrtImageFilterIUC4IUC4.New()

class itkSqrtImageFilterIUC4IUC4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC4IUC4):
    r"""Proxy of C++ itkSqrtImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterIUC4IUC4_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterIUC4IUC4_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUC4IUC4_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIUC4IUC4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIUC4IUC4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterIUC4IUC4

        Create a new object of the class itkSqrtImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterIUC4IUC4 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterIUC4IUC4_swigregister(itkSqrtImageFilterIUC4IUC4)

def itkSqrtImageFilterIUS2IUS2_New():
    return itkSqrtImageFilterIUS2IUS2.New()

class itkSqrtImageFilterIUS2IUS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    r"""Proxy of C++ itkSqrtImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterIUS2IUS2_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterIUS2IUS2_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUS2IUS2_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterIUS2IUS2

        Create a new object of the class itkSqrtImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterIUS2IUS2 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterIUS2IUS2_swigregister(itkSqrtImageFilterIUS2IUS2)

def itkSqrtImageFilterIUS3IUS3_New():
    return itkSqrtImageFilterIUS3IUS3.New()

class itkSqrtImageFilterIUS3IUS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    r"""Proxy of C++ itkSqrtImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterIUS3IUS3_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterIUS3IUS3_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUS3IUS3_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterIUS3IUS3

        Create a new object of the class itkSqrtImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterIUS3IUS3 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterIUS3IUS3_swigregister(itkSqrtImageFilterIUS3IUS3)

def itkSqrtImageFilterIUS4IUS4_New():
    return itkSqrtImageFilterIUS4IUS4.New()

class itkSqrtImageFilterIUS4IUS4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS4IUS4):
    r"""Proxy of C++ itkSqrtImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSqrtImageFilterIUS4IUS4_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSqrtImageFilterIUS4IUS4_Pointer"""
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUS4IUS4_Clone(self)
    InputConvertibleToDoubleCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIUS4IUS4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSqrtImageFilterPython.itkSqrtImageFilterIUS4IUS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSqrtImageFilterPython.delete_itkSqrtImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSqrtImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSqrtImageFilterPython.itkSqrtImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSqrtImageFilterIUS4IUS4

        Create a new object of the class itkSqrtImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSqrtImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSqrtImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSqrtImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSqrtImageFilterIUS4IUS4 in _itkSqrtImageFilterPython:
_itkSqrtImageFilterPython.itkSqrtImageFilterIUS4IUS4_swigregister(itkSqrtImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def sqrt_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SqrtImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SqrtImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def sqrt_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.SqrtImageFilter
    sqrt_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    sqrt_image_filter.__doc__ = filter_object.__doc__



