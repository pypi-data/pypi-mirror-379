# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAtanImageFilterPython
else:
    import _itkAtanImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkUnaryGeneratorImageFilterPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython

def itkAtanImageFilterID2ID2_New():
    return itkAtanImageFilterID2ID2.New()

class itkAtanImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""Proxy of C++ itkAtanImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAtanImageFilterID2ID2_Pointer"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAtanImageFilterID2ID2_Pointer"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_Clone(self)
    InputConvertibleToDoubleCheck = _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAtanImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterID2ID2

        Create a new object of the class itkAtanImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAtanImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAtanImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAtanImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAtanImageFilterID2ID2 in _itkAtanImageFilterPython:
_itkAtanImageFilterPython.itkAtanImageFilterID2ID2_swigregister(itkAtanImageFilterID2ID2)

def itkAtanImageFilterID3ID3_New():
    return itkAtanImageFilterID3ID3.New()

class itkAtanImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""Proxy of C++ itkAtanImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAtanImageFilterID3ID3_Pointer"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAtanImageFilterID3ID3_Pointer"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_Clone(self)
    InputConvertibleToDoubleCheck = _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAtanImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterID3ID3

        Create a new object of the class itkAtanImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAtanImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAtanImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAtanImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAtanImageFilterID3ID3 in _itkAtanImageFilterPython:
_itkAtanImageFilterPython.itkAtanImageFilterID3ID3_swigregister(itkAtanImageFilterID3ID3)

def itkAtanImageFilterID4ID4_New():
    return itkAtanImageFilterID4ID4.New()

class itkAtanImageFilterID4ID4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID4ID4):
    r"""Proxy of C++ itkAtanImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAtanImageFilterID4ID4_Pointer"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAtanImageFilterID4ID4_Pointer"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID4ID4_Clone(self)
    InputConvertibleToDoubleCheck = _itkAtanImageFilterPython.itkAtanImageFilterID4ID4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAtanImageFilterPython.itkAtanImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAtanImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAtanImageFilterPython.itkAtanImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterID4ID4

        Create a new object of the class itkAtanImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAtanImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAtanImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAtanImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAtanImageFilterID4ID4 in _itkAtanImageFilterPython:
_itkAtanImageFilterPython.itkAtanImageFilterID4ID4_swigregister(itkAtanImageFilterID4ID4)

def itkAtanImageFilterIF2IF2_New():
    return itkAtanImageFilterIF2IF2.New()

class itkAtanImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""Proxy of C++ itkAtanImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAtanImageFilterIF2IF2_Pointer"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAtanImageFilterIF2IF2_Pointer"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_Clone(self)
    InputConvertibleToDoubleCheck = _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAtanImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterIF2IF2

        Create a new object of the class itkAtanImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAtanImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAtanImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAtanImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAtanImageFilterIF2IF2 in _itkAtanImageFilterPython:
_itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_swigregister(itkAtanImageFilterIF2IF2)

def itkAtanImageFilterIF3IF3_New():
    return itkAtanImageFilterIF3IF3.New()

class itkAtanImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""Proxy of C++ itkAtanImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAtanImageFilterIF3IF3_Pointer"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAtanImageFilterIF3IF3_Pointer"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_Clone(self)
    InputConvertibleToDoubleCheck = _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAtanImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterIF3IF3

        Create a new object of the class itkAtanImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAtanImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAtanImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAtanImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAtanImageFilterIF3IF3 in _itkAtanImageFilterPython:
_itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_swigregister(itkAtanImageFilterIF3IF3)

def itkAtanImageFilterIF4IF4_New():
    return itkAtanImageFilterIF4IF4.New()

class itkAtanImageFilterIF4IF4(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF4IF4):
    r"""Proxy of C++ itkAtanImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAtanImageFilterIF4IF4_Pointer"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAtanImageFilterIF4IF4_Pointer"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF4IF4_Clone(self)
    InputConvertibleToDoubleCheck = _itkAtanImageFilterPython.itkAtanImageFilterIF4IF4_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAtanImageFilterPython.itkAtanImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAtanImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAtanImageFilterPython.itkAtanImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterIF4IF4

        Create a new object of the class itkAtanImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAtanImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAtanImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAtanImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAtanImageFilterIF4IF4 in _itkAtanImageFilterPython:
_itkAtanImageFilterPython.itkAtanImageFilterIF4IF4_swigregister(itkAtanImageFilterIF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def atan_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for AtanImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.AtanImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def atan_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageIntensity.AtanImageFilter
    atan_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    atan_image_filter.__doc__ = filter_object.__doc__



