# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKSmoothingPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFFTDiscreteGaussianImageFilterPython
else:
    import _itkFFTDiscreteGaussianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageBoundaryConditionPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkDiscreteGaussianImageFilterPython
import itk.itkGaussianOperatorPython
import itk.itkNeighborhoodOperatorPython
import itk.itkNeighborhoodPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
class itkFFTDiscreteGaussianImageFilterEnums(object):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    KernelSource_OPERATORS = _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterEnums_KernelSource_OPERATORS
    
    KernelSource_IMAGE_SOURCE = _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterEnums_KernelSource_IMAGE_SOURCE
    

    def __init__(self, *args):
        r"""
        __init__(self) -> itkFFTDiscreteGaussianImageFilterEnums
        __init__(self, arg0) -> itkFFTDiscreteGaussianImageFilterEnums

        Parameters
        ----------
        arg0: itkFFTDiscreteGaussianImageFilterEnums const &

        """
        _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterEnums_swiginit(self, _itkFFTDiscreteGaussianImageFilterPython.new_itkFFTDiscreteGaussianImageFilterEnums(*args))
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterEnums

# Register itkFFTDiscreteGaussianImageFilterEnums in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterEnums_swigregister(itkFFTDiscreteGaussianImageFilterEnums)

def itkFFTDiscreteGaussianImageFilterID2ID2_New():
    return itkFFTDiscreteGaussianImageFilterID2ID2.New()

class itkFFTDiscreteGaussianImageFilterID2ID2(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterID2ID2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterID2ID2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID2ID2_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID2ID2_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID2ID2_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageD2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID2ID2_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterID2ID2

        Create a new object of the class itkFFTDiscreteGaussianImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterID2ID2 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID2ID2_swigregister(itkFFTDiscreteGaussianImageFilterID2ID2)

def itkFFTDiscreteGaussianImageFilterID3ID3_New():
    return itkFFTDiscreteGaussianImageFilterID3ID3.New()

class itkFFTDiscreteGaussianImageFilterID3ID3(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterID3ID3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterID3ID3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID3ID3_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID3ID3_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID3ID3_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageD3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID3ID3_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterID3ID3

        Create a new object of the class itkFFTDiscreteGaussianImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterID3ID3 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID3ID3_swigregister(itkFFTDiscreteGaussianImageFilterID3ID3)

def itkFFTDiscreteGaussianImageFilterID4ID4_New():
    return itkFFTDiscreteGaussianImageFilterID4ID4.New()

class itkFFTDiscreteGaussianImageFilterID4ID4(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID4ID4):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterID4ID4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterID4ID4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID4ID4_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID4ID4_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID4ID4_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageD4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID4ID4_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterID4ID4

        Create a new object of the class itkFFTDiscreteGaussianImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterID4ID4 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterID4ID4_swigregister(itkFFTDiscreteGaussianImageFilterID4ID4)

def itkFFTDiscreteGaussianImageFilterIF2IF2_New():
    return itkFFTDiscreteGaussianImageFilterIF2IF2.New()

class itkFFTDiscreteGaussianImageFilterIF2IF2(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterIF2IF2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterIF2IF2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF2IF2_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF2IF2_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF2IF2_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageF2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF2IF2_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterIF2IF2

        Create a new object of the class itkFFTDiscreteGaussianImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterIF2IF2 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF2IF2_swigregister(itkFFTDiscreteGaussianImageFilterIF2IF2)

def itkFFTDiscreteGaussianImageFilterIF3IF3_New():
    return itkFFTDiscreteGaussianImageFilterIF3IF3.New()

class itkFFTDiscreteGaussianImageFilterIF3IF3(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterIF3IF3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterIF3IF3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF3IF3_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF3IF3_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF3IF3_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageF3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF3IF3_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterIF3IF3

        Create a new object of the class itkFFTDiscreteGaussianImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterIF3IF3 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF3IF3_swigregister(itkFFTDiscreteGaussianImageFilterIF3IF3)

def itkFFTDiscreteGaussianImageFilterIF4IF4_New():
    return itkFFTDiscreteGaussianImageFilterIF4IF4.New()

class itkFFTDiscreteGaussianImageFilterIF4IF4(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF4IF4):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterIF4IF4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterIF4IF4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF4IF4_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF4IF4_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF4IF4_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageF4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF4IF4_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterIF4IF4

        Create a new object of the class itkFFTDiscreteGaussianImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterIF4IF4 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIF4IF4_swigregister(itkFFTDiscreteGaussianImageFilterIF4IF4)

def itkFFTDiscreteGaussianImageFilterISS2ISS2_New():
    return itkFFTDiscreteGaussianImageFilterISS2ISS2.New()

class itkFFTDiscreteGaussianImageFilterISS2ISS2(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterISS2ISS2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterISS2ISS2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS2ISS2_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS2ISS2_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS2ISS2_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageSS2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS2ISS2_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterISS2ISS2

        Create a new object of the class itkFFTDiscreteGaussianImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterISS2ISS2 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS2ISS2_swigregister(itkFFTDiscreteGaussianImageFilterISS2ISS2)

def itkFFTDiscreteGaussianImageFilterISS3ISS3_New():
    return itkFFTDiscreteGaussianImageFilterISS3ISS3.New()

class itkFFTDiscreteGaussianImageFilterISS3ISS3(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterISS3ISS3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterISS3ISS3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS3ISS3_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS3ISS3_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS3ISS3_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageSS3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS3ISS3_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterISS3ISS3

        Create a new object of the class itkFFTDiscreteGaussianImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterISS3ISS3 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS3ISS3_swigregister(itkFFTDiscreteGaussianImageFilterISS3ISS3)

def itkFFTDiscreteGaussianImageFilterISS4ISS4_New():
    return itkFFTDiscreteGaussianImageFilterISS4ISS4.New()

class itkFFTDiscreteGaussianImageFilterISS4ISS4(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS4ISS4):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterISS4ISS4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterISS4ISS4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS4ISS4_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS4ISS4_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS4ISS4_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageSS4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS4ISS4_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterISS4ISS4

        Create a new object of the class itkFFTDiscreteGaussianImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterISS4ISS4 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterISS4ISS4_swigregister(itkFFTDiscreteGaussianImageFilterISS4ISS4)

def itkFFTDiscreteGaussianImageFilterIUC2IUC2_New():
    return itkFFTDiscreteGaussianImageFilterIUC2IUC2.New()

class itkFFTDiscreteGaussianImageFilterIUC2IUC2(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterIUC2IUC2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterIUC2IUC2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC2IUC2_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC2IUC2_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC2IUC2_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageUC2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC2IUC2_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterIUC2IUC2

        Create a new object of the class itkFFTDiscreteGaussianImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterIUC2IUC2 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC2IUC2_swigregister(itkFFTDiscreteGaussianImageFilterIUC2IUC2)

def itkFFTDiscreteGaussianImageFilterIUC3IUC3_New():
    return itkFFTDiscreteGaussianImageFilterIUC3IUC3.New()

class itkFFTDiscreteGaussianImageFilterIUC3IUC3(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterIUC3IUC3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterIUC3IUC3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC3IUC3_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC3IUC3_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC3IUC3_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageUC3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC3IUC3_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterIUC3IUC3

        Create a new object of the class itkFFTDiscreteGaussianImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterIUC3IUC3 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC3IUC3_swigregister(itkFFTDiscreteGaussianImageFilterIUC3IUC3)

def itkFFTDiscreteGaussianImageFilterIUC4IUC4_New():
    return itkFFTDiscreteGaussianImageFilterIUC4IUC4.New()

class itkFFTDiscreteGaussianImageFilterIUC4IUC4(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC4IUC4):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterIUC4IUC4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterIUC4IUC4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC4IUC4_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC4IUC4_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC4IUC4_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageUC4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC4IUC4_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterIUC4IUC4

        Create a new object of the class itkFFTDiscreteGaussianImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterIUC4IUC4 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUC4IUC4_swigregister(itkFFTDiscreteGaussianImageFilterIUC4IUC4)

def itkFFTDiscreteGaussianImageFilterIUS2IUS2_New():
    return itkFFTDiscreteGaussianImageFilterIUS2IUS2.New()

class itkFFTDiscreteGaussianImageFilterIUS2IUS2(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterIUS2IUS2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterIUS2IUS2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS2IUS2_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS2IUS2_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS2IUS2_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageUS2_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS2IUS2_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterIUS2IUS2

        Create a new object of the class itkFFTDiscreteGaussianImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterIUS2IUS2 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS2IUS2_swigregister(itkFFTDiscreteGaussianImageFilterIUS2IUS2)

def itkFFTDiscreteGaussianImageFilterIUS3IUS3_New():
    return itkFFTDiscreteGaussianImageFilterIUS3IUS3.New()

class itkFFTDiscreteGaussianImageFilterIUS3IUS3(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterIUS3IUS3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterIUS3IUS3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS3IUS3_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS3IUS3_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS3IUS3_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageUS3_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS3IUS3_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterIUS3IUS3

        Create a new object of the class itkFFTDiscreteGaussianImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterIUS3IUS3 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS3IUS3_swigregister(itkFFTDiscreteGaussianImageFilterIUS3IUS3)

def itkFFTDiscreteGaussianImageFilterIUS4IUS4_New():
    return itkFFTDiscreteGaussianImageFilterIUS4IUS4.New()

class itkFFTDiscreteGaussianImageFilterIUS4IUS4(itk.itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS4IUS4):
    r"""Proxy of C++ itkFFTDiscreteGaussianImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFFTDiscreteGaussianImageFilterIUS4IUS4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFFTDiscreteGaussianImageFilterIUS4IUS4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS4IUS4_Clone(self)

    def SetKernelSource(self, _arg):
        r"""
        SetKernelSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkFFTDiscreteGaussianImageFilterEnums::KernelSource

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS4IUS4_SetKernelSource(self, _arg)

    def GetKernelSource(self):
        r"""GetKernelSource(self) -> itkFFTDiscreteGaussianImageFilterEnums::KernelSource"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS4IUS4_GetKernelSource(self)

    def GetKernelImage(self):
        r"""GetKernelImage(self) -> itkImageUS4_Pointer"""
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS4IUS4_GetKernelImage(self)
    __swig_destroy__ = _itkFFTDiscreteGaussianImageFilterPython.delete_itkFFTDiscreteGaussianImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFFTDiscreteGaussianImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFFTDiscreteGaussianImageFilterIUS4IUS4

        Create a new object of the class itkFFTDiscreteGaussianImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTDiscreteGaussianImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTDiscreteGaussianImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTDiscreteGaussianImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTDiscreteGaussianImageFilterIUS4IUS4 in _itkFFTDiscreteGaussianImageFilterPython:
_itkFFTDiscreteGaussianImageFilterPython.itkFFTDiscreteGaussianImageFilterIUS4IUS4_swigregister(itkFFTDiscreteGaussianImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def fft_discrete_gaussian_image_filter(*args: itkt.ImageLike,  input_boundary_condition: itkt.ImageBoundaryCondition=..., kernel_source=..., variance: Union[float, Sequence[float]]=..., maximum_error: Union[float, Sequence[float]]=..., maximum_kernel_width: int=..., filter_dimensionality: int=..., real_boundary_condition: itkt.ImageBoundaryCondition=..., sigma: Union[float, Sequence[float]]=..., sigma_array: Sequence[float]=..., use_image_spacing: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FFTDiscreteGaussianImageFilter"""
    import itk

    kwarg_typehints = { 'input_boundary_condition':input_boundary_condition,'kernel_source':kernel_source,'variance':variance,'maximum_error':maximum_error,'maximum_kernel_width':maximum_kernel_width,'filter_dimensionality':filter_dimensionality,'real_boundary_condition':real_boundary_condition,'sigma':sigma,'sigma_array':sigma_array,'use_image_spacing':use_image_spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.FFTDiscreteGaussianImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def fft_discrete_gaussian_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKSmoothing.FFTDiscreteGaussianImageFilter
    fft_discrete_gaussian_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    fft_discrete_gaussian_image_filter.__doc__ = filter_object.__doc__



