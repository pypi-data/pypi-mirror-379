# Copyright (C) 2025 AIDC-AI
# This project is licensed under the MIT License (SPDX-License-identifier: MIT).

import json
import keyword
import re
import os
from pydantic import Field

from pixelle.logger import logger
from pixelle.mcp_core import mcp
from pixelle.manager.workflow_manager import workflow_manager, CUSTOM_WORKFLOW_DIR
from pixelle.utils.file_util import download_files
from pixelle.utils.file_uploader import upload


@mcp.tool(name="save_workflow_tool")
async def save_workflow_tool(
    workflow_url: str = Field(description="The workflow to save, must be a URL"),
    uploaded_filename: str = Field(description="Use the name of the uploaded file or a name specified by the user. Must be in English and without a file extension."),
):
    """
    Add or update a workflow in MCP tools.

    This tool should be invoked whenever the user wants to:
    - add a new workflow / tool
    - save a workflow / tool
    - update or overwrite an existing workflow / tool
    - store or register a workflow
    - keep or preserve a workflow for later use

    Common phrasings include:
    "add this tool", "add this workflow", "save this workflow",
    "update this tool", "overwrite the workflow", "store this workflow".
    """
    def error(msg: str):
        return json.dumps({ "success": False, "error": msg })
    
    try:
        # Valid format: starts with a letter or underscore, followed by letters, digits, or underscores
        pattern = r'^[A-Za-z_][A-Za-z0-9_]*$'
        
        if not re.match(pattern, uploaded_filename):
            return error(
                "The uploaded filename format is invalid: only letters, digits, and underscores are allowed, and it must start with a letter or underscore."
            )
        
        if keyword.iskeyword(uploaded_filename):
            return error(
                f"The uploaded filename cannot be a Python keyword: '{uploaded_filename}'."
            )

        async with download_files(workflow_url) as temp_workflow_path:
            return workflow_manager.load_workflow(temp_workflow_path, tool_name=uploaded_filename)
            
    except Exception as e:
        logger.error(f"Failed to save workflow: {e}")
        return error(f"Failed to save workflow: {str(e)}")
        
@mcp.tool(name="reload_workflows_tool")
async def reload_workflows_tool():
    """
    Reload all MCP tools that were generated by workflows.
    """
    return workflow_manager.reload_all_workflows()
        
@mcp.tool(name="list_workflows_tool")
async def list_workflows_tool():
    """
    List all MCP tools that were generated by workflows.
    
    Call this tool when the user wants to list all MCP tools, such as:
    - Query all tools
    - List all MCP tools
    - How many tools are there
    """
    workflow_names = list(workflow_manager.loaded_workflows.keys())
    workflow_names.sort()
    return workflow_names

@mcp.tool(name="get_workflow_tool_detail")
async def get_workflow_tool_detail(
    workflow_name: str = Field(description="The name of the workflow to get details for"),
):
    """
    Get detailed information about a specific workflow tool, including the workflow file URL.
    
    This tool will:
    - Return the workflow metadata and configuration
    - Upload the workflow file and return its URL
    - Provide comprehensive information about the workflow tool
    """
    def error(msg: str):
        return json.dumps({"success": False, "error": msg})
    
    try:
        # Check if workflow exists
        if workflow_name not in workflow_manager.loaded_workflows:
            return error(f"Workflow '{workflow_name}' not found or not loaded")
        
        # Get workflow info
        workflow_info = workflow_manager.loaded_workflows[workflow_name]
        
        # Get workflow file path
        workflow_file_path = os.path.join(CUSTOM_WORKFLOW_DIR, f"{workflow_name}.json")
        
        # Check if workflow file exists
        if not os.path.exists(workflow_file_path):
            return error(f"Workflow file not found: {workflow_file_path}")
        
        # Upload workflow file and get URL
        try:
            workflow_file_url = upload(workflow_file_path, f"{workflow_name}.json")
        except Exception as e:
            logger.error(f"Failed to upload workflow file: {e}")
            return error(f"Failed to upload workflow file: {str(e)}")
        
        # Prepare detailed response
        result = {
            "success": True,
            "workflow_name": workflow_name,
            "workflow_file_url": workflow_file_url,
            "metadata": workflow_info["metadata"],
            "loaded_at": workflow_info["loaded_at"].strftime("%Y-%m-%d %H:%M:%S") if hasattr(workflow_info["loaded_at"], 'strftime') else str(workflow_info["loaded_at"]),
        }
        
        logger.info(f"Successfully retrieved workflow details for: {workflow_name}")
        return json.dumps(result, ensure_ascii=False, indent=2)
        
    except Exception as e:
        logger.error(f"Failed to get workflow details for {workflow_name}: {e}")
        return error(f"Failed to get workflow details: {str(e)}")

@mcp.tool(name="remove_workflow_tool")
async def remove_workflow_tool(
    workflow_name: str = Field(description="The name of the workflow to remove"),
):
    """
    Remove an MCP tool that was generated by a workflow.
    """
    return workflow_manager.unload_workflow(workflow_name)
