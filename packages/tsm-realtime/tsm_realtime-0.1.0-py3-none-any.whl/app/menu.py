from tkinter import Tk, Label, Entry, Button, Menu
from .player import Player
from .userinfo import get_user_info
from tkinter import Menu, Label, Entry, Button, Text, END, DISABLED, NORMAL
import random
import time

class MainMenu:
    def __init__(self, root):
        self.user_info = None
        
        self.root = root
        self.root.title("Main Menu")
        self.root.geometry('700x400')  # Add some height for the text box
        self.player_window = None  # Track player window

        # Menu bar
        self.menu = Menu(self.root)
        self.file_menu = Menu(self.menu, tearoff=0)
        self.menu.add_cascade(label='File', menu=self.file_menu)
        self.root.config(menu=self.menu)

        # UI Elements
        self.lbl = Label(self.root, text="User ID:")
        self.lbl.grid(column=0, row=0, padx=10, pady=10)

        # Instruction Text box (read-only)
        self.instructions = Text(self.root, height=40, width=80, wrap='word')
        self.instructions.grid(column=0, row=1, columnspan=3, padx=10, pady=10)
        self.instructions.config(state="normal") 

        # --- This is the robust way to create a bold style ---
        # 1. Get the default font from the Text widget
        # You might need to import tkinter.font as tkfont at the top of your file
        import tkinter.font as tkfont
        default_font = tkfont.nametofont(self.instructions.cget("font"))
        
        # 2. Create a new font object for the bold style
        bold_font = tkfont.Font(family=default_font.actual("family"),
                               size=default_font.actual("size"),
                               weight="bold")
        
        # 3. Configure a "bold" tag with this new font object
        self.instructions.tag_configure("bold", font=bold_font)
        # --- End of robust styling section ---

        # Clear existing text if necessary
        self.instructions.delete("1.0", "end")

        # Insert the instructional text in segments
        self.instructions.insert(
            "end",
            "Thank you for participating in our study! \n\n"
            "You have randomly been assigned a User ID, Please write this down on the provided sticky note in case your session closes unexpectedly\n\n"
            "In this study, you will compare audio algorithms that modify the tempo of a music recording.  An ideal algorithm would change the tempo of the music without affecting the audio quality or introducing any noticeable artifacts.\n\n"
            "You will be presented pairs of audio samples generated by different audio algorithms. Please rate which audio sample has the highest quality.\n\n"
            "1. Listen to both audio samples.\n"
            "2. Check the box to indicate which player has the best quality, or whether they sound the same\n"
            "3. Click 'Submit' to save your choice and move to the next pair.\n\n"
        )
        
        # Insert the new section, applying the "bold" tag where needed
        self.instructions.insert("end", "Important: Bonus for Careful Listening!\n\n", "bold")
        self.instructions.insert(
            "end",
            "Throughout the study, we have included a few control questions. We will be raffling off "
        )
        self.instructions.insert("end", "five $10 gift cards", "bold")
        self.instructions.insert(
            "end",
            " to the participants who correctly identify the most of these baseline examples. Good luck!\n\n"
        )

        # Insert the final part of the text
        self.instructions.insert(
            "end",
            "The session lasts 30 minutes. Close the app when you are done.\n\n"
            "Questions? Contact us via email or ask us in person!\n"
        )

        # Make the entire text widget read-only again
        self.instructions.config(state="disabled")
        
        self.txt = Entry(self.root, width=15)
        self.txt.insert(0,random.randint(1,1000000))
        self.txt.grid(column=1, row=0, padx=5)

        self.btn = Button(self.root, text="Enter", fg="black", command=self.login_clicked)
        self.btn.grid(column=2, row=0)

    def login_clicked(self):
        self.root.withdraw()  # Hide the main menu window
        # text = self.txt.get()
        # self.lbl.config(text=f"You wrote: {text}")
        self.open_music_control(self.txt.get())

    def open_music_control(self, user_id):
        if self.player_window is None or not self.player_window.window.winfo_exists():
            self.player_window = Player(self.root,  user_id = user_id, time_start = time.time(),on_close=self.on_player_close)

    def on_player_close(self,):
        self.txt.delete(0, END)  # Delete all existing text
        self.txt.insert(0, random.randint(1,1000000))  # Insert new text at the beginning
        self.root.deiconify()  # Show the main menu again when player is closed

