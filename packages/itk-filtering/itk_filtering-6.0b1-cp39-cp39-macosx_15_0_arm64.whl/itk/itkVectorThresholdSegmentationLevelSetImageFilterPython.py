# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVectorThresholdSegmentationLevelSetImageFilterPython
else:
    import _itkVectorThresholdSegmentationLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkSegmentationLevelSetImageFilterPython
import itk.itkSegmentationLevelSetFunctionPython
import itk.itkLevelSetFunctionPython
import itk.itkSizePython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSparseFieldLevelSetImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterBPython
import itk.itkVariableSizeMatrixPython
import itk.itkArrayPython

def itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_New():
    return itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.New()

class itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID2IVF22D):
    r"""Proxy of C++ itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_Clone(self)

    def SetMean(self, mean):
        r"""
        SetMean(self, mean)

        Parameters
        ----------
        mean: itkVectorD2 const &

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_SetMean(self, mean)

    def GetMean(self):
        r"""GetMean(self) -> itkVectorD2"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_GetMean(self)

    def SetCovariance(self, cov):
        r"""
        SetCovariance(self, cov)

        Parameters
        ----------
        cov: itkVariableSizeMatrixD const &

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_SetCovariance(self, cov)

    def GetCovariance(self):
        r"""GetCovariance(self) -> itkVariableSizeMatrixD"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_GetCovariance(self)

    def SetThreshold(self, thr):
        r"""
        SetThreshold(self, thr)

        Parameters
        ----------
        thr: double

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_SetThreshold(self, thr)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_GetThreshold(self)
    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D in _itkVectorThresholdSegmentationLevelSetImageFilterPython:
_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D)

def itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_New():
    return itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.New()

class itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID3IVF33D):
    r"""Proxy of C++ itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_Clone(self)

    def SetMean(self, mean):
        r"""
        SetMean(self, mean)

        Parameters
        ----------
        mean: itkVectorD3 const &

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_SetMean(self, mean)

    def GetMean(self):
        r"""GetMean(self) -> itkVectorD3"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_GetMean(self)

    def SetCovariance(self, cov):
        r"""
        SetCovariance(self, cov)

        Parameters
        ----------
        cov: itkVariableSizeMatrixD const &

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_SetCovariance(self, cov)

    def GetCovariance(self):
        r"""GetCovariance(self) -> itkVariableSizeMatrixD"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_GetCovariance(self)

    def SetThreshold(self, thr):
        r"""
        SetThreshold(self, thr)

        Parameters
        ----------
        thr: double

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_SetThreshold(self, thr)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_GetThreshold(self)
    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D in _itkVectorThresholdSegmentationLevelSetImageFilterPython:
_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D)

def itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D_New():
    return itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D.New()

class itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID4IVF44D):
    r"""Proxy of C++ itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D_Clone(self)

    def SetMean(self, mean):
        r"""
        SetMean(self, mean)

        Parameters
        ----------
        mean: itkVectorD4 const &

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D_SetMean(self, mean)

    def GetMean(self):
        r"""GetMean(self) -> itkVectorD4"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D_GetMean(self)

    def SetCovariance(self, cov):
        r"""
        SetCovariance(self, cov)

        Parameters
        ----------
        cov: itkVariableSizeMatrixD const &

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D_SetCovariance(self, cov)

    def GetCovariance(self):
        r"""GetCovariance(self) -> itkVariableSizeMatrixD"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D_GetCovariance(self)

    def SetThreshold(self, thr):
        r"""
        SetThreshold(self, thr)

        Parameters
        ----------
        thr: double

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D_SetThreshold(self, thr)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D_GetThreshold(self)
    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D in _itkVectorThresholdSegmentationLevelSetImageFilterPython:
_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterID4IVF44D)

def itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_New():
    return itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.New()

class itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF2IVF22F):
    r"""Proxy of C++ itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_Clone(self)

    def SetMean(self, mean):
        r"""
        SetMean(self, mean)

        Parameters
        ----------
        mean: itkVectorD2 const &

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_SetMean(self, mean)

    def GetMean(self):
        r"""GetMean(self) -> itkVectorD2"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_GetMean(self)

    def SetCovariance(self, cov):
        r"""
        SetCovariance(self, cov)

        Parameters
        ----------
        cov: itkVariableSizeMatrixD const &

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_SetCovariance(self, cov)

    def GetCovariance(self):
        r"""GetCovariance(self) -> itkVariableSizeMatrixD"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_GetCovariance(self)

    def SetThreshold(self, thr):
        r"""
        SetThreshold(self, thr)

        Parameters
        ----------
        thr: float

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_SetThreshold(self, thr)

    def GetThreshold(self):
        r"""GetThreshold(self) -> float"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_GetThreshold(self)
    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F in _itkVectorThresholdSegmentationLevelSetImageFilterPython:
_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F)

def itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_New():
    return itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.New()

class itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF3IVF33F):
    r"""Proxy of C++ itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_Clone(self)

    def SetMean(self, mean):
        r"""
        SetMean(self, mean)

        Parameters
        ----------
        mean: itkVectorD3 const &

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_SetMean(self, mean)

    def GetMean(self):
        r"""GetMean(self) -> itkVectorD3"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_GetMean(self)

    def SetCovariance(self, cov):
        r"""
        SetCovariance(self, cov)

        Parameters
        ----------
        cov: itkVariableSizeMatrixD const &

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_SetCovariance(self, cov)

    def GetCovariance(self):
        r"""GetCovariance(self) -> itkVariableSizeMatrixD"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_GetCovariance(self)

    def SetThreshold(self, thr):
        r"""
        SetThreshold(self, thr)

        Parameters
        ----------
        thr: float

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_SetThreshold(self, thr)

    def GetThreshold(self):
        r"""GetThreshold(self) -> float"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_GetThreshold(self)
    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F in _itkVectorThresholdSegmentationLevelSetImageFilterPython:
_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F)

def itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F_New():
    return itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F.New()

class itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF4IVF44F):
    r"""Proxy of C++ itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F_Clone(self)

    def SetMean(self, mean):
        r"""
        SetMean(self, mean)

        Parameters
        ----------
        mean: itkVectorD4 const &

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F_SetMean(self, mean)

    def GetMean(self):
        r"""GetMean(self) -> itkVectorD4"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F_GetMean(self)

    def SetCovariance(self, cov):
        r"""
        SetCovariance(self, cov)

        Parameters
        ----------
        cov: itkVariableSizeMatrixD const &

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F_SetCovariance(self, cov)

    def GetCovariance(self):
        r"""GetCovariance(self) -> itkVariableSizeMatrixD"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F_GetCovariance(self)

    def SetThreshold(self, thr):
        r"""
        SetThreshold(self, thr)

        Parameters
        ----------
        thr: float

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F_SetThreshold(self, thr)

    def GetThreshold(self):
        r"""GetThreshold(self) -> float"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F_GetThreshold(self)
    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F in _itkVectorThresholdSegmentationLevelSetImageFilterPython:
_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterIF4IVF44F)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def vector_threshold_segmentation_level_set_image_filter(*args: itkt.ImageLike,  mean: Sequence[float]=..., covariance=..., threshold: float=..., maximum_iterations: int=..., feature_image: itkt.Image=..., initial_image: itkt.Image=..., speed_image: itkt.Image=..., advection_image: itkt.Image=..., use_negative_features: bool=..., reverse_expansion_direction: bool=..., auto_generate_speed_advection: bool=..., feature_scaling: float=..., propagation_scaling: float=..., advection_scaling: float=..., curvature_scaling: float=..., use_minimal_curvature: bool=..., segmentation_function=..., maximum_curvature_time_step: float=..., maximum_propagation_time_step: float=..., number_of_layers: int=..., iso_surface_value: float=..., interpolate_surface_location: bool=..., difference_function=..., number_of_iterations: int=..., use_image_spacing: bool=..., maximum_rms_error: float=..., rms_change: float=..., manual_reinitialization: bool=..., is_initialized: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for VectorThresholdSegmentationLevelSetImageFilter"""
    import itk

    kwarg_typehints = { 'mean':mean,'covariance':covariance,'threshold':threshold,'maximum_iterations':maximum_iterations,'feature_image':feature_image,'initial_image':initial_image,'speed_image':speed_image,'advection_image':advection_image,'use_negative_features':use_negative_features,'reverse_expansion_direction':reverse_expansion_direction,'auto_generate_speed_advection':auto_generate_speed_advection,'feature_scaling':feature_scaling,'propagation_scaling':propagation_scaling,'advection_scaling':advection_scaling,'curvature_scaling':curvature_scaling,'use_minimal_curvature':use_minimal_curvature,'segmentation_function':segmentation_function,'maximum_curvature_time_step':maximum_curvature_time_step,'maximum_propagation_time_step':maximum_propagation_time_step,'number_of_layers':number_of_layers,'iso_surface_value':iso_surface_value,'interpolate_surface_location':interpolate_surface_location,'difference_function':difference_function,'number_of_iterations':number_of_iterations,'use_image_spacing':use_image_spacing,'maximum_rms_error':maximum_rms_error,'rms_change':rms_change,'manual_reinitialization':manual_reinitialization,'is_initialized':is_initialized }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.VectorThresholdSegmentationLevelSetImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def vector_threshold_segmentation_level_set_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLevelSets.VectorThresholdSegmentationLevelSetImageFilter
    vector_threshold_segmentation_level_set_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    vector_threshold_segmentation_level_set_image_filter.__doc__ = filter_object.__doc__



