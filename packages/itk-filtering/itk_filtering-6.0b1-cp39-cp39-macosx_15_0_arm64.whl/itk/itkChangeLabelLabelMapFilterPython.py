# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLabelMapPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkChangeLabelLabelMapFilterPython
else:
    import _itkChangeLabelLabelMapFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkInPlaceLabelMapFilterPython
import itk.ITKLabelMapBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkStatisticsLabelObjectPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkTransformBasePython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkShapeLabelObjectPython
import itk.itkLabelObjectPython
import itk.itkLabelObjectLinePython
import itk.itkLabelMapFilterPython

def itkChangeLabelLabelMapFilterLM2_New():
    return itkChangeLabelLabelMapFilterLM2.New()

class itkChangeLabelLabelMapFilterLM2(itk.itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM2):
    r"""Proxy of C++ itkChangeLabelLabelMapFilterLM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkChangeLabelLabelMapFilterLM2_Pointer"""
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkChangeLabelLabelMapFilterLM2_Pointer"""
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM2_Clone(self)

    def SetChangeMap(self, changeMap):
        r"""
        SetChangeMap(self, changeMap)

        Parameters
        ----------
        changeMap: std::map< unsigned long,unsigned long,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,unsigned long > > > const &

        """
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM2_SetChangeMap(self, changeMap)

    def GetChangeMap(self):
        r"""GetChangeMap(self) -> mapULUL"""
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM2_GetChangeMap(self)

    def SetChange(self, oldLabel, newLabel):
        r"""
        SetChange(self, oldLabel, newLabel)

        Parameters
        ----------
        oldLabel: unsigned long const &
        newLabel: unsigned long const &

        """
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM2_SetChange(self, oldLabel, newLabel)

    def ClearChangeMap(self):
        r"""ClearChangeMap(self)"""
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM2_ClearChangeMap(self)
    __swig_destroy__ = _itkChangeLabelLabelMapFilterPython.delete_itkChangeLabelLabelMapFilterLM2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkChangeLabelLabelMapFilterLM2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkChangeLabelLabelMapFilterLM2

        Create a new object of the class itkChangeLabelLabelMapFilterLM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelLabelMapFilterLM2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelLabelMapFilterLM2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelLabelMapFilterLM2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelLabelMapFilterLM2 in _itkChangeLabelLabelMapFilterPython:
_itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM2_swigregister(itkChangeLabelLabelMapFilterLM2)

def itkChangeLabelLabelMapFilterLM3_New():
    return itkChangeLabelLabelMapFilterLM3.New()

class itkChangeLabelLabelMapFilterLM3(itk.itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM3):
    r"""Proxy of C++ itkChangeLabelLabelMapFilterLM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkChangeLabelLabelMapFilterLM3_Pointer"""
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkChangeLabelLabelMapFilterLM3_Pointer"""
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM3_Clone(self)

    def SetChangeMap(self, changeMap):
        r"""
        SetChangeMap(self, changeMap)

        Parameters
        ----------
        changeMap: std::map< unsigned long,unsigned long,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,unsigned long > > > const &

        """
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM3_SetChangeMap(self, changeMap)

    def GetChangeMap(self):
        r"""GetChangeMap(self) -> mapULUL"""
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM3_GetChangeMap(self)

    def SetChange(self, oldLabel, newLabel):
        r"""
        SetChange(self, oldLabel, newLabel)

        Parameters
        ----------
        oldLabel: unsigned long const &
        newLabel: unsigned long const &

        """
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM3_SetChange(self, oldLabel, newLabel)

    def ClearChangeMap(self):
        r"""ClearChangeMap(self)"""
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM3_ClearChangeMap(self)
    __swig_destroy__ = _itkChangeLabelLabelMapFilterPython.delete_itkChangeLabelLabelMapFilterLM3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkChangeLabelLabelMapFilterLM3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkChangeLabelLabelMapFilterLM3

        Create a new object of the class itkChangeLabelLabelMapFilterLM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelLabelMapFilterLM3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelLabelMapFilterLM3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelLabelMapFilterLM3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelLabelMapFilterLM3 in _itkChangeLabelLabelMapFilterPython:
_itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM3_swigregister(itkChangeLabelLabelMapFilterLM3)

def itkChangeLabelLabelMapFilterLM4_New():
    return itkChangeLabelLabelMapFilterLM4.New()

class itkChangeLabelLabelMapFilterLM4(itk.itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM4):
    r"""Proxy of C++ itkChangeLabelLabelMapFilterLM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkChangeLabelLabelMapFilterLM4_Pointer"""
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkChangeLabelLabelMapFilterLM4_Pointer"""
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM4_Clone(self)

    def SetChangeMap(self, changeMap):
        r"""
        SetChangeMap(self, changeMap)

        Parameters
        ----------
        changeMap: std::map< unsigned long,unsigned long,std::less< unsigned long >,std::allocator< std::pair< unsigned long const,unsigned long > > > const &

        """
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM4_SetChangeMap(self, changeMap)

    def GetChangeMap(self):
        r"""GetChangeMap(self) -> mapULUL"""
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM4_GetChangeMap(self)

    def SetChange(self, oldLabel, newLabel):
        r"""
        SetChange(self, oldLabel, newLabel)

        Parameters
        ----------
        oldLabel: unsigned long const &
        newLabel: unsigned long const &

        """
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM4_SetChange(self, oldLabel, newLabel)

    def ClearChangeMap(self):
        r"""ClearChangeMap(self)"""
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM4_ClearChangeMap(self)
    __swig_destroy__ = _itkChangeLabelLabelMapFilterPython.delete_itkChangeLabelLabelMapFilterLM4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkChangeLabelLabelMapFilterLM4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkChangeLabelLabelMapFilterLM4

        Create a new object of the class itkChangeLabelLabelMapFilterLM4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkChangeLabelLabelMapFilterLM4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkChangeLabelLabelMapFilterLM4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkChangeLabelLabelMapFilterLM4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkChangeLabelLabelMapFilterLM4 in _itkChangeLabelLabelMapFilterPython:
_itkChangeLabelLabelMapFilterPython.itkChangeLabelLabelMapFilterLM4_swigregister(itkChangeLabelLabelMapFilterLM4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def change_label_label_map_filter(*args: itkt.ImageLike,  change_map=..., change: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ChangeLabelLabelMapFilter"""
    import itk

    kwarg_typehints = { 'change_map':change_map,'change':change }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ChangeLabelLabelMapFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def change_label_label_map_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLabelMap.ChangeLabelLabelMapFilter
    change_label_label_map_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    change_label_label_map_filter.__doc__ = filter_object.__doc__



