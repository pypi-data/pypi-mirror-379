# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLevelSetFunctionPython
else:
    import _itkLevelSetFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython

def itkLevelSetFunctionID2_New():
    return itkLevelSetFunctionID2.New()

class itkLevelSetFunctionID2(itk.itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2):
    r"""Proxy of C++ itkLevelSetFunctionID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetFunctionID2_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetFunctionID2_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_Clone(self)

    def AdvectionField(self, arg0, arg1, arg2=None):
        r"""
        AdvectionField(self, arg0, arg1, arg2=None) -> itkFixedArrayD2

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double > > const &
        arg1: itkVectorF2 const &
        arg2: itkLevelSetFunctionID2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_AdvectionField(self, arg0, arg1, arg2)

    def PropagationSpeed(self, arg0, arg1, arg2=None):
        r"""
        PropagationSpeed(self, arg0, arg1, arg2=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double > > const &
        arg1: itkVectorF2 const &
        arg2: itkLevelSetFunctionID2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_PropagationSpeed(self, arg0, arg1, arg2)

    def CurvatureSpeed(self, arg0, arg1, arg2=None):
        r"""
        CurvatureSpeed(self, arg0, arg1, arg2=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double > > const &
        arg1: itkVectorF2 const &
        arg2: itkLevelSetFunctionID2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_CurvatureSpeed(self, arg0, arg1, arg2)

    def LaplacianSmoothingSpeed(self, arg0, arg1, arg2=None):
        r"""
        LaplacianSmoothingSpeed(self, arg0, arg1, arg2=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double > > const &
        arg1: itkVectorF2 const &
        arg2: itkLevelSetFunctionID2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_LaplacianSmoothingSpeed(self, arg0, arg1, arg2)

    def SetAdvectionWeight(self, a):
        r"""
        SetAdvectionWeight(self, a)

        Parameters
        ----------
        a: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetAdvectionWeight(self, a)

    def GetAdvectionWeight(self):
        r"""GetAdvectionWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetAdvectionWeight(self)

    def SetPropagationWeight(self, p):
        r"""
        SetPropagationWeight(self, p)

        Parameters
        ----------
        p: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetPropagationWeight(self, p)

    def GetPropagationWeight(self):
        r"""GetPropagationWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetPropagationWeight(self)

    def SetCurvatureWeight(self, c):
        r"""
        SetCurvatureWeight(self, c)

        Parameters
        ----------
        c: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetCurvatureWeight(self, c)

    def GetCurvatureWeight(self):
        r"""GetCurvatureWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetCurvatureWeight(self)

    def SetLaplacianSmoothingWeight(self, c):
        r"""
        SetLaplacianSmoothingWeight(self, c)

        Parameters
        ----------
        c: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetLaplacianSmoothingWeight(self, c)

    def GetLaplacianSmoothingWeight(self):
        r"""GetLaplacianSmoothingWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetLaplacianSmoothingWeight(self)

    def SetEpsilonMagnitude(self, e):
        r"""
        SetEpsilonMagnitude(self, e)

        Parameters
        ----------
        e: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetEpsilonMagnitude(self, e)

    def GetEpsilonMagnitude(self):
        r"""GetEpsilonMagnitude(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetEpsilonMagnitude(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, it, globalData, arg2=FloatOffsetType(0.)) -> double

        Parameters
        ----------
        it: itk::ConstNeighborhoodIterator< itk::Image< double > > const &
        globalData: void *
        arg2: itkVectorF2 const &

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeUpdate(self, *args)

    def Initialize(self, r):
        r"""
        Initialize(self, r)

        Parameters
        ----------
        r: itkSize2 const &

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_Initialize(self, r)

    def ComputeCurvatureTerm(self, arg0, arg1, gd=None):
        r"""
        ComputeCurvatureTerm(self, arg0, arg1, gd=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double > > const &
        arg1: itkVectorF2 const &
        gd: itkLevelSetFunctionID2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeCurvatureTerm(self, arg0, arg1, gd)

    def ComputeMeanCurvature(self, arg0, arg1, gd=None):
        r"""
        ComputeMeanCurvature(self, arg0, arg1, gd=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double > > const &
        arg1: itkVectorF2 const &
        gd: itkLevelSetFunctionID2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeMeanCurvature(self, arg0, arg1, gd)

    def ComputeMinimalCurvature(self, arg0, arg1, gd=None):
        r"""
        ComputeMinimalCurvature(self, arg0, arg1, gd=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double > > const &
        arg1: itkVectorF2 const &
        gd: itkLevelSetFunctionID2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeMinimalCurvature(self, arg0, arg1, gd)

    def Compute3DMinimalCurvature(self, arg0, arg1, gd=None):
        r"""
        Compute3DMinimalCurvature(self, arg0, arg1, gd=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double > > const &
        arg1: itkVectorF2 const &
        gd: itkLevelSetFunctionID2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_Compute3DMinimalCurvature(self, arg0, arg1, gd)

    def SetUseMinimalCurvature(self, b):
        r"""
        SetUseMinimalCurvature(self, b)

        Parameters
        ----------
        b: bool

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetUseMinimalCurvature(self, b)

    def GetUseMinimalCurvature(self):
        r"""GetUseMinimalCurvature(self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetUseMinimalCurvature(self)

    def UseMinimalCurvatureOn(self):
        r"""UseMinimalCurvatureOn(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_UseMinimalCurvatureOn(self)

    def UseMinimalCurvatureOff(self):
        r"""UseMinimalCurvatureOff(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_UseMinimalCurvatureOff(self)

    @staticmethod
    def SetMaximumCurvatureTimeStep(n):
        r"""
        SetMaximumCurvatureTimeStep(n)

        Parameters
        ----------
        n: double

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumCurvatureTimeStep(n)

    @staticmethod
    def GetMaximumCurvatureTimeStep():
        r"""GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumCurvatureTimeStep()

    @staticmethod
    def SetMaximumPropagationTimeStep(n):
        r"""
        SetMaximumPropagationTimeStep(n)

        Parameters
        ----------
        n: double

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumPropagationTimeStep(n)

    @staticmethod
    def GetMaximumPropagationTimeStep():
        r"""GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumPropagationTimeStep()
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetFunctionID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionID2

        Create a new object of the class itkLevelSetFunctionID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionID2 in _itkLevelSetFunctionPython:
_itkLevelSetFunctionPython.itkLevelSetFunctionID2_swigregister(itkLevelSetFunctionID2)

def itkLevelSetFunctionID3_New():
    return itkLevelSetFunctionID3.New()

class itkLevelSetFunctionID3(itk.itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3):
    r"""Proxy of C++ itkLevelSetFunctionID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetFunctionID3_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetFunctionID3_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_Clone(self)

    def AdvectionField(self, arg0, arg1, arg2=None):
        r"""
        AdvectionField(self, arg0, arg1, arg2=None) -> itkFixedArrayD3

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,3 > > const &
        arg1: itkVectorF3 const &
        arg2: itkLevelSetFunctionID3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_AdvectionField(self, arg0, arg1, arg2)

    def PropagationSpeed(self, arg0, arg1, arg2=None):
        r"""
        PropagationSpeed(self, arg0, arg1, arg2=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,3 > > const &
        arg1: itkVectorF3 const &
        arg2: itkLevelSetFunctionID3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_PropagationSpeed(self, arg0, arg1, arg2)

    def CurvatureSpeed(self, arg0, arg1, arg2=None):
        r"""
        CurvatureSpeed(self, arg0, arg1, arg2=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,3 > > const &
        arg1: itkVectorF3 const &
        arg2: itkLevelSetFunctionID3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_CurvatureSpeed(self, arg0, arg1, arg2)

    def LaplacianSmoothingSpeed(self, arg0, arg1, arg2=None):
        r"""
        LaplacianSmoothingSpeed(self, arg0, arg1, arg2=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,3 > > const &
        arg1: itkVectorF3 const &
        arg2: itkLevelSetFunctionID3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_LaplacianSmoothingSpeed(self, arg0, arg1, arg2)

    def SetAdvectionWeight(self, a):
        r"""
        SetAdvectionWeight(self, a)

        Parameters
        ----------
        a: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetAdvectionWeight(self, a)

    def GetAdvectionWeight(self):
        r"""GetAdvectionWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetAdvectionWeight(self)

    def SetPropagationWeight(self, p):
        r"""
        SetPropagationWeight(self, p)

        Parameters
        ----------
        p: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetPropagationWeight(self, p)

    def GetPropagationWeight(self):
        r"""GetPropagationWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetPropagationWeight(self)

    def SetCurvatureWeight(self, c):
        r"""
        SetCurvatureWeight(self, c)

        Parameters
        ----------
        c: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetCurvatureWeight(self, c)

    def GetCurvatureWeight(self):
        r"""GetCurvatureWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetCurvatureWeight(self)

    def SetLaplacianSmoothingWeight(self, c):
        r"""
        SetLaplacianSmoothingWeight(self, c)

        Parameters
        ----------
        c: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetLaplacianSmoothingWeight(self, c)

    def GetLaplacianSmoothingWeight(self):
        r"""GetLaplacianSmoothingWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetLaplacianSmoothingWeight(self)

    def SetEpsilonMagnitude(self, e):
        r"""
        SetEpsilonMagnitude(self, e)

        Parameters
        ----------
        e: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetEpsilonMagnitude(self, e)

    def GetEpsilonMagnitude(self):
        r"""GetEpsilonMagnitude(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetEpsilonMagnitude(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, it, globalData, arg2=FloatOffsetType(0.)) -> double

        Parameters
        ----------
        it: itk::ConstNeighborhoodIterator< itk::Image< double,3 > > const &
        globalData: void *
        arg2: itkVectorF3 const &

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeUpdate(self, *args)

    def Initialize(self, r):
        r"""
        Initialize(self, r)

        Parameters
        ----------
        r: itkSize3 const &

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_Initialize(self, r)

    def ComputeCurvatureTerm(self, arg0, arg1, gd=None):
        r"""
        ComputeCurvatureTerm(self, arg0, arg1, gd=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,3 > > const &
        arg1: itkVectorF3 const &
        gd: itkLevelSetFunctionID3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeCurvatureTerm(self, arg0, arg1, gd)

    def ComputeMeanCurvature(self, arg0, arg1, gd=None):
        r"""
        ComputeMeanCurvature(self, arg0, arg1, gd=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,3 > > const &
        arg1: itkVectorF3 const &
        gd: itkLevelSetFunctionID3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeMeanCurvature(self, arg0, arg1, gd)

    def ComputeMinimalCurvature(self, arg0, arg1, gd=None):
        r"""
        ComputeMinimalCurvature(self, arg0, arg1, gd=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,3 > > const &
        arg1: itkVectorF3 const &
        gd: itkLevelSetFunctionID3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeMinimalCurvature(self, arg0, arg1, gd)

    def Compute3DMinimalCurvature(self, arg0, arg1, gd=None):
        r"""
        Compute3DMinimalCurvature(self, arg0, arg1, gd=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,3 > > const &
        arg1: itkVectorF3 const &
        gd: itkLevelSetFunctionID3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_Compute3DMinimalCurvature(self, arg0, arg1, gd)

    def SetUseMinimalCurvature(self, b):
        r"""
        SetUseMinimalCurvature(self, b)

        Parameters
        ----------
        b: bool

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetUseMinimalCurvature(self, b)

    def GetUseMinimalCurvature(self):
        r"""GetUseMinimalCurvature(self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetUseMinimalCurvature(self)

    def UseMinimalCurvatureOn(self):
        r"""UseMinimalCurvatureOn(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_UseMinimalCurvatureOn(self)

    def UseMinimalCurvatureOff(self):
        r"""UseMinimalCurvatureOff(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_UseMinimalCurvatureOff(self)

    @staticmethod
    def SetMaximumCurvatureTimeStep(n):
        r"""
        SetMaximumCurvatureTimeStep(n)

        Parameters
        ----------
        n: double

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumCurvatureTimeStep(n)

    @staticmethod
    def GetMaximumCurvatureTimeStep():
        r"""GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumCurvatureTimeStep()

    @staticmethod
    def SetMaximumPropagationTimeStep(n):
        r"""
        SetMaximumPropagationTimeStep(n)

        Parameters
        ----------
        n: double

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumPropagationTimeStep(n)

    @staticmethod
    def GetMaximumPropagationTimeStep():
        r"""GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumPropagationTimeStep()
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetFunctionID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionID3

        Create a new object of the class itkLevelSetFunctionID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionID3 in _itkLevelSetFunctionPython:
_itkLevelSetFunctionPython.itkLevelSetFunctionID3_swigregister(itkLevelSetFunctionID3)

def itkLevelSetFunctionID4_New():
    return itkLevelSetFunctionID4.New()

class itkLevelSetFunctionID4(itk.itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID4):
    r"""Proxy of C++ itkLevelSetFunctionID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetFunctionID4_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetFunctionID4_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_Clone(self)

    def AdvectionField(self, arg0, arg1, arg2=None):
        r"""
        AdvectionField(self, arg0, arg1, arg2=None) -> itkFixedArrayD4

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,4 > > const &
        arg1: itkVectorF4 const &
        arg2: itkLevelSetFunctionID4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_AdvectionField(self, arg0, arg1, arg2)

    def PropagationSpeed(self, arg0, arg1, arg2=None):
        r"""
        PropagationSpeed(self, arg0, arg1, arg2=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,4 > > const &
        arg1: itkVectorF4 const &
        arg2: itkLevelSetFunctionID4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_PropagationSpeed(self, arg0, arg1, arg2)

    def CurvatureSpeed(self, arg0, arg1, arg2=None):
        r"""
        CurvatureSpeed(self, arg0, arg1, arg2=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,4 > > const &
        arg1: itkVectorF4 const &
        arg2: itkLevelSetFunctionID4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_CurvatureSpeed(self, arg0, arg1, arg2)

    def LaplacianSmoothingSpeed(self, arg0, arg1, arg2=None):
        r"""
        LaplacianSmoothingSpeed(self, arg0, arg1, arg2=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,4 > > const &
        arg1: itkVectorF4 const &
        arg2: itkLevelSetFunctionID4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_LaplacianSmoothingSpeed(self, arg0, arg1, arg2)

    def SetAdvectionWeight(self, a):
        r"""
        SetAdvectionWeight(self, a)

        Parameters
        ----------
        a: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_SetAdvectionWeight(self, a)

    def GetAdvectionWeight(self):
        r"""GetAdvectionWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_GetAdvectionWeight(self)

    def SetPropagationWeight(self, p):
        r"""
        SetPropagationWeight(self, p)

        Parameters
        ----------
        p: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_SetPropagationWeight(self, p)

    def GetPropagationWeight(self):
        r"""GetPropagationWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_GetPropagationWeight(self)

    def SetCurvatureWeight(self, c):
        r"""
        SetCurvatureWeight(self, c)

        Parameters
        ----------
        c: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_SetCurvatureWeight(self, c)

    def GetCurvatureWeight(self):
        r"""GetCurvatureWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_GetCurvatureWeight(self)

    def SetLaplacianSmoothingWeight(self, c):
        r"""
        SetLaplacianSmoothingWeight(self, c)

        Parameters
        ----------
        c: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_SetLaplacianSmoothingWeight(self, c)

    def GetLaplacianSmoothingWeight(self):
        r"""GetLaplacianSmoothingWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_GetLaplacianSmoothingWeight(self)

    def SetEpsilonMagnitude(self, e):
        r"""
        SetEpsilonMagnitude(self, e)

        Parameters
        ----------
        e: double const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_SetEpsilonMagnitude(self, e)

    def GetEpsilonMagnitude(self):
        r"""GetEpsilonMagnitude(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_GetEpsilonMagnitude(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, it, globalData, arg2=FloatOffsetType(0.)) -> double

        Parameters
        ----------
        it: itk::ConstNeighborhoodIterator< itk::Image< double,4 > > const &
        globalData: void *
        arg2: itkVectorF4 const &

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_ComputeUpdate(self, *args)

    def Initialize(self, r):
        r"""
        Initialize(self, r)

        Parameters
        ----------
        r: itkSize4 const &

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_Initialize(self, r)

    def ComputeCurvatureTerm(self, arg0, arg1, gd=None):
        r"""
        ComputeCurvatureTerm(self, arg0, arg1, gd=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,4 > > const &
        arg1: itkVectorF4 const &
        gd: itkLevelSetFunctionID4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_ComputeCurvatureTerm(self, arg0, arg1, gd)

    def ComputeMeanCurvature(self, arg0, arg1, gd=None):
        r"""
        ComputeMeanCurvature(self, arg0, arg1, gd=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,4 > > const &
        arg1: itkVectorF4 const &
        gd: itkLevelSetFunctionID4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_ComputeMeanCurvature(self, arg0, arg1, gd)

    def ComputeMinimalCurvature(self, arg0, arg1, gd=None):
        r"""
        ComputeMinimalCurvature(self, arg0, arg1, gd=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,4 > > const &
        arg1: itkVectorF4 const &
        gd: itkLevelSetFunctionID4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_ComputeMinimalCurvature(self, arg0, arg1, gd)

    def Compute3DMinimalCurvature(self, arg0, arg1, gd=None):
        r"""
        Compute3DMinimalCurvature(self, arg0, arg1, gd=None) -> double

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< double,4 > > const &
        arg1: itkVectorF4 const &
        gd: itkLevelSetFunctionID4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_Compute3DMinimalCurvature(self, arg0, arg1, gd)

    def SetUseMinimalCurvature(self, b):
        r"""
        SetUseMinimalCurvature(self, b)

        Parameters
        ----------
        b: bool

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_SetUseMinimalCurvature(self, b)

    def GetUseMinimalCurvature(self):
        r"""GetUseMinimalCurvature(self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_GetUseMinimalCurvature(self)

    def UseMinimalCurvatureOn(self):
        r"""UseMinimalCurvatureOn(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_UseMinimalCurvatureOn(self)

    def UseMinimalCurvatureOff(self):
        r"""UseMinimalCurvatureOff(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_UseMinimalCurvatureOff(self)

    @staticmethod
    def SetMaximumCurvatureTimeStep(n):
        r"""
        SetMaximumCurvatureTimeStep(n)

        Parameters
        ----------
        n: double

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_SetMaximumCurvatureTimeStep(n)

    @staticmethod
    def GetMaximumCurvatureTimeStep():
        r"""GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_GetMaximumCurvatureTimeStep()

    @staticmethod
    def SetMaximumPropagationTimeStep(n):
        r"""
        SetMaximumPropagationTimeStep(n)

        Parameters
        ----------
        n: double

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_SetMaximumPropagationTimeStep(n)

    @staticmethod
    def GetMaximumPropagationTimeStep():
        r"""GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_GetMaximumPropagationTimeStep()
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetFunctionID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionID4

        Create a new object of the class itkLevelSetFunctionID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionID4 in _itkLevelSetFunctionPython:
_itkLevelSetFunctionPython.itkLevelSetFunctionID4_swigregister(itkLevelSetFunctionID4)

def itkLevelSetFunctionIF2_New():
    return itkLevelSetFunctionIF2.New()

class itkLevelSetFunctionIF2(itk.itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2):
    r"""Proxy of C++ itkLevelSetFunctionIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetFunctionIF2_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetFunctionIF2_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Clone(self)

    def AdvectionField(self, arg0, arg1, arg2=None):
        r"""
        AdvectionField(self, arg0, arg1, arg2=None) -> itkFixedArrayF2

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float > > const &
        arg1: itkVectorF2 const &
        arg2: itkLevelSetFunctionIF2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_AdvectionField(self, arg0, arg1, arg2)

    def PropagationSpeed(self, arg0, arg1, arg2=None):
        r"""
        PropagationSpeed(self, arg0, arg1, arg2=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float > > const &
        arg1: itkVectorF2 const &
        arg2: itkLevelSetFunctionIF2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_PropagationSpeed(self, arg0, arg1, arg2)

    def CurvatureSpeed(self, arg0, arg1, arg2=None):
        r"""
        CurvatureSpeed(self, arg0, arg1, arg2=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float > > const &
        arg1: itkVectorF2 const &
        arg2: itkLevelSetFunctionIF2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_CurvatureSpeed(self, arg0, arg1, arg2)

    def LaplacianSmoothingSpeed(self, arg0, arg1, arg2=None):
        r"""
        LaplacianSmoothingSpeed(self, arg0, arg1, arg2=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float > > const &
        arg1: itkVectorF2 const &
        arg2: itkLevelSetFunctionIF2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_LaplacianSmoothingSpeed(self, arg0, arg1, arg2)

    def SetAdvectionWeight(self, a):
        r"""
        SetAdvectionWeight(self, a)

        Parameters
        ----------
        a: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetAdvectionWeight(self, a)

    def GetAdvectionWeight(self):
        r"""GetAdvectionWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetAdvectionWeight(self)

    def SetPropagationWeight(self, p):
        r"""
        SetPropagationWeight(self, p)

        Parameters
        ----------
        p: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetPropagationWeight(self, p)

    def GetPropagationWeight(self):
        r"""GetPropagationWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetPropagationWeight(self)

    def SetCurvatureWeight(self, c):
        r"""
        SetCurvatureWeight(self, c)

        Parameters
        ----------
        c: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetCurvatureWeight(self, c)

    def GetCurvatureWeight(self):
        r"""GetCurvatureWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetCurvatureWeight(self)

    def SetLaplacianSmoothingWeight(self, c):
        r"""
        SetLaplacianSmoothingWeight(self, c)

        Parameters
        ----------
        c: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetLaplacianSmoothingWeight(self, c)

    def GetLaplacianSmoothingWeight(self):
        r"""GetLaplacianSmoothingWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetLaplacianSmoothingWeight(self)

    def SetEpsilonMagnitude(self, e):
        r"""
        SetEpsilonMagnitude(self, e)

        Parameters
        ----------
        e: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetEpsilonMagnitude(self, e)

    def GetEpsilonMagnitude(self):
        r"""GetEpsilonMagnitude(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetEpsilonMagnitude(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, it, globalData, arg2=FloatOffsetType(0.)) -> float

        Parameters
        ----------
        it: itk::ConstNeighborhoodIterator< itk::Image< float > > const &
        globalData: void *
        arg2: itkVectorF2 const &

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeUpdate(self, *args)

    def Initialize(self, r):
        r"""
        Initialize(self, r)

        Parameters
        ----------
        r: itkSize2 const &

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Initialize(self, r)

    def ComputeCurvatureTerm(self, arg0, arg1, gd=None):
        r"""
        ComputeCurvatureTerm(self, arg0, arg1, gd=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float > > const &
        arg1: itkVectorF2 const &
        gd: itkLevelSetFunctionIF2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeCurvatureTerm(self, arg0, arg1, gd)

    def ComputeMeanCurvature(self, arg0, arg1, gd=None):
        r"""
        ComputeMeanCurvature(self, arg0, arg1, gd=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float > > const &
        arg1: itkVectorF2 const &
        gd: itkLevelSetFunctionIF2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMeanCurvature(self, arg0, arg1, gd)

    def ComputeMinimalCurvature(self, arg0, arg1, gd=None):
        r"""
        ComputeMinimalCurvature(self, arg0, arg1, gd=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float > > const &
        arg1: itkVectorF2 const &
        gd: itkLevelSetFunctionIF2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMinimalCurvature(self, arg0, arg1, gd)

    def Compute3DMinimalCurvature(self, arg0, arg1, gd=None):
        r"""
        Compute3DMinimalCurvature(self, arg0, arg1, gd=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float > > const &
        arg1: itkVectorF2 const &
        gd: itkLevelSetFunctionIF2::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Compute3DMinimalCurvature(self, arg0, arg1, gd)

    def SetUseMinimalCurvature(self, b):
        r"""
        SetUseMinimalCurvature(self, b)

        Parameters
        ----------
        b: bool

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetUseMinimalCurvature(self, b)

    def GetUseMinimalCurvature(self):
        r"""GetUseMinimalCurvature(self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetUseMinimalCurvature(self)

    def UseMinimalCurvatureOn(self):
        r"""UseMinimalCurvatureOn(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOn(self)

    def UseMinimalCurvatureOff(self):
        r"""UseMinimalCurvatureOff(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOff(self)

    @staticmethod
    def SetMaximumCurvatureTimeStep(n):
        r"""
        SetMaximumCurvatureTimeStep(n)

        Parameters
        ----------
        n: double

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep(n)

    @staticmethod
    def GetMaximumCurvatureTimeStep():
        r"""GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep()

    @staticmethod
    def SetMaximumPropagationTimeStep(n):
        r"""
        SetMaximumPropagationTimeStep(n)

        Parameters
        ----------
        n: double

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep(n)

    @staticmethod
    def GetMaximumPropagationTimeStep():
        r"""GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep()
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetFunctionIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionIF2

        Create a new object of the class itkLevelSetFunctionIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionIF2 in _itkLevelSetFunctionPython:
_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_swigregister(itkLevelSetFunctionIF2)

def itkLevelSetFunctionIF3_New():
    return itkLevelSetFunctionIF3.New()

class itkLevelSetFunctionIF3(itk.itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3):
    r"""Proxy of C++ itkLevelSetFunctionIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetFunctionIF3_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetFunctionIF3_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Clone(self)

    def AdvectionField(self, arg0, arg1, arg2=None):
        r"""
        AdvectionField(self, arg0, arg1, arg2=None) -> itkFixedArrayF3

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,3 > > const &
        arg1: itkVectorF3 const &
        arg2: itkLevelSetFunctionIF3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_AdvectionField(self, arg0, arg1, arg2)

    def PropagationSpeed(self, arg0, arg1, arg2=None):
        r"""
        PropagationSpeed(self, arg0, arg1, arg2=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,3 > > const &
        arg1: itkVectorF3 const &
        arg2: itkLevelSetFunctionIF3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_PropagationSpeed(self, arg0, arg1, arg2)

    def CurvatureSpeed(self, arg0, arg1, arg2=None):
        r"""
        CurvatureSpeed(self, arg0, arg1, arg2=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,3 > > const &
        arg1: itkVectorF3 const &
        arg2: itkLevelSetFunctionIF3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_CurvatureSpeed(self, arg0, arg1, arg2)

    def LaplacianSmoothingSpeed(self, arg0, arg1, arg2=None):
        r"""
        LaplacianSmoothingSpeed(self, arg0, arg1, arg2=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,3 > > const &
        arg1: itkVectorF3 const &
        arg2: itkLevelSetFunctionIF3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_LaplacianSmoothingSpeed(self, arg0, arg1, arg2)

    def SetAdvectionWeight(self, a):
        r"""
        SetAdvectionWeight(self, a)

        Parameters
        ----------
        a: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetAdvectionWeight(self, a)

    def GetAdvectionWeight(self):
        r"""GetAdvectionWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetAdvectionWeight(self)

    def SetPropagationWeight(self, p):
        r"""
        SetPropagationWeight(self, p)

        Parameters
        ----------
        p: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetPropagationWeight(self, p)

    def GetPropagationWeight(self):
        r"""GetPropagationWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetPropagationWeight(self)

    def SetCurvatureWeight(self, c):
        r"""
        SetCurvatureWeight(self, c)

        Parameters
        ----------
        c: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetCurvatureWeight(self, c)

    def GetCurvatureWeight(self):
        r"""GetCurvatureWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetCurvatureWeight(self)

    def SetLaplacianSmoothingWeight(self, c):
        r"""
        SetLaplacianSmoothingWeight(self, c)

        Parameters
        ----------
        c: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetLaplacianSmoothingWeight(self, c)

    def GetLaplacianSmoothingWeight(self):
        r"""GetLaplacianSmoothingWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetLaplacianSmoothingWeight(self)

    def SetEpsilonMagnitude(self, e):
        r"""
        SetEpsilonMagnitude(self, e)

        Parameters
        ----------
        e: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetEpsilonMagnitude(self, e)

    def GetEpsilonMagnitude(self):
        r"""GetEpsilonMagnitude(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetEpsilonMagnitude(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, it, globalData, arg2=FloatOffsetType(0.)) -> float

        Parameters
        ----------
        it: itk::ConstNeighborhoodIterator< itk::Image< float,3 > > const &
        globalData: void *
        arg2: itkVectorF3 const &

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeUpdate(self, *args)

    def Initialize(self, r):
        r"""
        Initialize(self, r)

        Parameters
        ----------
        r: itkSize3 const &

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Initialize(self, r)

    def ComputeCurvatureTerm(self, arg0, arg1, gd=None):
        r"""
        ComputeCurvatureTerm(self, arg0, arg1, gd=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,3 > > const &
        arg1: itkVectorF3 const &
        gd: itkLevelSetFunctionIF3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeCurvatureTerm(self, arg0, arg1, gd)

    def ComputeMeanCurvature(self, arg0, arg1, gd=None):
        r"""
        ComputeMeanCurvature(self, arg0, arg1, gd=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,3 > > const &
        arg1: itkVectorF3 const &
        gd: itkLevelSetFunctionIF3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMeanCurvature(self, arg0, arg1, gd)

    def ComputeMinimalCurvature(self, arg0, arg1, gd=None):
        r"""
        ComputeMinimalCurvature(self, arg0, arg1, gd=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,3 > > const &
        arg1: itkVectorF3 const &
        gd: itkLevelSetFunctionIF3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMinimalCurvature(self, arg0, arg1, gd)

    def Compute3DMinimalCurvature(self, arg0, arg1, gd=None):
        r"""
        Compute3DMinimalCurvature(self, arg0, arg1, gd=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,3 > > const &
        arg1: itkVectorF3 const &
        gd: itkLevelSetFunctionIF3::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Compute3DMinimalCurvature(self, arg0, arg1, gd)

    def SetUseMinimalCurvature(self, b):
        r"""
        SetUseMinimalCurvature(self, b)

        Parameters
        ----------
        b: bool

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetUseMinimalCurvature(self, b)

    def GetUseMinimalCurvature(self):
        r"""GetUseMinimalCurvature(self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetUseMinimalCurvature(self)

    def UseMinimalCurvatureOn(self):
        r"""UseMinimalCurvatureOn(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOn(self)

    def UseMinimalCurvatureOff(self):
        r"""UseMinimalCurvatureOff(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOff(self)

    @staticmethod
    def SetMaximumCurvatureTimeStep(n):
        r"""
        SetMaximumCurvatureTimeStep(n)

        Parameters
        ----------
        n: double

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep(n)

    @staticmethod
    def GetMaximumCurvatureTimeStep():
        r"""GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep()

    @staticmethod
    def SetMaximumPropagationTimeStep(n):
        r"""
        SetMaximumPropagationTimeStep(n)

        Parameters
        ----------
        n: double

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep(n)

    @staticmethod
    def GetMaximumPropagationTimeStep():
        r"""GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep()
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetFunctionIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionIF3

        Create a new object of the class itkLevelSetFunctionIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionIF3 in _itkLevelSetFunctionPython:
_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_swigregister(itkLevelSetFunctionIF3)

def itkLevelSetFunctionIF4_New():
    return itkLevelSetFunctionIF4.New()

class itkLevelSetFunctionIF4(itk.itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF4):
    r"""Proxy of C++ itkLevelSetFunctionIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetFunctionIF4_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetFunctionIF4_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_Clone(self)

    def AdvectionField(self, arg0, arg1, arg2=None):
        r"""
        AdvectionField(self, arg0, arg1, arg2=None) -> itkFixedArrayF4

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,4 > > const &
        arg1: itkVectorF4 const &
        arg2: itkLevelSetFunctionIF4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_AdvectionField(self, arg0, arg1, arg2)

    def PropagationSpeed(self, arg0, arg1, arg2=None):
        r"""
        PropagationSpeed(self, arg0, arg1, arg2=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,4 > > const &
        arg1: itkVectorF4 const &
        arg2: itkLevelSetFunctionIF4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_PropagationSpeed(self, arg0, arg1, arg2)

    def CurvatureSpeed(self, arg0, arg1, arg2=None):
        r"""
        CurvatureSpeed(self, arg0, arg1, arg2=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,4 > > const &
        arg1: itkVectorF4 const &
        arg2: itkLevelSetFunctionIF4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_CurvatureSpeed(self, arg0, arg1, arg2)

    def LaplacianSmoothingSpeed(self, arg0, arg1, arg2=None):
        r"""
        LaplacianSmoothingSpeed(self, arg0, arg1, arg2=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,4 > > const &
        arg1: itkVectorF4 const &
        arg2: itkLevelSetFunctionIF4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_LaplacianSmoothingSpeed(self, arg0, arg1, arg2)

    def SetAdvectionWeight(self, a):
        r"""
        SetAdvectionWeight(self, a)

        Parameters
        ----------
        a: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_SetAdvectionWeight(self, a)

    def GetAdvectionWeight(self):
        r"""GetAdvectionWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_GetAdvectionWeight(self)

    def SetPropagationWeight(self, p):
        r"""
        SetPropagationWeight(self, p)

        Parameters
        ----------
        p: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_SetPropagationWeight(self, p)

    def GetPropagationWeight(self):
        r"""GetPropagationWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_GetPropagationWeight(self)

    def SetCurvatureWeight(self, c):
        r"""
        SetCurvatureWeight(self, c)

        Parameters
        ----------
        c: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_SetCurvatureWeight(self, c)

    def GetCurvatureWeight(self):
        r"""GetCurvatureWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_GetCurvatureWeight(self)

    def SetLaplacianSmoothingWeight(self, c):
        r"""
        SetLaplacianSmoothingWeight(self, c)

        Parameters
        ----------
        c: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_SetLaplacianSmoothingWeight(self, c)

    def GetLaplacianSmoothingWeight(self):
        r"""GetLaplacianSmoothingWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_GetLaplacianSmoothingWeight(self)

    def SetEpsilonMagnitude(self, e):
        r"""
        SetEpsilonMagnitude(self, e)

        Parameters
        ----------
        e: float const

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_SetEpsilonMagnitude(self, e)

    def GetEpsilonMagnitude(self):
        r"""GetEpsilonMagnitude(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_GetEpsilonMagnitude(self)

    def ComputeUpdate(self, *args):
        r"""
        ComputeUpdate(self, it, globalData, arg2=FloatOffsetType(0.)) -> float

        Parameters
        ----------
        it: itk::ConstNeighborhoodIterator< itk::Image< float,4 > > const &
        globalData: void *
        arg2: itkVectorF4 const &

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_ComputeUpdate(self, *args)

    def Initialize(self, r):
        r"""
        Initialize(self, r)

        Parameters
        ----------
        r: itkSize4 const &

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_Initialize(self, r)

    def ComputeCurvatureTerm(self, arg0, arg1, gd=None):
        r"""
        ComputeCurvatureTerm(self, arg0, arg1, gd=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,4 > > const &
        arg1: itkVectorF4 const &
        gd: itkLevelSetFunctionIF4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_ComputeCurvatureTerm(self, arg0, arg1, gd)

    def ComputeMeanCurvature(self, arg0, arg1, gd=None):
        r"""
        ComputeMeanCurvature(self, arg0, arg1, gd=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,4 > > const &
        arg1: itkVectorF4 const &
        gd: itkLevelSetFunctionIF4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_ComputeMeanCurvature(self, arg0, arg1, gd)

    def ComputeMinimalCurvature(self, arg0, arg1, gd=None):
        r"""
        ComputeMinimalCurvature(self, arg0, arg1, gd=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,4 > > const &
        arg1: itkVectorF4 const &
        gd: itkLevelSetFunctionIF4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_ComputeMinimalCurvature(self, arg0, arg1, gd)

    def Compute3DMinimalCurvature(self, arg0, arg1, gd=None):
        r"""
        Compute3DMinimalCurvature(self, arg0, arg1, gd=None) -> float

        Parameters
        ----------
        arg0: itk::ConstNeighborhoodIterator< itk::Image< float,4 > > const &
        arg1: itkVectorF4 const &
        gd: itkLevelSetFunctionIF4::GlobalDataStruct *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_Compute3DMinimalCurvature(self, arg0, arg1, gd)

    def SetUseMinimalCurvature(self, b):
        r"""
        SetUseMinimalCurvature(self, b)

        Parameters
        ----------
        b: bool

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_SetUseMinimalCurvature(self, b)

    def GetUseMinimalCurvature(self):
        r"""GetUseMinimalCurvature(self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_GetUseMinimalCurvature(self)

    def UseMinimalCurvatureOn(self):
        r"""UseMinimalCurvatureOn(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_UseMinimalCurvatureOn(self)

    def UseMinimalCurvatureOff(self):
        r"""UseMinimalCurvatureOff(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_UseMinimalCurvatureOff(self)

    @staticmethod
    def SetMaximumCurvatureTimeStep(n):
        r"""
        SetMaximumCurvatureTimeStep(n)

        Parameters
        ----------
        n: double

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_SetMaximumCurvatureTimeStep(n)

    @staticmethod
    def GetMaximumCurvatureTimeStep():
        r"""GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_GetMaximumCurvatureTimeStep()

    @staticmethod
    def SetMaximumPropagationTimeStep(n):
        r"""
        SetMaximumPropagationTimeStep(n)

        Parameters
        ----------
        n: double

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_SetMaximumPropagationTimeStep(n)

    @staticmethod
    def GetMaximumPropagationTimeStep():
        r"""GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_GetMaximumPropagationTimeStep()
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetFunctionIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionIF4

        Create a new object of the class itkLevelSetFunctionIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetFunctionIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetFunctionIF4 in _itkLevelSetFunctionPython:
_itkLevelSetFunctionPython.itkLevelSetFunctionIF4_swigregister(itkLevelSetFunctionIF4)

