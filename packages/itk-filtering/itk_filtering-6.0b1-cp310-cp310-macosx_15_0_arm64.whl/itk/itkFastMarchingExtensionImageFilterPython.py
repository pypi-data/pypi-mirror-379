# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKFastMarchingPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFastMarchingExtensionImageFilterPython
else:
    import _itkFastMarchingExtensionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkVectorContainerPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkContinuousIndexPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkArrayPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkFastMarchingImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.ITKFastMarchingBasePython
import itk.itkLevelSetNodePython
import itk.itkNodePairPython
import itk.itkFastMarchingStoppingCriterionBasePython

def itkFastMarchingExtensionImageFilterID2UC1ID2_New():
    return itkFastMarchingExtensionImageFilterID2UC1ID2.New()

class itkFastMarchingExtensionImageFilterID2UC1ID2(itk.itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2):
    r"""Proxy of C++ itkFastMarchingExtensionImageFilterID2UC1ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastMarchingExtensionImageFilterID2UC1ID2_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastMarchingExtensionImageFilterID2UC1ID2_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_Clone(self)

    def GetAuxiliaryImage(self, idx):
        r"""
        GetAuxiliaryImage(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_GetAuxiliaryImage(self, idx)

    def SetAuxiliaryAliveValues(self, values):
        r"""
        SetAuxiliaryAliveValues(self, values)

        Parameters
        ----------
        values: itkVectorContainerUIVUC1 *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_SetAuxiliaryAliveValues(self, values)

    def GetAuxiliaryAliveValues(self):
        r"""GetAuxiliaryAliveValues(self) -> itkVectorContainerUIVUC1"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_GetAuxiliaryAliveValues(self)

    def SetAuxiliaryTrialValues(self, values):
        r"""
        SetAuxiliaryTrialValues(self, values)

        Parameters
        ----------
        values: itkVectorContainerUIVUC1 *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_SetAuxiliaryTrialValues(self, values)

    def GetAuxiliaryTrialValues(self):
        r"""GetAuxiliaryTrialValues(self) -> itkVectorContainerUIVUC1_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_GetAuxiliaryTrialValues(self)
    AuxValueHasNumericTraitsCheck = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_AuxValueHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFastMarchingExtensionImageFilterPython.delete_itkFastMarchingExtensionImageFilterID2UC1ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastMarchingExtensionImageFilterID2UC1ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastMarchingExtensionImageFilterID2UC1ID2

        Create a new object of the class itkFastMarchingExtensionImageFilterID2UC1ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingExtensionImageFilterID2UC1ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingExtensionImageFilterID2UC1ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingExtensionImageFilterID2UC1ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingExtensionImageFilterID2UC1ID2 in _itkFastMarchingExtensionImageFilterPython:
_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_swigregister(itkFastMarchingExtensionImageFilterID2UC1ID2)

def itkFastMarchingExtensionImageFilterID3UC1ID3_New():
    return itkFastMarchingExtensionImageFilterID3UC1ID3.New()

class itkFastMarchingExtensionImageFilterID3UC1ID3(itk.itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3):
    r"""Proxy of C++ itkFastMarchingExtensionImageFilterID3UC1ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastMarchingExtensionImageFilterID3UC1ID3_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastMarchingExtensionImageFilterID3UC1ID3_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_Clone(self)

    def GetAuxiliaryImage(self, idx):
        r"""
        GetAuxiliaryImage(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_GetAuxiliaryImage(self, idx)

    def SetAuxiliaryAliveValues(self, values):
        r"""
        SetAuxiliaryAliveValues(self, values)

        Parameters
        ----------
        values: itkVectorContainerUIVUC1 *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_SetAuxiliaryAliveValues(self, values)

    def GetAuxiliaryAliveValues(self):
        r"""GetAuxiliaryAliveValues(self) -> itkVectorContainerUIVUC1"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_GetAuxiliaryAliveValues(self)

    def SetAuxiliaryTrialValues(self, values):
        r"""
        SetAuxiliaryTrialValues(self, values)

        Parameters
        ----------
        values: itkVectorContainerUIVUC1 *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_SetAuxiliaryTrialValues(self, values)

    def GetAuxiliaryTrialValues(self):
        r"""GetAuxiliaryTrialValues(self) -> itkVectorContainerUIVUC1_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_GetAuxiliaryTrialValues(self)
    AuxValueHasNumericTraitsCheck = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_AuxValueHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFastMarchingExtensionImageFilterPython.delete_itkFastMarchingExtensionImageFilterID3UC1ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastMarchingExtensionImageFilterID3UC1ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastMarchingExtensionImageFilterID3UC1ID3

        Create a new object of the class itkFastMarchingExtensionImageFilterID3UC1ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingExtensionImageFilterID3UC1ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingExtensionImageFilterID3UC1ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingExtensionImageFilterID3UC1ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingExtensionImageFilterID3UC1ID3 in _itkFastMarchingExtensionImageFilterPython:
_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_swigregister(itkFastMarchingExtensionImageFilterID3UC1ID3)

def itkFastMarchingExtensionImageFilterID4UC1ID4_New():
    return itkFastMarchingExtensionImageFilterID4UC1ID4.New()

class itkFastMarchingExtensionImageFilterID4UC1ID4(itk.itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID4ID4):
    r"""Proxy of C++ itkFastMarchingExtensionImageFilterID4UC1ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastMarchingExtensionImageFilterID4UC1ID4_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID4UC1ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastMarchingExtensionImageFilterID4UC1ID4_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID4UC1ID4_Clone(self)

    def GetAuxiliaryImage(self, idx):
        r"""
        GetAuxiliaryImage(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID4UC1ID4_GetAuxiliaryImage(self, idx)

    def SetAuxiliaryAliveValues(self, values):
        r"""
        SetAuxiliaryAliveValues(self, values)

        Parameters
        ----------
        values: itkVectorContainerUIVUC1 *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID4UC1ID4_SetAuxiliaryAliveValues(self, values)

    def GetAuxiliaryAliveValues(self):
        r"""GetAuxiliaryAliveValues(self) -> itkVectorContainerUIVUC1"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID4UC1ID4_GetAuxiliaryAliveValues(self)

    def SetAuxiliaryTrialValues(self, values):
        r"""
        SetAuxiliaryTrialValues(self, values)

        Parameters
        ----------
        values: itkVectorContainerUIVUC1 *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID4UC1ID4_SetAuxiliaryTrialValues(self, values)

    def GetAuxiliaryTrialValues(self):
        r"""GetAuxiliaryTrialValues(self) -> itkVectorContainerUIVUC1_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID4UC1ID4_GetAuxiliaryTrialValues(self)
    AuxValueHasNumericTraitsCheck = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID4UC1ID4_AuxValueHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFastMarchingExtensionImageFilterPython.delete_itkFastMarchingExtensionImageFilterID4UC1ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastMarchingExtensionImageFilterID4UC1ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID4UC1ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastMarchingExtensionImageFilterID4UC1ID4

        Create a new object of the class itkFastMarchingExtensionImageFilterID4UC1ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingExtensionImageFilterID4UC1ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingExtensionImageFilterID4UC1ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingExtensionImageFilterID4UC1ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingExtensionImageFilterID4UC1ID4 in _itkFastMarchingExtensionImageFilterPython:
_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID4UC1ID4_swigregister(itkFastMarchingExtensionImageFilterID4UC1ID4)

def itkFastMarchingExtensionImageFilterIF2UC1IF2_New():
    return itkFastMarchingExtensionImageFilterIF2UC1IF2.New()

class itkFastMarchingExtensionImageFilterIF2UC1IF2(itk.itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2):
    r"""Proxy of C++ itkFastMarchingExtensionImageFilterIF2UC1IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastMarchingExtensionImageFilterIF2UC1IF2_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastMarchingExtensionImageFilterIF2UC1IF2_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_Clone(self)

    def GetAuxiliaryImage(self, idx):
        r"""
        GetAuxiliaryImage(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_GetAuxiliaryImage(self, idx)

    def SetAuxiliaryAliveValues(self, values):
        r"""
        SetAuxiliaryAliveValues(self, values)

        Parameters
        ----------
        values: itkVectorContainerUIVUC1 *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_SetAuxiliaryAliveValues(self, values)

    def GetAuxiliaryAliveValues(self):
        r"""GetAuxiliaryAliveValues(self) -> itkVectorContainerUIVUC1"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_GetAuxiliaryAliveValues(self)

    def SetAuxiliaryTrialValues(self, values):
        r"""
        SetAuxiliaryTrialValues(self, values)

        Parameters
        ----------
        values: itkVectorContainerUIVUC1 *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_SetAuxiliaryTrialValues(self, values)

    def GetAuxiliaryTrialValues(self):
        r"""GetAuxiliaryTrialValues(self) -> itkVectorContainerUIVUC1_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_GetAuxiliaryTrialValues(self)
    AuxValueHasNumericTraitsCheck = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_AuxValueHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFastMarchingExtensionImageFilterPython.delete_itkFastMarchingExtensionImageFilterIF2UC1IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastMarchingExtensionImageFilterIF2UC1IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastMarchingExtensionImageFilterIF2UC1IF2

        Create a new object of the class itkFastMarchingExtensionImageFilterIF2UC1IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingExtensionImageFilterIF2UC1IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingExtensionImageFilterIF2UC1IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingExtensionImageFilterIF2UC1IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingExtensionImageFilterIF2UC1IF2 in _itkFastMarchingExtensionImageFilterPython:
_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_swigregister(itkFastMarchingExtensionImageFilterIF2UC1IF2)

def itkFastMarchingExtensionImageFilterIF3UC1IF3_New():
    return itkFastMarchingExtensionImageFilterIF3UC1IF3.New()

class itkFastMarchingExtensionImageFilterIF3UC1IF3(itk.itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3):
    r"""Proxy of C++ itkFastMarchingExtensionImageFilterIF3UC1IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastMarchingExtensionImageFilterIF3UC1IF3_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastMarchingExtensionImageFilterIF3UC1IF3_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_Clone(self)

    def GetAuxiliaryImage(self, idx):
        r"""
        GetAuxiliaryImage(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_GetAuxiliaryImage(self, idx)

    def SetAuxiliaryAliveValues(self, values):
        r"""
        SetAuxiliaryAliveValues(self, values)

        Parameters
        ----------
        values: itkVectorContainerUIVUC1 *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_SetAuxiliaryAliveValues(self, values)

    def GetAuxiliaryAliveValues(self):
        r"""GetAuxiliaryAliveValues(self) -> itkVectorContainerUIVUC1"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_GetAuxiliaryAliveValues(self)

    def SetAuxiliaryTrialValues(self, values):
        r"""
        SetAuxiliaryTrialValues(self, values)

        Parameters
        ----------
        values: itkVectorContainerUIVUC1 *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_SetAuxiliaryTrialValues(self, values)

    def GetAuxiliaryTrialValues(self):
        r"""GetAuxiliaryTrialValues(self) -> itkVectorContainerUIVUC1_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_GetAuxiliaryTrialValues(self)
    AuxValueHasNumericTraitsCheck = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_AuxValueHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFastMarchingExtensionImageFilterPython.delete_itkFastMarchingExtensionImageFilterIF3UC1IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastMarchingExtensionImageFilterIF3UC1IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastMarchingExtensionImageFilterIF3UC1IF3

        Create a new object of the class itkFastMarchingExtensionImageFilterIF3UC1IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingExtensionImageFilterIF3UC1IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingExtensionImageFilterIF3UC1IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingExtensionImageFilterIF3UC1IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingExtensionImageFilterIF3UC1IF3 in _itkFastMarchingExtensionImageFilterPython:
_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_swigregister(itkFastMarchingExtensionImageFilterIF3UC1IF3)

def itkFastMarchingExtensionImageFilterIF4UC1IF4_New():
    return itkFastMarchingExtensionImageFilterIF4UC1IF4.New()

class itkFastMarchingExtensionImageFilterIF4UC1IF4(itk.itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF4IF4):
    r"""Proxy of C++ itkFastMarchingExtensionImageFilterIF4UC1IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFastMarchingExtensionImageFilterIF4UC1IF4_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF4UC1IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFastMarchingExtensionImageFilterIF4UC1IF4_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF4UC1IF4_Clone(self)

    def GetAuxiliaryImage(self, idx):
        r"""
        GetAuxiliaryImage(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF4UC1IF4_GetAuxiliaryImage(self, idx)

    def SetAuxiliaryAliveValues(self, values):
        r"""
        SetAuxiliaryAliveValues(self, values)

        Parameters
        ----------
        values: itkVectorContainerUIVUC1 *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF4UC1IF4_SetAuxiliaryAliveValues(self, values)

    def GetAuxiliaryAliveValues(self):
        r"""GetAuxiliaryAliveValues(self) -> itkVectorContainerUIVUC1"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF4UC1IF4_GetAuxiliaryAliveValues(self)

    def SetAuxiliaryTrialValues(self, values):
        r"""
        SetAuxiliaryTrialValues(self, values)

        Parameters
        ----------
        values: itkVectorContainerUIVUC1 *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF4UC1IF4_SetAuxiliaryTrialValues(self, values)

    def GetAuxiliaryTrialValues(self):
        r"""GetAuxiliaryTrialValues(self) -> itkVectorContainerUIVUC1_Pointer"""
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF4UC1IF4_GetAuxiliaryTrialValues(self)
    AuxValueHasNumericTraitsCheck = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF4UC1IF4_AuxValueHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFastMarchingExtensionImageFilterPython.delete_itkFastMarchingExtensionImageFilterIF4UC1IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFastMarchingExtensionImageFilterIF4UC1IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF4UC1IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFastMarchingExtensionImageFilterIF4UC1IF4

        Create a new object of the class itkFastMarchingExtensionImageFilterIF4UC1IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingExtensionImageFilterIF4UC1IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingExtensionImageFilterIF4UC1IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingExtensionImageFilterIF4UC1IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingExtensionImageFilterIF4UC1IF4 in _itkFastMarchingExtensionImageFilterPython:
_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF4UC1IF4_swigregister(itkFastMarchingExtensionImageFilterIF4UC1IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def fast_marching_extension_image_filter(*args: itkt.ImageLike,  auxiliary_alive_values=..., auxiliary_trial_values=..., outside_points=..., alive_points=..., trial_points=..., speed_constant: float=..., normalization_factor: float=..., stopping_value: float=..., collect_points: bool=..., output_size: Sequence[int]=..., output_region: itkt.ImageRegion=..., output_spacing: Sequence[float]=..., output_direction=..., output_origin: Sequence[float]=..., override_output_information: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FastMarchingExtensionImageFilter"""
    import itk

    kwarg_typehints = { 'auxiliary_alive_values':auxiliary_alive_values,'auxiliary_trial_values':auxiliary_trial_values,'outside_points':outside_points,'alive_points':alive_points,'trial_points':trial_points,'speed_constant':speed_constant,'normalization_factor':normalization_factor,'stopping_value':stopping_value,'collect_points':collect_points,'output_size':output_size,'output_region':output_region,'output_spacing':output_spacing,'output_direction':output_direction,'output_origin':output_origin,'override_output_information':override_output_information }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.FastMarchingExtensionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def fast_marching_extension_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKFastMarching.FastMarchingExtensionImageFilter
    fast_marching_extension_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    fast_marching_extension_image_filter.__doc__ = filter_object.__doc__



