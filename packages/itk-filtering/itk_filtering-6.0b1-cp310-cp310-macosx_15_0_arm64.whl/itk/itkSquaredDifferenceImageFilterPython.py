# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageComparePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSquaredDifferenceImageFilterPython
else:
    import _itkSquaredDifferenceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkBinaryGeneratorImageFilterPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.pyBasePython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkSquaredDifferenceImageFilterID2ID2ID2_New():
    return itkSquaredDifferenceImageFilterID2ID2ID2.New()

class itkSquaredDifferenceImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterID2ID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterID2ID2ID2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID2ID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterID2ID2ID2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID2ID2ID2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID2ID2ID2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID2ID2ID2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID2ID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterID2ID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterID2ID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID2ID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterID2ID2ID2

        Create a new object of the class itkSquaredDifferenceImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterID2ID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterID2ID2ID2 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID2ID2ID2_swigregister(itkSquaredDifferenceImageFilterID2ID2ID2)

def itkSquaredDifferenceImageFilterID3ID3ID3_New():
    return itkSquaredDifferenceImageFilterID3ID3ID3.New()

class itkSquaredDifferenceImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterID3ID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterID3ID3ID3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID3ID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterID3ID3ID3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID3ID3ID3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID3ID3ID3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID3ID3ID3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID3ID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterID3ID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterID3ID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID3ID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterID3ID3ID3

        Create a new object of the class itkSquaredDifferenceImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterID3ID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterID3ID3ID3 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID3ID3ID3_swigregister(itkSquaredDifferenceImageFilterID3ID3ID3)

def itkSquaredDifferenceImageFilterID4ID4ID4_New():
    return itkSquaredDifferenceImageFilterID4ID4ID4.New()

class itkSquaredDifferenceImageFilterID4ID4ID4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID4ID4ID4):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterID4ID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterID4ID4ID4_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID4ID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterID4ID4ID4_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID4ID4ID4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID4ID4ID4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID4ID4ID4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID4ID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterID4ID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterID4ID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID4ID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterID4ID4ID4

        Create a new object of the class itkSquaredDifferenceImageFilterID4ID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterID4ID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterID4ID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterID4ID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterID4ID4ID4 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterID4ID4ID4_swigregister(itkSquaredDifferenceImageFilterID4ID4ID4)

def itkSquaredDifferenceImageFilterIF2IF2IF2_New():
    return itkSquaredDifferenceImageFilterIF2IF2IF2.New()

class itkSquaredDifferenceImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterIF2IF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterIF2IF2IF2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterIF2IF2IF2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIF2IF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterIF2IF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIF2IF2IF2

        Create a new object of the class itkSquaredDifferenceImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterIF2IF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterIF2IF2IF2 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF2IF2IF2_swigregister(itkSquaredDifferenceImageFilterIF2IF2IF2)

def itkSquaredDifferenceImageFilterIF3IF3IF3_New():
    return itkSquaredDifferenceImageFilterIF3IF3IF3.New()

class itkSquaredDifferenceImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterIF3IF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterIF3IF3IF3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterIF3IF3IF3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIF3IF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterIF3IF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIF3IF3IF3

        Create a new object of the class itkSquaredDifferenceImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterIF3IF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterIF3IF3IF3 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF3IF3IF3_swigregister(itkSquaredDifferenceImageFilterIF3IF3IF3)

def itkSquaredDifferenceImageFilterIF4IF4IF4_New():
    return itkSquaredDifferenceImageFilterIF4IF4IF4.New()

class itkSquaredDifferenceImageFilterIF4IF4IF4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF4IF4IF4):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterIF4IF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterIF4IF4IF4_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF4IF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterIF4IF4IF4_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF4IF4IF4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF4IF4IF4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF4IF4IF4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF4IF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIF4IF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterIF4IF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF4IF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIF4IF4IF4

        Create a new object of the class itkSquaredDifferenceImageFilterIF4IF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIF4IF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIF4IF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterIF4IF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterIF4IF4IF4 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIF4IF4IF4_swigregister(itkSquaredDifferenceImageFilterIF4IF4IF4)

def itkSquaredDifferenceImageFilterISS2ISS2ISS2_New():
    return itkSquaredDifferenceImageFilterISS2ISS2ISS2.New()

class itkSquaredDifferenceImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterISS2ISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterISS2ISS2ISS2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterISS2ISS2ISS2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterISS2ISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterISS2ISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterISS2ISS2ISS2

        Create a new object of the class itkSquaredDifferenceImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterISS2ISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterISS2ISS2ISS2 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS2ISS2ISS2_swigregister(itkSquaredDifferenceImageFilterISS2ISS2ISS2)

def itkSquaredDifferenceImageFilterISS3ISS3ISS3_New():
    return itkSquaredDifferenceImageFilterISS3ISS3ISS3.New()

class itkSquaredDifferenceImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterISS3ISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterISS3ISS3ISS3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterISS3ISS3ISS3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterISS3ISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterISS3ISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterISS3ISS3ISS3

        Create a new object of the class itkSquaredDifferenceImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterISS3ISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterISS3ISS3ISS3 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS3ISS3ISS3_swigregister(itkSquaredDifferenceImageFilterISS3ISS3ISS3)

def itkSquaredDifferenceImageFilterISS4ISS4ISS4_New():
    return itkSquaredDifferenceImageFilterISS4ISS4ISS4.New()

class itkSquaredDifferenceImageFilterISS4ISS4ISS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS4ISS4ISS4):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterISS4ISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterISS4ISS4ISS4_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS4ISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterISS4ISS4ISS4_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS4ISS4ISS4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS4ISS4ISS4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS4ISS4ISS4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS4ISS4ISS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterISS4ISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterISS4ISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS4ISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterISS4ISS4ISS4

        Create a new object of the class itkSquaredDifferenceImageFilterISS4ISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterISS4ISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterISS4ISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterISS4ISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterISS4ISS4ISS4 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterISS4ISS4ISS4_swigregister(itkSquaredDifferenceImageFilterISS4ISS4ISS4)

def itkSquaredDifferenceImageFilterIUC2IUC2IUC2_New():
    return itkSquaredDifferenceImageFilterIUC2IUC2IUC2.New()

class itkSquaredDifferenceImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterIUC2IUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIUC2IUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterIUC2IUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIUC2IUC2IUC2

        Create a new object of the class itkSquaredDifferenceImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterIUC2IUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterIUC2IUC2IUC2 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC2IUC2IUC2_swigregister(itkSquaredDifferenceImageFilterIUC2IUC2IUC2)

def itkSquaredDifferenceImageFilterIUC3IUC3IUC3_New():
    return itkSquaredDifferenceImageFilterIUC3IUC3IUC3.New()

class itkSquaredDifferenceImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterIUC3IUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIUC3IUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterIUC3IUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIUC3IUC3IUC3

        Create a new object of the class itkSquaredDifferenceImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterIUC3IUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterIUC3IUC3IUC3 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC3IUC3IUC3_swigregister(itkSquaredDifferenceImageFilterIUC3IUC3IUC3)

def itkSquaredDifferenceImageFilterIUC4IUC4IUC4_New():
    return itkSquaredDifferenceImageFilterIUC4IUC4IUC4.New()

class itkSquaredDifferenceImageFilterIUC4IUC4IUC4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC4IUC4IUC4):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterIUC4IUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC4IUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterIUC4IUC4IUC4_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC4IUC4IUC4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC4IUC4IUC4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC4IUC4IUC4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC4IUC4IUC4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIUC4IUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterIUC4IUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC4IUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIUC4IUC4IUC4

        Create a new object of the class itkSquaredDifferenceImageFilterIUC4IUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIUC4IUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIUC4IUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterIUC4IUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterIUC4IUC4IUC4 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUC4IUC4IUC4_swigregister(itkSquaredDifferenceImageFilterIUC4IUC4IUC4)

def itkSquaredDifferenceImageFilterIUS2IUS2IUS2_New():
    return itkSquaredDifferenceImageFilterIUS2IUS2IUS2.New()

class itkSquaredDifferenceImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterIUS2IUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIUS2IUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterIUS2IUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIUS2IUS2IUS2

        Create a new object of the class itkSquaredDifferenceImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterIUS2IUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterIUS2IUS2IUS2 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS2IUS2IUS2_swigregister(itkSquaredDifferenceImageFilterIUS2IUS2IUS2)

def itkSquaredDifferenceImageFilterIUS3IUS3IUS3_New():
    return itkSquaredDifferenceImageFilterIUS3IUS3IUS3.New()

class itkSquaredDifferenceImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterIUS3IUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIUS3IUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterIUS3IUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIUS3IUS3IUS3

        Create a new object of the class itkSquaredDifferenceImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterIUS3IUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterIUS3IUS3IUS3 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS3IUS3IUS3_swigregister(itkSquaredDifferenceImageFilterIUS3IUS3IUS3)

def itkSquaredDifferenceImageFilterIUS4IUS4IUS4_New():
    return itkSquaredDifferenceImageFilterIUS4IUS4IUS4.New()

class itkSquaredDifferenceImageFilterIUS4IUS4IUS4(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS4IUS4IUS4):
    r"""Proxy of C++ itkSquaredDifferenceImageFilterIUS4IUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSquaredDifferenceImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS4IUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSquaredDifferenceImageFilterIUS4IUS4IUS4_Pointer"""
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS4IUS4IUS4_Clone(self)
    Input1ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS4IUS4IUS4_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS4IUS4IUS4_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS4IUS4IUS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSquaredDifferenceImageFilterPython.delete_itkSquaredDifferenceImageFilterIUS4IUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSquaredDifferenceImageFilterIUS4IUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS4IUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSquaredDifferenceImageFilterIUS4IUS4IUS4

        Create a new object of the class itkSquaredDifferenceImageFilterIUS4IUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSquaredDifferenceImageFilterIUS4IUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSquaredDifferenceImageFilterIUS4IUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSquaredDifferenceImageFilterIUS4IUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSquaredDifferenceImageFilterIUS4IUS4IUS4 in _itkSquaredDifferenceImageFilterPython:
_itkSquaredDifferenceImageFilterPython.itkSquaredDifferenceImageFilterIUS4IUS4IUS4_swigregister(itkSquaredDifferenceImageFilterIUS4IUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def squared_difference_image_filter(*args: itkt.ImageLike,  constant1: int=..., constant2: int=..., constant: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SquaredDifferenceImageFilter"""
    import itk

    kwarg_typehints = { 'constant1':constant1,'constant2':constant2,'constant':constant }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SquaredDifferenceImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def squared_difference_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageCompare.SquaredDifferenceImageFilter
    squared_difference_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    squared_difference_image_filter.__doc__ = filter_object.__doc__



