# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAnisotropicFourthOrderLevelSetImageFilterPython
else:
    import _itkAnisotropicFourthOrderLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkSparseFieldFourthOrderLevelSetImageFilterPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkLevelSetFunctionPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkSparseFieldLevelSetImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterAPython

def itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_New():
    return itkAnisotropicFourthOrderLevelSetImageFilterID2ID2.New()

class itkAnisotropicFourthOrderLevelSetImageFilterID2ID2(itk.itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2):
    r"""Proxy of C++ itkAnisotropicFourthOrderLevelSetImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_Clone(self)

    def GetMaxFilterIteration(self):
        r"""GetMaxFilterIteration(self) -> unsigned int"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_GetMaxFilterIteration(self)

    def SetMaxFilterIteration(self, _arg):
        r"""
        SetMaxFilterIteration(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_SetMaxFilterIteration(self, _arg)
    __swig_destroy__ = _itkAnisotropicFourthOrderLevelSetImageFilterPython.delete_itkAnisotropicFourthOrderLevelSetImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAnisotropicFourthOrderLevelSetImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAnisotropicFourthOrderLevelSetImageFilterID2ID2

        Create a new object of the class itkAnisotropicFourthOrderLevelSetImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicFourthOrderLevelSetImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicFourthOrderLevelSetImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicFourthOrderLevelSetImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicFourthOrderLevelSetImageFilterID2ID2 in _itkAnisotropicFourthOrderLevelSetImageFilterPython:
_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_swigregister(itkAnisotropicFourthOrderLevelSetImageFilterID2ID2)

def itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_New():
    return itkAnisotropicFourthOrderLevelSetImageFilterID3ID3.New()

class itkAnisotropicFourthOrderLevelSetImageFilterID3ID3(itk.itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3):
    r"""Proxy of C++ itkAnisotropicFourthOrderLevelSetImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_Clone(self)

    def GetMaxFilterIteration(self):
        r"""GetMaxFilterIteration(self) -> unsigned int"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_GetMaxFilterIteration(self)

    def SetMaxFilterIteration(self, _arg):
        r"""
        SetMaxFilterIteration(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_SetMaxFilterIteration(self, _arg)
    __swig_destroy__ = _itkAnisotropicFourthOrderLevelSetImageFilterPython.delete_itkAnisotropicFourthOrderLevelSetImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAnisotropicFourthOrderLevelSetImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAnisotropicFourthOrderLevelSetImageFilterID3ID3

        Create a new object of the class itkAnisotropicFourthOrderLevelSetImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicFourthOrderLevelSetImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicFourthOrderLevelSetImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicFourthOrderLevelSetImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicFourthOrderLevelSetImageFilterID3ID3 in _itkAnisotropicFourthOrderLevelSetImageFilterPython:
_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_swigregister(itkAnisotropicFourthOrderLevelSetImageFilterID3ID3)

def itkAnisotropicFourthOrderLevelSetImageFilterID4ID4_New():
    return itkAnisotropicFourthOrderLevelSetImageFilterID4ID4.New()

class itkAnisotropicFourthOrderLevelSetImageFilterID4ID4(itk.itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID4ID4):
    r"""Proxy of C++ itkAnisotropicFourthOrderLevelSetImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterID4ID4_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAnisotropicFourthOrderLevelSetImageFilterID4ID4_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID4ID4_Clone(self)

    def GetMaxFilterIteration(self):
        r"""GetMaxFilterIteration(self) -> unsigned int"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID4ID4_GetMaxFilterIteration(self)

    def SetMaxFilterIteration(self, _arg):
        r"""
        SetMaxFilterIteration(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID4ID4_SetMaxFilterIteration(self, _arg)
    __swig_destroy__ = _itkAnisotropicFourthOrderLevelSetImageFilterPython.delete_itkAnisotropicFourthOrderLevelSetImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAnisotropicFourthOrderLevelSetImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAnisotropicFourthOrderLevelSetImageFilterID4ID4

        Create a new object of the class itkAnisotropicFourthOrderLevelSetImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicFourthOrderLevelSetImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicFourthOrderLevelSetImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicFourthOrderLevelSetImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicFourthOrderLevelSetImageFilterID4ID4 in _itkAnisotropicFourthOrderLevelSetImageFilterPython:
_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID4ID4_swigregister(itkAnisotropicFourthOrderLevelSetImageFilterID4ID4)

def itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_New():
    return itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2.New()

class itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2(itk.itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2):
    r"""Proxy of C++ itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_Clone(self)

    def GetMaxFilterIteration(self):
        r"""GetMaxFilterIteration(self) -> unsigned int"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_GetMaxFilterIteration(self)

    def SetMaxFilterIteration(self, _arg):
        r"""
        SetMaxFilterIteration(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_SetMaxFilterIteration(self, _arg)
    __swig_destroy__ = _itkAnisotropicFourthOrderLevelSetImageFilterPython.delete_itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2

        Create a new object of the class itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2 in _itkAnisotropicFourthOrderLevelSetImageFilterPython:
_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_swigregister(itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2)

def itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_New():
    return itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3.New()

class itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3(itk.itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3):
    r"""Proxy of C++ itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_Clone(self)

    def GetMaxFilterIteration(self):
        r"""GetMaxFilterIteration(self) -> unsigned int"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_GetMaxFilterIteration(self)

    def SetMaxFilterIteration(self, _arg):
        r"""
        SetMaxFilterIteration(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_SetMaxFilterIteration(self, _arg)
    __swig_destroy__ = _itkAnisotropicFourthOrderLevelSetImageFilterPython.delete_itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3

        Create a new object of the class itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3 in _itkAnisotropicFourthOrderLevelSetImageFilterPython:
_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_swigregister(itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3)

def itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4_New():
    return itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4.New()

class itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4(itk.itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF4IF4):
    r"""Proxy of C++ itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4_Clone(self)

    def GetMaxFilterIteration(self):
        r"""GetMaxFilterIteration(self) -> unsigned int"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4_GetMaxFilterIteration(self)

    def SetMaxFilterIteration(self, _arg):
        r"""
        SetMaxFilterIteration(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4_SetMaxFilterIteration(self, _arg)
    __swig_destroy__ = _itkAnisotropicFourthOrderLevelSetImageFilterPython.delete_itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4

        Create a new object of the class itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4 in _itkAnisotropicFourthOrderLevelSetImageFilterPython:
_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4_swigregister(itkAnisotropicFourthOrderLevelSetImageFilterIF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def anisotropic_fourth_order_level_set_image_filter(*args: itkt.ImageLike,  max_filter_iteration: int=..., max_refit_iteration: int=..., max_normal_iteration: int=..., curvature_band_width: float=..., rms_change_normal_process_trigger: float=..., normal_process_type: int=..., normal_process_conductance: float=..., normal_process_unsharp_flag: bool=..., normal_process_unsharp_weight: float=..., level_set_function=..., number_of_layers: Union[int, int]=..., iso_surface_value: float=..., interpolate_surface_location: bool=..., difference_function=..., number_of_iterations: int=..., use_image_spacing: bool=..., maximum_rms_error: float=..., rms_change: float=..., manual_reinitialization: bool=..., is_initialized: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for AnisotropicFourthOrderLevelSetImageFilter"""
    import itk

    kwarg_typehints = { 'max_filter_iteration':max_filter_iteration,'max_refit_iteration':max_refit_iteration,'max_normal_iteration':max_normal_iteration,'curvature_band_width':curvature_band_width,'rms_change_normal_process_trigger':rms_change_normal_process_trigger,'normal_process_type':normal_process_type,'normal_process_conductance':normal_process_conductance,'normal_process_unsharp_flag':normal_process_unsharp_flag,'normal_process_unsharp_weight':normal_process_unsharp_weight,'level_set_function':level_set_function,'number_of_layers':number_of_layers,'iso_surface_value':iso_surface_value,'interpolate_surface_location':interpolate_surface_location,'difference_function':difference_function,'number_of_iterations':number_of_iterations,'use_image_spacing':use_image_spacing,'maximum_rms_error':maximum_rms_error,'rms_change':rms_change,'manual_reinitialization':manual_reinitialization,'is_initialized':is_initialized }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.AnisotropicFourthOrderLevelSetImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def anisotropic_fourth_order_level_set_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLevelSets.AnisotropicFourthOrderLevelSetImageFilter
    anisotropic_fourth_order_level_set_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    anisotropic_fourth_order_level_set_image_filter.__doc__ = filter_object.__doc__



