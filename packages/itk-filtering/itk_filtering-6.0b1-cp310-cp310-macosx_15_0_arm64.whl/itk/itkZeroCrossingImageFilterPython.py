# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkZeroCrossingImageFilterPython
else:
    import _itkZeroCrossingImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkZeroCrossingImageFilterID2ID2_New():
    return itkZeroCrossingImageFilterID2ID2.New()

class itkZeroCrossingImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkZeroCrossingImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkZeroCrossingImageFilterID2ID2_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkZeroCrossingImageFilterID2ID2_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_GenerateInputRequestedRegion(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> double"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> double"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_GetBackgroundValue(self)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkZeroCrossingImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterID2ID2

        Create a new object of the class itkZeroCrossingImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterID2ID2 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_swigregister(itkZeroCrossingImageFilterID2ID2)

def itkZeroCrossingImageFilterID3ID3_New():
    return itkZeroCrossingImageFilterID3ID3.New()

class itkZeroCrossingImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkZeroCrossingImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkZeroCrossingImageFilterID3ID3_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkZeroCrossingImageFilterID3ID3_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_GenerateInputRequestedRegion(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> double"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> double"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_GetBackgroundValue(self)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkZeroCrossingImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterID3ID3

        Create a new object of the class itkZeroCrossingImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterID3ID3 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_swigregister(itkZeroCrossingImageFilterID3ID3)

def itkZeroCrossingImageFilterID4ID4_New():
    return itkZeroCrossingImageFilterID4ID4.New()

class itkZeroCrossingImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkZeroCrossingImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkZeroCrossingImageFilterID4ID4_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkZeroCrossingImageFilterID4ID4_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID4ID4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID4ID4_GenerateInputRequestedRegion(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID4ID4_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> double"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID4ID4_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID4ID4_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> double"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID4ID4_GetBackgroundValue(self)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID4ID4_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID4ID4_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID4ID4_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID4ID4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkZeroCrossingImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterID4ID4

        Create a new object of the class itkZeroCrossingImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterID4ID4 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID4ID4_swigregister(itkZeroCrossingImageFilterID4ID4)

def itkZeroCrossingImageFilterIF2IF2_New():
    return itkZeroCrossingImageFilterIF2IF2.New()

class itkZeroCrossingImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkZeroCrossingImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkZeroCrossingImageFilterIF2IF2_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkZeroCrossingImageFilterIF2IF2_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_GenerateInputRequestedRegion(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> float"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> float"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_GetBackgroundValue(self)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkZeroCrossingImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterIF2IF2

        Create a new object of the class itkZeroCrossingImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterIF2IF2 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_swigregister(itkZeroCrossingImageFilterIF2IF2)

def itkZeroCrossingImageFilterIF3IF3_New():
    return itkZeroCrossingImageFilterIF3IF3.New()

class itkZeroCrossingImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkZeroCrossingImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkZeroCrossingImageFilterIF3IF3_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkZeroCrossingImageFilterIF3IF3_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_GenerateInputRequestedRegion(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> float"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> float"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_GetBackgroundValue(self)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkZeroCrossingImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterIF3IF3

        Create a new object of the class itkZeroCrossingImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterIF3IF3 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_swigregister(itkZeroCrossingImageFilterIF3IF3)

def itkZeroCrossingImageFilterIF4IF4_New():
    return itkZeroCrossingImageFilterIF4IF4.New()

class itkZeroCrossingImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkZeroCrossingImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkZeroCrossingImageFilterIF4IF4_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkZeroCrossingImageFilterIF4IF4_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF4IF4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF4IF4_GenerateInputRequestedRegion(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF4IF4_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> float"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF4IF4_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF4IF4_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> float"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF4IF4_GetBackgroundValue(self)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF4IF4_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF4IF4_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF4IF4_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF4IF4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkZeroCrossingImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterIF4IF4

        Create a new object of the class itkZeroCrossingImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterIF4IF4 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF4IF4_swigregister(itkZeroCrossingImageFilterIF4IF4)

def itkZeroCrossingImageFilterISS2ISS2_New():
    return itkZeroCrossingImageFilterISS2ISS2.New()

class itkZeroCrossingImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkZeroCrossingImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkZeroCrossingImageFilterISS2ISS2_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkZeroCrossingImageFilterISS2ISS2_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_GenerateInputRequestedRegion(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> short"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> short"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_GetBackgroundValue(self)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkZeroCrossingImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterISS2ISS2

        Create a new object of the class itkZeroCrossingImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterISS2ISS2 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_swigregister(itkZeroCrossingImageFilterISS2ISS2)

def itkZeroCrossingImageFilterISS3ISS3_New():
    return itkZeroCrossingImageFilterISS3ISS3.New()

class itkZeroCrossingImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkZeroCrossingImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkZeroCrossingImageFilterISS3ISS3_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkZeroCrossingImageFilterISS3ISS3_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_GenerateInputRequestedRegion(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> short"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> short"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_GetBackgroundValue(self)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkZeroCrossingImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterISS3ISS3

        Create a new object of the class itkZeroCrossingImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterISS3ISS3 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_swigregister(itkZeroCrossingImageFilterISS3ISS3)

def itkZeroCrossingImageFilterISS4ISS4_New():
    return itkZeroCrossingImageFilterISS4ISS4.New()

class itkZeroCrossingImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkZeroCrossingImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkZeroCrossingImageFilterISS4ISS4_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkZeroCrossingImageFilterISS4ISS4_Pointer"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS4ISS4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS4ISS4_GenerateInputRequestedRegion(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS4ISS4_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> short"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS4ISS4_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS4ISS4_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> short"""
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS4ISS4_GetBackgroundValue(self)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS4ISS4_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS4ISS4_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS4ISS4_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS4ISS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkZeroCrossingImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterISS4ISS4

        Create a new object of the class itkZeroCrossingImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterISS4ISS4 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS4ISS4_swigregister(itkZeroCrossingImageFilterISS4ISS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def zero_crossing_image_filter(*args: itkt.ImageLike,  foreground_value: float=..., background_value: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ZeroCrossingImageFilter"""
    import itk

    kwarg_typehints = { 'foreground_value':foreground_value,'background_value':background_value }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ZeroCrossingImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def zero_crossing_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageFeature.ZeroCrossingImageFilter
    zero_crossing_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    zero_crossing_image_filter.__doc__ = filter_object.__doc__



