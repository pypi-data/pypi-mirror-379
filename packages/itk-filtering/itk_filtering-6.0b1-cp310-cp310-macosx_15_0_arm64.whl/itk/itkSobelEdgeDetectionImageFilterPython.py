# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSobelEdgeDetectionImageFilterPython
else:
    import _itkSobelEdgeDetectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkSobelEdgeDetectionImageFilterID2ID2_New():
    return itkSobelEdgeDetectionImageFilterID2ID2.New()

class itkSobelEdgeDetectionImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkSobelEdgeDetectionImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSobelEdgeDetectionImageFilterID2ID2_Pointer"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSobelEdgeDetectionImageFilterID2ID2_Pointer"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_GenerateInputRequestedRegion(self)
    SameDimensionCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_OutputHasNumericTraitsCheck
    
    OutputPixelIsFloatingPointCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_OutputPixelIsFloatingPointCheck
    
    __swig_destroy__ = _itkSobelEdgeDetectionImageFilterPython.delete_itkSobelEdgeDetectionImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSobelEdgeDetectionImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSobelEdgeDetectionImageFilterID2ID2

        Create a new object of the class itkSobelEdgeDetectionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSobelEdgeDetectionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSobelEdgeDetectionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSobelEdgeDetectionImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSobelEdgeDetectionImageFilterID2ID2 in _itkSobelEdgeDetectionImageFilterPython:
_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID2ID2_swigregister(itkSobelEdgeDetectionImageFilterID2ID2)

def itkSobelEdgeDetectionImageFilterID3ID3_New():
    return itkSobelEdgeDetectionImageFilterID3ID3.New()

class itkSobelEdgeDetectionImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkSobelEdgeDetectionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSobelEdgeDetectionImageFilterID3ID3_Pointer"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSobelEdgeDetectionImageFilterID3ID3_Pointer"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_GenerateInputRequestedRegion(self)
    SameDimensionCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_OutputHasNumericTraitsCheck
    
    OutputPixelIsFloatingPointCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_OutputPixelIsFloatingPointCheck
    
    __swig_destroy__ = _itkSobelEdgeDetectionImageFilterPython.delete_itkSobelEdgeDetectionImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSobelEdgeDetectionImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSobelEdgeDetectionImageFilterID3ID3

        Create a new object of the class itkSobelEdgeDetectionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSobelEdgeDetectionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSobelEdgeDetectionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSobelEdgeDetectionImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSobelEdgeDetectionImageFilterID3ID3 in _itkSobelEdgeDetectionImageFilterPython:
_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID3ID3_swigregister(itkSobelEdgeDetectionImageFilterID3ID3)

def itkSobelEdgeDetectionImageFilterID4ID4_New():
    return itkSobelEdgeDetectionImageFilterID4ID4.New()

class itkSobelEdgeDetectionImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkSobelEdgeDetectionImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSobelEdgeDetectionImageFilterID4ID4_Pointer"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSobelEdgeDetectionImageFilterID4ID4_Pointer"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID4ID4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID4ID4_GenerateInputRequestedRegion(self)
    SameDimensionCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID4ID4_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID4ID4_OutputHasNumericTraitsCheck
    
    OutputPixelIsFloatingPointCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID4ID4_OutputPixelIsFloatingPointCheck
    
    __swig_destroy__ = _itkSobelEdgeDetectionImageFilterPython.delete_itkSobelEdgeDetectionImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSobelEdgeDetectionImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSobelEdgeDetectionImageFilterID4ID4

        Create a new object of the class itkSobelEdgeDetectionImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSobelEdgeDetectionImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSobelEdgeDetectionImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSobelEdgeDetectionImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSobelEdgeDetectionImageFilterID4ID4 in _itkSobelEdgeDetectionImageFilterPython:
_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterID4ID4_swigregister(itkSobelEdgeDetectionImageFilterID4ID4)

def itkSobelEdgeDetectionImageFilterIF2IF2_New():
    return itkSobelEdgeDetectionImageFilterIF2IF2.New()

class itkSobelEdgeDetectionImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkSobelEdgeDetectionImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSobelEdgeDetectionImageFilterIF2IF2_Pointer"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSobelEdgeDetectionImageFilterIF2IF2_Pointer"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_GenerateInputRequestedRegion(self)
    SameDimensionCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_OutputHasNumericTraitsCheck
    
    OutputPixelIsFloatingPointCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_OutputPixelIsFloatingPointCheck
    
    __swig_destroy__ = _itkSobelEdgeDetectionImageFilterPython.delete_itkSobelEdgeDetectionImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSobelEdgeDetectionImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSobelEdgeDetectionImageFilterIF2IF2

        Create a new object of the class itkSobelEdgeDetectionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSobelEdgeDetectionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSobelEdgeDetectionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSobelEdgeDetectionImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSobelEdgeDetectionImageFilterIF2IF2 in _itkSobelEdgeDetectionImageFilterPython:
_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF2IF2_swigregister(itkSobelEdgeDetectionImageFilterIF2IF2)

def itkSobelEdgeDetectionImageFilterIF3IF3_New():
    return itkSobelEdgeDetectionImageFilterIF3IF3.New()

class itkSobelEdgeDetectionImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkSobelEdgeDetectionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSobelEdgeDetectionImageFilterIF3IF3_Pointer"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSobelEdgeDetectionImageFilterIF3IF3_Pointer"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_GenerateInputRequestedRegion(self)
    SameDimensionCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_OutputHasNumericTraitsCheck
    
    OutputPixelIsFloatingPointCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_OutputPixelIsFloatingPointCheck
    
    __swig_destroy__ = _itkSobelEdgeDetectionImageFilterPython.delete_itkSobelEdgeDetectionImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSobelEdgeDetectionImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSobelEdgeDetectionImageFilterIF3IF3

        Create a new object of the class itkSobelEdgeDetectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSobelEdgeDetectionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSobelEdgeDetectionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSobelEdgeDetectionImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSobelEdgeDetectionImageFilterIF3IF3 in _itkSobelEdgeDetectionImageFilterPython:
_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF3IF3_swigregister(itkSobelEdgeDetectionImageFilterIF3IF3)

def itkSobelEdgeDetectionImageFilterIF4IF4_New():
    return itkSobelEdgeDetectionImageFilterIF4IF4.New()

class itkSobelEdgeDetectionImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkSobelEdgeDetectionImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSobelEdgeDetectionImageFilterIF4IF4_Pointer"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSobelEdgeDetectionImageFilterIF4IF4_Pointer"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF4IF4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF4IF4_GenerateInputRequestedRegion(self)
    SameDimensionCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF4IF4_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF4IF4_OutputHasNumericTraitsCheck
    
    OutputPixelIsFloatingPointCheck = _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF4IF4_OutputPixelIsFloatingPointCheck
    
    __swig_destroy__ = _itkSobelEdgeDetectionImageFilterPython.delete_itkSobelEdgeDetectionImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSobelEdgeDetectionImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSobelEdgeDetectionImageFilterIF4IF4

        Create a new object of the class itkSobelEdgeDetectionImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSobelEdgeDetectionImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSobelEdgeDetectionImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSobelEdgeDetectionImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSobelEdgeDetectionImageFilterIF4IF4 in _itkSobelEdgeDetectionImageFilterPython:
_itkSobelEdgeDetectionImageFilterPython.itkSobelEdgeDetectionImageFilterIF4IF4_swigregister(itkSobelEdgeDetectionImageFilterIF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def sobel_edge_detection_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SobelEdgeDetectionImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SobelEdgeDetectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def sobel_edge_detection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageFeature.SobelEdgeDetectionImageFilter
    sobel_edge_detection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    sobel_edge_detection_image_filter.__doc__ = filter_object.__doc__



