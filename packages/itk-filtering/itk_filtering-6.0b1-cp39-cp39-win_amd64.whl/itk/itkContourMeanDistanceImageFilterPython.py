# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDistanceMapPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkContourMeanDistanceImageFilterPython
else:
    import _itkContourMeanDistanceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkContourMeanDistanceImageFilterID2ID2_New():
    return itkContourMeanDistanceImageFilterID2ID2.New()

class itkContourMeanDistanceImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterID2ID2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterID2ID2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterID2ID2

        Create a new object of the class itkContourMeanDistanceImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterID2ID2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_swigregister(itkContourMeanDistanceImageFilterID2ID2)

def itkContourMeanDistanceImageFilterID3ID3_New():
    return itkContourMeanDistanceImageFilterID3ID3.New()

class itkContourMeanDistanceImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterID3ID3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterID3ID3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterID3ID3

        Create a new object of the class itkContourMeanDistanceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterID3ID3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_swigregister(itkContourMeanDistanceImageFilterID3ID3)

def itkContourMeanDistanceImageFilterID4ID4_New():
    return itkContourMeanDistanceImageFilterID4ID4.New()

class itkContourMeanDistanceImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterID4ID4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterID4ID4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterID4ID4

        Create a new object of the class itkContourMeanDistanceImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterID4ID4 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID4ID4_swigregister(itkContourMeanDistanceImageFilterID4ID4)

def itkContourMeanDistanceImageFilterIF2IF2_New():
    return itkContourMeanDistanceImageFilterIF2IF2.New()

class itkContourMeanDistanceImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIF2IF2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIF2IF2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIF2IF2

        Create a new object of the class itkContourMeanDistanceImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIF2IF2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_swigregister(itkContourMeanDistanceImageFilterIF2IF2)

def itkContourMeanDistanceImageFilterIF3IF3_New():
    return itkContourMeanDistanceImageFilterIF3IF3.New()

class itkContourMeanDistanceImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIF3IF3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIF3IF3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIF3IF3

        Create a new object of the class itkContourMeanDistanceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIF3IF3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_swigregister(itkContourMeanDistanceImageFilterIF3IF3)

def itkContourMeanDistanceImageFilterIF4IF4_New():
    return itkContourMeanDistanceImageFilterIF4IF4.New()

class itkContourMeanDistanceImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIF4IF4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIF4IF4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIF4IF4

        Create a new object of the class itkContourMeanDistanceImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIF4IF4 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF4IF4_swigregister(itkContourMeanDistanceImageFilterIF4IF4)

def itkContourMeanDistanceImageFilterISS2ISS2_New():
    return itkContourMeanDistanceImageFilterISS2ISS2.New()

class itkContourMeanDistanceImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterISS2ISS2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterISS2ISS2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageSS2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageSS2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterISS2ISS2

        Create a new object of the class itkContourMeanDistanceImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterISS2ISS2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_swigregister(itkContourMeanDistanceImageFilterISS2ISS2)

def itkContourMeanDistanceImageFilterISS3ISS3_New():
    return itkContourMeanDistanceImageFilterISS3ISS3.New()

class itkContourMeanDistanceImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterISS3ISS3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterISS3ISS3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageSS3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageSS3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterISS3ISS3

        Create a new object of the class itkContourMeanDistanceImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterISS3ISS3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_swigregister(itkContourMeanDistanceImageFilterISS3ISS3)

def itkContourMeanDistanceImageFilterISS4ISS4_New():
    return itkContourMeanDistanceImageFilterISS4ISS4.New()

class itkContourMeanDistanceImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterISS4ISS4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterISS4ISS4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageSS4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageSS4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterISS4ISS4

        Create a new object of the class itkContourMeanDistanceImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterISS4ISS4 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS4ISS4_swigregister(itkContourMeanDistanceImageFilterISS4ISS4)

def itkContourMeanDistanceImageFilterIUC2ID2_New():
    return itkContourMeanDistanceImageFilterIUC2ID2.New()

class itkContourMeanDistanceImageFilterIUC2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIUC2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIUC2ID2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIUC2ID2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUC2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIUC2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUC2ID2

        Create a new object of the class itkContourMeanDistanceImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUC2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUC2ID2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_swigregister(itkContourMeanDistanceImageFilterIUC2ID2)

def itkContourMeanDistanceImageFilterIUC2IF2_New():
    return itkContourMeanDistanceImageFilterIUC2IF2.New()

class itkContourMeanDistanceImageFilterIUC2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIUC2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIUC2IF2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIUC2IF2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUC2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIUC2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUC2IF2

        Create a new object of the class itkContourMeanDistanceImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUC2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUC2IF2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_swigregister(itkContourMeanDistanceImageFilterIUC2IF2)

def itkContourMeanDistanceImageFilterIUC3ID3_New():
    return itkContourMeanDistanceImageFilterIUC3ID3.New()

class itkContourMeanDistanceImageFilterIUC3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIUC3ID3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIUC3ID3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUC3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIUC3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUC3ID3

        Create a new object of the class itkContourMeanDistanceImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUC3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUC3ID3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_swigregister(itkContourMeanDistanceImageFilterIUC3ID3)

def itkContourMeanDistanceImageFilterIUC3IF3_New():
    return itkContourMeanDistanceImageFilterIUC3IF3.New()

class itkContourMeanDistanceImageFilterIUC3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIUC3IF3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIUC3IF3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUC3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIUC3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUC3IF3

        Create a new object of the class itkContourMeanDistanceImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUC3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUC3IF3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_swigregister(itkContourMeanDistanceImageFilterIUC3IF3)

def itkContourMeanDistanceImageFilterIUC4ID4_New():
    return itkContourMeanDistanceImageFilterIUC4ID4.New()

class itkContourMeanDistanceImageFilterIUC4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIUC4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIUC4ID4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIUC4ID4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUC4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIUC4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUC4ID4

        Create a new object of the class itkContourMeanDistanceImageFilterIUC4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUC4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUC4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUC4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUC4ID4 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4ID4_swigregister(itkContourMeanDistanceImageFilterIUC4ID4)

def itkContourMeanDistanceImageFilterIUC4IF4_New():
    return itkContourMeanDistanceImageFilterIUC4IF4.New()

class itkContourMeanDistanceImageFilterIUC4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIUC4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIUC4IF4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIUC4IF4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUC4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIUC4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUC4IF4

        Create a new object of the class itkContourMeanDistanceImageFilterIUC4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUC4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUC4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUC4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUC4IF4 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC4IF4_swigregister(itkContourMeanDistanceImageFilterIUC4IF4)

def itkContourMeanDistanceImageFilterIUS2ID2_New():
    return itkContourMeanDistanceImageFilterIUS2ID2.New()

class itkContourMeanDistanceImageFilterIUS2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIUS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIUS2ID2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIUS2ID2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUS2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIUS2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUS2ID2

        Create a new object of the class itkContourMeanDistanceImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUS2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUS2ID2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_swigregister(itkContourMeanDistanceImageFilterIUS2ID2)

def itkContourMeanDistanceImageFilterIUS2IF2_New():
    return itkContourMeanDistanceImageFilterIUS2IF2.New()

class itkContourMeanDistanceImageFilterIUS2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIUS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIUS2IF2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIUS2IF2_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF2"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUS2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIUS2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUS2IF2

        Create a new object of the class itkContourMeanDistanceImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUS2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUS2IF2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_swigregister(itkContourMeanDistanceImageFilterIUS2IF2)

def itkContourMeanDistanceImageFilterIUS3ID3_New():
    return itkContourMeanDistanceImageFilterIUS3ID3.New()

class itkContourMeanDistanceImageFilterIUS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIUS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIUS3ID3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIUS3ID3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIUS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUS3ID3

        Create a new object of the class itkContourMeanDistanceImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUS3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUS3ID3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_swigregister(itkContourMeanDistanceImageFilterIUS3ID3)

def itkContourMeanDistanceImageFilterIUS3IF3_New():
    return itkContourMeanDistanceImageFilterIUS3IF3.New()

class itkContourMeanDistanceImageFilterIUS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIUS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIUS3IF3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIUS3IF3_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF3"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIUS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUS3IF3

        Create a new object of the class itkContourMeanDistanceImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUS3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUS3IF3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_swigregister(itkContourMeanDistanceImageFilterIUS3IF3)

def itkContourMeanDistanceImageFilterIUS4ID4_New():
    return itkContourMeanDistanceImageFilterIUS4ID4.New()

class itkContourMeanDistanceImageFilterIUS4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIUS4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIUS4ID4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIUS4ID4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUS4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIUS4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUS4ID4

        Create a new object of the class itkContourMeanDistanceImageFilterIUS4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUS4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUS4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUS4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUS4ID4 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4ID4_swigregister(itkContourMeanDistanceImageFilterIUS4ID4)

def itkContourMeanDistanceImageFilterIUS4IF4_New():
    return itkContourMeanDistanceImageFilterIUS4IF4.New()

class itkContourMeanDistanceImageFilterIUS4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkContourMeanDistanceImageFilterIUS4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourMeanDistanceImageFilterIUS4IF4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourMeanDistanceImageFilterIUS4IF4_Pointer"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF4"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4_GetInput2(self)

    def GetMeanDistance(self):
        r"""GetMeanDistance(self) -> double"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4_GetMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUS4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourMeanDistanceImageFilterIUS4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUS4IF4

        Create a new object of the class itkContourMeanDistanceImageFilterIUS4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUS4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUS4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUS4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUS4IF4 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS4IF4_swigregister(itkContourMeanDistanceImageFilterIUS4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def contour_mean_distance_image_filter(*args: itkt.ImageLike,  use_image_spacing: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ContourMeanDistanceImageFilter"""
    import itk

    kwarg_typehints = { 'use_image_spacing':use_image_spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ContourMeanDistanceImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def contour_mean_distance_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKDistanceMap.ContourMeanDistanceImageFilter
    contour_mean_distance_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    contour_mean_distance_image_filter.__doc__ = filter_object.__doc__



