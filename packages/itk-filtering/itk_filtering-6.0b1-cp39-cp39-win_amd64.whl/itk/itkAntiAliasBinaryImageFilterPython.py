# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKAntiAliasPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAntiAliasBinaryImageFilterPython
else:
    import _itkAntiAliasBinaryImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.itkSparseFieldLevelSetImageFilterPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterBPython
import itk.itkFiniteDifferenceFunctionPython

def itkAntiAliasBinaryImageFilterID2ID2_New():
    return itkAntiAliasBinaryImageFilterID2ID2.New()

class itkAntiAliasBinaryImageFilterID2ID2(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2):
    r"""Proxy of C++ itkAntiAliasBinaryImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAntiAliasBinaryImageFilterID2ID2_Pointer"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAntiAliasBinaryImageFilterID2ID2_Pointer"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_Clone(self)

    def GetUpperBinaryValue(self):
        r"""GetUpperBinaryValue(self) -> double"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_GetUpperBinaryValue(self)

    def GetLowerBinaryValue(self):
        r"""GetLowerBinaryValue(self) -> double"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_GetLowerBinaryValue(self)

    def SetMaximumIterations(self, i):
        r"""
        SetMaximumIterations(self, i)

        Parameters
        ----------
        i: unsigned int

        """
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_SetMaximumIterations(self, i)

    def GetMaximumIterations(self):
        r"""GetMaximumIterations(self) -> unsigned int"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_GetMaximumIterations(self)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAntiAliasBinaryImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterID2ID2

        Create a new object of the class itkAntiAliasBinaryImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterID2ID2 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_swigregister(itkAntiAliasBinaryImageFilterID2ID2)

def itkAntiAliasBinaryImageFilterID3ID3_New():
    return itkAntiAliasBinaryImageFilterID3ID3.New()

class itkAntiAliasBinaryImageFilterID3ID3(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3):
    r"""Proxy of C++ itkAntiAliasBinaryImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAntiAliasBinaryImageFilterID3ID3_Pointer"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAntiAliasBinaryImageFilterID3ID3_Pointer"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_Clone(self)

    def GetUpperBinaryValue(self):
        r"""GetUpperBinaryValue(self) -> double"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_GetUpperBinaryValue(self)

    def GetLowerBinaryValue(self):
        r"""GetLowerBinaryValue(self) -> double"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_GetLowerBinaryValue(self)

    def SetMaximumIterations(self, i):
        r"""
        SetMaximumIterations(self, i)

        Parameters
        ----------
        i: unsigned int

        """
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_SetMaximumIterations(self, i)

    def GetMaximumIterations(self):
        r"""GetMaximumIterations(self) -> unsigned int"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_GetMaximumIterations(self)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAntiAliasBinaryImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterID3ID3

        Create a new object of the class itkAntiAliasBinaryImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterID3ID3 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_swigregister(itkAntiAliasBinaryImageFilterID3ID3)

def itkAntiAliasBinaryImageFilterID4ID4_New():
    return itkAntiAliasBinaryImageFilterID4ID4.New()

class itkAntiAliasBinaryImageFilterID4ID4(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID4ID4):
    r"""Proxy of C++ itkAntiAliasBinaryImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAntiAliasBinaryImageFilterID4ID4_Pointer"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAntiAliasBinaryImageFilterID4ID4_Pointer"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID4ID4_Clone(self)

    def GetUpperBinaryValue(self):
        r"""GetUpperBinaryValue(self) -> double"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID4ID4_GetUpperBinaryValue(self)

    def GetLowerBinaryValue(self):
        r"""GetLowerBinaryValue(self) -> double"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID4ID4_GetLowerBinaryValue(self)

    def SetMaximumIterations(self, i):
        r"""
        SetMaximumIterations(self, i)

        Parameters
        ----------
        i: unsigned int

        """
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID4ID4_SetMaximumIterations(self, i)

    def GetMaximumIterations(self):
        r"""GetMaximumIterations(self) -> unsigned int"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID4ID4_GetMaximumIterations(self)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID4ID4_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAntiAliasBinaryImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterID4ID4

        Create a new object of the class itkAntiAliasBinaryImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterID4ID4 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID4ID4_swigregister(itkAntiAliasBinaryImageFilterID4ID4)

def itkAntiAliasBinaryImageFilterIF2IF2_New():
    return itkAntiAliasBinaryImageFilterIF2IF2.New()

class itkAntiAliasBinaryImageFilterIF2IF2(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2):
    r"""Proxy of C++ itkAntiAliasBinaryImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAntiAliasBinaryImageFilterIF2IF2_Pointer"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAntiAliasBinaryImageFilterIF2IF2_Pointer"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_Clone(self)

    def GetUpperBinaryValue(self):
        r"""GetUpperBinaryValue(self) -> float"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_GetUpperBinaryValue(self)

    def GetLowerBinaryValue(self):
        r"""GetLowerBinaryValue(self) -> float"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_GetLowerBinaryValue(self)

    def SetMaximumIterations(self, i):
        r"""
        SetMaximumIterations(self, i)

        Parameters
        ----------
        i: unsigned int

        """
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_SetMaximumIterations(self, i)

    def GetMaximumIterations(self):
        r"""GetMaximumIterations(self) -> unsigned int"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_GetMaximumIterations(self)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAntiAliasBinaryImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterIF2IF2

        Create a new object of the class itkAntiAliasBinaryImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterIF2IF2 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_swigregister(itkAntiAliasBinaryImageFilterIF2IF2)

def itkAntiAliasBinaryImageFilterIF3IF3_New():
    return itkAntiAliasBinaryImageFilterIF3IF3.New()

class itkAntiAliasBinaryImageFilterIF3IF3(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3):
    r"""Proxy of C++ itkAntiAliasBinaryImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAntiAliasBinaryImageFilterIF3IF3_Pointer"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAntiAliasBinaryImageFilterIF3IF3_Pointer"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_Clone(self)

    def GetUpperBinaryValue(self):
        r"""GetUpperBinaryValue(self) -> float"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_GetUpperBinaryValue(self)

    def GetLowerBinaryValue(self):
        r"""GetLowerBinaryValue(self) -> float"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_GetLowerBinaryValue(self)

    def SetMaximumIterations(self, i):
        r"""
        SetMaximumIterations(self, i)

        Parameters
        ----------
        i: unsigned int

        """
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_SetMaximumIterations(self, i)

    def GetMaximumIterations(self):
        r"""GetMaximumIterations(self) -> unsigned int"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_GetMaximumIterations(self)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAntiAliasBinaryImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterIF3IF3

        Create a new object of the class itkAntiAliasBinaryImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterIF3IF3 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_swigregister(itkAntiAliasBinaryImageFilterIF3IF3)

def itkAntiAliasBinaryImageFilterIF4IF4_New():
    return itkAntiAliasBinaryImageFilterIF4IF4.New()

class itkAntiAliasBinaryImageFilterIF4IF4(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF4IF4):
    r"""Proxy of C++ itkAntiAliasBinaryImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAntiAliasBinaryImageFilterIF4IF4_Pointer"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAntiAliasBinaryImageFilterIF4IF4_Pointer"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF4IF4_Clone(self)

    def GetUpperBinaryValue(self):
        r"""GetUpperBinaryValue(self) -> float"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF4IF4_GetUpperBinaryValue(self)

    def GetLowerBinaryValue(self):
        r"""GetLowerBinaryValue(self) -> float"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF4IF4_GetLowerBinaryValue(self)

    def SetMaximumIterations(self, i):
        r"""
        SetMaximumIterations(self, i)

        Parameters
        ----------
        i: unsigned int

        """
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF4IF4_SetMaximumIterations(self, i)

    def GetMaximumIterations(self):
        r"""GetMaximumIterations(self) -> unsigned int"""
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF4IF4_GetMaximumIterations(self)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF4IF4_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAntiAliasBinaryImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterIF4IF4

        Create a new object of the class itkAntiAliasBinaryImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterIF4IF4 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF4IF4_swigregister(itkAntiAliasBinaryImageFilterIF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def anti_alias_binary_image_filter(*args: itkt.ImageLike,  maximum_iterations: int=..., number_of_layers: int=..., iso_surface_value: float=..., interpolate_surface_location: bool=..., difference_function=..., number_of_iterations: int=..., use_image_spacing: bool=..., maximum_rms_error: float=..., rms_change: float=..., manual_reinitialization: bool=..., is_initialized: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for AntiAliasBinaryImageFilter"""
    import itk

    kwarg_typehints = { 'maximum_iterations':maximum_iterations,'number_of_layers':number_of_layers,'iso_surface_value':iso_surface_value,'interpolate_surface_location':interpolate_surface_location,'difference_function':difference_function,'number_of_iterations':number_of_iterations,'use_image_spacing':use_image_spacing,'maximum_rms_error':maximum_rms_error,'rms_change':rms_change,'manual_reinitialization':manual_reinitialization,'is_initialized':is_initialized }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.AntiAliasBinaryImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def anti_alias_binary_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKAntiAlias.AntiAliasBinaryImageFilter
    anti_alias_binary_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    anti_alias_binary_image_filter.__doc__ = filter_object.__doc__



