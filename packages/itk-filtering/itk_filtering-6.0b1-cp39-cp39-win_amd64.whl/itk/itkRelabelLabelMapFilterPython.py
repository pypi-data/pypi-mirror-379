# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLabelMapPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRelabelLabelMapFilterPython
else:
    import _itkRelabelLabelMapFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkInPlaceLabelMapFilterPython
import itk.itkLabelMapFilterPython
import itk.ITKLabelMapBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkStatisticsLabelObjectPython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkArrayPython
import itk.itkShapeLabelObjectPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkOptimizerParametersPython
import itk.itkTransformBasePython
import itk.itkLabelObjectPython
import itk.itkLabelObjectLinePython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkRelabelLabelMapFilterLM2_Superclass_New():
    return itkRelabelLabelMapFilterLM2_Superclass.New()

class itkRelabelLabelMapFilterLM2_Superclass(itk.itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM2):
    r"""Proxy of C++ itkRelabelLabelMapFilterLM2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRelabelLabelMapFilterLM2_Superclass_Pointer"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRelabelLabelMapFilterLM2_Superclass_Pointer"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM2_Superclass_Clone(self)

    def SetReverseOrdering(self, _arg):
        r"""
        SetReverseOrdering(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM2_Superclass_SetReverseOrdering(self, _arg)

    def GetReverseOrdering(self):
        r"""GetReverseOrdering(self) -> bool const &"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM2_Superclass_GetReverseOrdering(self)

    def ReverseOrderingOn(self):
        r"""ReverseOrderingOn(self)"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM2_Superclass_ReverseOrderingOn(self)

    def ReverseOrderingOff(self):
        r"""ReverseOrderingOff(self)"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM2_Superclass_ReverseOrderingOff(self)
    __swig_destroy__ = _itkRelabelLabelMapFilterPython.delete_itkRelabelLabelMapFilterLM2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRelabelLabelMapFilterLM2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRelabelLabelMapFilterLM2_Superclass

        Create a new object of the class itkRelabelLabelMapFilterLM2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRelabelLabelMapFilterLM2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRelabelLabelMapFilterLM2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRelabelLabelMapFilterLM2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRelabelLabelMapFilterLM2_Superclass in _itkRelabelLabelMapFilterPython:
_itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM2_Superclass_swigregister(itkRelabelLabelMapFilterLM2_Superclass)

def itkRelabelLabelMapFilterLM3_Superclass_New():
    return itkRelabelLabelMapFilterLM3_Superclass.New()

class itkRelabelLabelMapFilterLM3_Superclass(itk.itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM3):
    r"""Proxy of C++ itkRelabelLabelMapFilterLM3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRelabelLabelMapFilterLM3_Superclass_Pointer"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRelabelLabelMapFilterLM3_Superclass_Pointer"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM3_Superclass_Clone(self)

    def SetReverseOrdering(self, _arg):
        r"""
        SetReverseOrdering(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM3_Superclass_SetReverseOrdering(self, _arg)

    def GetReverseOrdering(self):
        r"""GetReverseOrdering(self) -> bool const &"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM3_Superclass_GetReverseOrdering(self)

    def ReverseOrderingOn(self):
        r"""ReverseOrderingOn(self)"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM3_Superclass_ReverseOrderingOn(self)

    def ReverseOrderingOff(self):
        r"""ReverseOrderingOff(self)"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM3_Superclass_ReverseOrderingOff(self)
    __swig_destroy__ = _itkRelabelLabelMapFilterPython.delete_itkRelabelLabelMapFilterLM3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRelabelLabelMapFilterLM3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRelabelLabelMapFilterLM3_Superclass

        Create a new object of the class itkRelabelLabelMapFilterLM3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRelabelLabelMapFilterLM3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRelabelLabelMapFilterLM3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRelabelLabelMapFilterLM3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRelabelLabelMapFilterLM3_Superclass in _itkRelabelLabelMapFilterPython:
_itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM3_Superclass_swigregister(itkRelabelLabelMapFilterLM3_Superclass)

def itkRelabelLabelMapFilterLM4_Superclass_New():
    return itkRelabelLabelMapFilterLM4_Superclass.New()

class itkRelabelLabelMapFilterLM4_Superclass(itk.itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM4):
    r"""Proxy of C++ itkRelabelLabelMapFilterLM4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRelabelLabelMapFilterLM4_Superclass_Pointer"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRelabelLabelMapFilterLM4_Superclass_Pointer"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM4_Superclass_Clone(self)

    def SetReverseOrdering(self, _arg):
        r"""
        SetReverseOrdering(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM4_Superclass_SetReverseOrdering(self, _arg)

    def GetReverseOrdering(self):
        r"""GetReverseOrdering(self) -> bool const &"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM4_Superclass_GetReverseOrdering(self)

    def ReverseOrderingOn(self):
        r"""ReverseOrderingOn(self)"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM4_Superclass_ReverseOrderingOn(self)

    def ReverseOrderingOff(self):
        r"""ReverseOrderingOff(self)"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM4_Superclass_ReverseOrderingOff(self)
    __swig_destroy__ = _itkRelabelLabelMapFilterPython.delete_itkRelabelLabelMapFilterLM4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRelabelLabelMapFilterLM4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRelabelLabelMapFilterLM4_Superclass

        Create a new object of the class itkRelabelLabelMapFilterLM4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRelabelLabelMapFilterLM4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRelabelLabelMapFilterLM4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRelabelLabelMapFilterLM4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRelabelLabelMapFilterLM4_Superclass in _itkRelabelLabelMapFilterPython:
_itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM4_Superclass_swigregister(itkRelabelLabelMapFilterLM4_Superclass)

def itkRelabelLabelMapFilterLM2_New():
    return itkRelabelLabelMapFilterLM2.New()

class itkRelabelLabelMapFilterLM2(itkRelabelLabelMapFilterLM2_Superclass):
    r"""Proxy of C++ itkRelabelLabelMapFilterLM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRelabelLabelMapFilterLM2_Pointer"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRelabelLabelMapFilterLM2_Pointer"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM2_Clone(self)
    __swig_destroy__ = _itkRelabelLabelMapFilterPython.delete_itkRelabelLabelMapFilterLM2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRelabelLabelMapFilterLM2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRelabelLabelMapFilterLM2

        Create a new object of the class itkRelabelLabelMapFilterLM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRelabelLabelMapFilterLM2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRelabelLabelMapFilterLM2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRelabelLabelMapFilterLM2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRelabelLabelMapFilterLM2 in _itkRelabelLabelMapFilterPython:
_itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM2_swigregister(itkRelabelLabelMapFilterLM2)

def itkRelabelLabelMapFilterLM3_New():
    return itkRelabelLabelMapFilterLM3.New()

class itkRelabelLabelMapFilterLM3(itkRelabelLabelMapFilterLM3_Superclass):
    r"""Proxy of C++ itkRelabelLabelMapFilterLM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRelabelLabelMapFilterLM3_Pointer"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRelabelLabelMapFilterLM3_Pointer"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM3_Clone(self)
    __swig_destroy__ = _itkRelabelLabelMapFilterPython.delete_itkRelabelLabelMapFilterLM3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRelabelLabelMapFilterLM3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRelabelLabelMapFilterLM3

        Create a new object of the class itkRelabelLabelMapFilterLM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRelabelLabelMapFilterLM3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRelabelLabelMapFilterLM3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRelabelLabelMapFilterLM3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRelabelLabelMapFilterLM3 in _itkRelabelLabelMapFilterPython:
_itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM3_swigregister(itkRelabelLabelMapFilterLM3)

def itkRelabelLabelMapFilterLM4_New():
    return itkRelabelLabelMapFilterLM4.New()

class itkRelabelLabelMapFilterLM4(itkRelabelLabelMapFilterLM4_Superclass):
    r"""Proxy of C++ itkRelabelLabelMapFilterLM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRelabelLabelMapFilterLM4_Pointer"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRelabelLabelMapFilterLM4_Pointer"""
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM4_Clone(self)
    __swig_destroy__ = _itkRelabelLabelMapFilterPython.delete_itkRelabelLabelMapFilterLM4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRelabelLabelMapFilterLM4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRelabelLabelMapFilterLM4

        Create a new object of the class itkRelabelLabelMapFilterLM4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRelabelLabelMapFilterLM4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRelabelLabelMapFilterLM4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRelabelLabelMapFilterLM4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRelabelLabelMapFilterLM4 in _itkRelabelLabelMapFilterPython:
_itkRelabelLabelMapFilterPython.itkRelabelLabelMapFilterLM4_swigregister(itkRelabelLabelMapFilterLM4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def attribute_relabel_label_map_filter(*args: itkt.ImageLike,  reverse_ordering: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for AttributeRelabelLabelMapFilter"""
    import itk

    kwarg_typehints = { 'reverse_ordering':reverse_ordering }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.AttributeRelabelLabelMapFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def attribute_relabel_label_map_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLabelMap.AttributeRelabelLabelMapFilter
    attribute_relabel_label_map_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    attribute_relabel_label_map_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def relabel_label_map_filter(*args: itkt.ImageLike,  reverse_ordering: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for RelabelLabelMapFilter"""
    import itk

    kwarg_typehints = { 'reverse_ordering':reverse_ordering }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.RelabelLabelMapFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def relabel_label_map_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLabelMap.RelabelLabelMapFilter
    relabel_label_map_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    relabel_label_map_filter.__doc__ = filter_object.__doc__



