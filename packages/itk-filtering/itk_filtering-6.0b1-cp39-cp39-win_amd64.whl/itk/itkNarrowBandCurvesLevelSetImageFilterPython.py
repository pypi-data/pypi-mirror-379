# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNarrowBandCurvesLevelSetImageFilterPython
else:
    import _itkNarrowBandCurvesLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkNarrowBandLevelSetImageFilterPython
import itk.itkNarrowBandImageFilterBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterBPython
import itk.itkFiniteDifferenceFunctionPython
import itk.ITKNarrowBandBasePython
import itk.itkSegmentationLevelSetFunctionPython
import itk.itkLevelSetFunctionPython

def itkNarrowBandCurvesLevelSetImageFilterID2ID2D_New():
    return itkNarrowBandCurvesLevelSetImageFilterID2ID2D.New()

class itkNarrowBandCurvesLevelSetImageFilterID2ID2D(itk.itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2DID2):
    r"""Proxy of C++ itkNarrowBandCurvesLevelSetImageFilterID2ID2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNarrowBandCurvesLevelSetImageFilterID2ID2D_Pointer"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID2ID2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNarrowBandCurvesLevelSetImageFilterID2ID2D_Pointer"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID2ID2D_Clone(self)

    def SetDerivativeSigma(self, value):
        r"""
        SetDerivativeSigma(self, value)

        Parameters
        ----------
        value: float

        """
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID2ID2D_SetDerivativeSigma(self, value)

    def GetDerivativeSigma(self):
        r"""GetDerivativeSigma(self) -> float"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID2ID2D_GetDerivativeSigma(self)
    OutputHasNumericTraitsCheck = _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID2ID2D_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandCurvesLevelSetImageFilterPython.delete_itkNarrowBandCurvesLevelSetImageFilterID2ID2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNarrowBandCurvesLevelSetImageFilterID2ID2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID2ID2D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNarrowBandCurvesLevelSetImageFilterID2ID2D

        Create a new object of the class itkNarrowBandCurvesLevelSetImageFilterID2ID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandCurvesLevelSetImageFilterID2ID2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNarrowBandCurvesLevelSetImageFilterID2ID2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNarrowBandCurvesLevelSetImageFilterID2ID2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNarrowBandCurvesLevelSetImageFilterID2ID2D in _itkNarrowBandCurvesLevelSetImageFilterPython:
_itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID2ID2D_swigregister(itkNarrowBandCurvesLevelSetImageFilterID2ID2D)

def itkNarrowBandCurvesLevelSetImageFilterID3ID3D_New():
    return itkNarrowBandCurvesLevelSetImageFilterID3ID3D.New()

class itkNarrowBandCurvesLevelSetImageFilterID3ID3D(itk.itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3DID3):
    r"""Proxy of C++ itkNarrowBandCurvesLevelSetImageFilterID3ID3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNarrowBandCurvesLevelSetImageFilterID3ID3D_Pointer"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID3ID3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNarrowBandCurvesLevelSetImageFilterID3ID3D_Pointer"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID3ID3D_Clone(self)

    def SetDerivativeSigma(self, value):
        r"""
        SetDerivativeSigma(self, value)

        Parameters
        ----------
        value: float

        """
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID3ID3D_SetDerivativeSigma(self, value)

    def GetDerivativeSigma(self):
        r"""GetDerivativeSigma(self) -> float"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID3ID3D_GetDerivativeSigma(self)
    OutputHasNumericTraitsCheck = _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID3ID3D_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandCurvesLevelSetImageFilterPython.delete_itkNarrowBandCurvesLevelSetImageFilterID3ID3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNarrowBandCurvesLevelSetImageFilterID3ID3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID3ID3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNarrowBandCurvesLevelSetImageFilterID3ID3D

        Create a new object of the class itkNarrowBandCurvesLevelSetImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandCurvesLevelSetImageFilterID3ID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNarrowBandCurvesLevelSetImageFilterID3ID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNarrowBandCurvesLevelSetImageFilterID3ID3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNarrowBandCurvesLevelSetImageFilterID3ID3D in _itkNarrowBandCurvesLevelSetImageFilterPython:
_itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID3ID3D_swigregister(itkNarrowBandCurvesLevelSetImageFilterID3ID3D)

def itkNarrowBandCurvesLevelSetImageFilterID4ID4D_New():
    return itkNarrowBandCurvesLevelSetImageFilterID4ID4D.New()

class itkNarrowBandCurvesLevelSetImageFilterID4ID4D(itk.itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID4ID4DID4):
    r"""Proxy of C++ itkNarrowBandCurvesLevelSetImageFilterID4ID4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNarrowBandCurvesLevelSetImageFilterID4ID4D_Pointer"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID4ID4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNarrowBandCurvesLevelSetImageFilterID4ID4D_Pointer"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID4ID4D_Clone(self)

    def SetDerivativeSigma(self, value):
        r"""
        SetDerivativeSigma(self, value)

        Parameters
        ----------
        value: float

        """
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID4ID4D_SetDerivativeSigma(self, value)

    def GetDerivativeSigma(self):
        r"""GetDerivativeSigma(self) -> float"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID4ID4D_GetDerivativeSigma(self)
    OutputHasNumericTraitsCheck = _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID4ID4D_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandCurvesLevelSetImageFilterPython.delete_itkNarrowBandCurvesLevelSetImageFilterID4ID4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNarrowBandCurvesLevelSetImageFilterID4ID4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID4ID4D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNarrowBandCurvesLevelSetImageFilterID4ID4D

        Create a new object of the class itkNarrowBandCurvesLevelSetImageFilterID4ID4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandCurvesLevelSetImageFilterID4ID4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNarrowBandCurvesLevelSetImageFilterID4ID4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNarrowBandCurvesLevelSetImageFilterID4ID4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNarrowBandCurvesLevelSetImageFilterID4ID4D in _itkNarrowBandCurvesLevelSetImageFilterPython:
_itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterID4ID4D_swigregister(itkNarrowBandCurvesLevelSetImageFilterID4ID4D)

def itkNarrowBandCurvesLevelSetImageFilterIF2IF2F_New():
    return itkNarrowBandCurvesLevelSetImageFilterIF2IF2F.New()

class itkNarrowBandCurvesLevelSetImageFilterIF2IF2F(itk.itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2FIF2):
    r"""Proxy of C++ itkNarrowBandCurvesLevelSetImageFilterIF2IF2F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNarrowBandCurvesLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF2IF2F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNarrowBandCurvesLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF2IF2F_Clone(self)

    def SetDerivativeSigma(self, value):
        r"""
        SetDerivativeSigma(self, value)

        Parameters
        ----------
        value: float

        """
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF2IF2F_SetDerivativeSigma(self, value)

    def GetDerivativeSigma(self):
        r"""GetDerivativeSigma(self) -> float"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF2IF2F_GetDerivativeSigma(self)
    OutputHasNumericTraitsCheck = _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF2IF2F_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandCurvesLevelSetImageFilterPython.delete_itkNarrowBandCurvesLevelSetImageFilterIF2IF2F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNarrowBandCurvesLevelSetImageFilterIF2IF2F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF2IF2F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNarrowBandCurvesLevelSetImageFilterIF2IF2F

        Create a new object of the class itkNarrowBandCurvesLevelSetImageFilterIF2IF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandCurvesLevelSetImageFilterIF2IF2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNarrowBandCurvesLevelSetImageFilterIF2IF2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNarrowBandCurvesLevelSetImageFilterIF2IF2F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNarrowBandCurvesLevelSetImageFilterIF2IF2F in _itkNarrowBandCurvesLevelSetImageFilterPython:
_itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF2IF2F_swigregister(itkNarrowBandCurvesLevelSetImageFilterIF2IF2F)

def itkNarrowBandCurvesLevelSetImageFilterIF3IF3F_New():
    return itkNarrowBandCurvesLevelSetImageFilterIF3IF3F.New()

class itkNarrowBandCurvesLevelSetImageFilterIF3IF3F(itk.itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3FIF3):
    r"""Proxy of C++ itkNarrowBandCurvesLevelSetImageFilterIF3IF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNarrowBandCurvesLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF3IF3F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNarrowBandCurvesLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF3IF3F_Clone(self)

    def SetDerivativeSigma(self, value):
        r"""
        SetDerivativeSigma(self, value)

        Parameters
        ----------
        value: float

        """
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF3IF3F_SetDerivativeSigma(self, value)

    def GetDerivativeSigma(self):
        r"""GetDerivativeSigma(self) -> float"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF3IF3F_GetDerivativeSigma(self)
    OutputHasNumericTraitsCheck = _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF3IF3F_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandCurvesLevelSetImageFilterPython.delete_itkNarrowBandCurvesLevelSetImageFilterIF3IF3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNarrowBandCurvesLevelSetImageFilterIF3IF3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF3IF3F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNarrowBandCurvesLevelSetImageFilterIF3IF3F

        Create a new object of the class itkNarrowBandCurvesLevelSetImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandCurvesLevelSetImageFilterIF3IF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNarrowBandCurvesLevelSetImageFilterIF3IF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNarrowBandCurvesLevelSetImageFilterIF3IF3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNarrowBandCurvesLevelSetImageFilterIF3IF3F in _itkNarrowBandCurvesLevelSetImageFilterPython:
_itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF3IF3F_swigregister(itkNarrowBandCurvesLevelSetImageFilterIF3IF3F)

def itkNarrowBandCurvesLevelSetImageFilterIF4IF4F_New():
    return itkNarrowBandCurvesLevelSetImageFilterIF4IF4F.New()

class itkNarrowBandCurvesLevelSetImageFilterIF4IF4F(itk.itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF4IF4FIF4):
    r"""Proxy of C++ itkNarrowBandCurvesLevelSetImageFilterIF4IF4F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNarrowBandCurvesLevelSetImageFilterIF4IF4F_Pointer"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF4IF4F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNarrowBandCurvesLevelSetImageFilterIF4IF4F_Pointer"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF4IF4F_Clone(self)

    def SetDerivativeSigma(self, value):
        r"""
        SetDerivativeSigma(self, value)

        Parameters
        ----------
        value: float

        """
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF4IF4F_SetDerivativeSigma(self, value)

    def GetDerivativeSigma(self):
        r"""GetDerivativeSigma(self) -> float"""
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF4IF4F_GetDerivativeSigma(self)
    OutputHasNumericTraitsCheck = _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF4IF4F_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandCurvesLevelSetImageFilterPython.delete_itkNarrowBandCurvesLevelSetImageFilterIF4IF4F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNarrowBandCurvesLevelSetImageFilterIF4IF4F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF4IF4F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNarrowBandCurvesLevelSetImageFilterIF4IF4F

        Create a new object of the class itkNarrowBandCurvesLevelSetImageFilterIF4IF4F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandCurvesLevelSetImageFilterIF4IF4F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNarrowBandCurvesLevelSetImageFilterIF4IF4F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNarrowBandCurvesLevelSetImageFilterIF4IF4F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNarrowBandCurvesLevelSetImageFilterIF4IF4F in _itkNarrowBandCurvesLevelSetImageFilterPython:
_itkNarrowBandCurvesLevelSetImageFilterPython.itkNarrowBandCurvesLevelSetImageFilterIF4IF4F_swigregister(itkNarrowBandCurvesLevelSetImageFilterIF4IF4F)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def narrow_band_curves_level_set_image_filter(*args: itkt.ImageLike,  derivative_sigma: float=..., feature_image: itkt.Image=..., initial_image: itkt.Image=..., use_negative_features: bool=..., reverse_expansion_direction: bool=..., feature_scaling: float=..., propagation_scaling: float=..., advection_scaling: float=..., curvature_scaling: float=..., segmentation_function=..., maximum_iterations: int=..., maximum_rms_error: Union[float, float]=..., iso_surface_value: float=..., narrow_band_total_radius: float=..., narrow_band_inner_radius: float=..., narrow_band=..., difference_function=..., number_of_iterations: int=..., use_image_spacing: bool=..., rms_change: float=..., manual_reinitialization: bool=..., is_initialized: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for NarrowBandCurvesLevelSetImageFilter"""
    import itk

    kwarg_typehints = { 'derivative_sigma':derivative_sigma,'feature_image':feature_image,'initial_image':initial_image,'use_negative_features':use_negative_features,'reverse_expansion_direction':reverse_expansion_direction,'feature_scaling':feature_scaling,'propagation_scaling':propagation_scaling,'advection_scaling':advection_scaling,'curvature_scaling':curvature_scaling,'segmentation_function':segmentation_function,'maximum_iterations':maximum_iterations,'maximum_rms_error':maximum_rms_error,'iso_surface_value':iso_surface_value,'narrow_band_total_radius':narrow_band_total_radius,'narrow_band_inner_radius':narrow_band_inner_radius,'narrow_band':narrow_band,'difference_function':difference_function,'number_of_iterations':number_of_iterations,'use_image_spacing':use_image_spacing,'rms_change':rms_change,'manual_reinitialization':manual_reinitialization,'is_initialized':is_initialized }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.NarrowBandCurvesLevelSetImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def narrow_band_curves_level_set_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLevelSets.NarrowBandCurvesLevelSetImageFilter
    narrow_band_curves_level_set_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    narrow_band_curves_level_set_image_filter.__doc__ = filter_object.__doc__



