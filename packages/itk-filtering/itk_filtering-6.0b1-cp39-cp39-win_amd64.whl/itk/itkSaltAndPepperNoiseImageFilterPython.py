# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageNoisePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSaltAndPepperNoiseImageFilterPython
else:
    import _itkSaltAndPepperNoiseImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkNoiseBaseImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterBPython

def itkSaltAndPepperNoiseImageFilterID2ID2_New():
    return itkSaltAndPepperNoiseImageFilterID2ID2.New()

class itkSaltAndPepperNoiseImageFilterID2ID2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID2ID2):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterID2ID2_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterID2ID2_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID2ID2_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID2ID2_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID2ID2_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID2ID2_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID2ID2_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID2ID2_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID2ID2_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterID2ID2

        Create a new object of the class itkSaltAndPepperNoiseImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterID2ID2 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID2ID2_swigregister(itkSaltAndPepperNoiseImageFilterID2ID2)

def itkSaltAndPepperNoiseImageFilterID3ID3_New():
    return itkSaltAndPepperNoiseImageFilterID3ID3.New()

class itkSaltAndPepperNoiseImageFilterID3ID3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID3ID3):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterID3ID3_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterID3ID3_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID3ID3_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID3ID3_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID3ID3_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID3ID3_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID3ID3_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID3ID3_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID3ID3_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterID3ID3

        Create a new object of the class itkSaltAndPepperNoiseImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterID3ID3 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID3ID3_swigregister(itkSaltAndPepperNoiseImageFilterID3ID3)

def itkSaltAndPepperNoiseImageFilterID4ID4_New():
    return itkSaltAndPepperNoiseImageFilterID4ID4.New()

class itkSaltAndPepperNoiseImageFilterID4ID4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID4ID4):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterID4ID4_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterID4ID4_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID4ID4_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID4ID4_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID4ID4_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID4ID4_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID4ID4_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID4ID4_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID4ID4_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID4ID4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterID4ID4

        Create a new object of the class itkSaltAndPepperNoiseImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterID4ID4 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterID4ID4_swigregister(itkSaltAndPepperNoiseImageFilterID4ID4)

def itkSaltAndPepperNoiseImageFilterIF2IF2_New():
    return itkSaltAndPepperNoiseImageFilterIF2IF2.New()

class itkSaltAndPepperNoiseImageFilterIF2IF2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF2IF2):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterIF2IF2_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterIF2IF2_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF2IF2_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF2IF2_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF2IF2_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF2IF2_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> float"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF2IF2_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF2IF2_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> float"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF2IF2_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterIF2IF2

        Create a new object of the class itkSaltAndPepperNoiseImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterIF2IF2 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF2IF2_swigregister(itkSaltAndPepperNoiseImageFilterIF2IF2)

def itkSaltAndPepperNoiseImageFilterIF3IF3_New():
    return itkSaltAndPepperNoiseImageFilterIF3IF3.New()

class itkSaltAndPepperNoiseImageFilterIF3IF3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF3IF3):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterIF3IF3_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterIF3IF3_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF3IF3_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF3IF3_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF3IF3_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF3IF3_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> float"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF3IF3_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF3IF3_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> float"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF3IF3_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterIF3IF3

        Create a new object of the class itkSaltAndPepperNoiseImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterIF3IF3 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF3IF3_swigregister(itkSaltAndPepperNoiseImageFilterIF3IF3)

def itkSaltAndPepperNoiseImageFilterIF4IF4_New():
    return itkSaltAndPepperNoiseImageFilterIF4IF4.New()

class itkSaltAndPepperNoiseImageFilterIF4IF4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF4IF4):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterIF4IF4_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterIF4IF4_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF4IF4_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF4IF4_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF4IF4_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF4IF4_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> float"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF4IF4_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF4IF4_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> float"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF4IF4_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF4IF4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterIF4IF4

        Create a new object of the class itkSaltAndPepperNoiseImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterIF4IF4 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIF4IF4_swigregister(itkSaltAndPepperNoiseImageFilterIF4IF4)

def itkSaltAndPepperNoiseImageFilterISS2ISS2_New():
    return itkSaltAndPepperNoiseImageFilterISS2ISS2.New()

class itkSaltAndPepperNoiseImageFilterISS2ISS2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS2ISS2):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterISS2ISS2_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterISS2ISS2_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS2ISS2_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS2ISS2_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS2ISS2_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS2ISS2_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> short"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS2ISS2_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS2ISS2_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> short"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS2ISS2_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterISS2ISS2

        Create a new object of the class itkSaltAndPepperNoiseImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterISS2ISS2 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS2ISS2_swigregister(itkSaltAndPepperNoiseImageFilterISS2ISS2)

def itkSaltAndPepperNoiseImageFilterISS3ISS3_New():
    return itkSaltAndPepperNoiseImageFilterISS3ISS3.New()

class itkSaltAndPepperNoiseImageFilterISS3ISS3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS3ISS3):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterISS3ISS3_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterISS3ISS3_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS3ISS3_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS3ISS3_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS3ISS3_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS3ISS3_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> short"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS3ISS3_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS3ISS3_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> short"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS3ISS3_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterISS3ISS3

        Create a new object of the class itkSaltAndPepperNoiseImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterISS3ISS3 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS3ISS3_swigregister(itkSaltAndPepperNoiseImageFilterISS3ISS3)

def itkSaltAndPepperNoiseImageFilterISS4ISS4_New():
    return itkSaltAndPepperNoiseImageFilterISS4ISS4.New()

class itkSaltAndPepperNoiseImageFilterISS4ISS4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS4ISS4):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterISS4ISS4_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterISS4ISS4_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS4ISS4_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS4ISS4_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS4ISS4_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS4ISS4_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> short"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS4ISS4_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS4ISS4_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> short"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS4ISS4_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS4ISS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterISS4ISS4

        Create a new object of the class itkSaltAndPepperNoiseImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterISS4ISS4 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterISS4ISS4_swigregister(itkSaltAndPepperNoiseImageFilterISS4ISS4)

def itkSaltAndPepperNoiseImageFilterIUC2IUC2_New():
    return itkSaltAndPepperNoiseImageFilterIUC2IUC2.New()

class itkSaltAndPepperNoiseImageFilterIUC2IUC2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC2IUC2):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterIUC2IUC2_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterIUC2IUC2_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC2IUC2_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC2IUC2_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC2IUC2_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC2IUC2_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> unsigned char"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC2IUC2_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC2IUC2_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> unsigned char"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC2IUC2_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterIUC2IUC2

        Create a new object of the class itkSaltAndPepperNoiseImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterIUC2IUC2 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC2IUC2_swigregister(itkSaltAndPepperNoiseImageFilterIUC2IUC2)

def itkSaltAndPepperNoiseImageFilterIUC3IUC3_New():
    return itkSaltAndPepperNoiseImageFilterIUC3IUC3.New()

class itkSaltAndPepperNoiseImageFilterIUC3IUC3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC3IUC3):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterIUC3IUC3_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterIUC3IUC3_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC3IUC3_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC3IUC3_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC3IUC3_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC3IUC3_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> unsigned char"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC3IUC3_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC3IUC3_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> unsigned char"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC3IUC3_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterIUC3IUC3

        Create a new object of the class itkSaltAndPepperNoiseImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterIUC3IUC3 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC3IUC3_swigregister(itkSaltAndPepperNoiseImageFilterIUC3IUC3)

def itkSaltAndPepperNoiseImageFilterIUC4IUC4_New():
    return itkSaltAndPepperNoiseImageFilterIUC4IUC4.New()

class itkSaltAndPepperNoiseImageFilterIUC4IUC4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC4IUC4):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterIUC4IUC4_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterIUC4IUC4_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC4IUC4_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC4IUC4_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC4IUC4_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC4IUC4_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> unsigned char"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC4IUC4_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC4IUC4_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> unsigned char"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC4IUC4_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC4IUC4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterIUC4IUC4

        Create a new object of the class itkSaltAndPepperNoiseImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterIUC4IUC4 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUC4IUC4_swigregister(itkSaltAndPepperNoiseImageFilterIUC4IUC4)

def itkSaltAndPepperNoiseImageFilterIUS2IUS2_New():
    return itkSaltAndPepperNoiseImageFilterIUS2IUS2.New()

class itkSaltAndPepperNoiseImageFilterIUS2IUS2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS2IUS2):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterIUS2IUS2_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterIUS2IUS2_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS2IUS2_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS2IUS2_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS2IUS2_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS2IUS2_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> unsigned short"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS2IUS2_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS2IUS2_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> unsigned short"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS2IUS2_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterIUS2IUS2

        Create a new object of the class itkSaltAndPepperNoiseImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterIUS2IUS2 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS2IUS2_swigregister(itkSaltAndPepperNoiseImageFilterIUS2IUS2)

def itkSaltAndPepperNoiseImageFilterIUS3IUS3_New():
    return itkSaltAndPepperNoiseImageFilterIUS3IUS3.New()

class itkSaltAndPepperNoiseImageFilterIUS3IUS3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS3IUS3):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterIUS3IUS3_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterIUS3IUS3_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS3IUS3_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS3IUS3_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS3IUS3_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS3IUS3_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> unsigned short"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS3IUS3_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS3IUS3_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> unsigned short"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS3IUS3_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterIUS3IUS3

        Create a new object of the class itkSaltAndPepperNoiseImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterIUS3IUS3 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS3IUS3_swigregister(itkSaltAndPepperNoiseImageFilterIUS3IUS3)

def itkSaltAndPepperNoiseImageFilterIUS4IUS4_New():
    return itkSaltAndPepperNoiseImageFilterIUS4IUS4.New()

class itkSaltAndPepperNoiseImageFilterIUS4IUS4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS4IUS4):
    r"""Proxy of C++ itkSaltAndPepperNoiseImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSaltAndPepperNoiseImageFilterIUS4IUS4_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSaltAndPepperNoiseImageFilterIUS4IUS4_Pointer"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS4IUS4_Clone(self)

    def GetProbability(self):
        r"""GetProbability(self) -> double"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS4IUS4_GetProbability(self)

    def SetProbability(self, _arg):
        r"""
        SetProbability(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS4IUS4_SetProbability(self, _arg)

    def SetSaltValue(self, _arg):
        r"""
        SetSaltValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS4IUS4_SetSaltValue(self, _arg)

    def GetSaltValue(self):
        r"""GetSaltValue(self) -> unsigned short"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS4IUS4_GetSaltValue(self)

    def SetPepperValue(self, _arg):
        r"""
        SetPepperValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS4IUS4_SetPepperValue(self, _arg)

    def GetPepperValue(self):
        r"""GetPepperValue(self) -> unsigned short"""
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS4IUS4_GetPepperValue(self)
    InputConvertibleToOutputCheck = _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS4IUS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkSaltAndPepperNoiseImageFilterPython.delete_itkSaltAndPepperNoiseImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSaltAndPepperNoiseImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSaltAndPepperNoiseImageFilterIUS4IUS4

        Create a new object of the class itkSaltAndPepperNoiseImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSaltAndPepperNoiseImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSaltAndPepperNoiseImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSaltAndPepperNoiseImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSaltAndPepperNoiseImageFilterIUS4IUS4 in _itkSaltAndPepperNoiseImageFilterPython:
_itkSaltAndPepperNoiseImageFilterPython.itkSaltAndPepperNoiseImageFilterIUS4IUS4_swigregister(itkSaltAndPepperNoiseImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def salt_and_pepper_noise_image_filter(*args: itkt.ImageLike,  probability: float=..., salt_value: float=..., pepper_value: float=..., seed: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SaltAndPepperNoiseImageFilter"""
    import itk

    kwarg_typehints = { 'probability':probability,'salt_value':salt_value,'pepper_value':pepper_value,'seed':seed }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SaltAndPepperNoiseImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def salt_and_pepper_noise_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageNoise.SaltAndPepperNoiseImageFilter
    salt_and_pepper_noise_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    salt_and_pepper_noise_image_filter.__doc__ = filter_object.__doc__



