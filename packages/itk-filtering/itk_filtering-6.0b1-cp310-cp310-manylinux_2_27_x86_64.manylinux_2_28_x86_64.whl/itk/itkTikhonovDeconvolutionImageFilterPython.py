# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDeconvolutionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTikhonovDeconvolutionImageFilterPython
else:
    import _itkTikhonovDeconvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkInverseDeconvolutionImageFilterPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkFFTConvolutionImageFilterPython
import itk.itkSizePython
import itk.itkConvolutionImageFilterBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageBoundaryConditionPython

def itkTikhonovDeconvolutionImageFilterID2ID2_New():
    return itkTikhonovDeconvolutionImageFilterID2ID2.New()

class itkTikhonovDeconvolutionImageFilterID2ID2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterID2ID2_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterID2ID2_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterID2ID2

        Create a new object of the class itkTikhonovDeconvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterID2ID2 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2_swigregister(itkTikhonovDeconvolutionImageFilterID2ID2)

def itkTikhonovDeconvolutionImageFilterID3ID3_New():
    return itkTikhonovDeconvolutionImageFilterID3ID3.New()

class itkTikhonovDeconvolutionImageFilterID3ID3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterID3ID3_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterID3ID3_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterID3ID3

        Create a new object of the class itkTikhonovDeconvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterID3ID3 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3_swigregister(itkTikhonovDeconvolutionImageFilterID3ID3)

def itkTikhonovDeconvolutionImageFilterID4ID4_New():
    return itkTikhonovDeconvolutionImageFilterID4ID4.New()

class itkTikhonovDeconvolutionImageFilterID4ID4(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID4ID4):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterID4ID4_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterID4ID4_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID4ID4_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID4ID4_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID4ID4_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterID4ID4

        Create a new object of the class itkTikhonovDeconvolutionImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterID4ID4 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID4ID4_swigregister(itkTikhonovDeconvolutionImageFilterID4ID4)

def itkTikhonovDeconvolutionImageFilterIF2IF2_New():
    return itkTikhonovDeconvolutionImageFilterIF2IF2.New()

class itkTikhonovDeconvolutionImageFilterIF2IF2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterIF2IF2_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterIF2IF2_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIF2IF2

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIF2IF2 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2_swigregister(itkTikhonovDeconvolutionImageFilterIF2IF2)

def itkTikhonovDeconvolutionImageFilterIF3IF3_New():
    return itkTikhonovDeconvolutionImageFilterIF3IF3.New()

class itkTikhonovDeconvolutionImageFilterIF3IF3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterIF3IF3_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterIF3IF3_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIF3IF3

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIF3IF3 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3_swigregister(itkTikhonovDeconvolutionImageFilterIF3IF3)

def itkTikhonovDeconvolutionImageFilterIF4IF4_New():
    return itkTikhonovDeconvolutionImageFilterIF4IF4.New()

class itkTikhonovDeconvolutionImageFilterIF4IF4(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF4IF4):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterIF4IF4_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterIF4IF4_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF4IF4_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF4IF4_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF4IF4_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIF4IF4

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIF4IF4 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF4IF4_swigregister(itkTikhonovDeconvolutionImageFilterIF4IF4)

def itkTikhonovDeconvolutionImageFilterISS2ISS2_New():
    return itkTikhonovDeconvolutionImageFilterISS2ISS2.New()

class itkTikhonovDeconvolutionImageFilterISS2ISS2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterISS2ISS2_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterISS2ISS2_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterISS2ISS2

        Create a new object of the class itkTikhonovDeconvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterISS2ISS2 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2_swigregister(itkTikhonovDeconvolutionImageFilterISS2ISS2)

def itkTikhonovDeconvolutionImageFilterISS3ISS3_New():
    return itkTikhonovDeconvolutionImageFilterISS3ISS3.New()

class itkTikhonovDeconvolutionImageFilterISS3ISS3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterISS3ISS3_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterISS3ISS3_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterISS3ISS3

        Create a new object of the class itkTikhonovDeconvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterISS3ISS3 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3_swigregister(itkTikhonovDeconvolutionImageFilterISS3ISS3)

def itkTikhonovDeconvolutionImageFilterISS4ISS4_New():
    return itkTikhonovDeconvolutionImageFilterISS4ISS4.New()

class itkTikhonovDeconvolutionImageFilterISS4ISS4(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS4ISS4):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterISS4ISS4_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterISS4ISS4_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS4ISS4_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS4ISS4_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS4ISS4_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterISS4ISS4

        Create a new object of the class itkTikhonovDeconvolutionImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterISS4ISS4 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS4ISS4_swigregister(itkTikhonovDeconvolutionImageFilterISS4ISS4)

def itkTikhonovDeconvolutionImageFilterIUC2IUC2_New():
    return itkTikhonovDeconvolutionImageFilterIUC2IUC2.New()

class itkTikhonovDeconvolutionImageFilterIUC2IUC2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIUC2IUC2

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIUC2IUC2 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2_swigregister(itkTikhonovDeconvolutionImageFilterIUC2IUC2)

def itkTikhonovDeconvolutionImageFilterIUC3IUC3_New():
    return itkTikhonovDeconvolutionImageFilterIUC3IUC3.New()

class itkTikhonovDeconvolutionImageFilterIUC3IUC3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIUC3IUC3

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIUC3IUC3 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3_swigregister(itkTikhonovDeconvolutionImageFilterIUC3IUC3)

def itkTikhonovDeconvolutionImageFilterIUC4IUC4_New():
    return itkTikhonovDeconvolutionImageFilterIUC4IUC4.New()

class itkTikhonovDeconvolutionImageFilterIUC4IUC4(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC4IUC4):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterIUC4IUC4_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterIUC4IUC4_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC4IUC4_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC4IUC4_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC4IUC4_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIUC4IUC4

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIUC4IUC4 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC4IUC4_swigregister(itkTikhonovDeconvolutionImageFilterIUC4IUC4)

def itkTikhonovDeconvolutionImageFilterIUS2IUS2_New():
    return itkTikhonovDeconvolutionImageFilterIUS2IUS2.New()

class itkTikhonovDeconvolutionImageFilterIUS2IUS2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterIUS2IUS2_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterIUS2IUS2_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIUS2IUS2

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIUS2IUS2 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2_swigregister(itkTikhonovDeconvolutionImageFilterIUS2IUS2)

def itkTikhonovDeconvolutionImageFilterIUS3IUS3_New():
    return itkTikhonovDeconvolutionImageFilterIUS3IUS3.New()

class itkTikhonovDeconvolutionImageFilterIUS3IUS3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterIUS3IUS3_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterIUS3IUS3_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIUS3IUS3

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIUS3IUS3 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3_swigregister(itkTikhonovDeconvolutionImageFilterIUS3IUS3)

def itkTikhonovDeconvolutionImageFilterIUS4IUS4_New():
    return itkTikhonovDeconvolutionImageFilterIUS4IUS4.New()

class itkTikhonovDeconvolutionImageFilterIUS4IUS4(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS4IUS4):
    r"""Proxy of C++ itkTikhonovDeconvolutionImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTikhonovDeconvolutionImageFilterIUS4IUS4_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTikhonovDeconvolutionImageFilterIUS4IUS4_Pointer"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS4IUS4_Clone(self)

    def SetRegularizationConstant(self, _arg):
        r"""
        SetRegularizationConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS4IUS4_SetRegularizationConstant(self, _arg)

    def GetRegularizationConstant(self):
        r"""GetRegularizationConstant(self) -> double"""
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS4IUS4_GetRegularizationConstant(self)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTikhonovDeconvolutionImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIUS4IUS4

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIUS4IUS4 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS4IUS4_swigregister(itkTikhonovDeconvolutionImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def tikhonov_deconvolution_image_filter(*args: itkt.ImageLike,  regularization_constant: float=..., kernel_zero_magnitude_threshold: float=..., size_greatest_prime_factor: int=..., boundary_condition: itkt.ImageBoundaryCondition=..., kernel_image: itkt.Image=..., normalize: bool=..., output_region_mode=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for TikhonovDeconvolutionImageFilter"""
    import itk

    kwarg_typehints = { 'regularization_constant':regularization_constant,'kernel_zero_magnitude_threshold':kernel_zero_magnitude_threshold,'size_greatest_prime_factor':size_greatest_prime_factor,'boundary_condition':boundary_condition,'kernel_image':kernel_image,'normalize':normalize,'output_region_mode':output_region_mode }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.TikhonovDeconvolutionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def tikhonov_deconvolution_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKDeconvolution.TikhonovDeconvolutionImageFilter
    tikhonov_deconvolution_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    tikhonov_deconvolution_image_filter.__doc__ = filter_object.__doc__



