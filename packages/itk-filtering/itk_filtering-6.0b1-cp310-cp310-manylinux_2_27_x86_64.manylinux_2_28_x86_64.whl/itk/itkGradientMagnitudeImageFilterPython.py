# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageGradientPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGradientMagnitudeImageFilterPython
else:
    import _itkGradientMagnitudeImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython

def itkGradientMagnitudeImageFilterID2ID2_New():
    return itkGradientMagnitudeImageFilterID2ID2.New()

class itkGradientMagnitudeImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterID2ID2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterID2ID2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterID2ID2

        Create a new object of the class itkGradientMagnitudeImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterID2ID2 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_swigregister(itkGradientMagnitudeImageFilterID2ID2)

def itkGradientMagnitudeImageFilterID3ID3_New():
    return itkGradientMagnitudeImageFilterID3ID3.New()

class itkGradientMagnitudeImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterID3ID3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterID3ID3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterID3ID3

        Create a new object of the class itkGradientMagnitudeImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterID3ID3 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_swigregister(itkGradientMagnitudeImageFilterID3ID3)

def itkGradientMagnitudeImageFilterID4ID4_New():
    return itkGradientMagnitudeImageFilterID4ID4.New()

class itkGradientMagnitudeImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterID4ID4_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterID4ID4_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID4ID4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID4ID4_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID4ID4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID4ID4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID4ID4_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID4ID4_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID4ID4_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterID4ID4

        Create a new object of the class itkGradientMagnitudeImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterID4ID4 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID4ID4_swigregister(itkGradientMagnitudeImageFilterID4ID4)

def itkGradientMagnitudeImageFilterIF2IF2_New():
    return itkGradientMagnitudeImageFilterIF2IF2.New()

class itkGradientMagnitudeImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterIF2IF2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterIF2IF2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIF2IF2

        Create a new object of the class itkGradientMagnitudeImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIF2IF2 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_swigregister(itkGradientMagnitudeImageFilterIF2IF2)

def itkGradientMagnitudeImageFilterIF3IF3_New():
    return itkGradientMagnitudeImageFilterIF3IF3.New()

class itkGradientMagnitudeImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterIF3IF3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterIF3IF3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIF3IF3

        Create a new object of the class itkGradientMagnitudeImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIF3IF3 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_swigregister(itkGradientMagnitudeImageFilterIF3IF3)

def itkGradientMagnitudeImageFilterIF4IF4_New():
    return itkGradientMagnitudeImageFilterIF4IF4.New()

class itkGradientMagnitudeImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterIF4IF4_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterIF4IF4_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF4IF4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF4IF4_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF4IF4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF4IF4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF4IF4_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF4IF4_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF4IF4_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIF4IF4

        Create a new object of the class itkGradientMagnitudeImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIF4IF4 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF4IF4_swigregister(itkGradientMagnitudeImageFilterIF4IF4)

def itkGradientMagnitudeImageFilterISS2ISS2_New():
    return itkGradientMagnitudeImageFilterISS2ISS2.New()

class itkGradientMagnitudeImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterISS2ISS2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterISS2ISS2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterISS2ISS2

        Create a new object of the class itkGradientMagnitudeImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterISS2ISS2 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_swigregister(itkGradientMagnitudeImageFilterISS2ISS2)

def itkGradientMagnitudeImageFilterISS3ISS3_New():
    return itkGradientMagnitudeImageFilterISS3ISS3.New()

class itkGradientMagnitudeImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterISS3ISS3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterISS3ISS3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterISS3ISS3

        Create a new object of the class itkGradientMagnitudeImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterISS3ISS3 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_swigregister(itkGradientMagnitudeImageFilterISS3ISS3)

def itkGradientMagnitudeImageFilterISS4ISS4_New():
    return itkGradientMagnitudeImageFilterISS4ISS4.New()

class itkGradientMagnitudeImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterISS4ISS4_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterISS4ISS4_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS4ISS4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS4ISS4_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS4ISS4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS4ISS4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS4ISS4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS4ISS4_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS4ISS4_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS4ISS4_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterISS4ISS4

        Create a new object of the class itkGradientMagnitudeImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterISS4ISS4 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS4ISS4_swigregister(itkGradientMagnitudeImageFilterISS4ISS4)

def itkGradientMagnitudeImageFilterIUC2IUC2_New():
    return itkGradientMagnitudeImageFilterIUC2IUC2.New()

class itkGradientMagnitudeImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterIUC2IUC2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterIUC2IUC2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUC2IUC2

        Create a new object of the class itkGradientMagnitudeImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIUC2IUC2 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_swigregister(itkGradientMagnitudeImageFilterIUC2IUC2)

def itkGradientMagnitudeImageFilterIUC3IUC3_New():
    return itkGradientMagnitudeImageFilterIUC3IUC3.New()

class itkGradientMagnitudeImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterIUC3IUC3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterIUC3IUC3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUC3IUC3

        Create a new object of the class itkGradientMagnitudeImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIUC3IUC3 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_swigregister(itkGradientMagnitudeImageFilterIUC3IUC3)

def itkGradientMagnitudeImageFilterIUC4IUC4_New():
    return itkGradientMagnitudeImageFilterIUC4IUC4.New()

class itkGradientMagnitudeImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterIUC4IUC4_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterIUC4IUC4_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC4IUC4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC4IUC4_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC4IUC4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC4IUC4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC4IUC4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC4IUC4_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC4IUC4_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC4IUC4_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUC4IUC4

        Create a new object of the class itkGradientMagnitudeImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIUC4IUC4 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC4IUC4_swigregister(itkGradientMagnitudeImageFilterIUC4IUC4)

def itkGradientMagnitudeImageFilterIUS2IUS2_New():
    return itkGradientMagnitudeImageFilterIUS2IUS2.New()

class itkGradientMagnitudeImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterIUS2IUS2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterIUS2IUS2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUS2IUS2

        Create a new object of the class itkGradientMagnitudeImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIUS2IUS2 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_swigregister(itkGradientMagnitudeImageFilterIUS2IUS2)

def itkGradientMagnitudeImageFilterIUS3IUS3_New():
    return itkGradientMagnitudeImageFilterIUS3IUS3.New()

class itkGradientMagnitudeImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterIUS3IUS3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterIUS3IUS3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUS3IUS3

        Create a new object of the class itkGradientMagnitudeImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIUS3IUS3 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_swigregister(itkGradientMagnitudeImageFilterIUS3IUS3)

def itkGradientMagnitudeImageFilterIUS4IUS4_New():
    return itkGradientMagnitudeImageFilterIUS4IUS4.New()

class itkGradientMagnitudeImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkGradientMagnitudeImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientMagnitudeImageFilterIUS4IUS4_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientMagnitudeImageFilterIUS4IUS4_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS4IUS4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS4IUS4_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS4IUS4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS4IUS4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS4IUS4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS4IUS4_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS4IUS4_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS4IUS4_SetUseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientMagnitudeImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUS4IUS4

        Create a new object of the class itkGradientMagnitudeImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientMagnitudeImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientMagnitudeImageFilterIUS4IUS4 in _itkGradientMagnitudeImageFilterPython:
_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS4IUS4_swigregister(itkGradientMagnitudeImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def gradient_magnitude_image_filter(*args: itkt.ImageLike,  use_image_spacing: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for GradientMagnitudeImageFilter"""
    import itk

    kwarg_typehints = { 'use_image_spacing':use_image_spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.GradientMagnitudeImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def gradient_magnitude_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageGradient.GradientMagnitudeImageFilter
    gradient_magnitude_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    gradient_magnitude_image_filter.__doc__ = filter_object.__doc__



