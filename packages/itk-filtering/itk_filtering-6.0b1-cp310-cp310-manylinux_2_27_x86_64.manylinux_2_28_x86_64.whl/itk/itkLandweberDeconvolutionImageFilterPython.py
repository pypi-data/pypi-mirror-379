# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDeconvolutionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLandweberDeconvolutionImageFilterPython
else:
    import _itkLandweberDeconvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkIterativeDeconvolutionImageFilterPython
import itk.itkFFTConvolutionImageFilterPython
import itk.itkSizePython
import itk.itkConvolutionImageFilterBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageBoundaryConditionPython

def itkLandweberDeconvolutionImageFilterID2ID2_New():
    return itkLandweberDeconvolutionImageFilterID2ID2.New()

class itkLandweberDeconvolutionImageFilterID2ID2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID2ID2):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterID2ID2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterID2ID2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterID2ID2

        Create a new object of the class itkLandweberDeconvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterID2ID2 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2_swigregister(itkLandweberDeconvolutionImageFilterID2ID2)

def itkLandweberDeconvolutionImageFilterID3ID3_New():
    return itkLandweberDeconvolutionImageFilterID3ID3.New()

class itkLandweberDeconvolutionImageFilterID3ID3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID3ID3):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterID3ID3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterID3ID3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterID3ID3

        Create a new object of the class itkLandweberDeconvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterID3ID3 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3_swigregister(itkLandweberDeconvolutionImageFilterID3ID3)

def itkLandweberDeconvolutionImageFilterID4ID4_New():
    return itkLandweberDeconvolutionImageFilterID4ID4.New()

class itkLandweberDeconvolutionImageFilterID4ID4(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID4ID4):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterID4ID4_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterID4ID4_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID4ID4_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID4ID4_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID4ID4_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterID4ID4

        Create a new object of the class itkLandweberDeconvolutionImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterID4ID4 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID4ID4_swigregister(itkLandweberDeconvolutionImageFilterID4ID4)

def itkLandweberDeconvolutionImageFilterIF2IF2_New():
    return itkLandweberDeconvolutionImageFilterIF2IF2.New()

class itkLandweberDeconvolutionImageFilterIF2IF2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterIF2IF2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterIF2IF2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIF2IF2

        Create a new object of the class itkLandweberDeconvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIF2IF2 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_swigregister(itkLandweberDeconvolutionImageFilterIF2IF2)

def itkLandweberDeconvolutionImageFilterIF3IF3_New():
    return itkLandweberDeconvolutionImageFilterIF3IF3.New()

class itkLandweberDeconvolutionImageFilterIF3IF3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterIF3IF3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterIF3IF3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIF3IF3

        Create a new object of the class itkLandweberDeconvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIF3IF3 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_swigregister(itkLandweberDeconvolutionImageFilterIF3IF3)

def itkLandweberDeconvolutionImageFilterIF4IF4_New():
    return itkLandweberDeconvolutionImageFilterIF4IF4.New()

class itkLandweberDeconvolutionImageFilterIF4IF4(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF4IF4):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterIF4IF4_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterIF4IF4_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF4IF4_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF4IF4_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF4IF4_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIF4IF4

        Create a new object of the class itkLandweberDeconvolutionImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIF4IF4 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF4IF4_swigregister(itkLandweberDeconvolutionImageFilterIF4IF4)

def itkLandweberDeconvolutionImageFilterISS2ISS2_New():
    return itkLandweberDeconvolutionImageFilterISS2ISS2.New()

class itkLandweberDeconvolutionImageFilterISS2ISS2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterISS2ISS2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterISS2ISS2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterISS2ISS2

        Create a new object of the class itkLandweberDeconvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterISS2ISS2 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_swigregister(itkLandweberDeconvolutionImageFilterISS2ISS2)

def itkLandweberDeconvolutionImageFilterISS3ISS3_New():
    return itkLandweberDeconvolutionImageFilterISS3ISS3.New()

class itkLandweberDeconvolutionImageFilterISS3ISS3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterISS3ISS3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterISS3ISS3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterISS3ISS3

        Create a new object of the class itkLandweberDeconvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterISS3ISS3 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_swigregister(itkLandweberDeconvolutionImageFilterISS3ISS3)

def itkLandweberDeconvolutionImageFilterISS4ISS4_New():
    return itkLandweberDeconvolutionImageFilterISS4ISS4.New()

class itkLandweberDeconvolutionImageFilterISS4ISS4(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS4ISS4):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterISS4ISS4_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterISS4ISS4_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS4ISS4_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS4ISS4_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS4ISS4_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterISS4ISS4

        Create a new object of the class itkLandweberDeconvolutionImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterISS4ISS4 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS4ISS4_swigregister(itkLandweberDeconvolutionImageFilterISS4ISS4)

def itkLandweberDeconvolutionImageFilterIUC2IUC2_New():
    return itkLandweberDeconvolutionImageFilterIUC2IUC2.New()

class itkLandweberDeconvolutionImageFilterIUC2IUC2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIUC2IUC2

        Create a new object of the class itkLandweberDeconvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIUC2IUC2 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_swigregister(itkLandweberDeconvolutionImageFilterIUC2IUC2)

def itkLandweberDeconvolutionImageFilterIUC3IUC3_New():
    return itkLandweberDeconvolutionImageFilterIUC3IUC3.New()

class itkLandweberDeconvolutionImageFilterIUC3IUC3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIUC3IUC3

        Create a new object of the class itkLandweberDeconvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIUC3IUC3 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_swigregister(itkLandweberDeconvolutionImageFilterIUC3IUC3)

def itkLandweberDeconvolutionImageFilterIUC4IUC4_New():
    return itkLandweberDeconvolutionImageFilterIUC4IUC4.New()

class itkLandweberDeconvolutionImageFilterIUC4IUC4(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC4IUC4):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterIUC4IUC4_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterIUC4IUC4_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC4IUC4_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC4IUC4_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC4IUC4_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIUC4IUC4

        Create a new object of the class itkLandweberDeconvolutionImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIUC4IUC4 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC4IUC4_swigregister(itkLandweberDeconvolutionImageFilterIUC4IUC4)

def itkLandweberDeconvolutionImageFilterIUS2IUS2_New():
    return itkLandweberDeconvolutionImageFilterIUS2IUS2.New()

class itkLandweberDeconvolutionImageFilterIUS2IUS2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS2IUS2):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterIUS2IUS2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterIUS2IUS2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIUS2IUS2

        Create a new object of the class itkLandweberDeconvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIUS2IUS2 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2_swigregister(itkLandweberDeconvolutionImageFilterIUS2IUS2)

def itkLandweberDeconvolutionImageFilterIUS3IUS3_New():
    return itkLandweberDeconvolutionImageFilterIUS3IUS3.New()

class itkLandweberDeconvolutionImageFilterIUS3IUS3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS3IUS3):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterIUS3IUS3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterIUS3IUS3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIUS3IUS3

        Create a new object of the class itkLandweberDeconvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIUS3IUS3 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3_swigregister(itkLandweberDeconvolutionImageFilterIUS3IUS3)

def itkLandweberDeconvolutionImageFilterIUS4IUS4_New():
    return itkLandweberDeconvolutionImageFilterIUS4IUS4.New()

class itkLandweberDeconvolutionImageFilterIUS4IUS4(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS4IUS4):
    r"""Proxy of C++ itkLandweberDeconvolutionImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandweberDeconvolutionImageFilterIUS4IUS4_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandweberDeconvolutionImageFilterIUS4IUS4_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS4IUS4_Clone(self)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS4IUS4_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS4IUS4_GetAlpha(self)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandweberDeconvolutionImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIUS4IUS4

        Create a new object of the class itkLandweberDeconvolutionImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIUS4IUS4 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS4IUS4_swigregister(itkLandweberDeconvolutionImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def landweber_deconvolution_image_filter(*args: itkt.ImageLike,  alpha: float=..., number_of_iterations: int=..., stop_iteration: bool=..., size_greatest_prime_factor: int=..., boundary_condition: itkt.ImageBoundaryCondition=..., kernel_image: itkt.Image=..., normalize: bool=..., output_region_mode=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for LandweberDeconvolutionImageFilter"""
    import itk

    kwarg_typehints = { 'alpha':alpha,'number_of_iterations':number_of_iterations,'stop_iteration':stop_iteration,'size_greatest_prime_factor':size_greatest_prime_factor,'boundary_condition':boundary_condition,'kernel_image':kernel_image,'normalize':normalize,'output_region_mode':output_region_mode }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.LandweberDeconvolutionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def landweber_deconvolution_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKDeconvolution.LandweberDeconvolutionImageFilter
    landweber_deconvolution_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    landweber_deconvolution_image_filter.__doc__ = filter_object.__doc__



