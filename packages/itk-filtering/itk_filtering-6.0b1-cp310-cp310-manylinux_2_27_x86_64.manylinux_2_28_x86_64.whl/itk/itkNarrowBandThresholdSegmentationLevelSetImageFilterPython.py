# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython
else:
    import _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkNarrowBandLevelSetImageFilterPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSegmentationLevelSetFunctionPython
import itk.itkLevelSetFunctionPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkNarrowBandImageFilterBasePython
import itk.ITKNarrowBandBasePython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterAPython

def itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_New():
    return itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.New()

class itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D(itk.itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2DID2):
    r"""Proxy of C++ itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Clone(self)

    def SetUpperThreshold(self, v):
        r"""
        SetUpperThreshold(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetUpperThreshold(self, v)

    def SetLowerThreshold(self, v):
        r"""
        SetLowerThreshold(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetLowerThreshold(self, v)

    def GetUpperThreshold(self):
        r"""GetUpperThreshold(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetUpperThreshold(self)

    def GetLowerThreshold(self):
        r"""GetLowerThreshold(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetLowerThreshold(self)

    def SetEdgeWeight(self, v):
        r"""
        SetEdgeWeight(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetEdgeWeight(self, v)

    def GetEdgeWeight(self):
        r"""GetEdgeWeight(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetEdgeWeight(self)

    def SetSmoothingIterations(self, v):
        r"""
        SetSmoothingIterations(self, v)

        Parameters
        ----------
        v: int

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingIterations(self, v)

    def GetSmoothingIterations(self):
        r"""GetSmoothingIterations(self) -> int"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingIterations(self)

    def SetSmoothingTimeStep(self, v):
        r"""
        SetSmoothingTimeStep(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingTimeStep(self, v)

    def GetSmoothingTimeStep(self):
        r"""GetSmoothingTimeStep(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingTimeStep(self)

    def SetSmoothingConductance(self, v):
        r"""
        SetSmoothingConductance(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingConductance(self, v)

    def GetSmoothingConductance(self):
        r"""GetSmoothingConductance(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingConductance(self)
    OutputHasNumericTraitsCheck = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.delete_itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D

        Create a new object of the class itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D in _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython:
_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_swigregister(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)

def itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_New():
    return itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.New()

class itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D(itk.itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3DID3):
    r"""Proxy of C++ itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Clone(self)

    def SetUpperThreshold(self, v):
        r"""
        SetUpperThreshold(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetUpperThreshold(self, v)

    def SetLowerThreshold(self, v):
        r"""
        SetLowerThreshold(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetLowerThreshold(self, v)

    def GetUpperThreshold(self):
        r"""GetUpperThreshold(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetUpperThreshold(self)

    def GetLowerThreshold(self):
        r"""GetLowerThreshold(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetLowerThreshold(self)

    def SetEdgeWeight(self, v):
        r"""
        SetEdgeWeight(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetEdgeWeight(self, v)

    def GetEdgeWeight(self):
        r"""GetEdgeWeight(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetEdgeWeight(self)

    def SetSmoothingIterations(self, v):
        r"""
        SetSmoothingIterations(self, v)

        Parameters
        ----------
        v: int

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingIterations(self, v)

    def GetSmoothingIterations(self):
        r"""GetSmoothingIterations(self) -> int"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingIterations(self)

    def SetSmoothingTimeStep(self, v):
        r"""
        SetSmoothingTimeStep(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingTimeStep(self, v)

    def GetSmoothingTimeStep(self):
        r"""GetSmoothingTimeStep(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingTimeStep(self)

    def SetSmoothingConductance(self, v):
        r"""
        SetSmoothingConductance(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingConductance(self, v)

    def GetSmoothingConductance(self):
        r"""GetSmoothingConductance(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingConductance(self)
    OutputHasNumericTraitsCheck = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.delete_itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D

        Create a new object of the class itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D in _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython:
_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_swigregister(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)

def itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_New():
    return itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D.New()

class itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D(itk.itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID4ID4DID4):
    r"""Proxy of C++ itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_Clone(self)

    def SetUpperThreshold(self, v):
        r"""
        SetUpperThreshold(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_SetUpperThreshold(self, v)

    def SetLowerThreshold(self, v):
        r"""
        SetLowerThreshold(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_SetLowerThreshold(self, v)

    def GetUpperThreshold(self):
        r"""GetUpperThreshold(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_GetUpperThreshold(self)

    def GetLowerThreshold(self):
        r"""GetLowerThreshold(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_GetLowerThreshold(self)

    def SetEdgeWeight(self, v):
        r"""
        SetEdgeWeight(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_SetEdgeWeight(self, v)

    def GetEdgeWeight(self):
        r"""GetEdgeWeight(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_GetEdgeWeight(self)

    def SetSmoothingIterations(self, v):
        r"""
        SetSmoothingIterations(self, v)

        Parameters
        ----------
        v: int

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_SetSmoothingIterations(self, v)

    def GetSmoothingIterations(self):
        r"""GetSmoothingIterations(self) -> int"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_GetSmoothingIterations(self)

    def SetSmoothingTimeStep(self, v):
        r"""
        SetSmoothingTimeStep(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_SetSmoothingTimeStep(self, v)

    def GetSmoothingTimeStep(self):
        r"""GetSmoothingTimeStep(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_GetSmoothingTimeStep(self)

    def SetSmoothingConductance(self, v):
        r"""
        SetSmoothingConductance(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_SetSmoothingConductance(self, v)

    def GetSmoothingConductance(self):
        r"""GetSmoothingConductance(self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_GetSmoothingConductance(self)
    OutputHasNumericTraitsCheck = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.delete_itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D

        Create a new object of the class itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D in _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython:
_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D_swigregister(itkNarrowBandThresholdSegmentationLevelSetImageFilterID4ID4D)

def itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_New():
    return itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.New()

class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F(itk.itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2FIF2):
    r"""Proxy of C++ itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Clone(self)

    def SetUpperThreshold(self, v):
        r"""
        SetUpperThreshold(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetUpperThreshold(self, v)

    def SetLowerThreshold(self, v):
        r"""
        SetLowerThreshold(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetLowerThreshold(self, v)

    def GetUpperThreshold(self):
        r"""GetUpperThreshold(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetUpperThreshold(self)

    def GetLowerThreshold(self):
        r"""GetLowerThreshold(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetLowerThreshold(self)

    def SetEdgeWeight(self, v):
        r"""
        SetEdgeWeight(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetEdgeWeight(self, v)

    def GetEdgeWeight(self):
        r"""GetEdgeWeight(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetEdgeWeight(self)

    def SetSmoothingIterations(self, v):
        r"""
        SetSmoothingIterations(self, v)

        Parameters
        ----------
        v: int

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingIterations(self, v)

    def GetSmoothingIterations(self):
        r"""GetSmoothingIterations(self) -> int"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingIterations(self)

    def SetSmoothingTimeStep(self, v):
        r"""
        SetSmoothingTimeStep(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingTimeStep(self, v)

    def GetSmoothingTimeStep(self):
        r"""GetSmoothingTimeStep(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingTimeStep(self)

    def SetSmoothingConductance(self, v):
        r"""
        SetSmoothingConductance(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingConductance(self, v)

    def GetSmoothingConductance(self):
        r"""GetSmoothingConductance(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingConductance(self)
    OutputHasNumericTraitsCheck = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.delete_itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F

        Create a new object of the class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F in _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython:
_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_swigregister(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)

def itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_New():
    return itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.New()

class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F(itk.itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3FIF3):
    r"""Proxy of C++ itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Clone(self)

    def SetUpperThreshold(self, v):
        r"""
        SetUpperThreshold(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetUpperThreshold(self, v)

    def SetLowerThreshold(self, v):
        r"""
        SetLowerThreshold(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetLowerThreshold(self, v)

    def GetUpperThreshold(self):
        r"""GetUpperThreshold(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetUpperThreshold(self)

    def GetLowerThreshold(self):
        r"""GetLowerThreshold(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetLowerThreshold(self)

    def SetEdgeWeight(self, v):
        r"""
        SetEdgeWeight(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetEdgeWeight(self, v)

    def GetEdgeWeight(self):
        r"""GetEdgeWeight(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetEdgeWeight(self)

    def SetSmoothingIterations(self, v):
        r"""
        SetSmoothingIterations(self, v)

        Parameters
        ----------
        v: int

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingIterations(self, v)

    def GetSmoothingIterations(self):
        r"""GetSmoothingIterations(self) -> int"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingIterations(self)

    def SetSmoothingTimeStep(self, v):
        r"""
        SetSmoothingTimeStep(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingTimeStep(self, v)

    def GetSmoothingTimeStep(self):
        r"""GetSmoothingTimeStep(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingTimeStep(self)

    def SetSmoothingConductance(self, v):
        r"""
        SetSmoothingConductance(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingConductance(self, v)

    def GetSmoothingConductance(self):
        r"""GetSmoothingConductance(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingConductance(self)
    OutputHasNumericTraitsCheck = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.delete_itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F

        Create a new object of the class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F in _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython:
_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_swigregister(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)

def itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_New():
    return itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F.New()

class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F(itk.itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF4IF4FIF4):
    r"""Proxy of C++ itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_Clone(self)

    def SetUpperThreshold(self, v):
        r"""
        SetUpperThreshold(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_SetUpperThreshold(self, v)

    def SetLowerThreshold(self, v):
        r"""
        SetLowerThreshold(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_SetLowerThreshold(self, v)

    def GetUpperThreshold(self):
        r"""GetUpperThreshold(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_GetUpperThreshold(self)

    def GetLowerThreshold(self):
        r"""GetLowerThreshold(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_GetLowerThreshold(self)

    def SetEdgeWeight(self, v):
        r"""
        SetEdgeWeight(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_SetEdgeWeight(self, v)

    def GetEdgeWeight(self):
        r"""GetEdgeWeight(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_GetEdgeWeight(self)

    def SetSmoothingIterations(self, v):
        r"""
        SetSmoothingIterations(self, v)

        Parameters
        ----------
        v: int

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_SetSmoothingIterations(self, v)

    def GetSmoothingIterations(self):
        r"""GetSmoothingIterations(self) -> int"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_GetSmoothingIterations(self)

    def SetSmoothingTimeStep(self, v):
        r"""
        SetSmoothingTimeStep(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_SetSmoothingTimeStep(self, v)

    def GetSmoothingTimeStep(self):
        r"""GetSmoothingTimeStep(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_GetSmoothingTimeStep(self)

    def SetSmoothingConductance(self, v):
        r"""
        SetSmoothingConductance(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_SetSmoothingConductance(self, v)

    def GetSmoothingConductance(self):
        r"""GetSmoothingConductance(self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_GetSmoothingConductance(self)
    OutputHasNumericTraitsCheck = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.delete_itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F

        Create a new object of the class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F in _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython:
_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F_swigregister(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF4IF4F)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def narrow_band_threshold_segmentation_level_set_image_filter(*args: itkt.ImageLike,  upper_threshold: float=..., lower_threshold: float=..., edge_weight: float=..., smoothing_iterations: int=..., smoothing_time_step: float=..., smoothing_conductance: float=..., feature_image: itkt.Image=..., initial_image: itkt.Image=..., use_negative_features: bool=..., reverse_expansion_direction: bool=..., feature_scaling: float=..., propagation_scaling: float=..., advection_scaling: float=..., curvature_scaling: float=..., segmentation_function=..., maximum_iterations: int=..., maximum_rms_error: Union[float, float]=..., iso_surface_value: float=..., narrow_band_total_radius: float=..., narrow_band_inner_radius: float=..., narrow_band=..., difference_function=..., number_of_iterations: int=..., use_image_spacing: bool=..., rms_change: float=..., manual_reinitialization: bool=..., is_initialized: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for NarrowBandThresholdSegmentationLevelSetImageFilter"""
    import itk

    kwarg_typehints = { 'upper_threshold':upper_threshold,'lower_threshold':lower_threshold,'edge_weight':edge_weight,'smoothing_iterations':smoothing_iterations,'smoothing_time_step':smoothing_time_step,'smoothing_conductance':smoothing_conductance,'feature_image':feature_image,'initial_image':initial_image,'use_negative_features':use_negative_features,'reverse_expansion_direction':reverse_expansion_direction,'feature_scaling':feature_scaling,'propagation_scaling':propagation_scaling,'advection_scaling':advection_scaling,'curvature_scaling':curvature_scaling,'segmentation_function':segmentation_function,'maximum_iterations':maximum_iterations,'maximum_rms_error':maximum_rms_error,'iso_surface_value':iso_surface_value,'narrow_band_total_radius':narrow_band_total_radius,'narrow_band_inner_radius':narrow_band_inner_radius,'narrow_band':narrow_band,'difference_function':difference_function,'number_of_iterations':number_of_iterations,'use_image_spacing':use_image_spacing,'rms_change':rms_change,'manual_reinitialization':manual_reinitialization,'is_initialized':is_initialized }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.NarrowBandThresholdSegmentationLevelSetImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def narrow_band_threshold_segmentation_level_set_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLevelSets.NarrowBandThresholdSegmentationLevelSetImageFilter
    narrow_band_threshold_segmentation_level_set_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    narrow_band_threshold_segmentation_level_set_image_filter.__doc__ = filter_object.__doc__



