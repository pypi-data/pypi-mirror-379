# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageNoisePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAdditiveGaussianNoiseImageFilterPython
else:
    import _itkAdditiveGaussianNoiseImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkNoiseBaseImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterAPython

def itkAdditiveGaussianNoiseImageFilterID2ID2_New():
    return itkAdditiveGaussianNoiseImageFilterID2ID2.New()

class itkAdditiveGaussianNoiseImageFilterID2ID2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID2ID2):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterID2ID2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterID2ID2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterID2ID2

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterID2ID2 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_swigregister(itkAdditiveGaussianNoiseImageFilterID2ID2)

def itkAdditiveGaussianNoiseImageFilterID3ID3_New():
    return itkAdditiveGaussianNoiseImageFilterID3ID3.New()

class itkAdditiveGaussianNoiseImageFilterID3ID3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID3ID3):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterID3ID3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterID3ID3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterID3ID3

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterID3ID3 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_swigregister(itkAdditiveGaussianNoiseImageFilterID3ID3)

def itkAdditiveGaussianNoiseImageFilterID4ID4_New():
    return itkAdditiveGaussianNoiseImageFilterID4ID4.New()

class itkAdditiveGaussianNoiseImageFilterID4ID4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID4ID4):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterID4ID4_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterID4ID4_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID4ID4_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID4ID4_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID4ID4_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID4ID4_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID4ID4_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID4ID4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterID4ID4

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterID4ID4 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID4ID4_swigregister(itkAdditiveGaussianNoiseImageFilterID4ID4)

def itkAdditiveGaussianNoiseImageFilterIF2IF2_New():
    return itkAdditiveGaussianNoiseImageFilterIF2IF2.New()

class itkAdditiveGaussianNoiseImageFilterIF2IF2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF2IF2):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIF2IF2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterIF2IF2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIF2IF2

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterIF2IF2 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_swigregister(itkAdditiveGaussianNoiseImageFilterIF2IF2)

def itkAdditiveGaussianNoiseImageFilterIF3IF3_New():
    return itkAdditiveGaussianNoiseImageFilterIF3IF3.New()

class itkAdditiveGaussianNoiseImageFilterIF3IF3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF3IF3):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIF3IF3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterIF3IF3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIF3IF3

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterIF3IF3 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_swigregister(itkAdditiveGaussianNoiseImageFilterIF3IF3)

def itkAdditiveGaussianNoiseImageFilterIF4IF4_New():
    return itkAdditiveGaussianNoiseImageFilterIF4IF4.New()

class itkAdditiveGaussianNoiseImageFilterIF4IF4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF4IF4):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIF4IF4_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterIF4IF4_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF4IF4_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF4IF4_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF4IF4_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF4IF4_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF4IF4_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF4IF4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIF4IF4

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterIF4IF4 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF4IF4_swigregister(itkAdditiveGaussianNoiseImageFilterIF4IF4)

def itkAdditiveGaussianNoiseImageFilterISS2ISS2_New():
    return itkAdditiveGaussianNoiseImageFilterISS2ISS2.New()

class itkAdditiveGaussianNoiseImageFilterISS2ISS2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS2ISS2):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterISS2ISS2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterISS2ISS2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterISS2ISS2

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterISS2ISS2 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_swigregister(itkAdditiveGaussianNoiseImageFilterISS2ISS2)

def itkAdditiveGaussianNoiseImageFilterISS3ISS3_New():
    return itkAdditiveGaussianNoiseImageFilterISS3ISS3.New()

class itkAdditiveGaussianNoiseImageFilterISS3ISS3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS3ISS3):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterISS3ISS3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterISS3ISS3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterISS3ISS3

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterISS3ISS3 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_swigregister(itkAdditiveGaussianNoiseImageFilterISS3ISS3)

def itkAdditiveGaussianNoiseImageFilterISS4ISS4_New():
    return itkAdditiveGaussianNoiseImageFilterISS4ISS4.New()

class itkAdditiveGaussianNoiseImageFilterISS4ISS4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS4ISS4):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterISS4ISS4_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterISS4ISS4_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS4ISS4_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS4ISS4_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS4ISS4_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS4ISS4_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS4ISS4_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS4ISS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterISS4ISS4

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterISS4ISS4 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS4ISS4_swigregister(itkAdditiveGaussianNoiseImageFilterISS4ISS4)

def itkAdditiveGaussianNoiseImageFilterIUC2IUC2_New():
    return itkAdditiveGaussianNoiseImageFilterIUC2IUC2.New()

class itkAdditiveGaussianNoiseImageFilterIUC2IUC2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC2IUC2):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUC2IUC2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterIUC2IUC2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIUC2IUC2

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterIUC2IUC2 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_swigregister(itkAdditiveGaussianNoiseImageFilterIUC2IUC2)

def itkAdditiveGaussianNoiseImageFilterIUC3IUC3_New():
    return itkAdditiveGaussianNoiseImageFilterIUC3IUC3.New()

class itkAdditiveGaussianNoiseImageFilterIUC3IUC3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC3IUC3):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUC3IUC3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterIUC3IUC3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIUC3IUC3

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterIUC3IUC3 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_swigregister(itkAdditiveGaussianNoiseImageFilterIUC3IUC3)

def itkAdditiveGaussianNoiseImageFilterIUC4IUC4_New():
    return itkAdditiveGaussianNoiseImageFilterIUC4IUC4.New()

class itkAdditiveGaussianNoiseImageFilterIUC4IUC4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC4IUC4):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUC4IUC4_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterIUC4IUC4_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC4IUC4_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC4IUC4_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC4IUC4_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC4IUC4_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC4IUC4_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC4IUC4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIUC4IUC4

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterIUC4IUC4 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC4IUC4_swigregister(itkAdditiveGaussianNoiseImageFilterIUC4IUC4)

def itkAdditiveGaussianNoiseImageFilterIUS2IUS2_New():
    return itkAdditiveGaussianNoiseImageFilterIUS2IUS2.New()

class itkAdditiveGaussianNoiseImageFilterIUS2IUS2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS2IUS2):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUS2IUS2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterIUS2IUS2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIUS2IUS2

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterIUS2IUS2 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_swigregister(itkAdditiveGaussianNoiseImageFilterIUS2IUS2)

def itkAdditiveGaussianNoiseImageFilterIUS3IUS3_New():
    return itkAdditiveGaussianNoiseImageFilterIUS3IUS3.New()

class itkAdditiveGaussianNoiseImageFilterIUS3IUS3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS3IUS3):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUS3IUS3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterIUS3IUS3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIUS3IUS3

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterIUS3IUS3 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_swigregister(itkAdditiveGaussianNoiseImageFilterIUS3IUS3)

def itkAdditiveGaussianNoiseImageFilterIUS4IUS4_New():
    return itkAdditiveGaussianNoiseImageFilterIUS4IUS4.New()

class itkAdditiveGaussianNoiseImageFilterIUS4IUS4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS4IUS4):
    r"""Proxy of C++ itkAdditiveGaussianNoiseImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUS4IUS4_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAdditiveGaussianNoiseImageFilterIUS4IUS4_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS4IUS4_Clone(self)

    def GetMean(self):
        r"""GetMean(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS4IUS4_GetMean(self)

    def SetMean(self, _arg):
        r"""
        SetMean(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS4IUS4_SetMean(self, _arg)

    def GetStandardDeviation(self):
        r"""GetStandardDeviation(self) -> double"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS4IUS4_GetStandardDeviation(self)

    def SetStandardDeviation(self, _arg):
        r"""
        SetStandardDeviation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS4IUS4_SetStandardDeviation(self, _arg)
    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS4IUS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAdditiveGaussianNoiseImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIUS4IUS4

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAdditiveGaussianNoiseImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdditiveGaussianNoiseImageFilterIUS4IUS4 in _itkAdditiveGaussianNoiseImageFilterPython:
_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS4IUS4_swigregister(itkAdditiveGaussianNoiseImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def additive_gaussian_noise_image_filter(*args: itkt.ImageLike,  mean: float=..., standard_deviation: float=..., seed: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for AdditiveGaussianNoiseImageFilter"""
    import itk

    kwarg_typehints = { 'mean':mean,'standard_deviation':standard_deviation,'seed':seed }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.AdditiveGaussianNoiseImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def additive_gaussian_noise_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageNoise.AdditiveGaussianNoiseImageFilter
    additive_gaussian_noise_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    additive_gaussian_noise_image_filter.__doc__ = filter_object.__doc__



