# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLabelMapPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLabelObjectPython
else:
    import _itkLabelObjectPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkLabelObjectLinePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython

def itkLabelObjectUL2_New():
    return itkLabelObjectUL2.New()

class itkLabelObjectUL2(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkLabelObjectUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelObjectUL2_Pointer"""
        return _itkLabelObjectPython.itkLabelObjectUL2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelObjectUL2_Pointer"""
        return _itkLabelObjectPython.itkLabelObjectUL2_Clone(self)

    @staticmethod
    def GetAttributeFromName(s):
        r"""
        GetAttributeFromName(s) -> unsigned int

        Parameters
        ----------
        s: std::string const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL2_GetAttributeFromName(s)

    @staticmethod
    def GetNameFromAttribute(a):
        r"""
        GetNameFromAttribute(a) -> std::string

        Parameters
        ----------
        a: unsigned int const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL2_GetNameFromAttribute(a)

    def GetLabel(self):
        r"""GetLabel(self) -> unsigned long const &"""
        return _itkLabelObjectPython.itkLabelObjectUL2_GetLabel(self)

    def SetLabel(self, label):
        r"""
        SetLabel(self, label)

        Parameters
        ----------
        label: unsigned long const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL2_SetLabel(self, label)

    def HasIndex(self, idx):
        r"""
        HasIndex(self, idx) -> bool

        Parameters
        ----------
        idx: itkIndex2 const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL2_HasIndex(self, idx)

    def AddIndex(self, idx):
        r"""
        AddIndex(self, idx)

        Parameters
        ----------
        idx: itkIndex2 const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL2_AddIndex(self, idx)

    def RemoveIndex(self, idx):
        r"""
        RemoveIndex(self, idx) -> bool

        Parameters
        ----------
        idx: itkIndex2 const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL2_RemoveIndex(self, idx)

    def AddLine(self, *args):
        r"""
        AddLine(self, idx, length)

        Parameters
        ----------
        idx: itkIndex2 const &
        length: unsigned long const &

        AddLine(self, line)

        Parameters
        ----------
        line: itkLabelObjectLine2 const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL2_AddLine(self, *args)

    def GetNumberOfLines(self):
        r"""GetNumberOfLines(self) -> unsigned long"""
        return _itkLabelObjectPython.itkLabelObjectUL2_GetNumberOfLines(self)

    def GetLine(self, *args):
        r"""
        GetLine(self, i) -> itkLabelObjectLine2

        Parameters
        ----------
        i: unsigned long

        GetLine(self, i) -> itkLabelObjectLine2

        Parameters
        ----------
        i: unsigned long

        """
        return _itkLabelObjectPython.itkLabelObjectUL2_GetLine(self, *args)

    def Size(self):
        r"""Size(self) -> unsigned long"""
        return _itkLabelObjectPython.itkLabelObjectUL2_Size(self)

    def Empty(self):
        r"""Empty(self) -> bool"""
        return _itkLabelObjectPython.itkLabelObjectUL2_Empty(self)

    def Clear(self):
        r"""Clear(self)"""
        return _itkLabelObjectPython.itkLabelObjectUL2_Clear(self)

    def GetIndex(self, offset):
        r"""
        GetIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: unsigned long

        """
        return _itkLabelObjectPython.itkLabelObjectUL2_GetIndex(self, offset)

    def Optimize(self):
        r"""Optimize(self)"""
        return _itkLabelObjectPython.itkLabelObjectUL2_Optimize(self)

    def Shift(self, offset):
        r"""
        Shift(self, offset)

        Parameters
        ----------
        offset: itkOffset2

        """
        return _itkLabelObjectPython.itkLabelObjectUL2_Shift(self, offset)
    __swig_destroy__ = _itkLabelObjectPython.delete_itkLabelObjectUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelObjectUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelObjectPython.itkLabelObjectUL2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelObjectUL2

        Create a new object of the class itkLabelObjectUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelObjectUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelObjectUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelObjectUL2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelObjectUL2 in _itkLabelObjectPython:
_itkLabelObjectPython.itkLabelObjectUL2_swigregister(itkLabelObjectUL2)

def itkLabelObjectUL3_New():
    return itkLabelObjectUL3.New()

class itkLabelObjectUL3(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkLabelObjectUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelObjectUL3_Pointer"""
        return _itkLabelObjectPython.itkLabelObjectUL3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelObjectUL3_Pointer"""
        return _itkLabelObjectPython.itkLabelObjectUL3_Clone(self)

    @staticmethod
    def GetAttributeFromName(s):
        r"""
        GetAttributeFromName(s) -> unsigned int

        Parameters
        ----------
        s: std::string const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL3_GetAttributeFromName(s)

    @staticmethod
    def GetNameFromAttribute(a):
        r"""
        GetNameFromAttribute(a) -> std::string

        Parameters
        ----------
        a: unsigned int const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL3_GetNameFromAttribute(a)

    def GetLabel(self):
        r"""GetLabel(self) -> unsigned long const &"""
        return _itkLabelObjectPython.itkLabelObjectUL3_GetLabel(self)

    def SetLabel(self, label):
        r"""
        SetLabel(self, label)

        Parameters
        ----------
        label: unsigned long const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL3_SetLabel(self, label)

    def HasIndex(self, idx):
        r"""
        HasIndex(self, idx) -> bool

        Parameters
        ----------
        idx: itkIndex3 const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL3_HasIndex(self, idx)

    def AddIndex(self, idx):
        r"""
        AddIndex(self, idx)

        Parameters
        ----------
        idx: itkIndex3 const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL3_AddIndex(self, idx)

    def RemoveIndex(self, idx):
        r"""
        RemoveIndex(self, idx) -> bool

        Parameters
        ----------
        idx: itkIndex3 const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL3_RemoveIndex(self, idx)

    def AddLine(self, *args):
        r"""
        AddLine(self, idx, length)

        Parameters
        ----------
        idx: itkIndex3 const &
        length: unsigned long const &

        AddLine(self, line)

        Parameters
        ----------
        line: itkLabelObjectLine3 const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL3_AddLine(self, *args)

    def GetNumberOfLines(self):
        r"""GetNumberOfLines(self) -> unsigned long"""
        return _itkLabelObjectPython.itkLabelObjectUL3_GetNumberOfLines(self)

    def GetLine(self, *args):
        r"""
        GetLine(self, i) -> itkLabelObjectLine3

        Parameters
        ----------
        i: unsigned long

        GetLine(self, i) -> itkLabelObjectLine3

        Parameters
        ----------
        i: unsigned long

        """
        return _itkLabelObjectPython.itkLabelObjectUL3_GetLine(self, *args)

    def Size(self):
        r"""Size(self) -> unsigned long"""
        return _itkLabelObjectPython.itkLabelObjectUL3_Size(self)

    def Empty(self):
        r"""Empty(self) -> bool"""
        return _itkLabelObjectPython.itkLabelObjectUL3_Empty(self)

    def Clear(self):
        r"""Clear(self)"""
        return _itkLabelObjectPython.itkLabelObjectUL3_Clear(self)

    def GetIndex(self, offset):
        r"""
        GetIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: unsigned long

        """
        return _itkLabelObjectPython.itkLabelObjectUL3_GetIndex(self, offset)

    def Optimize(self):
        r"""Optimize(self)"""
        return _itkLabelObjectPython.itkLabelObjectUL3_Optimize(self)

    def Shift(self, offset):
        r"""
        Shift(self, offset)

        Parameters
        ----------
        offset: itkOffset3

        """
        return _itkLabelObjectPython.itkLabelObjectUL3_Shift(self, offset)
    __swig_destroy__ = _itkLabelObjectPython.delete_itkLabelObjectUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelObjectUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelObjectPython.itkLabelObjectUL3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelObjectUL3

        Create a new object of the class itkLabelObjectUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelObjectUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelObjectUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelObjectUL3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelObjectUL3 in _itkLabelObjectPython:
_itkLabelObjectPython.itkLabelObjectUL3_swigregister(itkLabelObjectUL3)

def itkLabelObjectUL4_New():
    return itkLabelObjectUL4.New()

class itkLabelObjectUL4(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkLabelObjectUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelObjectUL4_Pointer"""
        return _itkLabelObjectPython.itkLabelObjectUL4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelObjectUL4_Pointer"""
        return _itkLabelObjectPython.itkLabelObjectUL4_Clone(self)

    @staticmethod
    def GetAttributeFromName(s):
        r"""
        GetAttributeFromName(s) -> unsigned int

        Parameters
        ----------
        s: std::string const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL4_GetAttributeFromName(s)

    @staticmethod
    def GetNameFromAttribute(a):
        r"""
        GetNameFromAttribute(a) -> std::string

        Parameters
        ----------
        a: unsigned int const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL4_GetNameFromAttribute(a)

    def GetLabel(self):
        r"""GetLabel(self) -> unsigned long const &"""
        return _itkLabelObjectPython.itkLabelObjectUL4_GetLabel(self)

    def SetLabel(self, label):
        r"""
        SetLabel(self, label)

        Parameters
        ----------
        label: unsigned long const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL4_SetLabel(self, label)

    def HasIndex(self, idx):
        r"""
        HasIndex(self, idx) -> bool

        Parameters
        ----------
        idx: itkIndex4 const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL4_HasIndex(self, idx)

    def AddIndex(self, idx):
        r"""
        AddIndex(self, idx)

        Parameters
        ----------
        idx: itkIndex4 const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL4_AddIndex(self, idx)

    def RemoveIndex(self, idx):
        r"""
        RemoveIndex(self, idx) -> bool

        Parameters
        ----------
        idx: itkIndex4 const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL4_RemoveIndex(self, idx)

    def AddLine(self, *args):
        r"""
        AddLine(self, idx, length)

        Parameters
        ----------
        idx: itkIndex4 const &
        length: unsigned long const &

        AddLine(self, line)

        Parameters
        ----------
        line: itkLabelObjectLine4 const &

        """
        return _itkLabelObjectPython.itkLabelObjectUL4_AddLine(self, *args)

    def GetNumberOfLines(self):
        r"""GetNumberOfLines(self) -> unsigned long"""
        return _itkLabelObjectPython.itkLabelObjectUL4_GetNumberOfLines(self)

    def GetLine(self, *args):
        r"""
        GetLine(self, i) -> itkLabelObjectLine4

        Parameters
        ----------
        i: unsigned long

        GetLine(self, i) -> itkLabelObjectLine4

        Parameters
        ----------
        i: unsigned long

        """
        return _itkLabelObjectPython.itkLabelObjectUL4_GetLine(self, *args)

    def Size(self):
        r"""Size(self) -> unsigned long"""
        return _itkLabelObjectPython.itkLabelObjectUL4_Size(self)

    def Empty(self):
        r"""Empty(self) -> bool"""
        return _itkLabelObjectPython.itkLabelObjectUL4_Empty(self)

    def Clear(self):
        r"""Clear(self)"""
        return _itkLabelObjectPython.itkLabelObjectUL4_Clear(self)

    def GetIndex(self, offset):
        r"""
        GetIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: unsigned long

        """
        return _itkLabelObjectPython.itkLabelObjectUL4_GetIndex(self, offset)

    def Optimize(self):
        r"""Optimize(self)"""
        return _itkLabelObjectPython.itkLabelObjectUL4_Optimize(self)

    def Shift(self, offset):
        r"""
        Shift(self, offset)

        Parameters
        ----------
        offset: itkOffset4

        """
        return _itkLabelObjectPython.itkLabelObjectUL4_Shift(self, offset)
    __swig_destroy__ = _itkLabelObjectPython.delete_itkLabelObjectUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelObjectUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelObjectPython.itkLabelObjectUL4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelObjectUL4

        Create a new object of the class itkLabelObjectUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelObjectUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelObjectUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelObjectUL4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelObjectUL4 in _itkLabelObjectPython:
_itkLabelObjectPython.itkLabelObjectUL4_swigregister(itkLabelObjectUL4)

