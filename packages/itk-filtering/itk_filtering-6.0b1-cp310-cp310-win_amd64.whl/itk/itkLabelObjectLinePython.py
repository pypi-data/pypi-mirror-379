# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLabelMapPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLabelObjectLinePython
else:
    import _itkLabelObjectLinePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
class itkLabelObjectLine2(object):
    r"""Proxy of C++ itkLabelObjectLine2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, arg0) -> itkLabelObjectLine2

        Parameters
        ----------
        arg0: itkLabelObjectLine2 const &

        __init__(self) -> itkLabelObjectLine2
        __init__(self, idx, length) -> itkLabelObjectLine2

        Parameters
        ----------
        idx: itkIndex2 const &
        length: unsigned long long const &

        """
        _itkLabelObjectLinePython.itkLabelObjectLine2_swiginit(self, _itkLabelObjectLinePython.new_itkLabelObjectLine2(*args))
    __swig_destroy__ = _itkLabelObjectLinePython.delete_itkLabelObjectLine2

    def SetIndex(self, idx):
        r"""
        SetIndex(self, idx)

        Parameters
        ----------
        idx: itkIndex2 const &

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine2_SetIndex(self, idx)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex2"""
        return _itkLabelObjectLinePython.itkLabelObjectLine2_GetIndex(self)

    def SetLength(self, length):
        r"""
        SetLength(self, length)

        Parameters
        ----------
        length: unsigned long long const

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine2_SetLength(self, length)

    def GetLength(self):
        r"""GetLength(self) -> unsigned long long const &"""
        return _itkLabelObjectLinePython.itkLabelObjectLine2_GetLength(self)

    def HasIndex(self, idx):
        r"""
        HasIndex(self, idx) -> bool

        Parameters
        ----------
        idx: itkIndex2 const

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine2_HasIndex(self, idx)

    def IsNextIndex(self, idx):
        r"""
        IsNextIndex(self, idx) -> bool

        Parameters
        ----------
        idx: itkIndex2 const &

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine2_IsNextIndex(self, idx)

    def Print(self, os, indent=0):
        r"""
        Print(self, os, indent=0)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine2_Print(self, os, indent)

# Register itkLabelObjectLine2 in _itkLabelObjectLinePython:
_itkLabelObjectLinePython.itkLabelObjectLine2_swigregister(itkLabelObjectLine2)
class itkLabelObjectLine3(object):
    r"""Proxy of C++ itkLabelObjectLine3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, arg0) -> itkLabelObjectLine3

        Parameters
        ----------
        arg0: itkLabelObjectLine3 const &

        __init__(self) -> itkLabelObjectLine3
        __init__(self, idx, length) -> itkLabelObjectLine3

        Parameters
        ----------
        idx: itkIndex3 const &
        length: unsigned long long const &

        """
        _itkLabelObjectLinePython.itkLabelObjectLine3_swiginit(self, _itkLabelObjectLinePython.new_itkLabelObjectLine3(*args))
    __swig_destroy__ = _itkLabelObjectLinePython.delete_itkLabelObjectLine3

    def SetIndex(self, idx):
        r"""
        SetIndex(self, idx)

        Parameters
        ----------
        idx: itkIndex3 const &

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine3_SetIndex(self, idx)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex3"""
        return _itkLabelObjectLinePython.itkLabelObjectLine3_GetIndex(self)

    def SetLength(self, length):
        r"""
        SetLength(self, length)

        Parameters
        ----------
        length: unsigned long long const

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine3_SetLength(self, length)

    def GetLength(self):
        r"""GetLength(self) -> unsigned long long const &"""
        return _itkLabelObjectLinePython.itkLabelObjectLine3_GetLength(self)

    def HasIndex(self, idx):
        r"""
        HasIndex(self, idx) -> bool

        Parameters
        ----------
        idx: itkIndex3 const

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine3_HasIndex(self, idx)

    def IsNextIndex(self, idx):
        r"""
        IsNextIndex(self, idx) -> bool

        Parameters
        ----------
        idx: itkIndex3 const &

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine3_IsNextIndex(self, idx)

    def Print(self, os, indent=0):
        r"""
        Print(self, os, indent=0)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine3_Print(self, os, indent)

# Register itkLabelObjectLine3 in _itkLabelObjectLinePython:
_itkLabelObjectLinePython.itkLabelObjectLine3_swigregister(itkLabelObjectLine3)
class itkLabelObjectLine4(object):
    r"""Proxy of C++ itkLabelObjectLine4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, arg0) -> itkLabelObjectLine4

        Parameters
        ----------
        arg0: itkLabelObjectLine4 const &

        __init__(self) -> itkLabelObjectLine4
        __init__(self, idx, length) -> itkLabelObjectLine4

        Parameters
        ----------
        idx: itkIndex4 const &
        length: unsigned long long const &

        """
        _itkLabelObjectLinePython.itkLabelObjectLine4_swiginit(self, _itkLabelObjectLinePython.new_itkLabelObjectLine4(*args))
    __swig_destroy__ = _itkLabelObjectLinePython.delete_itkLabelObjectLine4

    def SetIndex(self, idx):
        r"""
        SetIndex(self, idx)

        Parameters
        ----------
        idx: itkIndex4 const &

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine4_SetIndex(self, idx)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex4"""
        return _itkLabelObjectLinePython.itkLabelObjectLine4_GetIndex(self)

    def SetLength(self, length):
        r"""
        SetLength(self, length)

        Parameters
        ----------
        length: unsigned long long const

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine4_SetLength(self, length)

    def GetLength(self):
        r"""GetLength(self) -> unsigned long long const &"""
        return _itkLabelObjectLinePython.itkLabelObjectLine4_GetLength(self)

    def HasIndex(self, idx):
        r"""
        HasIndex(self, idx) -> bool

        Parameters
        ----------
        idx: itkIndex4 const

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine4_HasIndex(self, idx)

    def IsNextIndex(self, idx):
        r"""
        IsNextIndex(self, idx) -> bool

        Parameters
        ----------
        idx: itkIndex4 const &

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine4_IsNextIndex(self, idx)

    def Print(self, os, indent=0):
        r"""
        Print(self, os, indent=0)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkLabelObjectLinePython.itkLabelObjectLine4_Print(self, os, indent)

# Register itkLabelObjectLine4 in _itkLabelObjectLinePython:
_itkLabelObjectLinePython.itkLabelObjectLine4_swigregister(itkLabelObjectLine4)

