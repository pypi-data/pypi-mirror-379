# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFrequencyPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFrequencyBandImageFilterPython
else:
    import _itkFrequencyBandImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkUnaryFrequencyDomainFilterPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkFrequencyBandImageFilterICD2_New():
    return itkFrequencyBandImageFilterICD2.New()

class itkFrequencyBandImageFilterICD2(itk.itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICD2):
    r"""Proxy of C++ itkFrequencyBandImageFilterICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFrequencyBandImageFilterICD2_Pointer"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFrequencyBandImageFilterICD2_Pointer"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_Clone(self)

    def GetLowFrequencyThreshold(self):
        r"""GetLowFrequencyThreshold(self) -> double const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_GetLowFrequencyThreshold(self)

    def SetLowFrequencyThreshold(self, _arg):
        r"""
        SetLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_SetLowFrequencyThreshold(self, _arg)

    def SetLowFrequencyThresholdInRadians(self, freqLowInRadians):
        r"""
        SetLowFrequencyThresholdInRadians(self, freqLowInRadians)

        Parameters
        ----------
        freqLowInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_SetLowFrequencyThresholdInRadians(self, freqLowInRadians)

    def GetHighFrequencyThreshold(self):
        r"""GetHighFrequencyThreshold(self) -> double const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_GetHighFrequencyThreshold(self)

    def SetHighFrequencyThreshold(self, _arg):
        r"""
        SetHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_SetHighFrequencyThreshold(self, _arg)

    def SetHighFrequencyThresholdInRadians(self, freqHighInRadians):
        r"""
        SetHighFrequencyThresholdInRadians(self, freqHighInRadians)

        Parameters
        ----------
        freqHighInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_SetHighFrequencyThresholdInRadians(self, freqHighInRadians)

    def SetFrequencyThresholds(self, freqLow, freqHigh):
        r"""
        SetFrequencyThresholds(self, freqLow, freqHigh)

        Parameters
        ----------
        freqLow: double const &
        freqHigh: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_SetFrequencyThresholds(self, freqLow, freqHigh)

    def SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians):
        r"""
        SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians)

        Parameters
        ----------
        freqLowInRadians: double const &
        freqHighInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians)

    def SetPassLowFrequencyThreshold(self, _arg):
        r"""
        SetPassLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_SetPassLowFrequencyThreshold(self, _arg)

    def GetPassLowFrequencyThreshold(self):
        r"""GetPassLowFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_GetPassLowFrequencyThreshold(self)

    def PassLowFrequencyThresholdOn(self):
        r"""PassLowFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_PassLowFrequencyThresholdOn(self)

    def PassLowFrequencyThresholdOff(self):
        r"""PassLowFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_PassLowFrequencyThresholdOff(self)

    def SetPassHighFrequencyThreshold(self, _arg):
        r"""
        SetPassHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_SetPassHighFrequencyThreshold(self, _arg)

    def GetPassHighFrequencyThreshold(self):
        r"""GetPassHighFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_GetPassHighFrequencyThreshold(self)

    def PassHighFrequencyThresholdOn(self):
        r"""PassHighFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_PassHighFrequencyThresholdOn(self)

    def PassHighFrequencyThresholdOff(self):
        r"""PassHighFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_PassHighFrequencyThresholdOff(self)

    def GetPassBand(self):
        r"""GetPassBand(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_GetPassBand(self)

    def PassBandOn(self):
        r"""PassBandOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_PassBandOn(self)

    def PassBandOff(self):
        r"""PassBandOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_PassBandOff(self)

    def SetPassBand(self, *args):
        r"""
        SetPassBand(self, _arg)

        Parameters
        ----------
        _arg: bool

        SetPassBand(self, passLowThreshold, passHighThreshold)

        Parameters
        ----------
        passLowThreshold: bool const
        passHighThreshold: bool const

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_SetPassBand(self, *args)

    def SetStopBand(self, passLowThreshold, passHighThreshold):
        r"""
        SetStopBand(self, passLowThreshold, passHighThreshold)

        Parameters
        ----------
        passLowThreshold: bool const
        passHighThreshold: bool const

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_SetStopBand(self, passLowThreshold, passHighThreshold)

    def SetRadialBand(self, _arg):
        r"""
        SetRadialBand(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_SetRadialBand(self, _arg)

    def GetRadialBand(self):
        r"""GetRadialBand(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_GetRadialBand(self)

    def RadialBandOn(self):
        r"""RadialBandOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_RadialBandOn(self)

    def RadialBandOff(self):
        r"""RadialBandOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_RadialBandOff(self)

    def SetPassNegativeLowFrequencyThreshold(self, _arg):
        r"""
        SetPassNegativeLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_SetPassNegativeLowFrequencyThreshold(self, _arg)

    def GetPassNegativeLowFrequencyThreshold(self):
        r"""GetPassNegativeLowFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_GetPassNegativeLowFrequencyThreshold(self)

    def PassNegativeLowFrequencyThresholdOn(self):
        r"""PassNegativeLowFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_PassNegativeLowFrequencyThresholdOn(self)

    def PassNegativeLowFrequencyThresholdOff(self):
        r"""PassNegativeLowFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_PassNegativeLowFrequencyThresholdOff(self)

    def SetPassNegativeHighFrequencyThreshold(self, _arg):
        r"""
        SetPassNegativeHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_SetPassNegativeHighFrequencyThreshold(self, _arg)

    def GetPassNegativeHighFrequencyThreshold(self):
        r"""GetPassNegativeHighFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_GetPassNegativeHighFrequencyThreshold(self)

    def PassNegativeHighFrequencyThresholdOn(self):
        r"""PassNegativeHighFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_PassNegativeHighFrequencyThresholdOn(self)

    def PassNegativeHighFrequencyThresholdOff(self):
        r"""PassNegativeHighFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_PassNegativeHighFrequencyThresholdOff(self)
    __swig_destroy__ = _itkFrequencyBandImageFilterPython.delete_itkFrequencyBandImageFilterICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFrequencyBandImageFilterICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFrequencyBandImageFilterICD2

        Create a new object of the class itkFrequencyBandImageFilterICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyBandImageFilterICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyBandImageFilterICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyBandImageFilterICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyBandImageFilterICD2 in _itkFrequencyBandImageFilterPython:
_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD2_swigregister(itkFrequencyBandImageFilterICD2)

def itkFrequencyBandImageFilterICD3_New():
    return itkFrequencyBandImageFilterICD3.New()

class itkFrequencyBandImageFilterICD3(itk.itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICD3):
    r"""Proxy of C++ itkFrequencyBandImageFilterICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFrequencyBandImageFilterICD3_Pointer"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFrequencyBandImageFilterICD3_Pointer"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_Clone(self)

    def GetLowFrequencyThreshold(self):
        r"""GetLowFrequencyThreshold(self) -> double const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_GetLowFrequencyThreshold(self)

    def SetLowFrequencyThreshold(self, _arg):
        r"""
        SetLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_SetLowFrequencyThreshold(self, _arg)

    def SetLowFrequencyThresholdInRadians(self, freqLowInRadians):
        r"""
        SetLowFrequencyThresholdInRadians(self, freqLowInRadians)

        Parameters
        ----------
        freqLowInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_SetLowFrequencyThresholdInRadians(self, freqLowInRadians)

    def GetHighFrequencyThreshold(self):
        r"""GetHighFrequencyThreshold(self) -> double const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_GetHighFrequencyThreshold(self)

    def SetHighFrequencyThreshold(self, _arg):
        r"""
        SetHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_SetHighFrequencyThreshold(self, _arg)

    def SetHighFrequencyThresholdInRadians(self, freqHighInRadians):
        r"""
        SetHighFrequencyThresholdInRadians(self, freqHighInRadians)

        Parameters
        ----------
        freqHighInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_SetHighFrequencyThresholdInRadians(self, freqHighInRadians)

    def SetFrequencyThresholds(self, freqLow, freqHigh):
        r"""
        SetFrequencyThresholds(self, freqLow, freqHigh)

        Parameters
        ----------
        freqLow: double const &
        freqHigh: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_SetFrequencyThresholds(self, freqLow, freqHigh)

    def SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians):
        r"""
        SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians)

        Parameters
        ----------
        freqLowInRadians: double const &
        freqHighInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians)

    def SetPassLowFrequencyThreshold(self, _arg):
        r"""
        SetPassLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_SetPassLowFrequencyThreshold(self, _arg)

    def GetPassLowFrequencyThreshold(self):
        r"""GetPassLowFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_GetPassLowFrequencyThreshold(self)

    def PassLowFrequencyThresholdOn(self):
        r"""PassLowFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_PassLowFrequencyThresholdOn(self)

    def PassLowFrequencyThresholdOff(self):
        r"""PassLowFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_PassLowFrequencyThresholdOff(self)

    def SetPassHighFrequencyThreshold(self, _arg):
        r"""
        SetPassHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_SetPassHighFrequencyThreshold(self, _arg)

    def GetPassHighFrequencyThreshold(self):
        r"""GetPassHighFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_GetPassHighFrequencyThreshold(self)

    def PassHighFrequencyThresholdOn(self):
        r"""PassHighFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_PassHighFrequencyThresholdOn(self)

    def PassHighFrequencyThresholdOff(self):
        r"""PassHighFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_PassHighFrequencyThresholdOff(self)

    def GetPassBand(self):
        r"""GetPassBand(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_GetPassBand(self)

    def PassBandOn(self):
        r"""PassBandOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_PassBandOn(self)

    def PassBandOff(self):
        r"""PassBandOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_PassBandOff(self)

    def SetPassBand(self, *args):
        r"""
        SetPassBand(self, _arg)

        Parameters
        ----------
        _arg: bool

        SetPassBand(self, passLowThreshold, passHighThreshold)

        Parameters
        ----------
        passLowThreshold: bool const
        passHighThreshold: bool const

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_SetPassBand(self, *args)

    def SetStopBand(self, passLowThreshold, passHighThreshold):
        r"""
        SetStopBand(self, passLowThreshold, passHighThreshold)

        Parameters
        ----------
        passLowThreshold: bool const
        passHighThreshold: bool const

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_SetStopBand(self, passLowThreshold, passHighThreshold)

    def SetRadialBand(self, _arg):
        r"""
        SetRadialBand(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_SetRadialBand(self, _arg)

    def GetRadialBand(self):
        r"""GetRadialBand(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_GetRadialBand(self)

    def RadialBandOn(self):
        r"""RadialBandOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_RadialBandOn(self)

    def RadialBandOff(self):
        r"""RadialBandOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_RadialBandOff(self)

    def SetPassNegativeLowFrequencyThreshold(self, _arg):
        r"""
        SetPassNegativeLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_SetPassNegativeLowFrequencyThreshold(self, _arg)

    def GetPassNegativeLowFrequencyThreshold(self):
        r"""GetPassNegativeLowFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_GetPassNegativeLowFrequencyThreshold(self)

    def PassNegativeLowFrequencyThresholdOn(self):
        r"""PassNegativeLowFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_PassNegativeLowFrequencyThresholdOn(self)

    def PassNegativeLowFrequencyThresholdOff(self):
        r"""PassNegativeLowFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_PassNegativeLowFrequencyThresholdOff(self)

    def SetPassNegativeHighFrequencyThreshold(self, _arg):
        r"""
        SetPassNegativeHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_SetPassNegativeHighFrequencyThreshold(self, _arg)

    def GetPassNegativeHighFrequencyThreshold(self):
        r"""GetPassNegativeHighFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_GetPassNegativeHighFrequencyThreshold(self)

    def PassNegativeHighFrequencyThresholdOn(self):
        r"""PassNegativeHighFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_PassNegativeHighFrequencyThresholdOn(self)

    def PassNegativeHighFrequencyThresholdOff(self):
        r"""PassNegativeHighFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_PassNegativeHighFrequencyThresholdOff(self)
    __swig_destroy__ = _itkFrequencyBandImageFilterPython.delete_itkFrequencyBandImageFilterICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFrequencyBandImageFilterICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFrequencyBandImageFilterICD3

        Create a new object of the class itkFrequencyBandImageFilterICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyBandImageFilterICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyBandImageFilterICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyBandImageFilterICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyBandImageFilterICD3 in _itkFrequencyBandImageFilterPython:
_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD3_swigregister(itkFrequencyBandImageFilterICD3)

def itkFrequencyBandImageFilterICD4_New():
    return itkFrequencyBandImageFilterICD4.New()

class itkFrequencyBandImageFilterICD4(itk.itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICD4):
    r"""Proxy of C++ itkFrequencyBandImageFilterICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFrequencyBandImageFilterICD4_Pointer"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFrequencyBandImageFilterICD4_Pointer"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_Clone(self)

    def GetLowFrequencyThreshold(self):
        r"""GetLowFrequencyThreshold(self) -> double const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_GetLowFrequencyThreshold(self)

    def SetLowFrequencyThreshold(self, _arg):
        r"""
        SetLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_SetLowFrequencyThreshold(self, _arg)

    def SetLowFrequencyThresholdInRadians(self, freqLowInRadians):
        r"""
        SetLowFrequencyThresholdInRadians(self, freqLowInRadians)

        Parameters
        ----------
        freqLowInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_SetLowFrequencyThresholdInRadians(self, freqLowInRadians)

    def GetHighFrequencyThreshold(self):
        r"""GetHighFrequencyThreshold(self) -> double const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_GetHighFrequencyThreshold(self)

    def SetHighFrequencyThreshold(self, _arg):
        r"""
        SetHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_SetHighFrequencyThreshold(self, _arg)

    def SetHighFrequencyThresholdInRadians(self, freqHighInRadians):
        r"""
        SetHighFrequencyThresholdInRadians(self, freqHighInRadians)

        Parameters
        ----------
        freqHighInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_SetHighFrequencyThresholdInRadians(self, freqHighInRadians)

    def SetFrequencyThresholds(self, freqLow, freqHigh):
        r"""
        SetFrequencyThresholds(self, freqLow, freqHigh)

        Parameters
        ----------
        freqLow: double const &
        freqHigh: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_SetFrequencyThresholds(self, freqLow, freqHigh)

    def SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians):
        r"""
        SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians)

        Parameters
        ----------
        freqLowInRadians: double const &
        freqHighInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians)

    def SetPassLowFrequencyThreshold(self, _arg):
        r"""
        SetPassLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_SetPassLowFrequencyThreshold(self, _arg)

    def GetPassLowFrequencyThreshold(self):
        r"""GetPassLowFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_GetPassLowFrequencyThreshold(self)

    def PassLowFrequencyThresholdOn(self):
        r"""PassLowFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_PassLowFrequencyThresholdOn(self)

    def PassLowFrequencyThresholdOff(self):
        r"""PassLowFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_PassLowFrequencyThresholdOff(self)

    def SetPassHighFrequencyThreshold(self, _arg):
        r"""
        SetPassHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_SetPassHighFrequencyThreshold(self, _arg)

    def GetPassHighFrequencyThreshold(self):
        r"""GetPassHighFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_GetPassHighFrequencyThreshold(self)

    def PassHighFrequencyThresholdOn(self):
        r"""PassHighFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_PassHighFrequencyThresholdOn(self)

    def PassHighFrequencyThresholdOff(self):
        r"""PassHighFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_PassHighFrequencyThresholdOff(self)

    def GetPassBand(self):
        r"""GetPassBand(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_GetPassBand(self)

    def PassBandOn(self):
        r"""PassBandOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_PassBandOn(self)

    def PassBandOff(self):
        r"""PassBandOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_PassBandOff(self)

    def SetPassBand(self, *args):
        r"""
        SetPassBand(self, _arg)

        Parameters
        ----------
        _arg: bool

        SetPassBand(self, passLowThreshold, passHighThreshold)

        Parameters
        ----------
        passLowThreshold: bool const
        passHighThreshold: bool const

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_SetPassBand(self, *args)

    def SetStopBand(self, passLowThreshold, passHighThreshold):
        r"""
        SetStopBand(self, passLowThreshold, passHighThreshold)

        Parameters
        ----------
        passLowThreshold: bool const
        passHighThreshold: bool const

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_SetStopBand(self, passLowThreshold, passHighThreshold)

    def SetRadialBand(self, _arg):
        r"""
        SetRadialBand(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_SetRadialBand(self, _arg)

    def GetRadialBand(self):
        r"""GetRadialBand(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_GetRadialBand(self)

    def RadialBandOn(self):
        r"""RadialBandOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_RadialBandOn(self)

    def RadialBandOff(self):
        r"""RadialBandOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_RadialBandOff(self)

    def SetPassNegativeLowFrequencyThreshold(self, _arg):
        r"""
        SetPassNegativeLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_SetPassNegativeLowFrequencyThreshold(self, _arg)

    def GetPassNegativeLowFrequencyThreshold(self):
        r"""GetPassNegativeLowFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_GetPassNegativeLowFrequencyThreshold(self)

    def PassNegativeLowFrequencyThresholdOn(self):
        r"""PassNegativeLowFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_PassNegativeLowFrequencyThresholdOn(self)

    def PassNegativeLowFrequencyThresholdOff(self):
        r"""PassNegativeLowFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_PassNegativeLowFrequencyThresholdOff(self)

    def SetPassNegativeHighFrequencyThreshold(self, _arg):
        r"""
        SetPassNegativeHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_SetPassNegativeHighFrequencyThreshold(self, _arg)

    def GetPassNegativeHighFrequencyThreshold(self):
        r"""GetPassNegativeHighFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_GetPassNegativeHighFrequencyThreshold(self)

    def PassNegativeHighFrequencyThresholdOn(self):
        r"""PassNegativeHighFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_PassNegativeHighFrequencyThresholdOn(self)

    def PassNegativeHighFrequencyThresholdOff(self):
        r"""PassNegativeHighFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_PassNegativeHighFrequencyThresholdOff(self)
    __swig_destroy__ = _itkFrequencyBandImageFilterPython.delete_itkFrequencyBandImageFilterICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFrequencyBandImageFilterICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFrequencyBandImageFilterICD4

        Create a new object of the class itkFrequencyBandImageFilterICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyBandImageFilterICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyBandImageFilterICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyBandImageFilterICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyBandImageFilterICD4 in _itkFrequencyBandImageFilterPython:
_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICD4_swigregister(itkFrequencyBandImageFilterICD4)

def itkFrequencyBandImageFilterICF2_New():
    return itkFrequencyBandImageFilterICF2.New()

class itkFrequencyBandImageFilterICF2(itk.itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF2):
    r"""Proxy of C++ itkFrequencyBandImageFilterICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFrequencyBandImageFilterICF2_Pointer"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFrequencyBandImageFilterICF2_Pointer"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_Clone(self)

    def GetLowFrequencyThreshold(self):
        r"""GetLowFrequencyThreshold(self) -> double const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetLowFrequencyThreshold(self)

    def SetLowFrequencyThreshold(self, _arg):
        r"""
        SetLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetLowFrequencyThreshold(self, _arg)

    def SetLowFrequencyThresholdInRadians(self, freqLowInRadians):
        r"""
        SetLowFrequencyThresholdInRadians(self, freqLowInRadians)

        Parameters
        ----------
        freqLowInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetLowFrequencyThresholdInRadians(self, freqLowInRadians)

    def GetHighFrequencyThreshold(self):
        r"""GetHighFrequencyThreshold(self) -> double const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetHighFrequencyThreshold(self)

    def SetHighFrequencyThreshold(self, _arg):
        r"""
        SetHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetHighFrequencyThreshold(self, _arg)

    def SetHighFrequencyThresholdInRadians(self, freqHighInRadians):
        r"""
        SetHighFrequencyThresholdInRadians(self, freqHighInRadians)

        Parameters
        ----------
        freqHighInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetHighFrequencyThresholdInRadians(self, freqHighInRadians)

    def SetFrequencyThresholds(self, freqLow, freqHigh):
        r"""
        SetFrequencyThresholds(self, freqLow, freqHigh)

        Parameters
        ----------
        freqLow: double const &
        freqHigh: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetFrequencyThresholds(self, freqLow, freqHigh)

    def SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians):
        r"""
        SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians)

        Parameters
        ----------
        freqLowInRadians: double const &
        freqHighInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians)

    def SetPassLowFrequencyThreshold(self, _arg):
        r"""
        SetPassLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetPassLowFrequencyThreshold(self, _arg)

    def GetPassLowFrequencyThreshold(self):
        r"""GetPassLowFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetPassLowFrequencyThreshold(self)

    def PassLowFrequencyThresholdOn(self):
        r"""PassLowFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassLowFrequencyThresholdOn(self)

    def PassLowFrequencyThresholdOff(self):
        r"""PassLowFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassLowFrequencyThresholdOff(self)

    def SetPassHighFrequencyThreshold(self, _arg):
        r"""
        SetPassHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetPassHighFrequencyThreshold(self, _arg)

    def GetPassHighFrequencyThreshold(self):
        r"""GetPassHighFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetPassHighFrequencyThreshold(self)

    def PassHighFrequencyThresholdOn(self):
        r"""PassHighFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassHighFrequencyThresholdOn(self)

    def PassHighFrequencyThresholdOff(self):
        r"""PassHighFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassHighFrequencyThresholdOff(self)

    def GetPassBand(self):
        r"""GetPassBand(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetPassBand(self)

    def PassBandOn(self):
        r"""PassBandOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassBandOn(self)

    def PassBandOff(self):
        r"""PassBandOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassBandOff(self)

    def SetPassBand(self, *args):
        r"""
        SetPassBand(self, _arg)

        Parameters
        ----------
        _arg: bool

        SetPassBand(self, passLowThreshold, passHighThreshold)

        Parameters
        ----------
        passLowThreshold: bool const
        passHighThreshold: bool const

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetPassBand(self, *args)

    def SetStopBand(self, passLowThreshold, passHighThreshold):
        r"""
        SetStopBand(self, passLowThreshold, passHighThreshold)

        Parameters
        ----------
        passLowThreshold: bool const
        passHighThreshold: bool const

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetStopBand(self, passLowThreshold, passHighThreshold)

    def SetRadialBand(self, _arg):
        r"""
        SetRadialBand(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetRadialBand(self, _arg)

    def GetRadialBand(self):
        r"""GetRadialBand(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetRadialBand(self)

    def RadialBandOn(self):
        r"""RadialBandOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_RadialBandOn(self)

    def RadialBandOff(self):
        r"""RadialBandOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_RadialBandOff(self)

    def SetPassNegativeLowFrequencyThreshold(self, _arg):
        r"""
        SetPassNegativeLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetPassNegativeLowFrequencyThreshold(self, _arg)

    def GetPassNegativeLowFrequencyThreshold(self):
        r"""GetPassNegativeLowFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetPassNegativeLowFrequencyThreshold(self)

    def PassNegativeLowFrequencyThresholdOn(self):
        r"""PassNegativeLowFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassNegativeLowFrequencyThresholdOn(self)

    def PassNegativeLowFrequencyThresholdOff(self):
        r"""PassNegativeLowFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassNegativeLowFrequencyThresholdOff(self)

    def SetPassNegativeHighFrequencyThreshold(self, _arg):
        r"""
        SetPassNegativeHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_SetPassNegativeHighFrequencyThreshold(self, _arg)

    def GetPassNegativeHighFrequencyThreshold(self):
        r"""GetPassNegativeHighFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_GetPassNegativeHighFrequencyThreshold(self)

    def PassNegativeHighFrequencyThresholdOn(self):
        r"""PassNegativeHighFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassNegativeHighFrequencyThresholdOn(self)

    def PassNegativeHighFrequencyThresholdOff(self):
        r"""PassNegativeHighFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_PassNegativeHighFrequencyThresholdOff(self)
    __swig_destroy__ = _itkFrequencyBandImageFilterPython.delete_itkFrequencyBandImageFilterICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFrequencyBandImageFilterICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFrequencyBandImageFilterICF2

        Create a new object of the class itkFrequencyBandImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyBandImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyBandImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyBandImageFilterICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyBandImageFilterICF2 in _itkFrequencyBandImageFilterPython:
_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF2_swigregister(itkFrequencyBandImageFilterICF2)

def itkFrequencyBandImageFilterICF3_New():
    return itkFrequencyBandImageFilterICF3.New()

class itkFrequencyBandImageFilterICF3(itk.itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF3):
    r"""Proxy of C++ itkFrequencyBandImageFilterICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFrequencyBandImageFilterICF3_Pointer"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFrequencyBandImageFilterICF3_Pointer"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_Clone(self)

    def GetLowFrequencyThreshold(self):
        r"""GetLowFrequencyThreshold(self) -> double const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetLowFrequencyThreshold(self)

    def SetLowFrequencyThreshold(self, _arg):
        r"""
        SetLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetLowFrequencyThreshold(self, _arg)

    def SetLowFrequencyThresholdInRadians(self, freqLowInRadians):
        r"""
        SetLowFrequencyThresholdInRadians(self, freqLowInRadians)

        Parameters
        ----------
        freqLowInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetLowFrequencyThresholdInRadians(self, freqLowInRadians)

    def GetHighFrequencyThreshold(self):
        r"""GetHighFrequencyThreshold(self) -> double const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetHighFrequencyThreshold(self)

    def SetHighFrequencyThreshold(self, _arg):
        r"""
        SetHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetHighFrequencyThreshold(self, _arg)

    def SetHighFrequencyThresholdInRadians(self, freqHighInRadians):
        r"""
        SetHighFrequencyThresholdInRadians(self, freqHighInRadians)

        Parameters
        ----------
        freqHighInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetHighFrequencyThresholdInRadians(self, freqHighInRadians)

    def SetFrequencyThresholds(self, freqLow, freqHigh):
        r"""
        SetFrequencyThresholds(self, freqLow, freqHigh)

        Parameters
        ----------
        freqLow: double const &
        freqHigh: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetFrequencyThresholds(self, freqLow, freqHigh)

    def SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians):
        r"""
        SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians)

        Parameters
        ----------
        freqLowInRadians: double const &
        freqHighInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians)

    def SetPassLowFrequencyThreshold(self, _arg):
        r"""
        SetPassLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetPassLowFrequencyThreshold(self, _arg)

    def GetPassLowFrequencyThreshold(self):
        r"""GetPassLowFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetPassLowFrequencyThreshold(self)

    def PassLowFrequencyThresholdOn(self):
        r"""PassLowFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassLowFrequencyThresholdOn(self)

    def PassLowFrequencyThresholdOff(self):
        r"""PassLowFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassLowFrequencyThresholdOff(self)

    def SetPassHighFrequencyThreshold(self, _arg):
        r"""
        SetPassHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetPassHighFrequencyThreshold(self, _arg)

    def GetPassHighFrequencyThreshold(self):
        r"""GetPassHighFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetPassHighFrequencyThreshold(self)

    def PassHighFrequencyThresholdOn(self):
        r"""PassHighFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassHighFrequencyThresholdOn(self)

    def PassHighFrequencyThresholdOff(self):
        r"""PassHighFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassHighFrequencyThresholdOff(self)

    def GetPassBand(self):
        r"""GetPassBand(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetPassBand(self)

    def PassBandOn(self):
        r"""PassBandOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassBandOn(self)

    def PassBandOff(self):
        r"""PassBandOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassBandOff(self)

    def SetPassBand(self, *args):
        r"""
        SetPassBand(self, _arg)

        Parameters
        ----------
        _arg: bool

        SetPassBand(self, passLowThreshold, passHighThreshold)

        Parameters
        ----------
        passLowThreshold: bool const
        passHighThreshold: bool const

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetPassBand(self, *args)

    def SetStopBand(self, passLowThreshold, passHighThreshold):
        r"""
        SetStopBand(self, passLowThreshold, passHighThreshold)

        Parameters
        ----------
        passLowThreshold: bool const
        passHighThreshold: bool const

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetStopBand(self, passLowThreshold, passHighThreshold)

    def SetRadialBand(self, _arg):
        r"""
        SetRadialBand(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetRadialBand(self, _arg)

    def GetRadialBand(self):
        r"""GetRadialBand(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetRadialBand(self)

    def RadialBandOn(self):
        r"""RadialBandOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_RadialBandOn(self)

    def RadialBandOff(self):
        r"""RadialBandOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_RadialBandOff(self)

    def SetPassNegativeLowFrequencyThreshold(self, _arg):
        r"""
        SetPassNegativeLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetPassNegativeLowFrequencyThreshold(self, _arg)

    def GetPassNegativeLowFrequencyThreshold(self):
        r"""GetPassNegativeLowFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetPassNegativeLowFrequencyThreshold(self)

    def PassNegativeLowFrequencyThresholdOn(self):
        r"""PassNegativeLowFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassNegativeLowFrequencyThresholdOn(self)

    def PassNegativeLowFrequencyThresholdOff(self):
        r"""PassNegativeLowFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassNegativeLowFrequencyThresholdOff(self)

    def SetPassNegativeHighFrequencyThreshold(self, _arg):
        r"""
        SetPassNegativeHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_SetPassNegativeHighFrequencyThreshold(self, _arg)

    def GetPassNegativeHighFrequencyThreshold(self):
        r"""GetPassNegativeHighFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_GetPassNegativeHighFrequencyThreshold(self)

    def PassNegativeHighFrequencyThresholdOn(self):
        r"""PassNegativeHighFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassNegativeHighFrequencyThresholdOn(self)

    def PassNegativeHighFrequencyThresholdOff(self):
        r"""PassNegativeHighFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_PassNegativeHighFrequencyThresholdOff(self)
    __swig_destroy__ = _itkFrequencyBandImageFilterPython.delete_itkFrequencyBandImageFilterICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFrequencyBandImageFilterICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFrequencyBandImageFilterICF3

        Create a new object of the class itkFrequencyBandImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyBandImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyBandImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyBandImageFilterICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyBandImageFilterICF3 in _itkFrequencyBandImageFilterPython:
_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF3_swigregister(itkFrequencyBandImageFilterICF3)

def itkFrequencyBandImageFilterICF4_New():
    return itkFrequencyBandImageFilterICF4.New()

class itkFrequencyBandImageFilterICF4(itk.itkUnaryFrequencyDomainFilterPython.itkUnaryFrequencyDomainFilterICF4):
    r"""Proxy of C++ itkFrequencyBandImageFilterICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkFrequencyBandImageFilterICF4_Pointer"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkFrequencyBandImageFilterICF4_Pointer"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_Clone(self)

    def GetLowFrequencyThreshold(self):
        r"""GetLowFrequencyThreshold(self) -> double const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_GetLowFrequencyThreshold(self)

    def SetLowFrequencyThreshold(self, _arg):
        r"""
        SetLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_SetLowFrequencyThreshold(self, _arg)

    def SetLowFrequencyThresholdInRadians(self, freqLowInRadians):
        r"""
        SetLowFrequencyThresholdInRadians(self, freqLowInRadians)

        Parameters
        ----------
        freqLowInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_SetLowFrequencyThresholdInRadians(self, freqLowInRadians)

    def GetHighFrequencyThreshold(self):
        r"""GetHighFrequencyThreshold(self) -> double const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_GetHighFrequencyThreshold(self)

    def SetHighFrequencyThreshold(self, _arg):
        r"""
        SetHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_SetHighFrequencyThreshold(self, _arg)

    def SetHighFrequencyThresholdInRadians(self, freqHighInRadians):
        r"""
        SetHighFrequencyThresholdInRadians(self, freqHighInRadians)

        Parameters
        ----------
        freqHighInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_SetHighFrequencyThresholdInRadians(self, freqHighInRadians)

    def SetFrequencyThresholds(self, freqLow, freqHigh):
        r"""
        SetFrequencyThresholds(self, freqLow, freqHigh)

        Parameters
        ----------
        freqLow: double const &
        freqHigh: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_SetFrequencyThresholds(self, freqLow, freqHigh)

    def SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians):
        r"""
        SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians)

        Parameters
        ----------
        freqLowInRadians: double const &
        freqHighInRadians: double const &

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_SetFrequencyThresholdsInRadians(self, freqLowInRadians, freqHighInRadians)

    def SetPassLowFrequencyThreshold(self, _arg):
        r"""
        SetPassLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_SetPassLowFrequencyThreshold(self, _arg)

    def GetPassLowFrequencyThreshold(self):
        r"""GetPassLowFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_GetPassLowFrequencyThreshold(self)

    def PassLowFrequencyThresholdOn(self):
        r"""PassLowFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_PassLowFrequencyThresholdOn(self)

    def PassLowFrequencyThresholdOff(self):
        r"""PassLowFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_PassLowFrequencyThresholdOff(self)

    def SetPassHighFrequencyThreshold(self, _arg):
        r"""
        SetPassHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_SetPassHighFrequencyThreshold(self, _arg)

    def GetPassHighFrequencyThreshold(self):
        r"""GetPassHighFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_GetPassHighFrequencyThreshold(self)

    def PassHighFrequencyThresholdOn(self):
        r"""PassHighFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_PassHighFrequencyThresholdOn(self)

    def PassHighFrequencyThresholdOff(self):
        r"""PassHighFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_PassHighFrequencyThresholdOff(self)

    def GetPassBand(self):
        r"""GetPassBand(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_GetPassBand(self)

    def PassBandOn(self):
        r"""PassBandOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_PassBandOn(self)

    def PassBandOff(self):
        r"""PassBandOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_PassBandOff(self)

    def SetPassBand(self, *args):
        r"""
        SetPassBand(self, _arg)

        Parameters
        ----------
        _arg: bool

        SetPassBand(self, passLowThreshold, passHighThreshold)

        Parameters
        ----------
        passLowThreshold: bool const
        passHighThreshold: bool const

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_SetPassBand(self, *args)

    def SetStopBand(self, passLowThreshold, passHighThreshold):
        r"""
        SetStopBand(self, passLowThreshold, passHighThreshold)

        Parameters
        ----------
        passLowThreshold: bool const
        passHighThreshold: bool const

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_SetStopBand(self, passLowThreshold, passHighThreshold)

    def SetRadialBand(self, _arg):
        r"""
        SetRadialBand(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_SetRadialBand(self, _arg)

    def GetRadialBand(self):
        r"""GetRadialBand(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_GetRadialBand(self)

    def RadialBandOn(self):
        r"""RadialBandOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_RadialBandOn(self)

    def RadialBandOff(self):
        r"""RadialBandOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_RadialBandOff(self)

    def SetPassNegativeLowFrequencyThreshold(self, _arg):
        r"""
        SetPassNegativeLowFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_SetPassNegativeLowFrequencyThreshold(self, _arg)

    def GetPassNegativeLowFrequencyThreshold(self):
        r"""GetPassNegativeLowFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_GetPassNegativeLowFrequencyThreshold(self)

    def PassNegativeLowFrequencyThresholdOn(self):
        r"""PassNegativeLowFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_PassNegativeLowFrequencyThresholdOn(self)

    def PassNegativeLowFrequencyThresholdOff(self):
        r"""PassNegativeLowFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_PassNegativeLowFrequencyThresholdOff(self)

    def SetPassNegativeHighFrequencyThreshold(self, _arg):
        r"""
        SetPassNegativeHighFrequencyThreshold(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_SetPassNegativeHighFrequencyThreshold(self, _arg)

    def GetPassNegativeHighFrequencyThreshold(self):
        r"""GetPassNegativeHighFrequencyThreshold(self) -> bool const &"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_GetPassNegativeHighFrequencyThreshold(self)

    def PassNegativeHighFrequencyThresholdOn(self):
        r"""PassNegativeHighFrequencyThresholdOn(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_PassNegativeHighFrequencyThresholdOn(self)

    def PassNegativeHighFrequencyThresholdOff(self):
        r"""PassNegativeHighFrequencyThresholdOff(self)"""
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_PassNegativeHighFrequencyThresholdOff(self)
    __swig_destroy__ = _itkFrequencyBandImageFilterPython.delete_itkFrequencyBandImageFilterICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFrequencyBandImageFilterICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkFrequencyBandImageFilterICF4

        Create a new object of the class itkFrequencyBandImageFilterICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyBandImageFilterICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyBandImageFilterICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyBandImageFilterICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyBandImageFilterICF4 in _itkFrequencyBandImageFilterPython:
_itkFrequencyBandImageFilterPython.itkFrequencyBandImageFilterICF4_swigregister(itkFrequencyBandImageFilterICF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def frequency_band_image_filter(*args: itkt.ImageLike,  low_frequency_threshold: float=..., low_frequency_threshold_in_radians: float=..., high_frequency_threshold: float=..., high_frequency_threshold_in_radians: float=..., frequency_thresholds: float=..., frequency_thresholds_in_radians: float=..., pass_low_frequency_threshold: bool=..., pass_high_frequency_threshold: bool=..., pass_band: Union[bool, bool]=..., stop_band: bool=..., radial_band: bool=..., pass_negative_low_frequency_threshold: bool=..., pass_negative_high_frequency_threshold: bool=..., actual_x_dimension_is_odd: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FrequencyBandImageFilter"""
    import itk

    kwarg_typehints = { 'low_frequency_threshold':low_frequency_threshold,'low_frequency_threshold_in_radians':low_frequency_threshold_in_radians,'high_frequency_threshold':high_frequency_threshold,'high_frequency_threshold_in_radians':high_frequency_threshold_in_radians,'frequency_thresholds':frequency_thresholds,'frequency_thresholds_in_radians':frequency_thresholds_in_radians,'pass_low_frequency_threshold':pass_low_frequency_threshold,'pass_high_frequency_threshold':pass_high_frequency_threshold,'pass_band':pass_band,'stop_band':stop_band,'radial_band':radial_band,'pass_negative_low_frequency_threshold':pass_negative_low_frequency_threshold,'pass_negative_high_frequency_threshold':pass_negative_high_frequency_threshold,'actual_x_dimension_is_odd':actual_x_dimension_is_odd }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.FrequencyBandImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def frequency_band_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageFrequency.FrequencyBandImageFilter
    frequency_band_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    frequency_band_image_filter.__doc__ = filter_object.__doc__



