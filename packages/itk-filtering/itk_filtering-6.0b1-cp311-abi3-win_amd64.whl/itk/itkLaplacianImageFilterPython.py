# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLaplacianImageFilterPython
else:
    import _itkLaplacianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageToImageFilterAPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkLaplacianImageFilterID2ID2_New():
    return itkLaplacianImageFilterID2ID2.New()

class itkLaplacianImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkLaplacianImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLaplacianImageFilterID2ID2_Pointer"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLaplacianImageFilterID2ID2_Pointer"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID2ID2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID2ID2_GenerateInputRequestedRegion(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID2ID2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID2ID2_UseImageSpacingOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID2ID2_GetUseImageSpacing(self)
    SameDimensionCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterID2ID2_SameDimensionCheck
    
    InputPixelTypeIsFloatingPointCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterID2ID2_InputPixelTypeIsFloatingPointCheck
    
    OutputPixelTypeIsFloatingPointCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterID2ID2_OutputPixelTypeIsFloatingPointCheck
    
    __swig_destroy__ = _itkLaplacianImageFilterPython.delete_itkLaplacianImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLaplacianImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLaplacianImageFilterID2ID2

        Create a new object of the class itkLaplacianImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianImageFilterID2ID2 in _itkLaplacianImageFilterPython:
_itkLaplacianImageFilterPython.itkLaplacianImageFilterID2ID2_swigregister(itkLaplacianImageFilterID2ID2)

def itkLaplacianImageFilterID3ID3_New():
    return itkLaplacianImageFilterID3ID3.New()

class itkLaplacianImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkLaplacianImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLaplacianImageFilterID3ID3_Pointer"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLaplacianImageFilterID3ID3_Pointer"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID3ID3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID3ID3_GenerateInputRequestedRegion(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID3ID3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID3ID3_UseImageSpacingOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID3ID3_GetUseImageSpacing(self)
    SameDimensionCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterID3ID3_SameDimensionCheck
    
    InputPixelTypeIsFloatingPointCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterID3ID3_InputPixelTypeIsFloatingPointCheck
    
    OutputPixelTypeIsFloatingPointCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterID3ID3_OutputPixelTypeIsFloatingPointCheck
    
    __swig_destroy__ = _itkLaplacianImageFilterPython.delete_itkLaplacianImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLaplacianImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLaplacianImageFilterID3ID3

        Create a new object of the class itkLaplacianImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianImageFilterID3ID3 in _itkLaplacianImageFilterPython:
_itkLaplacianImageFilterPython.itkLaplacianImageFilterID3ID3_swigregister(itkLaplacianImageFilterID3ID3)

def itkLaplacianImageFilterID4ID4_New():
    return itkLaplacianImageFilterID4ID4.New()

class itkLaplacianImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkLaplacianImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLaplacianImageFilterID4ID4_Pointer"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLaplacianImageFilterID4ID4_Pointer"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID4ID4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID4ID4_GenerateInputRequestedRegion(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID4ID4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID4ID4_UseImageSpacingOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID4ID4_GetUseImageSpacing(self)
    SameDimensionCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterID4ID4_SameDimensionCheck
    
    InputPixelTypeIsFloatingPointCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterID4ID4_InputPixelTypeIsFloatingPointCheck
    
    OutputPixelTypeIsFloatingPointCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterID4ID4_OutputPixelTypeIsFloatingPointCheck
    
    __swig_destroy__ = _itkLaplacianImageFilterPython.delete_itkLaplacianImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLaplacianImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLaplacianImageFilterID4ID4

        Create a new object of the class itkLaplacianImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianImageFilterID4ID4 in _itkLaplacianImageFilterPython:
_itkLaplacianImageFilterPython.itkLaplacianImageFilterID4ID4_swigregister(itkLaplacianImageFilterID4ID4)

def itkLaplacianImageFilterIF2IF2_New():
    return itkLaplacianImageFilterIF2IF2.New()

class itkLaplacianImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkLaplacianImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLaplacianImageFilterIF2IF2_Pointer"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLaplacianImageFilterIF2IF2_Pointer"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF2IF2_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF2IF2_GenerateInputRequestedRegion(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF2IF2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF2IF2_UseImageSpacingOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF2IF2_GetUseImageSpacing(self)
    SameDimensionCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF2IF2_SameDimensionCheck
    
    InputPixelTypeIsFloatingPointCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF2IF2_InputPixelTypeIsFloatingPointCheck
    
    OutputPixelTypeIsFloatingPointCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF2IF2_OutputPixelTypeIsFloatingPointCheck
    
    __swig_destroy__ = _itkLaplacianImageFilterPython.delete_itkLaplacianImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLaplacianImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLaplacianImageFilterIF2IF2

        Create a new object of the class itkLaplacianImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianImageFilterIF2IF2 in _itkLaplacianImageFilterPython:
_itkLaplacianImageFilterPython.itkLaplacianImageFilterIF2IF2_swigregister(itkLaplacianImageFilterIF2IF2)

def itkLaplacianImageFilterIF3IF3_New():
    return itkLaplacianImageFilterIF3IF3.New()

class itkLaplacianImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkLaplacianImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLaplacianImageFilterIF3IF3_Pointer"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLaplacianImageFilterIF3IF3_Pointer"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF3IF3_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF3IF3_GenerateInputRequestedRegion(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF3IF3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF3IF3_UseImageSpacingOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF3IF3_GetUseImageSpacing(self)
    SameDimensionCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF3IF3_SameDimensionCheck
    
    InputPixelTypeIsFloatingPointCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF3IF3_InputPixelTypeIsFloatingPointCheck
    
    OutputPixelTypeIsFloatingPointCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF3IF3_OutputPixelTypeIsFloatingPointCheck
    
    __swig_destroy__ = _itkLaplacianImageFilterPython.delete_itkLaplacianImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLaplacianImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLaplacianImageFilterIF3IF3

        Create a new object of the class itkLaplacianImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianImageFilterIF3IF3 in _itkLaplacianImageFilterPython:
_itkLaplacianImageFilterPython.itkLaplacianImageFilterIF3IF3_swigregister(itkLaplacianImageFilterIF3IF3)

def itkLaplacianImageFilterIF4IF4_New():
    return itkLaplacianImageFilterIF4IF4.New()

class itkLaplacianImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkLaplacianImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLaplacianImageFilterIF4IF4_Pointer"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLaplacianImageFilterIF4IF4_Pointer"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF4IF4_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF4IF4_GenerateInputRequestedRegion(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF4IF4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF4IF4_UseImageSpacingOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF4IF4_GetUseImageSpacing(self)
    SameDimensionCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF4IF4_SameDimensionCheck
    
    InputPixelTypeIsFloatingPointCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF4IF4_InputPixelTypeIsFloatingPointCheck
    
    OutputPixelTypeIsFloatingPointCheck = _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF4IF4_OutputPixelTypeIsFloatingPointCheck
    
    __swig_destroy__ = _itkLaplacianImageFilterPython.delete_itkLaplacianImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLaplacianImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLaplacianImageFilterPython.itkLaplacianImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLaplacianImageFilterIF4IF4

        Create a new object of the class itkLaplacianImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianImageFilterIF4IF4 in _itkLaplacianImageFilterPython:
_itkLaplacianImageFilterPython.itkLaplacianImageFilterIF4IF4_swigregister(itkLaplacianImageFilterIF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def laplacian_image_filter(*args: itkt.ImageLike,  use_image_spacing: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for LaplacianImageFilter"""
    import itk

    kwarg_typehints = { 'use_image_spacing':use_image_spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.LaplacianImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def laplacian_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageFeature.LaplacianImageFilter
    laplacian_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    laplacian_image_filter.__doc__ = filter_object.__doc__



