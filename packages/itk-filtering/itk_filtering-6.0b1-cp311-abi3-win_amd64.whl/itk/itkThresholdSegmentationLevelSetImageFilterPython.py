# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkThresholdSegmentationLevelSetImageFilterPython
else:
    import _itkThresholdSegmentationLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkSegmentationLevelSetImageFilterPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkSparseFieldLevelSetImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterAPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkSegmentationLevelSetFunctionPython
import itk.itkLevelSetFunctionPython

def itkThresholdSegmentationLevelSetImageFilterID2ID2D_New():
    return itkThresholdSegmentationLevelSetImageFilterID2ID2D.New()

class itkThresholdSegmentationLevelSetImageFilterID2ID2D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID2ID2D):
    r"""Proxy of C++ itkThresholdSegmentationLevelSetImageFilterID2ID2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_Clone(self)

    def SetUpperThreshold(self, v):
        r"""
        SetUpperThreshold(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetUpperThreshold(self, v)

    def SetLowerThreshold(self, v):
        r"""
        SetLowerThreshold(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetLowerThreshold(self, v)

    def GetUpperThreshold(self):
        r"""GetUpperThreshold(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetUpperThreshold(self)

    def GetLowerThreshold(self):
        r"""GetLowerThreshold(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetLowerThreshold(self)

    def SetEdgeWeight(self, v):
        r"""
        SetEdgeWeight(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetEdgeWeight(self, v)

    def GetEdgeWeight(self):
        r"""GetEdgeWeight(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetEdgeWeight(self)

    def SetSmoothingIterations(self, v):
        r"""
        SetSmoothingIterations(self, v)

        Parameters
        ----------
        v: int

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingIterations(self, v)

    def GetSmoothingIterations(self):
        r"""GetSmoothingIterations(self) -> int"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingIterations(self)

    def SetSmoothingTimeStep(self, v):
        r"""
        SetSmoothingTimeStep(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingTimeStep(self, v)

    def GetSmoothingTimeStep(self):
        r"""GetSmoothingTimeStep(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingTimeStep(self)

    def SetSmoothingConductance(self, v):
        r"""
        SetSmoothingConductance(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingConductance(self, v)

    def GetSmoothingConductance(self):
        r"""GetSmoothingConductance(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingConductance(self)
    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterID2ID2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkThresholdSegmentationLevelSetImageFilterID2ID2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterID2ID2D

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterID2ID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterID2ID2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterID2ID2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdSegmentationLevelSetImageFilterID2ID2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdSegmentationLevelSetImageFilterID2ID2D in _itkThresholdSegmentationLevelSetImageFilterPython:
_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_swigregister(itkThresholdSegmentationLevelSetImageFilterID2ID2D)

def itkThresholdSegmentationLevelSetImageFilterID3ID3D_New():
    return itkThresholdSegmentationLevelSetImageFilterID3ID3D.New()

class itkThresholdSegmentationLevelSetImageFilterID3ID3D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID3ID3D):
    r"""Proxy of C++ itkThresholdSegmentationLevelSetImageFilterID3ID3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_Clone(self)

    def SetUpperThreshold(self, v):
        r"""
        SetUpperThreshold(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetUpperThreshold(self, v)

    def SetLowerThreshold(self, v):
        r"""
        SetLowerThreshold(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetLowerThreshold(self, v)

    def GetUpperThreshold(self):
        r"""GetUpperThreshold(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetUpperThreshold(self)

    def GetLowerThreshold(self):
        r"""GetLowerThreshold(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetLowerThreshold(self)

    def SetEdgeWeight(self, v):
        r"""
        SetEdgeWeight(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetEdgeWeight(self, v)

    def GetEdgeWeight(self):
        r"""GetEdgeWeight(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetEdgeWeight(self)

    def SetSmoothingIterations(self, v):
        r"""
        SetSmoothingIterations(self, v)

        Parameters
        ----------
        v: int

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingIterations(self, v)

    def GetSmoothingIterations(self):
        r"""GetSmoothingIterations(self) -> int"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingIterations(self)

    def SetSmoothingTimeStep(self, v):
        r"""
        SetSmoothingTimeStep(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingTimeStep(self, v)

    def GetSmoothingTimeStep(self):
        r"""GetSmoothingTimeStep(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingTimeStep(self)

    def SetSmoothingConductance(self, v):
        r"""
        SetSmoothingConductance(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingConductance(self, v)

    def GetSmoothingConductance(self):
        r"""GetSmoothingConductance(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingConductance(self)
    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterID3ID3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkThresholdSegmentationLevelSetImageFilterID3ID3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterID3ID3D

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterID3ID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterID3ID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdSegmentationLevelSetImageFilterID3ID3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdSegmentationLevelSetImageFilterID3ID3D in _itkThresholdSegmentationLevelSetImageFilterPython:
_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_swigregister(itkThresholdSegmentationLevelSetImageFilterID3ID3D)

def itkThresholdSegmentationLevelSetImageFilterID4ID4D_New():
    return itkThresholdSegmentationLevelSetImageFilterID4ID4D.New()

class itkThresholdSegmentationLevelSetImageFilterID4ID4D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID4ID4D):
    r"""Proxy of C++ itkThresholdSegmentationLevelSetImageFilterID4ID4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkThresholdSegmentationLevelSetImageFilterID4ID4D_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkThresholdSegmentationLevelSetImageFilterID4ID4D_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_Clone(self)

    def SetUpperThreshold(self, v):
        r"""
        SetUpperThreshold(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_SetUpperThreshold(self, v)

    def SetLowerThreshold(self, v):
        r"""
        SetLowerThreshold(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_SetLowerThreshold(self, v)

    def GetUpperThreshold(self):
        r"""GetUpperThreshold(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_GetUpperThreshold(self)

    def GetLowerThreshold(self):
        r"""GetLowerThreshold(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_GetLowerThreshold(self)

    def SetEdgeWeight(self, v):
        r"""
        SetEdgeWeight(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_SetEdgeWeight(self, v)

    def GetEdgeWeight(self):
        r"""GetEdgeWeight(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_GetEdgeWeight(self)

    def SetSmoothingIterations(self, v):
        r"""
        SetSmoothingIterations(self, v)

        Parameters
        ----------
        v: int

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_SetSmoothingIterations(self, v)

    def GetSmoothingIterations(self):
        r"""GetSmoothingIterations(self) -> int"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_GetSmoothingIterations(self)

    def SetSmoothingTimeStep(self, v):
        r"""
        SetSmoothingTimeStep(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_SetSmoothingTimeStep(self, v)

    def GetSmoothingTimeStep(self):
        r"""GetSmoothingTimeStep(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_GetSmoothingTimeStep(self)

    def SetSmoothingConductance(self, v):
        r"""
        SetSmoothingConductance(self, v)

        Parameters
        ----------
        v: double

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_SetSmoothingConductance(self, v)

    def GetSmoothingConductance(self):
        r"""GetSmoothingConductance(self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_GetSmoothingConductance(self)
    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterID4ID4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkThresholdSegmentationLevelSetImageFilterID4ID4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterID4ID4D

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterID4ID4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterID4ID4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterID4ID4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdSegmentationLevelSetImageFilterID4ID4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdSegmentationLevelSetImageFilterID4ID4D in _itkThresholdSegmentationLevelSetImageFilterPython:
_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID4ID4D_swigregister(itkThresholdSegmentationLevelSetImageFilterID4ID4D)

def itkThresholdSegmentationLevelSetImageFilterIF2IF2F_New():
    return itkThresholdSegmentationLevelSetImageFilterIF2IF2F.New()

class itkThresholdSegmentationLevelSetImageFilterIF2IF2F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF2IF2F):
    r"""Proxy of C++ itkThresholdSegmentationLevelSetImageFilterIF2IF2F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_Clone(self)

    def SetUpperThreshold(self, v):
        r"""
        SetUpperThreshold(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetUpperThreshold(self, v)

    def SetLowerThreshold(self, v):
        r"""
        SetLowerThreshold(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetLowerThreshold(self, v)

    def GetUpperThreshold(self):
        r"""GetUpperThreshold(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetUpperThreshold(self)

    def GetLowerThreshold(self):
        r"""GetLowerThreshold(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetLowerThreshold(self)

    def SetEdgeWeight(self, v):
        r"""
        SetEdgeWeight(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetEdgeWeight(self, v)

    def GetEdgeWeight(self):
        r"""GetEdgeWeight(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetEdgeWeight(self)

    def SetSmoothingIterations(self, v):
        r"""
        SetSmoothingIterations(self, v)

        Parameters
        ----------
        v: int

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingIterations(self, v)

    def GetSmoothingIterations(self):
        r"""GetSmoothingIterations(self) -> int"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingIterations(self)

    def SetSmoothingTimeStep(self, v):
        r"""
        SetSmoothingTimeStep(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingTimeStep(self, v)

    def GetSmoothingTimeStep(self):
        r"""GetSmoothingTimeStep(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingTimeStep(self)

    def SetSmoothingConductance(self, v):
        r"""
        SetSmoothingConductance(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingConductance(self, v)

    def GetSmoothingConductance(self):
        r"""GetSmoothingConductance(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingConductance(self)
    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterIF2IF2F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkThresholdSegmentationLevelSetImageFilterIF2IF2F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterIF2IF2F

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterIF2IF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterIF2IF2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterIF2IF2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdSegmentationLevelSetImageFilterIF2IF2F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdSegmentationLevelSetImageFilterIF2IF2F in _itkThresholdSegmentationLevelSetImageFilterPython:
_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_swigregister(itkThresholdSegmentationLevelSetImageFilterIF2IF2F)

def itkThresholdSegmentationLevelSetImageFilterIF3IF3F_New():
    return itkThresholdSegmentationLevelSetImageFilterIF3IF3F.New()

class itkThresholdSegmentationLevelSetImageFilterIF3IF3F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF3IF3F):
    r"""Proxy of C++ itkThresholdSegmentationLevelSetImageFilterIF3IF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_Clone(self)

    def SetUpperThreshold(self, v):
        r"""
        SetUpperThreshold(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetUpperThreshold(self, v)

    def SetLowerThreshold(self, v):
        r"""
        SetLowerThreshold(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetLowerThreshold(self, v)

    def GetUpperThreshold(self):
        r"""GetUpperThreshold(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetUpperThreshold(self)

    def GetLowerThreshold(self):
        r"""GetLowerThreshold(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetLowerThreshold(self)

    def SetEdgeWeight(self, v):
        r"""
        SetEdgeWeight(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetEdgeWeight(self, v)

    def GetEdgeWeight(self):
        r"""GetEdgeWeight(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetEdgeWeight(self)

    def SetSmoothingIterations(self, v):
        r"""
        SetSmoothingIterations(self, v)

        Parameters
        ----------
        v: int

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingIterations(self, v)

    def GetSmoothingIterations(self):
        r"""GetSmoothingIterations(self) -> int"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingIterations(self)

    def SetSmoothingTimeStep(self, v):
        r"""
        SetSmoothingTimeStep(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingTimeStep(self, v)

    def GetSmoothingTimeStep(self):
        r"""GetSmoothingTimeStep(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingTimeStep(self)

    def SetSmoothingConductance(self, v):
        r"""
        SetSmoothingConductance(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingConductance(self, v)

    def GetSmoothingConductance(self):
        r"""GetSmoothingConductance(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingConductance(self)
    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterIF3IF3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkThresholdSegmentationLevelSetImageFilterIF3IF3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterIF3IF3F

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterIF3IF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterIF3IF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdSegmentationLevelSetImageFilterIF3IF3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdSegmentationLevelSetImageFilterIF3IF3F in _itkThresholdSegmentationLevelSetImageFilterPython:
_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_swigregister(itkThresholdSegmentationLevelSetImageFilterIF3IF3F)

def itkThresholdSegmentationLevelSetImageFilterIF4IF4F_New():
    return itkThresholdSegmentationLevelSetImageFilterIF4IF4F.New()

class itkThresholdSegmentationLevelSetImageFilterIF4IF4F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF4IF4F):
    r"""Proxy of C++ itkThresholdSegmentationLevelSetImageFilterIF4IF4F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkThresholdSegmentationLevelSetImageFilterIF4IF4F_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkThresholdSegmentationLevelSetImageFilterIF4IF4F_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_Clone(self)

    def SetUpperThreshold(self, v):
        r"""
        SetUpperThreshold(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_SetUpperThreshold(self, v)

    def SetLowerThreshold(self, v):
        r"""
        SetLowerThreshold(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_SetLowerThreshold(self, v)

    def GetUpperThreshold(self):
        r"""GetUpperThreshold(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_GetUpperThreshold(self)

    def GetLowerThreshold(self):
        r"""GetLowerThreshold(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_GetLowerThreshold(self)

    def SetEdgeWeight(self, v):
        r"""
        SetEdgeWeight(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_SetEdgeWeight(self, v)

    def GetEdgeWeight(self):
        r"""GetEdgeWeight(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_GetEdgeWeight(self)

    def SetSmoothingIterations(self, v):
        r"""
        SetSmoothingIterations(self, v)

        Parameters
        ----------
        v: int

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_SetSmoothingIterations(self, v)

    def GetSmoothingIterations(self):
        r"""GetSmoothingIterations(self) -> int"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_GetSmoothingIterations(self)

    def SetSmoothingTimeStep(self, v):
        r"""
        SetSmoothingTimeStep(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_SetSmoothingTimeStep(self, v)

    def GetSmoothingTimeStep(self):
        r"""GetSmoothingTimeStep(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_GetSmoothingTimeStep(self)

    def SetSmoothingConductance(self, v):
        r"""
        SetSmoothingConductance(self, v)

        Parameters
        ----------
        v: float

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_SetSmoothingConductance(self, v)

    def GetSmoothingConductance(self):
        r"""GetSmoothingConductance(self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_GetSmoothingConductance(self)
    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterIF4IF4F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkThresholdSegmentationLevelSetImageFilterIF4IF4F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_cast(obj)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterIF4IF4F

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterIF4IF4F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterIF4IF4F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterIF4IF4F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdSegmentationLevelSetImageFilterIF4IF4F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdSegmentationLevelSetImageFilterIF4IF4F in _itkThresholdSegmentationLevelSetImageFilterPython:
_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF4IF4F_swigregister(itkThresholdSegmentationLevelSetImageFilterIF4IF4F)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def threshold_segmentation_level_set_image_filter(*args: itkt.ImageLike,  upper_threshold: float=..., lower_threshold: float=..., edge_weight: float=..., smoothing_iterations: int=..., smoothing_time_step: float=..., smoothing_conductance: float=..., maximum_iterations: int=..., feature_image: itkt.Image=..., initial_image: itkt.Image=..., speed_image: itkt.Image=..., advection_image: itkt.Image=..., use_negative_features: bool=..., reverse_expansion_direction: bool=..., auto_generate_speed_advection: bool=..., feature_scaling: float=..., propagation_scaling: float=..., advection_scaling: float=..., curvature_scaling: float=..., use_minimal_curvature: bool=..., segmentation_function=..., maximum_curvature_time_step: float=..., maximum_propagation_time_step: float=..., number_of_layers: int=..., iso_surface_value: float=..., interpolate_surface_location: bool=..., difference_function=..., number_of_iterations: int=..., use_image_spacing: bool=..., maximum_rms_error: float=..., rms_change: float=..., manual_reinitialization: bool=..., is_initialized: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ThresholdSegmentationLevelSetImageFilter"""
    import itk

    kwarg_typehints = { 'upper_threshold':upper_threshold,'lower_threshold':lower_threshold,'edge_weight':edge_weight,'smoothing_iterations':smoothing_iterations,'smoothing_time_step':smoothing_time_step,'smoothing_conductance':smoothing_conductance,'maximum_iterations':maximum_iterations,'feature_image':feature_image,'initial_image':initial_image,'speed_image':speed_image,'advection_image':advection_image,'use_negative_features':use_negative_features,'reverse_expansion_direction':reverse_expansion_direction,'auto_generate_speed_advection':auto_generate_speed_advection,'feature_scaling':feature_scaling,'propagation_scaling':propagation_scaling,'advection_scaling':advection_scaling,'curvature_scaling':curvature_scaling,'use_minimal_curvature':use_minimal_curvature,'segmentation_function':segmentation_function,'maximum_curvature_time_step':maximum_curvature_time_step,'maximum_propagation_time_step':maximum_propagation_time_step,'number_of_layers':number_of_layers,'iso_surface_value':iso_surface_value,'interpolate_surface_location':interpolate_surface_location,'difference_function':difference_function,'number_of_iterations':number_of_iterations,'use_image_spacing':use_image_spacing,'maximum_rms_error':maximum_rms_error,'rms_change':rms_change,'manual_reinitialization':manual_reinitialization,'is_initialized':is_initialized }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ThresholdSegmentationLevelSetImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def threshold_segmentation_level_set_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLevelSets.ThresholdSegmentationLevelSetImageFilter
    threshold_segmentation_level_set_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    threshold_segmentation_level_set_image_filter.__doc__ = filter_object.__doc__



