# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDeconvolutionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkInverseDeconvolutionImageFilterPython
else:
    import _itkInverseDeconvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkFFTConvolutionImageFilterPython
import itk.itkConvolutionImageFilterBasePython
import itk.itkImageBoundaryConditionPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkInverseDeconvolutionImageFilterID2ID2_New():
    return itkInverseDeconvolutionImageFilterID2ID2.New()

class itkInverseDeconvolutionImageFilterID2ID2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID2ID2):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterID2ID2_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterID2ID2_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterID2ID2

        Create a new object of the class itkInverseDeconvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterID2ID2 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2_swigregister(itkInverseDeconvolutionImageFilterID2ID2)

def itkInverseDeconvolutionImageFilterID3ID3_New():
    return itkInverseDeconvolutionImageFilterID3ID3.New()

class itkInverseDeconvolutionImageFilterID3ID3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID3ID3):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterID3ID3_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterID3ID3_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterID3ID3

        Create a new object of the class itkInverseDeconvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterID3ID3 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3_swigregister(itkInverseDeconvolutionImageFilterID3ID3)

def itkInverseDeconvolutionImageFilterID4ID4_New():
    return itkInverseDeconvolutionImageFilterID4ID4.New()

class itkInverseDeconvolutionImageFilterID4ID4(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID4ID4):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterID4ID4_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterID4ID4_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID4ID4_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID4ID4_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID4ID4_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterID4ID4

        Create a new object of the class itkInverseDeconvolutionImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterID4ID4 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID4ID4_swigregister(itkInverseDeconvolutionImageFilterID4ID4)

def itkInverseDeconvolutionImageFilterIF2IF2_New():
    return itkInverseDeconvolutionImageFilterIF2IF2.New()

class itkInverseDeconvolutionImageFilterIF2IF2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF2IF2):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterIF2IF2_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterIF2IF2_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIF2IF2

        Create a new object of the class itkInverseDeconvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIF2IF2 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2_swigregister(itkInverseDeconvolutionImageFilterIF2IF2)

def itkInverseDeconvolutionImageFilterIF3IF3_New():
    return itkInverseDeconvolutionImageFilterIF3IF3.New()

class itkInverseDeconvolutionImageFilterIF3IF3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF3IF3):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterIF3IF3_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterIF3IF3_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIF3IF3

        Create a new object of the class itkInverseDeconvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIF3IF3 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3_swigregister(itkInverseDeconvolutionImageFilterIF3IF3)

def itkInverseDeconvolutionImageFilterIF4IF4_New():
    return itkInverseDeconvolutionImageFilterIF4IF4.New()

class itkInverseDeconvolutionImageFilterIF4IF4(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF4IF4):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterIF4IF4_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterIF4IF4_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF4IF4_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF4IF4_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF4IF4_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIF4IF4

        Create a new object of the class itkInverseDeconvolutionImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIF4IF4 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF4IF4_swigregister(itkInverseDeconvolutionImageFilterIF4IF4)

def itkInverseDeconvolutionImageFilterISS2ISS2_New():
    return itkInverseDeconvolutionImageFilterISS2ISS2.New()

class itkInverseDeconvolutionImageFilterISS2ISS2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS2ISS2):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterISS2ISS2_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterISS2ISS2_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterISS2ISS2

        Create a new object of the class itkInverseDeconvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterISS2ISS2 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2_swigregister(itkInverseDeconvolutionImageFilterISS2ISS2)

def itkInverseDeconvolutionImageFilterISS3ISS3_New():
    return itkInverseDeconvolutionImageFilterISS3ISS3.New()

class itkInverseDeconvolutionImageFilterISS3ISS3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS3ISS3):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterISS3ISS3_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterISS3ISS3_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterISS3ISS3

        Create a new object of the class itkInverseDeconvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterISS3ISS3 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3_swigregister(itkInverseDeconvolutionImageFilterISS3ISS3)

def itkInverseDeconvolutionImageFilterISS4ISS4_New():
    return itkInverseDeconvolutionImageFilterISS4ISS4.New()

class itkInverseDeconvolutionImageFilterISS4ISS4(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS4ISS4):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterISS4ISS4_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterISS4ISS4_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS4ISS4_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS4ISS4_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS4ISS4_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterISS4ISS4

        Create a new object of the class itkInverseDeconvolutionImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterISS4ISS4 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS4ISS4_swigregister(itkInverseDeconvolutionImageFilterISS4ISS4)

def itkInverseDeconvolutionImageFilterIUC2IUC2_New():
    return itkInverseDeconvolutionImageFilterIUC2IUC2.New()

class itkInverseDeconvolutionImageFilterIUC2IUC2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC2IUC2):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIUC2IUC2

        Create a new object of the class itkInverseDeconvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIUC2IUC2 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2_swigregister(itkInverseDeconvolutionImageFilterIUC2IUC2)

def itkInverseDeconvolutionImageFilterIUC3IUC3_New():
    return itkInverseDeconvolutionImageFilterIUC3IUC3.New()

class itkInverseDeconvolutionImageFilterIUC3IUC3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC3IUC3):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIUC3IUC3

        Create a new object of the class itkInverseDeconvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIUC3IUC3 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3_swigregister(itkInverseDeconvolutionImageFilterIUC3IUC3)

def itkInverseDeconvolutionImageFilterIUC4IUC4_New():
    return itkInverseDeconvolutionImageFilterIUC4IUC4.New()

class itkInverseDeconvolutionImageFilterIUC4IUC4(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC4IUC4):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterIUC4IUC4_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterIUC4IUC4_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC4IUC4_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC4IUC4_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC4IUC4_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIUC4IUC4

        Create a new object of the class itkInverseDeconvolutionImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIUC4IUC4 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC4IUC4_swigregister(itkInverseDeconvolutionImageFilterIUC4IUC4)

def itkInverseDeconvolutionImageFilterIUS2IUS2_New():
    return itkInverseDeconvolutionImageFilterIUS2IUS2.New()

class itkInverseDeconvolutionImageFilterIUS2IUS2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS2IUS2):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterIUS2IUS2_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterIUS2IUS2_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIUS2IUS2

        Create a new object of the class itkInverseDeconvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIUS2IUS2 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2_swigregister(itkInverseDeconvolutionImageFilterIUS2IUS2)

def itkInverseDeconvolutionImageFilterIUS3IUS3_New():
    return itkInverseDeconvolutionImageFilterIUS3IUS3.New()

class itkInverseDeconvolutionImageFilterIUS3IUS3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS3IUS3):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterIUS3IUS3_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterIUS3IUS3_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIUS3IUS3

        Create a new object of the class itkInverseDeconvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIUS3IUS3 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3_swigregister(itkInverseDeconvolutionImageFilterIUS3IUS3)

def itkInverseDeconvolutionImageFilterIUS4IUS4_New():
    return itkInverseDeconvolutionImageFilterIUS4IUS4.New()

class itkInverseDeconvolutionImageFilterIUS4IUS4(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS4IUS4):
    r"""Proxy of C++ itkInverseDeconvolutionImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverseDeconvolutionImageFilterIUS4IUS4_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverseDeconvolutionImageFilterIUS4IUS4_Pointer"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS4IUS4_Clone(self)

    def SetKernelZeroMagnitudeThreshold(self, _arg):
        r"""
        SetKernelZeroMagnitudeThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS4IUS4_SetKernelZeroMagnitudeThreshold(self, _arg)

    def GetKernelZeroMagnitudeThreshold(self):
        r"""GetKernelZeroMagnitudeThreshold(self) -> double"""
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS4IUS4_GetKernelZeroMagnitudeThreshold(self)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverseDeconvolutionImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIUS4IUS4

        Create a new object of the class itkInverseDeconvolutionImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIUS4IUS4 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS4IUS4_swigregister(itkInverseDeconvolutionImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def inverse_deconvolution_image_filter(*args: itkt.ImageLike,  kernel_zero_magnitude_threshold: float=..., size_greatest_prime_factor: int=..., boundary_condition: itkt.ImageBoundaryCondition=..., kernel_image: itkt.Image=..., normalize: bool=..., output_region_mode=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for InverseDeconvolutionImageFilter"""
    import itk

    kwarg_typehints = { 'kernel_zero_magnitude_threshold':kernel_zero_magnitude_threshold,'size_greatest_prime_factor':size_greatest_prime_factor,'boundary_condition':boundary_condition,'kernel_image':kernel_image,'normalize':normalize,'output_region_mode':output_region_mode }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.InverseDeconvolutionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def inverse_deconvolution_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKDeconvolution.InverseDeconvolutionImageFilter
    inverse_deconvolution_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    inverse_deconvolution_image_filter.__doc__ = filter_object.__doc__



