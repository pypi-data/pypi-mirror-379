# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDeconvolutionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkWienerDeconvolutionImageFilterPython
else:
    import _itkWienerDeconvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkInverseDeconvolutionImageFilterPython
import itk.itkFFTConvolutionImageFilterPython
import itk.itkConvolutionImageFilterBasePython
import itk.itkImageBoundaryConditionPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkWienerDeconvolutionImageFilterID2ID2_New():
    return itkWienerDeconvolutionImageFilterID2ID2.New()

class itkWienerDeconvolutionImageFilterID2ID2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterID2ID2_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterID2ID2_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterID2ID2

        Create a new object of the class itkWienerDeconvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterID2ID2 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2_swigregister(itkWienerDeconvolutionImageFilterID2ID2)

def itkWienerDeconvolutionImageFilterID3ID3_New():
    return itkWienerDeconvolutionImageFilterID3ID3.New()

class itkWienerDeconvolutionImageFilterID3ID3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterID3ID3_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterID3ID3_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterID3ID3

        Create a new object of the class itkWienerDeconvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterID3ID3 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3_swigregister(itkWienerDeconvolutionImageFilterID3ID3)

def itkWienerDeconvolutionImageFilterID4ID4_New():
    return itkWienerDeconvolutionImageFilterID4ID4.New()

class itkWienerDeconvolutionImageFilterID4ID4(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID4ID4):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterID4ID4_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterID4ID4_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID4ID4_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID4ID4_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID4ID4_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterID4ID4

        Create a new object of the class itkWienerDeconvolutionImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterID4ID4 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID4ID4_swigregister(itkWienerDeconvolutionImageFilterID4ID4)

def itkWienerDeconvolutionImageFilterIF2IF2_New():
    return itkWienerDeconvolutionImageFilterIF2IF2.New()

class itkWienerDeconvolutionImageFilterIF2IF2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterIF2IF2_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterIF2IF2_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIF2IF2

        Create a new object of the class itkWienerDeconvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIF2IF2 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2_swigregister(itkWienerDeconvolutionImageFilterIF2IF2)

def itkWienerDeconvolutionImageFilterIF3IF3_New():
    return itkWienerDeconvolutionImageFilterIF3IF3.New()

class itkWienerDeconvolutionImageFilterIF3IF3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterIF3IF3_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterIF3IF3_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIF3IF3

        Create a new object of the class itkWienerDeconvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIF3IF3 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3_swigregister(itkWienerDeconvolutionImageFilterIF3IF3)

def itkWienerDeconvolutionImageFilterIF4IF4_New():
    return itkWienerDeconvolutionImageFilterIF4IF4.New()

class itkWienerDeconvolutionImageFilterIF4IF4(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF4IF4):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterIF4IF4_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterIF4IF4_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF4IF4_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF4IF4_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF4IF4_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIF4IF4

        Create a new object of the class itkWienerDeconvolutionImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIF4IF4 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF4IF4_swigregister(itkWienerDeconvolutionImageFilterIF4IF4)

def itkWienerDeconvolutionImageFilterISS2ISS2_New():
    return itkWienerDeconvolutionImageFilterISS2ISS2.New()

class itkWienerDeconvolutionImageFilterISS2ISS2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterISS2ISS2_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterISS2ISS2_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterISS2ISS2

        Create a new object of the class itkWienerDeconvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterISS2ISS2 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2_swigregister(itkWienerDeconvolutionImageFilterISS2ISS2)

def itkWienerDeconvolutionImageFilterISS3ISS3_New():
    return itkWienerDeconvolutionImageFilterISS3ISS3.New()

class itkWienerDeconvolutionImageFilterISS3ISS3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterISS3ISS3_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterISS3ISS3_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterISS3ISS3

        Create a new object of the class itkWienerDeconvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterISS3ISS3 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3_swigregister(itkWienerDeconvolutionImageFilterISS3ISS3)

def itkWienerDeconvolutionImageFilterISS4ISS4_New():
    return itkWienerDeconvolutionImageFilterISS4ISS4.New()

class itkWienerDeconvolutionImageFilterISS4ISS4(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS4ISS4):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterISS4ISS4_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterISS4ISS4_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS4ISS4_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS4ISS4_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS4ISS4_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterISS4ISS4

        Create a new object of the class itkWienerDeconvolutionImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterISS4ISS4 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS4ISS4_swigregister(itkWienerDeconvolutionImageFilterISS4ISS4)

def itkWienerDeconvolutionImageFilterIUC2IUC2_New():
    return itkWienerDeconvolutionImageFilterIUC2IUC2.New()

class itkWienerDeconvolutionImageFilterIUC2IUC2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIUC2IUC2

        Create a new object of the class itkWienerDeconvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIUC2IUC2 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2_swigregister(itkWienerDeconvolutionImageFilterIUC2IUC2)

def itkWienerDeconvolutionImageFilterIUC3IUC3_New():
    return itkWienerDeconvolutionImageFilterIUC3IUC3.New()

class itkWienerDeconvolutionImageFilterIUC3IUC3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIUC3IUC3

        Create a new object of the class itkWienerDeconvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIUC3IUC3 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3_swigregister(itkWienerDeconvolutionImageFilterIUC3IUC3)

def itkWienerDeconvolutionImageFilterIUC4IUC4_New():
    return itkWienerDeconvolutionImageFilterIUC4IUC4.New()

class itkWienerDeconvolutionImageFilterIUC4IUC4(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC4IUC4):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterIUC4IUC4_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterIUC4IUC4_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC4IUC4_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC4IUC4_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC4IUC4_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIUC4IUC4

        Create a new object of the class itkWienerDeconvolutionImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIUC4IUC4 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC4IUC4_swigregister(itkWienerDeconvolutionImageFilterIUC4IUC4)

def itkWienerDeconvolutionImageFilterIUS2IUS2_New():
    return itkWienerDeconvolutionImageFilterIUS2IUS2.New()

class itkWienerDeconvolutionImageFilterIUS2IUS2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterIUS2IUS2_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterIUS2IUS2_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIUS2IUS2

        Create a new object of the class itkWienerDeconvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIUS2IUS2 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2_swigregister(itkWienerDeconvolutionImageFilterIUS2IUS2)

def itkWienerDeconvolutionImageFilterIUS3IUS3_New():
    return itkWienerDeconvolutionImageFilterIUS3IUS3.New()

class itkWienerDeconvolutionImageFilterIUS3IUS3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterIUS3IUS3_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterIUS3IUS3_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIUS3IUS3

        Create a new object of the class itkWienerDeconvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIUS3IUS3 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3_swigregister(itkWienerDeconvolutionImageFilterIUS3IUS3)

def itkWienerDeconvolutionImageFilterIUS4IUS4_New():
    return itkWienerDeconvolutionImageFilterIUS4IUS4.New()

class itkWienerDeconvolutionImageFilterIUS4IUS4(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS4IUS4):
    r"""Proxy of C++ itkWienerDeconvolutionImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWienerDeconvolutionImageFilterIUS4IUS4_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWienerDeconvolutionImageFilterIUS4IUS4_Pointer"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS4IUS4_Clone(self)

    def SetNoiseVariance(self, _arg):
        r"""
        SetNoiseVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS4IUS4_SetNoiseVariance(self, _arg)

    def GetNoiseVariance(self):
        r"""GetNoiseVariance(self) -> double"""
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS4IUS4_GetNoiseVariance(self)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWienerDeconvolutionImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIUS4IUS4

        Create a new object of the class itkWienerDeconvolutionImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIUS4IUS4 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS4IUS4_swigregister(itkWienerDeconvolutionImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def wiener_deconvolution_image_filter(*args: itkt.ImageLike,  noise_variance: float=..., kernel_zero_magnitude_threshold: float=..., size_greatest_prime_factor: int=..., boundary_condition: itkt.ImageBoundaryCondition=..., kernel_image: itkt.Image=..., normalize: bool=..., output_region_mode=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for WienerDeconvolutionImageFilter"""
    import itk

    kwarg_typehints = { 'noise_variance':noise_variance,'kernel_zero_magnitude_threshold':kernel_zero_magnitude_threshold,'size_greatest_prime_factor':size_greatest_prime_factor,'boundary_condition':boundary_condition,'kernel_image':kernel_image,'normalize':normalize,'output_region_mode':output_region_mode }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.WienerDeconvolutionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def wiener_deconvolution_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKDeconvolution.WienerDeconvolutionImageFilter
    wiener_deconvolution_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    wiener_deconvolution_image_filter.__doc__ = filter_object.__doc__



