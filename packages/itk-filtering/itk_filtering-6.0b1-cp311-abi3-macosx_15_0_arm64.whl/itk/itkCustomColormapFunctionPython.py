# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKColormapPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCustomColormapFunctionPython
else:
    import _itkCustomColormapFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkColormapFunctionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkRGBPixelPython

def itkCustomColormapFunctionDRGBAPD_New():
    return itkCustomColormapFunctionDRGBAPD.New()

class itkCustomColormapFunctionDRGBAPD(itk.itkColormapFunctionPython.itkColormapFunctionDRGBAPD):
    r"""Proxy of C++ itkCustomColormapFunctionDRGBAPD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCustomColormapFunctionDRGBAPD_Pointer"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBAPD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCustomColormapFunctionDRGBAPD_Pointer"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBAPD_Clone(self)

    def SetRedChannel(self, red):
        r"""
        SetRedChannel(self, red)

        Parameters
        ----------
        red: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBAPD_SetRedChannel(self, red)

    def GetRedChannel(self):
        r"""GetRedChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBAPD_GetRedChannel(self)

    def SetGreenChannel(self, green):
        r"""
        SetGreenChannel(self, green)

        Parameters
        ----------
        green: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBAPD_SetGreenChannel(self, green)

    def GetGreenChannel(self):
        r"""GetGreenChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBAPD_GetGreenChannel(self)

    def SetBlueChannel(self, blue):
        r"""
        SetBlueChannel(self, blue)

        Parameters
        ----------
        blue: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBAPD_SetBlueChannel(self, blue)

    def GetBlueChannel(self):
        r"""GetBlueChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBAPD_GetBlueChannel(self)
    __swig_destroy__ = _itkCustomColormapFunctionPython.delete_itkCustomColormapFunctionDRGBAPD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCustomColormapFunctionDRGBAPD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBAPD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCustomColormapFunctionDRGBAPD

        Create a new object of the class itkCustomColormapFunctionDRGBAPD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCustomColormapFunctionDRGBAPD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCustomColormapFunctionDRGBAPD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCustomColormapFunctionDRGBAPD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCustomColormapFunctionDRGBAPD in _itkCustomColormapFunctionPython:
_itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBAPD_swigregister(itkCustomColormapFunctionDRGBAPD)

def itkCustomColormapFunctionDRGBPD_New():
    return itkCustomColormapFunctionDRGBPD.New()

class itkCustomColormapFunctionDRGBPD(itk.itkColormapFunctionPython.itkColormapFunctionDRGBPD):
    r"""Proxy of C++ itkCustomColormapFunctionDRGBPD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCustomColormapFunctionDRGBPD_Pointer"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBPD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCustomColormapFunctionDRGBPD_Pointer"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBPD_Clone(self)

    def SetRedChannel(self, red):
        r"""
        SetRedChannel(self, red)

        Parameters
        ----------
        red: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBPD_SetRedChannel(self, red)

    def GetRedChannel(self):
        r"""GetRedChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBPD_GetRedChannel(self)

    def SetGreenChannel(self, green):
        r"""
        SetGreenChannel(self, green)

        Parameters
        ----------
        green: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBPD_SetGreenChannel(self, green)

    def GetGreenChannel(self):
        r"""GetGreenChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBPD_GetGreenChannel(self)

    def SetBlueChannel(self, blue):
        r"""
        SetBlueChannel(self, blue)

        Parameters
        ----------
        blue: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBPD_SetBlueChannel(self, blue)

    def GetBlueChannel(self):
        r"""GetBlueChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBPD_GetBlueChannel(self)
    __swig_destroy__ = _itkCustomColormapFunctionPython.delete_itkCustomColormapFunctionDRGBPD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCustomColormapFunctionDRGBPD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBPD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCustomColormapFunctionDRGBPD

        Create a new object of the class itkCustomColormapFunctionDRGBPD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCustomColormapFunctionDRGBPD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCustomColormapFunctionDRGBPD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCustomColormapFunctionDRGBPD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCustomColormapFunctionDRGBPD in _itkCustomColormapFunctionPython:
_itkCustomColormapFunctionPython.itkCustomColormapFunctionDRGBPD_swigregister(itkCustomColormapFunctionDRGBPD)

def itkCustomColormapFunctionFRGBAPF_New():
    return itkCustomColormapFunctionFRGBAPF.New()

class itkCustomColormapFunctionFRGBAPF(itk.itkColormapFunctionPython.itkColormapFunctionFRGBAPF):
    r"""Proxy of C++ itkCustomColormapFunctionFRGBAPF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCustomColormapFunctionFRGBAPF_Pointer"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBAPF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCustomColormapFunctionFRGBAPF_Pointer"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBAPF_Clone(self)

    def SetRedChannel(self, red):
        r"""
        SetRedChannel(self, red)

        Parameters
        ----------
        red: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBAPF_SetRedChannel(self, red)

    def GetRedChannel(self):
        r"""GetRedChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBAPF_GetRedChannel(self)

    def SetGreenChannel(self, green):
        r"""
        SetGreenChannel(self, green)

        Parameters
        ----------
        green: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBAPF_SetGreenChannel(self, green)

    def GetGreenChannel(self):
        r"""GetGreenChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBAPF_GetGreenChannel(self)

    def SetBlueChannel(self, blue):
        r"""
        SetBlueChannel(self, blue)

        Parameters
        ----------
        blue: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBAPF_SetBlueChannel(self, blue)

    def GetBlueChannel(self):
        r"""GetBlueChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBAPF_GetBlueChannel(self)
    __swig_destroy__ = _itkCustomColormapFunctionPython.delete_itkCustomColormapFunctionFRGBAPF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCustomColormapFunctionFRGBAPF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBAPF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCustomColormapFunctionFRGBAPF

        Create a new object of the class itkCustomColormapFunctionFRGBAPF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCustomColormapFunctionFRGBAPF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCustomColormapFunctionFRGBAPF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCustomColormapFunctionFRGBAPF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCustomColormapFunctionFRGBAPF in _itkCustomColormapFunctionPython:
_itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBAPF_swigregister(itkCustomColormapFunctionFRGBAPF)

def itkCustomColormapFunctionFRGBPF_New():
    return itkCustomColormapFunctionFRGBPF.New()

class itkCustomColormapFunctionFRGBPF(itk.itkColormapFunctionPython.itkColormapFunctionFRGBPF):
    r"""Proxy of C++ itkCustomColormapFunctionFRGBPF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCustomColormapFunctionFRGBPF_Pointer"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBPF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCustomColormapFunctionFRGBPF_Pointer"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBPF_Clone(self)

    def SetRedChannel(self, red):
        r"""
        SetRedChannel(self, red)

        Parameters
        ----------
        red: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBPF_SetRedChannel(self, red)

    def GetRedChannel(self):
        r"""GetRedChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBPF_GetRedChannel(self)

    def SetGreenChannel(self, green):
        r"""
        SetGreenChannel(self, green)

        Parameters
        ----------
        green: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBPF_SetGreenChannel(self, green)

    def GetGreenChannel(self):
        r"""GetGreenChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBPF_GetGreenChannel(self)

    def SetBlueChannel(self, blue):
        r"""
        SetBlueChannel(self, blue)

        Parameters
        ----------
        blue: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBPF_SetBlueChannel(self, blue)

    def GetBlueChannel(self):
        r"""GetBlueChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBPF_GetBlueChannel(self)
    __swig_destroy__ = _itkCustomColormapFunctionPython.delete_itkCustomColormapFunctionFRGBPF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCustomColormapFunctionFRGBPF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBPF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCustomColormapFunctionFRGBPF

        Create a new object of the class itkCustomColormapFunctionFRGBPF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCustomColormapFunctionFRGBPF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCustomColormapFunctionFRGBPF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCustomColormapFunctionFRGBPF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCustomColormapFunctionFRGBPF in _itkCustomColormapFunctionPython:
_itkCustomColormapFunctionPython.itkCustomColormapFunctionFRGBPF_swigregister(itkCustomColormapFunctionFRGBPF)

def itkCustomColormapFunctionUCRGBAPUC_New():
    return itkCustomColormapFunctionUCRGBAPUC.New()

class itkCustomColormapFunctionUCRGBAPUC(itk.itkColormapFunctionPython.itkColormapFunctionUCRGBAPUC):
    r"""Proxy of C++ itkCustomColormapFunctionUCRGBAPUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCustomColormapFunctionUCRGBAPUC_Pointer"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBAPUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCustomColormapFunctionUCRGBAPUC_Pointer"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBAPUC_Clone(self)

    def SetRedChannel(self, red):
        r"""
        SetRedChannel(self, red)

        Parameters
        ----------
        red: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBAPUC_SetRedChannel(self, red)

    def GetRedChannel(self):
        r"""GetRedChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBAPUC_GetRedChannel(self)

    def SetGreenChannel(self, green):
        r"""
        SetGreenChannel(self, green)

        Parameters
        ----------
        green: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBAPUC_SetGreenChannel(self, green)

    def GetGreenChannel(self):
        r"""GetGreenChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBAPUC_GetGreenChannel(self)

    def SetBlueChannel(self, blue):
        r"""
        SetBlueChannel(self, blue)

        Parameters
        ----------
        blue: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBAPUC_SetBlueChannel(self, blue)

    def GetBlueChannel(self):
        r"""GetBlueChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBAPUC_GetBlueChannel(self)
    __swig_destroy__ = _itkCustomColormapFunctionPython.delete_itkCustomColormapFunctionUCRGBAPUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCustomColormapFunctionUCRGBAPUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBAPUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCustomColormapFunctionUCRGBAPUC

        Create a new object of the class itkCustomColormapFunctionUCRGBAPUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCustomColormapFunctionUCRGBAPUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCustomColormapFunctionUCRGBAPUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCustomColormapFunctionUCRGBAPUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCustomColormapFunctionUCRGBAPUC in _itkCustomColormapFunctionPython:
_itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBAPUC_swigregister(itkCustomColormapFunctionUCRGBAPUC)

def itkCustomColormapFunctionUCRGBPUC_New():
    return itkCustomColormapFunctionUCRGBPUC.New()

class itkCustomColormapFunctionUCRGBPUC(itk.itkColormapFunctionPython.itkColormapFunctionUCRGBPUC):
    r"""Proxy of C++ itkCustomColormapFunctionUCRGBPUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCustomColormapFunctionUCRGBPUC_Pointer"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBPUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCustomColormapFunctionUCRGBPUC_Pointer"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBPUC_Clone(self)

    def SetRedChannel(self, red):
        r"""
        SetRedChannel(self, red)

        Parameters
        ----------
        red: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBPUC_SetRedChannel(self, red)

    def GetRedChannel(self):
        r"""GetRedChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBPUC_GetRedChannel(self)

    def SetGreenChannel(self, green):
        r"""
        SetGreenChannel(self, green)

        Parameters
        ----------
        green: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBPUC_SetGreenChannel(self, green)

    def GetGreenChannel(self):
        r"""GetGreenChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBPUC_GetGreenChannel(self)

    def SetBlueChannel(self, blue):
        r"""
        SetBlueChannel(self, blue)

        Parameters
        ----------
        blue: std::vector< double,std::allocator< double > >

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBPUC_SetBlueChannel(self, blue)

    def GetBlueChannel(self):
        r"""GetBlueChannel(self) -> vectorD"""
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBPUC_GetBlueChannel(self)
    __swig_destroy__ = _itkCustomColormapFunctionPython.delete_itkCustomColormapFunctionUCRGBPUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCustomColormapFunctionUCRGBPUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBPUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCustomColormapFunctionUCRGBPUC

        Create a new object of the class itkCustomColormapFunctionUCRGBPUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCustomColormapFunctionUCRGBPUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCustomColormapFunctionUCRGBPUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCustomColormapFunctionUCRGBPUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCustomColormapFunctionUCRGBPUC in _itkCustomColormapFunctionPython:
_itkCustomColormapFunctionPython.itkCustomColormapFunctionUCRGBPUC_swigregister(itkCustomColormapFunctionUCRGBPUC)

