# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHoughTransform2DLinesImageFilterPython
else:
    import _itkHoughTransform2DLinesImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkLineSpatialObjectPython
import itk.itkSpatialObjectBasePython
import itk.itkBoundingBoxPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorContainerPython
import itk.itkArrayPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkMapContainerPython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkTransformBasePython
import itk.itkLineSpatialObjectPointPython
import itk.itkSpatialObjectPointPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkImageToImageFilterCommonPython

def itkHoughTransform2DLinesImageFilterDD_New():
    return itkHoughTransform2DLinesImageFilterDD.New()

class itkHoughTransform2DLinesImageFilterDD(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkHoughTransform2DLinesImageFilterDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHoughTransform2DLinesImageFilterDD_Pointer"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHoughTransform2DLinesImageFilterDD_Pointer"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_GenerateData(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_GetThreshold(self)

    def SetAngleResolution(self, _arg):
        r"""
        SetAngleResolution(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_SetAngleResolution(self, _arg)

    def GetAngleResolution(self):
        r"""GetAngleResolution(self) -> double"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_GetAngleResolution(self)

    def Simplify(self):
        r"""Simplify(self)"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_Simplify(self)

    def GetModifiableSimplifyAccumulator(self):
        r"""GetModifiableSimplifyAccumulator(self) -> itkImageD2"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_GetModifiableSimplifyAccumulator(self)

    def GetSimplifyAccumulator(self, *args):
        r"""
        GetSimplifyAccumulator(self) -> itkImageD2
        GetSimplifyAccumulator(self) -> itkImageD2
        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_GetSimplifyAccumulator(self, *args)

    def GetLines(self):
        r"""GetLines(self) -> listitkLineSpatialObject2_Pointer"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_GetLines(self)

    def SetNumberOfLines(self, _arg):
        r"""
        SetNumberOfLines(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_SetNumberOfLines(self, _arg)

    def GetNumberOfLines(self):
        r"""GetNumberOfLines(self) -> unsigned long"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_GetNumberOfLines(self)

    def SetDiscRadius(self, _arg):
        r"""
        SetDiscRadius(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_SetDiscRadius(self, _arg)

    def GetDiscRadius(self):
        r"""GetDiscRadius(self) -> double"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_GetDiscRadius(self)

    def SetVariance(self, _arg):
        r"""
        SetVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_SetVariance(self, _arg)

    def GetVariance(self):
        r"""GetVariance(self) -> double"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_GetVariance(self)
    IntConvertibleToOutputCheck = _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_IntConvertibleToOutputCheck
    
    InputGreaterThanFloatCheck = _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_InputGreaterThanFloatCheck
    
    OutputPlusIntCheck = _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_OutputPlusIntCheck
    
    __swig_destroy__ = _itkHoughTransform2DLinesImageFilterPython.delete_itkHoughTransform2DLinesImageFilterDD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHoughTransform2DLinesImageFilterDD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHoughTransform2DLinesImageFilterDD

        Create a new object of the class itkHoughTransform2DLinesImageFilterDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHoughTransform2DLinesImageFilterDD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHoughTransform2DLinesImageFilterDD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHoughTransform2DLinesImageFilterDD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHoughTransform2DLinesImageFilterDD in _itkHoughTransform2DLinesImageFilterPython:
_itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterDD_swigregister(itkHoughTransform2DLinesImageFilterDD)

def itkHoughTransform2DLinesImageFilterFF_New():
    return itkHoughTransform2DLinesImageFilterFF.New()

class itkHoughTransform2DLinesImageFilterFF(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkHoughTransform2DLinesImageFilterFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHoughTransform2DLinesImageFilterFF_Pointer"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHoughTransform2DLinesImageFilterFF_Pointer"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_Clone(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_GenerateData(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_SetThreshold(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> double"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_GetThreshold(self)

    def SetAngleResolution(self, _arg):
        r"""
        SetAngleResolution(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_SetAngleResolution(self, _arg)

    def GetAngleResolution(self):
        r"""GetAngleResolution(self) -> double"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_GetAngleResolution(self)

    def Simplify(self):
        r"""Simplify(self)"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_Simplify(self)

    def GetModifiableSimplifyAccumulator(self):
        r"""GetModifiableSimplifyAccumulator(self) -> itkImageF2"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_GetModifiableSimplifyAccumulator(self)

    def GetSimplifyAccumulator(self, *args):
        r"""
        GetSimplifyAccumulator(self) -> itkImageF2
        GetSimplifyAccumulator(self) -> itkImageF2
        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_GetSimplifyAccumulator(self, *args)

    def GetLines(self):
        r"""GetLines(self) -> listitkLineSpatialObject2_Pointer"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_GetLines(self)

    def SetNumberOfLines(self, _arg):
        r"""
        SetNumberOfLines(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_SetNumberOfLines(self, _arg)

    def GetNumberOfLines(self):
        r"""GetNumberOfLines(self) -> unsigned long"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_GetNumberOfLines(self)

    def SetDiscRadius(self, _arg):
        r"""
        SetDiscRadius(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_SetDiscRadius(self, _arg)

    def GetDiscRadius(self):
        r"""GetDiscRadius(self) -> double"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_GetDiscRadius(self)

    def SetVariance(self, _arg):
        r"""
        SetVariance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_SetVariance(self, _arg)

    def GetVariance(self):
        r"""GetVariance(self) -> double"""
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_GetVariance(self)
    IntConvertibleToOutputCheck = _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_IntConvertibleToOutputCheck
    
    InputGreaterThanFloatCheck = _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_InputGreaterThanFloatCheck
    
    OutputPlusIntCheck = _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_OutputPlusIntCheck
    
    __swig_destroy__ = _itkHoughTransform2DLinesImageFilterPython.delete_itkHoughTransform2DLinesImageFilterFF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHoughTransform2DLinesImageFilterFF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHoughTransform2DLinesImageFilterFF

        Create a new object of the class itkHoughTransform2DLinesImageFilterFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHoughTransform2DLinesImageFilterFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHoughTransform2DLinesImageFilterFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHoughTransform2DLinesImageFilterFF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHoughTransform2DLinesImageFilterFF in _itkHoughTransform2DLinesImageFilterPython:
_itkHoughTransform2DLinesImageFilterPython.itkHoughTransform2DLinesImageFilterFF_swigregister(itkHoughTransform2DLinesImageFilterFF)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def hough_transform2_d_lines_image_filter(*args: itkt.ImageLike,  threshold: float=..., angle_resolution: float=..., number_of_lines: int=..., disc_radius: float=..., variance: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for HoughTransform2DLinesImageFilter"""
    import itk

    kwarg_typehints = { 'threshold':threshold,'angle_resolution':angle_resolution,'number_of_lines':number_of_lines,'disc_radius':disc_radius,'variance':variance }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HoughTransform2DLinesImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def hough_transform2_d_lines_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageFeature.HoughTransform2DLinesImageFilter
    hough_transform2_d_lines_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    hough_transform2_d_lines_image_filter.__doc__ = filter_object.__doc__



