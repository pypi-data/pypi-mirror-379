# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageNoisePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkShotNoiseImageFilterPython
else:
    import _itkShotNoiseImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkNoiseBaseImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def itkShotNoiseImageFilterID2ID2_New():
    return itkShotNoiseImageFilterID2ID2.New()

class itkShotNoiseImageFilterID2ID2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID2ID2):
    r"""Proxy of C++ itkShotNoiseImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterID2ID2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterID2ID2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterID2ID2

        Create a new object of the class itkShotNoiseImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterID2ID2 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_swigregister(itkShotNoiseImageFilterID2ID2)

def itkShotNoiseImageFilterID3ID3_New():
    return itkShotNoiseImageFilterID3ID3.New()

class itkShotNoiseImageFilterID3ID3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID3ID3):
    r"""Proxy of C++ itkShotNoiseImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterID3ID3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterID3ID3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterID3ID3

        Create a new object of the class itkShotNoiseImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterID3ID3 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_swigregister(itkShotNoiseImageFilterID3ID3)

def itkShotNoiseImageFilterID4ID4_New():
    return itkShotNoiseImageFilterID4ID4.New()

class itkShotNoiseImageFilterID4ID4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID4ID4):
    r"""Proxy of C++ itkShotNoiseImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterID4ID4_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterID4ID4_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID4ID4_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID4ID4_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID4ID4_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID4ID4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterID4ID4

        Create a new object of the class itkShotNoiseImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterID4ID4 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID4ID4_swigregister(itkShotNoiseImageFilterID4ID4)

def itkShotNoiseImageFilterIF2IF2_New():
    return itkShotNoiseImageFilterIF2IF2.New()

class itkShotNoiseImageFilterIF2IF2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF2IF2):
    r"""Proxy of C++ itkShotNoiseImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterIF2IF2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterIF2IF2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIF2IF2

        Create a new object of the class itkShotNoiseImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIF2IF2 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_swigregister(itkShotNoiseImageFilterIF2IF2)

def itkShotNoiseImageFilterIF3IF3_New():
    return itkShotNoiseImageFilterIF3IF3.New()

class itkShotNoiseImageFilterIF3IF3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF3IF3):
    r"""Proxy of C++ itkShotNoiseImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterIF3IF3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterIF3IF3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIF3IF3

        Create a new object of the class itkShotNoiseImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIF3IF3 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_swigregister(itkShotNoiseImageFilterIF3IF3)

def itkShotNoiseImageFilterIF4IF4_New():
    return itkShotNoiseImageFilterIF4IF4.New()

class itkShotNoiseImageFilterIF4IF4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF4IF4):
    r"""Proxy of C++ itkShotNoiseImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterIF4IF4_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterIF4IF4_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF4IF4_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF4IF4_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF4IF4_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF4IF4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIF4IF4

        Create a new object of the class itkShotNoiseImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIF4IF4 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF4IF4_swigregister(itkShotNoiseImageFilterIF4IF4)

def itkShotNoiseImageFilterISS2ISS2_New():
    return itkShotNoiseImageFilterISS2ISS2.New()

class itkShotNoiseImageFilterISS2ISS2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS2ISS2):
    r"""Proxy of C++ itkShotNoiseImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterISS2ISS2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterISS2ISS2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterISS2ISS2

        Create a new object of the class itkShotNoiseImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterISS2ISS2 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_swigregister(itkShotNoiseImageFilterISS2ISS2)

def itkShotNoiseImageFilterISS3ISS3_New():
    return itkShotNoiseImageFilterISS3ISS3.New()

class itkShotNoiseImageFilterISS3ISS3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS3ISS3):
    r"""Proxy of C++ itkShotNoiseImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterISS3ISS3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterISS3ISS3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterISS3ISS3

        Create a new object of the class itkShotNoiseImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterISS3ISS3 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_swigregister(itkShotNoiseImageFilterISS3ISS3)

def itkShotNoiseImageFilterISS4ISS4_New():
    return itkShotNoiseImageFilterISS4ISS4.New()

class itkShotNoiseImageFilterISS4ISS4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS4ISS4):
    r"""Proxy of C++ itkShotNoiseImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterISS4ISS4_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterISS4ISS4_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS4ISS4_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS4ISS4_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS4ISS4_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS4ISS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterISS4ISS4

        Create a new object of the class itkShotNoiseImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterISS4ISS4 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS4ISS4_swigregister(itkShotNoiseImageFilterISS4ISS4)

def itkShotNoiseImageFilterIUC2IUC2_New():
    return itkShotNoiseImageFilterIUC2IUC2.New()

class itkShotNoiseImageFilterIUC2IUC2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC2IUC2):
    r"""Proxy of C++ itkShotNoiseImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterIUC2IUC2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterIUC2IUC2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUC2IUC2

        Create a new object of the class itkShotNoiseImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIUC2IUC2 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_swigregister(itkShotNoiseImageFilterIUC2IUC2)

def itkShotNoiseImageFilterIUC3IUC3_New():
    return itkShotNoiseImageFilterIUC3IUC3.New()

class itkShotNoiseImageFilterIUC3IUC3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC3IUC3):
    r"""Proxy of C++ itkShotNoiseImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterIUC3IUC3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterIUC3IUC3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUC3IUC3

        Create a new object of the class itkShotNoiseImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIUC3IUC3 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_swigregister(itkShotNoiseImageFilterIUC3IUC3)

def itkShotNoiseImageFilterIUC4IUC4_New():
    return itkShotNoiseImageFilterIUC4IUC4.New()

class itkShotNoiseImageFilterIUC4IUC4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC4IUC4):
    r"""Proxy of C++ itkShotNoiseImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterIUC4IUC4_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterIUC4IUC4_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC4IUC4_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC4IUC4_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC4IUC4_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC4IUC4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUC4IUC4

        Create a new object of the class itkShotNoiseImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIUC4IUC4 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC4IUC4_swigregister(itkShotNoiseImageFilterIUC4IUC4)

def itkShotNoiseImageFilterIUS2IUS2_New():
    return itkShotNoiseImageFilterIUS2IUS2.New()

class itkShotNoiseImageFilterIUS2IUS2(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS2IUS2):
    r"""Proxy of C++ itkShotNoiseImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterIUS2IUS2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterIUS2IUS2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUS2IUS2

        Create a new object of the class itkShotNoiseImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIUS2IUS2 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_swigregister(itkShotNoiseImageFilterIUS2IUS2)

def itkShotNoiseImageFilterIUS3IUS3_New():
    return itkShotNoiseImageFilterIUS3IUS3.New()

class itkShotNoiseImageFilterIUS3IUS3(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS3IUS3):
    r"""Proxy of C++ itkShotNoiseImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterIUS3IUS3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterIUS3IUS3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUS3IUS3

        Create a new object of the class itkShotNoiseImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIUS3IUS3 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_swigregister(itkShotNoiseImageFilterIUS3IUS3)

def itkShotNoiseImageFilterIUS4IUS4_New():
    return itkShotNoiseImageFilterIUS4IUS4.New()

class itkShotNoiseImageFilterIUS4IUS4(itk.itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS4IUS4):
    r"""Proxy of C++ itkShotNoiseImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkShotNoiseImageFilterIUS4IUS4_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkShotNoiseImageFilterIUS4IUS4_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS4IUS4_Clone(self)

    def GetScale(self):
        r"""GetScale(self) -> double"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS4IUS4_GetScale(self)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS4IUS4_SetScale(self, _arg)
    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS4IUS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkShotNoiseImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUS4IUS4

        Create a new object of the class itkShotNoiseImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShotNoiseImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShotNoiseImageFilterIUS4IUS4 in _itkShotNoiseImageFilterPython:
_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS4IUS4_swigregister(itkShotNoiseImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def shot_noise_image_filter(*args: itkt.ImageLike,  scale: float=..., seed: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ShotNoiseImageFilter"""
    import itk

    kwarg_typehints = { 'scale':scale,'seed':seed }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ShotNoiseImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def shot_noise_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageNoise.ShotNoiseImageFilter
    shot_noise_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    shot_noise_image_filter.__doc__ = filter_object.__doc__



