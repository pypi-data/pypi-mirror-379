# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLabelMapPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBinaryNotImageFilterPython
else:
    import _itkBinaryNotImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def itkBinaryNotImageFilterISS2_Superclass_New():
    return itkBinaryNotImageFilterISS2_Superclass.New()

class itkBinaryNotImageFilterISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkBinaryNotImageFilterISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterISS2_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterISS2_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::BinaryNot< short >
        GetFunctor(self) -> itk::Functor::BinaryNot< short > const &
        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::BinaryNot< short > const &

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterISS2_Superclass

        Create a new object of the class itkBinaryNotImageFilterISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterISS2_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Superclass_swigregister(itkBinaryNotImageFilterISS2_Superclass)

def itkBinaryNotImageFilterISS3_Superclass_New():
    return itkBinaryNotImageFilterISS3_Superclass.New()

class itkBinaryNotImageFilterISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkBinaryNotImageFilterISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterISS3_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterISS3_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::BinaryNot< short >
        GetFunctor(self) -> itk::Functor::BinaryNot< short > const &
        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::BinaryNot< short > const &

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterISS3_Superclass

        Create a new object of the class itkBinaryNotImageFilterISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterISS3_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Superclass_swigregister(itkBinaryNotImageFilterISS3_Superclass)

def itkBinaryNotImageFilterISS4_Superclass_New():
    return itkBinaryNotImageFilterISS4_Superclass.New()

class itkBinaryNotImageFilterISS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS4ISS4):
    r"""Proxy of C++ itkBinaryNotImageFilterISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterISS4_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterISS4_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::BinaryNot< short >
        GetFunctor(self) -> itk::Functor::BinaryNot< short > const &
        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::BinaryNot< short > const &

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterISS4_Superclass

        Create a new object of the class itkBinaryNotImageFilterISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterISS4_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4_Superclass_swigregister(itkBinaryNotImageFilterISS4_Superclass)

def itkBinaryNotImageFilterIUC2_Superclass_New():
    return itkBinaryNotImageFilterIUC2_Superclass.New()

class itkBinaryNotImageFilterIUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkBinaryNotImageFilterIUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterIUC2_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterIUC2_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::BinaryNot< unsigned char >
        GetFunctor(self) -> itk::Functor::BinaryNot< unsigned char > const &
        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::BinaryNot< unsigned char > const &

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterIUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUC2_Superclass

        Create a new object of the class itkBinaryNotImageFilterIUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUC2_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Superclass_swigregister(itkBinaryNotImageFilterIUC2_Superclass)

def itkBinaryNotImageFilterIUC3_Superclass_New():
    return itkBinaryNotImageFilterIUC3_Superclass.New()

class itkBinaryNotImageFilterIUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkBinaryNotImageFilterIUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterIUC3_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterIUC3_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::BinaryNot< unsigned char >
        GetFunctor(self) -> itk::Functor::BinaryNot< unsigned char > const &
        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::BinaryNot< unsigned char > const &

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterIUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUC3_Superclass

        Create a new object of the class itkBinaryNotImageFilterIUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUC3_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Superclass_swigregister(itkBinaryNotImageFilterIUC3_Superclass)

def itkBinaryNotImageFilterIUC4_Superclass_New():
    return itkBinaryNotImageFilterIUC4_Superclass.New()

class itkBinaryNotImageFilterIUC4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC4IUC4):
    r"""Proxy of C++ itkBinaryNotImageFilterIUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterIUC4_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterIUC4_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::BinaryNot< unsigned char >
        GetFunctor(self) -> itk::Functor::BinaryNot< unsigned char > const &
        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::BinaryNot< unsigned char > const &

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterIUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUC4_Superclass

        Create a new object of the class itkBinaryNotImageFilterIUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUC4_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4_Superclass_swigregister(itkBinaryNotImageFilterIUC4_Superclass)

def itkBinaryNotImageFilterIUS2_Superclass_New():
    return itkBinaryNotImageFilterIUS2_Superclass.New()

class itkBinaryNotImageFilterIUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkBinaryNotImageFilterIUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterIUS2_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterIUS2_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::BinaryNot< unsigned short >
        GetFunctor(self) -> itk::Functor::BinaryNot< unsigned short > const &
        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::BinaryNot< unsigned short > const &

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterIUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUS2_Superclass

        Create a new object of the class itkBinaryNotImageFilterIUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUS2_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Superclass_swigregister(itkBinaryNotImageFilterIUS2_Superclass)

def itkBinaryNotImageFilterIUS3_Superclass_New():
    return itkBinaryNotImageFilterIUS3_Superclass.New()

class itkBinaryNotImageFilterIUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkBinaryNotImageFilterIUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterIUS3_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterIUS3_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::BinaryNot< unsigned short >
        GetFunctor(self) -> itk::Functor::BinaryNot< unsigned short > const &
        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::BinaryNot< unsigned short > const &

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterIUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUS3_Superclass

        Create a new object of the class itkBinaryNotImageFilterIUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUS3_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Superclass_swigregister(itkBinaryNotImageFilterIUS3_Superclass)

def itkBinaryNotImageFilterIUS4_Superclass_New():
    return itkBinaryNotImageFilterIUS4_Superclass.New()

class itkBinaryNotImageFilterIUS4_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS4IUS4):
    r"""Proxy of C++ itkBinaryNotImageFilterIUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterIUS4_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterIUS4_Superclass_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4_Superclass_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Functor::BinaryNot< unsigned short >
        GetFunctor(self) -> itk::Functor::BinaryNot< unsigned short > const &
        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Functor::BinaryNot< unsigned short > const &

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4_Superclass_SetFunctor(self, functor)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterIUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUS4_Superclass

        Create a new object of the class itkBinaryNotImageFilterIUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUS4_Superclass in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4_Superclass_swigregister(itkBinaryNotImageFilterIUS4_Superclass)

def itkBinaryNotImageFilterISS2_New():
    return itkBinaryNotImageFilterISS2.New()

class itkBinaryNotImageFilterISS2(itkBinaryNotImageFilterISS2_Superclass):
    r"""Proxy of C++ itkBinaryNotImageFilterISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterISS2_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterISS2_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_Clone(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> short"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> short"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_GetBackgroundValue(self)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterISS2

        Create a new object of the class itkBinaryNotImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterISS2 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS2_swigregister(itkBinaryNotImageFilterISS2)

def itkBinaryNotImageFilterISS3_New():
    return itkBinaryNotImageFilterISS3.New()

class itkBinaryNotImageFilterISS3(itkBinaryNotImageFilterISS3_Superclass):
    r"""Proxy of C++ itkBinaryNotImageFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterISS3_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterISS3_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_Clone(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> short"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> short"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_GetBackgroundValue(self)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterISS3

        Create a new object of the class itkBinaryNotImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterISS3 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS3_swigregister(itkBinaryNotImageFilterISS3)

def itkBinaryNotImageFilterISS4_New():
    return itkBinaryNotImageFilterISS4.New()

class itkBinaryNotImageFilterISS4(itkBinaryNotImageFilterISS4_Superclass):
    r"""Proxy of C++ itkBinaryNotImageFilterISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterISS4_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterISS4_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4_Clone(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> short"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> short"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4_GetBackgroundValue(self)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterISS4

        Create a new object of the class itkBinaryNotImageFilterISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterISS4 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterISS4_swigregister(itkBinaryNotImageFilterISS4)

def itkBinaryNotImageFilterIUC2_New():
    return itkBinaryNotImageFilterIUC2.New()

class itkBinaryNotImageFilterIUC2(itkBinaryNotImageFilterIUC2_Superclass):
    r"""Proxy of C++ itkBinaryNotImageFilterIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterIUC2_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterIUC2_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_Clone(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> unsigned char"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned char"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_GetBackgroundValue(self)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUC2

        Create a new object of the class itkBinaryNotImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUC2 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC2_swigregister(itkBinaryNotImageFilterIUC2)

def itkBinaryNotImageFilterIUC3_New():
    return itkBinaryNotImageFilterIUC3.New()

class itkBinaryNotImageFilterIUC3(itkBinaryNotImageFilterIUC3_Superclass):
    r"""Proxy of C++ itkBinaryNotImageFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterIUC3_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterIUC3_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_Clone(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> unsigned char"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned char"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_GetBackgroundValue(self)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUC3

        Create a new object of the class itkBinaryNotImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUC3 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC3_swigregister(itkBinaryNotImageFilterIUC3)

def itkBinaryNotImageFilterIUC4_New():
    return itkBinaryNotImageFilterIUC4.New()

class itkBinaryNotImageFilterIUC4(itkBinaryNotImageFilterIUC4_Superclass):
    r"""Proxy of C++ itkBinaryNotImageFilterIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterIUC4_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterIUC4_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4_Clone(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> unsigned char"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned char"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4_GetBackgroundValue(self)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUC4

        Create a new object of the class itkBinaryNotImageFilterIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUC4 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUC4_swigregister(itkBinaryNotImageFilterIUC4)

def itkBinaryNotImageFilterIUS2_New():
    return itkBinaryNotImageFilterIUS2.New()

class itkBinaryNotImageFilterIUS2(itkBinaryNotImageFilterIUS2_Superclass):
    r"""Proxy of C++ itkBinaryNotImageFilterIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterIUS2_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterIUS2_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_Clone(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> unsigned short"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned short"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_GetBackgroundValue(self)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUS2

        Create a new object of the class itkBinaryNotImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUS2 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS2_swigregister(itkBinaryNotImageFilterIUS2)

def itkBinaryNotImageFilterIUS3_New():
    return itkBinaryNotImageFilterIUS3.New()

class itkBinaryNotImageFilterIUS3(itkBinaryNotImageFilterIUS3_Superclass):
    r"""Proxy of C++ itkBinaryNotImageFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterIUS3_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterIUS3_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_Clone(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> unsigned short"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned short"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_GetBackgroundValue(self)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUS3

        Create a new object of the class itkBinaryNotImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUS3 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS3_swigregister(itkBinaryNotImageFilterIUS3)

def itkBinaryNotImageFilterIUS4_New():
    return itkBinaryNotImageFilterIUS4.New()

class itkBinaryNotImageFilterIUS4(itkBinaryNotImageFilterIUS4_Superclass):
    r"""Proxy of C++ itkBinaryNotImageFilterIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBinaryNotImageFilterIUS4_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBinaryNotImageFilterIUS4_Pointer"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4_Clone(self)

    def SetForegroundValue(self, _arg):
        r"""
        SetForegroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4_SetForegroundValue(self, _arg)

    def GetForegroundValue(self):
        r"""GetForegroundValue(self) -> unsigned short"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4_GetForegroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4_SetBackgroundValue(self, _arg)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned short"""
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4_GetBackgroundValue(self)
    __swig_destroy__ = _itkBinaryNotImageFilterPython.delete_itkBinaryNotImageFilterIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBinaryNotImageFilterIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBinaryNotImageFilterIUS4

        Create a new object of the class itkBinaryNotImageFilterIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryNotImageFilterIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryNotImageFilterIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryNotImageFilterIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryNotImageFilterIUS4 in _itkBinaryNotImageFilterPython:
_itkBinaryNotImageFilterPython.itkBinaryNotImageFilterIUS4_swigregister(itkBinaryNotImageFilterIUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def binary_not_image_filter(*args: itkt.ImageLike,  foreground_value: int=..., background_value: int=..., functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for BinaryNotImageFilter"""
    import itk

    kwarg_typehints = { 'foreground_value':foreground_value,'background_value':background_value,'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.BinaryNotImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def binary_not_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLabelMap.BinaryNotImageFilter
    binary_not_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    binary_not_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def unary_functor_image_filter(*args: itkt.ImageLike,  functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for UnaryFunctorImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLabelMap.UnaryFunctorImageFilter
    unary_functor_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    unary_functor_image_filter.__doc__ = filter_object.__doc__



