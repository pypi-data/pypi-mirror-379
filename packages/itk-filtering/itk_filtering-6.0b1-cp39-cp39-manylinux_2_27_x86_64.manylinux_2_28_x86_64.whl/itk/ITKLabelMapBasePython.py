# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLabelMapPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ITKLabelMapBasePython
else:
    import _ITKLabelMapBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkOffsetPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkStatisticsLabelObjectPython
import itk.itkHistogramPython
import itk.itkArrayPython
import itk.itkSamplePython
import itk.itkShapeLabelObjectPython
import itk.itkLabelObjectPython
import itk.itkLabelObjectLinePython
import itk.itkAffineTransformPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkMatrixOffsetTransformBasePython
class itkImageSourceLM2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceLM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkLabelMap2
        GetOutput(self) -> itkLabelMap2
        GetOutput(self, idx) -> itkLabelMap2

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageSourceLM2_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _ITKLabelMapBasePython.itkImageSourceLM2_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _ITKLabelMapBasePython.itkImageSourceLM2_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _ITKLabelMapBasePython.itkImageSourceLM2_MakeOutput(self, *args)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageSourceLM2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceLM2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageSourceLM2_cast(obj)

# Register itkImageSourceLM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageSourceLM2_swigregister(itkImageSourceLM2)
class itkImageSourceLM3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceLM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkLabelMap3
        GetOutput(self) -> itkLabelMap3
        GetOutput(self, idx) -> itkLabelMap3

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageSourceLM3_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _ITKLabelMapBasePython.itkImageSourceLM3_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _ITKLabelMapBasePython.itkImageSourceLM3_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _ITKLabelMapBasePython.itkImageSourceLM3_MakeOutput(self, *args)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageSourceLM3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceLM3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageSourceLM3_cast(obj)

# Register itkImageSourceLM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageSourceLM3_swigregister(itkImageSourceLM3)
class itkImageSourceLM4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceLM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkLabelMap4
        GetOutput(self) -> itkLabelMap4
        GetOutput(self, idx) -> itkLabelMap4

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageSourceLM4_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _ITKLabelMapBasePython.itkImageSourceLM4_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _ITKLabelMapBasePython.itkImageSourceLM4_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _ITKLabelMapBasePython.itkImageSourceLM4_MakeOutput(self, *args)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageSourceLM4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceLM4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageSourceLM4_cast(obj)

# Register itkImageSourceLM4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageSourceLM4_swigregister(itkImageSourceLM4)
class itkImageToImageFilterID2LM2(itkImageSourceLM2):
    r"""Proxy of C++ itkImageToImageFilterID2LM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID2LM2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID2LM2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID2LM2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterID2LM2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID2LM2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterID2LM2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID2LM2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterID2LM2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID2LM2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterID2LM2_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterID2LM2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2LM2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID2LM2_cast(obj)

# Register itkImageToImageFilterID2LM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterID2LM2_swigregister(itkImageToImageFilterID2LM2)
class itkImageToImageFilterID3LM3(itkImageSourceLM3):
    r"""Proxy of C++ itkImageToImageFilterID3LM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID3LM3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID3LM3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID3LM3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterID3LM3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID3LM3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterID3LM3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID3LM3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterID3LM3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID3LM3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterID3LM3_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterID3LM3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3LM3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID3LM3_cast(obj)

# Register itkImageToImageFilterID3LM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterID3LM3_swigregister(itkImageToImageFilterID3LM3)
class itkImageToImageFilterID4LM4(itkImageSourceLM4):
    r"""Proxy of C++ itkImageToImageFilterID4LM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID4LM4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID4LM4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID4LM4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterID4LM4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID4LM4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterID4LM4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID4LM4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterID4LM4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID4LM4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterID4LM4_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterID4LM4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4LM4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterID4LM4_cast(obj)

# Register itkImageToImageFilterID4LM4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterID4LM4_swigregister(itkImageToImageFilterID4LM4)
class itkImageToImageFilterIF2LM2(itkImageSourceLM2):
    r"""Proxy of C++ itkImageToImageFilterIF2LM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIF2LM2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2LM2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_cast(obj)

# Register itkImageToImageFilterIF2LM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_swigregister(itkImageToImageFilterIF2LM2)
class itkImageToImageFilterIF3LM3(itkImageSourceLM3):
    r"""Proxy of C++ itkImageToImageFilterIF3LM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIF3LM3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3LM3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_cast(obj)

# Register itkImageToImageFilterIF3LM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_swigregister(itkImageToImageFilterIF3LM3)
class itkImageToImageFilterIF4LM4(itkImageSourceLM4):
    r"""Proxy of C++ itkImageToImageFilterIF4LM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF4LM4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF4LM4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF4LM4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF4LM4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF4LM4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF4LM4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF4LM4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF4LM4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF4LM4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIF4LM4_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIF4LM4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4LM4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIF4LM4_cast(obj)

# Register itkImageToImageFilterIF4LM4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIF4LM4_swigregister(itkImageToImageFilterIF4LM4)
class itkImageToImageFilterISS2LM2(itkImageSourceLM2):
    r"""Proxy of C++ itkImageToImageFilterISS2LM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterISS2LM2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2LM2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_cast(obj)

# Register itkImageToImageFilterISS2LM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_swigregister(itkImageToImageFilterISS2LM2)
class itkImageToImageFilterISS3LM3(itkImageSourceLM3):
    r"""Proxy of C++ itkImageToImageFilterISS3LM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterISS3LM3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3LM3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_cast(obj)

# Register itkImageToImageFilterISS3LM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_swigregister(itkImageToImageFilterISS3LM3)
class itkImageToImageFilterISS4LM4(itkImageSourceLM4):
    r"""Proxy of C++ itkImageToImageFilterISS4LM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS4LM4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS4LM4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS4LM4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS4LM4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS4LM4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS4LM4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS4LM4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS4LM4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS4LM4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterISS4LM4_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterISS4LM4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4LM4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterISS4LM4_cast(obj)

# Register itkImageToImageFilterISS4LM4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterISS4LM4_swigregister(itkImageToImageFilterISS4LM4)
class itkImageToImageFilterIUC2LM2(itkImageSourceLM2):
    r"""Proxy of C++ itkImageToImageFilterIUC2LM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUC2LM2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2LM2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_cast(obj)

# Register itkImageToImageFilterIUC2LM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_swigregister(itkImageToImageFilterIUC2LM2)
class itkImageToImageFilterIUC3LM3(itkImageSourceLM3):
    r"""Proxy of C++ itkImageToImageFilterIUC3LM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUC3LM3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3LM3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_cast(obj)

# Register itkImageToImageFilterIUC3LM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_swigregister(itkImageToImageFilterIUC3LM3)
class itkImageToImageFilterIUC4LM4(itkImageSourceLM4):
    r"""Proxy of C++ itkImageToImageFilterIUC4LM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC4LM4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC4LM4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC4LM4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC4LM4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC4LM4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC4LM4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC4LM4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC4LM4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC4LM4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC4LM4_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUC4LM4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4LM4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUC4LM4_cast(obj)

# Register itkImageToImageFilterIUC4LM4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIUC4LM4_swigregister(itkImageToImageFilterIUC4LM4)
class itkImageToImageFilterIUS2LM2(itkImageSourceLM2):
    r"""Proxy of C++ itkImageToImageFilterIUS2LM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUS2LM2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2LM2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_cast(obj)

# Register itkImageToImageFilterIUS2LM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_swigregister(itkImageToImageFilterIUS2LM2)
class itkImageToImageFilterIUS3LM3(itkImageSourceLM3):
    r"""Proxy of C++ itkImageToImageFilterIUS3LM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUS3LM3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3LM3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_cast(obj)

# Register itkImageToImageFilterIUS3LM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_swigregister(itkImageToImageFilterIUS3LM3)
class itkImageToImageFilterIUS4LM4(itkImageSourceLM4):
    r"""Proxy of C++ itkImageToImageFilterIUS4LM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS4LM4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS4LM4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS4LM4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS4LM4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS4LM4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS4LM4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS4LM4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS4LM4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS4LM4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS4LM4_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUS4LM4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4LM4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterIUS4LM4_cast(obj)

# Register itkImageToImageFilterIUS4LM4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIUS4LM4_swigregister(itkImageToImageFilterIUS4LM4)
class itkImageToImageFilterLM2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterLM2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap2
        GetInput(self, idx) -> itkLabelMap2

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_cast(obj)

# Register itkImageToImageFilterLM2ID2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_swigregister(itkImageToImageFilterLM2ID2)
class itkImageToImageFilterLM2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterLM2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap2
        GetInput(self, idx) -> itkLabelMap2

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_cast(obj)

# Register itkImageToImageFilterLM2IF2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_swigregister(itkImageToImageFilterLM2IF2)
class itkImageToImageFilterLM2IRGBUC2(itk.itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterLM2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap2
        GetInput(self, idx) -> itkLabelMap2

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2IRGBUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM2IRGBUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_cast(obj)

# Register itkImageToImageFilterLM2IRGBUC2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_swigregister(itkImageToImageFilterLM2IRGBUC2)
class itkImageToImageFilterLM2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterLM2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap2
        GetInput(self, idx) -> itkLabelMap2

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_cast(obj)

# Register itkImageToImageFilterLM2ISS2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_swigregister(itkImageToImageFilterLM2ISS2)
class itkImageToImageFilterLM2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterLM2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap2
        GetInput(self, idx) -> itkLabelMap2

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_cast(obj)

# Register itkImageToImageFilterLM2IUC2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_swigregister(itkImageToImageFilterLM2IUC2)
class itkImageToImageFilterLM2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterLM2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap2
        GetInput(self, idx) -> itkLabelMap2

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_cast(obj)

# Register itkImageToImageFilterLM2IUS2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_swigregister(itkImageToImageFilterLM2IUS2)
class itkImageToImageFilterLM2LM2(itkImageSourceLM2):
    r"""Proxy of C++ itkImageToImageFilterLM2LM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap2
        GetInput(self, idx) -> itkLabelMap2

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2LM2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM2LM2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_cast(obj)

# Register itkImageToImageFilterLM2LM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_swigregister(itkImageToImageFilterLM2LM2)
class itkImageToImageFilterLM3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterLM3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap3
        GetInput(self, idx) -> itkLabelMap3

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_cast(obj)

# Register itkImageToImageFilterLM3ID3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_swigregister(itkImageToImageFilterLM3ID3)
class itkImageToImageFilterLM3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterLM3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap3
        GetInput(self, idx) -> itkLabelMap3

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_cast(obj)

# Register itkImageToImageFilterLM3IF3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_swigregister(itkImageToImageFilterLM3IF3)
class itkImageToImageFilterLM3IRGBUC3(itk.itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterLM3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap3
        GetInput(self, idx) -> itkLabelMap3

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM3IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_cast(obj)

# Register itkImageToImageFilterLM3IRGBUC3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_swigregister(itkImageToImageFilterLM3IRGBUC3)
class itkImageToImageFilterLM3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterLM3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap3
        GetInput(self, idx) -> itkLabelMap3

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_cast(obj)

# Register itkImageToImageFilterLM3ISS3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_swigregister(itkImageToImageFilterLM3ISS3)
class itkImageToImageFilterLM3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterLM3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap3
        GetInput(self, idx) -> itkLabelMap3

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_cast(obj)

# Register itkImageToImageFilterLM3IUC3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_swigregister(itkImageToImageFilterLM3IUC3)
class itkImageToImageFilterLM3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterLM3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap3
        GetInput(self, idx) -> itkLabelMap3

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_cast(obj)

# Register itkImageToImageFilterLM3IUS3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_swigregister(itkImageToImageFilterLM3IUS3)
class itkImageToImageFilterLM3LM3(itkImageSourceLM3):
    r"""Proxy of C++ itkImageToImageFilterLM3LM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap3
        GetInput(self, idx) -> itkLabelMap3

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3LM3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM3LM3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_cast(obj)

# Register itkImageToImageFilterLM3LM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_swigregister(itkImageToImageFilterLM3LM3)
class itkImageToImageFilterLM4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterLM4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap4
        GetInput(self, idx) -> itkLabelMap4

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ID4_cast(obj)

# Register itkImageToImageFilterLM4ID4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM4ID4_swigregister(itkImageToImageFilterLM4ID4)
class itkImageToImageFilterLM4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterLM4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap4
        GetInput(self, idx) -> itkLabelMap4

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IF4_cast(obj)

# Register itkImageToImageFilterLM4IF4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM4IF4_swigregister(itkImageToImageFilterLM4IF4)
class itkImageToImageFilterLM4IRGBUC4(itk.itkImageSourcePython.itkImageSourceIRGBUC4):
    r"""Proxy of C++ itkImageToImageFilterLM4IRGBUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IRGBUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap4
        GetInput(self, idx) -> itkLabelMap4

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IRGBUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IRGBUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IRGBUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IRGBUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IRGBUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IRGBUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IRGBUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IRGBUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IRGBUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM4IRGBUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM4IRGBUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IRGBUC4_cast(obj)

# Register itkImageToImageFilterLM4IRGBUC4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM4IRGBUC4_swigregister(itkImageToImageFilterLM4IRGBUC4)
class itkImageToImageFilterLM4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterLM4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap4
        GetInput(self, idx) -> itkLabelMap4

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4ISS4_cast(obj)

# Register itkImageToImageFilterLM4ISS4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM4ISS4_swigregister(itkImageToImageFilterLM4ISS4)
class itkImageToImageFilterLM4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterLM4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap4
        GetInput(self, idx) -> itkLabelMap4

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUC4_cast(obj)

# Register itkImageToImageFilterLM4IUC4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM4IUC4_swigregister(itkImageToImageFilterLM4IUC4)
class itkImageToImageFilterLM4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterLM4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap4
        GetInput(self, idx) -> itkLabelMap4

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4IUS4_cast(obj)

# Register itkImageToImageFilterLM4IUS4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM4IUS4_swigregister(itkImageToImageFilterLM4IUS4)
class itkImageToImageFilterLM4LM4(itkImageSourceLM4):
    r"""Proxy of C++ itkImageToImageFilterLM4LM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4LM4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkLabelMap4
        GetInput(self, idx) -> itkLabelMap4

        Parameters
        ----------
        idx: unsigned int

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4LM4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4LM4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4LM4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4LM4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4LM4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4LM4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4LM4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4LM4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4LM4_GetDirectionTolerance(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM4LM4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterLM4LM4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkImageToImageFilterLM4LM4_cast(obj)

# Register itkImageToImageFilterLM4LM4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM4LM4_swigregister(itkImageToImageFilterLM4LM4)

def itkLabelMap2_New():
    return itkLabelMap2.New()

class itkLabelMap2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkLabelMap2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelMap2_Pointer"""
        return _ITKLabelMapBasePython.itkLabelMap2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelMap2_Pointer"""
        return _ITKLabelMapBasePython.itkLabelMap2_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _ITKLabelMapBasePython.itkLabelMap2_Allocate(self, initialize)

    def Graft(self, imgData):
        r"""
        Graft(self, imgData)

        Parameters
        ----------
        imgData: itkLabelMap2 const *

        """
        return _ITKLabelMapBasePython.itkLabelMap2_Graft(self, imgData)

    def HasLabel(self, label):
        r"""
        HasLabel(self, label) -> bool

        Parameters
        ----------
        label: unsigned long const

        """
        return _ITKLabelMapBasePython.itkLabelMap2_HasLabel(self, label)

    def GetNthLabelObject(self, *args):
        r"""
        GetNthLabelObject(self, pos) -> itkStatisticsLabelObjectUL2

        Parameters
        ----------
        pos: unsigned long const &

        GetNthLabelObject(self, pos) -> itkStatisticsLabelObjectUL2

        Parameters
        ----------
        pos: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap2_GetNthLabelObject(self, *args)

    def GetPixel(self, idx):
        r"""
        GetPixel(self, idx) -> unsigned long const &

        Parameters
        ----------
        idx: itkIndex2 const &

        """
        return _ITKLabelMapBasePython.itkLabelMap2_GetPixel(self, idx)

    def SetPixel(self, idx, iLabel):
        r"""
        SetPixel(self, idx, iLabel)

        Parameters
        ----------
        idx: itkIndex2 const &
        iLabel: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap2_SetPixel(self, idx, iLabel)

    def AddPixel(self, idx, label):
        r"""
        AddPixel(self, idx, label)

        Parameters
        ----------
        idx: itkIndex2 const &
        label: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap2_AddPixel(self, idx, label)

    def RemovePixel(self, idx, label):
        r"""
        RemovePixel(self, idx, label)

        Parameters
        ----------
        idx: itkIndex2 const &
        label: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap2_RemovePixel(self, idx, label)

    def SetLine(self, idx, length, label):
        r"""
        SetLine(self, idx, length, label)

        Parameters
        ----------
        idx: itkIndex2 const &
        length: unsigned long const &
        label: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap2_SetLine(self, idx, length, label)

    def GetLabelObject(self, *args):
        r"""
        GetLabelObject(self, label) -> itkStatisticsLabelObjectUL2

        Parameters
        ----------
        label: unsigned long const &

        GetLabelObject(self, label) -> itkStatisticsLabelObjectUL2

        Parameters
        ----------
        label: unsigned long const &

        GetLabelObject(self, idx) -> itkStatisticsLabelObjectUL2

        Parameters
        ----------
        idx: itkIndex2 const &

        """
        return _ITKLabelMapBasePython.itkLabelMap2_GetLabelObject(self, *args)

    def AddLabelObject(self, labelObject):
        r"""
        AddLabelObject(self, labelObject)

        Parameters
        ----------
        labelObject: itkStatisticsLabelObjectUL2 *

        """
        return _ITKLabelMapBasePython.itkLabelMap2_AddLabelObject(self, labelObject)

    def PushLabelObject(self, labelObject):
        r"""
        PushLabelObject(self, labelObject)

        Parameters
        ----------
        labelObject: itkStatisticsLabelObjectUL2 *

        """
        return _ITKLabelMapBasePython.itkLabelMap2_PushLabelObject(self, labelObject)

    def RemoveLabelObject(self, labelObject):
        r"""
        RemoveLabelObject(self, labelObject)

        Parameters
        ----------
        labelObject: itkStatisticsLabelObjectUL2 *

        """
        return _ITKLabelMapBasePython.itkLabelMap2_RemoveLabelObject(self, labelObject)

    def RemoveLabel(self, label):
        r"""
        RemoveLabel(self, label)

        Parameters
        ----------
        label: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap2_RemoveLabel(self, label)

    def ClearLabels(self):
        r"""ClearLabels(self)"""
        return _ITKLabelMapBasePython.itkLabelMap2_ClearLabels(self)

    def GetNumberOfLabelObjects(self):
        r"""GetNumberOfLabelObjects(self) -> unsigned long"""
        return _ITKLabelMapBasePython.itkLabelMap2_GetNumberOfLabelObjects(self)

    def GetLabels(self):
        r"""GetLabels(self) -> vectorUL"""
        return _ITKLabelMapBasePython.itkLabelMap2_GetLabels(self)

    def GetLabelObjects(self):
        r"""GetLabelObjects(self) -> vectoritkStatisticsLabelObjectUL2"""
        return _ITKLabelMapBasePython.itkLabelMap2_GetLabelObjects(self)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned long"""
        return _ITKLabelMapBasePython.itkLabelMap2_GetBackgroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _ITKLabelMapBasePython.itkLabelMap2_SetBackgroundValue(self, _arg)

    def PrintLabelObjects(self, *args):
        r"""
        PrintLabelObjects(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        PrintLabelObjects(self)
        """
        return _ITKLabelMapBasePython.itkLabelMap2_PrintLabelObjects(self, *args)

    def Optimize(self):
        r"""Optimize(self)"""
        return _ITKLabelMapBasePython.itkLabelMap2_Optimize(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkLabelMap2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelMap2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkLabelMap2_cast(obj)

    def __len__(self):
        return self.GetNumberOfLabelObjects()
    def __getitem__(self, label):
        return self.GetLabelObject(label)
    def __iter__(self):
        labels = self.GetLabels()
        for label in labels:
            yield self.GetLabelObject(label)


    def New(*args, **kargs):
        """New() -> itkLabelMap2

        Create a new object of the class itkLabelMap2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMap2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMap2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMap2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMap2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkLabelMap2_swigregister(itkLabelMap2)

def itkLabelMap3_New():
    return itkLabelMap3.New()

class itkLabelMap3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkLabelMap3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelMap3_Pointer"""
        return _ITKLabelMapBasePython.itkLabelMap3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelMap3_Pointer"""
        return _ITKLabelMapBasePython.itkLabelMap3_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _ITKLabelMapBasePython.itkLabelMap3_Allocate(self, initialize)

    def Graft(self, imgData):
        r"""
        Graft(self, imgData)

        Parameters
        ----------
        imgData: itkLabelMap3 const *

        """
        return _ITKLabelMapBasePython.itkLabelMap3_Graft(self, imgData)

    def HasLabel(self, label):
        r"""
        HasLabel(self, label) -> bool

        Parameters
        ----------
        label: unsigned long const

        """
        return _ITKLabelMapBasePython.itkLabelMap3_HasLabel(self, label)

    def GetNthLabelObject(self, *args):
        r"""
        GetNthLabelObject(self, pos) -> itkStatisticsLabelObjectUL3

        Parameters
        ----------
        pos: unsigned long const &

        GetNthLabelObject(self, pos) -> itkStatisticsLabelObjectUL3

        Parameters
        ----------
        pos: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap3_GetNthLabelObject(self, *args)

    def GetPixel(self, idx):
        r"""
        GetPixel(self, idx) -> unsigned long const &

        Parameters
        ----------
        idx: itkIndex3 const &

        """
        return _ITKLabelMapBasePython.itkLabelMap3_GetPixel(self, idx)

    def SetPixel(self, idx, iLabel):
        r"""
        SetPixel(self, idx, iLabel)

        Parameters
        ----------
        idx: itkIndex3 const &
        iLabel: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap3_SetPixel(self, idx, iLabel)

    def AddPixel(self, idx, label):
        r"""
        AddPixel(self, idx, label)

        Parameters
        ----------
        idx: itkIndex3 const &
        label: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap3_AddPixel(self, idx, label)

    def RemovePixel(self, idx, label):
        r"""
        RemovePixel(self, idx, label)

        Parameters
        ----------
        idx: itkIndex3 const &
        label: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap3_RemovePixel(self, idx, label)

    def SetLine(self, idx, length, label):
        r"""
        SetLine(self, idx, length, label)

        Parameters
        ----------
        idx: itkIndex3 const &
        length: unsigned long const &
        label: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap3_SetLine(self, idx, length, label)

    def GetLabelObject(self, *args):
        r"""
        GetLabelObject(self, label) -> itkStatisticsLabelObjectUL3

        Parameters
        ----------
        label: unsigned long const &

        GetLabelObject(self, label) -> itkStatisticsLabelObjectUL3

        Parameters
        ----------
        label: unsigned long const &

        GetLabelObject(self, idx) -> itkStatisticsLabelObjectUL3

        Parameters
        ----------
        idx: itkIndex3 const &

        """
        return _ITKLabelMapBasePython.itkLabelMap3_GetLabelObject(self, *args)

    def AddLabelObject(self, labelObject):
        r"""
        AddLabelObject(self, labelObject)

        Parameters
        ----------
        labelObject: itkStatisticsLabelObjectUL3 *

        """
        return _ITKLabelMapBasePython.itkLabelMap3_AddLabelObject(self, labelObject)

    def PushLabelObject(self, labelObject):
        r"""
        PushLabelObject(self, labelObject)

        Parameters
        ----------
        labelObject: itkStatisticsLabelObjectUL3 *

        """
        return _ITKLabelMapBasePython.itkLabelMap3_PushLabelObject(self, labelObject)

    def RemoveLabelObject(self, labelObject):
        r"""
        RemoveLabelObject(self, labelObject)

        Parameters
        ----------
        labelObject: itkStatisticsLabelObjectUL3 *

        """
        return _ITKLabelMapBasePython.itkLabelMap3_RemoveLabelObject(self, labelObject)

    def RemoveLabel(self, label):
        r"""
        RemoveLabel(self, label)

        Parameters
        ----------
        label: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap3_RemoveLabel(self, label)

    def ClearLabels(self):
        r"""ClearLabels(self)"""
        return _ITKLabelMapBasePython.itkLabelMap3_ClearLabels(self)

    def GetNumberOfLabelObjects(self):
        r"""GetNumberOfLabelObjects(self) -> unsigned long"""
        return _ITKLabelMapBasePython.itkLabelMap3_GetNumberOfLabelObjects(self)

    def GetLabels(self):
        r"""GetLabels(self) -> vectorUL"""
        return _ITKLabelMapBasePython.itkLabelMap3_GetLabels(self)

    def GetLabelObjects(self):
        r"""GetLabelObjects(self) -> vectoritkStatisticsLabelObjectUL3"""
        return _ITKLabelMapBasePython.itkLabelMap3_GetLabelObjects(self)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned long"""
        return _ITKLabelMapBasePython.itkLabelMap3_GetBackgroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _ITKLabelMapBasePython.itkLabelMap3_SetBackgroundValue(self, _arg)

    def PrintLabelObjects(self, *args):
        r"""
        PrintLabelObjects(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        PrintLabelObjects(self)
        """
        return _ITKLabelMapBasePython.itkLabelMap3_PrintLabelObjects(self, *args)

    def Optimize(self):
        r"""Optimize(self)"""
        return _ITKLabelMapBasePython.itkLabelMap3_Optimize(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkLabelMap3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelMap3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkLabelMap3_cast(obj)

    def __len__(self):
        return self.GetNumberOfLabelObjects()
    def __getitem__(self, label):
        return self.GetLabelObject(label)
    def __iter__(self):
        labels = self.GetLabels()
        for label in labels:
            yield self.GetLabelObject(label)


    def New(*args, **kargs):
        """New() -> itkLabelMap3

        Create a new object of the class itkLabelMap3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMap3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMap3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMap3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMap3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkLabelMap3_swigregister(itkLabelMap3)

def itkLabelMap4_New():
    return itkLabelMap4.New()

class itkLabelMap4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkLabelMap4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelMap4_Pointer"""
        return _ITKLabelMapBasePython.itkLabelMap4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelMap4_Pointer"""
        return _ITKLabelMapBasePython.itkLabelMap4_Clone(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _ITKLabelMapBasePython.itkLabelMap4_Allocate(self, initialize)

    def Graft(self, imgData):
        r"""
        Graft(self, imgData)

        Parameters
        ----------
        imgData: itkLabelMap4 const *

        """
        return _ITKLabelMapBasePython.itkLabelMap4_Graft(self, imgData)

    def HasLabel(self, label):
        r"""
        HasLabel(self, label) -> bool

        Parameters
        ----------
        label: unsigned long const

        """
        return _ITKLabelMapBasePython.itkLabelMap4_HasLabel(self, label)

    def GetNthLabelObject(self, *args):
        r"""
        GetNthLabelObject(self, pos) -> itkStatisticsLabelObjectUL4

        Parameters
        ----------
        pos: unsigned long const &

        GetNthLabelObject(self, pos) -> itkStatisticsLabelObjectUL4

        Parameters
        ----------
        pos: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap4_GetNthLabelObject(self, *args)

    def GetPixel(self, idx):
        r"""
        GetPixel(self, idx) -> unsigned long const &

        Parameters
        ----------
        idx: itkIndex4 const &

        """
        return _ITKLabelMapBasePython.itkLabelMap4_GetPixel(self, idx)

    def SetPixel(self, idx, iLabel):
        r"""
        SetPixel(self, idx, iLabel)

        Parameters
        ----------
        idx: itkIndex4 const &
        iLabel: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap4_SetPixel(self, idx, iLabel)

    def AddPixel(self, idx, label):
        r"""
        AddPixel(self, idx, label)

        Parameters
        ----------
        idx: itkIndex4 const &
        label: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap4_AddPixel(self, idx, label)

    def RemovePixel(self, idx, label):
        r"""
        RemovePixel(self, idx, label)

        Parameters
        ----------
        idx: itkIndex4 const &
        label: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap4_RemovePixel(self, idx, label)

    def SetLine(self, idx, length, label):
        r"""
        SetLine(self, idx, length, label)

        Parameters
        ----------
        idx: itkIndex4 const &
        length: unsigned long const &
        label: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap4_SetLine(self, idx, length, label)

    def GetLabelObject(self, *args):
        r"""
        GetLabelObject(self, label) -> itkStatisticsLabelObjectUL4

        Parameters
        ----------
        label: unsigned long const &

        GetLabelObject(self, label) -> itkStatisticsLabelObjectUL4

        Parameters
        ----------
        label: unsigned long const &

        GetLabelObject(self, idx) -> itkStatisticsLabelObjectUL4

        Parameters
        ----------
        idx: itkIndex4 const &

        """
        return _ITKLabelMapBasePython.itkLabelMap4_GetLabelObject(self, *args)

    def AddLabelObject(self, labelObject):
        r"""
        AddLabelObject(self, labelObject)

        Parameters
        ----------
        labelObject: itkStatisticsLabelObjectUL4 *

        """
        return _ITKLabelMapBasePython.itkLabelMap4_AddLabelObject(self, labelObject)

    def PushLabelObject(self, labelObject):
        r"""
        PushLabelObject(self, labelObject)

        Parameters
        ----------
        labelObject: itkStatisticsLabelObjectUL4 *

        """
        return _ITKLabelMapBasePython.itkLabelMap4_PushLabelObject(self, labelObject)

    def RemoveLabelObject(self, labelObject):
        r"""
        RemoveLabelObject(self, labelObject)

        Parameters
        ----------
        labelObject: itkStatisticsLabelObjectUL4 *

        """
        return _ITKLabelMapBasePython.itkLabelMap4_RemoveLabelObject(self, labelObject)

    def RemoveLabel(self, label):
        r"""
        RemoveLabel(self, label)

        Parameters
        ----------
        label: unsigned long const &

        """
        return _ITKLabelMapBasePython.itkLabelMap4_RemoveLabel(self, label)

    def ClearLabels(self):
        r"""ClearLabels(self)"""
        return _ITKLabelMapBasePython.itkLabelMap4_ClearLabels(self)

    def GetNumberOfLabelObjects(self):
        r"""GetNumberOfLabelObjects(self) -> unsigned long"""
        return _ITKLabelMapBasePython.itkLabelMap4_GetNumberOfLabelObjects(self)

    def GetLabels(self):
        r"""GetLabels(self) -> vectorUL"""
        return _ITKLabelMapBasePython.itkLabelMap4_GetLabels(self)

    def GetLabelObjects(self):
        r"""GetLabelObjects(self) -> vectoritkStatisticsLabelObjectUL4"""
        return _ITKLabelMapBasePython.itkLabelMap4_GetLabelObjects(self)

    def GetBackgroundValue(self):
        r"""GetBackgroundValue(self) -> unsigned long"""
        return _ITKLabelMapBasePython.itkLabelMap4_GetBackgroundValue(self)

    def SetBackgroundValue(self, _arg):
        r"""
        SetBackgroundValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _ITKLabelMapBasePython.itkLabelMap4_SetBackgroundValue(self, _arg)

    def PrintLabelObjects(self, *args):
        r"""
        PrintLabelObjects(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        PrintLabelObjects(self)
        """
        return _ITKLabelMapBasePython.itkLabelMap4_PrintLabelObjects(self, *args)

    def Optimize(self):
        r"""Optimize(self)"""
        return _ITKLabelMapBasePython.itkLabelMap4_Optimize(self)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkLabelMap4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelMap4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKLabelMapBasePython.itkLabelMap4_cast(obj)

    def __len__(self):
        return self.GetNumberOfLabelObjects()
    def __getitem__(self, label):
        return self.GetLabelObject(label)
    def __iter__(self):
        labels = self.GetLabels()
        for label in labels:
            yield self.GetLabelObject(label)


    def New(*args, **kargs):
        """New() -> itkLabelMap4

        Create a new object of the class itkLabelMap4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMap4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMap4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMap4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMap4 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkLabelMap4_swigregister(itkLabelMap4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def image_to_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageToImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLabelMap.ImageToImageFilter
    image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def image_source(*args, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageSource"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageSource.New(*args, **kwargs)

    return instance.__internal_call__()

def image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLabelMap.ImageSource
    image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_source.__doc__ = filter_object.__doc__



