# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBilateralImageFilterPython
else:
    import _itkBilateralImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkBilateralImageFilterID2ID2_New():
    return itkBilateralImageFilterID2ID2.New()

class itkBilateralImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkBilateralImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterID2ID2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterID2ID2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterID2ID2

        Create a new object of the class itkBilateralImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterID2ID2 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_swigregister(itkBilateralImageFilterID2ID2)

def itkBilateralImageFilterID3ID3_New():
    return itkBilateralImageFilterID3ID3.New()

class itkBilateralImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkBilateralImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterID3ID3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterID3ID3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterID3ID3

        Create a new object of the class itkBilateralImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterID3ID3 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_swigregister(itkBilateralImageFilterID3ID3)

def itkBilateralImageFilterID4ID4_New():
    return itkBilateralImageFilterID4ID4.New()

class itkBilateralImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkBilateralImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterID4ID4_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterID4ID4_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD4"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterID4ID4

        Create a new object of the class itkBilateralImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterID4ID4 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_swigregister(itkBilateralImageFilterID4ID4)

def itkBilateralImageFilterIF2IF2_New():
    return itkBilateralImageFilterIF2IF2.New()

class itkBilateralImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkBilateralImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterIF2IF2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterIF2IF2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIF2IF2

        Create a new object of the class itkBilateralImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIF2IF2 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_swigregister(itkBilateralImageFilterIF2IF2)

def itkBilateralImageFilterIF3IF3_New():
    return itkBilateralImageFilterIF3IF3.New()

class itkBilateralImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkBilateralImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterIF3IF3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterIF3IF3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIF3IF3

        Create a new object of the class itkBilateralImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIF3IF3 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_swigregister(itkBilateralImageFilterIF3IF3)

def itkBilateralImageFilterIF4IF4_New():
    return itkBilateralImageFilterIF4IF4.New()

class itkBilateralImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkBilateralImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterIF4IF4_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterIF4IF4_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD4"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIF4IF4

        Create a new object of the class itkBilateralImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIF4IF4 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_swigregister(itkBilateralImageFilterIF4IF4)

def itkBilateralImageFilterISS2ISS2_New():
    return itkBilateralImageFilterISS2ISS2.New()

class itkBilateralImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkBilateralImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterISS2ISS2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterISS2ISS2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterISS2ISS2

        Create a new object of the class itkBilateralImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterISS2ISS2 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_swigregister(itkBilateralImageFilterISS2ISS2)

def itkBilateralImageFilterISS3ISS3_New():
    return itkBilateralImageFilterISS3ISS3.New()

class itkBilateralImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkBilateralImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterISS3ISS3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterISS3ISS3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterISS3ISS3

        Create a new object of the class itkBilateralImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterISS3ISS3 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_swigregister(itkBilateralImageFilterISS3ISS3)

def itkBilateralImageFilterISS4ISS4_New():
    return itkBilateralImageFilterISS4ISS4.New()

class itkBilateralImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkBilateralImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterISS4ISS4_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterISS4ISS4_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD4"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterISS4ISS4

        Create a new object of the class itkBilateralImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterISS4ISS4 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_swigregister(itkBilateralImageFilterISS4ISS4)

def itkBilateralImageFilterIUC2IUC2_New():
    return itkBilateralImageFilterIUC2IUC2.New()

class itkBilateralImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkBilateralImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterIUC2IUC2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterIUC2IUC2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUC2IUC2

        Create a new object of the class itkBilateralImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIUC2IUC2 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_swigregister(itkBilateralImageFilterIUC2IUC2)

def itkBilateralImageFilterIUC3IUC3_New():
    return itkBilateralImageFilterIUC3IUC3.New()

class itkBilateralImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkBilateralImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterIUC3IUC3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterIUC3IUC3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUC3IUC3

        Create a new object of the class itkBilateralImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIUC3IUC3 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_swigregister(itkBilateralImageFilterIUC3IUC3)

def itkBilateralImageFilterIUC4IUC4_New():
    return itkBilateralImageFilterIUC4IUC4.New()

class itkBilateralImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkBilateralImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterIUC4IUC4_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterIUC4IUC4_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD4"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUC4IUC4

        Create a new object of the class itkBilateralImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIUC4IUC4 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_swigregister(itkBilateralImageFilterIUC4IUC4)

def itkBilateralImageFilterIUS2IUS2_New():
    return itkBilateralImageFilterIUS2IUS2.New()

class itkBilateralImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkBilateralImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterIUS2IUS2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterIUS2IUS2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUS2IUS2

        Create a new object of the class itkBilateralImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIUS2IUS2 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_swigregister(itkBilateralImageFilterIUS2IUS2)

def itkBilateralImageFilterIUS3IUS3_New():
    return itkBilateralImageFilterIUS3IUS3.New()

class itkBilateralImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkBilateralImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterIUS3IUS3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterIUS3IUS3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUS3IUS3

        Create a new object of the class itkBilateralImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIUS3IUS3 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_swigregister(itkBilateralImageFilterIUS3IUS3)

def itkBilateralImageFilterIUS4IUS4_New():
    return itkBilateralImageFilterIUS4IUS4.New()

class itkBilateralImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkBilateralImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBilateralImageFilterIUS4IUS4_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBilateralImageFilterIUS4IUS4_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_Clone(self)

    def GetDomainSigma(self):
        r"""GetDomainSigma(self) -> itkFixedArrayD4"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetDomainSigma(self)

    def SetDomainMu(self, _arg):
        r"""
        SetDomainMu(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetDomainMu(self, _arg)

    def GetDomainMu(self):
        r"""GetDomainMu(self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetDomainMu(self)

    def SetRangeSigma(self, _arg):
        r"""
        SetRangeSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetRangeSigma(self, _arg)

    def GetRangeSigma(self):
        r"""GetRangeSigma(self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetRangeSigma(self)

    def GetFilterDimensionality(self):
        r"""GetFilterDimensionality(self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetFilterDimensionality(self)

    def SetFilterDimensionality(self, _arg):
        r"""
        SetFilterDimensionality(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetFilterDimensionality(self, _arg)

    def SetDomainSigma(self, *args):
        r"""
        SetDomainSigma(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        SetDomainSigma(self, v)

        Parameters
        ----------
        v: double const

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetDomainSigma(self, *args)

    def AutomaticKernelSizeOn(self):
        r"""AutomaticKernelSizeOn(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_AutomaticKernelSizeOn(self)

    def AutomaticKernelSizeOff(self):
        r"""AutomaticKernelSizeOff(self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_AutomaticKernelSizeOff(self)

    def GetAutomaticKernelSize(self):
        r"""GetAutomaticKernelSize(self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetAutomaticKernelSize(self)

    def SetAutomaticKernelSize(self, _arg):
        r"""
        SetAutomaticKernelSize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetAutomaticKernelSize(self, _arg)

    def SetRadius(self, *args):
        r"""
        SetRadius(self, arg0)

        Parameters
        ----------
        arg0: unsigned long const

        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetRadius(self, *args)

    def GetRadius(self):
        r"""GetRadius(self) -> itkSize4"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetRadius(self)

    def SetNumberOfRangeGaussianSamples(self, _arg):
        r"""
        SetNumberOfRangeGaussianSamples(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetNumberOfRangeGaussianSamples(self, _arg)

    def GetNumberOfRangeGaussianSamples(self):
        r"""GetNumberOfRangeGaussianSamples(self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetNumberOfRangeGaussianSamples(self)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBilateralImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUS4IUS4

        Create a new object of the class itkBilateralImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIUS4IUS4 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_swigregister(itkBilateralImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def bilateral_image_filter(*args: itkt.ImageLike,  domain_sigma: Union[Sequence[float], float]=..., domain_mu: float=..., range_sigma: float=..., filter_dimensionality: int=..., automatic_kernel_size: bool=..., radius: Union[Sequence[int], int]=..., number_of_range_gaussian_samples: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for BilateralImageFilter"""
    import itk

    kwarg_typehints = { 'domain_sigma':domain_sigma,'domain_mu':domain_mu,'range_sigma':range_sigma,'filter_dimensionality':filter_dimensionality,'automatic_kernel_size':automatic_kernel_size,'radius':radius,'number_of_range_gaussian_samples':number_of_range_gaussian_samples }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.BilateralImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def bilateral_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageFeature.BilateralImageFilter
    bilateral_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    bilateral_image_filter.__doc__ = filter_object.__doc__



