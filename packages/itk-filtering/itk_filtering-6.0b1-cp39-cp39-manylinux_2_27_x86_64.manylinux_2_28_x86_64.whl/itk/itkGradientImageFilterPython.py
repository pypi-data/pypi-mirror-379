# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageGradientPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGradientImageFilterPython
else:
    import _itkGradientImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageBoundaryConditionPython

def itkGradientImageFilterID2FF_New():
    return itkGradientImageFilterID2FF.New()

class itkGradientImageFilterID2FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22):
    r"""Proxy of C++ itkGradientImageFilterID2FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterID2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterID2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionID2 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterID2FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterID2FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterID2FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterID2FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterID2FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterID2FF

        Create a new object of the class itkGradientImageFilterID2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterID2FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterID2FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterID2FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterID2FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterID2FF_swigregister(itkGradientImageFilterID2FF)

def itkGradientImageFilterID3FF_New():
    return itkGradientImageFilterID3FF.New()

class itkGradientImageFilterID3FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33):
    r"""Proxy of C++ itkGradientImageFilterID3FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterID3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterID3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionID3 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterID3FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterID3FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterID3FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterID3FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterID3FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterID3FF

        Create a new object of the class itkGradientImageFilterID3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterID3FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterID3FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterID3FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterID3FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterID3FF_swigregister(itkGradientImageFilterID3FF)

def itkGradientImageFilterID4FF_New():
    return itkGradientImageFilterID4FF.New()

class itkGradientImageFilterID4FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF44):
    r"""Proxy of C++ itkGradientImageFilterID4FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterID4FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterID4FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionID4 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterID4FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterID4FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterID4FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterID4FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterID4FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterID4FF

        Create a new object of the class itkGradientImageFilterID4FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterID4FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterID4FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterID4FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterID4FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterID4FF_swigregister(itkGradientImageFilterID4FF)

def itkGradientImageFilterIF2FF_New():
    return itkGradientImageFilterIF2FF.New()

class itkGradientImageFilterIF2FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22):
    r"""Proxy of C++ itkGradientImageFilterIF2FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterIF2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterIF2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionIF2 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIF2FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterIF2FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIF2FF

        Create a new object of the class itkGradientImageFilterIF2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIF2FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIF2FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIF2FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIF2FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_swigregister(itkGradientImageFilterIF2FF)

def itkGradientImageFilterIF3FF_New():
    return itkGradientImageFilterIF3FF.New()

class itkGradientImageFilterIF3FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33):
    r"""Proxy of C++ itkGradientImageFilterIF3FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterIF3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterIF3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionIF3 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIF3FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterIF3FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIF3FF

        Create a new object of the class itkGradientImageFilterIF3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIF3FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIF3FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIF3FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIF3FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_swigregister(itkGradientImageFilterIF3FF)

def itkGradientImageFilterIF4FF_New():
    return itkGradientImageFilterIF4FF.New()

class itkGradientImageFilterIF4FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF44):
    r"""Proxy of C++ itkGradientImageFilterIF4FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterIF4FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterIF4FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionIF4 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIF4FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterIF4FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIF4FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIF4FF

        Create a new object of the class itkGradientImageFilterIF4FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIF4FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIF4FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIF4FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIF4FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIF4FF_swigregister(itkGradientImageFilterIF4FF)

def itkGradientImageFilterISS2FF_New():
    return itkGradientImageFilterISS2FF.New()

class itkGradientImageFilterISS2FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22):
    r"""Proxy of C++ itkGradientImageFilterISS2FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterISS2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterISS2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionISS2 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterISS2FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterISS2FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterISS2FF

        Create a new object of the class itkGradientImageFilterISS2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterISS2FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterISS2FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterISS2FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterISS2FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_swigregister(itkGradientImageFilterISS2FF)

def itkGradientImageFilterISS3FF_New():
    return itkGradientImageFilterISS3FF.New()

class itkGradientImageFilterISS3FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33):
    r"""Proxy of C++ itkGradientImageFilterISS3FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterISS3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterISS3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionISS3 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterISS3FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterISS3FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterISS3FF

        Create a new object of the class itkGradientImageFilterISS3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterISS3FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterISS3FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterISS3FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterISS3FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_swigregister(itkGradientImageFilterISS3FF)

def itkGradientImageFilterISS4FF_New():
    return itkGradientImageFilterISS4FF.New()

class itkGradientImageFilterISS4FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF44):
    r"""Proxy of C++ itkGradientImageFilterISS4FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterISS4FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterISS4FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionISS4 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterISS4FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterISS4FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterISS4FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterISS4FF

        Create a new object of the class itkGradientImageFilterISS4FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterISS4FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterISS4FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterISS4FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterISS4FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterISS4FF_swigregister(itkGradientImageFilterISS4FF)

def itkGradientImageFilterIUC2FF_New():
    return itkGradientImageFilterIUC2FF.New()

class itkGradientImageFilterIUC2FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22):
    r"""Proxy of C++ itkGradientImageFilterIUC2FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterIUC2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterIUC2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionIUC2 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUC2FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterIUC2FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUC2FF

        Create a new object of the class itkGradientImageFilterIUC2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUC2FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUC2FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIUC2FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIUC2FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_swigregister(itkGradientImageFilterIUC2FF)

def itkGradientImageFilterIUC3FF_New():
    return itkGradientImageFilterIUC3FF.New()

class itkGradientImageFilterIUC3FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33):
    r"""Proxy of C++ itkGradientImageFilterIUC3FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterIUC3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterIUC3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionIUC3 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUC3FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterIUC3FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUC3FF

        Create a new object of the class itkGradientImageFilterIUC3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUC3FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUC3FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIUC3FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIUC3FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_swigregister(itkGradientImageFilterIUC3FF)

def itkGradientImageFilterIUC4FF_New():
    return itkGradientImageFilterIUC4FF.New()

class itkGradientImageFilterIUC4FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF44):
    r"""Proxy of C++ itkGradientImageFilterIUC4FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterIUC4FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterIUC4FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionIUC4 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUC4FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterIUC4FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUC4FF

        Create a new object of the class itkGradientImageFilterIUC4FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUC4FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUC4FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIUC4FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIUC4FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIUC4FF_swigregister(itkGradientImageFilterIUC4FF)

def itkGradientImageFilterIUS2FF_New():
    return itkGradientImageFilterIUS2FF.New()

class itkGradientImageFilterIUS2FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22):
    r"""Proxy of C++ itkGradientImageFilterIUS2FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterIUS2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterIUS2FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionIUS2 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUS2FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterIUS2FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUS2FF

        Create a new object of the class itkGradientImageFilterIUS2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUS2FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUS2FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIUS2FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIUS2FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_swigregister(itkGradientImageFilterIUS2FF)

def itkGradientImageFilterIUS3FF_New():
    return itkGradientImageFilterIUS3FF.New()

class itkGradientImageFilterIUS3FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33):
    r"""Proxy of C++ itkGradientImageFilterIUS3FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterIUS3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterIUS3FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionIUS3 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUS3FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterIUS3FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUS3FF

        Create a new object of the class itkGradientImageFilterIUS3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUS3FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUS3FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIUS3FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIUS3FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_swigregister(itkGradientImageFilterIUS3FF)

def itkGradientImageFilterIUS4FF_New():
    return itkGradientImageFilterIUS4FF.New()

class itkGradientImageFilterIUS4FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF44):
    r"""Proxy of C++ itkGradientImageFilterIUS4FF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGradientImageFilterIUS4FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGradientImageFilterIUS4FF_Pointer"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_Clone(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_GenerateInputRequestedRegion(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_UseImageSpacingOff(self)

    def SetUseImageSpacingOn(self):
        r"""SetUseImageSpacingOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_SetUseImageSpacingOn(self)

    def SetUseImageSpacingOff(self):
        r"""SetUseImageSpacingOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_SetUseImageSpacingOff(self)

    def OverrideBoundaryCondition(self, boundaryCondition):
        r"""
        OverrideBoundaryCondition(self, boundaryCondition)

        Parameters
        ----------
        boundaryCondition: itkImageBoundaryConditionIUS4 *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_OverrideBoundaryCondition(self, boundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_OutputHasNumericTraitsCheck
    

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUS4FF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientImageFilterIUS4FF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUS4FF

        Create a new object of the class itkGradientImageFilterIUS4FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUS4FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUS4FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIUS4FF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIUS4FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIUS4FF_swigregister(itkGradientImageFilterIUS4FF)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def gradient_image_filter(*args: itkt.ImageLike,  use_image_spacing: bool=..., use_image_direction: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for GradientImageFilter"""
    import itk

    kwarg_typehints = { 'use_image_spacing':use_image_spacing,'use_image_direction':use_image_direction }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.GradientImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def gradient_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageGradient.GradientImageFilter
    gradient_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    gradient_image_filter.__doc__ = filter_object.__doc__



