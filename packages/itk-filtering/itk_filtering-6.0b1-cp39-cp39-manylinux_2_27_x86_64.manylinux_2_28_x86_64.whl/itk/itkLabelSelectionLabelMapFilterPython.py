# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLabelMapPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLabelSelectionLabelMapFilterPython
else:
    import _itkLabelSelectionLabelMapFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkInPlaceLabelMapFilterPython
import itk.itkLabelMapFilterPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKLabelMapBasePython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkStatisticsLabelObjectPython
import itk.itkHistogramPython
import itk.itkArrayPython
import itk.itkSamplePython
import itk.itkShapeLabelObjectPython
import itk.itkLabelObjectPython
import itk.itkLabelObjectLinePython
import itk.itkAffineTransformPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkMatrixOffsetTransformBasePython

def itkLabelSelectionLabelMapFilterLM2_Superclass_New():
    return itkLabelSelectionLabelMapFilterLM2_Superclass.New()

class itkLabelSelectionLabelMapFilterLM2_Superclass(itk.itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM2):
    r"""Proxy of C++ itkLabelSelectionLabelMapFilterLM2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelSelectionLabelMapFilterLM2_Superclass_Pointer"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelSelectionLabelMapFilterLM2_Superclass_Pointer"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_Clone(self)

    def GetAttributeSet(self):
        r"""GetAttributeSet(self) -> setUL"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_GetAttributeSet(self)

    def SetAttributeSet(self, set):
        r"""
        SetAttributeSet(self, set)

        Parameters
        ----------
        set: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_SetAttributeSet(self, set)

    def GetExclude(self):
        r"""GetExclude(self) -> bool"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_GetExclude(self)

    def SetExclude(self, _arg):
        r"""
        SetExclude(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_SetExclude(self, _arg)

    def ExcludeOn(self):
        r"""ExcludeOn(self)"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_ExcludeOn(self)

    def ExcludeOff(self):
        r"""ExcludeOff(self)"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_ExcludeOff(self)

    def SetAttribute(self, attr):
        r"""
        SetAttribute(self, attr)

        Parameters
        ----------
        attr: unsigned long const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_SetAttribute(self, attr)

    def ClearAttributeSet(self):
        r"""ClearAttributeSet(self)"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_ClearAttributeSet(self)

    def AddAttribute(self, attr):
        r"""
        AddAttribute(self, attr)

        Parameters
        ----------
        attr: unsigned long const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_AddAttribute(self, attr)
    __swig_destroy__ = _itkLabelSelectionLabelMapFilterPython.delete_itkLabelSelectionLabelMapFilterLM2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelSelectionLabelMapFilterLM2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelSelectionLabelMapFilterLM2_Superclass

        Create a new object of the class itkLabelSelectionLabelMapFilterLM2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelSelectionLabelMapFilterLM2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelSelectionLabelMapFilterLM2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelSelectionLabelMapFilterLM2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelSelectionLabelMapFilterLM2_Superclass in _itkLabelSelectionLabelMapFilterPython:
_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_swigregister(itkLabelSelectionLabelMapFilterLM2_Superclass)

def itkLabelSelectionLabelMapFilterLM3_Superclass_New():
    return itkLabelSelectionLabelMapFilterLM3_Superclass.New()

class itkLabelSelectionLabelMapFilterLM3_Superclass(itk.itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM3):
    r"""Proxy of C++ itkLabelSelectionLabelMapFilterLM3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelSelectionLabelMapFilterLM3_Superclass_Pointer"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelSelectionLabelMapFilterLM3_Superclass_Pointer"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_Clone(self)

    def GetAttributeSet(self):
        r"""GetAttributeSet(self) -> setUL"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_GetAttributeSet(self)

    def SetAttributeSet(self, set):
        r"""
        SetAttributeSet(self, set)

        Parameters
        ----------
        set: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_SetAttributeSet(self, set)

    def GetExclude(self):
        r"""GetExclude(self) -> bool"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_GetExclude(self)

    def SetExclude(self, _arg):
        r"""
        SetExclude(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_SetExclude(self, _arg)

    def ExcludeOn(self):
        r"""ExcludeOn(self)"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_ExcludeOn(self)

    def ExcludeOff(self):
        r"""ExcludeOff(self)"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_ExcludeOff(self)

    def SetAttribute(self, attr):
        r"""
        SetAttribute(self, attr)

        Parameters
        ----------
        attr: unsigned long const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_SetAttribute(self, attr)

    def ClearAttributeSet(self):
        r"""ClearAttributeSet(self)"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_ClearAttributeSet(self)

    def AddAttribute(self, attr):
        r"""
        AddAttribute(self, attr)

        Parameters
        ----------
        attr: unsigned long const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_AddAttribute(self, attr)
    __swig_destroy__ = _itkLabelSelectionLabelMapFilterPython.delete_itkLabelSelectionLabelMapFilterLM3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelSelectionLabelMapFilterLM3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelSelectionLabelMapFilterLM3_Superclass

        Create a new object of the class itkLabelSelectionLabelMapFilterLM3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelSelectionLabelMapFilterLM3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelSelectionLabelMapFilterLM3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelSelectionLabelMapFilterLM3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelSelectionLabelMapFilterLM3_Superclass in _itkLabelSelectionLabelMapFilterPython:
_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_swigregister(itkLabelSelectionLabelMapFilterLM3_Superclass)

def itkLabelSelectionLabelMapFilterLM4_Superclass_New():
    return itkLabelSelectionLabelMapFilterLM4_Superclass.New()

class itkLabelSelectionLabelMapFilterLM4_Superclass(itk.itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM4):
    r"""Proxy of C++ itkLabelSelectionLabelMapFilterLM4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelSelectionLabelMapFilterLM4_Superclass_Pointer"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelSelectionLabelMapFilterLM4_Superclass_Pointer"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Superclass_Clone(self)

    def GetAttributeSet(self):
        r"""GetAttributeSet(self) -> setUL"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Superclass_GetAttributeSet(self)

    def SetAttributeSet(self, set):
        r"""
        SetAttributeSet(self, set)

        Parameters
        ----------
        set: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Superclass_SetAttributeSet(self, set)

    def GetExclude(self):
        r"""GetExclude(self) -> bool"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Superclass_GetExclude(self)

    def SetExclude(self, _arg):
        r"""
        SetExclude(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Superclass_SetExclude(self, _arg)

    def ExcludeOn(self):
        r"""ExcludeOn(self)"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Superclass_ExcludeOn(self)

    def ExcludeOff(self):
        r"""ExcludeOff(self)"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Superclass_ExcludeOff(self)

    def SetAttribute(self, attr):
        r"""
        SetAttribute(self, attr)

        Parameters
        ----------
        attr: unsigned long const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Superclass_SetAttribute(self, attr)

    def ClearAttributeSet(self):
        r"""ClearAttributeSet(self)"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Superclass_ClearAttributeSet(self)

    def AddAttribute(self, attr):
        r"""
        AddAttribute(self, attr)

        Parameters
        ----------
        attr: unsigned long const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Superclass_AddAttribute(self, attr)
    __swig_destroy__ = _itkLabelSelectionLabelMapFilterPython.delete_itkLabelSelectionLabelMapFilterLM4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelSelectionLabelMapFilterLM4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelSelectionLabelMapFilterLM4_Superclass

        Create a new object of the class itkLabelSelectionLabelMapFilterLM4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelSelectionLabelMapFilterLM4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelSelectionLabelMapFilterLM4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelSelectionLabelMapFilterLM4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelSelectionLabelMapFilterLM4_Superclass in _itkLabelSelectionLabelMapFilterPython:
_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Superclass_swigregister(itkLabelSelectionLabelMapFilterLM4_Superclass)

def itkLabelSelectionLabelMapFilterLM2_New():
    return itkLabelSelectionLabelMapFilterLM2.New()

class itkLabelSelectionLabelMapFilterLM2(itkLabelSelectionLabelMapFilterLM2_Superclass):
    r"""Proxy of C++ itkLabelSelectionLabelMapFilterLM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelSelectionLabelMapFilterLM2_Pointer"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelSelectionLabelMapFilterLM2_Pointer"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Clone(self)

    def GetLabelSet(self):
        r"""GetLabelSet(self) -> setUL"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_GetLabelSet(self)

    def SetLabelSet(self, set):
        r"""
        SetLabelSet(self, set)

        Parameters
        ----------
        set: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_SetLabelSet(self, set)

    def SetLabel(self, attr):
        r"""
        SetLabel(self, attr)

        Parameters
        ----------
        attr: unsigned long const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_SetLabel(self, attr)

    def ClearLabelSet(self):
        r"""ClearLabelSet(self)"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_ClearLabelSet(self)

    def AddLabel(self, attr):
        r"""
        AddLabel(self, attr)

        Parameters
        ----------
        attr: unsigned long const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_AddLabel(self, attr)
    __swig_destroy__ = _itkLabelSelectionLabelMapFilterPython.delete_itkLabelSelectionLabelMapFilterLM2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelSelectionLabelMapFilterLM2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelSelectionLabelMapFilterLM2

        Create a new object of the class itkLabelSelectionLabelMapFilterLM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelSelectionLabelMapFilterLM2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelSelectionLabelMapFilterLM2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelSelectionLabelMapFilterLM2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelSelectionLabelMapFilterLM2 in _itkLabelSelectionLabelMapFilterPython:
_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_swigregister(itkLabelSelectionLabelMapFilterLM2)

def itkLabelSelectionLabelMapFilterLM3_New():
    return itkLabelSelectionLabelMapFilterLM3.New()

class itkLabelSelectionLabelMapFilterLM3(itkLabelSelectionLabelMapFilterLM3_Superclass):
    r"""Proxy of C++ itkLabelSelectionLabelMapFilterLM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelSelectionLabelMapFilterLM3_Pointer"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelSelectionLabelMapFilterLM3_Pointer"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Clone(self)

    def GetLabelSet(self):
        r"""GetLabelSet(self) -> setUL"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_GetLabelSet(self)

    def SetLabelSet(self, set):
        r"""
        SetLabelSet(self, set)

        Parameters
        ----------
        set: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_SetLabelSet(self, set)

    def SetLabel(self, attr):
        r"""
        SetLabel(self, attr)

        Parameters
        ----------
        attr: unsigned long const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_SetLabel(self, attr)

    def ClearLabelSet(self):
        r"""ClearLabelSet(self)"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_ClearLabelSet(self)

    def AddLabel(self, attr):
        r"""
        AddLabel(self, attr)

        Parameters
        ----------
        attr: unsigned long const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_AddLabel(self, attr)
    __swig_destroy__ = _itkLabelSelectionLabelMapFilterPython.delete_itkLabelSelectionLabelMapFilterLM3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelSelectionLabelMapFilterLM3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelSelectionLabelMapFilterLM3

        Create a new object of the class itkLabelSelectionLabelMapFilterLM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelSelectionLabelMapFilterLM3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelSelectionLabelMapFilterLM3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelSelectionLabelMapFilterLM3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelSelectionLabelMapFilterLM3 in _itkLabelSelectionLabelMapFilterPython:
_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_swigregister(itkLabelSelectionLabelMapFilterLM3)

def itkLabelSelectionLabelMapFilterLM4_New():
    return itkLabelSelectionLabelMapFilterLM4.New()

class itkLabelSelectionLabelMapFilterLM4(itkLabelSelectionLabelMapFilterLM4_Superclass):
    r"""Proxy of C++ itkLabelSelectionLabelMapFilterLM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelSelectionLabelMapFilterLM4_Pointer"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelSelectionLabelMapFilterLM4_Pointer"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_Clone(self)

    def GetLabelSet(self):
        r"""GetLabelSet(self) -> setUL"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_GetLabelSet(self)

    def SetLabelSet(self, set):
        r"""
        SetLabelSet(self, set)

        Parameters
        ----------
        set: std::set< unsigned long,std::less< unsigned long >,std::allocator< unsigned long > > const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_SetLabelSet(self, set)

    def SetLabel(self, attr):
        r"""
        SetLabel(self, attr)

        Parameters
        ----------
        attr: unsigned long const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_SetLabel(self, attr)

    def ClearLabelSet(self):
        r"""ClearLabelSet(self)"""
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_ClearLabelSet(self)

    def AddLabel(self, attr):
        r"""
        AddLabel(self, attr)

        Parameters
        ----------
        attr: unsigned long const &

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_AddLabel(self, attr)
    __swig_destroy__ = _itkLabelSelectionLabelMapFilterPython.delete_itkLabelSelectionLabelMapFilterLM4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelSelectionLabelMapFilterLM4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelSelectionLabelMapFilterLM4

        Create a new object of the class itkLabelSelectionLabelMapFilterLM4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelSelectionLabelMapFilterLM4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelSelectionLabelMapFilterLM4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelSelectionLabelMapFilterLM4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelSelectionLabelMapFilterLM4 in _itkLabelSelectionLabelMapFilterPython:
_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM4_swigregister(itkLabelSelectionLabelMapFilterLM4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def attribute_selection_label_map_filter(*args: itkt.ImageLike,  attribute_set=..., exclude: bool=..., attribute: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for AttributeSelectionLabelMapFilter"""
    import itk

    kwarg_typehints = { 'attribute_set':attribute_set,'exclude':exclude,'attribute':attribute }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.AttributeSelectionLabelMapFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def attribute_selection_label_map_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLabelMap.AttributeSelectionLabelMapFilter
    attribute_selection_label_map_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    attribute_selection_label_map_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def label_selection_label_map_filter(*args: itkt.ImageLike,  label_set=..., label: int=..., attribute_set=..., exclude: bool=..., attribute: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for LabelSelectionLabelMapFilter"""
    import itk

    kwarg_typehints = { 'label_set':label_set,'label':label,'attribute_set':attribute_set,'exclude':exclude,'attribute':attribute }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.LabelSelectionLabelMapFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def label_selection_label_map_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLabelMap.LabelSelectionLabelMapFilter
    label_selection_label_map_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    label_selection_label_map_filter.__doc__ = filter_object.__doc__



