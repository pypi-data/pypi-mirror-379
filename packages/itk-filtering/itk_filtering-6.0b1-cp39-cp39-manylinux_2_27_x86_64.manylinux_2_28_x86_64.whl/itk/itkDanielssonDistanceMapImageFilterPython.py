# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDistanceMapPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDanielssonDistanceMapImageFilterPython
else:
    import _itkDanielssonDistanceMapImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkOffsetPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkDanielssonDistanceMapImageFilterID2ID2_New():
    return itkDanielssonDistanceMapImageFilterID2ID2.New()

class itkDanielssonDistanceMapImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterID2ID2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterID2ID2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageD2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageD2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO22"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterID2ID2

        Create a new object of the class itkDanielssonDistanceMapImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterID2ID2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_swigregister(itkDanielssonDistanceMapImageFilterID2ID2)

def itkDanielssonDistanceMapImageFilterID3ID3_New():
    return itkDanielssonDistanceMapImageFilterID3ID3.New()

class itkDanielssonDistanceMapImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterID3ID3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterID3ID3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageD3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageD3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO33"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterID3ID3

        Create a new object of the class itkDanielssonDistanceMapImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterID3ID3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_swigregister(itkDanielssonDistanceMapImageFilterID3ID3)

def itkDanielssonDistanceMapImageFilterID4ID4_New():
    return itkDanielssonDistanceMapImageFilterID4ID4.New()

class itkDanielssonDistanceMapImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterID4ID4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterID4ID4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageD4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageD4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO44"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterID4ID4

        Create a new object of the class itkDanielssonDistanceMapImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterID4ID4 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID4ID4_swigregister(itkDanielssonDistanceMapImageFilterID4ID4)

def itkDanielssonDistanceMapImageFilterIF2IF2_New():
    return itkDanielssonDistanceMapImageFilterIF2IF2.New()

class itkDanielssonDistanceMapImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIF2IF2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIF2IF2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageF2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageF2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO22"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIF2IF2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIF2IF2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_swigregister(itkDanielssonDistanceMapImageFilterIF2IF2)

def itkDanielssonDistanceMapImageFilterIF3IF3_New():
    return itkDanielssonDistanceMapImageFilterIF3IF3.New()

class itkDanielssonDistanceMapImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIF3IF3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIF3IF3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageF3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageF3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO33"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIF3IF3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIF3IF3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_swigregister(itkDanielssonDistanceMapImageFilterIF3IF3)

def itkDanielssonDistanceMapImageFilterIF4IF4_New():
    return itkDanielssonDistanceMapImageFilterIF4IF4.New()

class itkDanielssonDistanceMapImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIF4IF4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIF4IF4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageF4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageF4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO44"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIF4IF4

        Create a new object of the class itkDanielssonDistanceMapImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIF4IF4 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF4IF4_swigregister(itkDanielssonDistanceMapImageFilterIF4IF4)

def itkDanielssonDistanceMapImageFilterISS2ISS2_New():
    return itkDanielssonDistanceMapImageFilterISS2ISS2.New()

class itkDanielssonDistanceMapImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterISS2ISS2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterISS2ISS2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageSS2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageSS2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO22"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterISS2ISS2

        Create a new object of the class itkDanielssonDistanceMapImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterISS2ISS2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_swigregister(itkDanielssonDistanceMapImageFilterISS2ISS2)

def itkDanielssonDistanceMapImageFilterISS3ISS3_New():
    return itkDanielssonDistanceMapImageFilterISS3ISS3.New()

class itkDanielssonDistanceMapImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterISS3ISS3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterISS3ISS3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageSS3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageSS3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO33"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterISS3ISS3

        Create a new object of the class itkDanielssonDistanceMapImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterISS3ISS3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_swigregister(itkDanielssonDistanceMapImageFilterISS3ISS3)

def itkDanielssonDistanceMapImageFilterISS4ISS4_New():
    return itkDanielssonDistanceMapImageFilterISS4ISS4.New()

class itkDanielssonDistanceMapImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterISS4ISS4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterISS4ISS4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageSS4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageSS4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO44"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterISS4ISS4

        Create a new object of the class itkDanielssonDistanceMapImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterISS4ISS4 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS4ISS4_swigregister(itkDanielssonDistanceMapImageFilterISS4ISS4)

def itkDanielssonDistanceMapImageFilterIUC2ID2_New():
    return itkDanielssonDistanceMapImageFilterIUC2ID2.New()

class itkDanielssonDistanceMapImageFilterIUC2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUC2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUC2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageD2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO22"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUC2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC2ID2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC2ID2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_swigregister(itkDanielssonDistanceMapImageFilterIUC2ID2)

def itkDanielssonDistanceMapImageFilterIUC2IF2_New():
    return itkDanielssonDistanceMapImageFilterIUC2IF2.New()

class itkDanielssonDistanceMapImageFilterIUC2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUC2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUC2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageF2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO22"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUC2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC2IF2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC2IF2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_swigregister(itkDanielssonDistanceMapImageFilterIUC2IF2)

def itkDanielssonDistanceMapImageFilterIUC2IUC2_New():
    return itkDanielssonDistanceMapImageFilterIUC2IUC2.New()

class itkDanielssonDistanceMapImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUC2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageUC2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO22"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC2IUC2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC2IUC2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_swigregister(itkDanielssonDistanceMapImageFilterIUC2IUC2)

def itkDanielssonDistanceMapImageFilterIUC3ID3_New():
    return itkDanielssonDistanceMapImageFilterIUC3ID3.New()

class itkDanielssonDistanceMapImageFilterIUC3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUC3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageD3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO33"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUC3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC3ID3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC3ID3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_swigregister(itkDanielssonDistanceMapImageFilterIUC3ID3)

def itkDanielssonDistanceMapImageFilterIUC3IF3_New():
    return itkDanielssonDistanceMapImageFilterIUC3IF3.New()

class itkDanielssonDistanceMapImageFilterIUC3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUC3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageF3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO33"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUC3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC3IF3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC3IF3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_swigregister(itkDanielssonDistanceMapImageFilterIUC3IF3)

def itkDanielssonDistanceMapImageFilterIUC3IUC3_New():
    return itkDanielssonDistanceMapImageFilterIUC3IUC3.New()

class itkDanielssonDistanceMapImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUC3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageUC3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO33"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC3IUC3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC3IUC3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_swigregister(itkDanielssonDistanceMapImageFilterIUC3IUC3)

def itkDanielssonDistanceMapImageFilterIUC4ID4_New():
    return itkDanielssonDistanceMapImageFilterIUC4ID4.New()

class itkDanielssonDistanceMapImageFilterIUC4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4ID4):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUC4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC4ID4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUC4ID4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUC4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageD4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO44"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUC4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC4ID4

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC4ID4 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4ID4_swigregister(itkDanielssonDistanceMapImageFilterIUC4ID4)

def itkDanielssonDistanceMapImageFilterIUC4IF4_New():
    return itkDanielssonDistanceMapImageFilterIUC4IF4.New()

class itkDanielssonDistanceMapImageFilterIUC4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IF4):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUC4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC4IF4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUC4IF4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUC4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageF4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO44"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUC4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC4IF4

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC4IF4 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IF4_swigregister(itkDanielssonDistanceMapImageFilterIUC4IF4)

def itkDanielssonDistanceMapImageFilterIUC4IUC4_New():
    return itkDanielssonDistanceMapImageFilterIUC4IUC4.New()

class itkDanielssonDistanceMapImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC4IUC4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUC4IUC4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUC4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageUC4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO44"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC4IUC4

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUC4IUC4 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC4IUC4_swigregister(itkDanielssonDistanceMapImageFilterIUC4IUC4)

def itkDanielssonDistanceMapImageFilterIUS2ID2_New():
    return itkDanielssonDistanceMapImageFilterIUS2ID2.New()

class itkDanielssonDistanceMapImageFilterIUS2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUS2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageD2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO22"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUS2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS2ID2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS2ID2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_swigregister(itkDanielssonDistanceMapImageFilterIUS2ID2)

def itkDanielssonDistanceMapImageFilterIUS2IF2_New():
    return itkDanielssonDistanceMapImageFilterIUS2IF2.New()

class itkDanielssonDistanceMapImageFilterIUS2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUS2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageF2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO22"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUS2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS2IF2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS2IF2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_swigregister(itkDanielssonDistanceMapImageFilterIUS2IF2)

def itkDanielssonDistanceMapImageFilterIUS2IUS2_New():
    return itkDanielssonDistanceMapImageFilterIUS2IUS2.New()

class itkDanielssonDistanceMapImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUS2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageUS2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO22"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS2IUS2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS2IUS2 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_swigregister(itkDanielssonDistanceMapImageFilterIUS2IUS2)

def itkDanielssonDistanceMapImageFilterIUS3ID3_New():
    return itkDanielssonDistanceMapImageFilterIUS3ID3.New()

class itkDanielssonDistanceMapImageFilterIUS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUS3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageD3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO33"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS3ID3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS3ID3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_swigregister(itkDanielssonDistanceMapImageFilterIUS3ID3)

def itkDanielssonDistanceMapImageFilterIUS3IF3_New():
    return itkDanielssonDistanceMapImageFilterIUS3IF3.New()

class itkDanielssonDistanceMapImageFilterIUS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUS3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageF3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO33"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS3IF3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS3IF3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_swigregister(itkDanielssonDistanceMapImageFilterIUS3IF3)

def itkDanielssonDistanceMapImageFilterIUS3IUS3_New():
    return itkDanielssonDistanceMapImageFilterIUS3IUS3.New()

class itkDanielssonDistanceMapImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUS3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageUS3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO33"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS3IUS3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS3IUS3 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_swigregister(itkDanielssonDistanceMapImageFilterIUS3IUS3)

def itkDanielssonDistanceMapImageFilterIUS4ID4_New():
    return itkDanielssonDistanceMapImageFilterIUS4ID4.New()

class itkDanielssonDistanceMapImageFilterIUS4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4ID4):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUS4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS4ID4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUS4ID4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUS4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageD4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO44"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUS4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS4ID4

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS4ID4 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4ID4_swigregister(itkDanielssonDistanceMapImageFilterIUS4ID4)

def itkDanielssonDistanceMapImageFilterIUS4IF4_New():
    return itkDanielssonDistanceMapImageFilterIUS4IF4.New()

class itkDanielssonDistanceMapImageFilterIUS4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IF4):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUS4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS4IF4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUS4IF4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUS4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageF4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO44"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUS4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS4IF4

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS4IF4 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IF4_swigregister(itkDanielssonDistanceMapImageFilterIUS4IF4)

def itkDanielssonDistanceMapImageFilterIUS4IUS4_New():
    return itkDanielssonDistanceMapImageFilterIUS4IUS4.New()

class itkDanielssonDistanceMapImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkDanielssonDistanceMapImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS4IUS4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDanielssonDistanceMapImageFilterIUS4IUS4_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_Clone(self)

    def SetSquaredDistance(self, _arg):
        r"""
        SetSquaredDistance(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_SetSquaredDistance(self, _arg)

    def GetSquaredDistance(self):
        r"""GetSquaredDistance(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_GetSquaredDistance(self)

    def SquaredDistanceOn(self):
        r"""SquaredDistanceOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_SquaredDistanceOn(self)

    def SquaredDistanceOff(self):
        r"""SquaredDistanceOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_SquaredDistanceOff(self)

    def SetInputIsBinary(self, _arg):
        r"""
        SetInputIsBinary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_SetInputIsBinary(self, _arg)

    def GetInputIsBinary(self):
        r"""GetInputIsBinary(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_GetInputIsBinary(self)

    def InputIsBinaryOn(self):
        r"""InputIsBinaryOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_InputIsBinaryOn(self)

    def InputIsBinaryOff(self):
        r"""InputIsBinaryOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_InputIsBinaryOff(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_UseImageSpacingOff(self)

    def GetVoronoiMap(self):
        r"""GetVoronoiMap(self) -> itkImageUS4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_GetVoronoiMap(self)

    def GetDistanceMap(self):
        r"""GetDistanceMap(self) -> itkImageUS4"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_GetDistanceMap(self)

    def GetVectorDistanceMap(self):
        r"""GetVectorDistanceMap(self) -> itkImageO44"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_GetVectorDistanceMap(self)
    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_InputOutputSameDimensionCheck
    
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_InputVoronoiSameDimensionCheck
    
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_DoubleConvertibleToOutputCheck
    
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDanielssonDistanceMapImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS4IUS4

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDanielssonDistanceMapImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDanielssonDistanceMapImageFilterIUS4IUS4 in _itkDanielssonDistanceMapImageFilterPython:
_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS4IUS4_swigregister(itkDanielssonDistanceMapImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def danielsson_distance_map_image_filter(*args: itkt.ImageLike,  squared_distance: bool=..., input_is_binary: bool=..., use_image_spacing: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for DanielssonDistanceMapImageFilter"""
    import itk

    kwarg_typehints = { 'squared_distance':squared_distance,'input_is_binary':input_is_binary,'use_image_spacing':use_image_spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.DanielssonDistanceMapImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def danielsson_distance_map_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKDistanceMap.DanielssonDistanceMapImageFilter
    danielsson_distance_map_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    danielsson_distance_map_image_filter.__doc__ = filter_object.__doc__



