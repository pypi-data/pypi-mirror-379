# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDistanceMapPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkContourDirectedMeanDistanceImageFilterPython
else:
    import _itkContourDirectedMeanDistanceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkOffsetPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkContourDirectedMeanDistanceImageFilterID2ID2_New():
    return itkContourDirectedMeanDistanceImageFilterID2ID2.New()

class itkContourDirectedMeanDistanceImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterID2ID2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterID2ID2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterID2ID2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterID2ID2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID2ID2_swigregister(itkContourDirectedMeanDistanceImageFilterID2ID2)

def itkContourDirectedMeanDistanceImageFilterID3ID3_New():
    return itkContourDirectedMeanDistanceImageFilterID3ID3.New()

class itkContourDirectedMeanDistanceImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterID3ID3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterID3ID3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterID3ID3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterID3ID3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID3ID3_swigregister(itkContourDirectedMeanDistanceImageFilterID3ID3)

def itkContourDirectedMeanDistanceImageFilterID4ID4_New():
    return itkContourDirectedMeanDistanceImageFilterID4ID4.New()

class itkContourDirectedMeanDistanceImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterID4ID4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterID4ID4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterID4ID4

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterID4ID4 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterID4ID4_swigregister(itkContourDirectedMeanDistanceImageFilterID4ID4)

def itkContourDirectedMeanDistanceImageFilterIF2IF2_New():
    return itkContourDirectedMeanDistanceImageFilterIF2IF2.New()

class itkContourDirectedMeanDistanceImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIF2IF2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIF2IF2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIF2IF2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIF2IF2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF2IF2_swigregister(itkContourDirectedMeanDistanceImageFilterIF2IF2)

def itkContourDirectedMeanDistanceImageFilterIF3IF3_New():
    return itkContourDirectedMeanDistanceImageFilterIF3IF3.New()

class itkContourDirectedMeanDistanceImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIF3IF3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIF3IF3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIF3IF3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIF3IF3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF3IF3_swigregister(itkContourDirectedMeanDistanceImageFilterIF3IF3)

def itkContourDirectedMeanDistanceImageFilterIF4IF4_New():
    return itkContourDirectedMeanDistanceImageFilterIF4IF4.New()

class itkContourDirectedMeanDistanceImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIF4IF4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIF4IF4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIF4IF4

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIF4IF4 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIF4IF4_swigregister(itkContourDirectedMeanDistanceImageFilterIF4IF4)

def itkContourDirectedMeanDistanceImageFilterISS2ISS2_New():
    return itkContourDirectedMeanDistanceImageFilterISS2ISS2.New()

class itkContourDirectedMeanDistanceImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterISS2ISS2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterISS2ISS2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageSS2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageSS2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterISS2ISS2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterISS2ISS2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS2ISS2_swigregister(itkContourDirectedMeanDistanceImageFilterISS2ISS2)

def itkContourDirectedMeanDistanceImageFilterISS3ISS3_New():
    return itkContourDirectedMeanDistanceImageFilterISS3ISS3.New()

class itkContourDirectedMeanDistanceImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterISS3ISS3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterISS3ISS3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageSS3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageSS3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterISS3ISS3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterISS3ISS3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS3ISS3_swigregister(itkContourDirectedMeanDistanceImageFilterISS3ISS3)

def itkContourDirectedMeanDistanceImageFilterISS4ISS4_New():
    return itkContourDirectedMeanDistanceImageFilterISS4ISS4.New()

class itkContourDirectedMeanDistanceImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterISS4ISS4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterISS4ISS4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageSS4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageSS4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterISS4ISS4

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterISS4ISS4 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterISS4ISS4_swigregister(itkContourDirectedMeanDistanceImageFilterISS4ISS4)

def itkContourDirectedMeanDistanceImageFilterIUC2ID2_New():
    return itkContourDirectedMeanDistanceImageFilterIUC2ID2.New()

class itkContourDirectedMeanDistanceImageFilterIUC2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIUC2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIUC2ID2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIUC2ID2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUC2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIUC2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUC2ID2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUC2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUC2ID2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2ID2_swigregister(itkContourDirectedMeanDistanceImageFilterIUC2ID2)

def itkContourDirectedMeanDistanceImageFilterIUC2IF2_New():
    return itkContourDirectedMeanDistanceImageFilterIUC2IF2.New()

class itkContourDirectedMeanDistanceImageFilterIUC2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIUC2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIUC2IF2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIUC2IF2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUC2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIUC2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUC2IF2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUC2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUC2IF2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC2IF2_swigregister(itkContourDirectedMeanDistanceImageFilterIUC2IF2)

def itkContourDirectedMeanDistanceImageFilterIUC3ID3_New():
    return itkContourDirectedMeanDistanceImageFilterIUC3ID3.New()

class itkContourDirectedMeanDistanceImageFilterIUC3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIUC3ID3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIUC3ID3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUC3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIUC3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUC3ID3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUC3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUC3ID3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3ID3_swigregister(itkContourDirectedMeanDistanceImageFilterIUC3ID3)

def itkContourDirectedMeanDistanceImageFilterIUC3IF3_New():
    return itkContourDirectedMeanDistanceImageFilterIUC3IF3.New()

class itkContourDirectedMeanDistanceImageFilterIUC3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIUC3IF3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIUC3IF3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUC3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIUC3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUC3IF3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUC3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUC3IF3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC3IF3_swigregister(itkContourDirectedMeanDistanceImageFilterIUC3IF3)

def itkContourDirectedMeanDistanceImageFilterIUC4ID4_New():
    return itkContourDirectedMeanDistanceImageFilterIUC4ID4.New()

class itkContourDirectedMeanDistanceImageFilterIUC4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIUC4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIUC4ID4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIUC4ID4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUC4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIUC4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUC4ID4

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUC4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUC4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUC4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUC4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUC4ID4 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4ID4_swigregister(itkContourDirectedMeanDistanceImageFilterIUC4ID4)

def itkContourDirectedMeanDistanceImageFilterIUC4IF4_New():
    return itkContourDirectedMeanDistanceImageFilterIUC4IF4.New()

class itkContourDirectedMeanDistanceImageFilterIUC4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIUC4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIUC4IF4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIUC4IF4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUC4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIUC4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUC4IF4

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUC4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUC4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUC4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUC4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUC4IF4 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUC4IF4_swigregister(itkContourDirectedMeanDistanceImageFilterIUC4IF4)

def itkContourDirectedMeanDistanceImageFilterIUS2ID2_New():
    return itkContourDirectedMeanDistanceImageFilterIUS2ID2.New()

class itkContourDirectedMeanDistanceImageFilterIUS2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIUS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIUS2ID2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIUS2ID2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUS2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIUS2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUS2ID2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUS2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUS2ID2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2ID2_swigregister(itkContourDirectedMeanDistanceImageFilterIUS2ID2)

def itkContourDirectedMeanDistanceImageFilterIUS2IF2_New():
    return itkContourDirectedMeanDistanceImageFilterIUS2IF2.New()

class itkContourDirectedMeanDistanceImageFilterIUS2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIUS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIUS2IF2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIUS2IF2_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF2"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUS2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIUS2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUS2IF2

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUS2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUS2IF2 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS2IF2_swigregister(itkContourDirectedMeanDistanceImageFilterIUS2IF2)

def itkContourDirectedMeanDistanceImageFilterIUS3ID3_New():
    return itkContourDirectedMeanDistanceImageFilterIUS3ID3.New()

class itkContourDirectedMeanDistanceImageFilterIUS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIUS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIUS3ID3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIUS3ID3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIUS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUS3ID3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUS3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUS3ID3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3ID3_swigregister(itkContourDirectedMeanDistanceImageFilterIUS3ID3)

def itkContourDirectedMeanDistanceImageFilterIUS3IF3_New():
    return itkContourDirectedMeanDistanceImageFilterIUS3IF3.New()

class itkContourDirectedMeanDistanceImageFilterIUS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIUS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIUS3IF3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIUS3IF3_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF3"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIUS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUS3IF3

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUS3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUS3IF3 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS3IF3_swigregister(itkContourDirectedMeanDistanceImageFilterIUS3IF3)

def itkContourDirectedMeanDistanceImageFilterIUS4ID4_New():
    return itkContourDirectedMeanDistanceImageFilterIUS4ID4.New()

class itkContourDirectedMeanDistanceImageFilterIUS4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIUS4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIUS4ID4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIUS4ID4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUS4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIUS4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUS4ID4

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUS4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUS4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUS4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUS4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUS4ID4 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4ID4_swigregister(itkContourDirectedMeanDistanceImageFilterIUS4ID4)

def itkContourDirectedMeanDistanceImageFilterIUS4IF4_New():
    return itkContourDirectedMeanDistanceImageFilterIUS4IF4.New()

class itkContourDirectedMeanDistanceImageFilterIUS4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkContourDirectedMeanDistanceImageFilterIUS4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkContourDirectedMeanDistanceImageFilterIUS4IF4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkContourDirectedMeanDistanceImageFilterIUS4IF4_Pointer"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF4"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4_GetInput2(self)

    def GetContourDirectedMeanDistance(self):
        r"""GetContourDirectedMeanDistance(self) -> double"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4_GetContourDirectedMeanDistance(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4_UseImageSpacingOff(self)
    InputHasNumericTraitsCheck = _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourDirectedMeanDistanceImageFilterPython.delete_itkContourDirectedMeanDistanceImageFilterIUS4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkContourDirectedMeanDistanceImageFilterIUS4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkContourDirectedMeanDistanceImageFilterIUS4IF4

        Create a new object of the class itkContourDirectedMeanDistanceImageFilterIUS4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourDirectedMeanDistanceImageFilterIUS4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourDirectedMeanDistanceImageFilterIUS4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourDirectedMeanDistanceImageFilterIUS4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourDirectedMeanDistanceImageFilterIUS4IF4 in _itkContourDirectedMeanDistanceImageFilterPython:
_itkContourDirectedMeanDistanceImageFilterPython.itkContourDirectedMeanDistanceImageFilterIUS4IF4_swigregister(itkContourDirectedMeanDistanceImageFilterIUS4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def contour_directed_mean_distance_image_filter(*args: itkt.ImageLike,  use_image_spacing: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ContourDirectedMeanDistanceImageFilter"""
    import itk

    kwarg_typehints = { 'use_image_spacing':use_image_spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ContourDirectedMeanDistanceImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def contour_directed_mean_distance_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKDistanceMap.ContourDirectedMeanDistanceImageFilter
    contour_directed_mean_distance_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    contour_directed_mean_distance_image_filter.__doc__ = filter_object.__doc__



