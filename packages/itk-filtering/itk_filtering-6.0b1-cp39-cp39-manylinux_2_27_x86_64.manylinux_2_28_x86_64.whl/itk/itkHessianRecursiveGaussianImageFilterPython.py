# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHessianRecursiveGaussianImageFilterPython
else:
    import _itkHessianRecursiveGaussianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkOffsetPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkHessianRecursiveGaussianImageFilterID2_New():
    return itkHessianRecursiveGaussianImageFilterID2.New()

class itkHessianRecursiveGaussianImageFilterID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterID2_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterID2_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterID2

        Create a new object of the class itkHessianRecursiveGaussianImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterID2 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_swigregister(itkHessianRecursiveGaussianImageFilterID2)

def itkHessianRecursiveGaussianImageFilterID3_New():
    return itkHessianRecursiveGaussianImageFilterID3.New()

class itkHessianRecursiveGaussianImageFilterID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterID3_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterID3_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterID3

        Create a new object of the class itkHessianRecursiveGaussianImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterID3 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_swigregister(itkHessianRecursiveGaussianImageFilterID3)

def itkHessianRecursiveGaussianImageFilterID4_New():
    return itkHessianRecursiveGaussianImageFilterID4.New()

class itkHessianRecursiveGaussianImageFilterID4(itk.itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterID4_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterID4_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID4_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID4_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID4_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID4_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID4_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID4_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID4_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID4_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterID4

        Create a new object of the class itkHessianRecursiveGaussianImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterID4 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID4_swigregister(itkHessianRecursiveGaussianImageFilterID4)

def itkHessianRecursiveGaussianImageFilterIF2_New():
    return itkHessianRecursiveGaussianImageFilterIF2.New()

class itkHessianRecursiveGaussianImageFilterIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterIF2_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterIF2_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIF2

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIF2 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_swigregister(itkHessianRecursiveGaussianImageFilterIF2)

def itkHessianRecursiveGaussianImageFilterIF3_New():
    return itkHessianRecursiveGaussianImageFilterIF3.New()

class itkHessianRecursiveGaussianImageFilterIF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterIF3_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterIF3_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIF3

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIF3 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_swigregister(itkHessianRecursiveGaussianImageFilterIF3)

def itkHessianRecursiveGaussianImageFilterIF4_New():
    return itkHessianRecursiveGaussianImageFilterIF4.New()

class itkHessianRecursiveGaussianImageFilterIF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterIF4_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterIF4_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF4_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF4_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF4_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF4_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF4_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF4_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF4_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF4_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIF4

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIF4 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF4_swigregister(itkHessianRecursiveGaussianImageFilterIF4)

def itkHessianRecursiveGaussianImageFilterISS2_New():
    return itkHessianRecursiveGaussianImageFilterISS2.New()

class itkHessianRecursiveGaussianImageFilterISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterISS2_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterISS2_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterISS2

        Create a new object of the class itkHessianRecursiveGaussianImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterISS2 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_swigregister(itkHessianRecursiveGaussianImageFilterISS2)

def itkHessianRecursiveGaussianImageFilterISS3_New():
    return itkHessianRecursiveGaussianImageFilterISS3.New()

class itkHessianRecursiveGaussianImageFilterISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterISS3_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterISS3_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterISS3

        Create a new object of the class itkHessianRecursiveGaussianImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterISS3 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_swigregister(itkHessianRecursiveGaussianImageFilterISS3)

def itkHessianRecursiveGaussianImageFilterISS4_New():
    return itkHessianRecursiveGaussianImageFilterISS4.New()

class itkHessianRecursiveGaussianImageFilterISS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterISS4_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterISS4_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS4_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS4_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS4_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS4_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS4_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS4_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS4_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS4_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterISS4

        Create a new object of the class itkHessianRecursiveGaussianImageFilterISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterISS4 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS4_swigregister(itkHessianRecursiveGaussianImageFilterISS4)

def itkHessianRecursiveGaussianImageFilterIUC2_New():
    return itkHessianRecursiveGaussianImageFilterIUC2.New()

class itkHessianRecursiveGaussianImageFilterIUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterIUC2_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterIUC2_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIUC2

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIUC2 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_swigregister(itkHessianRecursiveGaussianImageFilterIUC2)

def itkHessianRecursiveGaussianImageFilterIUC3_New():
    return itkHessianRecursiveGaussianImageFilterIUC3.New()

class itkHessianRecursiveGaussianImageFilterIUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterIUC3_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterIUC3_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIUC3

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIUC3 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_swigregister(itkHessianRecursiveGaussianImageFilterIUC3)

def itkHessianRecursiveGaussianImageFilterIUC4_New():
    return itkHessianRecursiveGaussianImageFilterIUC4.New()

class itkHessianRecursiveGaussianImageFilterIUC4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterIUC4_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterIUC4_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC4_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC4_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC4_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC4_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC4_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC4_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC4_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC4_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIUC4

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIUC4 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC4_swigregister(itkHessianRecursiveGaussianImageFilterIUC4)

def itkHessianRecursiveGaussianImageFilterIUS2_New():
    return itkHessianRecursiveGaussianImageFilterIUS2.New()

class itkHessianRecursiveGaussianImageFilterIUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterIUS2_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterIUS2_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIUS2

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIUS2 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_swigregister(itkHessianRecursiveGaussianImageFilterIUS2)

def itkHessianRecursiveGaussianImageFilterIUS3_New():
    return itkHessianRecursiveGaussianImageFilterIUS3.New()

class itkHessianRecursiveGaussianImageFilterIUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterIUS3_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterIUS3_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIUS3

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIUS3 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_swigregister(itkHessianRecursiveGaussianImageFilterIUS3)

def itkHessianRecursiveGaussianImageFilterIUS4_New():
    return itkHessianRecursiveGaussianImageFilterIUS4.New()

class itkHessianRecursiveGaussianImageFilterIUS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44):
    r"""Proxy of C++ itkHessianRecursiveGaussianImageFilterIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHessianRecursiveGaussianImageFilterIUS4_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHessianRecursiveGaussianImageFilterIUS4_Pointer"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS4_Clone(self)

    def SetSigma(self, sigma):
        r"""
        SetSigma(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS4_SetSigma(self, sigma)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS4_GetSigma(self)

    def SetNormalizeAcrossScale(self, normalize):
        r"""
        SetNormalizeAcrossScale(self, normalize)

        Parameters
        ----------
        normalize: bool

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS4_SetNormalizeAcrossScale(self, normalize)

    def GetNormalizeAcrossScale(self):
        r"""GetNormalizeAcrossScale(self) -> bool"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS4_GetNormalizeAcrossScale(self)

    def NormalizeAcrossScaleOn(self):
        r"""NormalizeAcrossScaleOn(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS4_NormalizeAcrossScaleOn(self)

    def NormalizeAcrossScaleOff(self):
        r"""NormalizeAcrossScaleOff(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS4_NormalizeAcrossScaleOff(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS4_GenerateInputRequestedRegion(self)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS4_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS4_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHessianRecursiveGaussianImageFilterIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIUS4

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIUS4 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS4_swigregister(itkHessianRecursiveGaussianImageFilterIUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def hessian_recursive_gaussian_image_filter(*args: itkt.ImageLike,  sigma: float=..., normalize_across_scale: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for HessianRecursiveGaussianImageFilter"""
    import itk

    kwarg_typehints = { 'sigma':sigma,'normalize_across_scale':normalize_across_scale }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HessianRecursiveGaussianImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def hessian_recursive_gaussian_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageFeature.HessianRecursiveGaussianImageFilter
    hessian_recursive_gaussian_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    hessian_recursive_gaussian_image_filter.__doc__ = filter_object.__doc__



