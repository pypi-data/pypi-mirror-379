# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLabelMapPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPadLabelMapFilterPython
else:
    import _itkPadLabelMapFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkChangeRegionLabelMapFilterPython
import itk.itkInPlaceLabelMapFilterPython
import itk.itkLabelMapFilterPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKLabelMapBasePython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkStatisticsLabelObjectPython
import itk.itkHistogramPython
import itk.itkArrayPython
import itk.itkSamplePython
import itk.itkShapeLabelObjectPython
import itk.itkLabelObjectPython
import itk.itkLabelObjectLinePython
import itk.itkAffineTransformPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkMatrixOffsetTransformBasePython

def itkPadLabelMapFilterLM2_New():
    return itkPadLabelMapFilterLM2.New()

class itkPadLabelMapFilterLM2(itk.itkChangeRegionLabelMapFilterPython.itkChangeRegionLabelMapFilterLM2):
    r"""Proxy of C++ itkPadLabelMapFilterLM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPadLabelMapFilterLM2_Pointer"""
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPadLabelMapFilterLM2_Pointer"""
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM2_Clone(self)

    def SetUpperBoundaryPadSize(self, _arg):
        r"""
        SetUpperBoundaryPadSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM2_SetUpperBoundaryPadSize(self, _arg)

    def GetUpperBoundaryPadSize(self):
        r"""GetUpperBoundaryPadSize(self) -> itkSize2"""
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM2_GetUpperBoundaryPadSize(self)

    def SetLowerBoundaryPadSize(self, _arg):
        r"""
        SetLowerBoundaryPadSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM2_SetLowerBoundaryPadSize(self, _arg)

    def GetLowerBoundaryPadSize(self):
        r"""GetLowerBoundaryPadSize(self) -> itkSize2"""
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM2_GetLowerBoundaryPadSize(self)

    def SetPadSize(self, size):
        r"""
        SetPadSize(self, size)

        Parameters
        ----------
        size: itkSize2 const &

        """
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM2_SetPadSize(self, size)
    __swig_destroy__ = _itkPadLabelMapFilterPython.delete_itkPadLabelMapFilterLM2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPadLabelMapFilterLM2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPadLabelMapFilterLM2

        Create a new object of the class itkPadLabelMapFilterLM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPadLabelMapFilterLM2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPadLabelMapFilterLM2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPadLabelMapFilterLM2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPadLabelMapFilterLM2 in _itkPadLabelMapFilterPython:
_itkPadLabelMapFilterPython.itkPadLabelMapFilterLM2_swigregister(itkPadLabelMapFilterLM2)

def itkPadLabelMapFilterLM3_New():
    return itkPadLabelMapFilterLM3.New()

class itkPadLabelMapFilterLM3(itk.itkChangeRegionLabelMapFilterPython.itkChangeRegionLabelMapFilterLM3):
    r"""Proxy of C++ itkPadLabelMapFilterLM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPadLabelMapFilterLM3_Pointer"""
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPadLabelMapFilterLM3_Pointer"""
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM3_Clone(self)

    def SetUpperBoundaryPadSize(self, _arg):
        r"""
        SetUpperBoundaryPadSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM3_SetUpperBoundaryPadSize(self, _arg)

    def GetUpperBoundaryPadSize(self):
        r"""GetUpperBoundaryPadSize(self) -> itkSize3"""
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM3_GetUpperBoundaryPadSize(self)

    def SetLowerBoundaryPadSize(self, _arg):
        r"""
        SetLowerBoundaryPadSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM3_SetLowerBoundaryPadSize(self, _arg)

    def GetLowerBoundaryPadSize(self):
        r"""GetLowerBoundaryPadSize(self) -> itkSize3"""
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM3_GetLowerBoundaryPadSize(self)

    def SetPadSize(self, size):
        r"""
        SetPadSize(self, size)

        Parameters
        ----------
        size: itkSize3 const &

        """
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM3_SetPadSize(self, size)
    __swig_destroy__ = _itkPadLabelMapFilterPython.delete_itkPadLabelMapFilterLM3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPadLabelMapFilterLM3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPadLabelMapFilterLM3

        Create a new object of the class itkPadLabelMapFilterLM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPadLabelMapFilterLM3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPadLabelMapFilterLM3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPadLabelMapFilterLM3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPadLabelMapFilterLM3 in _itkPadLabelMapFilterPython:
_itkPadLabelMapFilterPython.itkPadLabelMapFilterLM3_swigregister(itkPadLabelMapFilterLM3)

def itkPadLabelMapFilterLM4_New():
    return itkPadLabelMapFilterLM4.New()

class itkPadLabelMapFilterLM4(itk.itkChangeRegionLabelMapFilterPython.itkChangeRegionLabelMapFilterLM4):
    r"""Proxy of C++ itkPadLabelMapFilterLM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPadLabelMapFilterLM4_Pointer"""
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPadLabelMapFilterLM4_Pointer"""
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM4_Clone(self)

    def SetUpperBoundaryPadSize(self, _arg):
        r"""
        SetUpperBoundaryPadSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM4_SetUpperBoundaryPadSize(self, _arg)

    def GetUpperBoundaryPadSize(self):
        r"""GetUpperBoundaryPadSize(self) -> itkSize4"""
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM4_GetUpperBoundaryPadSize(self)

    def SetLowerBoundaryPadSize(self, _arg):
        r"""
        SetLowerBoundaryPadSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM4_SetLowerBoundaryPadSize(self, _arg)

    def GetLowerBoundaryPadSize(self):
        r"""GetLowerBoundaryPadSize(self) -> itkSize4"""
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM4_GetLowerBoundaryPadSize(self)

    def SetPadSize(self, size):
        r"""
        SetPadSize(self, size)

        Parameters
        ----------
        size: itkSize4 const &

        """
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM4_SetPadSize(self, size)
    __swig_destroy__ = _itkPadLabelMapFilterPython.delete_itkPadLabelMapFilterLM4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPadLabelMapFilterLM4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPadLabelMapFilterPython.itkPadLabelMapFilterLM4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPadLabelMapFilterLM4

        Create a new object of the class itkPadLabelMapFilterLM4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPadLabelMapFilterLM4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPadLabelMapFilterLM4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPadLabelMapFilterLM4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPadLabelMapFilterLM4 in _itkPadLabelMapFilterPython:
_itkPadLabelMapFilterPython.itkPadLabelMapFilterLM4_swigregister(itkPadLabelMapFilterLM4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def pad_label_map_filter(*args: itkt.ImageLike,  upper_boundary_pad_size: Sequence[int]=..., lower_boundary_pad_size: Sequence[int]=..., pad_size: Sequence[int]=..., region: itkt.ImageRegion=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for PadLabelMapFilter"""
    import itk

    kwarg_typehints = { 'upper_boundary_pad_size':upper_boundary_pad_size,'lower_boundary_pad_size':lower_boundary_pad_size,'pad_size':pad_size,'region':region }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.PadLabelMapFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def pad_label_map_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLabelMap.PadLabelMapFilter
    pad_label_map_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    pad_label_map_filter.__doc__ = filter_object.__doc__



