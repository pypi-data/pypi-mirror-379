# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDistanceMapPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHausdorffDistanceImageFilterPython
else:
    import _itkHausdorffDistanceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImagePython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkHausdorffDistanceImageFilterID2ID2_New():
    return itkHausdorffDistanceImageFilterID2ID2.New()

class itkHausdorffDistanceImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterID2ID2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterID2ID2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterID2ID2

        Create a new object of the class itkHausdorffDistanceImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterID2ID2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_swigregister(itkHausdorffDistanceImageFilterID2ID2)

def itkHausdorffDistanceImageFilterID3ID3_New():
    return itkHausdorffDistanceImageFilterID3ID3.New()

class itkHausdorffDistanceImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterID3ID3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterID3ID3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterID3ID3

        Create a new object of the class itkHausdorffDistanceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterID3ID3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_swigregister(itkHausdorffDistanceImageFilterID3ID3)

def itkHausdorffDistanceImageFilterID4ID4_New():
    return itkHausdorffDistanceImageFilterID4ID4.New()

class itkHausdorffDistanceImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterID4ID4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterID4ID4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID4ID4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID4ID4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID4ID4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID4ID4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID4ID4_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID4ID4_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID4ID4_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID4ID4_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID4ID4_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterID4ID4

        Create a new object of the class itkHausdorffDistanceImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterID4ID4 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID4ID4_swigregister(itkHausdorffDistanceImageFilterID4ID4)

def itkHausdorffDistanceImageFilterIF2IF2_New():
    return itkHausdorffDistanceImageFilterIF2IF2.New()

class itkHausdorffDistanceImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIF2IF2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIF2IF2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIF2IF2

        Create a new object of the class itkHausdorffDistanceImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIF2IF2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_swigregister(itkHausdorffDistanceImageFilterIF2IF2)

def itkHausdorffDistanceImageFilterIF3IF3_New():
    return itkHausdorffDistanceImageFilterIF3IF3.New()

class itkHausdorffDistanceImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIF3IF3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIF3IF3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIF3IF3

        Create a new object of the class itkHausdorffDistanceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIF3IF3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_swigregister(itkHausdorffDistanceImageFilterIF3IF3)

def itkHausdorffDistanceImageFilterIF4IF4_New():
    return itkHausdorffDistanceImageFilterIF4IF4.New()

class itkHausdorffDistanceImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIF4IF4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIF4IF4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF4IF4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF4IF4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF4IF4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF4IF4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF4IF4_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF4IF4_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF4IF4_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF4IF4_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF4IF4_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIF4IF4

        Create a new object of the class itkHausdorffDistanceImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIF4IF4 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF4IF4_swigregister(itkHausdorffDistanceImageFilterIF4IF4)

def itkHausdorffDistanceImageFilterISS2ISS2_New():
    return itkHausdorffDistanceImageFilterISS2ISS2.New()

class itkHausdorffDistanceImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterISS2ISS2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterISS2ISS2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageSS2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageSS2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterISS2ISS2

        Create a new object of the class itkHausdorffDistanceImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterISS2ISS2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_swigregister(itkHausdorffDistanceImageFilterISS2ISS2)

def itkHausdorffDistanceImageFilterISS3ISS3_New():
    return itkHausdorffDistanceImageFilterISS3ISS3.New()

class itkHausdorffDistanceImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterISS3ISS3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterISS3ISS3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageSS3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageSS3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterISS3ISS3

        Create a new object of the class itkHausdorffDistanceImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterISS3ISS3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_swigregister(itkHausdorffDistanceImageFilterISS3ISS3)

def itkHausdorffDistanceImageFilterISS4ISS4_New():
    return itkHausdorffDistanceImageFilterISS4ISS4.New()

class itkHausdorffDistanceImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterISS4ISS4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterISS4ISS4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS4ISS4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageSS4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS4ISS4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageSS4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS4ISS4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS4ISS4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS4ISS4_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS4ISS4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS4ISS4_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS4ISS4_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS4ISS4_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS4ISS4_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterISS4ISS4

        Create a new object of the class itkHausdorffDistanceImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterISS4ISS4 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS4ISS4_swigregister(itkHausdorffDistanceImageFilterISS4ISS4)

def itkHausdorffDistanceImageFilterIUC2ID2_New():
    return itkHausdorffDistanceImageFilterIUC2ID2.New()

class itkHausdorffDistanceImageFilterIUC2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIUC2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIUC2ID2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIUC2ID2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIUC2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC2ID2

        Create a new object of the class itkHausdorffDistanceImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUC2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUC2ID2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_swigregister(itkHausdorffDistanceImageFilterIUC2ID2)

def itkHausdorffDistanceImageFilterIUC2IF2_New():
    return itkHausdorffDistanceImageFilterIUC2IF2.New()

class itkHausdorffDistanceImageFilterIUC2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIUC2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIUC2IF2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIUC2IF2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIUC2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC2IF2

        Create a new object of the class itkHausdorffDistanceImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUC2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUC2IF2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_swigregister(itkHausdorffDistanceImageFilterIUC2IF2)

def itkHausdorffDistanceImageFilterIUC3ID3_New():
    return itkHausdorffDistanceImageFilterIUC3ID3.New()

class itkHausdorffDistanceImageFilterIUC3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIUC3ID3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIUC3ID3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIUC3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC3ID3

        Create a new object of the class itkHausdorffDistanceImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUC3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUC3ID3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_swigregister(itkHausdorffDistanceImageFilterIUC3ID3)

def itkHausdorffDistanceImageFilterIUC3IF3_New():
    return itkHausdorffDistanceImageFilterIUC3IF3.New()

class itkHausdorffDistanceImageFilterIUC3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIUC3IF3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIUC3IF3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIUC3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC3IF3

        Create a new object of the class itkHausdorffDistanceImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUC3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUC3IF3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_swigregister(itkHausdorffDistanceImageFilterIUC3IF3)

def itkHausdorffDistanceImageFilterIUC4ID4_New():
    return itkHausdorffDistanceImageFilterIUC4ID4.New()

class itkHausdorffDistanceImageFilterIUC4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIUC4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIUC4ID4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIUC4ID4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4ID4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4ID4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4ID4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4ID4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4ID4_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4ID4_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4ID4_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4ID4_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4ID4_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIUC4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC4ID4

        Create a new object of the class itkHausdorffDistanceImageFilterIUC4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUC4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUC4ID4 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4ID4_swigregister(itkHausdorffDistanceImageFilterIUC4ID4)

def itkHausdorffDistanceImageFilterIUC4IF4_New():
    return itkHausdorffDistanceImageFilterIUC4IF4.New()

class itkHausdorffDistanceImageFilterIUC4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIUC4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIUC4IF4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIUC4IF4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4IF4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4IF4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4IF4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4IF4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4IF4_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4IF4_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4IF4_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4IF4_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4IF4_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIUC4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC4IF4

        Create a new object of the class itkHausdorffDistanceImageFilterIUC4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUC4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUC4IF4 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC4IF4_swigregister(itkHausdorffDistanceImageFilterIUC4IF4)

def itkHausdorffDistanceImageFilterIUS2ID2_New():
    return itkHausdorffDistanceImageFilterIUS2ID2.New()

class itkHausdorffDistanceImageFilterIUS2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIUS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIUS2ID2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIUS2ID2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIUS2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS2ID2

        Create a new object of the class itkHausdorffDistanceImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUS2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUS2ID2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_swigregister(itkHausdorffDistanceImageFilterIUS2ID2)

def itkHausdorffDistanceImageFilterIUS2IF2_New():
    return itkHausdorffDistanceImageFilterIUS2IF2.New()

class itkHausdorffDistanceImageFilterIUS2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIUS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIUS2IF2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIUS2IF2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIUS2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS2IF2

        Create a new object of the class itkHausdorffDistanceImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUS2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUS2IF2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_swigregister(itkHausdorffDistanceImageFilterIUS2IF2)

def itkHausdorffDistanceImageFilterIUS3ID3_New():
    return itkHausdorffDistanceImageFilterIUS3ID3.New()

class itkHausdorffDistanceImageFilterIUS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIUS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIUS3ID3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIUS3ID3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIUS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS3ID3

        Create a new object of the class itkHausdorffDistanceImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUS3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUS3ID3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_swigregister(itkHausdorffDistanceImageFilterIUS3ID3)

def itkHausdorffDistanceImageFilterIUS3IF3_New():
    return itkHausdorffDistanceImageFilterIUS3IF3.New()

class itkHausdorffDistanceImageFilterIUS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIUS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIUS3IF3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIUS3IF3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIUS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS3IF3

        Create a new object of the class itkHausdorffDistanceImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUS3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUS3IF3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_swigregister(itkHausdorffDistanceImageFilterIUS3IF3)

def itkHausdorffDistanceImageFilterIUS4ID4_New():
    return itkHausdorffDistanceImageFilterIUS4ID4.New()

class itkHausdorffDistanceImageFilterIUS4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIUS4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIUS4ID4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIUS4ID4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4ID4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4ID4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4ID4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4ID4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4ID4_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4ID4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4ID4_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4ID4_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4ID4_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4ID4_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIUS4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS4ID4

        Create a new object of the class itkHausdorffDistanceImageFilterIUS4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUS4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUS4ID4 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4ID4_swigregister(itkHausdorffDistanceImageFilterIUS4ID4)

def itkHausdorffDistanceImageFilterIUS4IF4_New():
    return itkHausdorffDistanceImageFilterIUS4IF4.New()

class itkHausdorffDistanceImageFilterIUS4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkHausdorffDistanceImageFilterIUS4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHausdorffDistanceImageFilterIUS4IF4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHausdorffDistanceImageFilterIUS4IF4_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4IF4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4IF4_SetInput1(self, image)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4IF4_SetInput2(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4IF4_GetInput1(self)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF4"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4IF4_GetInput2(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4IF4_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4IF4_GetUseImageSpacing(self)

    def GetHausdorffDistance(self):
        r"""GetHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4IF4_GetHausdorffDistance(self)

    def GetAverageHausdorffDistance(self):
        r"""GetAverageHausdorffDistance(self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4IF4_GetAverageHausdorffDistance(self)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4IF4_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHausdorffDistanceImageFilterIUS4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS4IF4

        Create a new object of the class itkHausdorffDistanceImageFilterIUS4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUS4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUS4IF4 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS4IF4_swigregister(itkHausdorffDistanceImageFilterIUS4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def hausdorff_distance_image_filter(*args: itkt.ImageLike,  use_image_spacing: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for HausdorffDistanceImageFilter"""
    import itk

    kwarg_typehints = { 'use_image_spacing':use_image_spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HausdorffDistanceImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def hausdorff_distance_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKDistanceMap.HausdorffDistanceImageFilter
    hausdorff_distance_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    hausdorff_distance_image_filter.__doc__ = filter_object.__doc__



