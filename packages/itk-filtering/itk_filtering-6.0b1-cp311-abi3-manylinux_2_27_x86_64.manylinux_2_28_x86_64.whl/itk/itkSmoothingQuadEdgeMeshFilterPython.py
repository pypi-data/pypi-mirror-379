# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKQuadEdgeMeshFilteringPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSmoothingQuadEdgeMeshFilterPython
else:
    import _itkSmoothingQuadEdgeMeshFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkQuadEdgeMeshToQuadEdgeMeshFilterPython
import itk.itkQuadEdgeMeshBasePython
import itk.itkQuadEdgeCellTraitsInfoPython
import itk.itkQuadEdgeMeshPointPython
import itk.itkGeometricalQuadEdgePython
import itk.itkQuadEdgePython
import itk.itkVectorContainerPython
import itk.itkArrayPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkMapContainerPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkQuadEdgeMeshLineCellPython
import itk.itkMatrixCoefficientsPython

def itkSmoothingQuadEdgeMeshFilterQEMD2_New():
    return itkSmoothingQuadEdgeMeshFilterQEMD2.New()

class itkSmoothingQuadEdgeMeshFilterQEMD2(itk.itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD2QEMD2):
    r"""Proxy of C++ itkSmoothingQuadEdgeMeshFilterQEMD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingQuadEdgeMeshFilterQEMD2_Pointer"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingQuadEdgeMeshFilterQEMD2_Pointer"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD2_Clone(self)

    def SetCoefficientsMethod(self, iMethod):
        r"""
        SetCoefficientsMethod(self, iMethod)

        Parameters
        ----------
        iMethod: itkMatrixCoefficientsQEMD2 *

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD2_SetCoefficientsMethod(self, iMethod)

    def SetNumberOfIterations(self, _arg):
        r"""
        SetNumberOfIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD2_SetNumberOfIterations(self, _arg)

    def GetNumberOfIterations(self):
        r"""GetNumberOfIterations(self) -> unsigned int"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD2_GetNumberOfIterations(self)

    def DelaunayConformingOn(self):
        r"""DelaunayConformingOn(self)"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD2_DelaunayConformingOn(self)

    def DelaunayConformingOff(self):
        r"""DelaunayConformingOff(self)"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD2_DelaunayConformingOff(self)

    def SetDelaunayConforming(self, _arg):
        r"""
        SetDelaunayConforming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD2_SetDelaunayConforming(self, _arg)

    def GetDelaunayConforming(self):
        r"""GetDelaunayConforming(self) -> bool"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD2_GetDelaunayConforming(self)

    def SetRelaxationFactor(self, _arg):
        r"""
        SetRelaxationFactor(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD2_SetRelaxationFactor(self, _arg)

    def GetRelaxationFactor(self):
        r"""GetRelaxationFactor(self) -> float"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD2_GetRelaxationFactor(self)
    __swig_destroy__ = _itkSmoothingQuadEdgeMeshFilterPython.delete_itkSmoothingQuadEdgeMeshFilterQEMD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingQuadEdgeMeshFilterQEMD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingQuadEdgeMeshFilterQEMD2

        Create a new object of the class itkSmoothingQuadEdgeMeshFilterQEMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingQuadEdgeMeshFilterQEMD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingQuadEdgeMeshFilterQEMD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingQuadEdgeMeshFilterQEMD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingQuadEdgeMeshFilterQEMD2 in _itkSmoothingQuadEdgeMeshFilterPython:
_itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD2_swigregister(itkSmoothingQuadEdgeMeshFilterQEMD2)

def itkSmoothingQuadEdgeMeshFilterQEMD3_New():
    return itkSmoothingQuadEdgeMeshFilterQEMD3.New()

class itkSmoothingQuadEdgeMeshFilterQEMD3(itk.itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD3QEMD3):
    r"""Proxy of C++ itkSmoothingQuadEdgeMeshFilterQEMD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingQuadEdgeMeshFilterQEMD3_Pointer"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingQuadEdgeMeshFilterQEMD3_Pointer"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD3_Clone(self)

    def SetCoefficientsMethod(self, iMethod):
        r"""
        SetCoefficientsMethod(self, iMethod)

        Parameters
        ----------
        iMethod: itkMatrixCoefficientsQEMD3 *

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD3_SetCoefficientsMethod(self, iMethod)

    def SetNumberOfIterations(self, _arg):
        r"""
        SetNumberOfIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD3_SetNumberOfIterations(self, _arg)

    def GetNumberOfIterations(self):
        r"""GetNumberOfIterations(self) -> unsigned int"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD3_GetNumberOfIterations(self)

    def DelaunayConformingOn(self):
        r"""DelaunayConformingOn(self)"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD3_DelaunayConformingOn(self)

    def DelaunayConformingOff(self):
        r"""DelaunayConformingOff(self)"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD3_DelaunayConformingOff(self)

    def SetDelaunayConforming(self, _arg):
        r"""
        SetDelaunayConforming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD3_SetDelaunayConforming(self, _arg)

    def GetDelaunayConforming(self):
        r"""GetDelaunayConforming(self) -> bool"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD3_GetDelaunayConforming(self)

    def SetRelaxationFactor(self, _arg):
        r"""
        SetRelaxationFactor(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD3_SetRelaxationFactor(self, _arg)

    def GetRelaxationFactor(self):
        r"""GetRelaxationFactor(self) -> float"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD3_GetRelaxationFactor(self)
    __swig_destroy__ = _itkSmoothingQuadEdgeMeshFilterPython.delete_itkSmoothingQuadEdgeMeshFilterQEMD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingQuadEdgeMeshFilterQEMD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingQuadEdgeMeshFilterQEMD3

        Create a new object of the class itkSmoothingQuadEdgeMeshFilterQEMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingQuadEdgeMeshFilterQEMD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingQuadEdgeMeshFilterQEMD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingQuadEdgeMeshFilterQEMD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingQuadEdgeMeshFilterQEMD3 in _itkSmoothingQuadEdgeMeshFilterPython:
_itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD3_swigregister(itkSmoothingQuadEdgeMeshFilterQEMD3)

def itkSmoothingQuadEdgeMeshFilterQEMD4_New():
    return itkSmoothingQuadEdgeMeshFilterQEMD4.New()

class itkSmoothingQuadEdgeMeshFilterQEMD4(itk.itkQuadEdgeMeshToQuadEdgeMeshFilterPython.itkQuadEdgeMeshToQuadEdgeMeshFilterQEMD4QEMD4):
    r"""Proxy of C++ itkSmoothingQuadEdgeMeshFilterQEMD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSmoothingQuadEdgeMeshFilterQEMD4_Pointer"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSmoothingQuadEdgeMeshFilterQEMD4_Pointer"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD4_Clone(self)

    def SetCoefficientsMethod(self, iMethod):
        r"""
        SetCoefficientsMethod(self, iMethod)

        Parameters
        ----------
        iMethod: itkMatrixCoefficientsQEMD4 *

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD4_SetCoefficientsMethod(self, iMethod)

    def SetNumberOfIterations(self, _arg):
        r"""
        SetNumberOfIterations(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD4_SetNumberOfIterations(self, _arg)

    def GetNumberOfIterations(self):
        r"""GetNumberOfIterations(self) -> unsigned int"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD4_GetNumberOfIterations(self)

    def DelaunayConformingOn(self):
        r"""DelaunayConformingOn(self)"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD4_DelaunayConformingOn(self)

    def DelaunayConformingOff(self):
        r"""DelaunayConformingOff(self)"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD4_DelaunayConformingOff(self)

    def SetDelaunayConforming(self, _arg):
        r"""
        SetDelaunayConforming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD4_SetDelaunayConforming(self, _arg)

    def GetDelaunayConforming(self):
        r"""GetDelaunayConforming(self) -> bool"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD4_GetDelaunayConforming(self)

    def SetRelaxationFactor(self, _arg):
        r"""
        SetRelaxationFactor(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD4_SetRelaxationFactor(self, _arg)

    def GetRelaxationFactor(self):
        r"""GetRelaxationFactor(self) -> float"""
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD4_GetRelaxationFactor(self)
    __swig_destroy__ = _itkSmoothingQuadEdgeMeshFilterPython.delete_itkSmoothingQuadEdgeMeshFilterQEMD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSmoothingQuadEdgeMeshFilterQEMD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSmoothingQuadEdgeMeshFilterQEMD4

        Create a new object of the class itkSmoothingQuadEdgeMeshFilterQEMD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingQuadEdgeMeshFilterQEMD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingQuadEdgeMeshFilterQEMD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingQuadEdgeMeshFilterQEMD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingQuadEdgeMeshFilterQEMD4 in _itkSmoothingQuadEdgeMeshFilterPython:
_itkSmoothingQuadEdgeMeshFilterPython.itkSmoothingQuadEdgeMeshFilterQEMD4_swigregister(itkSmoothingQuadEdgeMeshFilterQEMD4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def smoothing_quad_edge_mesh_filter(*args: itkt.Mesh,  coefficients_method=..., number_of_iterations: int=..., delaunay_conforming: bool=..., relaxation_factor: float=..., output: itkt.QuadEdgeMesh=...,**kwargs)-> itkt.MeshSourceReturn:
    """Functional interface for SmoothingQuadEdgeMeshFilter"""
    import itk

    kwarg_typehints = { 'coefficients_method':coefficients_method,'number_of_iterations':number_of_iterations,'delaunay_conforming':delaunay_conforming,'relaxation_factor':relaxation_factor,'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SmoothingQuadEdgeMeshFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def smoothing_quad_edge_mesh_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKQuadEdgeMeshFiltering.SmoothingQuadEdgeMeshFilter
    smoothing_quad_edge_mesh_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    smoothing_quad_edge_mesh_filter.__doc__ = filter_object.__doc__



