# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCollidingFrontsImageFilterPython
else:
    import _itkCollidingFrontsImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKFastMarchingBasePython
import itk.itkImagePython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkLevelSetNodePython
import itk.itkNodePairPython
import itk.itkFastMarchingStoppingCriterionBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkCollidingFrontsImageFilterID2ID2_New():
    return itkCollidingFrontsImageFilterID2ID2.New()

class itkCollidingFrontsImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkCollidingFrontsImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCollidingFrontsImageFilterID2ID2_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCollidingFrontsImageFilterID2ID2_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_Clone(self)

    def SetSeedPoints1(self, points):
        r"""
        SetSeedPoints1(self, points)

        Parameters
        ----------
        points: itkVectorContainerUILSND2 *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_SetSeedPoints1(self, points)

    def GetSeedPoints1(self):
        r"""GetSeedPoints1(self) -> itkVectorContainerUILSND2_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_GetSeedPoints1(self)

    def SetSeedPoints2(self, points):
        r"""
        SetSeedPoints2(self, points)

        Parameters
        ----------
        points: itkVectorContainerUILSND2 *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_SetSeedPoints2(self, points)

    def GetSeedPoints2(self):
        r"""GetSeedPoints2(self) -> itkVectorContainerUILSND2_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_GetSeedPoints2(self)

    def SetNegativeEpsilon(self, _arg):
        r"""
        SetNegativeEpsilon(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_SetNegativeEpsilon(self, _arg)

    def GetNegativeEpsilon(self):
        r"""GetNegativeEpsilon(self) -> double"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_GetNegativeEpsilon(self)

    def SetApplyConnectivity(self, _arg):
        r"""
        SetApplyConnectivity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_SetApplyConnectivity(self, _arg)

    def GetApplyConnectivity(self):
        r"""GetApplyConnectivity(self) -> bool"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_GetApplyConnectivity(self)

    def ApplyConnectivityOn(self):
        r"""ApplyConnectivityOn(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_ApplyConnectivityOn(self)

    def ApplyConnectivityOff(self):
        r"""ApplyConnectivityOff(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_ApplyConnectivityOff(self)

    def SetStopOnTargets(self, _arg):
        r"""
        SetStopOnTargets(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_SetStopOnTargets(self, _arg)

    def GetStopOnTargets(self):
        r"""GetStopOnTargets(self) -> bool"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_GetStopOnTargets(self)

    def StopOnTargetsOn(self):
        r"""StopOnTargetsOn(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_StopOnTargetsOn(self)

    def StopOnTargetsOff(self):
        r"""StopOnTargetsOff(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_StopOnTargetsOff(self)
    InputHasNumericTraitsCheck = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCollidingFrontsImageFilterPython.delete_itkCollidingFrontsImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCollidingFrontsImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCollidingFrontsImageFilterID2ID2

        Create a new object of the class itkCollidingFrontsImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCollidingFrontsImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCollidingFrontsImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCollidingFrontsImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCollidingFrontsImageFilterID2ID2 in _itkCollidingFrontsImageFilterPython:
_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID2ID2_swigregister(itkCollidingFrontsImageFilterID2ID2)

def itkCollidingFrontsImageFilterID3ID3_New():
    return itkCollidingFrontsImageFilterID3ID3.New()

class itkCollidingFrontsImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkCollidingFrontsImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCollidingFrontsImageFilterID3ID3_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCollidingFrontsImageFilterID3ID3_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_Clone(self)

    def SetSeedPoints1(self, points):
        r"""
        SetSeedPoints1(self, points)

        Parameters
        ----------
        points: itkVectorContainerUILSND3 *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_SetSeedPoints1(self, points)

    def GetSeedPoints1(self):
        r"""GetSeedPoints1(self) -> itkVectorContainerUILSND3_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_GetSeedPoints1(self)

    def SetSeedPoints2(self, points):
        r"""
        SetSeedPoints2(self, points)

        Parameters
        ----------
        points: itkVectorContainerUILSND3 *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_SetSeedPoints2(self, points)

    def GetSeedPoints2(self):
        r"""GetSeedPoints2(self) -> itkVectorContainerUILSND3_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_GetSeedPoints2(self)

    def SetNegativeEpsilon(self, _arg):
        r"""
        SetNegativeEpsilon(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_SetNegativeEpsilon(self, _arg)

    def GetNegativeEpsilon(self):
        r"""GetNegativeEpsilon(self) -> double"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_GetNegativeEpsilon(self)

    def SetApplyConnectivity(self, _arg):
        r"""
        SetApplyConnectivity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_SetApplyConnectivity(self, _arg)

    def GetApplyConnectivity(self):
        r"""GetApplyConnectivity(self) -> bool"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_GetApplyConnectivity(self)

    def ApplyConnectivityOn(self):
        r"""ApplyConnectivityOn(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_ApplyConnectivityOn(self)

    def ApplyConnectivityOff(self):
        r"""ApplyConnectivityOff(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_ApplyConnectivityOff(self)

    def SetStopOnTargets(self, _arg):
        r"""
        SetStopOnTargets(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_SetStopOnTargets(self, _arg)

    def GetStopOnTargets(self):
        r"""GetStopOnTargets(self) -> bool"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_GetStopOnTargets(self)

    def StopOnTargetsOn(self):
        r"""StopOnTargetsOn(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_StopOnTargetsOn(self)

    def StopOnTargetsOff(self):
        r"""StopOnTargetsOff(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_StopOnTargetsOff(self)
    InputHasNumericTraitsCheck = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCollidingFrontsImageFilterPython.delete_itkCollidingFrontsImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCollidingFrontsImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCollidingFrontsImageFilterID3ID3

        Create a new object of the class itkCollidingFrontsImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCollidingFrontsImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCollidingFrontsImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCollidingFrontsImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCollidingFrontsImageFilterID3ID3 in _itkCollidingFrontsImageFilterPython:
_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID3ID3_swigregister(itkCollidingFrontsImageFilterID3ID3)

def itkCollidingFrontsImageFilterID4ID4_New():
    return itkCollidingFrontsImageFilterID4ID4.New()

class itkCollidingFrontsImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkCollidingFrontsImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCollidingFrontsImageFilterID4ID4_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCollidingFrontsImageFilterID4ID4_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_Clone(self)

    def SetSeedPoints1(self, points):
        r"""
        SetSeedPoints1(self, points)

        Parameters
        ----------
        points: itkVectorContainerUILSND4 *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_SetSeedPoints1(self, points)

    def GetSeedPoints1(self):
        r"""GetSeedPoints1(self) -> itkVectorContainerUILSND4_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_GetSeedPoints1(self)

    def SetSeedPoints2(self, points):
        r"""
        SetSeedPoints2(self, points)

        Parameters
        ----------
        points: itkVectorContainerUILSND4 *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_SetSeedPoints2(self, points)

    def GetSeedPoints2(self):
        r"""GetSeedPoints2(self) -> itkVectorContainerUILSND4_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_GetSeedPoints2(self)

    def SetNegativeEpsilon(self, _arg):
        r"""
        SetNegativeEpsilon(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_SetNegativeEpsilon(self, _arg)

    def GetNegativeEpsilon(self):
        r"""GetNegativeEpsilon(self) -> double"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_GetNegativeEpsilon(self)

    def SetApplyConnectivity(self, _arg):
        r"""
        SetApplyConnectivity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_SetApplyConnectivity(self, _arg)

    def GetApplyConnectivity(self):
        r"""GetApplyConnectivity(self) -> bool"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_GetApplyConnectivity(self)

    def ApplyConnectivityOn(self):
        r"""ApplyConnectivityOn(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_ApplyConnectivityOn(self)

    def ApplyConnectivityOff(self):
        r"""ApplyConnectivityOff(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_ApplyConnectivityOff(self)

    def SetStopOnTargets(self, _arg):
        r"""
        SetStopOnTargets(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_SetStopOnTargets(self, _arg)

    def GetStopOnTargets(self):
        r"""GetStopOnTargets(self) -> bool"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_GetStopOnTargets(self)

    def StopOnTargetsOn(self):
        r"""StopOnTargetsOn(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_StopOnTargetsOn(self)

    def StopOnTargetsOff(self):
        r"""StopOnTargetsOff(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_StopOnTargetsOff(self)
    InputHasNumericTraitsCheck = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCollidingFrontsImageFilterPython.delete_itkCollidingFrontsImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCollidingFrontsImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCollidingFrontsImageFilterID4ID4

        Create a new object of the class itkCollidingFrontsImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCollidingFrontsImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCollidingFrontsImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCollidingFrontsImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCollidingFrontsImageFilterID4ID4 in _itkCollidingFrontsImageFilterPython:
_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterID4ID4_swigregister(itkCollidingFrontsImageFilterID4ID4)

def itkCollidingFrontsImageFilterIF2IF2_New():
    return itkCollidingFrontsImageFilterIF2IF2.New()

class itkCollidingFrontsImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkCollidingFrontsImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCollidingFrontsImageFilterIF2IF2_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCollidingFrontsImageFilterIF2IF2_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_Clone(self)

    def SetSeedPoints1(self, points):
        r"""
        SetSeedPoints1(self, points)

        Parameters
        ----------
        points: itkVectorContainerUILSNF2 *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_SetSeedPoints1(self, points)

    def GetSeedPoints1(self):
        r"""GetSeedPoints1(self) -> itkVectorContainerUILSNF2_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_GetSeedPoints1(self)

    def SetSeedPoints2(self, points):
        r"""
        SetSeedPoints2(self, points)

        Parameters
        ----------
        points: itkVectorContainerUILSNF2 *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_SetSeedPoints2(self, points)

    def GetSeedPoints2(self):
        r"""GetSeedPoints2(self) -> itkVectorContainerUILSNF2_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_GetSeedPoints2(self)

    def SetNegativeEpsilon(self, _arg):
        r"""
        SetNegativeEpsilon(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_SetNegativeEpsilon(self, _arg)

    def GetNegativeEpsilon(self):
        r"""GetNegativeEpsilon(self) -> double"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_GetNegativeEpsilon(self)

    def SetApplyConnectivity(self, _arg):
        r"""
        SetApplyConnectivity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_SetApplyConnectivity(self, _arg)

    def GetApplyConnectivity(self):
        r"""GetApplyConnectivity(self) -> bool"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_GetApplyConnectivity(self)

    def ApplyConnectivityOn(self):
        r"""ApplyConnectivityOn(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_ApplyConnectivityOn(self)

    def ApplyConnectivityOff(self):
        r"""ApplyConnectivityOff(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_ApplyConnectivityOff(self)

    def SetStopOnTargets(self, _arg):
        r"""
        SetStopOnTargets(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_SetStopOnTargets(self, _arg)

    def GetStopOnTargets(self):
        r"""GetStopOnTargets(self) -> bool"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_GetStopOnTargets(self)

    def StopOnTargetsOn(self):
        r"""StopOnTargetsOn(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_StopOnTargetsOn(self)

    def StopOnTargetsOff(self):
        r"""StopOnTargetsOff(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_StopOnTargetsOff(self)
    InputHasNumericTraitsCheck = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCollidingFrontsImageFilterPython.delete_itkCollidingFrontsImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCollidingFrontsImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCollidingFrontsImageFilterIF2IF2

        Create a new object of the class itkCollidingFrontsImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCollidingFrontsImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCollidingFrontsImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCollidingFrontsImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCollidingFrontsImageFilterIF2IF2 in _itkCollidingFrontsImageFilterPython:
_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF2IF2_swigregister(itkCollidingFrontsImageFilterIF2IF2)

def itkCollidingFrontsImageFilterIF3IF3_New():
    return itkCollidingFrontsImageFilterIF3IF3.New()

class itkCollidingFrontsImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkCollidingFrontsImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCollidingFrontsImageFilterIF3IF3_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCollidingFrontsImageFilterIF3IF3_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_Clone(self)

    def SetSeedPoints1(self, points):
        r"""
        SetSeedPoints1(self, points)

        Parameters
        ----------
        points: itkVectorContainerUILSNF3 *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_SetSeedPoints1(self, points)

    def GetSeedPoints1(self):
        r"""GetSeedPoints1(self) -> itkVectorContainerUILSNF3_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_GetSeedPoints1(self)

    def SetSeedPoints2(self, points):
        r"""
        SetSeedPoints2(self, points)

        Parameters
        ----------
        points: itkVectorContainerUILSNF3 *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_SetSeedPoints2(self, points)

    def GetSeedPoints2(self):
        r"""GetSeedPoints2(self) -> itkVectorContainerUILSNF3_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_GetSeedPoints2(self)

    def SetNegativeEpsilon(self, _arg):
        r"""
        SetNegativeEpsilon(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_SetNegativeEpsilon(self, _arg)

    def GetNegativeEpsilon(self):
        r"""GetNegativeEpsilon(self) -> double"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_GetNegativeEpsilon(self)

    def SetApplyConnectivity(self, _arg):
        r"""
        SetApplyConnectivity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_SetApplyConnectivity(self, _arg)

    def GetApplyConnectivity(self):
        r"""GetApplyConnectivity(self) -> bool"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_GetApplyConnectivity(self)

    def ApplyConnectivityOn(self):
        r"""ApplyConnectivityOn(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_ApplyConnectivityOn(self)

    def ApplyConnectivityOff(self):
        r"""ApplyConnectivityOff(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_ApplyConnectivityOff(self)

    def SetStopOnTargets(self, _arg):
        r"""
        SetStopOnTargets(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_SetStopOnTargets(self, _arg)

    def GetStopOnTargets(self):
        r"""GetStopOnTargets(self) -> bool"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_GetStopOnTargets(self)

    def StopOnTargetsOn(self):
        r"""StopOnTargetsOn(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_StopOnTargetsOn(self)

    def StopOnTargetsOff(self):
        r"""StopOnTargetsOff(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_StopOnTargetsOff(self)
    InputHasNumericTraitsCheck = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCollidingFrontsImageFilterPython.delete_itkCollidingFrontsImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCollidingFrontsImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCollidingFrontsImageFilterIF3IF3

        Create a new object of the class itkCollidingFrontsImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCollidingFrontsImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCollidingFrontsImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCollidingFrontsImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCollidingFrontsImageFilterIF3IF3 in _itkCollidingFrontsImageFilterPython:
_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF3IF3_swigregister(itkCollidingFrontsImageFilterIF3IF3)

def itkCollidingFrontsImageFilterIF4IF4_New():
    return itkCollidingFrontsImageFilterIF4IF4.New()

class itkCollidingFrontsImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkCollidingFrontsImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCollidingFrontsImageFilterIF4IF4_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCollidingFrontsImageFilterIF4IF4_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_Clone(self)

    def SetSeedPoints1(self, points):
        r"""
        SetSeedPoints1(self, points)

        Parameters
        ----------
        points: itkVectorContainerUILSNF4 *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_SetSeedPoints1(self, points)

    def GetSeedPoints1(self):
        r"""GetSeedPoints1(self) -> itkVectorContainerUILSNF4_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_GetSeedPoints1(self)

    def SetSeedPoints2(self, points):
        r"""
        SetSeedPoints2(self, points)

        Parameters
        ----------
        points: itkVectorContainerUILSNF4 *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_SetSeedPoints2(self, points)

    def GetSeedPoints2(self):
        r"""GetSeedPoints2(self) -> itkVectorContainerUILSNF4_Pointer"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_GetSeedPoints2(self)

    def SetNegativeEpsilon(self, _arg):
        r"""
        SetNegativeEpsilon(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_SetNegativeEpsilon(self, _arg)

    def GetNegativeEpsilon(self):
        r"""GetNegativeEpsilon(self) -> double"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_GetNegativeEpsilon(self)

    def SetApplyConnectivity(self, _arg):
        r"""
        SetApplyConnectivity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_SetApplyConnectivity(self, _arg)

    def GetApplyConnectivity(self):
        r"""GetApplyConnectivity(self) -> bool"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_GetApplyConnectivity(self)

    def ApplyConnectivityOn(self):
        r"""ApplyConnectivityOn(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_ApplyConnectivityOn(self)

    def ApplyConnectivityOff(self):
        r"""ApplyConnectivityOff(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_ApplyConnectivityOff(self)

    def SetStopOnTargets(self, _arg):
        r"""
        SetStopOnTargets(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_SetStopOnTargets(self, _arg)

    def GetStopOnTargets(self):
        r"""GetStopOnTargets(self) -> bool"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_GetStopOnTargets(self)

    def StopOnTargetsOn(self):
        r"""StopOnTargetsOn(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_StopOnTargetsOn(self)

    def StopOnTargetsOff(self):
        r"""StopOnTargetsOff(self)"""
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_StopOnTargetsOff(self)
    InputHasNumericTraitsCheck = _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkCollidingFrontsImageFilterPython.delete_itkCollidingFrontsImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCollidingFrontsImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCollidingFrontsImageFilterIF4IF4

        Create a new object of the class itkCollidingFrontsImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCollidingFrontsImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCollidingFrontsImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCollidingFrontsImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCollidingFrontsImageFilterIF4IF4 in _itkCollidingFrontsImageFilterPython:
_itkCollidingFrontsImageFilterPython.itkCollidingFrontsImageFilterIF4IF4_swigregister(itkCollidingFrontsImageFilterIF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def colliding_fronts_image_filter(*args: itkt.ImageLike,  seed_points1=..., seed_points2=..., negative_epsilon: float=..., apply_connectivity: bool=..., stop_on_targets: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CollidingFrontsImageFilter"""
    import itk

    kwarg_typehints = { 'seed_points1':seed_points1,'seed_points2':seed_points2,'negative_epsilon':negative_epsilon,'apply_connectivity':apply_connectivity,'stop_on_targets':stop_on_targets }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CollidingFrontsImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def colliding_fronts_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKLevelSets.CollidingFrontsImageFilter
    colliding_fronts_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    colliding_fronts_image_filter.__doc__ = filter_object.__doc__



