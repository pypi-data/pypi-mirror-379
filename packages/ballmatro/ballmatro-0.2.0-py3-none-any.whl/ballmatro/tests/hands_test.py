from ballmatro.card import Card
from ballmatro.hands import StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, Pair, HighCard, EmptyHand, NoPokerHand, find_hand

def test_straight_flush():
    cards = [Card('10â™¥'), Card('Jâ™¥'), Card('Qâ™¥'), Card('Kâ™¥'), Card('Aâ™¥')]
    assert StraightFlush.check(cards)

def test_four_of_a_kind():
    cards = [Card('10â™¥'), Card('10â™¦'), Card('10â™ '), Card('10â™£')]
    assert FourOfAKind.check(cards)

def test_full_house():
    cards = [Card('10â™¥'), Card('10â™¦'), Card('10â™ '), Card('Kâ™£'), Card('Kâ™¦')]
    assert FullHouse.check(cards)

def test_flush():
    cards = [Card('2â™¥'), Card('4â™¥'), Card('6â™¥'), Card('8â™¥'), Card('10â™¥')]
    assert Flush.check(cards)

def test_straight():
    cards = [Card('10â™¥'), Card('Jâ™¦'), Card('Qâ™ '), Card('Kâ™£'), Card('Aâ™¦')]
    assert Straight.check(cards)

def test_three_of_a_kind():
    cards = [Card('10â™¥'), Card('10â™¦'), Card('10â™ ')]
    assert ThreeOfAKind.check(cards)

def test_two_pair():
    cards = [Card('10â™¥'), Card('10â™¦'), Card('Kâ™ '), Card('Kâ™£')]
    assert TwoPair.check(cards)

def test_pair():
    cards = [Card('10â™¥'), Card('10â™¦')]
    assert Pair.check(cards)

def test_high_card():
    cards = [Card('Aâ™¥')]
    assert HighCard.check(cards)

def test_find_hand():
    assert find_hand([Card('10â™¥'), Card('Jâ™¥'), Card('Qâ™¥'), Card('Kâ™¥'), Card('Aâ™¥')]) == StraightFlush()
    assert find_hand([Card('10â™¥'), Card('10â™¦'), Card('10â™ '), Card('10â™£')]) == FourOfAKind()
    assert find_hand([Card('10â™¥'), Card('10â™¦'), Card('10â™ '), Card('Kâ™£'), Card('Kâ™¦')]) == FullHouse()
    assert find_hand([Card('2â™¥'), Card('4â™¥'), Card('6â™¥'), Card('8â™¥'), Card('10â™¥')]) == Flush()
    assert find_hand([Card('10â™¥'), Card('Jâ™¦'), Card('Qâ™ '), Card('Kâ™£'), Card('Aâ™¦')]) == Straight()
    assert find_hand([Card('10â™¥'), Card('10â™¦'), Card('10â™ ')]) == ThreeOfAKind()
    assert find_hand([Card('10â™¥'), Card('10â™¦'), Card('Kâ™ '), Card('Kâ™£')]) == TwoPair()
    assert find_hand([Card('10â™¥'), Card('10â™¦')]) == Pair()
    assert find_hand([Card('Aâ™¥')]) == HighCard()
    assert find_hand([]) == EmptyHand()
    assert find_hand([Card("ðŸ‚¿ Double Double: Cards with rank 2 provide double chips")]) == NoPokerHand()
