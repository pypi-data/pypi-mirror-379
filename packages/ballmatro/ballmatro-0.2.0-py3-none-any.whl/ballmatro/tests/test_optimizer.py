import pytest

from ballmatro.card import Card
from ballmatro.optimizer import brute_force_optimize
from ballmatro.score import Score

test_data = [
    (
        [Card('3â™¦')],
        Score(input=[Card('3â™¦')], played=[Card('3â™¦')])
    ),
    (
        [Card(txt='Kâ™¥x'), Card(txt='Aâ™¥x')],
        Score(input=[Card(txt='Kâ™¥x'), Card(txt='Aâ™¥x')], played=[Card(txt='Aâ™¥x')])
    ),
    (
        [Card('2â™¥'), Card('3â™¦')],
        Score(input=[Card('2â™¥'), Card('3â™¦')], played=[Card('3â™¦')])
    ),
    (
        [Card('2â™¥'), Card('2â™¥'), Card('3â™¦')],
        Score(input=[Card('2â™¥'), Card('2â™¥'), Card('3â™¦')], played=[Card('2â™¥'), Card('2â™¥')])
    ),
    (
        [Card('2â™¥'), Card('2â™¥'), Card('3â™¦'), Card('3â™¦'), Card('Aâ™£')],
        Score(input=[Card('2â™¥'), Card('2â™¥'), Card('3â™¦'), Card('3â™¦'), Card('Aâ™£')], played=[Card('2â™¥'), Card('2â™¥'), Card('3â™¦'), Card('3â™¦')])
    ),
    (
        [Card('3â™¥'), Card('3â™¦'), Card('3â™ '), Card('Aâ™£')],
        Score(input=[Card('3â™¥'), Card('3â™¦'), Card('3â™ '), Card('Aâ™£')], played=[Card('3â™¥'), Card('3â™¦'), Card('3â™ ')])
    ),
    (
        [Card('3â™¥'), Card('3â™¦'), Card('3â™ '), Card('Aâ™¦'), Card('Aâ™ '), Card('2â™¥'), Card('2â™¥')],
        Score(input=[Card('3â™¥'), Card('3â™¦'), Card('3â™ '), Card('Aâ™¦'), Card('Aâ™ '), Card('2â™¥'), Card('2â™¥')], played=[Card('3â™¥'), Card('3â™¦'), Card('3â™ '), Card('Aâ™¦'), Card('Aâ™ ')])
    ),
    (
        [Card('2â™¥'), Card('2â™¥'), Card('3â™¥'), Card('5â™¥'), Card('8â™¥'), Card('Jâ™¥')],
        Score(input=[Card('2â™¥'), Card('2â™¥'), Card('3â™¥'), Card('5â™¥'), Card('8â™¥'), Card('Jâ™¥')], played=[Card('2â™¥'), Card('3â™¥'), Card('5â™¥'), Card('8â™¥'), Card('Jâ™¥')])
    ),
    (
        [Card('2â™¥'), Card('3â™¦'), Card('4â™ '), Card('5â™¦'), Card('6â™ '), Card('3â™¦'), Card('3â™¦')],
        Score(input=[Card('2â™¥'), Card('3â™¦'), Card('4â™ '), Card('5â™¦'), Card('6â™ '), Card('3â™¦'), Card('3â™¦')], played=[Card('2â™¥'), Card('3â™¦'), Card('4â™ '), Card('5â™¦'), Card('6â™ ')])
    ),
    (
        [Card('2â™¥'), Card('4â™¥'), Card('3â™¥'), Card('3â™¦'), Card('3â™ '), Card('3â™£'), Card('Aâ™¥')],
        Score(input=[Card('2â™¥'), Card('4â™¥'), Card('3â™¥'), Card('3â™¦'), Card('3â™ '), Card('3â™£'), Card('Aâ™¥')], played=[Card('3â™¥'), Card('3â™¦'), Card('3â™ '), Card('3â™£')])
    ),
    (
        [Card('2â™¥'), Card('3â™¥'), Card('4â™¥'), Card('5â™ '), Card('5â™¥'), Card('6â™¥'), Card('7â™ ')],
        Score(input=[Card('2â™¥'), Card('3â™¥'), Card('4â™¥'), Card('5â™ '), Card('5â™¥'), Card('6â™¥'), Card('7â™ ')], played=[Card('2â™¥'), Card('3â™¥'), Card('4â™¥'), Card('5â™¥'), Card('6â™¥')])
    ),
    (
        [],
        Score(input=[], played=[])
    ),
    (
        [Card("ðŸ‚¿ Banned Red: Played cards of red suit (â™¥, â™¦) will be ignored in poker hand determination and scoring"), Card('2â™¥'), Card('3â™¥'), Card('4â™¥')],
        Score(input=[Card("ðŸ‚¿ Banned Red: Played cards of red suit (â™¥, â™¦) will be ignored in poker hand determination and scoring"), Card('2â™¥'), Card('3â™¥'), Card('4â™¥')], played=[])
    ),
    (
        [Card('6â™¥x'), Card('4â™¦x'), Card('6â™£+'), Card('Kâ™ +'), Card('Aâ™ +'), Card('Qâ™ '), Card('Qâ™ +'), Card('Qâ™¥x')],
        Score(input=[Card('6â™¥x'), Card('4â™¦x'), Card('6â™£+'), Card('Kâ™ +'), Card('Aâ™ +'), Card('Qâ™ '), Card('Qâ™ +'), Card('Qâ™¥x')], played=[Card('Qâ™ '), Card('Qâ™ +'), Card('Qâ™¥x'), Card('6â™¥x'), Card('6â™£+')])
    )
]

@pytest.mark.parametrize("cards, expected_score_info", test_data)
def test_brute_force_optimize(cards, expected_score_info):
    """The brute force optimizer can find the best hand for a number of cards"""
    opt = brute_force_optimize(cards)
    assert opt.score == expected_score_info.score
    assert opt.chips == expected_score_info.chips
    assert opt.multiplier == expected_score_info.multiplier
    assert sorted(opt.input) == sorted(expected_score_info.input)
    assert sorted(opt.played) == sorted(expected_score_info.played)
