import json
import logging
from pathlib import Path
from typing import Any

from smart_thinking_llm.utils import init_basic_logger


class PriceComputer:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤"""

    def __init__(self, model_name: str, price_path: Path):
        self.model_name = model_name
        self.price_path = price_path
        self.logger = init_basic_logger(self.__class__.__name__, logging.DEBUG)
        self.pricing_data = self.load_pricing_data()

    def map_model_name(self, model_name: str) -> str:
        """
        –ú–∞–ø–ø–∏—Ç –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫ –±–∞–∑–æ–≤–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –≤ —Ñ–∞–π–ª–µ —Ü–µ–Ω
        –ø—É—Ç–µ–º –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫ –∏–∑ prices.json –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏.
        
        –ü—Ä–∏–º–µ—Ä—ã:
        - gpt-4o-mini-2024-07-18 —Å–æ–¥–µ—Ä–∂–∏—Ç "gpt-4o-mini" -> gpt-4o-mini
        - gpt-4.1-turbo-preview —Å–æ–¥–µ—Ä–∂–∏—Ç "gpt-4.1" -> gpt-4.1
        - gpt-3.5-turbo-0125 —Å–æ–¥–µ—Ä–∂–∏—Ç "gpt-3.5-turbo" -> gpt-3.5-turbo
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ —Ü–µ–Ω
        available_models = list(self.pricing_data.keys())
        
        # –ò—â–µ–º –≤—Å–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –∏–∑ available_models, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ model_name
        matching_models = []
        for available_model in available_models:
            if available_model in model_name:
                matching_models.append(available_model)
        
        if not matching_models:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            self.logger.debug(f"–ú–∞–ø–ø–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å")
            return model_name
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É (–Ω–∞–∏–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é)
        best_match = max(matching_models, key=len)
        
        self.logger.debug(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –º–æ–¥–µ–ª–∏: {model_name} -> {best_match}")
        return best_match

    def load_pricing_data(self) -> dict[str, dict[str, float]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–∞ API –∏–∑ —Ñ–∞–π–ª–∞ prices.json
        
        –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:
        [
            {
                "model": "gpt-4o-mini",
                "input": 0.60,    # —Ü–µ–Ω–∞ –∑–∞ 1M –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ USD
                "output": 2.40    # —Ü–µ–Ω–∞ –∑–∞ 1M –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ USD  
            }
        ]
        """
        try:
            with open(self.price_path, "r", encoding="utf-8") as f:
                prices_list = json.load(f)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            pricing_dict = {}
            for price_info in prices_list:
                pricing_dict[price_info["model"]] = {
                    "input": price_info["input"],
                    "output": price_info["output"],
                }

            self.logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ü–µ–Ω—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π: {list(pricing_dict.keys())}")
            return pricing_dict

        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ {self.price_path}: {e}")
            return {}

    def estimate_tokens(self, text: str) -> int:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
        try:
            import tiktoken

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –º–æ–¥–µ–ª–∏
            if "gpt-4" in self.model_name.lower():
                encoding = tiktoken.encoding_for_model("gpt-4")
            elif "gpt-3.5" in self.model_name.lower():
                encoding = tiktoken.encoding_for_model("gpt-3.5-turbo")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º cl100k_base –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
                encoding = tiktoken.get_encoding("cl100k_base")

            return len(encoding.encode(text))

        except ImportError:
            self.logger.warning(
                "tiktoken –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ç–æ–∫–µ–Ω–æ–≤"
            )
            # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: ~4 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            return len(text) // 4
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            return len(text) // 4

    def estimate_cost_per_request(
        self, sample_prompt: str, estimated_output_tokens: int = 100
    ) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
        # –ú–∞–ø–ø–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫ –±–∞–∑–æ–≤–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
        mapped_model_name = self.map_model_name(self.model_name)
        
        if mapped_model_name not in self.pricing_data:
            self.logger.error(f"–¶–µ–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {mapped_model_name} (–æ—Ä–∏–≥–∏–Ω–∞–ª: {self.model_name}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise ValueError(f"–¶–µ–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {mapped_model_name} (–æ—Ä–∏–≥–∏–Ω–∞–ª: {self.model_name}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        input_tokens = self.estimate_tokens(sample_prompt)
        pricing = self.pricing_data[mapped_model_name]

        # –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤
        input_cost = (input_tokens / 1_000_000) * pricing["input"]
        output_cost = (estimated_output_tokens / 1_000_000) * pricing["output"]

        total_cost = input_cost + output_cost

        self.logger.debug(
            f"–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è {self.model_name} (–º–∞–ø–ø–∏–Ω–≥: {mapped_model_name}): "
            f"{input_tokens} input —Ç–æ–∫–µ–Ω–æ–≤ (${input_cost:.6f}) + "
            f"{estimated_output_tokens} output —Ç–æ–∫–µ–Ω–æ–≤ (${output_cost:.6f}) = ${total_cost:.6f}"
        )

        return total_cost

    def estimate_total_cost(
        self,
        sample_prompt: str,
        num_requests: int,
        estimated_output_tokens: int = 100,
        include_quality_evaluation: bool = True,
    ) -> dict[str, float]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        cost_per_request = self.estimate_cost_per_request(
            sample_prompt, estimated_output_tokens
        )
        total_cost = cost_per_request * num_requests

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        quality_cost_per_request = 0.0
        if include_quality_evaluation:
            # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è quality evaluation
            quality_sample = f"Rate question: {sample_prompt[:100]}... Answer: test"
            quality_cost_per_request = self.estimate_cost_per_request(
                quality_sample, 20
            )

        total_quality_cost = quality_cost_per_request * num_requests
        final_total = total_cost + total_quality_cost

        return {
            "generation_cost": total_cost,
            "quality_evaluation_cost": total_quality_cost,
            "total_cost": final_total,
            "cost_per_request": cost_per_request,
            "quality_cost_per_request": quality_cost_per_request,
        }

    def request_cost_confirmation(
        self,
        sample_prompt: str,
        num_requests: int,
        estimated_output_tokens: int = 100,
        include_quality_evaluation: bool = True,
    ) -> bool:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞—Å—Ö–æ–¥—ã"""
        cost_breakdown = self.estimate_total_cost(
            sample_prompt, num_requests, estimated_output_tokens, include_quality_evaluation
        )

        print("\n" + "=" * 60)
        print("üí∞ –û–¶–ï–ù–ö–ê –°–¢–û–ò–ú–û–°–¢–ò API –ó–ê–ü–†–û–°–û–í")
        print("=" * 60)
        print(f"üìù –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {sample_prompt}...")
        print(f"üìä –ú–æ–¥–µ–ª—å: {self.model_name}")
        print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {num_requests:,}")
        print(f"üìè –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å: ~{self.estimate_tokens(sample_prompt)}")
        print(f"üì§ –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å: ~{estimated_output_tokens}")
        print("\nüí∏ –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò:")
        print(f"   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤: ${cost_breakdown['generation_cost']:.6f}")
        if include_quality_evaluation:
            print(f"   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${cost_breakdown['quality_evaluation_cost']:.6f}")
        print("-" * 40)
        print(f"üö® –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: ${cost_breakdown['total_cost']:.6f} USD")
        print("=" * 60)

        # –í—ã–¥–µ–ª—è–µ–º –±–æ–ª—å—à–∏–µ —Å—É–º–º—ã
        if cost_breakdown["total_cost"] > 10.0:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç $10!")
        elif cost_breakdown["total_cost"] > 1.0:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç $1!")

        print("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? (yes/no): ", end="")
        try:
            response = input().strip().lower()
            return response in ["yes", "y", "–¥–∞", "–¥"]
        except KeyboardInterrupt:
            print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False

    def create_fallback_confirmation(self, error_message: str | None = None) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        if error_message:
            print(f"\n‚ö†Ô∏è {error_message}")
        else:
            print("\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å.")
        print("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? (yes/no): ", end="")
        try:
            response = input().strip().lower()
            return response in ["yes", "y", "–¥–∞", "–¥"]
        except KeyboardInterrupt:
            print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False 