Metadata-Version: 2.4
Name: alphabuilder_optimizer
Version: 0.0.1.3
Summary: Alpha optimizer library for quantitative finance research
Home-page: https://alphabuilder.xyz/
Author: Geet Mukherjee
Author-email: mukherjeegeet3@gmail.com
Project-URL: Optimizer, https://alphabuilder.xyz/optimizer
Project-URL: Changelog, https://alphabuilder.xyz/changelog
Project-URL: Documentation, https://alphabuilder.xyz/docs
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Programming Language :: Python :: 3
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: License :: OSI Approved :: MIT License
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: pandas<3.0,>=1.3
Requires-Dist: numpy<2.0,>=1.21
Requires-Dist: requests>=2.28.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: project-url
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# AlphaBuilder-Optimizer

**AlphaBuilder-Optimizer** is an experimental Python package for building and testing optimization tools in trading and portfolio management.  
It provides a clean API interface and serves as a foundation for research, development, and integration into modular trading systems.

---

## Current Status
The project is in its early stages. The current version includes:
- A FastAPI backend for portfolio optimization.
- An equal-weighted strategy as the initial supported method.
- A framework for extending to more optimization approaches.

---

## Planned Features
- **Portfolio Optimization**
  - Classical methods: Markowitz, Black-Litterman, convex optimization.
- **Metaheuristics**
  - Genetic algorithms, simulated annealing, swarm intelligence.
- **Reinforcement Learning**
  - Adaptive and regime-aware optimization approaches. 

---

## Installation
You can install the package directly from PyPI:

```bash
pip install alphabuilder-optimizer
```

## Quickstart Example

```python
# Import
from alphabuilder_optimizer import OptimizerClient

# Initialize client
client = OptimizerClient(api_key="YOUR_API_KEY")

# Run optimization
result = client.optimize(
    idempotency_key="ALPHABUILDER042",
    assets=["asset_A", "asset_B", "asset_C", "asset_D", "asset_E"],
    constraint="equal_weighted",
    risk_free_rate=0.05,
    expected_returns=[0.1, 0.12, 0.15, 0.23, 0.56],
    covariance=[
    [0.1, 0.02, 0.03, 0.04, 0.05],
    [0.02, 0.08, 0.01, 0.06, 0.07],
    [0.03, 0.01, 0.09, 0.02, 0.03],
    [0.04, 0.06, 0.02, 0.11, 0.08],
    [0.05, 0.07, 0.03, 0.08, 0.12]
  ])

print(result) # JSON/dict with optimized portfolio weights

# Retrieve stored items
res = client.get_items()
res
```

## Documentation

Full Optimizing Documentation [Docs](https://alphabuilder.xyz/docs)

Read more about the Optimizer [AlphaBuilder-Optimizer](https://alphabuilder.xyz/optimizer)

Learn more about AlphaBuilder Project [AlphaBuilder](https://alphabuilder.xyz/)
