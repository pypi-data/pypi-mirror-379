[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "django_gauth"
version = "0.1.2"
authors = [
    {name = "Ankit Kumar", email = "ankit.kumar05@telusdigital.com"},
    {name = "Ankit Yadav", email = "ankit8290@gmail.com"},
]
maintainers = [
    {name = "Ankit yadav", email="ankit8290@gmail.com"},
]
description = "A Django app for providing the Google's discovery based Oauth2 authentication mechanism is HTTP/HTTPS oriented Django Servers/Projects."
readme = "pypi.README.md"
license = {file = "LICENSE"}
keywords = ["django_gauth", "google", "oauth2", "auth"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 3.1",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Utilities",
    "Typing :: Typed"
]
requires-python = ">=3.9"
dependencies = [
    "Django>=3.1",
    "google-api-python-client",
    "google-auth-oauthlib",
    "mypy>=1.18.1",
]

[project.urls]
#Homepage = "/"
Documentation = "https://masterpiece93.github.io/django-gauth/"
Repository = "https://github.com/masterPiece93/django-gauth"
Changelog = "https://github.com/masterPiece93/django-gauth/releases"

[project.optional-dependencies]
dev = [

    # building package
    "build==1.2.1",

    # multiple python platforms testing
    "nox==2024.4.15",

    # PyPi Hosting
    "twine==5.1.1",

    # Build Verification
    "check-wheel-contents",

    # Typechecking
    "mypy",

    # Analyzing dependencies
    "graphviz",
    "pipdeptree",
]
lint = [
    # checks for spelling mistakes
    "codespell>=2.2.4",

    # ruff linter checks for issues and potential bugs
    "ruff",

    # checks for unused code
    "vulture",

    # required for codespell to parse pyproject.toml
    "tomli",

    # validation of pyproject.toml
    "validate-pyproject[all]",

    # automatic sorting of imports
    "isort",

    # automatic code formatting to follow a consistent style
    "black",

    # Typechecking
    "mypy",

    # logical linting
    "pylint",
    "pylint-actions",
]

# Tools 
# -----

# PDM example
[tool.pdm]
distribution = true

[tool.pdm.scripts]
isort = "isort src/django_gauth"
black = "black src/django_gauth"
format = {composite = ["isort", "black"]}
check_isort = "isort --check src/django_gauth"
check_black = "black --check src/django_gauth"
vulture = "vulture --min-confidence 100 src/django_gauth"
ruff = "ruff check --show-files src/django_gauth"
fix = "ruff check --fix src/django_gauth"
# codespell = "codespell --toml ./pyproject.toml" # Not Working Properly
lint = {composite = ["vulture", "ruff", "check_isort", "check_black"]}
mypy = "mypy src/"
pylint = "pylint -f actions src/"
check_build = "check-wheel-contents dist/"

[tool.black]
line-length = 88
# If you need to exclude directories from being reformatted by black
# force-exclude = '''
# (
#     somedirname
#     | dirname
#     | filename\.py
# )
# '''


[tool.isort]
profile = "black"
known_first_party = ["acme"]
# If you need to exclude files from having their imports sorted
extend_skip_glob  = [
    "acme/somefile.py",
    "acme/somedir/*",
]


# https://beta.ruff.rs/docs
[tool.ruff]
line-length = 99

# Rules: https://beta.ruff.rs/docs/rules
# If you violate a rule, lookup the rule on the Rules page in ruff docs.
# Many rules have links you can click with a explanation of the rule and how to fix it.
# If there isn't a link, go to the project the rule was source from (e.g. flake8-bugbear)
# and review it's docs for the corresponding rule.
# If you're still confused, ask a fellow developer for assistance.
# You can also run "ruff rule <rule>" to explain a rule on the command line, without a browser or internet access.
select = [
    "E",    # pycodestyle
    "F",    # Pyflakes
    "W",    # Warning
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "T10",  # flake8-debugger
    "EXE",  # flake8-executable,
    "ISC",  # flake8-implicit-str-concat
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "PGH",  # pygrep-hooks
    "PLC",  # Pylint Convention
    "PLE",  # Pylint Errors
    "PLW",  # Pylint Warnings
    "RUF",  # Ruff-specific rules

    # ** Things to potentially enable in the future **
    # DTZ requires all usage of datetime module to have timezone-aware
    # objects (so have a tz argument or be explicitly UTC).
    # "DTZ",  # flake8-datetimez
    # "PTH",  # flake8-use-pathlib
    # "SIM",  # flake8-simplify
]

# Files to exclude from linting
extend-exclude = [
    "*.pyc",
    "__pycache__",
]

# Linting error codes to ignore
ignore = [
    "F403",    # unable to detect undefined names from star imports
    "F405",    # undefined locals from star imports
    "W605",    # invalid escape sequence
    "A003",    # shadowing python builtins
    "RET505",  # unnecessary 'else' after 'return' statement
    "RET504",  # Unnecessary variable assignment before return statement
    "RET507",  # Unnecessary {branch} after continue statement
    "PT011",   # pytest-raises-too-broad
    "PT012",   # pytest.raises() block should contain a single simple statement
    "PLW0603", # Using the global statement to update is discouraged
    "PLW2901", # for loop variable overwritten by assignment target
    "G004",    # Logging statement uses f-string
    "PIE790",  # no-unnecessary-pass
    "PIE810",  # multiple-starts-ends-with
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PLC1901", # compare-to-empty-string
]

# Linting error codes to ignore on a per-file basis
[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "E501"]
"acme/somefile.py" = ["E402", "E501"]
"acme/somedir/*" = ["E501"]

# MyPy
[tool.mypy]
python_version = "3.12"
follow_imports = "skip"
ignore_missing_imports = true
files = "src"  # directory mypy should analyze
exclude = [     # Directories to exclude from mypy's analysis
    "acme/somedir",
    "acme/somefile\\.py",
    "dirname",
    "src/django_gauth/admin\\.py"
]

[[tool.mypy.overrides]]
module = "django_gauth.*"
ignore_missing_imports = false
disallow_untyped_defs = true
check_untyped_defs = true

# Configuration for pytest
# https://docs.pytest.org/en/latest/reference/customize.html#pyproject-toml
[tool.pytest.ini_options]
testpaths = "tests"  # directory containing your tests
norecursedirs = [
    ".vscode",
    "__pycache__"
]
# Warnings that should be ignored
filterwarnings = [
    "ignore::DeprecationWarning"
]
# custom markers that can be used using pytest.mark
markers = [
    "slow: lower-importance tests that take an excessive amount of time",
]


# Configuration for coverage.py
[tool.coverage.run]
# files or directories to exclude from coverage calculations
omit = [
    'acme/somedir/*',
    'acme/somefile.py',
]


# Configuration for vulture
[tool.vulture]
# Files or directories to exclude from vulture
# The syntax is a little funky
exclude = [
    "somedir",
    "*somefile.py",
]

# Configuration for Pylint
[tool.pylint.main]
load-plugins = "pylint_actions" # Optional, for GitHub Actions annotations
disable = [
    "C0114", # Missing module docstring
    "C0116", # Missing function or method docstring
]
max-line-length = 100

[tool.pylint.messages_control]
good-names = ["i", "j", "k", "ex", "Run", "_"]